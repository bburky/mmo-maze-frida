// Image 0: mscorlib.dll - 0
// Image 1: System.dll - 1162
// Image 2: System.Core.dll - 1269
// Image 3: UnityEngine.SharedInternalsModule.dll - 1293
// Image 4: UnityEngine.CoreModule.dll - 1298
// Image 5: UnityEngine.InputLegacyModule.dll - 1844
// Image 6: UnityEngine.PhysicsModule.dll - 1853
// Image 7: UnityEngine.SubsystemsModule.dll - 1874
// Image 8: UnityEngine.TextRenderingModule.dll - 1886
// Image 9: UnityEngine.AudioModule.dll - 1899
// Image 10: UnityEngine.GridModule.dll - 1913
// Image 11: UnityEngine.IMGUIModule.dll - 1915
// Image 12: UnityEngine.Physics2DModule.dll - 1952
// Image 13: UnityEngine.TerrainModule.dll - 1972
// Image 14: UnityEngine.XRModule.dll - 1991
// Image 15: UnityEngine.AIModule.dll - 2018
// Image 16: UnityEngine.AndroidJNIModule.dll - 2022
// Image 17: UnityEngine.AnimationModule.dll - 2036
// Image 18: UnityEngine.AssetBundleModule.dll - 2077
// Image 19: UnityEngine.DirectorModule.dll - 2081
// Image 20: UnityEngine.InputModule.dll - 2083
// Image 21: UnityEngine.ParticleSystemModule.dll - 2088
// Image 22: UnityEngine.SpriteShapeModule.dll - 2099
// Image 23: UnityEngine.TerrainPhysicsModule.dll - 2101
// Image 24: UnityEngine.TextCoreModule.dll - 2103
// Image 25: UnityEngine.TilemapModule.dll - 2118
// Image 26: UnityEngine.UIElementsNativeModule.dll - 2128
// Image 27: UnityEngine.UIModule.dll - 2138
// Image 28: UnityEngine.UnityAnalyticsModule.dll - 2149
// Image 29: UnityEngine.UnityWebRequestModule.dll - 2160
// Image 30: UnityEngine.VFXModule.dll - 2173
// Image 31: UnityEngine.VRModule.dll - 2181
// Image 32: UnityEngine.VideoModule.dll - 2185
// Image 33: UnityEngine.WindModule.dll - 2200
// Image 34: UnityEngine.dll - 2203
// Image 35: VisualDesignCafe.Pooling.dll - 2204
// Image 36: Unity.Postprocessing.Runtime.dll - 2213
// Image 37: Unity.Timeline.dll - 2343
// Image 38: UnityEngine.UI.dll - 2411
// Image 39: VisualDesignCafe.Rendering.dll - 2593
// Image 40: Cinemachine.dll - 2602
// Image 41: MeshExtension.dll - 2758
// Image 42: Unity.TextMeshPro.dll - 2760
// Image 43: VisualDesignCafe.Rendering.Nature.dll - 2895
// Image 44: VisualDesignCafe.Nature.dll - 2934
// Image 45: Assembly-CSharp.dll - 2939

// Namespace: 
internal class <Module> // TypeDefIndex: 0
{}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 1
{
	// Methods
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	public static string GetText(string msg) { }
	// RVA: 0x333DC0 Offset: 0x3325C0 VA: 0x180333DC0
	public static string GetText(string fmt, object[] args) { }
}

// Namespace: 
internal static class SR // TypeDefIndex: 2
{
	// Methods
	// RVA: 0x383C10 Offset: 0x382410 VA: 0x180383C10
	internal static string Format(string resourceFormat, object p1) { }
	// RVA: 0x383D00 Offset: 0x382500 VA: 0x180383D00
	internal static string Format(string resourceFormat, object p1, object p2) { }
}

// Namespace: Mono
public static class Runtime // TypeDefIndex: 3
{
	// Methods
	// RVA: 0x370EC0 Offset: 0x36F6C0 VA: 0x180370EC0
	private static void mono_runtime_install_handlers() { }
	// RVA: 0x370ED0 Offset: 0x36F6D0 VA: 0x180370ED0
	public static void InstallSignalHandlers() { }
	// RVA: 0x370EE0 Offset: 0x36F6E0 VA: 0x180370EE0
	private static void mono_runtime_cleanup_handlers() { }
	// RVA: 0x370EE0 Offset: 0x36F6E0 VA: 0x180370EE0
	public static void RemoveSignalHandlers() { }
	// RVA: 0x370F30 Offset: 0x36F730 VA: 0x180370F30
	public static string GetDisplayName() { }
	// RVA: 0x2644A0 Offset: 0x262CA0 VA: 0x1802644A0
	private static string GetNativeStackTrace(Exception exception) { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20
	public static bool SetGCAllowSynchronousMajor(bool flag) { }
}

// Namespace: Mono
internal struct RuntimeClassHandle // TypeDefIndex: 4
{
	// Fields
	private RuntimeStructs.MonoClass* value; // 0x0

	// Methods
	// RVA: 0x11250 Offset: 0x10650 VA: 0x180011250 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x371360 Offset: 0x36FB60 VA: 0x180371360
	internal static IntPtr GetTypeFromClass(RuntimeStructs.MonoClass* klass) { }
	// RVA: 0x11370 Offset: 0x10770 VA: 0x180011370
	internal RuntimeTypeHandle GetTypeHandle() { }
}

// Namespace: Mono
internal struct RuntimeRemoteClassHandle // TypeDefIndex: 5
{
	// Fields
	private RuntimeStructs.RemoteClass* value; // 0x0
}

// Namespace: Mono
internal struct RuntimeGenericParamInfoHandle // TypeDefIndex: 6
{
	// Fields
	private RuntimeStructs.GenericParamInfo* value; // 0x0

	// Properties
	internal Type[] Constraints { get; }
	internal GenericParameterAttributes Attributes { get; }

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	internal void .ctor(IntPtr ptr) { }
	// RVA: 0x11630 Offset: 0x10A30 VA: 0x180011630
	internal Type[] get_Constraints() { }
	// RVA: 0x11640 Offset: 0x10A40 VA: 0x180011640
	internal GenericParameterAttributes get_Attributes() { }
	// RVA: 0x11630 Offset: 0x10A30 VA: 0x180011630
	private Type[] GetConstraints() { }
	// RVA: 0x11660 Offset: 0x10A60 VA: 0x180011660
	private int GetConstraintsCount() { }
}

// Namespace: Mono
internal struct RuntimeEventHandle // TypeDefIndex: 7
{
	// Fields
	private IntPtr value; // 0x0

	// Methods
	// RVA: 0x11380 Offset: 0x10780 VA: 0x180011380 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Mono
internal struct RuntimePropertyHandle // TypeDefIndex: 8
{
	// Fields
	private IntPtr value; // 0x0

	// Methods
	// RVA: 0x11810 Offset: 0x10C10 VA: 0x180011810 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: Mono
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
internal struct RuntimeGPtrArrayHandle // TypeDefIndex: 9
{
	// Fields
	private RuntimeStructs.GPtrArray* value; // 0x0

	// Properties
	internal int Length { get; }
	internal IntPtr Item { get; }

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	internal void .ctor(IntPtr ptr) { }
	// RVA: 0x11600 Offset: 0x10A00 VA: 0x180011600
	internal int get_Length() { }
	// RVA: 0x11620 Offset: 0x10A20 VA: 0x180011620
	internal IntPtr get_Item(int i) { }
	// RVA: 0x11620 Offset: 0x10A20 VA: 0x180011620
	internal IntPtr Lookup(int i) { }
	// RVA: 0x372650 Offset: 0x370E50 VA: 0x180372650
	private static void GPtrArrayFree(RuntimeStructs.GPtrArray* value) { }
	// RVA: 0x372690 Offset: 0x370E90 VA: 0x180372690
	internal static void DestroyAndFree(ref RuntimeGPtrArrayHandle h) { }
}

// Namespace: Mono
internal static class RuntimeMarshal // TypeDefIndex: 10
{
	// Methods
	// RVA: 0x372B30 Offset: 0x371330 VA: 0x180372B30
	internal static string PtrToUtf8String(IntPtr ptr) { }
	// RVA: 0x372C30 Offset: 0x371430 VA: 0x180372C30
	internal static SafeStringMarshal MarshalString(string str) { }
	// RVA: 0x372C50 Offset: 0x371450 VA: 0x180372C50
	private static int DecodeBlobSize(IntPtr in_ptr, out IntPtr out_ptr) { }
	// RVA: 0x372CB0 Offset: 0x3714B0 VA: 0x180372CB0
	internal static byte[] DecodeBlobArray(IntPtr ptr) { }
	// RVA: 0x372DC0 Offset: 0x3715C0 VA: 0x180372DC0
	internal static int AsciHexDigitValue(int c) { }
	// RVA: 0x372DE0 Offset: 0x3715E0 VA: 0x180372DE0
	internal static void FreeAssemblyName(ref MonoAssemblyName name, bool freeStruct) { }
}

// Namespace: Mono
internal static class RuntimeStructs // TypeDefIndex: 11
{}

// Namespace: 
internal struct RuntimeStructs.RemoteClass // TypeDefIndex: 12
{
	// Fields
	internal IntPtr default_vtable; // 0x0
	internal IntPtr xdomain_vtable; // 0x8
	internal RuntimeStructs.MonoClass* proxy_class; // 0x10
	internal IntPtr proxy_class_name; // 0x18
	internal uint interface_count; // 0x20
}

// Namespace: 
internal struct RuntimeStructs.MonoClass // TypeDefIndex: 13
{}

// Namespace: 
internal struct RuntimeStructs.GenericParamInfo // TypeDefIndex: 14
{
	// Fields
	internal RuntimeStructs.MonoClass* pklass; // 0x0
	internal IntPtr name; // 0x8
	internal ushort flags; // 0x10
	internal uint token; // 0x14
	internal RuntimeStructs.MonoClass** constraints; // 0x18
}

// Namespace: 
internal struct RuntimeStructs.GPtrArray // TypeDefIndex: 15
{
	// Fields
	internal IntPtr* data; // 0x0
	internal int len; // 0x8
}

// Namespace: 
private struct RuntimeStructs.HandleStackMark // TypeDefIndex: 16
{
	// Fields
	private int size; // 0x0
	private int interior_size; // 0x4
	private IntPtr chunk; // 0x8
}

// Namespace: 
private struct RuntimeStructs.MonoError // TypeDefIndex: 17
{
	// Fields
	private ushort error_code; // 0x0
	private ushort hidden_0; // 0x2
	private IntPtr hidden_1; // 0x8
	private IntPtr hidden_2; // 0x10
	private IntPtr hidden_3; // 0x18
	private IntPtr hidden_4; // 0x20
	private IntPtr hidden_5; // 0x28
	private IntPtr hidden_6; // 0x30
	private IntPtr hidden_7; // 0x38
	private IntPtr hidden_8; // 0x40
	private IntPtr hidden_11; // 0x48
	private IntPtr hidden_12; // 0x50
	private IntPtr hidden_13; // 0x58
	private IntPtr hidden_14; // 0x60
	private IntPtr hidden_15; // 0x68
	private IntPtr hidden_16; // 0x70
	private IntPtr hidden_17; // 0x78
	private IntPtr hidden_18; // 0x80
}

// Namespace: Mono
internal struct MonoAssemblyName // TypeDefIndex: 18
{
	// Fields
	internal IntPtr name; // 0x0
	internal IntPtr culture; // 0x8
	internal IntPtr hash_value; // 0x10
	internal IntPtr public_key; // 0x18
	[FixedBufferAttribute] // RVA: 0xD92C0 Offset: 0xD86C0 VA: 0x1800D92C0
	internal MonoAssemblyName.<public_key_token>e__FixedBuffer public_key_token; // 0x20
	internal uint hash_alg; // 0x34
	internal uint hash_len; // 0x38
	internal uint flags; // 0x3C
	internal ushort major; // 0x40
	internal ushort minor; // 0x42
	internal ushort build; // 0x44
	internal ushort revision; // 0x46
	internal ushort arch; // 0x48
}

// Namespace: 
public struct MonoAssemblyName.<public_key_token>e__FixedBuffer // TypeDefIndex: 19
{
	// Fields
	public byte FixedElementField; // 0x0
}

// Namespace: Mono
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
internal struct SafeGPtrArrayHandle : IDisposable // TypeDefIndex: 20
{
	// Fields
	private RuntimeGPtrArrayHandle handle; // 0x0

	// Properties
	internal int Length { get; }
	internal IntPtr Item { get; }

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	internal void .ctor(IntPtr ptr) { }
	// RVA: 0x128C0 Offset: 0x11CC0 VA: 0x1800128C0 Slot: 4
	public void Dispose() { }
	// RVA: 0x11600 Offset: 0x10A00 VA: 0x180011600
	internal int get_Length() { }
	// RVA: 0x11620 Offset: 0x10A20 VA: 0x180011620
	internal IntPtr get_Item(int i) { }
}

// Namespace: Mono
internal struct SafeStringMarshal : IDisposable // TypeDefIndex: 21
{
	// Fields
	private readonly string str; // 0x0
	private IntPtr marshaled_string; // 0x8

	// Properties
	public IntPtr Value { get; }

	// Methods
	// RVA: 0x3855D0 Offset: 0x383DD0 VA: 0x1803855D0
	public static IntPtr StringToUtf8(string str) { }
	// RVA: 0x3856B0 Offset: 0x383EB0 VA: 0x1803856B0
	public static void GFree(IntPtr ptr) { }
	// RVA: 0x129A0 Offset: 0x11DA0 VA: 0x1800129A0
	public void .ctor(string str) { }
	// RVA: 0x129B0 Offset: 0x11DB0 VA: 0x1800129B0
	public IntPtr get_Value() { }
	// RVA: 0x129C0 Offset: 0x11DC0 VA: 0x1800129C0 Slot: 4
	public void Dispose() { }
}

// Namespace: Mono.Xml
internal class SecurityParser : SmallXmlParser, SmallXmlParser.IContentHandler // TypeDefIndex: 22
{
	// Fields
	private SecurityElement root; // 0x68
	private SecurityElement current; // 0x70
	private Stack stack; // 0x78

	// Methods
	// RVA: 0x387AF0 Offset: 0x3862F0 VA: 0x180387AF0
	public void .ctor() { }
	// RVA: 0x387B90 Offset: 0x386390 VA: 0x180387B90
	public void LoadXml(string xml) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 4
	public void OnStartParsing(SmallXmlParser parser) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 8
	public void OnProcessingInstruction(string name, string text) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 10
	public void OnIgnorableWhitespace(string s) { }
	// RVA: 0x387D20 Offset: 0x386520 VA: 0x180387D20 Slot: 6
	public void OnStartElement(string name, SmallXmlParser.IAttrList attrs) { }
	// RVA: 0x387F00 Offset: 0x386700 VA: 0x180387F00 Slot: 7
	public void OnEndElement(string name) { }
	// RVA: 0x387FC0 Offset: 0x3867C0 VA: 0x180387FC0 Slot: 9
	public void OnChars(string ch) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	public void OnEndParsing(SmallXmlParser parser) { }
}

// Namespace: Mono.Xml
internal class SmallXmlParser // TypeDefIndex: 23
{
	// Fields
	private SmallXmlParser.IContentHandler handler; // 0x10
	private TextReader reader; // 0x18
	private Stack elementNames; // 0x20
	private Stack xmlSpaces; // 0x28
	private string xmlSpace; // 0x30
	private StringBuilder buffer; // 0x38
	private char[] nameBuffer; // 0x40
	private bool isWhitespace; // 0x48
	private SmallXmlParser.AttrListImpl attributes; // 0x50
	private int line; // 0x58
	private int column; // 0x5C
	private bool resetColumn; // 0x60

	// Methods
	// RVA: 0x1E05A0 Offset: 0x1DEDA0 VA: 0x1801E05A0
	public void .ctor() { }
	// RVA: 0x1E0750 Offset: 0x1DEF50 VA: 0x1801E0750
	private Exception Error(string msg) { }
	// RVA: 0x1E0900 Offset: 0x1DF100 VA: 0x1801E0900
	private Exception UnexpectedEndError() { }
	// RVA: 0x1E0A30 Offset: 0x1DF230 VA: 0x1801E0A30
	private bool IsNameChar(char c, bool start) { }
	// RVA: 0x1E0B80 Offset: 0x1DF380 VA: 0x1801E0B80
	private bool IsWhitespace(int c) { }
	// RVA: 0x1E0BA0 Offset: 0x1DF3A0 VA: 0x1801E0BA0
	public void SkipWhitespaces() { }
	// RVA: 0x1E0BB0 Offset: 0x1DF3B0 VA: 0x1801E0BB0
	private void HandleWhitespaces() { }
	// RVA: 0x1E0D00 Offset: 0x1DF500 VA: 0x1801E0D00
	public void SkipWhitespaces(bool expected) { }
	// RVA: 0x1E0E30 Offset: 0x1DF630 VA: 0x1801E0E30
	private int Peek() { }
	// RVA: 0x1E0E60 Offset: 0x1DF660 VA: 0x1801E0E60
	private int Read() { }
	// RVA: 0x1E0EC0 Offset: 0x1DF6C0 VA: 0x1801E0EC0
	public void Expect(int c) { }
	// RVA: 0x1E1010 Offset: 0x1DF810 VA: 0x1801E1010
	private string ReadUntil(char until, bool handleReferences) { }
	// RVA: 0x1E11E0 Offset: 0x1DF9E0 VA: 0x1801E11E0
	public string ReadName() { }
	// RVA: 0x1E1410 Offset: 0x1DFC10 VA: 0x1801E1410
	public void Parse(TextReader input, SmallXmlParser.IContentHandler handler) { }
	// RVA: 0x1E1600 Offset: 0x1DFE00 VA: 0x1801E1600
	private void Cleanup() { }
	// RVA: 0x1E1690 Offset: 0x1DFE90 VA: 0x1801E1690
	public void ReadContent() { }
	// RVA: 0x1E1FD0 Offset: 0x1E07D0 VA: 0x1801E1FD0
	private void HandleBufferedContent() { }
	// RVA: 0x1E20C0 Offset: 0x1E08C0 VA: 0x1801E20C0
	private void ReadCharacters() { }
	// RVA: 0x1E2230 Offset: 0x1E0A30 VA: 0x1801E2230
	private void ReadReference() { }
	// RVA: 0x1E2690 Offset: 0x1E0E90 VA: 0x1801E2690
	private int ReadCharacterReference() { }
	// RVA: 0x1E2810 Offset: 0x1E1010 VA: 0x1801E2810
	private void ReadAttribute(SmallXmlParser.AttrListImpl a) { }
	// RVA: 0x1E2AB0 Offset: 0x1E12B0 VA: 0x1801E2AB0
	private void ReadCDATASection() { }
	// RVA: 0x1E2E10 Offset: 0x1E1610 VA: 0x1801E2E10
	private void ReadComment() { }
}

// Namespace: 
public interface SmallXmlParser.IContentHandler // TypeDefIndex: 24
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnStartParsing(SmallXmlParser parser) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void OnEndParsing(SmallXmlParser parser) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void OnStartElement(string name, SmallXmlParser.IAttrList attrs) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void OnEndElement(string name) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void OnProcessingInstruction(string name, string text) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract void OnChars(string text) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract void OnIgnorableWhitespace(string text) { }
}

// Namespace: 
public interface SmallXmlParser.IAttrList // TypeDefIndex: 25
{
	// Properties
	public abstract int Length { get; }
	public abstract string[] Names { get; }
	public abstract string[] Values { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_Length() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract string GetName(int i) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract string GetValue(int i) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract string GetValue(string name) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract string[] get_Names() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract string[] get_Values() { }
}

// Namespace: 
private class SmallXmlParser.AttrListImpl : SmallXmlParser.IAttrList // TypeDefIndex: 26
{
	// Fields
	private List<string> attrNames; // 0x10
	private List<string> attrValues; // 0x18

	// Properties
	public int Length { get; }
	public string[] Names { get; }
	public string[] Values { get; }

	// Methods
	// RVA: 0x1E7080 Offset: 0x1E5880 VA: 0x1801E7080 Slot: 4
	public int get_Length() { }
	// RVA: 0x2751F0 Offset: 0x2739F0 VA: 0x1802751F0 Slot: 5
	public string GetName(int i) { }
	// RVA: 0x275290 Offset: 0x273A90 VA: 0x180275290 Slot: 6
	public string GetValue(int i) { }
	// RVA: 0x275330 Offset: 0x273B30 VA: 0x180275330 Slot: 7
	public string GetValue(string name) { }
	// RVA: 0x2754A0 Offset: 0x273CA0 VA: 0x1802754A0 Slot: 8
	public string[] get_Names() { }
	// RVA: 0x275530 Offset: 0x273D30 VA: 0x180275530 Slot: 9
	public string[] get_Values() { }
	// RVA: 0x2755C0 Offset: 0x273DC0 VA: 0x1802755C0
	internal void Clear() { }
	// RVA: 0x275690 Offset: 0x273E90 VA: 0x180275690
	internal void Add(string name, string value) { }
	// RVA: 0x275750 Offset: 0x273F50 VA: 0x180275750
	public void .ctor() { }
}

// Namespace: Mono.Xml
internal class SmallXmlParserException : SystemException // TypeDefIndex: 27
{
	// Fields
	private int line; // 0x88
	private int column; // 0x8C

	// Methods
	// RVA: 0x1E2FB0 Offset: 0x1E17B0 VA: 0x1801E2FB0
	public void .ctor(string msg, int line, int column) { }
}

// Namespace: Mono.Globalization.Unicode
internal class CodePointIndexer // TypeDefIndex: 28
{
	// Fields
	private readonly CodePointIndexer.TableRange[] ranges; // 0x10
	public readonly int TotalCount; // 0x18
	private int defaultIndex; // 0x1C
	private int defaultCP; // 0x20

	// Methods
	// RVA: 0x258390 Offset: 0x256B90 VA: 0x180258390
	public void .ctor(int[] starts, int[] ends, int defaultIndex, int defaultCP) { }
	// RVA: 0x2585A0 Offset: 0x256DA0 VA: 0x1802585A0
	public int ToIndex(int cp) { }
}

// Namespace: 
[Serializable]
internal struct CodePointIndexer.TableRange // TypeDefIndex: 29
{
	// Fields
	public readonly int Start; // 0x0
	public readonly int End; // 0x4
	public readonly int Count; // 0x8
	public readonly int IndexStart; // 0xC
	public readonly int IndexEnd; // 0x10

	// Methods
	// RVA: 0xB4E0 Offset: 0xA8E0 VA: 0x18000B4E0
	public void .ctor(int start, int end, int indexStart) { }
}

// Namespace: Mono.Globalization.Unicode
internal class TailoringInfo // TypeDefIndex: 30
{
	// Fields
	public readonly int LCID; // 0x10
	public readonly int TailoringIndex; // 0x14
	public readonly int TailoringCount; // 0x18
	public readonly bool FrenchSort; // 0x1C

	// Methods
	// RVA: 0x3906B0 Offset: 0x38EEB0 VA: 0x1803906B0
	public void .ctor(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort) { }
}

// Namespace: Mono.Globalization.Unicode
internal class Contraction // TypeDefIndex: 31
{
	// Fields
	public int Index; // 0x10
	public readonly char[] Source; // 0x18
	public readonly string Replacement; // 0x20
	public readonly byte[] SortKey; // 0x28

	// Methods
	// RVA: 0x3EA4C0 Offset: 0x3E8CC0 VA: 0x1803EA4C0
	public void .ctor(int index, char[] source, string replacement, byte[] sortkey) { }
}

// Namespace: Mono.Globalization.Unicode
internal class ContractionComparer : IComparer<Contraction> // TypeDefIndex: 32
{
	// Fields
	public static readonly ContractionComparer Instance; // 0xABD80

	// Methods
	// RVA: 0x3EA4E0 Offset: 0x3E8CE0 VA: 0x1803EA4E0 Slot: 4
	public int Compare(Contraction c1, Contraction c2) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x3EA5C0 Offset: 0x3E8DC0 VA: 0x1803EA5C0
	private static void .cctor() { }
}

// Namespace: Mono.Globalization.Unicode
internal class Level2Map // TypeDefIndex: 33
{
	// Fields
	public byte Source; // 0x10
	public byte Replace; // 0x11

	// Methods
	// RVA: 0x333100 Offset: 0x331900 VA: 0x180333100
	public void .ctor(byte source, byte replace) { }
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTable // TypeDefIndex: 34
{
	// Fields
	public static int MaxExpansionLength; // 0x0
	private static readonly byte* ignorableFlags; // 0x8
	private static readonly byte* categories; // 0x10
	private static readonly byte* level1; // 0x18
	private static readonly byte* level2; // 0x20
	private static readonly byte* level3; // 0x28
	private static byte* cjkCHScategory; // 0x30
	private static byte* cjkCHTcategory; // 0x38
	private static byte* cjkJAcategory; // 0x40
	private static byte* cjkKOcategory; // 0x48
	private static byte* cjkCHSlv1; // 0x50
	private static byte* cjkCHTlv1; // 0x58
	private static byte* cjkJAlv1; // 0x60
	private static byte* cjkKOlv1; // 0x68
	private static byte* cjkKOlv2; // 0x70
	private static readonly char[] tailoringArr; // 0x78
	private static readonly TailoringInfo[] tailoringInfos; // 0x80
	private static object forLock; // 0x88
	public static readonly bool isReady; // 0x90

	// Methods
	// RVA: 0x335940 Offset: 0x334140 VA: 0x180335940
	public static TailoringInfo GetTailoringInfo(int lcid) { }
	// RVA: 0x335AD0 Offset: 0x3342D0 VA: 0x180335AD0
	public static void BuildTailoringTables(CultureInfo culture, TailoringInfo t, ref Contraction[] contractions, ref Level2Map[] diacriticals) { }
	// RVA: 0x3360B0 Offset: 0x3348B0 VA: 0x1803360B0
	private static void SetCJKReferences(string name, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }
	// RVA: 0x336580 Offset: 0x334D80 VA: 0x180336580
	public static byte Category(int cp) { }
	// RVA: 0x336670 Offset: 0x334E70 VA: 0x180336670
	public static byte Level1(int cp) { }
	// RVA: 0x336760 Offset: 0x334F60 VA: 0x180336760
	public static byte Level2(int cp) { }
	// RVA: 0x336850 Offset: 0x335050 VA: 0x180336850
	public static byte Level3(int cp) { }
	// RVA: 0x336940 Offset: 0x335140 VA: 0x180336940
	public static bool IsIgnorable(int cp, byte flag) { }
	// RVA: 0x336AB0 Offset: 0x3352B0 VA: 0x180336AB0
	public static bool IsIgnorableNonSpacing(int cp) { }
	// RVA: 0x336B40 Offset: 0x335340 VA: 0x180336B40
	public static int ToKanaTypeInsensitive(int i) { }
	// RVA: 0x336B60 Offset: 0x335360 VA: 0x180336B60
	public static int ToWidthCompat(int i) { }
	// RVA: 0x336CE0 Offset: 0x3354E0 VA: 0x180336CE0
	public static bool HasSpecialWeight(char c) { }
	// RVA: 0x336D50 Offset: 0x335550 VA: 0x180336D50
	public static bool IsHalfWidthKana(char c) { }
	// RVA: 0x336D70 Offset: 0x335570 VA: 0x180336D70
	public static bool IsHiragana(char c) { }
	// RVA: 0x336D90 Offset: 0x335590 VA: 0x180336D90
	public static bool IsJapaneseSmallLetter(char c) { }
	// RVA: 0x336F00 Offset: 0x335700 VA: 0x180336F00
	private static IntPtr GetResource(string name) { }
	// RVA: 0x336FA0 Offset: 0x3357A0 VA: 0x180336FA0
	private static uint UInt32FromBytePtr(byte* raw, uint idx) { }
	// RVA: 0x336FE0 Offset: 0x3357E0 VA: 0x180336FE0
	private static void .cctor() { }
	// RVA: 0x3374F0 Offset: 0x335CF0 VA: 0x1803374F0
	public static void FillCJK(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }
	// RVA: 0x337780 Offset: 0x335F80 VA: 0x180337780
	private static void FillCJKCore(string culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer cjkLv2Indexer, ref byte* lv2Table) { }
}

// Namespace: 
[Serializable]
private sealed class MSCompatUnicodeTable.<>c // TypeDefIndex: 35
{
	// Fields
	public static readonly MSCompatUnicodeTable.<>c <>9; // 0x0
	public static Comparison<Level2Map> <>9__17_0; // 0x8

	// Methods
	// RVA: 0x272130 Offset: 0x270930 VA: 0x180272130
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x2721B0 Offset: 0x2709B0 VA: 0x1802721B0
	internal int <BuildTailoringTables>b__17_0(Level2Map a, Level2Map b) { }
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTableUtil // TypeDefIndex: 36
{
	// Fields
	public static readonly CodePointIndexer Ignorable; // 0x0
	public static readonly CodePointIndexer Category; // 0x8
	public static readonly CodePointIndexer Level1; // 0x10
	public static readonly CodePointIndexer Level2; // 0x18
	public static readonly CodePointIndexer Level3; // 0x20
	public static readonly CodePointIndexer CjkCHS; // 0x28
	public static readonly CodePointIndexer Cjk; // 0x30

	// Methods
	// RVA: 0x337FF0 Offset: 0x3367F0 VA: 0x180337FF0
	private static void .cctor() { }
}

// Namespace: Mono.Globalization.Unicode
internal class NormalizationTableUtil // TypeDefIndex: 37
{
	// Fields
	public static readonly CodePointIndexer Prop; // 0x0
	public static readonly CodePointIndexer Map; // 0x8
	public static readonly CodePointIndexer Combining; // 0x10
	public static readonly CodePointIndexer Composite; // 0x18
	public static readonly CodePointIndexer Helper; // 0x20

	// Methods
	// RVA: 0x748F00 Offset: 0x747700 VA: 0x180748F00
	private static void .cctor() { }
	// RVA: 0x749250 Offset: 0x747A50 VA: 0x180749250
	public static int PropIdx(int cp) { }
	// RVA: 0x749300 Offset: 0x747B00 VA: 0x180749300
	public static int MapIdx(int cp) { }
}

// Namespace: Mono.Globalization.Unicode
internal class SimpleCollator // TypeDefIndex: 38
{
	// Fields
	private static bool QuickCheckDisabled; // 0x0
	private static SimpleCollator invariant; // 0x8
	private readonly TextInfo textInfo; // 0x10
	private readonly CodePointIndexer cjkIndexer; // 0x18
	private readonly Contraction[] contractions; // 0x20
	private readonly Level2Map[] level2Maps; // 0x28
	private readonly byte[] unsafeFlags; // 0x30
	private readonly byte* cjkCatTable; // 0x38
	private readonly byte* cjkLv1Table; // 0x40
	private readonly byte* cjkLv2Table; // 0x48
	private readonly CodePointIndexer cjkLv2Indexer; // 0x50
	private readonly int lcid; // 0x58
	private readonly bool frenchSort; // 0x5C
	private const int UnsafeFlagLength = 96; // 0x0

	// Methods
	// RVA: 0x1D91D0 Offset: 0x1D79D0 VA: 0x1801D91D0
	public void .ctor(CultureInfo culture) { }
	// RVA: 0x1D96B0 Offset: 0x1D7EB0 VA: 0x1801D96B0
	private void SetCJKTable(CultureInfo culture, ref CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref CodePointIndexer lv2Indexer, ref byte* lv2Table) { }
	// RVA: 0x1D9830 Offset: 0x1D8030 VA: 0x1801D9830
	private static CultureInfo GetNeutralCulture(CultureInfo info) { }
	// RVA: 0x1D98B0 Offset: 0x1D80B0 VA: 0x1801D98B0
	private byte Category(int cp) { }
	// RVA: 0x1D9990 Offset: 0x1D8190 VA: 0x1801D9990
	private byte Level1(int cp) { }
	// RVA: 0x1D9A70 Offset: 0x1D8270 VA: 0x1801D9A70
	private byte Level2(int cp, SimpleCollator.ExtenderType ext) { }
	// RVA: 0x1D9C00 Offset: 0x1D8400 VA: 0x1801D9C00
	private static bool IsHalfKana(int cp, CompareOptions opt) { }
	// RVA: 0x1D9CD0 Offset: 0x1D84D0 VA: 0x1801D9CD0
	private Contraction GetContraction(string s, int start, int end) { }
	// RVA: 0x1D9DF0 Offset: 0x1D85F0 VA: 0x1801D9DF0
	private Contraction GetContraction(string s, int start, int end, Contraction[] clist) { }
	// RVA: 0x1D9F40 Offset: 0x1D8740 VA: 0x1801D9F40
	private Contraction GetTailContraction(string s, int start, int end) { }
	// RVA: 0x1DA060 Offset: 0x1D8860 VA: 0x1801DA060
	private Contraction GetTailContraction(string s, int start, int end, Contraction[] clist) { }
	// RVA: 0x1DA2C0 Offset: 0x1D8AC0 VA: 0x1801DA2C0
	private int FilterOptions(int i, CompareOptions opt) { }
	// RVA: 0x1DA5C0 Offset: 0x1D8DC0 VA: 0x1801DA5C0
	private SimpleCollator.ExtenderType GetExtenderType(int i) { }
	// RVA: 0x1DA670 Offset: 0x1D8E70 VA: 0x1801DA670
	private static byte ToDashTypeValue(SimpleCollator.ExtenderType ext, CompareOptions opt) { }
	// RVA: 0x1DA690 Offset: 0x1D8E90 VA: 0x1801DA690
	private int FilterExtender(int i, SimpleCollator.ExtenderType ext, CompareOptions opt) { }
	// RVA: 0x1DA880 Offset: 0x1D9080 VA: 0x1801DA880
	private static bool IsIgnorable(int i, CompareOptions opt) { }
	// RVA: 0x1DA950 Offset: 0x1D9150 VA: 0x1801DA950
	private bool IsSafe(int i) { }
	// RVA: 0x1DA9C0 Offset: 0x1D91C0 VA: 0x1801DA9C0
	public SortKey GetSortKey(string s, CompareOptions options) { }
	// RVA: 0x1DAAE0 Offset: 0x1D92E0 VA: 0x1801DAAE0
	public SortKey GetSortKey(string s, int start, int length, CompareOptions options) { }
	// RVA: 0x1DAC10 Offset: 0x1D9410 VA: 0x1801DAC10
	private void GetSortKey(string s, int start, int end, SortKeyBuffer buf, CompareOptions opt) { }
	// RVA: 0x1DB000 Offset: 0x1D9800 VA: 0x1801DB000
	private void FillSortKeyRaw(int i, SimpleCollator.ExtenderType ext, SortKeyBuffer buf, CompareOptions opt) { }
	// RVA: 0x1DB4D0 Offset: 0x1D9CD0 VA: 0x1801DB4D0
	private void FillSurrogateSortKeyRaw(int i, SortKeyBuffer buf) { }
	// RVA: 0x1DB580 Offset: 0x1D9D80 VA: 0x1801DB580
	internal int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, CompareOptions options) { }
	// RVA: 0x1DB680 Offset: 0x1D9E80 VA: 0x1801DB680
	private void ClearBuffer(byte* buffer, int size) { }
	// RVA: 0x1DB6A0 Offset: 0x1D9EA0 VA: 0x1801DB6A0
	private int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool targetConsumed, out bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref SimpleCollator.Context ctx) { }
	// RVA: 0x1DC860 Offset: 0x1DB060 VA: 0x1801DC860
	private int CompareFlagPair(bool b1, bool b2) { }
	// RVA: 0x1DC880 Offset: 0x1DB080 VA: 0x1801DC880
	public bool IsPrefix(string src, string target, CompareOptions opt) { }
	// RVA: 0x1DC8C0 Offset: 0x1DB0C0 VA: 0x1801DC8C0
	public bool IsPrefix(string s, string target, int start, int length, CompareOptions opt) { }
	// RVA: 0x1DC9C0 Offset: 0x1DB1C0 VA: 0x1801DC9C0
	private bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref SimpleCollator.Context ctx) { }
	// RVA: 0x1DCA40 Offset: 0x1DB240 VA: 0x1801DCA40
	public bool IsSuffix(string src, string target, CompareOptions opt) { }
	// RVA: 0x1DCB00 Offset: 0x1DB300 VA: 0x1801DCB00
	public bool IsSuffix(string s, string target, int start, int length, CompareOptions opt) { }
	// RVA: 0x1DCBC0 Offset: 0x1DB3C0 VA: 0x1801DCBC0
	private int QuickIndexOf(string s, string target, int start, int length, out bool testWasUnable) { }
	// RVA: 0x1DCD00 Offset: 0x1DB500 VA: 0x1801DCD00
	public int IndexOf(string s, string target, int start, int length, CompareOptions opt) { }
	// RVA: 0x1DD000 Offset: 0x1DB800 VA: 0x1801DD000
	private int IndexOfOrdinal(string s, string target, int start, int length) { }
	// RVA: 0x1DD0C0 Offset: 0x1DB8C0 VA: 0x1801DD0C0
	private int IndexOfOrdinal(string s, char target, int start, int length) { }
	// RVA: 0x1DD140 Offset: 0x1DB940 VA: 0x1801DD140
	private int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref SimpleCollator.Context ctx) { }
	// RVA: 0x1DD200 Offset: 0x1DBA00 VA: 0x1801DD200
	private int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref SimpleCollator.Context ctx) { }
	// RVA: 0x1DD740 Offset: 0x1DBF40 VA: 0x1801DD740
	public int LastIndexOf(string s, string target, int start, int length, CompareOptions opt) { }
	// RVA: 0x1DD910 Offset: 0x1DC110 VA: 0x1801DD910
	private int LastIndexOfOrdinal(string s, string target, int start, int length) { }
	// RVA: 0x1DDA40 Offset: 0x1DC240 VA: 0x1801DDA40
	private int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref SimpleCollator.Context ctx) { }
	// RVA: 0x1DDB10 Offset: 0x1DC310 VA: 0x1801DDB10
	private int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref SimpleCollator.Context ctx) { }
	// RVA: 0x1DE030 Offset: 0x1DC830 VA: 0x1801DE030
	private bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref SimpleCollator.Context ctx) { }
	// RVA: 0x1DE200 Offset: 0x1DCA00 VA: 0x1801DE200
	private bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, SimpleCollator.ExtenderType ext, ref Contraction ct, ref SimpleCollator.Context ctx) { }
	// RVA: 0x1DE5E0 Offset: 0x1DCDE0 VA: 0x1801DE5E0
	private bool MatchesPrimitive(CompareOptions opt, byte* source, int si, SimpleCollator.ExtenderType ext, byte* target, int ti, bool noLv4) { }
	// RVA: 0x1DE830 Offset: 0x1DD030 VA: 0x1801DE830
	private bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref SimpleCollator.Context ctx) { }
	// RVA: 0x1DEA10 Offset: 0x1DD210 VA: 0x1801DEA10
	private bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, SimpleCollator.ExtenderType ext, ref Contraction ct, ref SimpleCollator.Context ctx) { }
	// RVA: 0x1DF020 Offset: 0x1DD820 VA: 0x1801DF020
	private static void .cctor() { }
}

// Namespace: 
internal struct SimpleCollator.Context // TypeDefIndex: 39
{
	// Fields
	public readonly CompareOptions Option; // 0x0
	public readonly byte* NeverMatchFlags; // 0x8
	public readonly byte* AlwaysMatchFlags; // 0x10
	public byte* Buffer1; // 0x18
	public byte* Buffer2; // 0x20
	public int PrevCode; // 0x28
	public byte* PrevSortKey; // 0x30

	// Methods
	// RVA: 0xBCC0 Offset: 0xB0C0 VA: 0x18000BCC0
	public void .ctor(CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1) { }
}

// Namespace: 
private struct SimpleCollator.PreviousInfo // TypeDefIndex: 40
{
	// Fields
	public int Code; // 0x0
	public byte* SortKey; // 0x8

	// Methods
	// RVA: 0xBDC0 Offset: 0xB1C0 VA: 0x18000BDC0
	public void .ctor(bool dummy) { }
}

// Namespace: 
private struct SimpleCollator.Escape // TypeDefIndex: 41
{
	// Fields
	public string Source; // 0x0
	public int Index; // 0x8
	public int Start; // 0xC
	public int End; // 0x10
	public int Optional; // 0x14
}

// Namespace: 
private enum SimpleCollator.ExtenderType // TypeDefIndex: 42
{
	// Fields
	public int value__; // 0x0
	public const SimpleCollator.ExtenderType None = 0; // 0x0
	public const SimpleCollator.ExtenderType Simple = 1; // 0x0
	public const SimpleCollator.ExtenderType Voiced = 2; // 0x0
	public const SimpleCollator.ExtenderType Conditional = 3; // 0x0
	public const SimpleCollator.ExtenderType Buggy = 4; // 0x0
}

// Namespace: Mono.Globalization.Unicode
internal class SortKeyBuffer // TypeDefIndex: 43
{
	// Fields
	private byte[] l1b; // 0x10
	private byte[] l2b; // 0x18
	private byte[] l3b; // 0x20
	private byte[] l4sb; // 0x28
	private byte[] l4tb; // 0x30
	private byte[] l4kb; // 0x38
	private byte[] l4wb; // 0x40
	private byte[] l5b; // 0x48
	private string source; // 0x50
	private int l1; // 0x58
	private int l2; // 0x5C
	private int l3; // 0x60
	private int l4s; // 0x64
	private int l4t; // 0x68
	private int l4k; // 0x6C
	private int l4w; // 0x70
	private int l5; // 0x74
	private int lcid; // 0x78
	private CompareOptions options; // 0x7C
	private bool processLevel2; // 0x80
	private bool frenchSort; // 0x81
	private bool frenchSorted; // 0x82

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor(int lcid) { }
	// RVA: 0x1E5C60 Offset: 0x1E4460 VA: 0x1801E5C60
	public void Reset() { }
	// RVA: 0x1E5C80 Offset: 0x1E4480 VA: 0x1801E5C80
	internal void Initialize(CompareOptions options, int lcid, string s, bool frenchSort) { }
	// RVA: 0x1E5E40 Offset: 0x1E4640 VA: 0x1801E5E40
	internal void AppendCJKExtension(byte lv1msb, byte lv1lsb) { }
	// RVA: 0x1E5F20 Offset: 0x1E4720 VA: 0x1801E5F20
	internal void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth) { }
	// RVA: 0x1E5FF0 Offset: 0x1E47F0 VA: 0x1801E5FF0
	internal void AppendNormal(byte category, byte lv1, byte lv2, byte lv3) { }
	// RVA: 0x1E6210 Offset: 0x1E4A10 VA: 0x1801E6210
	private void AppendLevel5(byte category, byte lv1) { }
	// RVA: 0x1E62F0 Offset: 0x1E4AF0 VA: 0x1801E62F0
	private void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx) { }
	// RVA: 0x1E63E0 Offset: 0x1E4BE0 VA: 0x1801E63E0
	public SortKey GetResultAndReset() { }
	// RVA: 0x1E6410 Offset: 0x1E4C10 VA: 0x1801E6410
	private int GetOptimizedLength(byte[] data, int len, byte defaultValue) { }
	// RVA: 0x1E6470 Offset: 0x1E4C70 VA: 0x1801E6470
	public SortKey GetResult() { }
}

// Namespace: Mono.Security
internal sealed class BitConverterLE // TypeDefIndex: 44
{
	// Methods
	// RVA: 0x2E36B0 Offset: 0x2E1EB0 VA: 0x1802E36B0
	private static byte[] GetUIntBytes(byte* bytes) { }
	// RVA: 0x2E3870 Offset: 0x2E2070 VA: 0x1802E3870
	private static byte[] GetULongBytes(byte* bytes) { }
	// RVA: 0x2E3B40 Offset: 0x2E2340 VA: 0x1802E3B40
	internal static byte[] GetBytes(float value) { }
	// RVA: 0x2E3B60 Offset: 0x2E2360 VA: 0x1802E3B60
	internal static byte[] GetBytes(double value) { }
	// RVA: 0x2E3B80 Offset: 0x2E2380 VA: 0x1802E3B80
	private static void UIntFromBytes(byte* dst, byte[] src, int startIndex) { }
	// RVA: 0x2E3D80 Offset: 0x2E2580 VA: 0x1802E3D80
	private static void ULongFromBytes(byte* dst, byte[] src, int startIndex) { }
	// RVA: 0x2E3EB0 Offset: 0x2E26B0 VA: 0x1802E3EB0
	internal static float ToSingle(byte[] value, int startIndex) { }
	// RVA: 0x2E3EE0 Offset: 0x2E26E0 VA: 0x1802E3EE0
	internal static double ToDouble(byte[] value, int startIndex) { }
}

// Namespace: Microsoft.Win32
internal interface IRegistryApi // TypeDefIndex: 45
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writtable) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Flush(RegistryKey rkey) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Close(RegistryKey rkey) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract string[] GetSubKeyNames(RegistryKey rkey) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract string ToString(RegistryKey rkey) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract IntPtr GetHandle(RegistryKey key) { }
}

// Namespace: Microsoft.Win32
public static class Registry // TypeDefIndex: 46
{
	// Fields
	public static readonly RegistryKey ClassesRoot; // 0x0
	public static readonly RegistryKey CurrentConfig; // 0x8
	public static readonly RegistryKey CurrentUser; // 0x10
	[ObsoleteAttribute] // RVA: 0xD9350 Offset: 0xD8750 VA: 0x1800D9350
	public static readonly RegistryKey DynData; // 0x18
	public static readonly RegistryKey LocalMachine; // 0x20
	public static readonly RegistryKey PerformanceData; // 0x28
	public static readonly RegistryKey Users; // 0x30

	// Methods
	// RVA: 0x322FC0 Offset: 0x3217C0 VA: 0x180322FC0
	private static void .cctor() { }
}

// Namespace: Microsoft.Win32
[Serializable]
public enum RegistryHive // TypeDefIndex: 47
{
	// Fields
	public int value__; // 0x0
	public const RegistryHive ClassesRoot = -2147483648; // 0x0
	public const RegistryHive CurrentConfig = -2147483643; // 0x0
	public const RegistryHive CurrentUser = -2147483647; // 0x0
	public const RegistryHive DynData = -2147483642; // 0x0
	public const RegistryHive LocalMachine = -2147483646; // 0x0
	public const RegistryHive PerformanceData = -2147483644; // 0x0
	public const RegistryHive Users = -2147483645; // 0x0
}

// Namespace: Microsoft.Win32
public sealed class RegistryKey : MarshalByRefObject, IDisposable // TypeDefIndex: 48
{
	// Fields
	private object handle; // 0x18
	private SafeRegistryHandle safe_handle; // 0x20
	private object hive; // 0x28
	private readonly string qname; // 0x30
	private readonly bool isRemoteRoot; // 0x38
	private readonly bool isWritable; // 0x39
	private static readonly IRegistryApi RegistryApi; // 0x0

	// Properties
	public SafeRegistryHandle Handle { get; }
	internal bool IsRoot { get; }
	internal RegistryHive Hive { get; }

	// Methods
	// RVA: 0x3232E0 Offset: 0x321AE0 VA: 0x1803232E0
	private static void .cctor() { }
	// RVA: 0x323460 Offset: 0x321C60 VA: 0x180323460
	internal void .ctor(RegistryHive hiveId) { }
	// RVA: 0x323480 Offset: 0x321C80 VA: 0x180323480
	internal void .ctor(RegistryHive hiveId, IntPtr keyHandle, bool remoteRoot) { }
	// RVA: 0x3236C0 Offset: 0x321EC0 VA: 0x1803236C0
	internal void .ctor(object data, string keyName, bool writable) { }
	// RVA: 0x3236D0 Offset: 0x321ED0 VA: 0x1803236D0
	internal static bool IsEquals(RegistryKey a, RegistryKey b) { }
	// RVA: 0x3237C0 Offset: 0x321FC0 VA: 0x1803237C0 Slot: 6
	public void Dispose() { }
	// RVA: 0x3239B0 Offset: 0x3221B0 VA: 0x1803239B0
	public void Flush() { }
	// RVA: 0x323A70 Offset: 0x322270 VA: 0x180323A70
	public void Close() { }
	// RVA: 0x323BE0 Offset: 0x3223E0 VA: 0x180323BE0
	public SafeRegistryHandle get_Handle() { }
	// RVA: 0x323D50 Offset: 0x322550 VA: 0x180323D50
	public RegistryKey OpenSubKey(string name) { }
	// RVA: 0x323D60 Offset: 0x322560 VA: 0x180323D60
	public RegistryKey OpenSubKey(string name, bool writable) { }
	// RVA: 0x323F90 Offset: 0x322790 VA: 0x180323F90
	public object GetValue(string name) { }
	// RVA: 0x3240F0 Offset: 0x3228F0 VA: 0x1803240F0
	public object GetValue(string name, object defaultValue) { }
	// RVA: 0x324250 Offset: 0x322A50 VA: 0x180324250
	public string[] GetSubKeyNames() { }
	// RVA: 0x324380 Offset: 0x322B80 VA: 0x180324380 Slot: 3
	public override string ToString() { }
	// RVA: 0x3244B0 Offset: 0x322CB0 VA: 0x1803244B0
	internal bool get_IsRoot() { }
	// RVA: 0x3244C0 Offset: 0x322CC0 VA: 0x1803244C0
	internal RegistryHive get_Hive() { }
	// RVA: 0x324580 Offset: 0x322D80 VA: 0x180324580
	private void AssertKeyStillValid() { }
	// RVA: 0x324620 Offset: 0x322E20 VA: 0x180324620
	private void AssertKeyNameLength(string name) { }
	// RVA: 0x3246D0 Offset: 0x322ED0 VA: 0x1803246D0
	internal static string DecodeString(byte[] data) { }
	// RVA: 0x3247C0 Offset: 0x322FC0 VA: 0x1803247C0
	internal static IOException CreateMarkedForDeletionException() { }
	// RVA: 0x324820 Offset: 0x323020 VA: 0x180324820
	private static string GetHiveName(RegistryHive hive) { }
}

// Namespace: Microsoft.Win32
public enum RegistryValueKind // TypeDefIndex: 49
{
	// Fields
	public int value__; // 0x0
	public const RegistryValueKind Unknown = 0; // 0x0
	public const RegistryValueKind String = 1; // 0x0
	public const RegistryValueKind ExpandString = 2; // 0x0
	public const RegistryValueKind Binary = 3; // 0x0
	public const RegistryValueKind DWord = 4; // 0x0
	public const RegistryValueKind MultiString = 7; // 0x0
	public const RegistryValueKind QWord = 11; // 0x0
	public const RegistryValueKind None = -1; // 0x0
}

// Namespace: Microsoft.Win32
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum RegistryValueOptions // TypeDefIndex: 50
{
	// Fields
	public int value__; // 0x0
	public const RegistryValueOptions None = 0; // 0x0
	public const RegistryValueOptions DoNotExpandEnvironmentNames = 1; // 0x0
}

// Namespace: Microsoft.Win32
internal class ExpandString // TypeDefIndex: 51
{
	// Fields
	private string value; // 0x10

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(string s) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 3
	public override string ToString() { }
	// RVA: 0x75EB90 Offset: 0x75D390 VA: 0x18075EB90
	public string Expand() { }
}

// Namespace: Microsoft.Win32
internal class RegistryKeyComparer : IEqualityComparer // TypeDefIndex: 52
{
	// Methods
	// RVA: 0x3249C0 Offset: 0x3231C0 VA: 0x1803249C0 Slot: 4
	public bool Equals(object x, object y) { }
	// RVA: 0x324B80 Offset: 0x323380 VA: 0x180324B80 Slot: 5
	public int GetHashCode(object obj) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Microsoft.Win32
internal class KeyHandler // TypeDefIndex: 53
{
	// Fields
	private static Hashtable key_to_handler; // 0x0
	private static Hashtable dir_to_handler; // 0x8
	public string Dir; // 0x10
	private string ActualDir; // 0x18
	public bool IsVolatile; // 0x20
	private Hashtable values; // 0x28
	private string file; // 0x30
	private bool dirty; // 0x38
	private static string user_store; // 0x10
	private static string machine_store; // 0x18

	// Properties
	public bool IsMarkedForDeletion { get; }
	private static string UserStore { get; }
	private static string MachineStore { get; }

	// Methods
	// RVA: 0x32B310 Offset: 0x329B10 VA: 0x18032B310
	private static void .cctor() { }
	// RVA: 0x32B590 Offset: 0x329D90 VA: 0x18032B590
	private void .ctor(RegistryKey rkey, string basedir) { }
	// RVA: 0x32B5B0 Offset: 0x329DB0 VA: 0x18032B5B0
	private void .ctor(RegistryKey rkey, string basedir, bool is_volatile) { }
	// RVA: 0x32B750 Offset: 0x329F50 VA: 0x18032B750
	public void Load() { }
	// RVA: 0x32BCD0 Offset: 0x32A4D0 VA: 0x18032BCD0
	private void LoadKey(SecurityElement se) { }
	// RVA: 0x32C4E0 Offset: 0x32ACE0 VA: 0x18032C4E0
	public RegistryKey Ensure(RegistryKey rkey, string extra, bool writable, bool is_volatile) { }
	// RVA: 0x32C8C0 Offset: 0x32B0C0 VA: 0x18032C8C0
	public RegistryKey Probe(RegistryKey rkey, string extra, bool writable) { }
	// RVA: 0x32CD70 Offset: 0x32B570 VA: 0x18032CD70
	private static string CombineName(RegistryKey rkey, string extra) { }
	// RVA: 0x32CE50 Offset: 0x32B650 VA: 0x18032CE50
	private static long GetSystemBootTime() { }
	// RVA: 0x32D190 Offset: 0x32B990 VA: 0x18032D190
	private static long GetRegisteredBootTime(string path) { }
	// RVA: 0x32D3E0 Offset: 0x32BBE0 VA: 0x18032D3E0
	private static void SaveRegisteredBootTime(string path, long btime) { }
	// RVA: 0x32D560 Offset: 0x32BD60 VA: 0x18032D560
	private static void CleanVolatileKeys() { }
	// RVA: 0x32D7F0 Offset: 0x32BFF0 VA: 0x18032D7F0
	public static bool VolatileKeyExists(string dir) { }
	// RVA: 0x32DB20 Offset: 0x32C320 VA: 0x18032DB20
	public static string GetVolatileDir(string dir) { }
	// RVA: 0x32DC10 Offset: 0x32C410 VA: 0x18032DC10
	public static KeyHandler Lookup(RegistryKey rkey, bool createNonExisting) { }
	// RVA: 0x32E280 Offset: 0x32CA80 VA: 0x18032E280
	private static string GetRootFromDir(string dir) { }
	// RVA: 0x32E400 Offset: 0x32CC00 VA: 0x18032E400
	public static void Drop(RegistryKey rkey) { }
	// RVA: 0x32E930 Offset: 0x32D130 VA: 0x18032E930
	public object GetValue(string name, RegistryValueOptions options) { }
	// RVA: 0x32EBE0 Offset: 0x32D3E0 VA: 0x18032EBE0
	public string[] GetSubKeyNames() { }
	// RVA: 0x32F0E0 Offset: 0x32D8E0 VA: 0x18032F0E0
	public void Flush() { }
	// RVA: 0x32F2F0 Offset: 0x32DAF0 VA: 0x18032F2F0
	public bool ValueExists(string name) { }
	// RVA: 0x32F510 Offset: 0x32DD10 VA: 0x18032F510
	public bool get_IsMarkedForDeletion() { }
	// RVA: 0x32F5D0 Offset: 0x32DDD0 VA: 0x18032F5D0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x32F650 Offset: 0x32DE50 VA: 0x18032F650
	private void Save() { }
	// RVA: 0x32FFB0 Offset: 0x32E7B0 VA: 0x18032FFB0
	private static string get_UserStore() { }
	// RVA: 0x3301C0 Offset: 0x32E9C0 VA: 0x1803301C0
	private static string get_MachineStore() { }
}

// Namespace: Microsoft.Win32
internal class UnixRegistryApi : IRegistryApi // TypeDefIndex: 54
{
	// Methods
	// RVA: 0x417550 Offset: 0x415D50 VA: 0x180417550
	private static string ToUnix(string keyname) { }
	// RVA: 0x4175B0 Offset: 0x415DB0 VA: 0x1804175B0
	private static bool IsWellKnownKey(string parentKeyName, string keyname) { }
	// RVA: 0x4178D0 Offset: 0x4160D0 VA: 0x1804178D0 Slot: 4
	public RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writable) { }
	// RVA: 0x417A60 Offset: 0x416260 VA: 0x180417A60 Slot: 5
	public void Flush(RegistryKey rkey) { }
	// RVA: 0x417B10 Offset: 0x416310 VA: 0x180417B10 Slot: 6
	public void Close(RegistryKey rkey) { }
	// RVA: 0x417BA0 Offset: 0x4163A0 VA: 0x180417BA0 Slot: 7
	public object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options) { }
	// RVA: 0x417C90 Offset: 0x416490 VA: 0x180417C90 Slot: 8
	public string[] GetSubKeyNames(RegistryKey rkey) { }
	// RVA: 0x417D40 Offset: 0x416540 VA: 0x180417D40 Slot: 9
	public string ToString(RegistryKey rkey) { }
	// RVA: 0x417D60 Offset: 0x416560 VA: 0x180417D60
	private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable) { }
	// RVA: 0x417D80 Offset: 0x416580 VA: 0x180417D80
	private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable, bool is_volatile) { }
	// RVA: 0x417F60 Offset: 0x416760 VA: 0x180417F60 Slot: 10
	public IntPtr GetHandle(RegistryKey key) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Microsoft.Win32
internal class Win32RegistryApi : IRegistryApi // TypeDefIndex: 55
{
	// Fields
	private readonly int NativeBytesPerCharacter; // 0x10

	// Methods
	// RVA: 0x41BED0 Offset: 0x41A6D0 VA: 0x18041BED0
	private static extern int RegCloseKey(IntPtr keyHandle) { }
	// RVA: 0x41BF50 Offset: 0x41A750 VA: 0x18041BF50
	private static extern int RegFlushKey(IntPtr keyHandle) { }
	// RVA: 0x41BFD0 Offset: 0x41A7D0 VA: 0x18041BFD0
	private static extern int RegOpenKeyEx(IntPtr keyBase, string keyName, IntPtr reserved, int access, out IntPtr keyHandle) { }
	// RVA: 0x41C090 Offset: 0x41A890 VA: 0x18041C090
	internal static extern int RegEnumKeyEx(IntPtr keyHandle, int dwIndex, char* lpName, ref int lpcbName, int[] lpReserved, [Out] StringBuilder lpClass, int[] lpcbClass, long[] lpftLastWriteTime) { }
	// RVA: 0x41C210 Offset: 0x41AA10 VA: 0x18041C210
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, IntPtr zero, ref int dataSize) { }
	// RVA: 0x41C2D0 Offset: 0x41AAD0 VA: 0x18041C2D0
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, [Out] byte[] data, ref int dataSize) { }
	// RVA: 0x41C410 Offset: 0x41AC10 VA: 0x18041C410
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, ref int data, ref int dataSize) { }
	// RVA: 0x41C4D0 Offset: 0x41ACD0 VA: 0x18041C4D0
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, ref RegistryValueKind type, ref long data, ref int dataSize) { }
	// RVA: 0x41C590 Offset: 0x41AD90 VA: 0x18041C590
	internal static extern int RegQueryInfoKey(IntPtr hKey, [Out] StringBuilder lpClass, int[] lpcbClass, IntPtr lpReserved_MustBeZero, ref int lpcSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, ref int lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int[] lpftLastWriteTime) { }
	// RVA: 0x41C760 Offset: 0x41AF60 VA: 0x18041C760 Slot: 10
	public IntPtr GetHandle(RegistryKey key) { }
	// RVA: 0x41C800 Offset: 0x41B000 VA: 0x18041C800
	private static bool IsHandleValid(RegistryKey key) { }
	// RVA: 0x41C820 Offset: 0x41B020 VA: 0x18041C820 Slot: 7
	public object GetValue(RegistryKey rkey, string name, object defaultValue, RegistryValueOptions options) { }
	// RVA: 0x41CCF0 Offset: 0x41B4F0 VA: 0x18041CCF0
	private int GetBinaryValue(RegistryKey rkey, string name, RegistryValueKind type, out byte[] data, int size) { }
	// RVA: 0x41CEC0 Offset: 0x41B6C0 VA: 0x18041CEC0 Slot: 11
	public int SubKeyCount(RegistryKey rkey) { }
	// RVA: 0x41D030 Offset: 0x41B830 VA: 0x18041D030 Slot: 4
	public RegistryKey OpenSubKey(RegistryKey rkey, string keyName, bool writable) { }
	// RVA: 0x41D260 Offset: 0x41BA60 VA: 0x18041D260 Slot: 5
	public void Flush(RegistryKey rkey) { }
	// RVA: 0x41D380 Offset: 0x41BB80 VA: 0x18041D380 Slot: 6
	public void Close(RegistryKey rkey) { }
	// RVA: 0x41D5B0 Offset: 0x41BDB0 VA: 0x18041D5B0 Slot: 8
	public string[] GetSubKeyNames(RegistryKey rkey) { }
	// RVA: 0x41D8E0 Offset: 0x41C0E0 VA: 0x18041D8E0
	private void GenerateException(int errorCode) { }
	// RVA: 0x417D40 Offset: 0x416540 VA: 0x180417D40 Slot: 9
	public string ToString(RegistryKey rkey) { }
	// RVA: 0x41DAD0 Offset: 0x41C2D0 VA: 0x18041DAD0
	internal static string CombineName(RegistryKey rkey, string localName) { }
	// RVA: 0x41DB70 Offset: 0x41C370 VA: 0x18041DB70
	public void .ctor() { }
}

// Namespace: Microsoft.Win32
internal static class Win32Native // TypeDefIndex: 56
{
	// Methods
	// RVA: 0x41BE30 Offset: 0x41A630 VA: 0x18041BE30
	public static string GetMessage(int hr) { }
	// RVA: 0x41BEC0 Offset: 0x41A6C0 VA: 0x18041BEC0
	public static int MakeHRFromErrorCode(int errorCode) { }
}

// Namespace: 
internal class Win32Native.WIN32_FIND_DATA // TypeDefIndex: 57
{
	// Fields
	internal int dwFileAttributes; // 0x10
	internal string cFileName; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeFileHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 58
{
	// Methods
	// RVA: 0x383E00 Offset: 0x382600 VA: 0x180383E00
	public void .ctor(IntPtr preexistingHandle, bool ownsHandle) { }
	// RVA: 0x383E30 Offset: 0x382630 VA: 0x180383E30 Slot: 7
	protected override bool ReleaseHandle() { }
}

// Namespace: Microsoft.Win32.SafeHandles
internal sealed class SafeFindHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 59
{
	// Methods
	// RVA: 0x383EE0 Offset: 0x3826E0 VA: 0x180383EE0
	internal void .ctor(IntPtr preexistingHandle) { }
	// RVA: 0x383F10 Offset: 0x382710 VA: 0x180383F10 Slot: 7
	protected override bool ReleaseHandle() { }
}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeRegistryHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 60
{
	// Methods
	// RVA: 0x383E00 Offset: 0x382600 VA: 0x180383E00
	public void .ctor(IntPtr preexistingHandle, bool ownsHandle) { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 7
	protected override bool ReleaseHandle() { }
}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 61
{
	// Methods
	// RVA: 0x383E00 Offset: 0x382600 VA: 0x180383E00
	public void .ctor(IntPtr existingHandle, bool ownsHandle) { }
	// RVA: 0x385940 Offset: 0x384140 VA: 0x180385940 Slot: 7
	protected override bool ReleaseHandle() { }
}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle // TypeDefIndex: 62
{
	// Properties
	public override bool IsInvalid { get; }

	// Methods
	// RVA: 0x3846D0 Offset: 0x382ED0 VA: 0x1803846D0
	protected void .ctor(bool ownsHandle) { }
	// RVA: 0x3847F0 Offset: 0x382FF0 VA: 0x1803847F0 Slot: 5
	public override bool get_IsInvalid() { }
}

// Namespace: System
internal static class ThrowHelper // TypeDefIndex: 63
{
	// Methods
	// RVA: 0x493610 Offset: 0x491E10 VA: 0x180493610
	internal static void ThrowArgumentNullException(ExceptionArgument argument) { }
	// RVA: 0x493650 Offset: 0x491E50 VA: 0x180493650
	private static Exception CreateArgumentNullException(ExceptionArgument argument) { }
	// RVA: 0x493720 Offset: 0x491F20 VA: 0x180493720
	internal static void ThrowArgumentOutOfRangeException() { }
	// RVA: 0x493740 Offset: 0x491F40 VA: 0x180493740
	internal static void ThrowWrongValueTypeArgumentException(object value, Type targetType) { }
	// RVA: 0x493810 Offset: 0x492010 VA: 0x180493810
	internal static void ThrowArgumentException(ExceptionResource resource) { }
	// RVA: 0x493880 Offset: 0x492080 VA: 0x180493880
	internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource) { }
	// RVA: 0x4939B0 Offset: 0x4921B0 VA: 0x1804939B0
	internal static void ThrowInvalidOperationException(ExceptionResource resource) { }
	// RVA: 0x493A20 Offset: 0x492220 VA: 0x180493A20
	internal static void ThrowNotSupportedException(ExceptionResource resource) { }
	// RVA: 0x42AD00 Offset: 0x429500 VA: 0x18042AD00
	internal static void IfNullAndNullsAreIllegalThenThrow(object value, ExceptionArgument argName) { }
	// RVA: 0x493A90 Offset: 0x492290 VA: 0x180493A90
	internal static string GetArgumentName(ExceptionArgument argument) { }
	// RVA: 0x493CC0 Offset: 0x4924C0 VA: 0x180493CC0
	internal static string GetResourceName(ExceptionResource resource) { }
}

// Namespace: System
public abstract class Array : ICollection, IEnumerable, IList, IStructuralComparable, IStructuralEquatable, ICloneable // TypeDefIndex: 64
{
	// Properties
	private int System.Collections.ICollection.Count { get; }
	public int Length { get; }
	public int Rank { get; }

	// Methods
	// RVA: 0x4B7DF0 Offset: 0x4B65F0 VA: 0x1804B7DF0
	public static ReadOnlyCollection<T> AsReadOnly(T[] array) { }
	// RVA: 0x58B380 Offset: 0x589B80 VA: 0x18058B380
	public static void Resize(ref T[] array, int newSize) { }
	// RVA: 0x2D07D0 Offset: 0x2CEFD0 VA: 0x1802D07D0 Slot: 5
	private int System.Collections.ICollection.get_Count() { }
	// RVA: 0x2D07E0 Offset: 0x2CEFE0 VA: 0x1802D07E0 Slot: 7
	private int System.Collections.IList.Add(object value) { }
	// RVA: 0x2D0840 Offset: 0x2CF040 VA: 0x1802D0840 Slot: 8
	private bool System.Collections.IList.Contains(object value) { }
	// RVA: 0x2D0950 Offset: 0x2CF150 VA: 0x1802D0950 Slot: 4
	public void CopyTo(Array array, int index) { }
	// RVA: 0x2569A0 Offset: 0x2551A0 VA: 0x1802569A0 Slot: 12
	public object Clone() { }
	// RVA: 0x2D0A80 Offset: 0x2CF280 VA: 0x1802D0A80 Slot: 9
	private int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer) { }
	// RVA: 0x2D0CA0 Offset: 0x2CF4A0 VA: 0x1802D0CA0 Slot: 10
	private bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer) { }
	// RVA: 0x2D0E00 Offset: 0x2CF600 VA: 0x1802D0E00
	internal static int CombineHashCodes(int h1, int h2) { }
	// RVA: 0x2D0E10 Offset: 0x2CF610 VA: 0x1802D0E10 Slot: 11
	private int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer) { }
	// RVA: 0x2D1040 Offset: 0x2CF840 VA: 0x1802D1040
	public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer) { }
	// RVA: 0x2D1390 Offset: 0x2CFB90 VA: 0x1802D1390
	private static int GetMedian(int low, int hi) { }
	// RVA: 0x4B80C0 Offset: 0x4B68C0 VA: 0x1804B80C0
	public static int BinarySearch(T[] array, T value) { }
	// RVA: 0x4B8280 Offset: 0x4B6A80 VA: 0x1804B8280
	public static int BinarySearch(T[] array, int index, int length, T value, IComparer<T> comparer) { }
	// RVA: 0x2D13A0 Offset: 0x2CFBA0 VA: 0x1802D13A0
	public static int IndexOf(Array array, object value) { }
	// RVA: 0x2D14B0 Offset: 0x2CFCB0 VA: 0x1802D14B0
	public static int IndexOf(Array array, object value, int startIndex, int count) { }
	// RVA: 0x4B8620 Offset: 0x4B6E20 VA: 0x1804B8620
	public static int IndexOf(T[] array, T value) { }
	// RVA: 0x4B8700 Offset: 0x4B6F00 VA: 0x1804B8700
	public static int IndexOf(T[] array, T value, int startIndex, int count) { }
	// RVA: 0x58B010 Offset: 0x589810 VA: 0x18058B010
	public static int LastIndexOf(T[] array, T value) { }
	// RVA: 0x58B0F0 Offset: 0x5898F0 VA: 0x18058B0F0
	public static int LastIndexOf(T[] array, T value, int startIndex, int count) { }
	// RVA: 0x2D1770 Offset: 0x2CFF70 VA: 0x1802D1770
	public static void Reverse(Array array, int index, int length) { }
	// RVA: 0x51E1F0 Offset: 0x51C9F0 VA: 0x18051E1F0
	public static void Reverse(T[] array, int index, int length) { }
	// RVA: 0x522C30 Offset: 0x521430 VA: 0x180522C30
	public static void Sort(T[] array, IComparer<T> comparer) { }
	// RVA: 0x522EF0 Offset: 0x5216F0 VA: 0x180522EF0
	public static void Sort(T[] array, int index, int length, IComparer<T> comparer) { }
	// RVA: 0x522B20 Offset: 0x521320 VA: 0x180522B20
	public static void Sort(T[] array, Comparison<T> comparison) { }
	// RVA: 0x522D10 Offset: 0x521510 VA: 0x180522D10
	public static void Sort(TKey[] keys, TValue[] items, IComparer<TKey> comparer) { }
	// RVA: 0x526F70 Offset: 0x525770 VA: 0x180526F70
	public static void Sort(TKey[] keys, TValue[] items, int index, int length, IComparer<TKey> comparer) { }
	// RVA: 0x2D1AB0 Offset: 0x2D02B0 VA: 0x1802D1AB0 Slot: 6
	public IEnumerator GetEnumerator() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x2D07D0 Offset: 0x2CEFD0 VA: 0x1802D07D0
	internal int InternalArray__ICollection_get_Count() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20
	internal bool InternalArray__ICollection_get_IsReadOnly() { }
	// RVA: 0x1D0C20 Offset: 0x1CF420 VA: 0x1801D0C20
	internal IEnumerator<T> InternalArray__IEnumerable_GetEnumerator() { }
	// RVA: 0x2D1B60 Offset: 0x2D0360 VA: 0x1802D1B60
	internal void InternalArray__ICollection_Clear() { }
	// RVA: 0x4BCB90 Offset: 0x4BB390 VA: 0x1804BCB90
	internal void InternalArray__ICollection_Add(T item) { }
	// RVA: 0x1CCD20 Offset: 0x1CB520 VA: 0x1801CCD20
	internal bool InternalArray__ICollection_Remove(T item) { }
	// RVA: 0x4C0A90 Offset: 0x4BF290 VA: 0x1804C0A90
	internal bool InternalArray__ICollection_Contains(T item) { }
	// RVA: 0x1CCC90 Offset: 0x1CB490 VA: 0x1801CCC90
	internal void InternalArray__ICollection_CopyTo(T[] array, int arrayIndex) { }
	// RVA: 0x1D0D30 Offset: 0x1CF530 VA: 0x1801D0D30
	internal T InternalArray__IReadOnlyList_get_Item(int index) { }
	// RVA: 0x2D07D0 Offset: 0x2CEFD0 VA: 0x1802D07D0
	internal int InternalArray__IReadOnlyCollection_get_Count() { }
	// RVA: 0x5E80D0 Offset: 0x5E68D0 VA: 0x1805E80D0
	internal void InternalArray__Insert(int index, T item) { }
	// RVA: 0x2D1BC0 Offset: 0x2D03C0 VA: 0x1802D1BC0
	internal void InternalArray__RemoveAt(int index) { }
	// RVA: 0x5D09A0 Offset: 0x5CF1A0 VA: 0x1805D09A0
	internal int InternalArray__IndexOf(T item) { }
	// RVA: 0x56F430 Offset: 0x56DC30 VA: 0x18056F430
	internal T InternalArray__get_Item(int index) { }
	// RVA: 0x579CF0 Offset: 0x5784F0 VA: 0x180579CF0
	internal void InternalArray__set_Item(int index, T item) { }
	// RVA: -1 Offset: -1
	internal void GetGenericValueImpl(int pos, out T value) { }
	// RVA: -1 Offset: -1
	internal void SetGenericValueImpl(int pos, ref T value) { }
	// RVA: 0x2D1C20 Offset: 0x2D0420 VA: 0x1802D1C20
	public int get_Length() { }
	// RVA: 0x2D1CC0 Offset: 0x2D04C0 VA: 0x1802D1CC0
	public int get_Rank() { }
	// RVA: 0x2D1CC0 Offset: 0x2D04C0 VA: 0x1802D1CC0
	private int GetRank() { }
	// RVA: 0x2D1CD0 Offset: 0x2D04D0 VA: 0x1802D1CD0
	public int GetLength(int dimension) { }
	// RVA: 0x2D1D20 Offset: 0x2D0520 VA: 0x1802D1D20
	public int GetLowerBound(int dimension) { }
	// RVA: 0x2D1D70 Offset: 0x2D0570 VA: 0x1802D1D70
	public object GetValue(int[] indices) { }
	// RVA: 0x2D1D80 Offset: 0x2D0580 VA: 0x1802D1D80
	public void SetValue(object value, int[] indices) { }
	// RVA: 0x2D1EF0 Offset: 0x2D06F0 VA: 0x1802D1EF0
	internal object GetValueImpl(int pos) { }
	// RVA: 0x2D1F20 Offset: 0x2D0720 VA: 0x1802D1F20
	internal void SetValueImpl(object value, int pos) { }
	// RVA: 0x2D1F30 Offset: 0x2D0730 VA: 0x1802D1F30
	internal static bool FastCopy(Array source, int source_idx, Array dest, int dest_idx, int length) { }
	// RVA: 0x2D1F40 Offset: 0x2D0740 VA: 0x1802D1F40
	internal static Array CreateInstanceImpl(Type elementType, int[] lengths, int[] bounds) { }
	// RVA: 0x2D1F50 Offset: 0x2D0750 VA: 0x1802D1F50
	public int GetUpperBound(int dimension) { }
	// RVA: 0x2D1FB0 Offset: 0x2D07B0 VA: 0x1802D1FB0
	public object GetValue(int index) { }
	// RVA: 0x2D21A0 Offset: 0x2D09A0 VA: 0x1802D21A0
	public void SetValue(object value, int index) { }
	// RVA: 0x2D2380 Offset: 0x2D0B80 VA: 0x1802D2380
	internal static Array UnsafeCreateInstance(Type elementType, int[] lengths, int[] lowerBounds) { }
	// RVA: 0x2D2390 Offset: 0x2D0B90 VA: 0x1802D2390
	internal static Array UnsafeCreateInstance(Type elementType, int[] lengths) { }
	// RVA: 0x2D23A0 Offset: 0x2D0BA0 VA: 0x1802D23A0
	public static Array CreateInstance(Type elementType, int length) { }
	// RVA: 0x2D2460 Offset: 0x2D0C60 VA: 0x1802D2460
	public static Array CreateInstance(Type elementType, int[] lengths) { }
	// RVA: 0x2D2730 Offset: 0x2D0F30 VA: 0x1802D2730
	public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds) { }
	// RVA: 0x2D2BE0 Offset: 0x2D13E0 VA: 0x1802D2BE0
	public static void Clear(Array array, int index, int length) { }
	// RVA: 0x2D2DB0 Offset: 0x2D15B0 VA: 0x1802D2DB0
	private static void ClearInternal(Array a, int index, int count) { }
	// RVA: 0x2D2DE0 Offset: 0x2D15E0 VA: 0x1802D2DE0
	public static void Copy(Array sourceArray, Array destinationArray, int length) { }
	// RVA: 0x2D2F50 Offset: 0x2D1750 VA: 0x1802D2F50
	public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length) { }
	// RVA: 0x2D34D0 Offset: 0x2D1CD0 VA: 0x1802D34D0
	private static Exception CreateArrayTypeMismatchException() { }
	// RVA: 0x2D35D0 Offset: 0x2D1DD0 VA: 0x1802D35D0
	private static bool CanAssignArrayElement(Type source, Type target) { }
	// RVA: 0x4B8580 Offset: 0x4B6D80 VA: 0x1804B8580
	public static T[] Empty() { }
	// RVA: 0x4BC1F0 Offset: 0x4BA9F0 VA: 0x1804BC1F0
	private static int IndexOfImpl(T[] array, T value, int startIndex, int count) { }
	// RVA: 0x58B300 Offset: 0x589B00 VA: 0x18058B300
	private static int LastIndexOfImpl(T[] array, T value, int startIndex, int count) { }
	// RVA: 0x527350 Offset: 0x525B50 VA: 0x180527350
	internal static T UnsafeLoad(T[] array, int index) { }
	// RVA: 0x3F0890 Offset: 0x3EF090 VA: 0x1803F0890
	internal static R UnsafeMov(S instance) { }
}

// Namespace: 
private sealed class Array.ArrayEnumerator : IEnumerator, ICloneable // TypeDefIndex: 65
{
	// Fields
	private Array _array; // 0x10
	private int _index; // 0x18
	private int _endIndex; // 0x1C

	// Properties
	public object Current { get; }

	// Methods
	// RVA: 0x26AE20 Offset: 0x269620 VA: 0x18026AE20
	internal void .ctor(Array array) { }
	// RVA: 0x26AE60 Offset: 0x269660 VA: 0x18026AE60 Slot: 4
	public bool MoveNext() { }
	// RVA: 0x2569A0 Offset: 0x2551A0 VA: 0x1802569A0 Slot: 6
	public object Clone() { }
	// RVA: 0x26AE80 Offset: 0x269680 VA: 0x18026AE80 Slot: 5
	public object get_Current() { }
}

// Namespace: 
internal struct Array.InternalEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 66
{
	// Fields
	private readonly Array array; // 0x0
	private int idx; // 0x0

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x110DD0 Offset: 0x1101D0 VA: 0x180110DD0
	internal void .ctor(Array array) { }
	// RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80 Slot: 5
	public void Dispose() { }
	// RVA: 0x110DE0 Offset: 0x1101E0 VA: 0x180110DE0 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x110E30 Offset: 0x110230 VA: 0x180110E30 Slot: 4
	public T get_Current() { }
	// RVA: 0x110E40 Offset: 0x110240 VA: 0x180110E40 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
internal class Array.EmptyInternalEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 67
{
	// Fields
	public static readonly Array.EmptyInternalEnumerator<T> Value; // 0x0

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	public void Dispose() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x7E8550 Offset: 0x7E6D50 VA: 0x1807E8550 Slot: 4
	public T get_Current() { }
	// RVA: 0x721990 Offset: 0x720190 VA: 0x180721990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
	// RVA: 0x7216D0 Offset: 0x71FED0 VA: 0x1807216D0
	private static void .cctor() { }
}

// Namespace: System
internal interface ITupleInternal // TypeDefIndex: 68
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract string ToString(StringBuilder sb) { }
}

// Namespace: System
public static class Tuple // TypeDefIndex: 69
{
	// Methods
	// RVA: 0x42B430 Offset: 0x429C30 VA: 0x18042B430
	public static Tuple<T1, T2> Create(T1 item1, T2 item2) { }
	// RVA: 0x2D0E00 Offset: 0x2CF600 VA: 0x1802D0E00
	internal static int CombineHashCodes(int h1, int h2) { }
	// RVA: 0x4A13E0 Offset: 0x49FBE0 VA: 0x1804A13E0
	internal static int CombineHashCodes(int h1, int h2, int h3) { }
}

// Namespace: System
[Serializable]
public class Tuple<T1, T2> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal // TypeDefIndex: 70
{
	// Fields
	private readonly T1 m_Item1; // 0x0
	private readonly T2 m_Item2; // 0x0

	// Methods
	// RVA: 0x7C32D0 Offset: 0x7C1AD0 VA: 0x1807C32D0
	public void .ctor(T1 item1, T2 item2) { }
	// RVA: 0x7C32F0 Offset: 0x7C1AF0 VA: 0x1807C32F0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x7C33C0 Offset: 0x7C1BC0 VA: 0x1807C33C0 Slot: 4
	private bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer) { }
	// RVA: 0x7C3550 Offset: 0x7C1D50 VA: 0x1807C3550 Slot: 7
	private int System.IComparable.CompareTo(object obj) { }
	// RVA: 0x7C3620 Offset: 0x7C1E20 VA: 0x1807C3620 Slot: 6
	private int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer) { }
	// RVA: 0x7C3830 Offset: 0x7C2030 VA: 0x1807C3830 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x7C38F0 Offset: 0x7C20F0 VA: 0x1807C38F0 Slot: 5
	private int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer) { }
	// RVA: 0x7C3A00 Offset: 0x7C2200 VA: 0x1807C3A00 Slot: 3
	public override string ToString() { }
	// RVA: 0x7C3AC0 Offset: 0x7C22C0 VA: 0x1807C3AC0 Slot: 8
	private string System.ITupleInternal.ToString(StringBuilder sb) { }
}

// Namespace: System
[Serializable]
public class Tuple<T1, T2, T3> : IStructuralEquatable, IStructuralComparable, IComparable, ITupleInternal // TypeDefIndex: 71
{
	// Fields
	private readonly T1 m_Item1; // 0x0
	private readonly T2 m_Item2; // 0x0
	private readonly T3 m_Item3; // 0x0

	// Methods
	// RVA: 0x7C4460 Offset: 0x7C2C60 VA: 0x1807C4460
	public void .ctor(T1 item1, T2 item2, T3 item3) { }
	// RVA: 0x7C4480 Offset: 0x7C2C80 VA: 0x1807C4480 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x7C4550 Offset: 0x7C2D50 VA: 0x1807C4550 Slot: 4
	private bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer) { }
	// RVA: 0x7C4690 Offset: 0x7C2E90 VA: 0x1807C4690 Slot: 7
	private int System.IComparable.CompareTo(object obj) { }
	// RVA: 0x7C4760 Offset: 0x7C2F60 VA: 0x1807C4760 Slot: 6
	private int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer) { }
	// RVA: 0x7C4920 Offset: 0x7C3120 VA: 0x1807C4920 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x7C49E0 Offset: 0x7C31E0 VA: 0x1807C49E0 Slot: 5
	private int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer) { }
	// RVA: 0x7C4AD0 Offset: 0x7C32D0 VA: 0x1807C4AD0 Slot: 3
	public override string ToString() { }
	// RVA: 0x7C4B90 Offset: 0x7C3390 VA: 0x1807C4B90 Slot: 8
	private string System.ITupleInternal.ToString(StringBuilder sb) { }
}

// Namespace: System
[Serializable]
public class Tuple<T1, T2, T3, T4> // TypeDefIndex: 72
{
	// Fields
	private readonly T1 m_Item1; // 0x0
	private readonly T2 m_Item2; // 0x0
	private readonly T3 m_Item3; // 0x0
	private readonly T4 m_Item4; // 0x0
}

// Namespace: System
[Serializable]
public class AggregateException : Exception // TypeDefIndex: 73
{
	// Fields
	private ReadOnlyCollection<Exception> m_innerExceptions; // 0x88

	// Properties
	public ReadOnlyCollection<Exception> InnerExceptions { get; }

	// Methods
	// RVA: 0x2CBC30 Offset: 0x2CA430 VA: 0x1802CBC30
	public void .ctor() { }
	// RVA: 0x2CBD20 Offset: 0x2CA520 VA: 0x1802CBD20
	public void .ctor(IEnumerable<Exception> innerExceptions) { }
	// RVA: 0x2CBE70 Offset: 0x2CA670 VA: 0x1802CBE70
	public void .ctor(Exception[] innerExceptions) { }
	// RVA: 0x2CBF00 Offset: 0x2CA700 VA: 0x1802CBF00
	public void .ctor(string message, IEnumerable<Exception> innerExceptions) { }
	// RVA: 0x2CBFF0 Offset: 0x2CA7F0 VA: 0x1802CBFF0
	public void .ctor(string message, Exception[] innerExceptions) { }
	// RVA: 0x2CC000 Offset: 0x2CA800 VA: 0x1802CC000
	private void .ctor(string message, IList<Exception> innerExceptions) { }
	// RVA: 0x2CC250 Offset: 0x2CAA50 VA: 0x1802CC250
	internal void .ctor(IEnumerable<ExceptionDispatchInfo> innerExceptionInfos) { }
	// RVA: 0x2CC2E0 Offset: 0x2CAAE0 VA: 0x1802CC2E0
	internal void .ctor(string message, IEnumerable<ExceptionDispatchInfo> innerExceptionInfos) { }
	// RVA: 0x2CC3D0 Offset: 0x2CABD0 VA: 0x1802CC3D0
	private void .ctor(string message, IList<ExceptionDispatchInfo> innerExceptionInfos) { }
	// RVA: 0x2CC650 Offset: 0x2CAE50 VA: 0x1802CC650
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x2CC810 Offset: 0x2CB010 VA: 0x1802CC810 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x262A60 Offset: 0x261260 VA: 0x180262A60
	public ReadOnlyCollection<Exception> get_InnerExceptions() { }
	// RVA: 0x2CCAA0 Offset: 0x2CB2A0 VA: 0x1802CCAA0
	public AggregateException Flatten() { }
	// RVA: 0x2CCCD0 Offset: 0x2CB4D0 VA: 0x1802CCCD0 Slot: 3
	public override string ToString() { }
}

// Namespace: System
internal static class AppContextSwitches // TypeDefIndex: 74
{
	// Fields
	public static readonly bool ThrowExceptionIfDisposedCancellationTokenSource; // 0xABDD3
}

// Namespace: System
[Serializable]
internal class __Filters // TypeDefIndex: 75
{
	// Fields
	internal static readonly __Filters Instance; // 0xA15984

	// Methods
	// RVA: 0x26A350 Offset: 0x268B50 VA: 0x18026A350 Slot: 4
	internal virtual bool FilterAttribute(MemberInfo m, object filterCriteria) { }
	// RVA: 0x26A7B0 Offset: 0x268FB0 VA: 0x18026A7B0 Slot: 5
	internal virtual bool FilterName(MemberInfo m, object filterCriteria) { }
	// RVA: 0x26AA70 Offset: 0x269270 VA: 0x18026AA70 Slot: 6
	internal virtual bool FilterIgnoreCase(MemberInfo m, object filterCriteria) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x26AD70 Offset: 0x269570 VA: 0x18026AD70
	private static void .cctor() { }
}

// Namespace: System
internal sealed class LocalDataStoreHolder // TypeDefIndex: 76
{
	// Fields
	private LocalDataStore m_Store; // 0x10
}

// Namespace: System
internal sealed class LocalDataStoreElement // TypeDefIndex: 77
{
	// Fields
	private object m_value; // 0x10
	private long m_cookie; // 0x18
}

// Namespace: System
internal sealed class LocalDataStore // TypeDefIndex: 78
{
	// Fields
	private LocalDataStoreElement[] m_DataTable; // 0x10
	private LocalDataStoreMgr m_Manager; // 0x18
}

// Namespace: System
public sealed class LocalDataStoreSlot // TypeDefIndex: 79
{
	// Fields
	private LocalDataStoreMgr m_mgr; // 0x10
	private int m_slot; // 0x18
	private long m_cookie; // 0x20
}

// Namespace: System
internal sealed class LocalDataStoreMgr // TypeDefIndex: 80
{
	// Fields
	private const int InitialSlotTableSize = 64; // 0x0
	private const int SlotTableDoubleThreshold = 512; // 0x0
	private const int LargeSlotTableSizeIncrease = 128; // 0x0
	private bool[] m_SlotInfoTable; // 0x10
	private int m_FirstAvailableSlot; // 0x18
	private List<LocalDataStore> m_ManagedLocalDataStores; // 0x20
	private Dictionary<string, LocalDataStoreSlot> m_KeyToSlotMap; // 0x28
	private long m_CookieGenerator; // 0x30

	// Methods
	// RVA: 0x333BE0 Offset: 0x3323E0 VA: 0x180333BE0
	public void .ctor() { }
}

// Namespace: System
public sealed class Action<T> : MulticastDelegate // TypeDefIndex: 81
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(T obj) { }
	// RVA: 0x7C8FE0 Offset: 0x7C77E0 VA: 0x1807C8FE0 Slot: 13
	public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
public sealed class Action : MulticastDelegate // TypeDefIndex: 82
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
public sealed class Action<T1, T2> : MulticastDelegate // TypeDefIndex: 83
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x7CB3E0 Offset: 0x7C9BE0 VA: 0x1807CB3E0 Slot: 12
	public virtual void Invoke(T1 arg1, T2 arg2) { }
	// RVA: 0x7CB700 Offset: 0x7C9F00 VA: 0x1807CB700 Slot: 13
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
public sealed class Action<T1, T2, T3> : MulticastDelegate // TypeDefIndex: 84
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x7CD1E0 Offset: 0x7CB9E0 VA: 0x1807CD1E0 Slot: 12
	public virtual void Invoke(T1 arg1, T2 arg2, T3 arg3) { }
	// RVA: 0x7CD100 Offset: 0x7CB900 VA: 0x1807CD100 Slot: 13
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
public sealed class Func<TResult> : MulticastDelegate // TypeDefIndex: 85
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x7C0230 Offset: 0x7BEA30 VA: 0x1807C0230 Slot: 12
	public virtual TResult Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x27FDB0 Offset: 0x27E5B0 VA: 0x18027FDB0 Slot: 14
	public virtual TResult EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
public sealed class Func<T, TResult> : MulticastDelegate // TypeDefIndex: 86
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x272690 Offset: 0x270E90 VA: 0x180272690 Slot: 12
	public virtual TResult Invoke(T arg) { }
	// RVA: 0x7EDE40 Offset: 0x7EC640 VA: 0x1807EDE40 Slot: 13
	public virtual IAsyncResult BeginInvoke(T arg, AsyncCallback callback, object object) { }
	// RVA: 0x27FDB0 Offset: 0x27E5B0 VA: 0x18027FDB0 Slot: 14
	public virtual TResult EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
public sealed class Func<T1, T2, TResult> : MulticastDelegate // TypeDefIndex: 87
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x7F04B0 Offset: 0x7EECB0 VA: 0x1807F04B0 Slot: 12
	public virtual TResult Invoke(T1 arg1, T2 arg2) { }
	// RVA: 0x7F03E0 Offset: 0x7EEBE0 VA: 0x1807F03E0 Slot: 13
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, AsyncCallback callback, object object) { }
	// RVA: 0x27FDB0 Offset: 0x27E5B0 VA: 0x18027FDB0 Slot: 14
	public virtual TResult EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
public sealed class Func<T1, T2, T3, TResult> : MulticastDelegate // TypeDefIndex: 88
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x7F1A90 Offset: 0x7F0290 VA: 0x1807F1A90 Slot: 12
	public virtual TResult Invoke(T1 arg1, T2 arg2, T3 arg3) { }
	// RVA: 0x7F19C0 Offset: 0x7F01C0 VA: 0x1807F19C0 Slot: 13
	public virtual IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual TResult EndInvoke(IAsyncResult result) { }
}

// Namespace: System
public sealed class Comparison<T> : MulticastDelegate // TypeDefIndex: 89
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x78E6A0 Offset: 0x78CEA0 VA: 0x18078E6A0 Slot: 12
	public virtual int Invoke(T x, T y) { }
	// RVA: 0x78E960 Offset: 0x78D160 VA: 0x18078E960 Slot: 13
	public virtual IAsyncResult BeginInvoke(T x, T y, AsyncCallback callback, object object) { }
	// RVA: 0x26EFA0 Offset: 0x26D7A0 VA: 0x18026EFA0 Slot: 14
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: System
public sealed class Predicate<T> : MulticastDelegate // TypeDefIndex: 90
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x7FD1C0 Offset: 0x7FB9C0 VA: 0x1807FD1C0 Slot: 12
	public virtual bool Invoke(T obj) { }
	// RVA: 0x7FD450 Offset: 0x7FBC50 VA: 0x1807FD450 Slot: 13
	public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object) { }
	// RVA: 0x27FDB0 Offset: 0x27E5B0 VA: 0x18027FDB0 Slot: 14
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: System
public sealed class Activator // TypeDefIndex: 91
{
	// Methods
	// RVA: 0x2CB7F0 Offset: 0x2C9FF0 VA: 0x1802CB7F0
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture) { }
	// RVA: 0x2CB820 Offset: 0x2CA020 VA: 0x1802CB820
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes) { }
	// RVA: 0x2CBA50 Offset: 0x2CA250 VA: 0x1802CBA50
	public static object CreateInstance(Type type, object[] args) { }
	// RVA: 0x2CBA80 Offset: 0x2CA280 VA: 0x1802CBA80
	public static object CreateInstance(Type type) { }
	// RVA: 0x2CBA90 Offset: 0x2CA290 VA: 0x1802CBA90
	public static object CreateInstance(Type type, bool nonPublic) { }
	// RVA: 0x4AD880 Offset: 0x4AC080 VA: 0x1804AD880
	public static T CreateInstance() { }
}

// Namespace: System
[Serializable]
public class AppDomainUnloadedException : SystemException // TypeDefIndex: 92
{
	// Methods
	// RVA: 0x2CF230 Offset: 0x2CDA30 VA: 0x1802CF230
	public void .ctor() { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class ApplicationException : Exception // TypeDefIndex: 93
{
	// Methods
	// RVA: 0x2CF2C0 Offset: 0x2CDAC0 VA: 0x1802CF2C0
	public void .ctor() { }
	// RVA: 0x2CF370 Offset: 0x2CDB70 VA: 0x1802CF370
	public void .ctor(string message) { }
	// RVA: 0x2CF420 Offset: 0x2CDC20 VA: 0x1802CF420
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x2CF4E0 Offset: 0x2CDCE0 VA: 0x1802CF4E0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class ArgumentException : SystemException, ISerializable // TypeDefIndex: 94
{
	// Fields
	private string m_paramName; // 0x88

	// Properties
	public override string Message { get; }

	// Methods
	// RVA: 0x2CFA10 Offset: 0x2CE210 VA: 0x1802CFA10
	public void .ctor() { }
	// RVA: 0x2CFAA0 Offset: 0x2CE2A0 VA: 0x1802CFAA0
	public void .ctor(string message) { }
	// RVA: 0x2CFAC0 Offset: 0x2CE2C0 VA: 0x1802CFAC0
	public void .ctor(string message, string paramName) { }
	// RVA: 0x2CFB00 Offset: 0x2CE300 VA: 0x1802CFB00
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x2CFBD0 Offset: 0x2CE3D0 VA: 0x1802CFBD0 Slot: 5
	public override string get_Message() { }
	// RVA: 0x2CFD00 Offset: 0x2CE500 VA: 0x1802CFD00 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class ArgumentNullException : ArgumentException // TypeDefIndex: 95
{
	// Methods
	// RVA: 0x2CFF10 Offset: 0x2CE710 VA: 0x1802CFF10
	public void .ctor() { }
	// RVA: 0x2CFFA0 Offset: 0x2CE7A0 VA: 0x1802CFFA0
	public void .ctor(string paramName) { }
	// RVA: 0x2D0040 Offset: 0x2CE840 VA: 0x1802D0040
	public void .ctor(string paramName, string message) { }
	// RVA: 0x2CFB00 Offset: 0x2CE300 VA: 0x1802CFB00
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class ArgumentOutOfRangeException : ArgumentException, ISerializable // TypeDefIndex: 96
{
	// Fields
	private static string _rangeMessage; // 0x0
	private object m_actualValue; // 0x90

	// Properties
	private static string RangeMessage { get; }
	public override string Message { get; }

	// Methods
	// RVA: 0x2D0080 Offset: 0x2CE880 VA: 0x1802D0080
	private static string get_RangeMessage() { }
	// RVA: 0x2D0130 Offset: 0x2CE930 VA: 0x1802D0130
	public void .ctor() { }
	// RVA: 0x2D0160 Offset: 0x2CE960 VA: 0x1802D0160
	public void .ctor(string paramName) { }
	// RVA: 0x2D01A0 Offset: 0x2CE9A0 VA: 0x1802D01A0
	public void .ctor(string paramName, string message) { }
	// RVA: 0x2D01E0 Offset: 0x2CE9E0 VA: 0x1802D01E0
	public void .ctor(string paramName, object actualValue, string message) { }
	// RVA: 0x2D0230 Offset: 0x2CEA30 VA: 0x1802D0230 Slot: 5
	public override string get_Message() { }
	// RVA: 0x2D0380 Offset: 0x2CEB80 VA: 0x1802D0380 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x2D0590 Offset: 0x2CED90 VA: 0x1802D0590
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class ArithmeticException : SystemException // TypeDefIndex: 97
{
	// Methods
	// RVA: 0x2D0700 Offset: 0x2CEF00 VA: 0x1802D0700
	public void .ctor() { }
	// RVA: 0x2D0790 Offset: 0x2CEF90 VA: 0x1802D0790
	public void .ctor(string message) { }
	// RVA: 0x2D07B0 Offset: 0x2CEFB0 VA: 0x1802D07B0
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public struct ArraySegment<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IReadOnlyList<T>, IReadOnlyCollection<T> // TypeDefIndex: 98
{
	// Fields
	private T[] _array; // 0x0
	private int _offset; // 0x0
	private int _count; // 0x0

	// Properties
	public int Count { get; }
	private T System.Collections.Generic.IList<T>.Item { get; set; }
	private T System.Collections.Generic.IReadOnlyList<T>.Item { get; }
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }

	// Methods
	// RVA: 0x2320 Offset: 0x1720 VA: 0x180002320 Slot: 19
	public int get_Count() { }
	// RVA: 0x131480 Offset: 0x130880 VA: 0x180131480 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1314C0 Offset: 0x1308C0 VA: 0x1801314C0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x1315D0 Offset: 0x1309D0 VA: 0x1801315D0
	public bool Equals(ArraySegment<T> obj) { }
	// RVA: 0x131610 Offset: 0x130A10 VA: 0x180131610 Slot: 4
	private T System.Collections.Generic.IList<T>.get_Item(int index) { }
	// RVA: 0x131730 Offset: 0x130B30 VA: 0x180131730 Slot: 5
	private void System.Collections.Generic.IList<T>.set_Item(int index, T value) { }
	// RVA: 0x131860 Offset: 0x130C60 VA: 0x180131860 Slot: 6
	private int System.Collections.Generic.IList<T>.IndexOf(T item) { }
	// RVA: 0x1319C0 Offset: 0x130DC0 VA: 0x1801319C0 Slot: 7
	private void System.Collections.Generic.IList<T>.Insert(int index, T item) { }
	// RVA: 0x1319D0 Offset: 0x130DD0 VA: 0x1801319D0 Slot: 8
	private void System.Collections.Generic.IList<T>.RemoveAt(int index) { }
	// RVA: 0x1319E0 Offset: 0x130DE0 VA: 0x1801319E0 Slot: 18
	private T System.Collections.Generic.IReadOnlyList<T>.get_Item(int index) { }
	// RVA: 0x35250 Offset: 0x34650 VA: 0x180035250 Slot: 10
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	// RVA: 0x131B00 Offset: 0x130F00 VA: 0x180131B00 Slot: 11
	private void System.Collections.Generic.ICollection<T>.Add(T item) { }
	// RVA: 0x131B10 Offset: 0x130F10 VA: 0x180131B10 Slot: 12
	private void System.Collections.Generic.ICollection<T>.Clear() { }
	// RVA: 0x131B20 Offset: 0x130F20 VA: 0x180131B20 Slot: 13
	private bool System.Collections.Generic.ICollection<T>.Contains(T item) { }
	// RVA: 0x131C70 Offset: 0x131070 VA: 0x180131C70 Slot: 14
	private void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex) { }
	// RVA: 0x131D60 Offset: 0x131160 VA: 0x180131D60 Slot: 15
	private bool System.Collections.Generic.ICollection<T>.Remove(T item) { }
	// RVA: 0x131D70 Offset: 0x131170 VA: 0x180131D70 Slot: 16
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// RVA: 0x131EE0 Offset: 0x1312E0 VA: 0x180131EE0 Slot: 17
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
[Serializable]
private sealed class ArraySegment.ArraySegmentEnumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 99
{
	// Fields
	private T[] _array; // 0x0
	private int _start; // 0x0
	private int _end; // 0x0
	private int _current; // 0x0

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x7CE310 Offset: 0x7CCB10 VA: 0x1807CE310
	internal void .ctor(ArraySegment<T> arraySegment) { }
	// RVA: 0x7CE360 Offset: 0x7CCB60 VA: 0x1807CE360 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x7CE380 Offset: 0x7CCB80 VA: 0x1807CE380 Slot: 4
	public T get_Current() { }
	// RVA: 0x722200 Offset: 0x720A00 VA: 0x180722200 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	public void Dispose() { }
}

// Namespace: System
[Serializable]
public class ArrayTypeMismatchException : SystemException // TypeDefIndex: 100
{
	// Methods
	// RVA: 0x2D4E50 Offset: 0x2D3650 VA: 0x1802D4E50
	public void .ctor() { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public sealed class AsyncCallback : MulticastDelegate // TypeDefIndex: 101
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(IAsyncResult ar) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(IAsyncResult ar, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xD93C0 Offset: 0xD87C0 VA: 0x1800D93C0
[Serializable]
public abstract class Attribute // TypeDefIndex: 102
{
	// Methods
	// RVA: 0x2D8FF0 Offset: 0x2D77F0 VA: 0x1802D8FF0
	private static Attribute[] InternalGetCustomAttributes(PropertyInfo element, Type type, bool inherit) { }
	// RVA: 0x2D90E0 Offset: 0x2D78E0 VA: 0x1802D90E0
	private static Attribute[] InternalGetCustomAttributes(EventInfo element, Type type, bool inherit) { }
	// RVA: 0x2D91D0 Offset: 0x2D79D0 VA: 0x1802D91D0
	private static bool InternalIsDefined(PropertyInfo element, Type attributeType, bool inherit) { }
	// RVA: 0x2D9290 Offset: 0x2D7A90 VA: 0x1802D9290
	private static bool InternalIsDefined(EventInfo element, Type attributeType, bool inherit) { }
	// RVA: 0x2D9350 Offset: 0x2D7B50 VA: 0x1802D9350
	public static Attribute[] GetCustomAttributes(MemberInfo element, Type type, bool inherit) { }
	// RVA: 0x2D9700 Offset: 0x2D7F00 VA: 0x1802D9700
	public static bool IsDefined(MemberInfo element, Type attributeType) { }
	// RVA: 0x2D9710 Offset: 0x2D7F10 VA: 0x1802D9710
	public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit) { }
	// RVA: 0x2D9A00 Offset: 0x2D8200 VA: 0x1802D9A00
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType) { }
	// RVA: 0x2D9A10 Offset: 0x2D8210 VA: 0x1802D9A10
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x2D9B10 Offset: 0x2D8310 VA: 0x1802D9B10 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x2D9ED0 Offset: 0x2D86D0 VA: 0x1802D9ED0
	private static bool AreFieldValuesEqual(object thisValue, object thatValue) { }
	// RVA: 0x2DA0E0 Offset: 0x2D88E0 VA: 0x1802DA0E0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum AttributeTargets // TypeDefIndex: 103
{
	// Fields
	public int value__; // 0x0
	public const AttributeTargets Assembly = 1; // 0x0
	public const AttributeTargets Module = 2; // 0x0
	public const AttributeTargets Class = 4; // 0x0
	public const AttributeTargets Struct = 8; // 0x0
	public const AttributeTargets Enum = 16; // 0x0
	public const AttributeTargets Constructor = 32; // 0x0
	public const AttributeTargets Method = 64; // 0x0
	public const AttributeTargets Property = 128; // 0x0
	public const AttributeTargets Field = 256; // 0x0
	public const AttributeTargets Event = 512; // 0x0
	public const AttributeTargets Interface = 1024; // 0x0
	public const AttributeTargets Parameter = 2048; // 0x0
	public const AttributeTargets Delegate = 4096; // 0x0
	public const AttributeTargets ReturnValue = 8192; // 0x0
	public const AttributeTargets GenericParameter = 16384; // 0x0
	public const AttributeTargets All = 32767; // 0x0
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xD93E0 Offset: 0xD87E0 VA: 0x1800D93E0
[Serializable]
public sealed class AttributeUsageAttribute : Attribute // TypeDefIndex: 104
{
	// Fields
	internal AttributeTargets m_attributeTarget; // 0x10
	internal bool m_allowMultiple; // 0x14
	internal bool m_inherited; // 0x15
	internal static AttributeUsageAttribute Default; // 0x0

	// Properties
	public bool AllowMultiple { set; }
	public bool Inherited { set; }

	// Methods
	// RVA: 0x2DA310 Offset: 0x2D8B10 VA: 0x1802DA310
	public void .ctor(AttributeTargets validOn) { }
	// RVA: 0x2DA320 Offset: 0x2D8B20 VA: 0x1802DA320
	public void set_AllowMultiple(bool value) { }
	// RVA: 0x2DA330 Offset: 0x2D8B30 VA: 0x1802DA330
	public void set_Inherited(bool value) { }
	// RVA: 0x2DA340 Offset: 0x2D8B40 VA: 0x1802DA340
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public class BadImageFormatException : SystemException // TypeDefIndex: 105
{
	// Fields
	private string _fileName; // 0x88
	private string _fusionLog; // 0x90

	// Properties
	public override string Message { get; }

	// Methods
	// RVA: 0x2DB210 Offset: 0x2D9A10 VA: 0x1802DB210
	public void .ctor() { }
	// RVA: 0x2DB2A0 Offset: 0x2D9AA0 VA: 0x1802DB2A0
	public void .ctor(string message) { }
	// RVA: 0x2DB2C0 Offset: 0x2D9AC0 VA: 0x1802DB2C0
	public void .ctor(string message, string fileName) { }
	// RVA: 0x2DB300 Offset: 0x2D9B00 VA: 0x1802DB300 Slot: 5
	public override string get_Message() { }
	// RVA: 0x2DB3B0 Offset: 0x2D9BB0 VA: 0x1802DB3B0
	private void SetMessageField() { }
	// RVA: 0x2DB460 Offset: 0x2D9C60 VA: 0x1802DB460 Slot: 3
	public override string ToString() { }
	// RVA: 0x2DB710 Offset: 0x2D9F10 VA: 0x1802DB710
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x2DB810 Offset: 0x2DA010 VA: 0x1802DB810 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
public static class BitConverter // TypeDefIndex: 106
{
	// Fields
	public static readonly bool IsLittleEndian; // 0xABDE0

	// Methods
	// RVA: 0x2E2650 Offset: 0x2E0E50 VA: 0x1802E2650
	private static bool AmILittleEndian() { }
	// RVA: 0x2E2670 Offset: 0x2E0E70 VA: 0x1802E2670
	public static byte[] GetBytes(short value) { }
	// RVA: 0x2E2710 Offset: 0x2E0F10 VA: 0x1802E2710
	public static byte[] GetBytes(int value) { }
	// RVA: 0x2E27B0 Offset: 0x2E0FB0 VA: 0x1802E27B0
	public static byte[] GetBytes(long value) { }
	// RVA: 0x2E2850 Offset: 0x2E1050 VA: 0x1802E2850
	public static byte[] GetBytes(uint value) { }
	// RVA: 0x2E28E0 Offset: 0x2E10E0 VA: 0x1802E28E0
	public static byte[] GetBytes(ulong value) { }
	// RVA: 0x2E29F0 Offset: 0x2E11F0 VA: 0x1802E29F0
	public static short ToInt16(byte[] value, int startIndex) { }
	// RVA: 0x2E2B40 Offset: 0x2E1340 VA: 0x1802E2B40
	public static int ToInt32(byte[] value, int startIndex) { }
	// RVA: 0x2E2CC0 Offset: 0x2E14C0 VA: 0x1802E2CC0
	public static long ToInt64(byte[] value, int startIndex) { }
	// RVA: 0x2E2EA0 Offset: 0x2E16A0 VA: 0x1802E2EA0
	public static ushort ToUInt16(byte[] value, int startIndex) { }
	// RVA: 0x2E2F80 Offset: 0x2E1780 VA: 0x1802E2F80
	public static uint ToUInt32(byte[] value, int startIndex) { }
	// RVA: 0x2E3060 Offset: 0x2E1860 VA: 0x1802E3060
	public static ulong ToUInt64(byte[] value, int startIndex) { }
	// RVA: 0x2E3140 Offset: 0x2E1940 VA: 0x1802E3140
	private static char GetHexValue(int i) { }
	// RVA: 0x2E3150 Offset: 0x2E1950 VA: 0x1802E3150
	public static string ToString(byte[] value, int startIndex, int length) { }
	// RVA: 0x2E3530 Offset: 0x2E1D30 VA: 0x1802E3530
	public static string ToString(byte[] value) { }
	// RVA: 0x2E3600 Offset: 0x2E1E00 VA: 0x1802E3600
	public static long DoubleToInt64Bits(double value) { }
	// RVA: 0x2E3610 Offset: 0x2E1E10 VA: 0x1802E3610
	public static double Int64BitsToDouble(long value) { }
	// RVA: 0x2E3620 Offset: 0x2E1E20 VA: 0x1802E3620
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public struct Boolean : IComparable, IConvertible, IComparable<bool>, IEquatable<bool> // TypeDefIndex: 107
{
	// Fields
	private bool m_value; // 0x0
	internal const int True = 1; // 0x0
	internal const int False = 0; // 0x0
	internal const string TrueLiteral = "True"; // 0x0
	internal const string FalseLiteral = "False"; // 0x0
	public static readonly string TrueString; // 0x0
	public static readonly string FalseString; // 0x8

	// Methods
	// RVA: 0xDB50 Offset: 0xCF50 VA: 0x18000DB50 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0xDB60 Offset: 0xCF60 VA: 0x18000DB60 Slot: 3
	public override string ToString() { }
	// RVA: 0xDB70 Offset: 0xCF70 VA: 0x18000DB70 Slot: 20
	public string ToString(IFormatProvider provider) { }
	// RVA: 0xDBF0 Offset: 0xCFF0 VA: 0x18000DBF0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x9400 Offset: 0x8800 VA: 0x180009400 Slot: 23
	public bool Equals(bool obj) { }
	// RVA: 0xDC00 Offset: 0xD000 VA: 0x18000DC00 Slot: 4
	public int CompareTo(object obj) { }
	// RVA: 0xDD20 Offset: 0xD120 VA: 0x18000DD20 Slot: 22
	public int CompareTo(bool value) { }
	// RVA: 0x2E4170 Offset: 0x2E2970 VA: 0x1802E4170
	public static bool Parse(string value) { }
	// RVA: 0x2E42A0 Offset: 0x2E2AA0 VA: 0x1802E42A0
	public static bool TryParse(string value, out bool result) { }
	// RVA: 0x2E47C0 Offset: 0x2E2FC0 VA: 0x1802E47C0
	private static string TrimWhiteSpaceAndNull(string value) { }
	// RVA: 0xDD40 Offset: 0xD140 VA: 0x18000DD40 Slot: 5
	public TypeCode GetTypeCode() { }
	// RVA: 0xDD50 Offset: 0xD150 VA: 0x18000DD50 Slot: 6
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0xDD60 Offset: 0xD160 VA: 0x18000DD60 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0xDD70 Offset: 0xD170 VA: 0x18000DD70 Slot: 8
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0xDE00 Offset: 0xD200 VA: 0x18000DE00 Slot: 9
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0xDE90 Offset: 0xD290 VA: 0x18000DE90 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0xDF30 Offset: 0xD330 VA: 0x18000DF30 Slot: 11
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0xDFD0 Offset: 0xD3D0 VA: 0x18000DFD0 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0xE070 Offset: 0xD470 VA: 0x18000E070 Slot: 13
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0xE110 Offset: 0xD510 VA: 0x18000E110 Slot: 14
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0xE1B0 Offset: 0xD5B0 VA: 0x18000E1B0 Slot: 15
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0xE250 Offset: 0xD650 VA: 0x18000E250 Slot: 16
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0xE2F0 Offset: 0xD6F0 VA: 0x18000E2F0 Slot: 17
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0xE390 Offset: 0xD790 VA: 0x18000E390 Slot: 18
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0xE4D0 Offset: 0xD8D0 VA: 0x18000E4D0 Slot: 19
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0xE4E0 Offset: 0xD8E0 VA: 0x18000E4E0 Slot: 21
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
	// RVA: 0x2E4AD0 Offset: 0x2E32D0 VA: 0x1802E4AD0
	private static void .cctor() { }
}

// Namespace: System
public static class Buffer // TypeDefIndex: 108
{
	// Methods
	// RVA: 0x244060 Offset: 0x242860 VA: 0x180244060
	internal static bool InternalBlockCopy(Array src, int srcOffsetBytes, Array dst, int dstOffsetBytes, int byteCount) { }
	// RVA: 0x244120 Offset: 0x242920 VA: 0x180244120
	internal static int IndexOfByte(byte* src, byte value, int index, int count) { }
	// RVA: 0x2441E0 Offset: 0x2429E0 VA: 0x1802441E0
	private static int _ByteLength(Array array) { }
	// RVA: 0x244230 Offset: 0x242A30 VA: 0x180244230
	public static int ByteLength(Array array) { }
	// RVA: 0x244360 Offset: 0x242B60 VA: 0x180244360
	public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count) { }
	// RVA: 0x244600 Offset: 0x242E00 VA: 0x180244600
	internal static void memcpy4(byte* dest, byte* src, int size) { }
	// RVA: 0x2446A0 Offset: 0x242EA0 VA: 0x1802446A0
	internal static void memcpy2(byte* dest, byte* src, int size) { }
	// RVA: 0x244720 Offset: 0x242F20 VA: 0x180244720
	private static void memcpy1(byte* dest, byte* src, int size) { }
	// RVA: 0x2447D0 Offset: 0x242FD0 VA: 0x1802447D0
	internal static void Memcpy(byte* dest, byte* src, int size) { }
}

// Namespace: System
[Serializable]
public struct Byte : IComparable, IFormattable, IConvertible, IComparable<byte>, IEquatable<byte> // TypeDefIndex: 109
{
	// Fields
	private byte m_value; // 0x0
	public const byte MaxValue = 255; // 0x0
	public const byte MinValue = 0; // 0x0

	// Methods
	// RVA: 0x92D0 Offset: 0x86D0 VA: 0x1800092D0 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0x93E0 Offset: 0x87E0 VA: 0x1800093E0 Slot: 23
	public int CompareTo(byte value) { }
	// RVA: 0x93F0 Offset: 0x87F0 VA: 0x1800093F0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x9400 Offset: 0x8800 VA: 0x180009400 Slot: 24
	public bool Equals(byte obj) { }
	// RVA: 0x9410 Offset: 0x8810 VA: 0x180009410 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x244AF0 Offset: 0x2432F0 VA: 0x180244AF0
	public static byte Parse(string s, NumberStyles style, IFormatProvider provider) { }
	// RVA: 0x244B40 Offset: 0x243340 VA: 0x180244B40
	private static byte Parse(string s, NumberStyles style, NumberFormatInfo info) { }
	// RVA: 0x9420 Offset: 0x8820 VA: 0x180009420 Slot: 3
	public override string ToString() { }
	// RVA: 0x9450 Offset: 0x8850 VA: 0x180009450
	public string ToString(string format) { }
	// RVA: 0x9490 Offset: 0x8890 VA: 0x180009490 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x94C0 Offset: 0x88C0 VA: 0x1800094C0 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x9500 Offset: 0x8900 VA: 0x180009500 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x9510 Offset: 0x8910 VA: 0x180009510 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x95A0 Offset: 0x89A0 VA: 0x1800095A0 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x9630 Offset: 0x8A30 VA: 0x180009630 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x9410 Offset: 0x8810 VA: 0x180009410 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x9760 Offset: 0x8B60 VA: 0x180009760 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x97F0 Offset: 0x8BF0 VA: 0x1800097F0 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x9880 Offset: 0x8C80 VA: 0x180009880 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x9910 Offset: 0x8D10 VA: 0x180009910 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x99A0 Offset: 0x8DA0 VA: 0x1800099A0 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x9A30 Offset: 0x8E30 VA: 0x180009A30 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x9AC0 Offset: 0x8EC0 VA: 0x180009AC0 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x9B60 Offset: 0x8F60 VA: 0x180009B60 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x9C00 Offset: 0x9000 VA: 0x180009C00 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x9D30 Offset: 0x9130 VA: 0x180009D30 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x9D40 Offset: 0x9140 VA: 0x180009D40 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[Serializable]
public class CannotUnloadAppDomainException : SystemException // TypeDefIndex: 110
{
	// Methods
	// RVA: 0x24FD00 Offset: 0x24E500 VA: 0x18024FD00
	public void .ctor() { }
	// RVA: 0x24FD90 Offset: 0x24E590 VA: 0x18024FD90
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public struct Char : IComparable, IConvertible, IComparable<char>, IEquatable<char> // TypeDefIndex: 111
{
	// Fields
	internal char m_value; // 0x0
	public const char MaxValue = '\xffff'; // 0x0
	public const char MinValue = '\x0'; // 0x0
	private static readonly byte[] categoryForLatin1; // 0x0
	internal const int UNICODE_PLANE00_END = 65535; // 0x0
	internal const int UNICODE_PLANE01_START = 65536; // 0x0
	internal const int UNICODE_PLANE16_END = 1114111; // 0x0
	internal const int HIGH_SURROGATE_START = 55296; // 0x0
	internal const int LOW_SURROGATE_END = 57343; // 0x0

	// Methods
	// RVA: 0x254330 Offset: 0x252B30 VA: 0x180254330
	private static bool IsLatin1(char ch) { }
	// RVA: 0x254340 Offset: 0x252B40 VA: 0x180254340
	private static bool IsAscii(char ch) { }
	// RVA: 0x254350 Offset: 0x252B50 VA: 0x180254350
	private static UnicodeCategory GetLatin1UnicodeCategory(char ch) { }
	// RVA: 0xA250 Offset: 0x9650 VA: 0x18000A250 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0xA260 Offset: 0x9660 VA: 0x18000A260 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0xA270 Offset: 0x9670 VA: 0x18000A270 Slot: 23
	public bool Equals(char obj) { }
	// RVA: 0xA280 Offset: 0x9680 VA: 0x18000A280 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0xA390 Offset: 0x9790 VA: 0x18000A390 Slot: 22
	public int CompareTo(char value) { }
	// RVA: 0xA3A0 Offset: 0x97A0 VA: 0x18000A3A0 Slot: 3
	public override string ToString() { }
	// RVA: 0xA3B0 Offset: 0x97B0 VA: 0x18000A3B0 Slot: 20
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x254620 Offset: 0x252E20 VA: 0x180254620
	public static string ToString(char c) { }
	// RVA: 0x2546D0 Offset: 0x252ED0 VA: 0x1802546D0
	public static char Parse(string s) { }
	// RVA: 0x2547D0 Offset: 0x252FD0 VA: 0x1802547D0
	public static bool IsDigit(char c) { }
	// RVA: 0x2548B0 Offset: 0x2530B0 VA: 0x1802548B0
	internal static bool CheckLetter(UnicodeCategory uc) { }
	// RVA: 0x2548C0 Offset: 0x2530C0 VA: 0x1802548C0
	public static bool IsLetter(char c) { }
	// RVA: 0x254A20 Offset: 0x253220 VA: 0x180254A20
	private static bool IsWhiteSpaceLatin1(char c) { }
	// RVA: 0x254A50 Offset: 0x253250 VA: 0x180254A50
	public static bool IsWhiteSpace(char c) { }
	// RVA: 0x254C00 Offset: 0x253400 VA: 0x180254C00
	public static bool IsUpper(char c) { }
	// RVA: 0x254D30 Offset: 0x253530 VA: 0x180254D30
	public static bool IsLower(char c) { }
	// RVA: 0x254E70 Offset: 0x253670 VA: 0x180254E70
	internal static bool CheckPunctuation(UnicodeCategory uc) { }
	// RVA: 0x254E80 Offset: 0x253680 VA: 0x180254E80
	public static bool IsPunctuation(char c) { }
	// RVA: 0x254FA0 Offset: 0x2537A0 VA: 0x180254FA0
	internal static bool CheckLetterOrDigit(UnicodeCategory uc) { }
	// RVA: 0x254FB0 Offset: 0x2537B0 VA: 0x180254FB0
	public static bool IsLetterOrDigit(char c) { }
	// RVA: 0x2550D0 Offset: 0x2538D0 VA: 0x1802550D0
	public static char ToUpper(char c, CultureInfo culture) { }
	// RVA: 0x2551B0 Offset: 0x2539B0 VA: 0x1802551B0
	public static char ToUpper(char c) { }
	// RVA: 0x255290 Offset: 0x253A90 VA: 0x180255290
	public static char ToUpperInvariant(char c) { }
	// RVA: 0x255360 Offset: 0x253B60 VA: 0x180255360
	public static char ToLower(char c, CultureInfo culture) { }
	// RVA: 0x255440 Offset: 0x253C40 VA: 0x180255440
	public static char ToLower(char c) { }
	// RVA: 0x255520 Offset: 0x253D20 VA: 0x180255520
	public static char ToLowerInvariant(char c) { }
	// RVA: 0xA3C0 Offset: 0x97C0 VA: 0x18000A3C0 Slot: 5
	public TypeCode GetTypeCode() { }
	// RVA: 0xA3D0 Offset: 0x97D0 VA: 0x18000A3D0 Slot: 6
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0xA3E0 Offset: 0x97E0 VA: 0x18000A3E0 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0xA3F0 Offset: 0x97F0 VA: 0x18000A3F0 Slot: 8
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0xA520 Offset: 0x9920 VA: 0x18000A520 Slot: 9
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0xA660 Offset: 0x9A60 VA: 0x18000A660 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0xA7A0 Offset: 0x9BA0 VA: 0x18000A7A0 Slot: 11
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0xA830 Offset: 0x9C30 VA: 0x18000A830 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0xA8C0 Offset: 0x9CC0 VA: 0x18000A8C0 Slot: 13
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0xA950 Offset: 0x9D50 VA: 0x18000A950 Slot: 14
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0xA9E0 Offset: 0x9DE0 VA: 0x18000A9E0 Slot: 15
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0xAA70 Offset: 0x9E70 VA: 0x18000AA70 Slot: 16
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0xAA80 Offset: 0x9E80 VA: 0x18000AA80 Slot: 17
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0xAA90 Offset: 0x9E90 VA: 0x18000AA90 Slot: 18
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0xAAA0 Offset: 0x9EA0 VA: 0x18000AAA0 Slot: 19
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0xAAB0 Offset: 0x9EB0 VA: 0x18000AAB0 Slot: 21
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
	// RVA: 0x255A00 Offset: 0x254200 VA: 0x180255A00
	public static bool IsControl(char c) { }
	// RVA: 0x255B00 Offset: 0x254300 VA: 0x180255B00
	public static bool IsLetterOrDigit(string s, int index) { }
	// RVA: 0x255CD0 Offset: 0x2544D0 VA: 0x180255CD0
	internal static bool CheckNumber(UnicodeCategory uc) { }
	// RVA: 0x255CE0 Offset: 0x2544E0 VA: 0x180255CE0
	public static bool IsNumber(char c) { }
	// RVA: 0x255E40 Offset: 0x254640 VA: 0x180255E40
	internal static bool CheckSeparator(UnicodeCategory uc) { }
	// RVA: 0x255E50 Offset: 0x254650 VA: 0x180255E50
	private static bool IsSeparatorLatin1(char c) { }
	// RVA: 0x255E70 Offset: 0x254670 VA: 0x180255E70
	public static bool IsSeparator(char c) { }
	// RVA: 0x255F90 Offset: 0x254790 VA: 0x180255F90
	public static bool IsSurrogate(char c) { }
	// RVA: 0x255FB0 Offset: 0x2547B0 VA: 0x180255FB0
	public static bool IsSurrogate(string s, int index) { }
	// RVA: 0x2560F0 Offset: 0x2548F0 VA: 0x1802560F0
	public static bool IsWhiteSpace(string s, int index) { }
	// RVA: 0x256330 Offset: 0x254B30 VA: 0x180256330
	public static UnicodeCategory GetUnicodeCategory(char c) { }
	// RVA: 0x256420 Offset: 0x254C20 VA: 0x180256420
	public static UnicodeCategory GetUnicodeCategory(string s, int index) { }
	// RVA: 0x2565C0 Offset: 0x254DC0 VA: 0x1802565C0
	public static bool IsHighSurrogate(char c) { }
	// RVA: 0x2565E0 Offset: 0x254DE0 VA: 0x1802565E0
	public static bool IsHighSurrogate(string s, int index) { }
	// RVA: 0x256720 Offset: 0x254F20 VA: 0x180256720
	public static bool IsLowSurrogate(char c) { }
	// RVA: 0x256740 Offset: 0x254F40 VA: 0x180256740
	public static bool IsSurrogatePair(char highSurrogate, char lowSurrogate) { }
	// RVA: 0x256770 Offset: 0x254F70 VA: 0x180256770
	public static int ConvertToUtf32(char highSurrogate, char lowSurrogate) { }
	// RVA: 0x2568F0 Offset: 0x2550F0 VA: 0x1802568F0
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public sealed class CharEnumerator : IEnumerator, ICloneable, IEnumerator<char>, IDisposable // TypeDefIndex: 112
{
	// Fields
	private string str; // 0x10
	private int index; // 0x18
	private char currentElement; // 0x1C

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public char Current { get; }

	// Methods
	// RVA: 0x256990 Offset: 0x255190 VA: 0x180256990
	internal void .ctor(string str) { }
	// RVA: 0x2569A0 Offset: 0x2551A0 VA: 0x1802569A0 Slot: 6
	public object Clone() { }
	// RVA: 0x2569B0 Offset: 0x2551B0 VA: 0x1802569B0 Slot: 4
	public bool MoveNext() { }
	// RVA: 0x256A00 Offset: 0x255200 VA: 0x180256A00 Slot: 8
	public void Dispose() { }
	// RVA: 0x256A20 Offset: 0x255220 VA: 0x180256A20 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }
	// RVA: 0x256B50 Offset: 0x255350 VA: 0x180256B50 Slot: 7
	public char get_Current() { }
	// RVA: 0x256C60 Offset: 0x255460 VA: 0x180256C60
	internal void .ctor() { }
}

// Namespace: System
public sealed class ConsoleCancelEventHandler : MulticastDelegate // TypeDefIndex: 113
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x261A80 Offset: 0x260280 VA: 0x180261A80 Slot: 12
	public virtual void Invoke(object sender, ConsoleCancelEventArgs e) { }
	// RVA: 0x261F90 Offset: 0x260790 VA: 0x180261F90 Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, ConsoleCancelEventArgs e, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[Serializable]
public sealed class ConsoleCancelEventArgs : EventArgs // TypeDefIndex: 114
{
	// Fields
	private ConsoleSpecialKey _type; // 0x10
	private bool _cancel; // 0x14

	// Methods
	// RVA: 0x2619B0 Offset: 0x2601B0 VA: 0x1802619B0
	internal void .ctor(ConsoleSpecialKey type) { }
	// RVA: 0x261A50 Offset: 0x260250 VA: 0x180261A50
	internal void .ctor() { }
}

// Namespace: System
[Serializable]
public enum ConsoleColor // TypeDefIndex: 115
{
	// Fields
	public int value__; // 0x0
	public const ConsoleColor Black = 0; // 0x0
	public const ConsoleColor DarkBlue = 1; // 0x0
	public const ConsoleColor DarkGreen = 2; // 0x0
	public const ConsoleColor DarkCyan = 3; // 0x0
	public const ConsoleColor DarkRed = 4; // 0x0
	public const ConsoleColor DarkMagenta = 5; // 0x0
	public const ConsoleColor DarkYellow = 6; // 0x0
	public const ConsoleColor Gray = 7; // 0x0
	public const ConsoleColor DarkGray = 8; // 0x0
	public const ConsoleColor Blue = 9; // 0x0
	public const ConsoleColor Green = 10; // 0x0
	public const ConsoleColor Cyan = 11; // 0x0
	public const ConsoleColor Red = 12; // 0x0
	public const ConsoleColor Magenta = 13; // 0x0
	public const ConsoleColor Yellow = 14; // 0x0
	public const ConsoleColor White = 15; // 0x0
}

// Namespace: System
[Serializable]
public enum ConsoleKey // TypeDefIndex: 116
{
	// Fields
	public int value__; // 0x0
	public const ConsoleKey Backspace = 8; // 0x0
	public const ConsoleKey Tab = 9; // 0x0
	public const ConsoleKey Clear = 12; // 0x0
	public const ConsoleKey Enter = 13; // 0x0
	public const ConsoleKey Pause = 19; // 0x0
	public const ConsoleKey Escape = 27; // 0x0
	public const ConsoleKey Spacebar = 32; // 0x0
	public const ConsoleKey PageUp = 33; // 0x0
	public const ConsoleKey PageDown = 34; // 0x0
	public const ConsoleKey End = 35; // 0x0
	public const ConsoleKey Home = 36; // 0x0
	public const ConsoleKey LeftArrow = 37; // 0x0
	public const ConsoleKey UpArrow = 38; // 0x0
	public const ConsoleKey RightArrow = 39; // 0x0
	public const ConsoleKey DownArrow = 40; // 0x0
	public const ConsoleKey Select = 41; // 0x0
	public const ConsoleKey Print = 42; // 0x0
	public const ConsoleKey Execute = 43; // 0x0
	public const ConsoleKey PrintScreen = 44; // 0x0
	public const ConsoleKey Insert = 45; // 0x0
	public const ConsoleKey Delete = 46; // 0x0
	public const ConsoleKey Help = 47; // 0x0
	public const ConsoleKey D0 = 48; // 0x0
	public const ConsoleKey D1 = 49; // 0x0
	public const ConsoleKey D2 = 50; // 0x0
	public const ConsoleKey D3 = 51; // 0x0
	public const ConsoleKey D4 = 52; // 0x0
	public const ConsoleKey D5 = 53; // 0x0
	public const ConsoleKey D6 = 54; // 0x0
	public const ConsoleKey D7 = 55; // 0x0
	public const ConsoleKey D8 = 56; // 0x0
	public const ConsoleKey D9 = 57; // 0x0
	public const ConsoleKey A = 65; // 0x0
	public const ConsoleKey B = 66; // 0x0
	public const ConsoleKey C = 67; // 0x0
	public const ConsoleKey D = 68; // 0x0
	public const ConsoleKey E = 69; // 0x0
	public const ConsoleKey F = 70; // 0x0
	public const ConsoleKey G = 71; // 0x0
	public const ConsoleKey H = 72; // 0x0
	public const ConsoleKey I = 73; // 0x0
	public const ConsoleKey J = 74; // 0x0
	public const ConsoleKey K = 75; // 0x0
	public const ConsoleKey L = 76; // 0x0
	public const ConsoleKey M = 77; // 0x0
	public const ConsoleKey N = 78; // 0x0
	public const ConsoleKey O = 79; // 0x0
	public const ConsoleKey P = 80; // 0x0
	public const ConsoleKey Q = 81; // 0x0
	public const ConsoleKey R = 82; // 0x0
	public const ConsoleKey S = 83; // 0x0
	public const ConsoleKey T = 84; // 0x0
	public const ConsoleKey U = 85; // 0x0
	public const ConsoleKey V = 86; // 0x0
	public const ConsoleKey W = 87; // 0x0
	public const ConsoleKey X = 88; // 0x0
	public const ConsoleKey Y = 89; // 0x0
	public const ConsoleKey Z = 90; // 0x0
	public const ConsoleKey LeftWindows = 91; // 0x0
	public const ConsoleKey RightWindows = 92; // 0x0
	public const ConsoleKey Applications = 93; // 0x0
	public const ConsoleKey Sleep = 95; // 0x0
	public const ConsoleKey NumPad0 = 96; // 0x0
	public const ConsoleKey NumPad1 = 97; // 0x0
	public const ConsoleKey NumPad2 = 98; // 0x0
	public const ConsoleKey NumPad3 = 99; // 0x0
	public const ConsoleKey NumPad4 = 100; // 0x0
	public const ConsoleKey NumPad5 = 101; // 0x0
	public const ConsoleKey NumPad6 = 102; // 0x0
	public const ConsoleKey NumPad7 = 103; // 0x0
	public const ConsoleKey NumPad8 = 104; // 0x0
	public const ConsoleKey NumPad9 = 105; // 0x0
	public const ConsoleKey Multiply = 106; // 0x0
	public const ConsoleKey Add = 107; // 0x0
	public const ConsoleKey Separator = 108; // 0x0
	public const ConsoleKey Subtract = 109; // 0x0
	public const ConsoleKey Decimal = 110; // 0x0
	public const ConsoleKey Divide = 111; // 0x0
	public const ConsoleKey F1 = 112; // 0x0
	public const ConsoleKey F2 = 113; // 0x0
	public const ConsoleKey F3 = 114; // 0x0
	public const ConsoleKey F4 = 115; // 0x0
	public const ConsoleKey F5 = 116; // 0x0
	public const ConsoleKey F6 = 117; // 0x0
	public const ConsoleKey F7 = 118; // 0x0
	public const ConsoleKey F8 = 119; // 0x0
	public const ConsoleKey F9 = 120; // 0x0
	public const ConsoleKey F10 = 121; // 0x0
	public const ConsoleKey F11 = 122; // 0x0
	public const ConsoleKey F12 = 123; // 0x0
	public const ConsoleKey F13 = 124; // 0x0
	public const ConsoleKey F14 = 125; // 0x0
	public const ConsoleKey F15 = 126; // 0x0
	public const ConsoleKey F16 = 127; // 0x0
	public const ConsoleKey F17 = 128; // 0x0
	public const ConsoleKey F18 = 129; // 0x0
	public const ConsoleKey F19 = 130; // 0x0
	public const ConsoleKey F20 = 131; // 0x0
	public const ConsoleKey F21 = 132; // 0x0
	public const ConsoleKey F22 = 133; // 0x0
	public const ConsoleKey F23 = 134; // 0x0
	public const ConsoleKey F24 = 135; // 0x0
	public const ConsoleKey BrowserBack = 166; // 0x0
	public const ConsoleKey BrowserForward = 167; // 0x0
	public const ConsoleKey BrowserRefresh = 168; // 0x0
	public const ConsoleKey BrowserStop = 169; // 0x0
	public const ConsoleKey BrowserSearch = 170; // 0x0
	public const ConsoleKey BrowserFavorites = 171; // 0x0
	public const ConsoleKey BrowserHome = 172; // 0x0
	public const ConsoleKey VolumeMute = 173; // 0x0
	public const ConsoleKey VolumeDown = 174; // 0x0
	public const ConsoleKey VolumeUp = 175; // 0x0
	public const ConsoleKey MediaNext = 176; // 0x0
	public const ConsoleKey MediaPrevious = 177; // 0x0
	public const ConsoleKey MediaStop = 178; // 0x0
	public const ConsoleKey MediaPlay = 179; // 0x0
	public const ConsoleKey LaunchMail = 180; // 0x0
	public const ConsoleKey LaunchMediaSelect = 181; // 0x0
	public const ConsoleKey LaunchApp1 = 182; // 0x0
	public const ConsoleKey LaunchApp2 = 183; // 0x0
	public const ConsoleKey Oem1 = 186; // 0x0
	public const ConsoleKey OemPlus = 187; // 0x0
	public const ConsoleKey OemComma = 188; // 0x0
	public const ConsoleKey OemMinus = 189; // 0x0
	public const ConsoleKey OemPeriod = 190; // 0x0
	public const ConsoleKey Oem2 = 191; // 0x0
	public const ConsoleKey Oem3 = 192; // 0x0
	public const ConsoleKey Oem4 = 219; // 0x0
	public const ConsoleKey Oem5 = 220; // 0x0
	public const ConsoleKey Oem6 = 221; // 0x0
	public const ConsoleKey Oem7 = 222; // 0x0
	public const ConsoleKey Oem8 = 223; // 0x0
	public const ConsoleKey Oem102 = 226; // 0x0
	public const ConsoleKey Process = 229; // 0x0
	public const ConsoleKey Packet = 231; // 0x0
	public const ConsoleKey Attention = 246; // 0x0
	public const ConsoleKey CrSel = 247; // 0x0
	public const ConsoleKey ExSel = 248; // 0x0
	public const ConsoleKey EraseEndOfFile = 249; // 0x0
	public const ConsoleKey Play = 250; // 0x0
	public const ConsoleKey Zoom = 251; // 0x0
	public const ConsoleKey NoName = 252; // 0x0
	public const ConsoleKey Pa1 = 253; // 0x0
	public const ConsoleKey OemClear = 254; // 0x0
}

// Namespace: System
[Serializable]
public struct ConsoleKeyInfo // TypeDefIndex: 117
{
	// Fields
	private char _keyChar; // 0x0
	private ConsoleKey _key; // 0x4
	private ConsoleModifiers _mods; // 0x8

	// Methods
	// RVA: 0xABC0 Offset: 0x9FC0 VA: 0x18000ABC0
	public void .ctor(char keyChar, ConsoleKey key, bool shift, bool alt, bool control) { }
	// RVA: 0xABE0 Offset: 0x9FE0 VA: 0x18000ABE0 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0xACE0 Offset: 0xA0E0 VA: 0x18000ACE0
	public bool Equals(ConsoleKeyInfo obj) { }
	// RVA: 0xAD20 Offset: 0xA120 VA: 0x18000AD20 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum ConsoleModifiers // TypeDefIndex: 118
{
	// Fields
	public int value__; // 0x0
	public const ConsoleModifiers Alt = 1; // 0x0
	public const ConsoleModifiers Shift = 2; // 0x0
	public const ConsoleModifiers Control = 4; // 0x0
}

// Namespace: System
[Serializable]
public enum ConsoleSpecialKey // TypeDefIndex: 119
{
	// Fields
	public int value__; // 0x0
	public const ConsoleSpecialKey ControlC = 0; // 0x0
	public const ConsoleSpecialKey ControlBreak = 1; // 0x0
}

// Namespace: System
[Serializable]
public abstract class ContextBoundObject : MarshalByRefObject // TypeDefIndex: 120
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum Base64FormattingOptions // TypeDefIndex: 121
{
	// Fields
	public int value__; // 0x0
	public const Base64FormattingOptions None = 0; // 0x0
	public const Base64FormattingOptions InsertLineBreaks = 1; // 0x0
}

// Namespace: System
public static class Convert // TypeDefIndex: 122
{
	// Fields
	internal static readonly RuntimeType[] ConvertTypes; // 0x0
	private static readonly RuntimeType EnumType; // 0x8
	internal static readonly char[] base64Table; // 0x10
	public static readonly object DBNull; // 0x18

	// Methods
	// RVA: 0x3EA640 Offset: 0x3E8E40 VA: 0x1803EA640
	public static TypeCode GetTypeCode(object value) { }
	// RVA: 0x3EA6F0 Offset: 0x3E8EF0 VA: 0x1803EA6F0
	public static object ChangeType(object value, TypeCode typeCode, IFormatProvider provider) { }
	// RVA: 0x3EAB30 Offset: 0x3E9330 VA: 0x1803EAB30
	internal static object DefaultToType(IConvertible value, Type targetType, IFormatProvider provider) { }
	// RVA: 0x3EBA80 Offset: 0x3EA280 VA: 0x1803EBA80
	public static object ChangeType(object value, Type conversionType, IFormatProvider provider) { }
	// RVA: 0x3EC7E0 Offset: 0x3EAFE0 VA: 0x1803EC7E0
	public static bool ToBoolean(object value, IFormatProvider provider) { }
	// RVA: 0x3EC8D0 Offset: 0x3EB0D0 VA: 0x1803EC8D0
	public static bool ToBoolean(sbyte value) { }
	// RVA: 0x3EC8D0 Offset: 0x3EB0D0 VA: 0x1803EC8D0
	public static bool ToBoolean(byte value) { }
	// RVA: 0x3EC8E0 Offset: 0x3EB0E0 VA: 0x1803EC8E0
	public static bool ToBoolean(short value) { }
	// RVA: 0x3EC8E0 Offset: 0x3EB0E0 VA: 0x1803EC8E0
	public static bool ToBoolean(ushort value) { }
	// RVA: 0x314B40 Offset: 0x313340 VA: 0x180314B40
	public static bool ToBoolean(int value) { }
	// RVA: 0x314B40 Offset: 0x313340 VA: 0x180314B40
	public static bool ToBoolean(uint value) { }
	// RVA: 0x3EC8F0 Offset: 0x3EB0F0 VA: 0x1803EC8F0
	public static bool ToBoolean(long value) { }
	// RVA: 0x3EC8F0 Offset: 0x3EB0F0 VA: 0x1803EC8F0
	public static bool ToBoolean(ulong value) { }
	// RVA: 0x3EC900 Offset: 0x3EB100 VA: 0x1803EC900
	public static bool ToBoolean(string value, IFormatProvider provider) { }
	// RVA: 0x3EC9A0 Offset: 0x3EB1A0 VA: 0x1803EC9A0
	public static bool ToBoolean(float value) { }
	// RVA: 0x3EC9B0 Offset: 0x3EB1B0 VA: 0x1803EC9B0
	public static bool ToBoolean(double value) { }
	// RVA: 0x3EC9D0 Offset: 0x3EB1D0 VA: 0x1803EC9D0
	public static bool ToBoolean(Decimal value) { }
	// RVA: 0x3ECB80 Offset: 0x3EB380 VA: 0x1803ECB80
	public static char ToChar(object value, IFormatProvider provider) { }
	// RVA: 0x3ECC70 Offset: 0x3EB470 VA: 0x1803ECC70
	public static char ToChar(sbyte value) { }
	// RVA: 0x3ECD30 Offset: 0x3EB530 VA: 0x1803ECD30
	public static char ToChar(byte value) { }
	// RVA: 0x3ECD40 Offset: 0x3EB540 VA: 0x1803ECD40
	public static char ToChar(short value) { }
	// RVA: 0x392030 Offset: 0x390830 VA: 0x180392030
	public static char ToChar(ushort value) { }
	// RVA: 0x3ECE00 Offset: 0x3EB600 VA: 0x1803ECE00
	public static char ToChar(int value) { }
	// RVA: 0x3ECEC0 Offset: 0x3EB6C0 VA: 0x1803ECEC0
	public static char ToChar(uint value) { }
	// RVA: 0x3ECF80 Offset: 0x3EB780 VA: 0x1803ECF80
	public static char ToChar(long value) { }
	// RVA: 0x3ED040 Offset: 0x3EB840 VA: 0x1803ED040
	public static char ToChar(ulong value) { }
	// RVA: 0x3ED100 Offset: 0x3EB900 VA: 0x1803ED100
	public static char ToChar(string value, IFormatProvider provider) { }
	// RVA: 0x3ED200 Offset: 0x3EBA00 VA: 0x1803ED200
	public static sbyte ToSByte(object value, IFormatProvider provider) { }
	// RVA: 0x3EC8D0 Offset: 0x3EB0D0 VA: 0x1803EC8D0
	public static sbyte ToSByte(bool value) { }
	// RVA: 0x3ED2F0 Offset: 0x3EBAF0 VA: 0x1803ED2F0
	public static sbyte ToSByte(char value) { }
	// RVA: 0x3ED3B0 Offset: 0x3EBBB0 VA: 0x1803ED3B0
	public static sbyte ToSByte(byte value) { }
	// RVA: 0x3ED470 Offset: 0x3EBC70 VA: 0x1803ED470
	public static sbyte ToSByte(short value) { }
	// RVA: 0x3ED540 Offset: 0x3EBD40 VA: 0x1803ED540
	public static sbyte ToSByte(ushort value) { }
	// RVA: 0x3ED600 Offset: 0x3EBE00 VA: 0x1803ED600
	public static sbyte ToSByte(int value) { }
	// RVA: 0x3ED6C0 Offset: 0x3EBEC0 VA: 0x1803ED6C0
	public static sbyte ToSByte(uint value) { }
	// RVA: 0x3ED780 Offset: 0x3EBF80 VA: 0x1803ED780
	public static sbyte ToSByte(long value) { }
	// RVA: 0x3ED850 Offset: 0x3EC050 VA: 0x1803ED850
	public static sbyte ToSByte(ulong value) { }
	// RVA: 0x3ED910 Offset: 0x3EC110 VA: 0x1803ED910
	public static sbyte ToSByte(float value) { }
	// RVA: 0x3ED9B0 Offset: 0x3EC1B0 VA: 0x1803ED9B0
	public static sbyte ToSByte(double value) { }
	// RVA: 0x3EDA50 Offset: 0x3EC250 VA: 0x1803EDA50
	public static sbyte ToSByte(Decimal value) { }
	// RVA: 0x3EDBB0 Offset: 0x3EC3B0 VA: 0x1803EDBB0
	public static sbyte ToSByte(string value, IFormatProvider provider) { }
	// RVA: 0x3EDBF0 Offset: 0x3EC3F0 VA: 0x1803EDBF0
	public static byte ToByte(object value, IFormatProvider provider) { }
	// RVA: 0x3EC8D0 Offset: 0x3EB0D0 VA: 0x1803EC8D0
	public static byte ToByte(bool value) { }
	// RVA: 0x3EDCE0 Offset: 0x3EC4E0 VA: 0x1803EDCE0
	public static byte ToByte(char value) { }
	// RVA: 0x3EDDA0 Offset: 0x3EC5A0 VA: 0x1803EDDA0
	public static byte ToByte(sbyte value) { }
	// RVA: 0x3EDE60 Offset: 0x3EC660 VA: 0x1803EDE60
	public static byte ToByte(short value) { }
	// RVA: 0x3EDF20 Offset: 0x3EC720 VA: 0x1803EDF20
	public static byte ToByte(ushort value) { }
	// RVA: 0x3EDFE0 Offset: 0x3EC7E0 VA: 0x1803EDFE0
	public static byte ToByte(int value) { }
	// RVA: 0x3EE0A0 Offset: 0x3EC8A0 VA: 0x1803EE0A0
	public static byte ToByte(uint value) { }
	// RVA: 0x3EE160 Offset: 0x3EC960 VA: 0x1803EE160
	public static byte ToByte(long value) { }
	// RVA: 0x3EE220 Offset: 0x3ECA20 VA: 0x1803EE220
	public static byte ToByte(ulong value) { }
	// RVA: 0x3EE2E0 Offset: 0x3ECAE0 VA: 0x1803EE2E0
	public static byte ToByte(float value) { }
	// RVA: 0x3EE380 Offset: 0x3ECB80 VA: 0x1803EE380
	public static byte ToByte(double value) { }
	// RVA: 0x3EE420 Offset: 0x3ECC20 VA: 0x1803EE420
	public static byte ToByte(Decimal value) { }
	// RVA: 0x3EE580 Offset: 0x3ECD80 VA: 0x1803EE580
	public static byte ToByte(string value, IFormatProvider provider) { }
	// RVA: 0x3EE5E0 Offset: 0x3ECDE0 VA: 0x1803EE5E0
	public static short ToInt16(object value, IFormatProvider provider) { }
	// RVA: 0x3EE6D0 Offset: 0x3ECED0 VA: 0x1803EE6D0
	public static short ToInt16(bool value) { }
	// RVA: 0x3EE6E0 Offset: 0x3ECEE0 VA: 0x1803EE6E0
	public static short ToInt16(char value) { }
	// RVA: 0x3EE7A0 Offset: 0x3ECFA0 VA: 0x1803EE7A0
	public static short ToInt16(sbyte value) { }
	// RVA: 0x3ECD30 Offset: 0x3EB530 VA: 0x1803ECD30
	public static short ToInt16(byte value) { }
	// RVA: 0x3EE7B0 Offset: 0x3ECFB0 VA: 0x1803EE7B0
	public static short ToInt16(ushort value) { }
	// RVA: 0x3EE870 Offset: 0x3ED070 VA: 0x1803EE870
	public static short ToInt16(int value) { }
	// RVA: 0x3EE930 Offset: 0x3ED130 VA: 0x1803EE930
	public static short ToInt16(uint value) { }
	// RVA: 0x3EE9F0 Offset: 0x3ED1F0 VA: 0x1803EE9F0
	public static short ToInt16(long value) { }
	// RVA: 0x3EEAC0 Offset: 0x3ED2C0 VA: 0x1803EEAC0
	public static short ToInt16(ulong value) { }
	// RVA: 0x3EEB80 Offset: 0x3ED380 VA: 0x1803EEB80
	public static short ToInt16(float value) { }
	// RVA: 0x3EEC20 Offset: 0x3ED420 VA: 0x1803EEC20
	public static short ToInt16(double value) { }
	// RVA: 0x3EECC0 Offset: 0x3ED4C0 VA: 0x1803EECC0
	public static short ToInt16(Decimal value) { }
	// RVA: 0x3EEE20 Offset: 0x3ED620 VA: 0x1803EEE20
	public static short ToInt16(string value, IFormatProvider provider) { }
	// RVA: 0x3EEE80 Offset: 0x3ED680 VA: 0x1803EEE80
	public static ushort ToUInt16(object value, IFormatProvider provider) { }
	// RVA: 0x3EE6D0 Offset: 0x3ECED0 VA: 0x1803EE6D0
	public static ushort ToUInt16(bool value) { }
	// RVA: 0x392030 Offset: 0x390830 VA: 0x180392030
	public static ushort ToUInt16(char value) { }
	// RVA: 0x3EEF70 Offset: 0x3ED770 VA: 0x1803EEF70
	public static ushort ToUInt16(sbyte value) { }
	// RVA: 0x3ECD30 Offset: 0x3EB530 VA: 0x1803ECD30
	public static ushort ToUInt16(byte value) { }
	// RVA: 0x3EF030 Offset: 0x3ED830 VA: 0x1803EF030
	public static ushort ToUInt16(short value) { }
	// RVA: 0x3EF0F0 Offset: 0x3ED8F0 VA: 0x1803EF0F0
	public static ushort ToUInt16(int value) { }
	// RVA: 0x3EF1B0 Offset: 0x3ED9B0 VA: 0x1803EF1B0
	public static ushort ToUInt16(uint value) { }
	// RVA: 0x3EF270 Offset: 0x3EDA70 VA: 0x1803EF270
	public static ushort ToUInt16(long value) { }
	// RVA: 0x3EF330 Offset: 0x3EDB30 VA: 0x1803EF330
	public static ushort ToUInt16(ulong value) { }
	// RVA: 0x3EF3F0 Offset: 0x3EDBF0 VA: 0x1803EF3F0
	public static ushort ToUInt16(float value) { }
	// RVA: 0x3EF490 Offset: 0x3EDC90 VA: 0x1803EF490
	public static ushort ToUInt16(double value) { }
	// RVA: 0x3EF530 Offset: 0x3EDD30 VA: 0x1803EF530
	public static ushort ToUInt16(Decimal value) { }
	// RVA: 0x3EF690 Offset: 0x3EDE90 VA: 0x1803EF690
	public static ushort ToUInt16(string value, IFormatProvider provider) { }
	// RVA: 0x3EF6F0 Offset: 0x3EDEF0 VA: 0x1803EF6F0
	public static int ToInt32(object value) { }
	// RVA: 0x3EF7D0 Offset: 0x3EDFD0 VA: 0x1803EF7D0
	public static int ToInt32(object value, IFormatProvider provider) { }
	// RVA: 0x314B50 Offset: 0x313350 VA: 0x180314B50
	public static int ToInt32(bool value) { }
	// RVA: 0x392030 Offset: 0x390830 VA: 0x180392030
	public static int ToInt32(char value) { }
	// RVA: 0x3ECD30 Offset: 0x3EB530 VA: 0x1803ECD30
	public static int ToInt32(byte value) { }
	// RVA: 0x3EF8C0 Offset: 0x3EE0C0 VA: 0x1803EF8C0
	public static int ToInt32(short value) { }
	// RVA: 0x392030 Offset: 0x390830 VA: 0x180392030
	public static int ToInt32(ushort value) { }
	// RVA: 0x3EF8D0 Offset: 0x3EE0D0 VA: 0x1803EF8D0
	public static int ToInt32(uint value) { }
	// RVA: 0x3EF990 Offset: 0x3EE190 VA: 0x1803EF990
	public static int ToInt32(long value) { }
	// RVA: 0x3EFA60 Offset: 0x3EE260 VA: 0x1803EFA60
	public static int ToInt32(ulong value) { }
	// RVA: 0x3EFB20 Offset: 0x3EE320 VA: 0x1803EFB20
	public static int ToInt32(float value) { }
	// RVA: 0x3EFBC0 Offset: 0x3EE3C0 VA: 0x1803EFBC0
	public static int ToInt32(double value) { }
	// RVA: 0x3EFD10 Offset: 0x3EE510 VA: 0x1803EFD10
	public static int ToInt32(Decimal value) { }
	// RVA: 0x3EFE00 Offset: 0x3EE600 VA: 0x1803EFE00
	public static int ToInt32(string value, IFormatProvider provider) { }
	// RVA: 0x3EFE60 Offset: 0x3EE660 VA: 0x1803EFE60
	public static uint ToUInt32(object value) { }
	// RVA: 0x3EFF40 Offset: 0x3EE740 VA: 0x1803EFF40
	public static uint ToUInt32(object value, IFormatProvider provider) { }
	// RVA: 0x314B50 Offset: 0x313350 VA: 0x180314B50
	public static uint ToUInt32(bool value) { }
	// RVA: 0x392030 Offset: 0x390830 VA: 0x180392030
	public static uint ToUInt32(char value) { }
	// RVA: 0x3F0030 Offset: 0x3EE830 VA: 0x1803F0030
	public static uint ToUInt32(sbyte value) { }
	// RVA: 0x3ECD30 Offset: 0x3EB530 VA: 0x1803ECD30
	public static uint ToUInt32(byte value) { }
	// RVA: 0x3F00F0 Offset: 0x3EE8F0 VA: 0x1803F00F0
	public static uint ToUInt32(short value) { }
	// RVA: 0x392030 Offset: 0x390830 VA: 0x180392030
	public static uint ToUInt32(ushort value) { }
	// RVA: 0x3F01B0 Offset: 0x3EE9B0 VA: 0x1803F01B0
	public static uint ToUInt32(int value) { }
	// RVA: 0x3F0270 Offset: 0x3EEA70 VA: 0x1803F0270
	public static uint ToUInt32(long value) { }
	// RVA: 0x3F0330 Offset: 0x3EEB30 VA: 0x1803F0330
	public static uint ToUInt32(ulong value) { }
	// RVA: 0x3F03F0 Offset: 0x3EEBF0 VA: 0x1803F03F0
	public static uint ToUInt32(float value) { }
	// RVA: 0x3F0490 Offset: 0x3EEC90 VA: 0x1803F0490
	public static uint ToUInt32(double value) { }
	// RVA: 0x3F05A0 Offset: 0x3EEDA0 VA: 0x1803F05A0
	public static uint ToUInt32(Decimal value) { }
	// RVA: 0x3F0700 Offset: 0x3EEF00 VA: 0x1803F0700
	public static uint ToUInt32(string value, IFormatProvider provider) { }
	// RVA: 0x3F0760 Offset: 0x3EEF60 VA: 0x1803F0760
	public static long ToInt64(object value, IFormatProvider provider) { }
	// RVA: 0x3F0850 Offset: 0x3EF050 VA: 0x1803F0850
	public static long ToInt64(bool value) { }
	// RVA: 0x392030 Offset: 0x390830 VA: 0x180392030
	public static long ToInt64(char value) { }
	// RVA: 0x3F0860 Offset: 0x3EF060 VA: 0x1803F0860
	public static long ToInt64(sbyte value) { }
	// RVA: 0x3ECD30 Offset: 0x3EB530 VA: 0x1803ECD30
	public static long ToInt64(byte value) { }
	// RVA: 0x3F0870 Offset: 0x3EF070 VA: 0x1803F0870
	public static long ToInt64(short value) { }
	// RVA: 0x392030 Offset: 0x390830 VA: 0x180392030
	public static long ToInt64(ushort value) { }
	// RVA: 0x3F0880 Offset: 0x3EF080 VA: 0x1803F0880
	public static long ToInt64(int value) { }
	// RVA: 0x3F0890 Offset: 0x3EF090 VA: 0x1803F0890
	public static long ToInt64(uint value) { }
	// RVA: 0x3F08A0 Offset: 0x3EF0A0 VA: 0x1803F08A0
	public static long ToInt64(ulong value) { }
	// RVA: 0x3F0970 Offset: 0x3EF170 VA: 0x1803F0970
	public static long ToInt64(float value) { }
	// RVA: 0x3F0A10 Offset: 0x3EF210 VA: 0x1803F0A10
	public static long ToInt64(double value) { }
	// RVA: 0x3F0AD0 Offset: 0x3EF2D0 VA: 0x1803F0AD0
	public static long ToInt64(Decimal value) { }
	// RVA: 0x3F0C30 Offset: 0x3EF430 VA: 0x1803F0C30
	public static long ToInt64(string value, IFormatProvider provider) { }
	// RVA: 0x3F0C90 Offset: 0x3EF490 VA: 0x1803F0C90
	public static ulong ToUInt64(object value, IFormatProvider provider) { }
	// RVA: 0x314B50 Offset: 0x313350 VA: 0x180314B50
	public static ulong ToUInt64(bool value) { }
	// RVA: 0x392030 Offset: 0x390830 VA: 0x180392030
	public static ulong ToUInt64(char value) { }
	// RVA: 0x3F0D80 Offset: 0x3EF580 VA: 0x1803F0D80
	public static ulong ToUInt64(sbyte value) { }
	// RVA: 0x3ECD30 Offset: 0x3EB530 VA: 0x1803ECD30
	public static ulong ToUInt64(byte value) { }
	// RVA: 0x3F0E40 Offset: 0x3EF640 VA: 0x1803F0E40
	public static ulong ToUInt64(short value) { }
	// RVA: 0x392030 Offset: 0x390830 VA: 0x180392030
	public static ulong ToUInt64(ushort value) { }
	// RVA: 0x3F0F00 Offset: 0x3EF700 VA: 0x1803F0F00
	public static ulong ToUInt64(int value) { }
	// RVA: 0x3F0890 Offset: 0x3EF090 VA: 0x1803F0890
	public static ulong ToUInt64(uint value) { }
	// RVA: 0x3F0FC0 Offset: 0x3EF7C0 VA: 0x1803F0FC0
	public static ulong ToUInt64(long value) { }
	// RVA: 0x3F1080 Offset: 0x3EF880 VA: 0x1803F1080
	public static ulong ToUInt64(float value) { }
	// RVA: 0x3F1120 Offset: 0x3EF920 VA: 0x1803F1120
	public static ulong ToUInt64(double value) { }
	// RVA: 0x3F1200 Offset: 0x3EFA00 VA: 0x1803F1200
	public static ulong ToUInt64(Decimal value) { }
	// RVA: 0x3F1480 Offset: 0x3EFC80 VA: 0x1803F1480
	public static ulong ToUInt64(string value, IFormatProvider provider) { }
	// RVA: 0x3F14E0 Offset: 0x3EFCE0 VA: 0x1803F14E0
	public static float ToSingle(object value, IFormatProvider provider) { }
	// RVA: 0x3F15D0 Offset: 0x3EFDD0 VA: 0x1803F15D0
	public static float ToSingle(sbyte value) { }
	// RVA: 0x3F15E0 Offset: 0x3EFDE0 VA: 0x1803F15E0
	public static float ToSingle(byte value) { }
	// RVA: 0x3F15F0 Offset: 0x3EFDF0 VA: 0x1803F15F0
	public static float ToSingle(short value) { }
	// RVA: 0x3F1600 Offset: 0x3EFE00 VA: 0x1803F1600
	public static float ToSingle(ushort value) { }
	// RVA: 0x3F1610 Offset: 0x3EFE10 VA: 0x1803F1610
	public static float ToSingle(int value) { }
	// RVA: 0x3F1620 Offset: 0x3EFE20 VA: 0x1803F1620
	public static float ToSingle(uint value) { }
	// RVA: 0x3F1630 Offset: 0x3EFE30 VA: 0x1803F1630
	public static float ToSingle(long value) { }
	// RVA: 0x3F1640 Offset: 0x3EFE40 VA: 0x1803F1640
	public static float ToSingle(ulong value) { }
	// RVA: 0x3F1670 Offset: 0x3EFE70 VA: 0x1803F1670
	public static float ToSingle(double value) { }
	// RVA: 0x3F1680 Offset: 0x3EFE80 VA: 0x1803F1680
	public static float ToSingle(Decimal value) { }
	// RVA: 0x3F17E0 Offset: 0x3EFFE0 VA: 0x1803F17E0
	public static float ToSingle(string value, IFormatProvider provider) { }
	// RVA: 0x3F1840 Offset: 0x3F0040 VA: 0x1803F1840
	public static float ToSingle(bool value) { }
	// RVA: 0x3F1850 Offset: 0x3F0050 VA: 0x1803F1850
	public static double ToDouble(object value, IFormatProvider provider) { }
	// RVA: 0x3F1940 Offset: 0x3F0140 VA: 0x1803F1940
	public static double ToDouble(sbyte value) { }
	// RVA: 0x3F1950 Offset: 0x3F0150 VA: 0x1803F1950
	public static double ToDouble(byte value) { }
	// RVA: 0x3F1960 Offset: 0x3F0160 VA: 0x1803F1960
	public static double ToDouble(short value) { }
	// RVA: 0x3F1970 Offset: 0x3F0170 VA: 0x1803F1970
	public static double ToDouble(ushort value) { }
	// RVA: 0x3F1980 Offset: 0x3F0180 VA: 0x1803F1980
	public static double ToDouble(int value) { }
	// RVA: 0x3F1990 Offset: 0x3F0190 VA: 0x1803F1990
	public static double ToDouble(uint value) { }
	// RVA: 0x3F19A0 Offset: 0x3F01A0 VA: 0x1803F19A0
	public static double ToDouble(long value) { }
	// RVA: 0x3F19B0 Offset: 0x3F01B0 VA: 0x1803F19B0
	public static double ToDouble(ulong value) { }
	// RVA: 0x3F19E0 Offset: 0x3F01E0 VA: 0x1803F19E0
	public static double ToDouble(float value) { }
	// RVA: 0x3F19F0 Offset: 0x3F01F0 VA: 0x1803F19F0
	public static double ToDouble(Decimal value) { }
	// RVA: 0x3F1B20 Offset: 0x3F0320 VA: 0x1803F1B20
	public static double ToDouble(string value, IFormatProvider provider) { }
	// RVA: 0x3F1C80 Offset: 0x3F0480 VA: 0x1803F1C80
	public static double ToDouble(bool value) { }
	// RVA: 0x3F1C90 Offset: 0x3F0490 VA: 0x1803F1C90
	public static Decimal ToDecimal(object value, IFormatProvider provider) { }
	// RVA: 0x3F1DB0 Offset: 0x3F05B0 VA: 0x1803F1DB0
	public static Decimal ToDecimal(sbyte value) { }
	// RVA: 0x3F1E80 Offset: 0x3F0680 VA: 0x1803F1E80
	public static Decimal ToDecimal(byte value) { }
	// RVA: 0x3F1F40 Offset: 0x3F0740 VA: 0x1803F1F40
	public static Decimal ToDecimal(short value) { }
	// RVA: 0x3F2010 Offset: 0x3F0810 VA: 0x1803F2010
	public static Decimal ToDecimal(ushort value) { }
	// RVA: 0x3F20D0 Offset: 0x3F08D0 VA: 0x1803F20D0
	public static Decimal ToDecimal(int value) { }
	// RVA: 0x3F21A0 Offset: 0x3F09A0 VA: 0x1803F21A0
	public static Decimal ToDecimal(uint value) { }
	// RVA: 0x3F2260 Offset: 0x3F0A60 VA: 0x1803F2260
	public static Decimal ToDecimal(long value) { }
	// RVA: 0x3F2340 Offset: 0x3F0B40 VA: 0x1803F2340
	public static Decimal ToDecimal(ulong value) { }
	// RVA: 0x3F2400 Offset: 0x3F0C00 VA: 0x1803F2400
	public static Decimal ToDecimal(float value) { }
	// RVA: 0x3F24D0 Offset: 0x3F0CD0 VA: 0x1803F24D0
	public static Decimal ToDecimal(double value) { }
	// RVA: 0x3F25A0 Offset: 0x3F0DA0 VA: 0x1803F25A0
	public static Decimal ToDecimal(string value, IFormatProvider provider) { }
	// RVA: 0x3F26C0 Offset: 0x3F0EC0 VA: 0x1803F26C0
	public static Decimal ToDecimal(bool value) { }
	// RVA: 0x3F2780 Offset: 0x3F0F80 VA: 0x1803F2780
	public static DateTime ToDateTime(string value, IFormatProvider provider) { }
	// RVA: 0x3F2860 Offset: 0x3F1060 VA: 0x1803F2860
	public static string ToString(object value, IFormatProvider provider) { }
	// RVA: 0x3F2970 Offset: 0x3F1170 VA: 0x1803F2970
	public static string ToString(char value, IFormatProvider provider) { }
	// RVA: 0x3F2990 Offset: 0x3F1190 VA: 0x1803F2990
	public static string ToString(int value, IFormatProvider provider) { }
	// RVA: 0x3F29C0 Offset: 0x3F11C0 VA: 0x1803F29C0
	public static int ToInt32(string value, int fromBase) { }
	// RVA: 0x3F2AB0 Offset: 0x3F12B0 VA: 0x1803F2AB0
	public static string ToBase64String(byte[] inArray) { }
	// RVA: 0x3F2B90 Offset: 0x3F1390 VA: 0x1803F2B90
	public static string ToBase64String(byte[] inArray, int offset, int length, Base64FormattingOptions options) { }
	// RVA: 0x3F2F90 Offset: 0x3F1790 VA: 0x1803F2F90
	private static int ConvertToBase64Array(char* outChars, byte* inData, int offset, int length, bool insertLineBreaks) { }
	// RVA: 0x3F3280 Offset: 0x3F1A80 VA: 0x1803F3280
	private static int ToBase64_CalculateAndValidateOutputLength(int inputLength, bool insertLineBreaks) { }
	// RVA: 0x3F33C0 Offset: 0x3F1BC0 VA: 0x1803F33C0
	public static byte[] FromBase64String(string s) { }
	// RVA: 0x3F34A0 Offset: 0x3F1CA0 VA: 0x1803F34A0
	private static byte[] FromBase64CharPtr(char* inputPtr, int inputLength) { }
	// RVA: 0x3F36E0 Offset: 0x3F1EE0 VA: 0x1803F36E0
	private static int FromBase64_Decode(char* startInputPtr, int inputLength, byte* startDestPtr, int destLength) { }
	// RVA: 0x3F3A10 Offset: 0x3F2210 VA: 0x1803F3A10
	private static int FromBase64_ComputeResultLength(char* inputPtr, int inputLength) { }
	// RVA: 0x3F3B30 Offset: 0x3F2330 VA: 0x1803F3B30
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public struct DateTime : IComparable, IFormattable, IConvertible, ISerializable, IComparable<DateTime>, IEquatable<DateTime> // TypeDefIndex: 123
{
	// Fields
	private const long TicksPerMillisecond = 10000; // 0x0
	private const long TicksPerSecond = 10000000; // 0x0
	private const long TicksPerMinute = 600000000; // 0x0
	private const long TicksPerHour = 36000000000; // 0x0
	private const long TicksPerDay = 864000000000; // 0x0
	private const int MillisPerSecond = 1000; // 0x0
	private const int MillisPerMinute = 60000; // 0x0
	private const int MillisPerHour = 3600000; // 0x0
	private const int MillisPerDay = 86400000; // 0x0
	private const int DaysPerYear = 365; // 0x0
	private const int DaysPer4Years = 1461; // 0x0
	private const int DaysPer100Years = 36524; // 0x0
	private const int DaysPer400Years = 146097; // 0x0
	private const int DaysTo1601 = 584388; // 0x0
	private const int DaysTo1899 = 693593; // 0x0
	internal const int DaysTo1970 = 719162; // 0x0
	private const int DaysTo10000 = 3652059; // 0x0
	internal const long MinTicks = 0; // 0x0
	internal const long MaxTicks = 3155378975999999999; // 0x0
	private const long MaxMillis = 315537897600000; // 0x0
	private const long FileTimeOffset = 504911232000000000; // 0x0
	private const long DoubleDateOffset = 599264352000000000; // 0x0
	private const long OADateMinAsTicks = 31241376000000000; // 0x0
	private const double OADateMinAsDouble = -657435; // 0x0
	private const double OADateMaxAsDouble = 2958466; // 0x0
	private const int DatePartYear = 0; // 0x0
	private const int DatePartDayOfYear = 1; // 0x0
	private const int DatePartMonth = 2; // 0x0
	private const int DatePartDay = 3; // 0x0
	private static readonly int[] DaysToMonth365; // 0x0
	private static readonly int[] DaysToMonth366; // 0x8
	public static readonly DateTime MinValue; // 0x10
	public static readonly DateTime MaxValue; // 0x18
	private const ulong TicksMask = 4611686018427387903; // 0x0
	private const ulong FlagsMask = 13835058055282163712; // 0x0
	private const ulong LocalMask = 9223372036854775808; // 0x0
	private const long TicksCeiling = 4611686018427387904; // 0x0
	private const ulong KindUnspecified = 0; // 0x0
	private const ulong KindUtc = 4611686018427387904; // 0x0
	private const ulong KindLocal = 9223372036854775808; // 0x0
	private const ulong KindLocalAmbiguousDst = 13835058055282163712; // 0x0
	private const int KindShift = 62; // 0x0
	private const string TicksField = "ticks"; // 0x0
	private const string DateDataField = "dateData"; // 0x0
	private ulong dateData; // 0x0

	// Properties
	internal long InternalTicks { get; }
	private ulong InternalKind { get; }
	public DateTime Date { get; }
	public int Day { get; }
	public DayOfWeek DayOfWeek { get; }
	public int Hour { get; }
	public DateTimeKind Kind { get; }
	public int Minute { get; }
	public int Month { get; }
	public static DateTime Now { get; }
	public static DateTime UtcNow { get; }
	public int Second { get; }
	public long Ticks { get; }
	public TimeSpan TimeOfDay { get; }
	public int Year { get; }

	// Methods
	// RVA: 0x13A70 Offset: 0x12E70 VA: 0x180013A70
	public void .ctor(long ticks) { }
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	private void .ctor(ulong dateData) { }
	// RVA: 0x13A80 Offset: 0x12E80 VA: 0x180013A80
	public void .ctor(long ticks, DateTimeKind kind) { }
	// RVA: 0x13A90 Offset: 0x12E90 VA: 0x180013A90
	internal void .ctor(long ticks, DateTimeKind kind, bool isAmbiguousDst) { }
	// RVA: 0x13AA0 Offset: 0x12EA0 VA: 0x180013AA0
	public void .ctor(int year, int month, int day) { }
	// RVA: 0x13AB0 Offset: 0x12EB0 VA: 0x180013AB0
	public void .ctor(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind) { }
	// RVA: 0x13AC0 Offset: 0x12EC0 VA: 0x180013AC0
	public void .ctor(int year, int month, int day, int hour, int minute, int second, int millisecond) { }
	// RVA: 0x13AD0 Offset: 0x12ED0 VA: 0x180013AD0
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x13AF0 Offset: 0x12EF0 VA: 0x180013AF0
	internal long get_InternalTicks() { }
	// RVA: 0x13B10 Offset: 0x12F10 VA: 0x180013B10
	private ulong get_InternalKind() { }
	// RVA: 0x13B30 Offset: 0x12F30 VA: 0x180013B30
	public DateTime Add(TimeSpan value) { }
	// RVA: 0x13B40 Offset: 0x12F40 VA: 0x180013B40
	private DateTime Add(double value, int scale) { }
	// RVA: 0x13B50 Offset: 0x12F50 VA: 0x180013B50
	public DateTime AddDays(double value) { }
	// RVA: 0x13B60 Offset: 0x12F60 VA: 0x180013B60
	public DateTime AddMilliseconds(double value) { }
	// RVA: 0x13B70 Offset: 0x12F70 VA: 0x180013B70
	public DateTime AddMonths(int months) { }
	// RVA: 0x13B80 Offset: 0x12F80 VA: 0x180013B80
	public DateTime AddSeconds(double value) { }
	// RVA: 0x13B30 Offset: 0x12F30 VA: 0x180013B30
	public DateTime AddTicks(long value) { }
	// RVA: 0x13B90 Offset: 0x12F90 VA: 0x180013B90
	public DateTime AddYears(int value) { }
	// RVA: 0x13BA0 Offset: 0x12FA0 VA: 0x180013BA0 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0x13CD0 Offset: 0x130D0 VA: 0x180013CD0 Slot: 24
	public int CompareTo(DateTime value) { }
	// RVA: 0x404AC0 Offset: 0x4032C0 VA: 0x180404AC0
	private static long DateToTicks(int year, int month, int day) { }
	// RVA: 0x404CF0 Offset: 0x4034F0 VA: 0x180404CF0
	private static long TimeToTicks(int hour, int minute, int second) { }
	// RVA: 0x404DF0 Offset: 0x4035F0 VA: 0x180404DF0
	public static int DaysInMonth(int year, int month) { }
	// RVA: 0x13D00 Offset: 0x13100 VA: 0x180013D00 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x13D10 Offset: 0x13110 VA: 0x180013D10 Slot: 25
	public bool Equals(DateTime value) { }
	// RVA: 0x405070 Offset: 0x403870 VA: 0x180405070
	internal static DateTime FromBinaryRaw(long dateData) { }
	// RVA: 0x405150 Offset: 0x403950 VA: 0x180405150
	public static DateTime FromFileTime(long fileTime) { }
	// RVA: 0x4052C0 Offset: 0x403AC0 VA: 0x1804052C0
	public static DateTime FromFileTimeUtc(long fileTime) { }
	// RVA: 0x13D30 Offset: 0x13130 VA: 0x180013D30 Slot: 23
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x4053B0 Offset: 0x403BB0 VA: 0x1804053B0
	public static DateTime SpecifyKind(DateTime value, DateTimeKind kind) { }
	// RVA: 0x13E20 Offset: 0x13220 VA: 0x180013E20
	public DateTime get_Date() { }
	// RVA: 0x13E60 Offset: 0x13260 VA: 0x180013E60
	private int GetDatePart(int part) { }
	// RVA: 0x13E70 Offset: 0x13270 VA: 0x180013E70
	public int get_Day() { }
	// RVA: 0x13E80 Offset: 0x13280 VA: 0x180013E80
	public DayOfWeek get_DayOfWeek() { }
	// RVA: 0x13ED0 Offset: 0x132D0 VA: 0x180013ED0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x13EF0 Offset: 0x132F0 VA: 0x180013EF0
	public int get_Hour() { }
	// RVA: 0x13F40 Offset: 0x13340 VA: 0x180013F40
	public DateTimeKind get_Kind() { }
	// RVA: 0x13F70 Offset: 0x13370 VA: 0x180013F70
	public int get_Minute() { }
	// RVA: 0x13FC0 Offset: 0x133C0 VA: 0x180013FC0
	public int get_Month() { }
	// RVA: 0x405630 Offset: 0x403E30 VA: 0x180405630
	public static DateTime get_Now() { }
	// RVA: 0x405780 Offset: 0x403F80 VA: 0x180405780
	public static DateTime get_UtcNow() { }
	// RVA: 0x405830 Offset: 0x404030 VA: 0x180405830
	internal static long GetSystemTimeAsFileTime() { }
	// RVA: 0x13FD0 Offset: 0x133D0 VA: 0x180013FD0
	public int get_Second() { }
	// RVA: 0x13AF0 Offset: 0x12EF0 VA: 0x180013AF0
	public long get_Ticks() { }
	// RVA: 0x14020 Offset: 0x13420 VA: 0x180014020
	public TimeSpan get_TimeOfDay() { }
	// RVA: 0x14050 Offset: 0x13450 VA: 0x180014050
	public int get_Year() { }
	// RVA: 0x405850 Offset: 0x404050 VA: 0x180405850
	public static bool IsLeapYear(int year) { }
	// RVA: 0x405980 Offset: 0x404180 VA: 0x180405980
	public static DateTime Parse(string s, IFormatProvider provider) { }
	// RVA: 0x14060 Offset: 0x13460 VA: 0x180014060
	public DateTime ToLocalTime() { }
	// RVA: 0x14070 Offset: 0x13470 VA: 0x180014070
	internal DateTime ToLocalTime(bool throwOnOverflow) { }
	// RVA: 0x14080 Offset: 0x13480 VA: 0x180014080 Slot: 3
	public override string ToString() { }
	// RVA: 0x14150 Offset: 0x13550 VA: 0x180014150 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x14230 Offset: 0x13630 VA: 0x180014230 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x14310 Offset: 0x13710 VA: 0x180014310
	public DateTime ToUniversalTime() { }
	// RVA: 0x405DA0 Offset: 0x4045A0 VA: 0x180405DA0
	public static DateTime op_Addition(DateTime d, TimeSpan t) { }
	// RVA: 0x405EA0 Offset: 0x4046A0 VA: 0x180405EA0
	public static DateTime op_Subtraction(DateTime d, TimeSpan t) { }
	// RVA: 0x405FA0 Offset: 0x4047A0 VA: 0x180405FA0
	public static TimeSpan op_Subtraction(DateTime d1, DateTime d2) { }
	// RVA: 0x405FC0 Offset: 0x4047C0 VA: 0x180405FC0
	public static bool op_Equality(DateTime d1, DateTime d2) { }
	// RVA: 0x405FE0 Offset: 0x4047E0 VA: 0x180405FE0
	public static bool op_LessThan(DateTime t1, DateTime t2) { }
	// RVA: 0x406000 Offset: 0x404800 VA: 0x180406000
	public static bool op_LessThanOrEqual(DateTime t1, DateTime t2) { }
	// RVA: 0x406020 Offset: 0x404820 VA: 0x180406020
	public static bool op_GreaterThan(DateTime t1, DateTime t2) { }
	// RVA: 0x406040 Offset: 0x404840 VA: 0x180406040
	public static bool op_GreaterThanOrEqual(DateTime t1, DateTime t2) { }
	// RVA: 0x14340 Offset: 0x13740 VA: 0x180014340 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x14350 Offset: 0x13750 VA: 0x180014350 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x14360 Offset: 0x13760 VA: 0x180014360 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x14370 Offset: 0x13770 VA: 0x180014370 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x14380 Offset: 0x13780 VA: 0x180014380 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x14390 Offset: 0x13790 VA: 0x180014390 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x143A0 Offset: 0x137A0 VA: 0x1800143A0 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x143B0 Offset: 0x137B0 VA: 0x1800143B0 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x143C0 Offset: 0x137C0 VA: 0x1800143C0 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x143D0 Offset: 0x137D0 VA: 0x1800143D0 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x143E0 Offset: 0x137E0 VA: 0x1800143E0 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x143F0 Offset: 0x137F0 VA: 0x1800143F0 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x14400 Offset: 0x13800 VA: 0x180014400 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x14410 Offset: 0x13810 VA: 0x180014410 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x1E50 Offset: 0x1250 VA: 0x180001E50 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x14420 Offset: 0x13820 VA: 0x180014420 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
	// RVA: 0x406AF0 Offset: 0x4052F0 VA: 0x180406AF0
	internal static bool TryCreate(int year, int month, int day, int hour, int minute, int second, int millisecond, out DateTime result) { }
	// RVA: 0x406D90 Offset: 0x405590 VA: 0x180406D90
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public enum DateTimeKind // TypeDefIndex: 124
{
	// Fields
	public int value__; // 0x0
	public const DateTimeKind Unspecified = 0; // 0x0
	public const DateTimeKind Utc = 1; // 0x0
	public const DateTimeKind Local = 2; // 0x0
}

// Namespace: System
[Serializable]
public enum DayOfWeek // TypeDefIndex: 125
{
	// Fields
	public int value__; // 0x0
	public const DayOfWeek Sunday = 0; // 0x0
	public const DayOfWeek Monday = 1; // 0x0
	public const DayOfWeek Tuesday = 2; // 0x0
	public const DayOfWeek Wednesday = 3; // 0x0
	public const DayOfWeek Thursday = 4; // 0x0
	public const DayOfWeek Friday = 5; // 0x0
	public const DayOfWeek Saturday = 6; // 0x0
}

// Namespace: System
[Serializable]
public sealed class DBNull : ISerializable, IConvertible // TypeDefIndex: 126
{
	// Fields
	public static readonly DBNull Value; // 0xABE27

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x4030F0 Offset: 0x4018F0 VA: 0x1804030F0
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x403160 Offset: 0x401960 VA: 0x180403160 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x403190 Offset: 0x401990 VA: 0x180403190 Slot: 3
	public override string ToString() { }
	// RVA: 0x403210 Offset: 0x401A10 VA: 0x180403210 Slot: 20
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x3CC210 Offset: 0x3CAA10 VA: 0x1803CC210 Slot: 5
	public TypeCode GetTypeCode() { }
	// RVA: 0x403290 Offset: 0x401A90 VA: 0x180403290 Slot: 6
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x403300 Offset: 0x401B00 VA: 0x180403300 Slot: 7
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x403370 Offset: 0x401B70 VA: 0x180403370 Slot: 8
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x4033E0 Offset: 0x401BE0 VA: 0x1804033E0 Slot: 9
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x403450 Offset: 0x401C50 VA: 0x180403450 Slot: 10
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x4034C0 Offset: 0x401CC0 VA: 0x1804034C0 Slot: 11
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x403530 Offset: 0x401D30 VA: 0x180403530 Slot: 12
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x4035A0 Offset: 0x401DA0 VA: 0x1804035A0 Slot: 13
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x403610 Offset: 0x401E10 VA: 0x180403610 Slot: 14
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x403680 Offset: 0x401E80 VA: 0x180403680 Slot: 15
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x4036F0 Offset: 0x401EF0 VA: 0x1804036F0 Slot: 16
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x403760 Offset: 0x401F60 VA: 0x180403760 Slot: 17
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x4037D0 Offset: 0x401FD0 VA: 0x1804037D0 Slot: 18
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x403840 Offset: 0x402040 VA: 0x180403840 Slot: 19
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x4038B0 Offset: 0x4020B0 VA: 0x1804038B0 Slot: 21
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
	// RVA: 0x403960 Offset: 0x402160 VA: 0x180403960
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public struct Decimal : IFormattable, IComparable, IConvertible, IDeserializationCallback, IComparable<Decimal>, IEquatable<Decimal> // TypeDefIndex: 127
{
	// Fields
	private const int SignMask = -2147483648; // 0x0
	private const byte DECIMAL_NEG = 128; // 0x0
	private const byte DECIMAL_ADD = 0; // 0x0
	private const int ScaleMask = 16711680; // 0x0
	private const int ScaleShift = 16; // 0x0
	private const int MaxInt32Scale = 9; // 0x0
	private static uint[] Powers10; // 0x0
	[DecimalConstantAttribute] // RVA: 0xD9400 Offset: 0xD8800 VA: 0x1800D9400
	public static readonly Decimal Zero; // 0x8
	[DecimalConstantAttribute] // RVA: 0xD9490 Offset: 0xD8890 VA: 0x1800D9490
	public static readonly Decimal One; // 0x18
	[DecimalConstantAttribute] // RVA: 0xD9520 Offset: 0xD8920 VA: 0x1800D9520
	public static readonly Decimal MinusOne; // 0x28
	[DecimalConstantAttribute] // RVA: 0xD95C0 Offset: 0xD89C0 VA: 0x1800D95C0
	public static readonly Decimal MaxValue; // 0x38
	[DecimalConstantAttribute] // RVA: 0xD9660 Offset: 0xD8A60 VA: 0x1800D9660
	public static readonly Decimal MinValue; // 0x48
	[DecimalConstantAttribute] // RVA: 0xD96F0 Offset: 0xD8AF0 VA: 0x1800D96F0
	private static readonly Decimal NearNegativeZero; // 0x58
	[DecimalConstantAttribute] // RVA: 0xD9790 Offset: 0xD8B90 VA: 0x1800D9790
	private static readonly Decimal NearPositiveZero; // 0x68
	private int flags; // 0x0
	private int hi; // 0x4
	private int lo; // 0x8
	private int mid; // 0xC

	// Methods
	// RVA: 0x1F1C0 Offset: 0x1E5C0 VA: 0x18001F1C0
	public void .ctor(int value) { }
	// RVA: 0x1F1F0 Offset: 0x1E5F0 VA: 0x18001F1F0
	public void .ctor(uint value) { }
	// RVA: 0x1F200 Offset: 0x1E600 VA: 0x18001F200
	public void .ctor(long value) { }
	// RVA: 0x1F230 Offset: 0x1E630 VA: 0x18001F230
	public void .ctor(ulong value) { }
	// RVA: 0x1F250 Offset: 0x1E650 VA: 0x18001F250
	public void .ctor(float value) { }
	// RVA: 0x1F280 Offset: 0x1E680 VA: 0x18001F280
	public void .ctor(double value) { }
	// RVA: 0x1F2B0 Offset: 0x1E6B0 VA: 0x18001F2B0
	private void SetBits(int[] bits) { }
	// RVA: 0x1F2C0 Offset: 0x1E6C0 VA: 0x18001F2C0
	public void .ctor(int lo, int mid, int hi, bool isNegative, byte scale) { }
	[OnSerializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x1F2E0 Offset: 0x1E6E0 VA: 0x18001F2E0
	private void OnSerializing(StreamingContext ctx) { }
	// RVA: 0x1F300 Offset: 0x1E700 VA: 0x18001F300 Slot: 23
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }
	// RVA: 0x50EA50 Offset: 0x50D250 VA: 0x18050EA50
	private static void FCallAddSub(ref Decimal d1, ref Decimal d2, byte bSign) { }
	// RVA: 0x50EA60 Offset: 0x50D260 VA: 0x18050EA60
	private static int FCallCompare(ref Decimal d1, ref Decimal d2) { }
	// RVA: 0x1F310 Offset: 0x1E710 VA: 0x18001F310 Slot: 5
	public int CompareTo(object value) { }
	// RVA: 0x1F450 Offset: 0x1E850 VA: 0x18001F450 Slot: 24
	public int CompareTo(Decimal value) { }
	// RVA: 0x1F590 Offset: 0x1E990 VA: 0x18001F590 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x1F5A0 Offset: 0x1E9A0 VA: 0x18001F5A0 Slot: 25
	public bool Equals(Decimal value) { }
	// RVA: 0x1F6E0 Offset: 0x1EAE0 VA: 0x18001F6E0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1F720 Offset: 0x1EB20 VA: 0x18001F720 Slot: 3
	public override string ToString() { }
	// RVA: 0x1F760 Offset: 0x1EB60 VA: 0x18001F760 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x1F7A0 Offset: 0x1EBA0 VA: 0x18001F7A0 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x50ECA0 Offset: 0x50D4A0 VA: 0x18050ECA0
	public static Decimal Parse(string s, IFormatProvider provider) { }
	// RVA: 0x50ECF0 Offset: 0x50D4F0 VA: 0x18050ECF0
	public static Decimal Parse(string s, NumberStyles style, IFormatProvider provider) { }
	// RVA: 0x50ED60 Offset: 0x50D560 VA: 0x18050ED60
	public static int[] GetBits(Decimal d) { }
	// RVA: 0x50EE70 Offset: 0x50D670 VA: 0x18050EE70
	private static void FCallMultiply(ref Decimal d1, ref Decimal d2) { }
	// RVA: 0x50EEC0 Offset: 0x50D6C0 VA: 0x18050EEC0
	public static Decimal Round(Decimal d, int decimals) { }
	// RVA: 0x50EFB0 Offset: 0x50D7B0 VA: 0x18050EFB0
	private static void FCallRound(ref Decimal d, int decimals) { }
	// RVA: 0x50F000 Offset: 0x50D800 VA: 0x18050F000
	public static byte ToByte(Decimal value) { }
	// RVA: 0x50F140 Offset: 0x50D940 VA: 0x18050F140
	public static sbyte ToSByte(Decimal value) { }
	// RVA: 0x50F290 Offset: 0x50DA90 VA: 0x18050F290
	public static short ToInt16(Decimal value) { }
	// RVA: 0x50F3E0 Offset: 0x50DBE0 VA: 0x18050F3E0
	public static double ToDouble(Decimal d) { }
	// RVA: 0x50F410 Offset: 0x50DC10 VA: 0x18050F410
	internal static int FCallToInt32(Decimal d) { }
	// RVA: 0x50F490 Offset: 0x50DC90 VA: 0x18050F490
	public static int ToInt32(Decimal d) { }
	// RVA: 0x50F5D0 Offset: 0x50DDD0 VA: 0x18050F5D0
	public static long ToInt64(Decimal d) { }
	// RVA: 0x50F720 Offset: 0x50DF20 VA: 0x18050F720
	public static ushort ToUInt16(Decimal value) { }
	// RVA: 0x50F860 Offset: 0x50E060 VA: 0x18050F860
	public static uint ToUInt32(Decimal d) { }
	// RVA: 0x50F9A0 Offset: 0x50E1A0 VA: 0x18050F9A0
	public static ulong ToUInt64(Decimal d) { }
	// RVA: 0x50FAE0 Offset: 0x50E2E0 VA: 0x18050FAE0
	public static float ToSingle(Decimal d) { }
	// RVA: 0x50FB30 Offset: 0x50E330 VA: 0x18050FB30
	private static void FCallTruncate(ref Decimal d) { }
	// RVA: 0x50FB70 Offset: 0x50E370 VA: 0x18050FB70
	public static Decimal op_Implicit(byte value) { }
	// RVA: 0x50FB90 Offset: 0x50E390 VA: 0x18050FB90
	public static Decimal op_Implicit(sbyte value) { }
	// RVA: 0x50FBC0 Offset: 0x50E3C0 VA: 0x18050FBC0
	public static Decimal op_Implicit(short value) { }
	// RVA: 0x50FBF0 Offset: 0x50E3F0 VA: 0x18050FBF0
	public static Decimal op_Implicit(ushort value) { }
	// RVA: 0x50FC10 Offset: 0x50E410 VA: 0x18050FC10
	public static Decimal op_Implicit(int value) { }
	// RVA: 0x50FC40 Offset: 0x50E440 VA: 0x18050FC40
	public static Decimal op_Implicit(uint value) { }
	// RVA: 0x50FC50 Offset: 0x50E450 VA: 0x18050FC50
	public static Decimal op_Implicit(long value) { }
	// RVA: 0x50FC90 Offset: 0x50E490 VA: 0x18050FC90
	public static Decimal op_Implicit(ulong value) { }
	// RVA: 0x50FCB0 Offset: 0x50E4B0 VA: 0x18050FCB0
	public static Decimal op_Explicit(float value) { }
	// RVA: 0x50FCF0 Offset: 0x50E4F0 VA: 0x18050FCF0
	public static Decimal op_Explicit(double value) { }
	// RVA: 0x50FD30 Offset: 0x50E530 VA: 0x18050FD30
	public static long op_Explicit(Decimal value) { }
	// RVA: 0x50FDD0 Offset: 0x50E5D0 VA: 0x18050FDD0
	public static float op_Explicit(Decimal value) { }
	// RVA: 0x50FEA0 Offset: 0x50E6A0 VA: 0x18050FEA0
	public static double op_Explicit(Decimal value) { }
	// RVA: 0x50FF50 Offset: 0x50E750 VA: 0x18050FF50
	public static Decimal op_Addition(Decimal d1, Decimal d2) { }
	// RVA: 0x510010 Offset: 0x50E810 VA: 0x180510010
	public static Decimal op_Subtraction(Decimal d1, Decimal d2) { }
	// RVA: 0x5100D0 Offset: 0x50E8D0 VA: 0x1805100D0
	public static Decimal op_Multiply(Decimal d1, Decimal d2) { }
	// RVA: 0x5101C0 Offset: 0x50E9C0 VA: 0x1805101C0
	public static bool op_Equality(Decimal d1, Decimal d2) { }
	// RVA: 0x510270 Offset: 0x50EA70 VA: 0x180510270
	public static bool op_Inequality(Decimal d1, Decimal d2) { }
	// RVA: 0x1F7E0 Offset: 0x1EBE0 VA: 0x18001F7E0 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x1F7F0 Offset: 0x1EBF0 VA: 0x18001F7F0 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x1F8A0 Offset: 0x1ECA0 VA: 0x18001F8A0 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x1F8B0 Offset: 0x1ECB0 VA: 0x18001F8B0 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x1F8C0 Offset: 0x1ECC0 VA: 0x18001F8C0 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x1F8D0 Offset: 0x1ECD0 VA: 0x18001F8D0 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x1F8E0 Offset: 0x1ECE0 VA: 0x18001F8E0 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x1F8F0 Offset: 0x1ECF0 VA: 0x18001F8F0 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x1FA80 Offset: 0x1EE80 VA: 0x18001FA80 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x1FA90 Offset: 0x1EE90 VA: 0x18001FA90 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x1FAA0 Offset: 0x1EEA0 VA: 0x18001FAA0 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x1FB50 Offset: 0x1EF50 VA: 0x18001FB50 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x1FB60 Offset: 0x1EF60 VA: 0x18001FB60 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x86B0 Offset: 0x7AB0 VA: 0x1800086B0 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x1FB70 Offset: 0x1EF70 VA: 0x18001FB70 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x1FB80 Offset: 0x1EF80 VA: 0x18001FB80 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
	// RVA: 0x5113A0 Offset: 0x50FBA0 VA: 0x1805113A0
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
internal class DefaultBinder : Binder // TypeDefIndex: 128
{
	// Methods
	// RVA: 0x513D40 Offset: 0x512540 VA: 0x180513D40 Slot: 4
	public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo cultureInfo, string[] names, out object state) { }
	// RVA: 0x5165B0 Offset: 0x514DB0 VA: 0x1805165B0 Slot: 5
	public override FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo cultureInfo) { }
	// RVA: 0x516D70 Offset: 0x515570 VA: 0x180516D70 Slot: 6
	public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: 0x5178A0 Offset: 0x5160A0 VA: 0x1805178A0 Slot: 7
	public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers) { }
	// RVA: 0x5186E0 Offset: 0x516EE0 VA: 0x1805186E0 Slot: 8
	public override object ChangeType(object value, Type type, CultureInfo cultureInfo) { }
	// RVA: 0x518750 Offset: 0x516F50 VA: 0x180518750 Slot: 9
	public override void ReorderArgumentArray(ref object[] args, object state) { }
	// RVA: 0x518C10 Offset: 0x517410 VA: 0x180518C10
	public static MethodBase ExactBinding(MethodBase[] match, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: 0x518ED0 Offset: 0x5176D0 VA: 0x180518ED0
	public static PropertyInfo ExactPropertyBinding(PropertyInfo[] match, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: 0x5191E0 Offset: 0x5179E0 VA: 0x1805191E0
	private static int FindMostSpecific(ParameterInfo[] p1, int[] paramOrder1, Type paramArrayType1, ParameterInfo[] p2, int[] paramOrder2, Type paramArrayType2, Type[] types, object[] args) { }
	// RVA: 0x519670 Offset: 0x517E70 VA: 0x180519670
	private static int FindMostSpecificType(Type c1, Type c2, Type t) { }
	// RVA: 0x519AA0 Offset: 0x5182A0 VA: 0x180519AA0
	private static int FindMostSpecificMethod(MethodBase m1, int[] paramOrder1, Type paramArrayType1, MethodBase m2, int[] paramOrder2, Type paramArrayType2, Type[] types, object[] args) { }
	// RVA: 0x519BD0 Offset: 0x5183D0 VA: 0x180519BD0
	private static int FindMostSpecificField(FieldInfo cur1, FieldInfo cur2) { }
	// RVA: 0x519BD0 Offset: 0x5183D0 VA: 0x180519BD0
	private static int FindMostSpecificProperty(PropertyInfo cur1, PropertyInfo cur2) { }
	// RVA: 0x519D30 Offset: 0x518530 VA: 0x180519D30
	internal static bool CompareMethodSigAndName(MethodBase m1, MethodBase m2) { }
	// RVA: 0x519EB0 Offset: 0x5186B0 VA: 0x180519EB0
	internal static int GetHierarchyDepth(Type t) { }
	// RVA: 0x519F70 Offset: 0x518770 VA: 0x180519F70
	internal static MethodBase FindMostDerivedNewSlotMeth(MethodBase[] match, int cMatches) { }
	// RVA: 0x51A0C0 Offset: 0x5188C0 VA: 0x18051A0C0
	private static void ReorderParams(int[] paramOrder, object[] vars) { }
	// RVA: 0x51A390 Offset: 0x518B90 VA: 0x18051A390
	private static bool CreateParamOrder(int[] paramOrder, ParameterInfo[] pars, string[] names) { }
	// RVA: 0x51A610 Offset: 0x518E10 VA: 0x18051A610
	private static bool CanConvertPrimitive(RuntimeType source, RuntimeType target) { }
	// RVA: 0x51A890 Offset: 0x519090 VA: 0x18051A890
	private static bool CanConvertPrimitiveObjectToType(object source, RuntimeType type) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
internal class DefaultBinder.BinderState // TypeDefIndex: 129
{
	// Fields
	internal int[] m_argsMap; // 0x10
	internal int m_originalSize; // 0x18
	internal bool m_isParamArray; // 0x1C

	// Methods
	// RVA: 0x26C990 Offset: 0x26B190 VA: 0x18026C990
	internal void .ctor(int[] argsMap, int originalSize, bool isParamArray) { }
}

// Namespace: 
[Serializable]
private sealed class DefaultBinder.<>c // TypeDefIndex: 130
{
	// Fields
	public static readonly DefaultBinder.<>c <>9; // 0x0
	public static Predicate<Type> <>9__3_0; // 0x8

	// Methods
	// RVA: 0x26C880 Offset: 0x26B080 VA: 0x18026C880
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x26C900 Offset: 0x26B100 VA: 0x18026C900
	internal bool <SelectProperty>b__3_0(Type t) { }
}

// Namespace: System
[Serializable]
public class DivideByZeroException : ArithmeticException // TypeDefIndex: 131
{
	// Methods
	// RVA: 0x475650 Offset: 0x473E50 VA: 0x180475650
	public void .ctor() { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class DllNotFoundException : TypeLoadException // TypeDefIndex: 132
{
	// Methods
	// RVA: 0x4758B0 Offset: 0x4740B0 VA: 0x1804758B0
	public void .ctor() { }
	// RVA: 0x475940 Offset: 0x474140 VA: 0x180475940
	public void .ctor(string message) { }
	// RVA: 0x475960 Offset: 0x474160 VA: 0x180475960
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public struct Double : IComparable, IFormattable, IConvertible, IComparable<double>, IEquatable<double> // TypeDefIndex: 133
{
	// Fields
	internal double m_value; // 0x0
	public const double MinValue = -1.79769313486232E+308; // 0x0
	public const double MaxValue = 1.79769313486232E+308; // 0x0
	public const double Epsilon = 4.94065645841247E-324; // 0x0
	public const double NegativeInfinity = -∞; // 0x0
	public const double PositiveInfinity = ∞; // 0x0
	public const double NaN = NaN; // 0x0
	internal static double NegativeZero; // 0x0

	// Methods
	// RVA: 0x475980 Offset: 0x474180 VA: 0x180475980
	public static bool IsInfinity(double d) { }
	// RVA: 0x4759B0 Offset: 0x4741B0 VA: 0x1804759B0
	public static bool IsPositiveInfinity(double d) { }
	// RVA: 0x4759D0 Offset: 0x4741D0 VA: 0x1804759D0
	public static bool IsNaN(double d) { }
	// RVA: 0x17CA0 Offset: 0x170A0 VA: 0x180017CA0 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0x17E70 Offset: 0x17270 VA: 0x180017E70 Slot: 23
	public int CompareTo(double value) { }
	// RVA: 0x17E80 Offset: 0x17280 VA: 0x180017E80 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x17E90 Offset: 0x17290 VA: 0x180017E90 Slot: 24
	public bool Equals(double obj) { }
	// RVA: 0x17FB0 Offset: 0x173B0 VA: 0x180017FB0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x17FE0 Offset: 0x173E0 VA: 0x180017FE0 Slot: 3
	public override string ToString() { }
	// RVA: 0x18010 Offset: 0x17410 VA: 0x180018010 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x18050 Offset: 0x17450 VA: 0x180018050 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x475CB0 Offset: 0x4744B0 VA: 0x180475CB0
	public static double Parse(string s) { }
	// RVA: 0x475D60 Offset: 0x474560 VA: 0x180475D60
	public static double Parse(string s, IFormatProvider provider) { }
	// RVA: 0x475E20 Offset: 0x474620 VA: 0x180475E20
	public static double Parse(string s, NumberStyles style, IFormatProvider provider) { }
	// RVA: 0x475EF0 Offset: 0x4746F0 VA: 0x180475EF0
	private static double Parse(string s, NumberStyles style, NumberFormatInfo info) { }
	// RVA: 0x18090 Offset: 0x17490 VA: 0x180018090 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x180A0 Offset: 0x174A0 VA: 0x1800180A0 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x18150 Offset: 0x17550 VA: 0x180018150 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x18160 Offset: 0x17560 VA: 0x180018160 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x18200 Offset: 0x17600 VA: 0x180018200 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x182A0 Offset: 0x176A0 VA: 0x1800182A0 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x18340 Offset: 0x17740 VA: 0x180018340 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x183E0 Offset: 0x177E0 VA: 0x1800183E0 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x18480 Offset: 0x17880 VA: 0x180018480 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x18520 Offset: 0x17920 VA: 0x180018520 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x185C0 Offset: 0x179C0 VA: 0x1800185C0 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x18660 Offset: 0x17A60 VA: 0x180018660 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x18700 Offset: 0x17B00 VA: 0x180018700 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x18710 Offset: 0x17B10 VA: 0x180018710 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x18860 Offset: 0x17C60 VA: 0x180018860 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x18870 Offset: 0x17C70 VA: 0x180018870 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
	// RVA: 0x4760A0 Offset: 0x4748A0 VA: 0x1804760A0
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
internal sealed class Empty : ISerializable // TypeDefIndex: 134
{
	// Fields
	public static readonly Empty Value; // 0xA15984

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x476770 Offset: 0x474F70 VA: 0x180476770 Slot: 3
	public override string ToString() { }
	// RVA: 0x4767F0 Offset: 0x474FF0 VA: 0x1804767F0 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x4768B0 Offset: 0x4750B0 VA: 0x1804768B0
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public class EntryPointNotFoundException : TypeLoadException // TypeDefIndex: 135
{
	// Methods
	// RVA: 0x4886F0 Offset: 0x486EF0 VA: 0x1804886F0
	public void .ctor() { }
	// RVA: 0x488780 Offset: 0x486F80 VA: 0x180488780
	public void .ctor(string message) { }
	// RVA: 0x475960 Offset: 0x474160 VA: 0x180475960
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public abstract class Enum : ValueType, IComparable, IFormattable, IConvertible // TypeDefIndex: 136
{
	// Fields
	private static readonly char[] enumSeperatorCharArray; // 0xABE30
	private const string enumSeperator = ", "; // 0xABE88

	// Methods
	// RVA: 0x4887A0 Offset: 0x486FA0 VA: 0x1804887A0
	private static Enum.ValuesAndNames GetCachedValuesAndNames(RuntimeType enumType, bool getNames) { }
	// RVA: 0x488AA0 Offset: 0x4872A0 VA: 0x180488AA0
	private static string InternalFormattedHexString(object value) { }
	// RVA: 0x4891B0 Offset: 0x4879B0 VA: 0x1804891B0
	private static string InternalFormat(RuntimeType eT, object value) { }
	// RVA: 0x489390 Offset: 0x487B90 VA: 0x180489390
	private static string InternalFlagsFormat(RuntimeType eT, object value) { }
	// RVA: 0x489640 Offset: 0x487E40 VA: 0x180489640
	internal static ulong ToUInt64(object value) { }
	// RVA: 0x489820 Offset: 0x488020 VA: 0x180489820
	private static int InternalCompareTo(object o1, object o2) { }
	// RVA: 0x489830 Offset: 0x488030 VA: 0x180489830
	internal static RuntimeType InternalGetUnderlyingType(RuntimeType enumType) { }
	// RVA: 0x489880 Offset: 0x488080 VA: 0x180489880
	private static bool GetEnumValuesAndNames(RuntimeType enumType, out ulong[] values, out string[] names) { }
	// RVA: 0x4898C0 Offset: 0x4880C0 VA: 0x1804898C0
	private static object InternalBoxEnum(RuntimeType enumType, long value) { }
	// RVA: 0x4898F0 Offset: 0x4880F0 VA: 0x1804898F0
	public static object Parse(Type enumType, string value, bool ignoreCase) { }
	// RVA: 0x489A70 Offset: 0x488270 VA: 0x180489A70
	private static bool TryParseEnum(Type enumType, string value, bool ignoreCase, ref Enum.EnumResult parseResult) { }
	// RVA: 0x48A470 Offset: 0x488C70 VA: 0x18048A470
	public static Type GetUnderlyingType(Type enumType) { }
	// RVA: 0x48A540 Offset: 0x488D40 VA: 0x18048A540
	public static Array GetValues(Type enumType) { }
	// RVA: 0x48A610 Offset: 0x488E10 VA: 0x18048A610
	internal static ulong[] InternalGetValues(RuntimeType enumType) { }
	// RVA: 0x48A6C0 Offset: 0x488EC0 VA: 0x18048A6C0
	public static string GetName(Type enumType, object value) { }
	// RVA: 0x48A7A0 Offset: 0x488FA0 VA: 0x18048A7A0
	internal static string[] InternalGetNames(RuntimeType enumType) { }
	// RVA: 0x48A850 Offset: 0x489050 VA: 0x18048A850
	public static object ToObject(Type enumType, object value) { }
	// RVA: 0x48AD90 Offset: 0x489590 VA: 0x18048AD90
	public static bool IsDefined(Type enumType, object value) { }
	// RVA: 0x48AE70 Offset: 0x489670 VA: 0x18048AE70
	private object get_value() { }
	// RVA: 0x48AE70 Offset: 0x489670 VA: 0x18048AE70
	internal object GetValue() { }
	// RVA: 0x48AF10 Offset: 0x489710 VA: 0x18048AF10
	private int get_hashcode() { }
	// RVA: 0x4187E0 Offset: 0x416FE0 VA: 0x1804187E0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x48AF10 Offset: 0x489710 VA: 0x18048AF10 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x48AF90 Offset: 0x489790 VA: 0x18048AF90 Slot: 3
	public override string ToString() { }
	[ObsoleteAttribute] // RVA: 0xD9820 Offset: 0xD8C20 VA: 0x1800D9820
	// RVA: 0x48B0F0 Offset: 0x4898F0 VA: 0x18048B0F0 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x48B100 Offset: 0x489900 VA: 0x18048B100 Slot: 4
	public int CompareTo(object target) { }
	// RVA: 0x48B310 Offset: 0x489B10 VA: 0x18048B310
	public string ToString(string format) { }
	[ObsoleteAttribute] // RVA: 0xD9850 Offset: 0xD8C50 VA: 0x1800D9850
	// RVA: 0x1EBD50 Offset: 0x1EA550 VA: 0x1801EBD50 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x48B910 Offset: 0x48A110 VA: 0x18048B910 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x48BCC0 Offset: 0x48A4C0 VA: 0x18048BCC0 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x48BE00 Offset: 0x48A600 VA: 0x18048BE00 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x48BF40 Offset: 0x48A740 VA: 0x18048BF40 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x48C080 Offset: 0x48A880 VA: 0x18048C080 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x48C1C0 Offset: 0x48A9C0 VA: 0x18048C1C0 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x48C300 Offset: 0x48AB00 VA: 0x18048C300 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x48C440 Offset: 0x48AC40 VA: 0x18048C440 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x48C580 Offset: 0x48AD80 VA: 0x18048C580 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x48C6C0 Offset: 0x48AEC0 VA: 0x18048C6C0 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x48C800 Offset: 0x48B000 VA: 0x18048C800 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x48C940 Offset: 0x48B140 VA: 0x18048C940 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x48CA80 Offset: 0x48B280 VA: 0x18048CA80 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x48CBC0 Offset: 0x48B3C0 VA: 0x18048CBC0 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x48CD20 Offset: 0x48B520 VA: 0x18048CD20 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x48CDF0 Offset: 0x48B5F0 VA: 0x18048CDF0 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
	// RVA: 0x48CEA0 Offset: 0x48B6A0 VA: 0x18048CEA0
	public static object ToObject(Type enumType, sbyte value) { }
	// RVA: 0x48D0B0 Offset: 0x48B8B0 VA: 0x18048D0B0
	public static object ToObject(Type enumType, short value) { }
	// RVA: 0x48D2C0 Offset: 0x48BAC0 VA: 0x18048D2C0
	public static object ToObject(Type enumType, int value) { }
	// RVA: 0x48D4D0 Offset: 0x48BCD0 VA: 0x18048D4D0
	public static object ToObject(Type enumType, byte value) { }
	// RVA: 0x48D6E0 Offset: 0x48BEE0 VA: 0x18048D6E0
	public static object ToObject(Type enumType, ushort value) { }
	// RVA: 0x48D8F0 Offset: 0x48C0F0 VA: 0x18048D8F0
	public static object ToObject(Type enumType, uint value) { }
	// RVA: 0x48DB00 Offset: 0x48C300 VA: 0x18048DB00
	public static object ToObject(Type enumType, long value) { }
	// RVA: 0x48DD10 Offset: 0x48C510 VA: 0x18048DD10
	public static object ToObject(Type enumType, ulong value) { }
	// RVA: 0x48DF20 Offset: 0x48C720 VA: 0x18048DF20
	private static object ToObject(Type enumType, char value) { }
	// RVA: 0x48E130 Offset: 0x48C930 VA: 0x18048E130
	private static object ToObject(Type enumType, bool value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x48E340 Offset: 0x48CB40 VA: 0x18048E340
	private static void .cctor() { }
}

// Namespace: 
private enum Enum.ParseFailureKind // TypeDefIndex: 137
{
	// Fields
	public int value__; // 0x0
	public const Enum.ParseFailureKind None = 0; // 0x0
	public const Enum.ParseFailureKind Argument = 1; // 0x0
	public const Enum.ParseFailureKind ArgumentNull = 2; // 0x0
	public const Enum.ParseFailureKind ArgumentWithParameter = 3; // 0x0
	public const Enum.ParseFailureKind UnhandledException = 4; // 0x0
}

// Namespace: 
private struct Enum.EnumResult // TypeDefIndex: 138
{
	// Fields
	internal object parsedEnum; // 0x0
	internal bool canThrow; // 0x8
	internal Enum.ParseFailureKind m_failure; // 0xC
	internal string m_failureMessageID; // 0x10
	internal string m_failureParameter; // 0x18
	internal object m_failureMessageFormatArgument; // 0x20
	internal Exception m_innerException; // 0x28

	// Methods
	// RVA: 0xB5B0 Offset: 0xA9B0 VA: 0x18000B5B0
	internal void Init(bool canMethodThrow) { }
	// RVA: 0xB5C0 Offset: 0xA9C0 VA: 0x18000B5C0
	internal void SetFailure(Exception unhandledException) { }
	// RVA: 0xB5D0 Offset: 0xA9D0 VA: 0x18000B5D0
	internal void SetFailure(Enum.ParseFailureKind failure, string failureParameter) { }
	// RVA: 0xB5E0 Offset: 0xA9E0 VA: 0x18000B5E0
	internal void SetFailure(Enum.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument) { }
	// RVA: 0xB5F0 Offset: 0xA9F0 VA: 0x18000B5F0
	internal Exception GetEnumParseException() { }
}

// Namespace: 
private class Enum.ValuesAndNames // TypeDefIndex: 139
{
	// Fields
	public ulong[] Values; // 0x10
	public string[] Names; // 0x18

	// Methods
	// RVA: 0x25B970 Offset: 0x25A170 VA: 0x18025B970
	public void .ctor(ulong[] values, string[] names) { }
}

// Namespace: System
[Serializable]
public class EventArgs // TypeDefIndex: 140
{
	// Fields
	public static readonly EventArgs Empty; // 0xA15984

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x490450 Offset: 0x48EC50 VA: 0x180490450
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public sealed class EventHandler : MulticastDelegate // TypeDefIndex: 141
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x261A80 Offset: 0x260280 VA: 0x180261A80 Slot: 12
	public virtual void Invoke(object sender, EventArgs e) { }
	// RVA: 0x261F90 Offset: 0x260790 VA: 0x180261F90 Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[Serializable]
public sealed class EventHandler<TEventArgs> : MulticastDelegate // TypeDefIndex: 142
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x7CBC00 Offset: 0x7CA400 VA: 0x1807CBC00 Slot: 12
	public virtual void Invoke(object sender, TEventArgs e) { }
	// RVA: 0x261F90 Offset: 0x260790 VA: 0x180261F90 Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, TEventArgs e, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[Serializable]
public class Exception : ISerializable // TypeDefIndex: 143
{
	// Fields
	[OptionalFieldAttribute] // RVA: 0xD9880 Offset: 0xD8C80 VA: 0x1800D9880
	private static object s_EDILock; // 0x0
	private string _className; // 0x10
	internal string _message; // 0x18
	private IDictionary _data; // 0x20
	private Exception _innerException; // 0x28
	private string _helpURL; // 0x30
	private object _stackTrace; // 0x38
	private string _stackTraceString; // 0x40
	private string _remoteStackTraceString; // 0x48
	private int _remoteStackIndex; // 0x50
	private object _dynamicMethods; // 0x58
	internal int _HResult; // 0x60
	private string _source; // 0x68
	[OptionalFieldAttribute] // RVA: 0xD9890 Offset: 0xD8C90 VA: 0x1800D9890
	private SafeSerializationManager _safeSerializationManager; // 0x70
	internal StackTrace[] captured_traces; // 0x78
	private IntPtr[] native_trace_ips; // 0x80
	private const int _COMPlusExceptionCode = -532462766; // 0x0

	// Properties
	public virtual string Message { get; }
	public virtual IDictionary Data { get; }
	public Exception InnerException { get; }
	public virtual string StackTrace { get; }
	public virtual string Source { get; }
	protected int HResult { set; }

	// Methods
	// RVA: 0x490F20 Offset: 0x48F720 VA: 0x180490F20
	private void Init() { }
	// RVA: 0x490FC0 Offset: 0x48F7C0 VA: 0x180490FC0
	public void .ctor() { }
	// RVA: 0x490FD0 Offset: 0x48F7D0 VA: 0x180490FD0
	public void .ctor(string message) { }
	// RVA: 0x491000 Offset: 0x48F800 VA: 0x180491000
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x491040 Offset: 0x48F840 VA: 0x180491040
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x491360 Offset: 0x48FB60 VA: 0x180491360 Slot: 5
	public virtual string get_Message() { }
	// RVA: 0x491490 Offset: 0x48FC90 VA: 0x180491490 Slot: 6
	public virtual IDictionary get_Data() { }
	// RVA: 0x491520 Offset: 0x48FD20 VA: 0x180491520
	private string GetClassName() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900 Slot: 7
	public Exception get_InnerException() { }
	// RVA: 0x491570 Offset: 0x48FD70 VA: 0x180491570 Slot: 8
	public virtual string get_StackTrace() { }
	// RVA: 0x4915B0 Offset: 0x48FDB0 VA: 0x1804915B0
	private string GetStackTrace(bool needFileInfo) { }
	// RVA: 0x491600 Offset: 0x48FE00 VA: 0x180491600 Slot: 9
	public virtual string get_Source() { }
	// RVA: 0x387AE0 Offset: 0x3862E0 VA: 0x180387AE0 Slot: 3
	public override string ToString() { }
	// RVA: 0x4917B0 Offset: 0x48FFB0 VA: 0x1804917B0
	private string ToString(bool needFileLineInfo, bool needMessage) { }
	// RVA: 0x491B90 Offset: 0x490390 VA: 0x180491B90 Slot: 10
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	[OnDeserializedAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4926C0 Offset: 0x490EC0 VA: 0x1804926C0
	private void OnDeserialized(StreamingContext context) { }
	// RVA: 0x492770 Offset: 0x490F70 VA: 0x180492770
	private string StripFileInfo(string stackTrace, bool isRemoteStackTrace) { }
	// RVA: 0x492780 Offset: 0x490F80 VA: 0x180492780
	internal void RestoreExceptionDispatchInfo(ExceptionDispatchInfo exceptionDispatchInfo) { }
	// RVA: 0x492850 Offset: 0x491050 VA: 0x180492850
	protected void set_HResult(int value) { }
	// RVA: 0x492860 Offset: 0x491060 VA: 0x180492860 Slot: 11
	public Type GetType() { }
	// RVA: 0x492870 Offset: 0x491070 VA: 0x180492870
	internal static string GetMessageFromNativeResources(Exception.ExceptionMessageKind kind) { }
	// RVA: 0x492900 Offset: 0x491100 VA: 0x180492900
	internal static void ReportUnhandledException(Exception exception) { }
	// RVA: 0x492910 Offset: 0x491110 VA: 0x180492910
	private static void .cctor() { }
}

// Namespace: 
internal enum Exception.ExceptionMessageKind // TypeDefIndex: 144
{
	// Fields
	public int value__; // 0x0
	public const Exception.ExceptionMessageKind ThreadAbort = 1; // 0x0
	public const Exception.ExceptionMessageKind ThreadInterrupted = 2; // 0x0
	public const Exception.ExceptionMessageKind OutOfMemory = 3; // 0x0
}

// Namespace: System
[ObsoleteAttribute] // RVA: 0xD9910 Offset: 0xD8D10 VA: 0x1800D9910
[Serializable]
public sealed class ExecutionEngineException : SystemException // TypeDefIndex: 145
{
	// Methods
	// RVA: 0x75EAC0 Offset: 0x75D2C0 VA: 0x18075EAC0
	public void .ctor() { }
	// RVA: 0x75EB50 Offset: 0x75D350 VA: 0x18075EB50
	public void .ctor(string message) { }
	// RVA: 0x75EB70 Offset: 0x75D370 VA: 0x18075EB70
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class FieldAccessException : MemberAccessException // TypeDefIndex: 146
{
	// Methods
	// RVA: 0x75F000 Offset: 0x75D800 VA: 0x18075F000
	public void .ctor() { }
	// RVA: 0x75F090 Offset: 0x75D890 VA: 0x18075F090
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xD9940 Offset: 0xD8D40 VA: 0x1800D9940
[Serializable]
public class FlagsAttribute : Attribute // TypeDefIndex: 147
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System
[Serializable]
public class FormatException : SystemException // TypeDefIndex: 148
{
	// Methods
	// RVA: 0x765AD0 Offset: 0x7642D0 VA: 0x180765AD0
	public void .ctor() { }
	// RVA: 0x402900 Offset: 0x401100 VA: 0x180402900
	public void .ctor(string message) { }
	// RVA: 0x765B60 Offset: 0x764360 VA: 0x180765B60
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
public static class GC // TypeDefIndex: 149
{
	// Fields
	internal static readonly object EPHEMERON_TOMBSTONE; // 0xABEB0

	// Properties
	public static int MaxGeneration { get; }

	// Methods
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	private static int GetMaxGeneration() { }
	// RVA: 0x768990 Offset: 0x767190 VA: 0x180768990
	private static void InternalCollect(int generation) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private static void RecordPressure(long bytesAllocated) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal static void register_ephemeron_array(Ephemeron[] array) { }
	// RVA: 0x7689B0 Offset: 0x7671B0 VA: 0x1807689B0
	private static object get_ephemeron_tombstone() { }
	// RVA: 0x7689C0 Offset: 0x7671C0 VA: 0x1807689C0
	public static void AddMemoryPressure(long bytesAllocated) { }
	// RVA: 0x768AA0 Offset: 0x7672A0 VA: 0x180768AA0
	public static void RemoveMemoryPressure(long bytesAllocated) { }
	// RVA: 0x768B80 Offset: 0x767380 VA: 0x180768B80
	public static void Collect() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public static void KeepAlive(object obj) { }
	// RVA: 0x768CA0 Offset: 0x7674A0 VA: 0x180768CA0
	public static int get_MaxGeneration() { }
	// RVA: 0x768D30 Offset: 0x767530 VA: 0x180768D30
	private static void _SuppressFinalize(object o) { }
	// RVA: 0x768E30 Offset: 0x767630 VA: 0x180768E30
	public static void SuppressFinalize(object obj) { }
	// RVA: 0x768FD0 Offset: 0x7677D0 VA: 0x180768FD0
	private static void _ReRegisterForFinalize(object o) { }
	// RVA: 0x7690E0 Offset: 0x7678E0 VA: 0x1807690E0
	public static void ReRegisterForFinalize(object obj) { }
	// RVA: 0x769280 Offset: 0x767A80 VA: 0x180769280
	private static void .cctor() { }
}

// Namespace: System
internal static class DateTimeFormat // TypeDefIndex: 150
{
	// Fields
	internal static readonly TimeSpan NullOffset; // 0x0
	internal static char[] allStandardFormats; // 0x8
	internal static string[] fixedNumberFormats; // 0x10

	// Methods
	// RVA: 0x406F60 Offset: 0x405760 VA: 0x180406F60
	internal static void FormatDigits(StringBuilder outputBuffer, int value, int len) { }
	// RVA: 0x407020 Offset: 0x405820 VA: 0x180407020
	internal static void FormatDigits(StringBuilder outputBuffer, int value, int len, bool overrideLengthLimit) { }
	// RVA: 0x407120 Offset: 0x405920 VA: 0x180407120
	private static void HebrewFormatDigits(StringBuilder outputBuffer, int digits) { }
	// RVA: 0x4071E0 Offset: 0x4059E0 VA: 0x1804071E0
	internal static int ParseRepeatPattern(string format, int pos, char patternChar) { }
	// RVA: 0x407300 Offset: 0x405B00 VA: 0x180407300
	private static string FormatDayOfWeek(int dayOfWeek, int repeat, DateTimeFormatInfo dtfi) { }
	// RVA: 0x407340 Offset: 0x405B40 VA: 0x180407340
	private static string FormatMonth(int month, int repeatCount, DateTimeFormatInfo dtfi) { }
	// RVA: 0x407380 Offset: 0x405B80 VA: 0x180407380
	private static string FormatHebrewMonthName(DateTime time, int month, int repeatCount, DateTimeFormatInfo dtfi) { }
	// RVA: 0x407440 Offset: 0x405C40 VA: 0x180407440
	internal static int ParseQuoteString(string format, int pos, StringBuilder result) { }
	// RVA: 0x407620 Offset: 0x405E20 VA: 0x180407620
	internal static int ParseNextChar(string format, int pos) { }
	// RVA: 0x407660 Offset: 0x405E60 VA: 0x180407660
	private static bool IsUseGenitiveForm(string format, int index, int tokenLen, char patternToMatch) { }
	// RVA: 0x407770 Offset: 0x405F70 VA: 0x180407770
	private static string FormatCustomized(DateTime dateTime, string format, DateTimeFormatInfo dtfi, TimeSpan offset) { }
	// RVA: 0x4087D0 Offset: 0x406FD0 VA: 0x1804087D0
	private static void FormatCustomizedTimeZone(DateTime dateTime, TimeSpan offset, string format, int tokenLen, bool timeOnly, StringBuilder result) { }
	// RVA: 0x408CA0 Offset: 0x4074A0 VA: 0x180408CA0
	private static void FormatCustomizedRoundripTimeZone(DateTime dateTime, TimeSpan offset, StringBuilder result) { }
	// RVA: 0x408FB0 Offset: 0x4077B0 VA: 0x180408FB0
	internal static string GetRealFormat(string format, DateTimeFormatInfo dtfi) { }
	// RVA: 0x409500 Offset: 0x407D00 VA: 0x180409500
	private static string ExpandPredefinedFormat(string format, ref DateTime dateTime, ref DateTimeFormatInfo dtfi, ref TimeSpan offset) { }
	// RVA: 0x4098C0 Offset: 0x4080C0 VA: 0x1804098C0
	internal static string Format(DateTime dateTime, string format, DateTimeFormatInfo dtfi) { }
	// RVA: 0x409990 Offset: 0x408190 VA: 0x180409990
	internal static string Format(DateTime dateTime, string format, DateTimeFormatInfo dtfi, TimeSpan offset) { }
	// RVA: 0x409C40 Offset: 0x408440 VA: 0x180409C40
	private static void .cctor() { }
}

// Namespace: System
internal static class DateTimeParse // TypeDefIndex: 151
{
	// Fields
	internal static DateTimeParse.MatchNumberDelegate m_hebrewNumberParser; // 0x0
	private static DateTimeParse.DS[][] dateParsingStates; // 0x8

	// Methods
	// RVA: 0x506CC0 Offset: 0x5054C0 VA: 0x180506CC0
	internal static bool IsDigit(char ch) { }
	// RVA: 0x506CE0 Offset: 0x5054E0 VA: 0x180506CE0
	private static bool ParseFraction(ref __DTString str, out double result) { }
	// RVA: 0x506E10 Offset: 0x505610 VA: 0x180506E10
	private static bool ParseTimeZone(ref __DTString str, ref TimeSpan result) { }
	// RVA: 0x507140 Offset: 0x505940 VA: 0x180507140
	private static bool HandleTimeZone(ref __DTString str, ref DateTimeResult result) { }
	// RVA: 0x5072D0 Offset: 0x505AD0 VA: 0x1805072D0
	private static bool Lex(DateTimeParse.DS dps, ref __DTString str, ref DateTimeToken dtok, ref DateTimeRawInfo raw, ref DateTimeResult result, ref DateTimeFormatInfo dtfi, DateTimeStyles styles) { }
	// RVA: 0x508200 Offset: 0x506A00 VA: 0x180508200
	private static bool VerifyValidPunctuation(ref __DTString str) { }
	// RVA: 0x5083E0 Offset: 0x506BE0 VA: 0x1805083E0
	private static bool GetYearMonthDayOrder(string datePattern, DateTimeFormatInfo dtfi, out int order) { }
	// RVA: 0x508610 Offset: 0x506E10 VA: 0x180508610
	private static bool GetYearMonthOrder(string pattern, DateTimeFormatInfo dtfi, out int order) { }
	// RVA: 0x508760 Offset: 0x506F60 VA: 0x180508760
	private static bool GetMonthDayOrder(string pattern, DateTimeFormatInfo dtfi, out int order) { }
	// RVA: 0x5088F0 Offset: 0x5070F0 VA: 0x1805088F0
	private static bool TryAdjustYear(ref DateTimeResult result, int year, out int adjustedYear) { }
	// RVA: 0x5089E0 Offset: 0x5071E0 VA: 0x1805089E0
	private static bool SetDateYMD(ref DateTimeResult result, int year, int month, int day) { }
	// RVA: 0x508A60 Offset: 0x507260 VA: 0x180508A60
	private static bool SetDateMDY(ref DateTimeResult result, int month, int day, int year) { }
	// RVA: 0x508B30 Offset: 0x507330 VA: 0x180508B30
	private static bool SetDateDMY(ref DateTimeResult result, int day, int month, int year) { }
	// RVA: 0x508C00 Offset: 0x507400 VA: 0x180508C00
	private static bool SetDateYDM(ref DateTimeResult result, int year, int day, int month) { }
	// RVA: 0x508CD0 Offset: 0x5074D0 VA: 0x180508CD0
	private static void GetDefaultYear(ref DateTimeResult result, ref DateTimeStyles styles) { }
	// RVA: 0x508DB0 Offset: 0x5075B0 VA: 0x180508DB0
	private static bool GetDayOfNN(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x508F60 Offset: 0x507760 VA: 0x180508F60
	private static bool GetDayOfNNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x509520 Offset: 0x507D20 VA: 0x180509520
	private static bool GetDayOfMN(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x509790 Offset: 0x507F90 VA: 0x180509790
	private static bool GetHebrewDayOfNM(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x509950 Offset: 0x508150 VA: 0x180509950
	private static bool GetDayOfNM(ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x509BC0 Offset: 0x5083C0 VA: 0x180509BC0
	private static bool GetDayOfMNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x509F70 Offset: 0x508770 VA: 0x180509F70
	private static bool GetDayOfYNN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x50A140 Offset: 0x508940 VA: 0x18050A140
	private static bool GetDayOfNNY(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x50A350 Offset: 0x508B50 VA: 0x18050A350
	private static bool GetDayOfYMN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x50A450 Offset: 0x508C50 VA: 0x18050A450
	private static bool GetDayOfYN(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x50A540 Offset: 0x508D40 VA: 0x18050A540
	private static bool GetDayOfYM(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x50A630 Offset: 0x508E30 VA: 0x18050A630
	private static void AdjustTimeMark(DateTimeFormatInfo dtfi, ref DateTimeRawInfo raw) { }
	// RVA: 0x50A6A0 Offset: 0x508EA0 VA: 0x18050A6A0
	private static bool AdjustHour(ref int hour, DateTimeParse.TM timeMark) { }
	// RVA: 0x50A6E0 Offset: 0x508EE0 VA: 0x18050A6E0
	private static bool GetTimeOfN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw) { }
	// RVA: 0x50A7B0 Offset: 0x508FB0 VA: 0x18050A7B0
	private static bool GetTimeOfNN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw) { }
	// RVA: 0x50A880 Offset: 0x509080 VA: 0x18050A880
	private static bool GetTimeOfNNN(DateTimeFormatInfo dtfi, ref DateTimeResult result, ref DateTimeRawInfo raw) { }
	// RVA: 0x50A950 Offset: 0x509150 VA: 0x18050A950
	private static bool GetDateOfDSN(ref DateTimeResult result, ref DateTimeRawInfo raw) { }
	// RVA: 0x50AA10 Offset: 0x509210 VA: 0x18050AA10
	private static bool GetDateOfNDS(ref DateTimeResult result, ref DateTimeRawInfo raw) { }
	// RVA: 0x50AB10 Offset: 0x509310 VA: 0x18050AB10
	private static bool GetDateOfNNDS(ref DateTimeResult result, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x50ADC0 Offset: 0x5095C0 VA: 0x18050ADC0
	private static bool ProcessDateTimeSuffix(ref DateTimeResult result, ref DateTimeRawInfo raw, ref DateTimeToken dtok) { }
	// RVA: 0x50AEA0 Offset: 0x5096A0 VA: 0x18050AEA0
	internal static bool ProcessHebrewTerminalState(DateTimeParse.DS dps, ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x50B250 Offset: 0x509A50 VA: 0x18050B250
	internal static bool ProcessTerminaltState(DateTimeParse.DS dps, ref DateTimeResult result, ref DateTimeStyles styles, ref DateTimeRawInfo raw, DateTimeFormatInfo dtfi) { }
	// RVA: 0x50B8B0 Offset: 0x50A0B0 VA: 0x18050B8B0
	internal static DateTime Parse(string s, DateTimeFormatInfo dtfi, DateTimeStyles styles) { }
	// RVA: 0x50BA10 Offset: 0x50A210 VA: 0x18050BA10
	internal static bool TryParse(string s, DateTimeFormatInfo dtfi, DateTimeStyles styles, ref DateTimeResult result) { }
	// RVA: 0x50C3D0 Offset: 0x50ABD0 VA: 0x18050C3D0
	private static bool DetermineTimeZoneAdjustments(ref DateTimeResult result, DateTimeStyles styles, bool bTimeOnly) { }
	// RVA: 0x50C620 Offset: 0x50AE20 VA: 0x18050C620
	private static bool DateTimeOffsetTimeZonePostProcessing(ref DateTimeResult result, DateTimeStyles styles) { }
	// RVA: 0x50C870 Offset: 0x50B070 VA: 0x18050C870
	private static bool AdjustTimeZoneToUniversal(ref DateTimeResult result) { }
	// RVA: 0x50C960 Offset: 0x50B160 VA: 0x18050C960
	private static bool AdjustTimeZoneToLocal(ref DateTimeResult result, bool bTimeOnly) { }
	// RVA: 0x50CBE0 Offset: 0x50B3E0 VA: 0x18050CBE0
	private static bool ParseISO8601(ref DateTimeRawInfo raw, ref __DTString str, DateTimeStyles styles, ref DateTimeResult result) { }
	// RVA: 0x50D250 Offset: 0x50BA50 VA: 0x18050D250
	internal static bool MatchHebrewDigits(ref __DTString str, int digitLen, out int number) { }
	// RVA: 0x50D380 Offset: 0x50BB80 VA: 0x18050D380
	internal static bool ParseDigits(ref __DTString str, int digitLen, out int result) { }
	// RVA: 0x50D470 Offset: 0x50BC70 VA: 0x18050D470
	internal static bool ParseDigits(ref __DTString str, int minDigitLen, int maxDigitLen, out int result) { }
	// RVA: 0x50D520 Offset: 0x50BD20 VA: 0x18050D520
	private static DateTime GetDateTimeNow(ref DateTimeResult result, ref DateTimeStyles styles) { }
	// RVA: 0x50D670 Offset: 0x50BE70 VA: 0x18050D670
	private static bool CheckDefaultDateTime(ref DateTimeResult result, ref Calendar cal, DateTimeStyles styles) { }
	// RVA: 0x50D8C0 Offset: 0x50C0C0 VA: 0x18050D8C0
	private static Exception GetDateTimeParseException(ref DateTimeResult result) { }
	// RVA: 0x50DAE0 Offset: 0x50C2E0 VA: 0x18050DAE0
	private static void .cctor() { }
}

// Namespace: 
internal sealed class DateTimeParse.MatchNumberDelegate : MulticastDelegate // TypeDefIndex: 152
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26C410 Offset: 0x26AC10 VA: 0x18026C410 Slot: 12
	public virtual bool Invoke(ref __DTString str, int digitLen, out int result) { }
	// RVA: 0x26C760 Offset: 0x26AF60 VA: 0x18026C760 Slot: 13
	public virtual IAsyncResult BeginInvoke(ref __DTString str, int digitLen, out int result, AsyncCallback callback, object object) { }
	// RVA: 0x26C850 Offset: 0x26B050 VA: 0x18026C850 Slot: 14
	public virtual bool EndInvoke(ref __DTString str, out int result, IAsyncResult __result) { }
}

// Namespace: 
internal enum DateTimeParse.DTT // TypeDefIndex: 153
{
	// Fields
	public int value__; // 0x0
	public const DateTimeParse.DTT End = 0; // 0x0
	public const DateTimeParse.DTT NumEnd = 1; // 0x0
	public const DateTimeParse.DTT NumAmpm = 2; // 0x0
	public const DateTimeParse.DTT NumSpace = 3; // 0x0
	public const DateTimeParse.DTT NumDatesep = 4; // 0x0
	public const DateTimeParse.DTT NumTimesep = 5; // 0x0
	public const DateTimeParse.DTT MonthEnd = 6; // 0x0
	public const DateTimeParse.DTT MonthSpace = 7; // 0x0
	public const DateTimeParse.DTT MonthDatesep = 8; // 0x0
	public const DateTimeParse.DTT NumDatesuff = 9; // 0x0
	public const DateTimeParse.DTT NumTimesuff = 10; // 0x0
	public const DateTimeParse.DTT DayOfWeek = 11; // 0x0
	public const DateTimeParse.DTT YearSpace = 12; // 0x0
	public const DateTimeParse.DTT YearDateSep = 13; // 0x0
	public const DateTimeParse.DTT YearEnd = 14; // 0x0
	public const DateTimeParse.DTT TimeZone = 15; // 0x0
	public const DateTimeParse.DTT Era = 16; // 0x0
	public const DateTimeParse.DTT NumUTCTimeMark = 17; // 0x0
	public const DateTimeParse.DTT Unk = 18; // 0x0
	public const DateTimeParse.DTT NumLocalTimeMark = 19; // 0x0
	public const DateTimeParse.DTT Max = 20; // 0x0
}

// Namespace: 
internal enum DateTimeParse.TM // TypeDefIndex: 154
{
	// Fields
	public int value__; // 0x0
	public const DateTimeParse.TM NotSet = -1; // 0x0
	public const DateTimeParse.TM AM = 0; // 0x0
	public const DateTimeParse.TM PM = 1; // 0x0
}

// Namespace: 
internal enum DateTimeParse.DS // TypeDefIndex: 155
{
	// Fields
	public int value__; // 0x0
	public const DateTimeParse.DS BEGIN = 0; // 0x0
	public const DateTimeParse.DS N = 1; // 0x0
	public const DateTimeParse.DS NN = 2; // 0x0
	public const DateTimeParse.DS D_Nd = 3; // 0x0
	public const DateTimeParse.DS D_NN = 4; // 0x0
	public const DateTimeParse.DS D_NNd = 5; // 0x0
	public const DateTimeParse.DS D_M = 6; // 0x0
	public const DateTimeParse.DS D_MN = 7; // 0x0
	public const DateTimeParse.DS D_NM = 8; // 0x0
	public const DateTimeParse.DS D_MNd = 9; // 0x0
	public const DateTimeParse.DS D_NDS = 10; // 0x0
	public const DateTimeParse.DS D_Y = 11; // 0x0
	public const DateTimeParse.DS D_YN = 12; // 0x0
	public const DateTimeParse.DS D_YNd = 13; // 0x0
	public const DateTimeParse.DS D_YM = 14; // 0x0
	public const DateTimeParse.DS D_YMd = 15; // 0x0
	public const DateTimeParse.DS D_S = 16; // 0x0
	public const DateTimeParse.DS T_S = 17; // 0x0
	public const DateTimeParse.DS T_Nt = 18; // 0x0
	public const DateTimeParse.DS T_NNt = 19; // 0x0
	public const DateTimeParse.DS ERROR = 20; // 0x0
	public const DateTimeParse.DS DX_NN = 21; // 0x0
	public const DateTimeParse.DS DX_NNN = 22; // 0x0
	public const DateTimeParse.DS DX_MN = 23; // 0x0
	public const DateTimeParse.DS DX_NM = 24; // 0x0
	public const DateTimeParse.DS DX_MNN = 25; // 0x0
	public const DateTimeParse.DS DX_DS = 26; // 0x0
	public const DateTimeParse.DS DX_DSN = 27; // 0x0
	public const DateTimeParse.DS DX_NDS = 28; // 0x0
	public const DateTimeParse.DS DX_NNDS = 29; // 0x0
	public const DateTimeParse.DS DX_YNN = 30; // 0x0
	public const DateTimeParse.DS DX_YMN = 31; // 0x0
	public const DateTimeParse.DS DX_YN = 32; // 0x0
	public const DateTimeParse.DS DX_YM = 33; // 0x0
	public const DateTimeParse.DS TX_N = 34; // 0x0
	public const DateTimeParse.DS TX_NN = 35; // 0x0
	public const DateTimeParse.DS TX_NNN = 36; // 0x0
	public const DateTimeParse.DS TX_TS = 37; // 0x0
	public const DateTimeParse.DS DX_NNY = 38; // 0x0
}

// Namespace: System
internal struct __DTString // TypeDefIndex: 156
{
	// Fields
	internal string Value; // 0x0
	internal int Index; // 0x8
	internal int len; // 0xC
	internal char m_current; // 0x10
	private CompareInfo m_info; // 0x18
	private bool m_checkDigitToken; // 0x20
	private static char[] WhiteSpaceChecks; // 0x0

	// Methods
	// RVA: 0xB2A0 Offset: 0xA6A0 VA: 0x18000B2A0
	internal void .ctor(string str, DateTimeFormatInfo dtfi) { }
	// RVA: 0xB2B0 Offset: 0xA6B0 VA: 0x18000B2B0
	internal bool GetNext() { }
	// RVA: 0xB2F0 Offset: 0xA6F0 VA: 0x18000B2F0
	internal bool AtEnd() { }
	// RVA: 0xB300 Offset: 0xA700 VA: 0x18000B300
	internal bool Advance(int count) { }
	// RVA: 0xB340 Offset: 0xA740 VA: 0x18000B340
	internal void GetRegularToken(out TokenType tokenType, out int tokenValue, DateTimeFormatInfo dtfi) { }
	// RVA: 0xB350 Offset: 0xA750 VA: 0x18000B350
	internal TokenType GetSeparatorToken(DateTimeFormatInfo dtfi, out int indexBeforeSeparator, out char charBeforeSeparator) { }
	// RVA: 0xB360 Offset: 0xA760 VA: 0x18000B360
	internal bool MatchSpecifiedWords(string target, bool checkWordBoundary, ref int matchLength) { }
	// RVA: 0xB370 Offset: 0xA770 VA: 0x18000B370
	internal bool Match(char ch) { }
	// RVA: 0xB3D0 Offset: 0xA7D0 VA: 0x18000B3D0
	internal bool GetNextDigit() { }
	// RVA: 0xB3E0 Offset: 0xA7E0 VA: 0x18000B3E0
	internal char GetChar() { }
	// RVA: 0xB410 Offset: 0xA810 VA: 0x18000B410
	internal int GetDigit() { }
	// RVA: 0xB440 Offset: 0xA840 VA: 0x18000B440
	internal void SkipWhiteSpaces() { }
	// RVA: 0xB450 Offset: 0xA850 VA: 0x18000B450
	internal bool SkipWhiteSpaceCurrent() { }
	// RVA: 0xB460 Offset: 0xA860 VA: 0x18000B460
	internal DTSubString GetSubString() { }
	// RVA: 0xB480 Offset: 0xA880 VA: 0x18000B480
	internal void ConsumeSubString(DTSubString sub) { }
	// RVA: 0x269570 Offset: 0x267D70 VA: 0x180269570
	private static void .cctor() { }
}

// Namespace: System
internal enum DTSubStringType // TypeDefIndex: 157
{
	// Fields
	public int value__; // 0x0
	public const DTSubStringType Unknown = 0; // 0x0
	public const DTSubStringType Invalid = 1; // 0x0
	public const DTSubStringType Number = 2; // 0x0
	public const DTSubStringType End = 3; // 0x0
	public const DTSubStringType Other = 4; // 0x0
}

// Namespace: System
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
internal struct DTSubString // TypeDefIndex: 158
{
	// Fields
	internal string s; // 0x0
	internal int index; // 0x8
	internal int length; // 0xC
	internal DTSubStringType type; // 0x10
	internal int value; // 0x14

	// Properties
	internal char Item { get; }

	// Methods
	// RVA: 0x13A40 Offset: 0x12E40 VA: 0x180013A40
	internal char get_Item(int relativeIndex) { }
}

// Namespace: System
internal struct DateTimeToken // TypeDefIndex: 159
{
	// Fields
	internal DateTimeParse.DTT dtt; // 0x0
	internal TokenType suffix; // 0x4
	internal int num; // 0x8
}

// Namespace: System
internal struct DateTimeRawInfo // TypeDefIndex: 160
{
	// Fields
	private int* num; // 0x0
	internal int numCount; // 0x8
	internal int month; // 0xC
	internal int year; // 0x10
	internal int dayOfWeek; // 0x14
	internal int era; // 0x18
	internal DateTimeParse.TM timeMark; // 0x1C
	internal double fraction; // 0x20
	internal bool hasSameDateAndTimeSeparators; // 0x28
	internal bool timeZone; // 0x29

	// Methods
	// RVA: 0x1F0E0 Offset: 0x1E4E0 VA: 0x18001F0E0
	internal void Init(int* numberBuffer) { }
	// RVA: 0x1F110 Offset: 0x1E510 VA: 0x18001F110
	internal void AddNumber(int value) { }
	// RVA: 0x1F130 Offset: 0x1E530 VA: 0x18001F130
	internal int GetNumber(int index) { }
}

// Namespace: System
internal enum ParseFailureKind // TypeDefIndex: 161
{
	// Fields
	public int value__; // 0x0
	public const ParseFailureKind None = 0; // 0x0
	public const ParseFailureKind ArgumentNull = 1; // 0x0
	public const ParseFailureKind Format = 2; // 0x0
	public const ParseFailureKind FormatWithParameter = 3; // 0x0
	public const ParseFailureKind FormatBadDateTimeCalendar = 4; // 0x0
}

// Namespace: System
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum ParseFlags // TypeDefIndex: 162
{
	// Fields
	public int value__; // 0x0
	public const ParseFlags HaveYear = 1; // 0x0
	public const ParseFlags HaveMonth = 2; // 0x0
	public const ParseFlags HaveDay = 4; // 0x0
	public const ParseFlags HaveHour = 8; // 0x0
	public const ParseFlags HaveMinute = 16; // 0x0
	public const ParseFlags HaveSecond = 32; // 0x0
	public const ParseFlags HaveTime = 64; // 0x0
	public const ParseFlags HaveDate = 128; // 0x0
	public const ParseFlags TimeZoneUsed = 256; // 0x0
	public const ParseFlags TimeZoneUtc = 512; // 0x0
	public const ParseFlags ParsedMonthName = 1024; // 0x0
	public const ParseFlags CaptureOffset = 2048; // 0x0
	public const ParseFlags YearDefault = 4096; // 0x0
	public const ParseFlags Rfc1123Pattern = 8192; // 0x0
	public const ParseFlags UtcSortPattern = 16384; // 0x0
}

// Namespace: System
internal struct DateTimeResult // TypeDefIndex: 163
{
	// Fields
	internal int Year; // 0x0
	internal int Month; // 0x4
	internal int Day; // 0x8
	internal int Hour; // 0xC
	internal int Minute; // 0x10
	internal int Second; // 0x14
	internal double fraction; // 0x18
	internal int era; // 0x20
	internal ParseFlags flags; // 0x24
	internal TimeSpan timeZoneOffset; // 0x28
	internal Calendar calendar; // 0x30
	internal DateTime parsedDate; // 0x38
	internal ParseFailureKind failure; // 0x40
	internal string failureMessageID; // 0x48
	internal object failureMessageFormatArgument; // 0x50
	internal string failureArgumentName; // 0x58

	// Methods
	// RVA: 0x1F160 Offset: 0x1E560 VA: 0x18001F160
	internal void Init() { }
	// RVA: 0x16F10 Offset: 0x16310 VA: 0x180016F10
	internal void SetDate(int year, int month, int day) { }
	// RVA: 0x1F190 Offset: 0x1E590 VA: 0x18001F190
	internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument) { }
	// RVA: 0x1F1A0 Offset: 0x1E5A0 VA: 0x18001F1A0
	internal void SetFailure(ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName) { }
}

// Namespace: System
internal enum TokenType // TypeDefIndex: 164
{
	// Fields
	public int value__; // 0x0
	public const TokenType NumberToken = 1; // 0x0
	public const TokenType YearNumberToken = 2; // 0x0
	public const TokenType Am = 3; // 0x0
	public const TokenType Pm = 4; // 0x0
	public const TokenType MonthToken = 5; // 0x0
	public const TokenType EndOfString = 6; // 0x0
	public const TokenType DayOfWeekToken = 7; // 0x0
	public const TokenType TimeZoneToken = 8; // 0x0
	public const TokenType EraToken = 9; // 0x0
	public const TokenType DateWordToken = 10; // 0x0
	public const TokenType UnknownToken = 11; // 0x0
	public const TokenType HebrewNumber = 12; // 0x0
	public const TokenType JapaneseEraToken = 13; // 0x0
	public const TokenType TEraToken = 14; // 0x0
	public const TokenType IgnorableSymbol = 15; // 0x0
	public const TokenType SEP_Unk = 256; // 0x0
	public const TokenType SEP_End = 512; // 0x0
	public const TokenType SEP_Space = 768; // 0x0
	public const TokenType SEP_Am = 1024; // 0x0
	public const TokenType SEP_Pm = 1280; // 0x0
	public const TokenType SEP_Date = 1536; // 0x0
	public const TokenType SEP_Time = 1792; // 0x0
	public const TokenType SEP_YearSuff = 2048; // 0x0
	public const TokenType SEP_MonthSuff = 2304; // 0x0
	public const TokenType SEP_DaySuff = 2560; // 0x0
	public const TokenType SEP_HourSuff = 2816; // 0x0
	public const TokenType SEP_MinuteSuff = 3072; // 0x0
	public const TokenType SEP_SecondSuff = 3328; // 0x0
	public const TokenType SEP_LocalTimeMark = 3584; // 0x0
	public const TokenType SEP_DateOrOffset = 3840; // 0x0
	public const TokenType RegularTokenMask = 255; // 0x0
	public const TokenType SeparatorTokenMask = 65280; // 0x0
}

// Namespace: System
[Serializable]
public struct Guid : IFormattable, IComparable, IComparable<Guid>, IEquatable<Guid> // TypeDefIndex: 165
{
	// Fields
	public static readonly Guid Empty; // 0x0
	private int _a; // 0x0
	private short _b; // 0x4
	private short _c; // 0x6
	private byte _d; // 0x8
	private byte _e; // 0x9
	private byte _f; // 0xA
	private byte _g; // 0xB
	private byte _h; // 0xC
	private byte _i; // 0xD
	private byte _j; // 0xE
	private byte _k; // 0xF
	private static object _rngAccess; // 0x10
	private static RandomNumberGenerator _rng; // 0x18
	private static RandomNumberGenerator _fastRng; // 0x20

	// Methods
	// RVA: 0x129E40 Offset: 0x129240 VA: 0x180129E40
	public void .ctor(byte[] b) { }
	// RVA: 0x129E50 Offset: 0x129250 VA: 0x180129E50
	public void .ctor(string g) { }
	// RVA: 0x76C9C0 Offset: 0x76B1C0 VA: 0x18076C9C0
	private static bool TryParseGuid(string g, Guid.GuidStyles flags, ref Guid.GuidResult result) { }
	// RVA: 0x76CBF0 Offset: 0x76B3F0 VA: 0x18076CBF0
	private static bool TryParseGuidWithHexPrefix(string guidString, ref Guid.GuidResult result) { }
	// RVA: 0x76D3A0 Offset: 0x76BBA0 VA: 0x18076D3A0
	private static bool TryParseGuidWithNoStyle(string guidString, ref Guid.GuidResult result) { }
	// RVA: 0x76D7C0 Offset: 0x76BFC0 VA: 0x18076D7C0
	private static bool TryParseGuidWithDashes(string guidString, ref Guid.GuidResult result) { }
	// RVA: 0x76DDC0 Offset: 0x76C5C0 VA: 0x18076DDC0
	private static bool StringToShort(string str, int requiredLength, int flags, out short result, ref Guid.GuidResult parseResult) { }
	// RVA: 0x76DF30 Offset: 0x76C730 VA: 0x18076DF30
	private static bool StringToShort(string str, int* parsePos, int requiredLength, int flags, out short result, ref Guid.GuidResult parseResult) { }
	// RVA: 0x76E040 Offset: 0x76C840 VA: 0x18076E040
	private static bool StringToInt(string str, int requiredLength, int flags, out int result, ref Guid.GuidResult parseResult) { }
	// RVA: 0x76E120 Offset: 0x76C920 VA: 0x18076E120
	private static bool StringToInt(string str, ref int parsePos, int requiredLength, int flags, out int result, ref Guid.GuidResult parseResult) { }
	// RVA: 0x76E1F0 Offset: 0x76C9F0 VA: 0x18076E1F0
	private static bool StringToInt(string str, int* parsePos, int requiredLength, int flags, out int result, ref Guid.GuidResult parseResult) { }
	// RVA: 0x76E3B0 Offset: 0x76CBB0 VA: 0x18076E3B0
	private static bool StringToLong(string str, ref int parsePos, int flags, out long result, ref Guid.GuidResult parseResult) { }
	// RVA: 0x76E480 Offset: 0x76CC80 VA: 0x18076E480
	private static bool StringToLong(string str, int* parsePos, int flags, out long result, ref Guid.GuidResult parseResult) { }
	// RVA: 0x76E5E0 Offset: 0x76CDE0 VA: 0x18076E5E0
	private static string EatAllWhitespace(string str) { }
	// RVA: 0x76E730 Offset: 0x76CF30 VA: 0x18076E730
	private static bool IsHexPrefix(string str, int i) { }
	// RVA: 0x129E60 Offset: 0x129260 VA: 0x180129E60 Slot: 3
	public override string ToString() { }
	// RVA: 0x129E70 Offset: 0x129270 VA: 0x180129E70 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x129EA0 Offset: 0x1292A0 VA: 0x180129EA0 Slot: 0
	public override bool Equals(object o) { }
	// RVA: 0x12A060 Offset: 0x129460 VA: 0x18012A060 Slot: 7
	public bool Equals(Guid g) { }
	// RVA: 0x12A150 Offset: 0x129550 VA: 0x18012A150
	private int GetResult(uint me, uint them) { }
	// RVA: 0x12A170 Offset: 0x129570 VA: 0x18012A170 Slot: 5
	public int CompareTo(object value) { }
	// RVA: 0x12A180 Offset: 0x129580 VA: 0x18012A180 Slot: 6
	public int CompareTo(Guid value) { }
	// RVA: 0x76EDB0 Offset: 0x76D5B0 VA: 0x18076EDB0
	public static bool op_Equality(Guid a, Guid b) { }
	// RVA: 0x12A1A0 Offset: 0x1295A0 VA: 0x18012A1A0
	public string ToString(string format) { }
	// RVA: 0x76EF40 Offset: 0x76D740 VA: 0x18076EF40
	private static char HexToChar(int a) { }
	// RVA: 0x76EF60 Offset: 0x76D760 VA: 0x18076EF60
	private static int HexsToChars(char* guidChars, int offset, int a, int b) { }
	// RVA: 0x76F030 Offset: 0x76D830 VA: 0x18076F030
	private static int HexsToChars(char* guidChars, int offset, int a, int b, bool hex) { }
	// RVA: 0x12A1B0 Offset: 0x1295B0 VA: 0x18012A1B0 Slot: 4
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x76F7A0 Offset: 0x76DFA0 VA: 0x18076F7A0
	public static Guid NewGuid() { }
	// RVA: 0x76FBC0 Offset: 0x76E3C0 VA: 0x18076FBC0
	private static void .cctor() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
private enum Guid.GuidStyles // TypeDefIndex: 166
{
	// Fields
	public int value__; // 0x0
	public const Guid.GuidStyles None = 0; // 0x0
	public const Guid.GuidStyles AllowParenthesis = 1; // 0x0
	public const Guid.GuidStyles AllowBraces = 2; // 0x0
	public const Guid.GuidStyles AllowDashes = 4; // 0x0
	public const Guid.GuidStyles AllowHexPrefix = 8; // 0x0
	public const Guid.GuidStyles RequireParenthesis = 16; // 0x0
	public const Guid.GuidStyles RequireBraces = 32; // 0x0
	public const Guid.GuidStyles RequireDashes = 64; // 0x0
	public const Guid.GuidStyles RequireHexPrefix = 128; // 0x0
	public const Guid.GuidStyles HexFormat = 160; // 0x0
	public const Guid.GuidStyles NumberFormat = 0; // 0x0
	public const Guid.GuidStyles DigitFormat = 64; // 0x0
	public const Guid.GuidStyles BraceFormat = 96; // 0x0
	public const Guid.GuidStyles ParenthesisFormat = 80; // 0x0
	public const Guid.GuidStyles Any = 15; // 0x0
}

// Namespace: 
private enum Guid.GuidParseThrowStyle // TypeDefIndex: 167
{
	// Fields
	public int value__; // 0x0
	public const Guid.GuidParseThrowStyle None = 0; // 0x0
	public const Guid.GuidParseThrowStyle All = 1; // 0x0
	public const Guid.GuidParseThrowStyle AllButOverflow = 2; // 0x0
}

// Namespace: 
private enum Guid.ParseFailureKind // TypeDefIndex: 168
{
	// Fields
	public int value__; // 0x0
	public const Guid.ParseFailureKind None = 0; // 0x0
	public const Guid.ParseFailureKind ArgumentNull = 1; // 0x0
	public const Guid.ParseFailureKind Format = 2; // 0x0
	public const Guid.ParseFailureKind FormatWithParameter = 3; // 0x0
	public const Guid.ParseFailureKind NativeException = 4; // 0x0
	public const Guid.ParseFailureKind FormatWithInnerException = 5; // 0x0
}

// Namespace: 
private struct Guid.GuidResult // TypeDefIndex: 169
{
	// Fields
	internal Guid parsedGuid; // 0x0
	internal Guid.GuidParseThrowStyle throwStyle; // 0x10
	internal Guid.ParseFailureKind m_failure; // 0x14
	internal string m_failureMessageID; // 0x18
	internal object m_failureMessageFormatArgument; // 0x20
	internal string m_failureArgumentName; // 0x28
	internal Exception m_innerException; // 0x30

	// Methods
	// RVA: 0xB740 Offset: 0xAB40 VA: 0x18000B740
	internal void Init(Guid.GuidParseThrowStyle canThrow) { }
	// RVA: 0xB750 Offset: 0xAB50 VA: 0x18000B750
	internal void SetFailure(Exception nativeException) { }
	// RVA: 0xB760 Offset: 0xAB60 VA: 0x18000B760
	internal void SetFailure(Guid.ParseFailureKind failure, string failureMessageID) { }
	// RVA: 0xB790 Offset: 0xAB90 VA: 0x18000B790
	internal void SetFailure(Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument) { }
	// RVA: 0xB7B0 Offset: 0xABB0 VA: 0x18000B7B0
	internal void SetFailure(Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName, Exception innerException) { }
	// RVA: 0xB7C0 Offset: 0xABC0 VA: 0x18000B7C0
	internal Exception GetGuidParseException() { }
}

// Namespace: System
public interface IAsyncResult // TypeDefIndex: 170
{
	// Properties
	public abstract WaitHandle AsyncWaitHandle { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract WaitHandle get_AsyncWaitHandle() { }
}

// Namespace: System
public interface ICloneable // TypeDefIndex: 171
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract object Clone() { }
}

// Namespace: System
public interface IComparable // TypeDefIndex: 172
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(object obj) { }
}

// Namespace: System
public interface IComparable<T> // TypeDefIndex: 173
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(T other) { }
}

// Namespace: System
public interface IConvertible // TypeDefIndex: 174
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract TypeCode GetTypeCode() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool ToBoolean(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract char ToChar(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract sbyte ToSByte(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract byte ToByte(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract short ToInt16(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract ushort ToUInt16(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract int ToInt32(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract uint ToUInt32(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 9
	public abstract long ToInt64(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 10
	public abstract ulong ToUInt64(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 11
	public abstract float ToSingle(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 12
	public abstract double ToDouble(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 13
	public abstract Decimal ToDecimal(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 14
	public abstract DateTime ToDateTime(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 15
	public abstract string ToString(IFormatProvider provider) { }
	// RVA: -1 Offset: -1 Slot: 16
	public abstract object ToType(Type conversionType, IFormatProvider provider) { }
}

// Namespace: System
public interface ICustomFormatter // TypeDefIndex: 175
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract string Format(string format, object arg, IFormatProvider formatProvider) { }
}

// Namespace: System
public interface IDisposable // TypeDefIndex: 176
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Dispose() { }
}

// Namespace: System
public interface IEquatable<T> // TypeDefIndex: 177
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(T other) { }
}

// Namespace: System
public interface IFormatProvider // TypeDefIndex: 178
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract object GetFormat(Type formatType) { }
}

// Namespace: System
public interface IFormattable // TypeDefIndex: 179
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract string ToString(string format, IFormatProvider formatProvider) { }
}

// Namespace: System
[Serializable]
public sealed class IndexOutOfRangeException : SystemException // TypeDefIndex: 180
{
	// Methods
	// RVA: 0x7781B0 Offset: 0x7769B0 VA: 0x1807781B0
	public void .ctor() { }
	// RVA: 0x778240 Offset: 0x776A40 VA: 0x180778240
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public struct Int16 : IComparable, IFormattable, IConvertible, IComparable<short>, IEquatable<short> // TypeDefIndex: 181
{
	// Fields
	internal short m_value; // 0x0
	public const short MaxValue = 32767; // 0x0
	public const short MinValue = -32768; // 0x0

	// Methods
	// RVA: 0x12A260 Offset: 0x129660 VA: 0x18012A260 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0x12A370 Offset: 0x129770 VA: 0x18012A370 Slot: 23
	public int CompareTo(short value) { }
	// RVA: 0x12A380 Offset: 0x129780 VA: 0x18012A380 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0xA270 Offset: 0x9670 VA: 0x18000A270 Slot: 24
	public bool Equals(short obj) { }
	// RVA: 0x12A390 Offset: 0x129790 VA: 0x18012A390 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x12A3A0 Offset: 0x1297A0 VA: 0x18012A3A0 Slot: 3
	public override string ToString() { }
	// RVA: 0x12A3D0 Offset: 0x1297D0 VA: 0x18012A3D0 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x12A400 Offset: 0x129800 VA: 0x18012A400 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x12A4A0 Offset: 0x1298A0 VA: 0x18012A4A0
	private string ToString(string format, NumberFormatInfo info) { }
	// RVA: 0x778330 Offset: 0x776B30 VA: 0x180778330
	public static short Parse(string s, IFormatProvider provider) { }
	// RVA: 0x778360 Offset: 0x776B60 VA: 0x180778360
	public static short Parse(string s, NumberStyles style, IFormatProvider provider) { }
	// RVA: 0x7783B0 Offset: 0x776BB0 VA: 0x1807783B0
	private static short Parse(string s, NumberStyles style, NumberFormatInfo info) { }
	// RVA: 0x12A540 Offset: 0x129940 VA: 0x18012A540 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x12A550 Offset: 0x129950 VA: 0x18012A550 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x12A5E0 Offset: 0x1299E0 VA: 0x18012A5E0 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x12A710 Offset: 0x129B10 VA: 0x18012A710 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x12A850 Offset: 0x129C50 VA: 0x18012A850 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0xA3E0 Offset: 0x97E0 VA: 0x18000A3E0 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x12A990 Offset: 0x129D90 VA: 0x18012A990 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x12AAC0 Offset: 0x129EC0 VA: 0x18012AAC0 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x12AB50 Offset: 0x129F50 VA: 0x18012AB50 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x12AC80 Offset: 0x12A080 VA: 0x18012AC80 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x12AD10 Offset: 0x12A110 VA: 0x18012AD10 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x12AE40 Offset: 0x12A240 VA: 0x18012AE40 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x12AEE0 Offset: 0x12A2E0 VA: 0x18012AEE0 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x12AF80 Offset: 0x12A380 VA: 0x18012AF80 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x12B0D0 Offset: 0x12A4D0 VA: 0x18012B0D0 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x12B0E0 Offset: 0x12A4E0 VA: 0x18012B0E0 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[Serializable]
public struct Int32 : IComparable, IFormattable, IConvertible, IComparable<int>, IEquatable<int> // TypeDefIndex: 182
{
	// Fields
	internal int m_value; // 0x0
	public const int MaxValue = 2147483647; // 0x0
	public const int MinValue = -2147483648; // 0x0

	// Methods
	// RVA: 0x12B1B0 Offset: 0x12A5B0 VA: 0x18012B1B0 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0x12B2E0 Offset: 0x12A6E0 VA: 0x18012B2E0 Slot: 23
	public int CompareTo(int value) { }
	// RVA: 0x12B300 Offset: 0x12A700 VA: 0x18012B300 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x19DC0 Offset: 0x191C0 VA: 0x180019DC0 Slot: 24
	public bool Equals(int obj) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x12B310 Offset: 0x12A710 VA: 0x18012B310 Slot: 3
	public override string ToString() { }
	// RVA: 0x12B340 Offset: 0x12A740 VA: 0x18012B340
	public string ToString(string format) { }
	// RVA: 0x12B380 Offset: 0x12A780 VA: 0x18012B380 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x12B3B0 Offset: 0x12A7B0 VA: 0x18012B3B0 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x778780 Offset: 0x776F80 VA: 0x180778780
	public static int Parse(string s) { }
	// RVA: 0x7787B0 Offset: 0x776FB0 VA: 0x1807787B0
	public static int Parse(string s, IFormatProvider provider) { }
	// RVA: 0x7787E0 Offset: 0x776FE0 VA: 0x1807787E0
	public static int Parse(string s, NumberStyles style, IFormatProvider provider) { }
	// RVA: 0x778830 Offset: 0x777030 VA: 0x180778830
	public static bool TryParse(string s, out int result) { }
	// RVA: 0x12B3F0 Offset: 0x12A7F0 VA: 0x18012B3F0 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x12B400 Offset: 0x12A800 VA: 0x18012B400 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x12B490 Offset: 0x12A890 VA: 0x18012B490 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x12B5C0 Offset: 0x12A9C0 VA: 0x18012B5C0 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x12B660 Offset: 0x12AA60 VA: 0x18012B660 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x12B700 Offset: 0x12AB00 VA: 0x18012B700 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x12B7A0 Offset: 0x12ABA0 VA: 0x18012B7A0 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x12B840 Offset: 0x12AC40 VA: 0x18012B840 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x12B970 Offset: 0x12AD70 VA: 0x18012B970 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x12BA00 Offset: 0x12AE00 VA: 0x18012BA00 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x12BB30 Offset: 0x12AF30 VA: 0x18012BB30 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x12BBC0 Offset: 0x12AFC0 VA: 0x18012BBC0 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x12BC60 Offset: 0x12B060 VA: 0x18012BC60 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x12BDB0 Offset: 0x12B1B0 VA: 0x18012BDB0 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x12BDC0 Offset: 0x12B1C0 VA: 0x18012BDC0 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[Serializable]
public struct Int64 : IComparable, IFormattable, IConvertible, IComparable<long>, IEquatable<long> // TypeDefIndex: 183
{
	// Fields
	internal long m_value; // 0x0
	public const long MaxValue = 9223372036854775807; // 0x0
	public const long MinValue = -9223372036854775808; // 0x0

	// Methods
	// RVA: 0x12BE90 Offset: 0x12B290 VA: 0x18012BE90 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0x12BFC0 Offset: 0x12B3C0 VA: 0x18012BFC0 Slot: 23
	public int CompareTo(long value) { }
	// RVA: 0x12BFE0 Offset: 0x12B3E0 VA: 0x18012BFE0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x18E10 Offset: 0x18210 VA: 0x180018E10 Slot: 24
	public bool Equals(long obj) { }
	// RVA: 0x18E20 Offset: 0x18220 VA: 0x180018E20 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x21DB0 Offset: 0x211B0 VA: 0x180021DB0 Slot: 3
	public override string ToString() { }
	// RVA: 0x12BFF0 Offset: 0x12B3F0 VA: 0x18012BFF0 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x12C020 Offset: 0x12B420 VA: 0x18012C020 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x778A10 Offset: 0x777210 VA: 0x180778A10
	public static long Parse(string s) { }
	// RVA: 0x778A40 Offset: 0x777240 VA: 0x180778A40
	public static long Parse(string s, IFormatProvider provider) { }
	// RVA: 0x778A70 Offset: 0x777270 VA: 0x180778A70
	public static long Parse(string s, NumberStyles style, IFormatProvider provider) { }
	// RVA: 0x778AC0 Offset: 0x7772C0 VA: 0x180778AC0
	public static bool TryParse(string s, out long result) { }
	// RVA: 0x12C060 Offset: 0x12B460 VA: 0x18012C060 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x12C070 Offset: 0x12B470 VA: 0x18012C070 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x12C100 Offset: 0x12B500 VA: 0x18012C100 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x12C240 Offset: 0x12B640 VA: 0x18012C240 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x12C380 Offset: 0x12B780 VA: 0x18012C380 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x12C4C0 Offset: 0x12B8C0 VA: 0x18012C4C0 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x12C600 Offset: 0x12BA00 VA: 0x18012C600 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x12C740 Offset: 0x12BB40 VA: 0x18012C740 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x12C880 Offset: 0x12BC80 VA: 0x18012C880 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x1E50 Offset: 0x1250 VA: 0x180001E50 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x12C9C0 Offset: 0x12BDC0 VA: 0x18012C9C0 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x12CAF0 Offset: 0x12BEF0 VA: 0x18012CAF0 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x12CB90 Offset: 0x12BF90 VA: 0x18012CB90 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x12CC30 Offset: 0x12C030 VA: 0x18012CC30 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x12CD80 Offset: 0x12C180 VA: 0x18012CD80 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x12CD90 Offset: 0x12C190 VA: 0x18012CD90 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[Serializable]
public class InvalidCastException : SystemException // TypeDefIndex: 184
{
	// Methods
	// RVA: 0x3298F0 Offset: 0x3280F0 VA: 0x1803298F0
	public void .ctor() { }
	// RVA: 0x329980 Offset: 0x328180 VA: 0x180329980
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class InvalidOperationException : SystemException // TypeDefIndex: 185
{
	// Methods
	// RVA: 0x329A70 Offset: 0x328270 VA: 0x180329A70
	public void .ctor() { }
	// RVA: 0x329B00 Offset: 0x328300 VA: 0x180329B00
	public void .ctor(string message) { }
	// RVA: 0x329B20 Offset: 0x328320 VA: 0x180329B20
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public sealed class InvalidProgramException : SystemException // TypeDefIndex: 186
{
	// Methods
	// RVA: 0x329B40 Offset: 0x328340 VA: 0x180329B40
	public void .ctor() { }
	// RVA: 0x329BD0 Offset: 0x3283D0 VA: 0x180329BD0
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
[Serializable]
public class InvalidTimeZoneException : Exception // TypeDefIndex: 187
{
	// Methods
	// RVA: 0x329BF0 Offset: 0x3283F0 VA: 0x180329BF0
	public void .ctor(string message) { }
	// RVA: 0x329CA0 Offset: 0x3284A0 VA: 0x180329CA0
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x329D60 Offset: 0x328560 VA: 0x180329D60
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x329E20 Offset: 0x328620 VA: 0x180329E20
	public void .ctor() { }
}

// Namespace: System
public static class Math // TypeDefIndex: 188
{
	// Fields
	private static double doubleRoundLimit; // 0x0
	private const int maxRoundingDigits = 15; // 0x0
	private static double[] roundPower10Double; // 0x8
	public const double PI = 3.14159265358979; // 0x0
	public const double E = 2.71828182845905; // 0x0

	// Methods
	// RVA: 0x33A590 Offset: 0x338D90 VA: 0x18033A590
	public static double Acos(double d) { }
	// RVA: 0x33A5A0 Offset: 0x338DA0 VA: 0x18033A5A0
	public static double Atan(double d) { }
	// RVA: 0x33A5B0 Offset: 0x338DB0 VA: 0x18033A5B0
	public static double Atan2(double y, double x) { }
	// RVA: 0x33A5C0 Offset: 0x338DC0 VA: 0x18033A5C0
	public static double Ceiling(double a) { }
	// RVA: 0x33A5D0 Offset: 0x338DD0 VA: 0x18033A5D0
	public static double Cos(double d) { }
	// RVA: 0x33A5E0 Offset: 0x338DE0 VA: 0x18033A5E0
	public static double Floor(double d) { }
	// RVA: 0x33A5F0 Offset: 0x338DF0 VA: 0x18033A5F0
	public static double Sin(double a) { }
	// RVA: 0x33A600 Offset: 0x338E00 VA: 0x18033A600
	public static double Tan(double a) { }
	// RVA: 0x33A610 Offset: 0x338E10 VA: 0x18033A610
	public static double Round(double a) { }
	// RVA: 0x33A620 Offset: 0x338E20 VA: 0x18033A620
	public static double Sqrt(double d) { }
	// RVA: 0x33A630 Offset: 0x338E30 VA: 0x18033A630
	public static double Log(double d) { }
	// RVA: 0x33A640 Offset: 0x338E40 VA: 0x18033A640
	public static double Exp(double d) { }
	// RVA: 0x33A650 Offset: 0x338E50 VA: 0x18033A650
	public static double Pow(double x, double y) { }
	// RVA: 0x33A7C0 Offset: 0x338FC0 VA: 0x18033A7C0
	public static int Abs(int value) { }
	// RVA: 0x33A900 Offset: 0x339100 VA: 0x18033A900
	private static int AbsHelper(int value) { }
	// RVA: 0x33A9C0 Offset: 0x3391C0 VA: 0x18033A9C0
	public static float Abs(float value) { }
	// RVA: 0x33A9D0 Offset: 0x3391D0 VA: 0x18033A9D0
	public static double Abs(double value) { }
	// RVA: 0x33A9E0 Offset: 0x3391E0 VA: 0x18033A9E0
	public static int Max(int val1, int val2) { }
	// RVA: 0x33A9F0 Offset: 0x3391F0 VA: 0x18033A9F0
	public static long Max(long val1, long val2) { }
	// RVA: 0x33AA00 Offset: 0x339200 VA: 0x18033AA00
	public static float Max(float val1, float val2) { }
	// RVA: 0x33AA20 Offset: 0x339220 VA: 0x18033AA20
	public static double Max(double val1, double val2) { }
	// RVA: 0x33AB00 Offset: 0x339300 VA: 0x18033AB00
	public static int Min(int val1, int val2) { }
	// RVA: 0x33AB10 Offset: 0x339310 VA: 0x18033AB10
	public static long Min(long val1, long val2) { }
	// RVA: 0x33AB20 Offset: 0x339320 VA: 0x18033AB20
	public static float Min(float val1, float val2) { }
	// RVA: 0x33AB40 Offset: 0x339340 VA: 0x18033AB40
	public static double Min(double val1, double val2) { }
	// RVA: 0x33AC20 Offset: 0x339420 VA: 0x18033AC20
	public static double Log(double a, double newBase) { }
	// RVA: 0x33ADC0 Offset: 0x3395C0 VA: 0x18033ADC0
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public class MemberAccessException : SystemException // TypeDefIndex: 189
{
	// Methods
	// RVA: 0x33AE80 Offset: 0x339680 VA: 0x18033AE80
	public void .ctor() { }
	// RVA: 0x33AF10 Offset: 0x339710 VA: 0x18033AF10
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class MethodAccessException : MemberAccessException // TypeDefIndex: 190
{
	// Methods
	// RVA: 0x340BB0 Offset: 0x33F3B0 VA: 0x180340BB0
	public void .ctor() { }
	// RVA: 0x340C40 Offset: 0x33F440 VA: 0x180340C40
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class MissingFieldException : MissingMemberException, ISerializable // TypeDefIndex: 191
{
	// Properties
	public override string Message { get; }

	// Methods
	// RVA: 0x345800 Offset: 0x344000 VA: 0x180345800
	public void .ctor() { }
	// RVA: 0x345890 Offset: 0x344090 VA: 0x180345890
	public void .ctor(string message) { }
	// RVA: 0x3458B0 Offset: 0x3440B0 VA: 0x1803458B0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x3458D0 Offset: 0x3440D0 VA: 0x1803458D0 Slot: 5
	public override string get_Message() { }
	// RVA: 0x345A30 Offset: 0x344230 VA: 0x180345A30
	public void .ctor(string className, string fieldName) { }
}

// Namespace: System
[Serializable]
public class MissingMemberException : MemberAccessException, ISerializable // TypeDefIndex: 192
{
	// Fields
	protected string ClassName; // 0x88
	protected string MemberName; // 0x90
	protected byte[] Signature; // 0x98

	// Properties
	public override string Message { get; }

	// Methods
	// RVA: 0x345A70 Offset: 0x344270 VA: 0x180345A70
	public void .ctor() { }
	// RVA: 0x345B00 Offset: 0x344300 VA: 0x180345B00
	public void .ctor(string message) { }
	// RVA: 0x345B20 Offset: 0x344320 VA: 0x180345B20
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x345C80 Offset: 0x344480 VA: 0x180345C80 Slot: 5
	public override string get_Message() { }
	// RVA: 0x2644A0 Offset: 0x262CA0 VA: 0x1802644A0
	internal static string FormatSignature(byte[] signature) { }
	// RVA: 0x345DE0 Offset: 0x3445E0 VA: 0x180345DE0 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class MissingMethodException : MissingMemberException, ISerializable // TypeDefIndex: 193
{
	// Fields
	private string signature; // 0xA0

	// Properties
	public override string Message { get; }

	// Methods
	// RVA: 0x346200 Offset: 0x344A00 VA: 0x180346200
	public void .ctor() { }
	// RVA: 0x346290 Offset: 0x344A90 VA: 0x180346290
	public void .ctor(string message) { }
	// RVA: 0x3458B0 Offset: 0x3440B0 VA: 0x1803458B0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x3462B0 Offset: 0x344AB0 VA: 0x1803462B0 Slot: 5
	public override string get_Message() { }
	// RVA: 0x345A30 Offset: 0x344230 VA: 0x180345A30
	public void .ctor(string className, string methodName) { }
	// RVA: 0x3463E0 Offset: 0x344BE0 VA: 0x1803463E0
	private void .ctor(string className, string methodName, string signature, string message) { }
}

// Namespace: System
[Serializable]
public sealed class MulticastNotSupportedException : SystemException // TypeDefIndex: 194
{
	// Methods
	// RVA: 0x7457F0 Offset: 0x743FF0 VA: 0x1807457F0
	public void .ctor() { }
	// RVA: 0x745880 Offset: 0x744080 VA: 0x180745880
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xD9960 Offset: 0xD8D60 VA: 0x1800D9960
public sealed class NonSerializedAttribute : Attribute // TypeDefIndex: 195
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System
[Serializable]
public class NotImplementedException : SystemException // TypeDefIndex: 196
{
	// Methods
	// RVA: 0x7493B0 Offset: 0x747BB0 VA: 0x1807493B0
	public void .ctor() { }
	// RVA: 0x749440 Offset: 0x747C40 VA: 0x180749440
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class NotSupportedException : SystemException // TypeDefIndex: 197
{
	// Methods
	// RVA: 0x749460 Offset: 0x747C60 VA: 0x180749460
	public void .ctor() { }
	// RVA: 0x7494F0 Offset: 0x747CF0 VA: 0x1807494F0
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class NullReferenceException : SystemException // TypeDefIndex: 198
{
	// Methods
	// RVA: 0x7496B0 Offset: 0x747EB0 VA: 0x1807496B0
	public void .ctor() { }
	// RVA: 0x749740 Offset: 0x747F40 VA: 0x180749740
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
internal class Number // TypeDefIndex: 199
{
	// Methods
	// RVA: 0x749900 Offset: 0x748100 VA: 0x180749900
	public static bool NumberBufferToDecimal(byte* number, ref Decimal value) { }
	// RVA: 0x749910 Offset: 0x748110 VA: 0x180749910
	internal static bool NumberBufferToDouble(byte* number, ref double value) { }
	// RVA: 0x749970 Offset: 0x748170 VA: 0x180749970
	public static string FormatDecimal(Decimal value, string format, NumberFormatInfo info) { }
	// RVA: 0x749B00 Offset: 0x748300 VA: 0x180749B00
	public static string FormatDouble(double value, string format, NumberFormatInfo info) { }
	// RVA: 0x749BB0 Offset: 0x7483B0 VA: 0x180749BB0
	public static string FormatInt32(int value, string format, NumberFormatInfo info) { }
	// RVA: 0x749D90 Offset: 0x748590 VA: 0x180749D90
	public static string FormatUInt32(uint value, string format, NumberFormatInfo info) { }
	// RVA: 0x749F70 Offset: 0x748770 VA: 0x180749F70
	public static string FormatInt64(long value, string format, NumberFormatInfo info) { }
	// RVA: 0x74A150 Offset: 0x748950 VA: 0x18074A150
	public static string FormatUInt64(ulong value, string format, NumberFormatInfo info) { }
	// RVA: 0x74A320 Offset: 0x748B20 VA: 0x18074A320
	public static string FormatSingle(float value, string format, NumberFormatInfo info) { }
	// RVA: 0x74A3D0 Offset: 0x748BD0 VA: 0x18074A3D0
	private static bool HexNumberToInt32(ref Number.NumberBuffer number, ref int value) { }
	// RVA: 0x74A450 Offset: 0x748C50 VA: 0x18074A450
	private static bool HexNumberToInt64(ref Number.NumberBuffer number, ref long value) { }
	// RVA: 0x74A510 Offset: 0x748D10 VA: 0x18074A510
	private static bool HexNumberToUInt32(ref Number.NumberBuffer number, ref uint value) { }
	// RVA: 0x74A590 Offset: 0x748D90 VA: 0x18074A590
	private static bool HexNumberToUInt64(ref Number.NumberBuffer number, ref ulong value) { }
	// RVA: 0x74A620 Offset: 0x748E20 VA: 0x18074A620
	private static bool IsWhite(char ch) { }
	// RVA: 0x74A640 Offset: 0x748E40 VA: 0x18074A640
	private static bool NumberToInt32(ref Number.NumberBuffer number, ref int value) { }
	// RVA: 0x74A6A0 Offset: 0x748EA0 VA: 0x18074A6A0
	private static bool NumberToInt64(ref Number.NumberBuffer number, ref long value) { }
	// RVA: 0x74A720 Offset: 0x748F20 VA: 0x18074A720
	private static bool NumberToUInt32(ref Number.NumberBuffer number, ref uint value) { }
	// RVA: 0x74A780 Offset: 0x748F80 VA: 0x18074A780
	private static bool NumberToUInt64(ref Number.NumberBuffer number, ref ulong value) { }
	// RVA: 0x74A7F0 Offset: 0x748FF0 VA: 0x18074A7F0
	private static char* MatchChars(char* p, string str) { }
	// RVA: 0x74A840 Offset: 0x749040 VA: 0x18074A840
	private static char* MatchChars(char* p, char* str) { }
	// RVA: 0x74A880 Offset: 0x749080 VA: 0x18074A880
	internal static Decimal ParseDecimal(string value, NumberStyles options, NumberFormatInfo numfmt) { }
	// RVA: 0x74AA30 Offset: 0x749230 VA: 0x18074AA30
	internal static double ParseDouble(string value, NumberStyles options, NumberFormatInfo numfmt) { }
	// RVA: 0x74AD40 Offset: 0x749540 VA: 0x18074AD40
	internal static int ParseInt32(string s, NumberStyles style, NumberFormatInfo info) { }
	// RVA: 0x74AFD0 Offset: 0x7497D0 VA: 0x18074AFD0
	internal static long ParseInt64(string value, NumberStyles options, NumberFormatInfo numfmt) { }
	// RVA: 0x74B270 Offset: 0x749A70 VA: 0x18074B270
	private static bool ParseNumber(ref char* str, NumberStyles options, ref Number.NumberBuffer number, StringBuilder sb, NumberFormatInfo numfmt, bool parseDecimal) { }
	// RVA: 0x74BD20 Offset: 0x74A520 VA: 0x18074BD20
	internal static float ParseSingle(string value, NumberStyles options, NumberFormatInfo numfmt) { }
	// RVA: 0x74C090 Offset: 0x74A890 VA: 0x18074C090
	internal static uint ParseUInt32(string value, NumberStyles options, NumberFormatInfo numfmt) { }
	// RVA: 0x74C320 Offset: 0x74AB20 VA: 0x18074C320
	internal static ulong ParseUInt64(string value, NumberStyles options, NumberFormatInfo numfmt) { }
	// RVA: 0x74C5C0 Offset: 0x74ADC0 VA: 0x18074C5C0
	private static void StringToNumber(string str, NumberStyles options, ref Number.NumberBuffer number, NumberFormatInfo info, bool parseDecimal) { }
	// RVA: 0x74C750 Offset: 0x74AF50 VA: 0x18074C750
	private static bool TrailingZeros(string s, int index) { }
	// RVA: 0x74C7B0 Offset: 0x74AFB0 VA: 0x18074C7B0
	internal static bool TryParseInt32(string s, NumberStyles style, NumberFormatInfo info, out int result) { }
	// RVA: 0x74CA30 Offset: 0x74B230 VA: 0x18074CA30
	internal static bool TryParseInt64(string s, NumberStyles style, NumberFormatInfo info, out long result) { }
	// RVA: 0x74CC50 Offset: 0x74B450 VA: 0x18074CC50
	internal static bool TryParseSingle(string value, NumberStyles options, NumberFormatInfo numfmt, out float result) { }
	// RVA: 0x74CE70 Offset: 0x74B670 VA: 0x18074CE70
	internal static bool TryParseUInt32(string s, NumberStyles style, NumberFormatInfo info, out uint result) { }
	// RVA: 0x74D0F0 Offset: 0x74B8F0 VA: 0x18074D0F0
	internal static bool TryStringToNumber(string str, NumberStyles options, ref Number.NumberBuffer number, NumberFormatInfo numfmt, bool parseDecimal) { }
	// RVA: 0x74D1A0 Offset: 0x74B9A0 VA: 0x18074D1A0
	internal static bool TryStringToNumber(string str, NumberStyles options, ref Number.NumberBuffer number, StringBuilder sb, NumberFormatInfo numfmt, bool parseDecimal) { }
}

// Namespace: 
internal struct Number.NumberBuffer // TypeDefIndex: 200
{
	// Fields
	public static readonly int NumberBufferBytes; // 0x0
	private byte* baseAddress; // 0x0
	public char* digits; // 0x8
	public int precision; // 0x10
	public int scale; // 0x14
	public bool sign; // 0x18

	// Methods
	// RVA: 0xBAB0 Offset: 0xAEB0 VA: 0x18000BAB0
	public void .ctor(byte* stackBuffer) { }
	// RVA: 0xBAD0 Offset: 0xAED0 VA: 0x18000BAD0
	public byte* PackForNative() { }
	// RVA: 0x2729A0 Offset: 0x2711A0 VA: 0x1802729A0
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public class ObjectDisposedException : InvalidOperationException // TypeDefIndex: 201
{
	// Fields
	private string objectName; // 0x88

	// Properties
	public override string Message { get; }
	public string ObjectName { get; }

	// Methods
	// RVA: 0x756460 Offset: 0x754C60 VA: 0x180756460
	private void .ctor() { }
	// RVA: 0x7564F0 Offset: 0x754CF0 VA: 0x1807564F0
	public void .ctor(string objectName) { }
	// RVA: 0x756590 Offset: 0x754D90 VA: 0x180756590
	public void .ctor(string objectName, string message) { }
	// RVA: 0x7565D0 Offset: 0x754DD0 VA: 0x1807565D0 Slot: 5
	public override string get_Message() { }
	// RVA: 0x756720 Offset: 0x754F20 VA: 0x180756720
	public string get_ObjectName() { }
	// RVA: 0x7567D0 Offset: 0x754FD0 VA: 0x1807567D0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x7568A0 Offset: 0x7550A0 VA: 0x1807568A0 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xD9980 Offset: 0xD8D80 VA: 0x1800D9980
[Serializable]
public sealed class ObsoleteAttribute : Attribute // TypeDefIndex: 202
{
	// Fields
	private string _message; // 0x10
	private bool _error; // 0x18

	// Properties
	public string Message { get; }

	// Methods
	// RVA: 0x3110F0 Offset: 0x30F8F0 VA: 0x1803110F0
	public void .ctor() { }
	// RVA: 0x311100 Offset: 0x30F900 VA: 0x180311100
	public void .ctor(string message) { }
	// RVA: 0x311110 Offset: 0x30F910 VA: 0x180311110
	public void .ctor(string message, bool error) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public string get_Message() { }
}

// Namespace: System
[Serializable]
public class OperationCanceledException : SystemException // TypeDefIndex: 203
{
	// Fields
	private CancellationToken _cancellationToken; // 0x88

	// Methods
	// RVA: 0x311120 Offset: 0x30F920 VA: 0x180311120
	public void .ctor() { }
	// RVA: 0x3111B0 Offset: 0x30F9B0 VA: 0x1803111B0
	public void .ctor(string message) { }
	// RVA: 0x3111D0 Offset: 0x30F9D0 VA: 0x1803111D0
	public void .ctor(CancellationToken token) { }
	// RVA: 0x311200 Offset: 0x30FA00 VA: 0x180311200
	public void .ctor(string message, CancellationToken token) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class OutOfMemoryException : SystemException // TypeDefIndex: 204
{
	// Methods
	// RVA: 0x311910 Offset: 0x310110 VA: 0x180311910
	public void .ctor() { }
	// RVA: 0x3119C0 Offset: 0x3101C0 VA: 0x1803119C0
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class OverflowException : ArithmeticException // TypeDefIndex: 205
{
	// Methods
	// RVA: 0x3119E0 Offset: 0x3101E0 VA: 0x1803119E0
	public void .ctor() { }
	// RVA: 0x311A70 Offset: 0x310270 VA: 0x180311A70
	public void .ctor(string message) { }
	// RVA: 0x311A90 Offset: 0x310290 VA: 0x180311A90
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xD99A0 Offset: 0xD8DA0 VA: 0x1800D99A0
public sealed class ParamArrayAttribute : Attribute // TypeDefIndex: 206
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
internal struct ParamsArray // TypeDefIndex: 207
{
	// Fields
	private static readonly object[] oneArgArray; // 0x0
	private static readonly object[] twoArgArray; // 0x8
	private static readonly object[] threeArgArray; // 0x10
	private readonly object arg0; // 0x0
	private readonly object arg1; // 0x8
	private readonly object arg2; // 0x10
	private readonly object[] args; // 0x18

	// Properties
	public int Length { get; }
	public object Item { get; }

	// Methods
	// RVA: 0xFA10 Offset: 0xEE10 VA: 0x18000FA10
	public void .ctor(object arg0) { }
	// RVA: 0xFA20 Offset: 0xEE20 VA: 0x18000FA20
	public void .ctor(object arg0, object arg1) { }
	// RVA: 0xFA30 Offset: 0xEE30 VA: 0x18000FA30
	public void .ctor(object arg0, object arg1, object arg2) { }
	// RVA: 0xFA40 Offset: 0xEE40 VA: 0x18000FA40
	public void .ctor(object[] args) { }
	// RVA: 0xFAD0 Offset: 0xEED0 VA: 0x18000FAD0
	public int get_Length() { }
	// RVA: 0xFAF0 Offset: 0xEEF0 VA: 0x18000FAF0
	public object get_Item(int index) { }
	// RVA: 0xFB00 Offset: 0xEF00 VA: 0x18000FB00
	private object GetAtSlow(int index) { }
	// RVA: 0x3154F0 Offset: 0x313CF0 VA: 0x1803154F0
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public class PlatformNotSupportedException : NotSupportedException // TypeDefIndex: 208
{
	// Methods
	// RVA: 0x31BB00 Offset: 0x31A300 VA: 0x18031BB00
	public void .ctor() { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class Random // TypeDefIndex: 209
{
	// Fields
	private const int MBIG = 2147483647; // 0x0
	private const int MSEED = 161803398; // 0x0
	private const int MZ = 0; // 0x0
	private int inext; // 0x10
	private int inextp; // 0x14
	private int[] SeedArray; // 0x18

	// Methods
	// RVA: 0x31ED40 Offset: 0x31D540 VA: 0x18031ED40
	public void .ctor() { }
	// RVA: 0x31ED90 Offset: 0x31D590 VA: 0x18031ED90
	public void .ctor(int Seed) { }
	// RVA: 0x31F020 Offset: 0x31D820 VA: 0x18031F020 Slot: 4
	protected virtual double Sample() { }
	// RVA: 0x31F040 Offset: 0x31D840 VA: 0x18031F040
	private int InternalSample() { }
	// RVA: 0x31F0F0 Offset: 0x31D8F0 VA: 0x18031F0F0
	private double GetSampleForLargeRange() { }
	// RVA: 0x31F150 Offset: 0x31D950 VA: 0x18031F150 Slot: 5
	public virtual int Next(int minValue, int maxValue) { }
	// RVA: 0x31F320 Offset: 0x31DB20 VA: 0x18031F320 Slot: 6
	public virtual int Next(int maxValue) { }
	// RVA: 0x31F440 Offset: 0x31DC40 VA: 0x18031F440 Slot: 7
	public virtual double NextDouble() { }
}

// Namespace: System
[Serializable]
public class RankException : SystemException // TypeDefIndex: 210
{
	// Methods
	// RVA: 0x31FAE0 Offset: 0x31E2E0 VA: 0x18031FAE0
	public void .ctor() { }
	// RVA: 0x31FB70 Offset: 0x31E370 VA: 0x18031FB70
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
internal enum TypeNameFormatFlags // TypeDefIndex: 211
{
	// Fields
	public int value__; // 0x0
	public const TypeNameFormatFlags FormatBasic = 0; // 0x0
	public const TypeNameFormatFlags FormatNamespace = 1; // 0x0
	public const TypeNameFormatFlags FormatFullInst = 2; // 0x0
	public const TypeNameFormatFlags FormatAssembly = 4; // 0x0
	public const TypeNameFormatFlags FormatSignature = 8; // 0x0
	public const TypeNameFormatFlags FormatNoVersion = 16; // 0x0
	public const TypeNameFormatFlags FormatAngleBrackets = 64; // 0x0
	public const TypeNameFormatFlags FormatStubInfo = 128; // 0x0
	public const TypeNameFormatFlags FormatGenericParam = 256; // 0x0
	public const TypeNameFormatFlags FormatSerialization = 259; // 0x0
}

// Namespace: System
internal enum TypeNameKind // TypeDefIndex: 212
{
	// Fields
	public int value__; // 0x0
	public const TypeNameKind Name = 0; // 0x0
	public const TypeNameKind ToString = 1; // 0x0
	public const TypeNameKind SerializationName = 2; // 0x0
	public const TypeNameKind FullName = 3; // 0x0
}

// Namespace: System
[Serializable]
internal class RuntimeType : TypeInfo, ISerializable, ICloneable // TypeDefIndex: 213
{
	// Fields
	internal static readonly RuntimeType ValueType; // 0x0
	internal static readonly RuntimeType EnumType; // 0x8
	private static readonly RuntimeType ObjectType; // 0x10
	private static readonly RuntimeType StringType; // 0x18
	private static readonly RuntimeType DelegateType; // 0x20
	private static Type[] s_SICtorParamTypes; // 0x28
	private const BindingFlags MemberBindingMask = 255; // 0x0
	private const BindingFlags InvocationMask = 65280; // 0x0
	private const BindingFlags BinderNonCreateInstance = 15616; // 0x0
	private const BindingFlags BinderGetSetProperty = 12288; // 0x0
	private const BindingFlags BinderSetInvokeProperty = 8448; // 0x0
	private const BindingFlags BinderGetSetField = 3072; // 0x0
	private const BindingFlags BinderSetInvokeField = 2304; // 0x0
	private const BindingFlags BinderNonFieldGetSet = 16773888; // 0x0
	private const BindingFlags ClassicBindingMask = 61696; // 0x0
	private static RuntimeType s_typedRef; // 0x30
	private MonoTypeInfo type_info; // 0x18
	internal object GenericCache; // 0x20
	private RuntimeConstructorInfo m_serializationCtor; // 0x28

	// Properties
	public override Module Module { get; }
	public override Assembly Assembly { get; }
	public override RuntimeTypeHandle TypeHandle { get; }
	public override Type BaseType { get; }
	public override Type UnderlyingSystemType { get; }
	public override bool IsEnum { get; }
	public override GenericParameterAttributes GenericParameterAttributes { get; }
	internal override bool IsSzArray { get; }
	public override bool IsGenericTypeDefinition { get; }
	public override bool IsGenericParameter { get; }
	public override int GenericParameterPosition { get; }
	public override bool IsGenericType { get; }
	public override MemberTypes MemberType { get; }
	public override Type ReflectedType { get; }
	public override int MetadataToken { get; }
	public override bool ContainsGenericParameters { get; }
	public override MethodBase DeclaringMethod { get; }
	public override string AssemblyQualifiedName { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override string Namespace { get; }
	public override string FullName { get; }

	// Methods
	// RVA: 0x374490 Offset: 0x372C90 VA: 0x180374490
	private static void ThrowIfTypeNeverValidGenericArgument(RuntimeType type) { }
	// RVA: 0x374610 Offset: 0x372E10 VA: 0x180374610
	internal static void SanityCheckGenericArguments(RuntimeType[] genericArguments, RuntimeType[] genericParamters) { }
	// RVA: 0x374890 Offset: 0x373090 VA: 0x180374890
	private static void SplitName(string fullname, out string name, out string ns) { }
	// RVA: 0x374BA0 Offset: 0x3733A0 VA: 0x180374BA0
	private static void FilterHelper(BindingFlags bindingFlags, ref string name, bool allowPrefixLookup, out bool prefixLookup, out bool ignoreCase, out RuntimeType.MemberListType listType) { }
	// RVA: 0x374DD0 Offset: 0x3735D0 VA: 0x180374DD0
	private static void FilterHelper(BindingFlags bindingFlags, ref string name, out bool ignoreCase, out RuntimeType.MemberListType listType) { }
	// RVA: 0x374F40 Offset: 0x373740 VA: 0x180374F40
	private static bool FilterApplyPrefixLookup(MemberInfo memberInfo, string name, bool ignoreCase) { }
	// RVA: 0x375160 Offset: 0x373960 VA: 0x180375160
	private static bool FilterApplyBase(MemberInfo memberInfo, BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, string name, bool prefixLookup) { }
	// RVA: 0x375420 Offset: 0x373C20 VA: 0x180375420
	private static bool FilterApplyType(Type type, BindingFlags bindingFlags, string name, bool prefixLookup, string ns) { }
	// RVA: 0x3755B0 Offset: 0x373DB0 VA: 0x1803755B0
	private static bool FilterApplyMethodInfo(RuntimeMethodInfo method, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes) { }
	// RVA: 0x375680 Offset: 0x373E80 VA: 0x180375680
	private static bool FilterApplyConstructorInfo(RuntimeConstructorInfo constructor, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes) { }
	// RVA: 0x375760 Offset: 0x373F60 VA: 0x180375760
	private static bool FilterApplyMethodBase(MethodBase methodBase, BindingFlags methodFlags, BindingFlags bindingFlags, CallingConventions callConv, Type[] argumentTypes) { }
	// RVA: 0x375A20 Offset: 0x374220 VA: 0x180375A20
	internal void .ctor() { }
	// RVA: 0x375A80 Offset: 0x374280 VA: 0x180375A80
	internal bool IsSpecialSerializableType() { }
	// RVA: 0x375BA0 Offset: 0x3743A0 VA: 0x180375BA0
	private RuntimeType.ListBuilder<MethodInfo> GetMethodCandidates(string name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, bool allowPrefixLookup) { }
	// RVA: 0x375DF0 Offset: 0x3745F0 VA: 0x180375DF0
	private RuntimeType.ListBuilder<ConstructorInfo> GetConstructorCandidates(string name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, bool allowPrefixLookup) { }
	// RVA: 0x376190 Offset: 0x374990 VA: 0x180376190
	private RuntimeType.ListBuilder<PropertyInfo> GetPropertyCandidates(string name, BindingFlags bindingAttr, Type[] types, bool allowPrefixLookup) { }
	// RVA: 0x3763B0 Offset: 0x374BB0 VA: 0x1803763B0
	private RuntimeType.ListBuilder<EventInfo> GetEventCandidates(string name, BindingFlags bindingAttr, bool allowPrefixLookup) { }
	// RVA: 0x376580 Offset: 0x374D80 VA: 0x180376580
	private RuntimeType.ListBuilder<FieldInfo> GetFieldCandidates(string name, BindingFlags bindingAttr, bool allowPrefixLookup) { }
	// RVA: 0x376750 Offset: 0x374F50 VA: 0x180376750
	private RuntimeType.ListBuilder<Type> GetNestedTypeCandidates(string fullname, BindingFlags bindingAttr, bool allowPrefixLookup) { }
	// RVA: 0x376AB0 Offset: 0x3752B0 VA: 0x180376AB0 Slot: 40
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr) { }
	// RVA: 0x376B80 Offset: 0x375380 VA: 0x180376B80 Slot: 33
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }
	// RVA: 0x376C50 Offset: 0x375450 VA: 0x180376C50 Slot: 43
	public override FieldInfo[] GetFields(BindingFlags bindingAttr) { }
	// RVA: 0x376D10 Offset: 0x375510 VA: 0x180376D10 Slot: 38
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: 0x377020 Offset: 0x375820 VA: 0x180377020 Slot: 32
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: 0x377270 Offset: 0x375A70 VA: 0x180377270 Slot: 48
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: 0x377520 Offset: 0x375D20 VA: 0x180377520 Slot: 45
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr) { }
	// RVA: 0x3776D0 Offset: 0x375ED0 VA: 0x1803776D0 Slot: 41
	public override FieldInfo GetField(string name, BindingFlags bindingAttr) { }
	// RVA: 0x377A20 Offset: 0x376220 VA: 0x180377A20 Slot: 49
	public override Type GetNestedType(string fullname, BindingFlags bindingAttr) { }
	// RVA: 0x377D60 Offset: 0x376560 VA: 0x180377D60 Slot: 52
	public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr) { }
	// RVA: 0x3783D0 Offset: 0x376BD0 VA: 0x1803783D0 Slot: 14
	public override Module get_Module() { }
	// RVA: 0x3783D0 Offset: 0x376BD0 VA: 0x1803783D0
	internal RuntimeModule GetRuntimeModule() { }
	// RVA: 0x3783F0 Offset: 0x376BF0 VA: 0x1803783F0 Slot: 22
	public override Assembly get_Assembly() { }
	// RVA: 0x3783F0 Offset: 0x376BF0 VA: 0x1803783F0
	internal RuntimeAssembly GetRuntimeAssembly() { }
	// RVA: 0x378410 Offset: 0x376C10 VA: 0x180378410 Slot: 23
	public override RuntimeTypeHandle get_TypeHandle() { }
	// RVA: 0x378430 Offset: 0x376C30 VA: 0x180378430 Slot: 103
	public override bool IsInstanceOfType(object o) { }
	// RVA: 0x378460 Offset: 0x376C60 VA: 0x180378460 Slot: 102
	public override bool IsSubclassOf(Type type) { }
	// RVA: 0x378630 Offset: 0x376E30 VA: 0x180378630 Slot: 104
	public override bool IsAssignableFrom(Type c) { }
	// RVA: 0x378790 Offset: 0x376F90 VA: 0x180378790 Slot: 105
	public override bool IsEquivalentTo(Type other) { }
	// RVA: 0x378880 Offset: 0x377080 VA: 0x180378880 Slot: 28
	public override Type get_BaseType() { }
	// RVA: 0x378890 Offset: 0x377090 VA: 0x180378890
	private RuntimeType GetBaseType() { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630 Slot: 101
	public override Type get_UnderlyingSystemType() { }
	// RVA: 0x378BE0 Offset: 0x3773E0 VA: 0x180378BE0 Slot: 83
	protected override TypeAttributes GetAttributeFlagsImpl() { }
	// RVA: 0x378C10 Offset: 0x377410 VA: 0x180378C10 Slot: 90
	protected override bool IsContextfulImpl() { }
	// RVA: 0x378CE0 Offset: 0x3774E0 VA: 0x180378CE0 Slot: 85
	protected override bool IsByRefImpl() { }
	// RVA: 0x378CF0 Offset: 0x3774F0 VA: 0x180378CF0 Slot: 87
	protected override bool IsPrimitiveImpl() { }
	// RVA: 0x378D20 Offset: 0x377520 VA: 0x180378D20 Slot: 86
	protected override bool IsPointerImpl() { }
	// RVA: 0x378D30 Offset: 0x377530 VA: 0x180378D30 Slot: 88
	protected override bool IsCOMObjectImpl() { }
	// RVA: 0x378D40 Offset: 0x377540 VA: 0x180378D40 Slot: 82
	protected override bool IsValueTypeImpl() { }
	// RVA: 0x378E70 Offset: 0x377670 VA: 0x180378E70 Slot: 65
	public override bool get_IsEnum() { }
	// RVA: 0x378F20 Offset: 0x377720 VA: 0x180378F20 Slot: 95
	protected override bool HasElementTypeImpl() { }
	// RVA: 0x378F80 Offset: 0x377780 VA: 0x180378F80 Slot: 54
	public override GenericParameterAttributes get_GenericParameterAttributes() { }
	// RVA: 0x379060 Offset: 0x377860 VA: 0x180379060 Slot: 68
	internal override bool get_IsSzArray() { }
	// RVA: 0x3790C0 Offset: 0x3778C0 VA: 0x1803790C0 Slot: 84
	protected override bool IsArrayImpl() { }
	// RVA: 0x3790F0 Offset: 0x3778F0 VA: 0x1803790F0 Slot: 27
	public override int GetArrayRank() { }
	// RVA: 0x3791D0 Offset: 0x3779D0 VA: 0x1803791D0 Slot: 92
	public override Type GetElementType() { }
	// RVA: 0x379240 Offset: 0x377A40 VA: 0x180379240 Slot: 96
	public override string[] GetEnumNames() { }
	// RVA: 0x379370 Offset: 0x377B70 VA: 0x180379370 Slot: 97
	public override Array GetEnumValues() { }
	// RVA: 0x379560 Offset: 0x377D60 VA: 0x180379560 Slot: 98
	public override Type GetEnumUnderlyingType() { }
	// RVA: 0x379690 Offset: 0x377E90 VA: 0x180379690 Slot: 99
	public override bool IsEnumDefined(object value) { }
	// RVA: 0x379C40 Offset: 0x378440 VA: 0x180379C40 Slot: 100
	public override string GetEnumName(object value) { }
	// RVA: 0x379E50 Offset: 0x378650 VA: 0x180379E50
	internal RuntimeType[] GetGenericArgumentsInternal() { }
	// RVA: 0x379F10 Offset: 0x378710 VA: 0x180379F10 Slot: 93
	public override Type[] GetGenericArguments() { }
	// RVA: 0x379FC0 Offset: 0x3787C0 VA: 0x180379FC0 Slot: 89
	public override Type MakeGenericType(Type[] instantiation) { }
	// RVA: 0x37A510 Offset: 0x378D10 VA: 0x18037A510 Slot: 70
	public override bool get_IsGenericTypeDefinition() { }
	// RVA: 0x37A540 Offset: 0x378D40 VA: 0x18037A540 Slot: 71
	public override bool get_IsGenericParameter() { }
	// RVA: 0x37A560 Offset: 0x378D60 VA: 0x18037A560 Slot: 72
	public override int get_GenericParameterPosition() { }
	// RVA: 0x37A680 Offset: 0x378E80 VA: 0x18037A680 Slot: 94
	public override Type GetGenericTypeDefinition() { }
	// RVA: 0x37A790 Offset: 0x378F90 VA: 0x18037A790 Slot: 69
	public override bool get_IsGenericType() { }
	[DebuggerStepThroughAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x37A7D0 Offset: 0x378FD0 VA: 0x18037A7D0 Slot: 21
	public override object InvokeMember(string name, BindingFlags bindingFlags, Binder binder, object target, object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParams) { }
	// RVA: 0x264330 Offset: 0x262B30 VA: 0x180264330 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x33BBF0 Offset: 0x33A3F0 VA: 0x18033BBF0
	public static bool op_Equality(RuntimeType left, RuntimeType right) { }
	// RVA: 0x37BD50 Offset: 0x37A550 VA: 0x18037BD50
	public static bool op_Inequality(RuntimeType left, RuntimeType right) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630 Slot: 110
	public object Clone() { }
	// RVA: 0x37BD60 Offset: 0x37A560 VA: 0x18037BD60 Slot: 109
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x37BE20 Offset: 0x37A620 VA: 0x18037BE20 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }
	// RVA: 0x37BF10 Offset: 0x37A710 VA: 0x18037BF10 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x37C0C0 Offset: 0x37A8C0 VA: 0x18037C0C0 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x37C270 Offset: 0x37AA70 VA: 0x18037C270 Slot: 106
	internal override string FormatTypeName(bool serialization) { }
	// RVA: 0x37C560 Offset: 0x37AD60 VA: 0x18037C560 Slot: 6
	public override MemberTypes get_MemberType() { }
	// RVA: 0x37C5B0 Offset: 0x37ADB0 VA: 0x18037C5B0 Slot: 9
	public override Type get_ReflectedType() { }
	// RVA: 0x37C5D0 Offset: 0x37ADD0 VA: 0x18037C5D0 Slot: 13
	public override int get_MetadataToken() { }
	// RVA: 0x37C600 Offset: 0x37AE00 VA: 0x18037C600
	private void CreateInstanceCheckThis() { }
	// RVA: 0x37C8C0 Offset: 0x37B0C0 VA: 0x18037C8C0
	internal object CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, ref StackCrawlMark stackMark) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	[DebuggerStepThroughAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x37D0E0 Offset: 0x37B8E0 VA: 0x18037D0E0
	internal object CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, ref StackCrawlMark stackMark) { }
	// RVA: 0x37D220 Offset: 0x37BA20 VA: 0x18037D220
	internal MonoCMethod GetDefaultConstructor() { }
	// RVA: 0x37D400 Offset: 0x37BC00 VA: 0x18037D400
	private string GetDefaultMemberName() { }
	// RVA: 0x37D530 Offset: 0x37BD30 VA: 0x18037D530
	internal RuntimeConstructorInfo GetSerializationCtor() { }
	// RVA: 0x37D840 Offset: 0x37C040 VA: 0x18037D840
	internal object CreateInstanceSlow(bool publicOnly, bool skipCheckThis, bool fillCache, ref StackCrawlMark stackMark) { }
	// RVA: 0x37D880 Offset: 0x37C080 VA: 0x18037D880
	private object CreateInstanceMono(bool nonPublic) { }
	// RVA: 0x37DC10 Offset: 0x37C410 VA: 0x18037DC10
	internal object CheckValue(object value, Binder binder, CultureInfo culture, BindingFlags invokeAttr) { }
	// RVA: 0x37DE50 Offset: 0x37C650 VA: 0x18037DE50
	private object TryConvertToType(object value, ref bool failed) { }
	// RVA: 0x37E120 Offset: 0x37C920 VA: 0x18037E120
	private static object IsConvertibleToPrimitiveType(object value, Type targetType) { }
	// RVA: 0x37ECC0 Offset: 0x37D4C0 VA: 0x18037ECC0
	private string GetCachedName(TypeNameKind kind) { }
	// RVA: 0x37ED80 Offset: 0x37D580 VA: 0x18037ED80
	private Type make_array_type(int rank) { }
	// RVA: 0x37EDE0 Offset: 0x37D5E0 VA: 0x18037EDE0 Slot: 18
	public override Type MakeArrayType() { }
	// RVA: 0x37EE30 Offset: 0x37D630 VA: 0x18037EE30 Slot: 19
	public override Type MakeArrayType(int rank) { }
	// RVA: 0x37EEF0 Offset: 0x37D6F0 VA: 0x18037EEF0
	private Type make_byref_type() { }
	// RVA: 0x37EF10 Offset: 0x37D710 VA: 0x18037EF10 Slot: 17
	public override Type MakeByRefType() { }
	// RVA: 0x37EFE0 Offset: 0x37D7E0 VA: 0x18037EFE0
	private static Type MakePointerType(Type type) { }
	// RVA: 0x37F010 Offset: 0x37D810 VA: 0x18037F010 Slot: 16
	public override Type MakePointerType() { }
	// RVA: 0x37F0B0 Offset: 0x37D8B0 VA: 0x18037F0B0 Slot: 73
	public override bool get_ContainsGenericParameters() { }
	// RVA: 0x37F1E0 Offset: 0x37D9E0 VA: 0x18037F1E0 Slot: 74
	public override Type[] GetGenericParameterConstraints() { }
	// RVA: 0x37F300 Offset: 0x37DB00 VA: 0x18037F300
	internal static object CreateInstanceForAnotherGenericParameter(Type genericType, RuntimeType genericArgument) { }
	// RVA: 0x37F4C0 Offset: 0x37DCC0 VA: 0x18037F4C0
	private static Type MakeGenericType(Type gt, Type[] types) { }
	// RVA: 0x37F4D0 Offset: 0x37DCD0 VA: 0x18037F4D0
	internal IntPtr GetMethodsByName_native(IntPtr namePtr, BindingFlags bindingAttr, bool ignoreCase) { }
	// RVA: 0x37F4E0 Offset: 0x37DCE0 VA: 0x18037F4E0
	internal RuntimeMethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, RuntimeType reflectedType) { }
	// RVA: 0x37F8D0 Offset: 0x37E0D0 VA: 0x18037F8D0
	private IntPtr GetPropertiesByName_native(IntPtr name, BindingFlags bindingAttr, bool icase) { }
	// RVA: 0x37F8E0 Offset: 0x37E0E0 VA: 0x18037F8E0
	private IntPtr GetConstructors_native(BindingFlags bindingAttr) { }
	// RVA: 0x37F8F0 Offset: 0x37E0F0 VA: 0x18037F8F0
	private RuntimeConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, RuntimeType reflectedType) { }
	// RVA: 0x37FBB0 Offset: 0x37E3B0 VA: 0x18037FBB0
	private RuntimePropertyInfo[] GetPropertiesByName(string name, BindingFlags bindingAttr, bool icase, RuntimeType reflectedType) { }
	// RVA: 0x380070 Offset: 0x37E870 VA: 0x180380070 Slot: 20
	protected override TypeCode GetTypeCodeImpl() { }
	// RVA: 0x380100 Offset: 0x37E900 VA: 0x180380100
	private static TypeCode GetTypeCodeImplInternal(Type type) { }
	// RVA: 0x380110 Offset: 0x37E910 VA: 0x180380110 Slot: 3
	public override string ToString() { }
	// RVA: 0x380120 Offset: 0x37E920 VA: 0x180380120
	private static object CreateInstanceInternal(Type type) { }
	// RVA: 0x2644A0 Offset: 0x262CA0 VA: 0x1802644A0 Slot: 15
	public override MethodBase get_DeclaringMethod() { }
	// RVA: 0x380170 Offset: 0x37E970 VA: 0x180380170
	internal string getFullName(bool full_name, bool assembly_qualified) { }
	// RVA: 0x380180 Offset: 0x37E980 VA: 0x180380180
	private Type[] GetGenericArgumentsInternal(bool runtimeArray) { }
	// RVA: 0x380190 Offset: 0x37E990 VA: 0x180380190
	private GenericParameterAttributes GetGenericParameterAttributes() { }
	// RVA: 0x3801B0 Offset: 0x37E9B0 VA: 0x1803801B0
	private int GetGenericParameterPosition() { }
	// RVA: 0x380200 Offset: 0x37EA00 VA: 0x180380200
	private IntPtr GetEvents_native(IntPtr name, BindingFlags bindingAttr) { }
	// RVA: 0x380210 Offset: 0x37EA10 VA: 0x180380210
	private IntPtr GetFields_native(IntPtr name, BindingFlags bindingAttr) { }
	// RVA: 0x380220 Offset: 0x37EA20 VA: 0x180380220
	private RuntimeFieldInfo[] GetFields_internal(string name, BindingFlags bindingAttr, RuntimeType reflectedType) { }
	// RVA: 0x3806E0 Offset: 0x37EEE0 VA: 0x1803806E0
	private RuntimeEventInfo[] GetEvents_internal(string name, BindingFlags bindingAttr, RuntimeType reflectedType) { }
	// RVA: 0x380B90 Offset: 0x37F390 VA: 0x180380B90 Slot: 44
	public override Type[] GetInterfaces() { }
	// RVA: 0x380BA0 Offset: 0x37F3A0 VA: 0x180380BA0
	private IntPtr GetNestedTypes_native(IntPtr name, BindingFlags bindingAttr) { }
	// RVA: 0x380BB0 Offset: 0x37F3B0 VA: 0x180380BB0
	private RuntimeType[] GetNestedTypes_internal(string displayName, BindingFlags bindingAttr) { }
	// RVA: 0x380FB0 Offset: 0x37F7B0 VA: 0x180380FB0 Slot: 26
	public override string get_AssemblyQualifiedName() { }
	// RVA: 0x380FC0 Offset: 0x37F7C0 VA: 0x180380FC0 Slot: 8
	public override Type get_DeclaringType() { }
	// RVA: 0x380FD0 Offset: 0x37F7D0 VA: 0x180380FD0 Slot: 7
	public override string get_Name() { }
	// RVA: 0x3810A0 Offset: 0x37F8A0 VA: 0x1803810A0 Slot: 25
	public override string get_Namespace() { }
	// RVA: 0x381100 Offset: 0x37F900 VA: 0x180381100 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x3811F0 Offset: 0x37F9F0 VA: 0x1803811F0 Slot: 24
	public override string get_FullName() { }
	// RVA: 0x381300 Offset: 0x37FB00 VA: 0x180381300
	private static void .cctor() { }
}

// Namespace: 
internal enum RuntimeType.MemberListType // TypeDefIndex: 214
{
	// Fields
	public int value__; // 0x0
	public const RuntimeType.MemberListType All = 0; // 0x0
	public const RuntimeType.MemberListType CaseSensitive = 1; // 0x0
	public const RuntimeType.MemberListType CaseInsensitive = 2; // 0x0
	public const RuntimeType.MemberListType HandleToInfo = 3; // 0x0
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
private struct RuntimeType.ListBuilder<T> // TypeDefIndex: 215
{
	// Fields
	private T[] _items; // 0x0
	private T _item; // 0x0
	private int _count; // 0x0
	private int _capacity; // 0x0

	// Properties
	public T Item { get; }

	// Methods
	// RVA: 0x12D940 Offset: 0x12CD40 VA: 0x18012D940
	public void .ctor(int capacity) { }
	// RVA: 0x12D960 Offset: 0x12CD60 VA: 0x18012D960
	public T get_Item(int index) { }
	// RVA: 0x12D9A0 Offset: 0x12CDA0 VA: 0x18012D9A0
	public T[] ToArray() { }
	// RVA: 0x12D9B0 Offset: 0x12CDB0 VA: 0x18012D9B0
	public void CopyTo(object[] array, int index) { }
	// RVA: 0x12D9C0 Offset: 0x12CDC0 VA: 0x18012D9C0
	public void Add(T item) { }
}

// Namespace: System
[Serializable]
internal class ReflectionOnlyType : RuntimeType // TypeDefIndex: 216
{
	// Properties
	public override RuntimeTypeHandle TypeHandle { get; }

	// Methods
	// RVA: 0x321F50 Offset: 0x320750 VA: 0x180321F50
	private void .ctor() { }
	// RVA: 0x321FA0 Offset: 0x3207A0 VA: 0x180321FA0 Slot: 23
	public override RuntimeTypeHandle get_TypeHandle() { }
}

// Namespace: System
[Serializable]
public struct SByte : IComparable, IFormattable, IConvertible, IComparable<sbyte>, IEquatable<sbyte> // TypeDefIndex: 217
{
	// Fields
	private sbyte m_value; // 0x0
	public const sbyte MaxValue = 127; // 0x0
	public const sbyte MinValue = -128; // 0x0

	// Methods
	// RVA: 0x11AB0 Offset: 0x10EB0 VA: 0x180011AB0 Slot: 4
	public int CompareTo(object obj) { }
	// RVA: 0x11BC0 Offset: 0x10FC0 VA: 0x180011BC0 Slot: 23
	public int CompareTo(sbyte value) { }
	// RVA: 0x11BD0 Offset: 0x10FD0 VA: 0x180011BD0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x9400 Offset: 0x8800 VA: 0x180009400 Slot: 24
	public bool Equals(sbyte obj) { }
	// RVA: 0x11BE0 Offset: 0x10FE0 VA: 0x180011BE0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x11BF0 Offset: 0x10FF0 VA: 0x180011BF0 Slot: 3
	public override string ToString() { }
	// RVA: 0x11C20 Offset: 0x11020 VA: 0x180011C20 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x11C50 Offset: 0x11050 VA: 0x180011C50 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x11CF0 Offset: 0x110F0 VA: 0x180011CF0
	private string ToString(string format, NumberFormatInfo info) { }
	// RVA: 0x382220 Offset: 0x380A20 VA: 0x180382220
	public static sbyte Parse(string s, IFormatProvider provider) { }
	// RVA: 0x382250 Offset: 0x380A50 VA: 0x180382250
	public static sbyte Parse(string s, NumberStyles style, IFormatProvider provider) { }
	// RVA: 0x3822A0 Offset: 0x380AA0 VA: 0x1803822A0
	private static sbyte Parse(string s, NumberStyles style, NumberFormatInfo info) { }
	// RVA: 0x11D90 Offset: 0x11190 VA: 0x180011D90 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x11DA0 Offset: 0x111A0 VA: 0x180011DA0 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x11E30 Offset: 0x11230 VA: 0x180011E30 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x9410 Offset: 0x8810 VA: 0x180009410 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x11F60 Offset: 0x11360 VA: 0x180011F60 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x12090 Offset: 0x11490 VA: 0x180012090 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x12120 Offset: 0x11520 VA: 0x180012120 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x12250 Offset: 0x11650 VA: 0x180012250 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x12260 Offset: 0x11660 VA: 0x180012260 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x12390 Offset: 0x11790 VA: 0x180012390 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x12420 Offset: 0x11820 VA: 0x180012420 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x12550 Offset: 0x11950 VA: 0x180012550 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x125F0 Offset: 0x119F0 VA: 0x1800125F0 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x12690 Offset: 0x11A90 VA: 0x180012690 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x127E0 Offset: 0x11BE0 VA: 0x1800127E0 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x127F0 Offset: 0x11BF0 VA: 0x1800127F0 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xD99C0 Offset: 0xD8DC0 VA: 0x1800D99C0
public sealed class SerializableAttribute : Attribute // TypeDefIndex: 218
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System
[Serializable]
public struct Single : IComparable, IFormattable, IConvertible, IComparable<float>, IEquatable<float> // TypeDefIndex: 219
{
	// Fields
	internal float m_value; // 0x0
	public const float MinValue = -3.402823E+38; // 0x0
	public const float Epsilon = 1.401298E-45; // 0x0
	public const float MaxValue = 3.402823E+38; // 0x0
	public const float PositiveInfinity = ∞; // 0x0
	public const float NegativeInfinity = -∞; // 0x0
	public const float NaN = NaN; // 0x0

	// Methods
	// RVA: 0x1DF190 Offset: 0x1DD990 VA: 0x1801DF190
	public static bool IsInfinity(float f) { }
	// RVA: 0x1DF1B0 Offset: 0x1DD9B0 VA: 0x1801DF1B0
	public static bool IsNaN(float f) { }
	// RVA: 0x6660 Offset: 0x5A60 VA: 0x180006660 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0x67E0 Offset: 0x5BE0 VA: 0x1800067E0 Slot: 23
	public int CompareTo(float value) { }
	// RVA: 0x6840 Offset: 0x5C40 VA: 0x180006840 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x6850 Offset: 0x5C50 VA: 0x180006850 Slot: 24
	public bool Equals(float obj) { }
	// RVA: 0x6890 Offset: 0x5C90 VA: 0x180006890 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x68B0 Offset: 0x5CB0 VA: 0x1800068B0 Slot: 3
	public override string ToString() { }
	// RVA: 0x68E0 Offset: 0x5CE0 VA: 0x1800068E0 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x6920 Offset: 0x5D20 VA: 0x180006920
	public string ToString(string format) { }
	// RVA: 0x6960 Offset: 0x5D60 VA: 0x180006960 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x1DF330 Offset: 0x1DDB30 VA: 0x1801DF330
	public static float Parse(string s, IFormatProvider provider) { }
	// RVA: 0x1DF360 Offset: 0x1DDB60 VA: 0x1801DF360
	public static float Parse(string s, NumberStyles style, IFormatProvider provider) { }
	// RVA: 0x1DF3B0 Offset: 0x1DDBB0 VA: 0x1801DF3B0
	private static float Parse(string s, NumberStyles style, NumberFormatInfo info) { }
	// RVA: 0x1DF3C0 Offset: 0x1DDBC0 VA: 0x1801DF3C0
	public static bool TryParse(string s, out float result) { }
	// RVA: 0x1DF4D0 Offset: 0x1DDCD0 VA: 0x1801DF4D0
	private static bool TryParse(string s, NumberStyles style, NumberFormatInfo info, out float result) { }
	// RVA: 0x69A0 Offset: 0x5DA0 VA: 0x1800069A0 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x69B0 Offset: 0x5DB0 VA: 0x1800069B0 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x6A60 Offset: 0x5E60 VA: 0x180006A60 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x6A70 Offset: 0x5E70 VA: 0x180006A70 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x6BA0 Offset: 0x5FA0 VA: 0x180006BA0 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x6CD0 Offset: 0x60D0 VA: 0x180006CD0 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x6E00 Offset: 0x6200 VA: 0x180006E00 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x6F30 Offset: 0x6330 VA: 0x180006F30 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x7060 Offset: 0x6460 VA: 0x180007060 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x7190 Offset: 0x6590 VA: 0x180007190 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x72C0 Offset: 0x66C0 VA: 0x1800072C0 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x4E80 Offset: 0x4280 VA: 0x180004E80 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x73F0 Offset: 0x67F0 VA: 0x1800073F0 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x7490 Offset: 0x6890 VA: 0x180007490 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x75E0 Offset: 0x69E0 VA: 0x1800075E0 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x75F0 Offset: 0x69F0 VA: 0x1800075F0 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[Serializable]
public sealed class StackOverflowException : SystemException // TypeDefIndex: 220
{
	// Methods
	// RVA: 0x1EABA0 Offset: 0x1E93A0 VA: 0x1801EABA0
	public void .ctor() { }
	// RVA: 0x1EAC30 Offset: 0x1E9430 VA: 0x1801EAC30
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[DefaultMemberAttribute] // RVA: 0xD99E0 Offset: 0xD8DE0 VA: 0x1800D99E0
[Serializable]
public sealed class String : IComparable, ICloneable, IConvertible, IEnumerable, IComparable<string>, IEnumerable<char>, IEquatable<string> // TypeDefIndex: 221
{
	// Fields
	private int m_stringLength; // 0x10
	private char m_firstChar; // 0x14
	private const int TrimHead = 0; // 0x0
	private const int TrimTail = 1; // 0x0
	private const int TrimBoth = 2; // 0x0
	public static readonly string Empty; // 0x0
	private const int charPtrAlignConst = 1; // 0x0
	private const int alignConst = 3; // 0x0

	// Properties
	public char Chars { get; }
	public int Length { get; }

	// Methods
	// RVA: 0x1F0700 Offset: 0x1EEF00 VA: 0x1801F0700
	public static string Join(string separator, string[] value) { }
	// RVA: 0x1F07D0 Offset: 0x1EEFD0 VA: 0x1801F07D0
	public static string Join(string separator, string[] value, int startIndex, int count) { }
	// RVA: 0x1F0C80 Offset: 0x1EF480 VA: 0x1801F0C80
	private static int CompareOrdinalIgnoreCaseHelper(string strA, string strB) { }
	// RVA: 0x1F0DB0 Offset: 0x1EF5B0 VA: 0x1801F0DB0
	private static bool EqualsHelper(string strA, string strB) { }
	// RVA: 0x1F0E40 Offset: 0x1EF640 VA: 0x1801F0E40
	private static int CompareOrdinalHelper(string strA, string strB) { }
	// RVA: 0x1F0FF0 Offset: 0x1EF7F0 VA: 0x1801F0FF0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x1F1150 Offset: 0x1EF950 VA: 0x1801F1150 Slot: 26
	public bool Equals(string value) { }
	// RVA: 0x1F1290 Offset: 0x1EFA90 VA: 0x1801F1290
	public bool Equals(string value, StringComparison comparisonType) { }
	// RVA: 0x1F1650 Offset: 0x1EFE50 VA: 0x1801F1650
	public static bool Equals(string a, string b) { }
	// RVA: 0x1F16E0 Offset: 0x1EFEE0 VA: 0x1801F16E0
	public static bool Equals(string a, string b, StringComparison comparisonType) { }
	// RVA: 0x1F1650 Offset: 0x1EFE50 VA: 0x1801F1650
	public static bool op_Equality(string a, string b) { }
	// RVA: 0x1F1AA0 Offset: 0x1F02A0 VA: 0x1801F1AA0
	public static bool op_Inequality(string a, string b) { }
	// RVA: 0x1F1B30 Offset: 0x1F0330 VA: 0x1801F1B30
	public char get_Chars(int index) { }
	// RVA: 0x1F1BE0 Offset: 0x1F03E0 VA: 0x1801F1BE0
	public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) { }
	// RVA: 0x1F1E30 Offset: 0x1F0630 VA: 0x1801F1E30
	public char[] ToCharArray() { }
	// RVA: 0x1F1F00 Offset: 0x1F0700 VA: 0x1801F1F00
	public static bool IsNullOrEmpty(string value) { }
	// RVA: 0x1F1F10 Offset: 0x1F0710 VA: 0x1801F1F10
	public static bool IsNullOrWhiteSpace(string value) { }
	// RVA: 0x1F1FF0 Offset: 0x1F07F0 VA: 0x1801F1FF0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1F1FF0 Offset: 0x1F07F0 VA: 0x1801F1FF0
	internal int GetLegacyNonRandomizedHashCode() { }
	// RVA: 0x1F2040 Offset: 0x1F0840 VA: 0x1801F2040
	public string[] Split(char[] separator) { }
	// RVA: 0x1F2060 Offset: 0x1F0860 VA: 0x1801F2060
	internal string[] SplitInternal(char[] separator, int count, StringSplitOptions options) { }
	// RVA: 0x1F22D0 Offset: 0x1F0AD0 VA: 0x1801F22D0
	private string[] InternalSplitKeepEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count) { }
	// RVA: 0x1F2700 Offset: 0x1F0F00 VA: 0x1801F2700
	private string[] InternalSplitOmitEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count) { }
	// RVA: 0x1F2B20 Offset: 0x1F1320 VA: 0x1801F2B20
	private int MakeSeparatorList(char[] separator, ref int[] sepList) { }
	// RVA: 0x1F2CF0 Offset: 0x1F14F0 VA: 0x1801F2CF0
	public string Substring(int startIndex) { }
	// RVA: 0x1F2D00 Offset: 0x1F1500 VA: 0x1801F2D00
	public string Substring(int startIndex, int length) { }
	// RVA: 0x1F2F10 Offset: 0x1F1710 VA: 0x1801F2F10
	private string InternalSubString(int startIndex, int length) { }
	// RVA: 0x1F2F80 Offset: 0x1F1780 VA: 0x1801F2F80
	public string Trim(char[] trimChars) { }
	// RVA: 0x1F3090 Offset: 0x1F1890 VA: 0x1801F3090
	public string TrimEnd(char[] trimChars) { }
	// RVA: 0x1F3140 Offset: 0x1F1940 VA: 0x1801F3140
	public void .ctor(char* value) { }
	// RVA: 0x1F3140 Offset: 0x1F1940 VA: 0x1801F3140
	public void .ctor(char* value, int startIndex, int length) { }
	// RVA: 0x1F3150 Offset: 0x1F1950 VA: 0x1801F3150
	public void .ctor(sbyte* value, int startIndex, int length, Encoding enc) { }
	// RVA: 0x1F3170 Offset: 0x1F1970 VA: 0x1801F3170
	internal static string CreateStringFromEncoding(byte* bytes, int byteLength, Encoding encoding) { }
	// RVA: 0x1F3290 Offset: 0x1F1A90 VA: 0x1801F3290
	public string Normalize(NormalizationForm normalizationForm) { }
	// RVA: 0x1F34D0 Offset: 0x1F1CD0 VA: 0x1801F34D0
	internal static string FastAllocateString(int length) { }
	// RVA: 0x1F34E0 Offset: 0x1F1CE0 VA: 0x1801F34E0
	private static void FillStringChecked(string dest, int destPos, string src) { }
	// RVA: 0x1F3140 Offset: 0x1F1940 VA: 0x1801F3140
	public void .ctor(char[] value, int startIndex, int length) { }
	// RVA: 0x1F3140 Offset: 0x1F1940 VA: 0x1801F3140
	public void .ctor(char[] value) { }
	// RVA: 0x1F35C0 Offset: 0x1F1DC0 VA: 0x1801F35C0
	internal static void wstrcpy(char* dmem, char* smem, int charCount) { }
	// RVA: 0x1F35D0 Offset: 0x1F1DD0 VA: 0x1801F35D0
	private string CtorCharArray(char[] value) { }
	// RVA: 0x1F36B0 Offset: 0x1F1EB0 VA: 0x1801F36B0
	private string CtorCharArrayStartLength(char[] value, int startIndex, int length) { }
	// RVA: 0x1F38B0 Offset: 0x1F20B0 VA: 0x1801F38B0
	private static int wcslen(char* ptr) { }
	// RVA: 0x1F3910 Offset: 0x1F2110 VA: 0x1801F3910
	private string CtorCharPtr(char* ptr) { }
	// RVA: 0x1F3AB0 Offset: 0x1F22B0 VA: 0x1801F3AB0
	private string CtorCharPtrStartLength(char* ptr, int startIndex, int length) { }
	// RVA: 0x1F3140 Offset: 0x1F1940 VA: 0x1801F3140
	public void .ctor(char c, int count) { }
	// RVA: 0x1F3CC0 Offset: 0x1F24C0 VA: 0x1801F3CC0
	public static int Compare(string strA, string strB, StringComparison comparisonType) { }
	// RVA: 0x1F4030 Offset: 0x1F2830 VA: 0x1801F4030
	public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture) { }
	// RVA: 0x1F4150 Offset: 0x1F2950 VA: 0x1801F4150
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, CultureInfo culture, CompareOptions options) { }
	// RVA: 0x1F42B0 Offset: 0x1F2AB0 VA: 0x1801F42B0
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType) { }
	// RVA: 0x1F4810 Offset: 0x1F3010 VA: 0x1801F4810 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0x1F4A20 Offset: 0x1F3220 VA: 0x1801F4A20 Slot: 24
	public int CompareTo(string strB) { }
	// RVA: 0x1F4B30 Offset: 0x1F3330 VA: 0x1801F4B30
	public static int CompareOrdinal(string strA, string strB) { }
	// RVA: 0x1F4B70 Offset: 0x1F3370 VA: 0x1801F4B70
	public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length) { }
	// RVA: 0x1F4BB0 Offset: 0x1F33B0 VA: 0x1801F4BB0
	public bool Contains(string value) { }
	// RVA: 0x1F4DA0 Offset: 0x1F35A0 VA: 0x1801F4DA0
	public bool EndsWith(string value) { }
	// RVA: 0x1F4DB0 Offset: 0x1F35B0 VA: 0x1801F4DB0
	public bool EndsWith(string value, StringComparison comparisonType) { }
	// RVA: 0x1F50F0 Offset: 0x1F38F0 VA: 0x1801F50F0
	internal bool EndsWith(char value) { }
	// RVA: 0x1F5120 Offset: 0x1F3920 VA: 0x1801F5120
	public int IndexOf(char value) { }
	// RVA: 0x1F5140 Offset: 0x1F3940 VA: 0x1801F5140
	public int IndexOf(char value, int startIndex) { }
	// RVA: 0x1F5160 Offset: 0x1F3960 VA: 0x1801F5160
	public int IndexOfAny(char[] anyOf) { }
	// RVA: 0x1F5180 Offset: 0x1F3980 VA: 0x1801F5180
	public int IndexOfAny(char[] anyOf, int startIndex) { }
	// RVA: 0x1F51A0 Offset: 0x1F39A0 VA: 0x1801F51A0
	public int IndexOf(string value) { }
	// RVA: 0x1F5390 Offset: 0x1F3B90 VA: 0x1801F5390
	public int IndexOf(string value, StringComparison comparisonType) { }
	// RVA: 0x1F53C0 Offset: 0x1F3BC0 VA: 0x1801F53C0
	public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType) { }
	// RVA: 0x1F5840 Offset: 0x1F4040 VA: 0x1801F5840
	public int LastIndexOf(char value) { }
	// RVA: 0x1F5860 Offset: 0x1F4060 VA: 0x1801F5860
	public int LastIndexOf(char value, int startIndex) { }
	// RVA: 0x1F5880 Offset: 0x1F4080 VA: 0x1801F5880
	public int LastIndexOfAny(char[] anyOf) { }
	// RVA: 0x1F58A0 Offset: 0x1F40A0 VA: 0x1801F58A0
	public int LastIndexOfAny(char[] anyOf, int startIndex) { }
	// RVA: 0x1F58C0 Offset: 0x1F40C0 VA: 0x1801F58C0
	public int LastIndexOf(string value, StringComparison comparisonType) { }
	// RVA: 0x1F58F0 Offset: 0x1F40F0 VA: 0x1801F58F0
	public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType) { }
	// RVA: 0x1F5D90 Offset: 0x1F4590 VA: 0x1801F5D90
	public string PadRight(int totalWidth, char paddingChar) { }
	// RVA: 0x1F5DB0 Offset: 0x1F45B0 VA: 0x1801F5DB0
	public bool StartsWith(string value) { }
	// RVA: 0x1F5E70 Offset: 0x1F4670 VA: 0x1801F5E70
	public bool StartsWith(string value, StringComparison comparisonType) { }
	// RVA: 0x1F61A0 Offset: 0x1F49A0 VA: 0x1801F61A0
	public string ToLower() { }
	// RVA: 0x1F6250 Offset: 0x1F4A50 VA: 0x1801F6250
	public string ToLower(CultureInfo culture) { }
	// RVA: 0x1F6330 Offset: 0x1F4B30 VA: 0x1801F6330
	public string ToLowerInvariant() { }
	// RVA: 0x1F63D0 Offset: 0x1F4BD0 VA: 0x1801F63D0
	public string ToUpper() { }
	// RVA: 0x1F6550 Offset: 0x1F4D50 VA: 0x1801F6550
	public string ToUpper(CultureInfo culture) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630 Slot: 3
	public override string ToString() { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630 Slot: 5
	public object Clone() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640
	private static bool IsBOMWhitespace(char c) { }
	// RVA: 0x1F6650 Offset: 0x1F4E50 VA: 0x1801F6650
	public string Trim() { }
	// RVA: 0x1F6660 Offset: 0x1F4E60 VA: 0x1801F6660
	private string TrimHelper(int trimType) { }
	// RVA: 0x1F67D0 Offset: 0x1F4FD0 VA: 0x1801F67D0
	private string TrimHelper(char[] trimChars, int trimType) { }
	// RVA: 0x1F68F0 Offset: 0x1F50F0 VA: 0x1801F68F0
	private string CreateTrimmedString(int start, int end) { }
	// RVA: 0x1F69D0 Offset: 0x1F51D0 VA: 0x1801F69D0
	public string Insert(int startIndex, string value) { }
	// RVA: 0x1F6B70 Offset: 0x1F5370 VA: 0x1801F6B70
	public string Replace(char oldChar, char newChar) { }
	// RVA: 0x1F6CB0 Offset: 0x1F54B0 VA: 0x1801F6CB0
	public string Replace(string oldValue, string newValue) { }
	// RVA: 0x1F6E30 Offset: 0x1F5630 VA: 0x1801F6E30
	public string Remove(int startIndex, int count) { }
	// RVA: 0x1F7020 Offset: 0x1F5820 VA: 0x1801F7020
	public static string Format(string format, object arg0) { }
	// RVA: 0x1F7070 Offset: 0x1F5870 VA: 0x1801F7070
	public static string Format(string format, object arg0, object arg1) { }
	// RVA: 0x1F70C0 Offset: 0x1F58C0 VA: 0x1801F70C0
	public static string Format(string format, object arg0, object arg1, object arg2) { }
	// RVA: 0x1F7110 Offset: 0x1F5910 VA: 0x1801F7110
	public static string Format(string format, object[] args) { }
	// RVA: 0x1F7280 Offset: 0x1F5A80 VA: 0x1801F7280
	public static string Format(IFormatProvider provider, string format, object arg0) { }
	// RVA: 0x1F72E0 Offset: 0x1F5AE0 VA: 0x1801F72E0
	public static string Format(IFormatProvider provider, string format, object arg0, object arg1) { }
	// RVA: 0x1F7350 Offset: 0x1F5B50 VA: 0x1801F7350
	public static string Format(IFormatProvider provider, string format, object arg0, object arg1, object arg2) { }
	// RVA: 0x1F73C0 Offset: 0x1F5BC0 VA: 0x1801F73C0
	public static string Format(IFormatProvider provider, string format, object[] args) { }
	// RVA: 0x1F7540 Offset: 0x1F5D40 VA: 0x1801F7540
	private static string FormatHelper(IFormatProvider provider, string format, ParamsArray args) { }
	// RVA: 0x1F7680 Offset: 0x1F5E80 VA: 0x1801F7680
	public static string Copy(string str) { }
	// RVA: 0x1F7760 Offset: 0x1F5F60 VA: 0x1801F7760
	public static string Concat(object arg0) { }
	// RVA: 0x1F7800 Offset: 0x1F6000 VA: 0x1801F7800
	public static string Concat(object arg0, object arg1) { }
	// RVA: 0x1F78F0 Offset: 0x1F60F0 VA: 0x1801F78F0
	public static string Concat(object arg0, object arg1, object arg2) { }
	// RVA: 0x1F7A20 Offset: 0x1F6220 VA: 0x1801F7A20
	public static string Concat(object[] args) { }
	// RVA: 0x1F7CA0 Offset: 0x1F64A0 VA: 0x1801F7CA0
	public static string Concat(string str0, string str1) { }
	// RVA: 0x1F7DA0 Offset: 0x1F65A0 VA: 0x1801F7DA0
	public static string Concat(string str0, string str1, string str2) { }
	// RVA: 0x1F7F90 Offset: 0x1F6790 VA: 0x1801F7F90
	public static string Concat(string str0, string str1, string str2, string str3) { }
	// RVA: 0x1F81D0 Offset: 0x1F69D0 VA: 0x1801F81D0
	private static string ConcatArray(string[] values, int totalLength) { }
	// RVA: 0x1F8360 Offset: 0x1F6B60 VA: 0x1801F8360
	public static string Concat(string[] values) { }
	// RVA: 0x1F8540 Offset: 0x1F6D40 VA: 0x1801F8540 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x1F8550 Offset: 0x1F6D50 VA: 0x1801F8550 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x1F8670 Offset: 0x1F6E70 VA: 0x1801F8670 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x1F87E0 Offset: 0x1F6FE0 VA: 0x1801F87E0 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x1F88A0 Offset: 0x1F70A0 VA: 0x1801F88A0 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x1F8970 Offset: 0x1F7170 VA: 0x1801F8970 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x1F8A50 Offset: 0x1F7250 VA: 0x1801F8A50 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x1F8B30 Offset: 0x1F7330 VA: 0x1801F8B30 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x1F8C10 Offset: 0x1F7410 VA: 0x1801F8C10 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x1F8CF0 Offset: 0x1F74F0 VA: 0x1801F8CF0 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x1F8DD0 Offset: 0x1F75D0 VA: 0x1801F8DD0 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x1F8EB0 Offset: 0x1F76B0 VA: 0x1801F8EB0 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x1F8F80 Offset: 0x1F7780 VA: 0x1801F8F80 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x1F9150 Offset: 0x1F7950 VA: 0x1801F9150 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x1F92E0 Offset: 0x1F7AE0 VA: 0x1801F92E0 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x1F9430 Offset: 0x1F7C30 VA: 0x1801F9430 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
	// RVA: 0x1F94E0 Offset: 0x1F7CE0 VA: 0x1801F94E0 Slot: 25
	private IEnumerator<char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator() { }
	// RVA: 0x1F9560 Offset: 0x1F7D60 VA: 0x1801F9560 Slot: 23
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x198900 Offset: 0x197100 VA: 0x180198900
	public int get_Length() { }
	// RVA: 0x1F95E0 Offset: 0x1F7DE0 VA: 0x1801F95E0
	internal static int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB) { }
	// RVA: 0x1F9770 Offset: 0x1F7F70 VA: 0x1801F9770
	public int IndexOf(char value, int startIndex, int count) { }
	// RVA: 0x1F9900 Offset: 0x1F8100 VA: 0x1801F9900
	internal int IndexOfUnchecked(char value, int startIndex, int count) { }
	// RVA: 0x1F9A00 Offset: 0x1F8200 VA: 0x1801F9A00
	internal int IndexOfUnchecked(string value, int startIndex, int count) { }
	// RVA: 0x1F9B20 Offset: 0x1F8320 VA: 0x1801F9B20
	public int IndexOfAny(char[] anyOf, int startIndex, int count) { }
	// RVA: 0x1F9D40 Offset: 0x1F8540 VA: 0x1801F9D40
	private int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count) { }
	// RVA: 0x1F9E70 Offset: 0x1F8670 VA: 0x1801F9E70
	public int LastIndexOf(char value, int startIndex, int count) { }
	// RVA: 0x1F9FF0 Offset: 0x1F87F0 VA: 0x1801F9FF0
	internal int LastIndexOfUnchecked(char value, int startIndex, int count) { }
	// RVA: 0x1FA100 Offset: 0x1F8900 VA: 0x1801FA100
	public int LastIndexOfAny(char[] anyOf, int startIndex, int count) { }
	// RVA: 0x1FA330 Offset: 0x1F8B30 VA: 0x1801FA330
	private int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count) { }
	// RVA: 0x1FA3F0 Offset: 0x1F8BF0 VA: 0x1801FA3F0
	internal static int nativeCompareOrdinalEx(string strA, int indexA, string strB, int indexB, int count) { }
	// RVA: 0x1FA5C0 Offset: 0x1F8DC0 VA: 0x1801FA5C0
	private string ReplaceInternal(char oldChar, char newChar) { }
	// RVA: 0x1FA700 Offset: 0x1F8F00 VA: 0x1801FA700
	internal string ReplaceInternal(string oldValue, string newValue) { }
	// RVA: 0x1FA840 Offset: 0x1F9040 VA: 0x1801FA840
	private string ReplaceUnchecked(string oldValue, string newValue) { }
	// RVA: 0x1FAC40 Offset: 0x1F9440 VA: 0x1801FAC40
	private string ReplaceFallback(string oldValue, string newValue, int testedCount) { }
	// RVA: 0x1FADE0 Offset: 0x1F95E0 VA: 0x1801FADE0
	private string PadHelper(int totalWidth, char paddingChar, bool isRightPadded) { }
	// RVA: 0x1FAFD0 Offset: 0x1F97D0 VA: 0x1801FAFD0
	internal bool StartsWithOrdinalUnchecked(string value) { }
	// RVA: 0x1FB020 Offset: 0x1F9820 VA: 0x1801FB020
	internal bool IsAscii() { }
	// RVA: 0x1FB050 Offset: 0x1F9850 VA: 0x1801FB050
	internal static void CharCopy(char* dest, char* src, int count) { }
	// RVA: 0x1FB0A0 Offset: 0x1F98A0 VA: 0x1801FB0A0
	private static void memset(byte* dest, int val, int len) { }
	// RVA: 0x1FB190 Offset: 0x1F9990 VA: 0x1801FB190
	private static void memcpy(byte* dest, byte* src, int size) { }
	// RVA: 0x1FB1A0 Offset: 0x1F99A0 VA: 0x1801FB1A0
	internal static void bzero(byte* dest, int len) { }
	// RVA: 0x1FB270 Offset: 0x1F9A70 VA: 0x1801FB270
	internal static void bzero_aligned_1(byte* dest, int len) { }
	// RVA: 0x1FB280 Offset: 0x1F9A80 VA: 0x1801FB280
	internal static void bzero_aligned_2(byte* dest, int len) { }
	// RVA: 0x1FB290 Offset: 0x1F9A90 VA: 0x1801FB290
	internal static void bzero_aligned_4(byte* dest, int len) { }
	// RVA: 0x1FB2A0 Offset: 0x1F9AA0 VA: 0x1801FB2A0
	internal static void bzero_aligned_8(byte* dest, int len) { }
	// RVA: 0x1FB2B0 Offset: 0x1F9AB0 VA: 0x1801FB2B0
	internal static void memcpy_aligned_1(byte* dest, byte* src, int size) { }
	// RVA: 0x1FB2C0 Offset: 0x1F9AC0 VA: 0x1801FB2C0
	internal static void memcpy_aligned_2(byte* dest, byte* src, int size) { }
	// RVA: 0x1FB2D0 Offset: 0x1F9AD0 VA: 0x1801FB2D0
	internal static void memcpy_aligned_4(byte* dest, byte* src, int size) { }
	// RVA: 0x1FB2E0 Offset: 0x1F9AE0 VA: 0x1801FB2E0
	internal static void memcpy_aligned_8(byte* dest, byte* src, int size) { }
	// RVA: 0x1FB2F0 Offset: 0x1F9AF0 VA: 0x1801FB2F0
	private string CreateString(sbyte* value) { }
	// RVA: 0x1FB3E0 Offset: 0x1F9BE0 VA: 0x1801FB3E0
	private string CreateString(sbyte* value, int startIndex, int length) { }
	// RVA: 0x1FB400 Offset: 0x1F9C00 VA: 0x1801FB400
	private string CreateString(char* value) { }
	// RVA: 0x1FB410 Offset: 0x1F9C10 VA: 0x1801FB410
	private string CreateString(char* value, int startIndex, int length) { }
	// RVA: 0x1FB420 Offset: 0x1F9C20 VA: 0x1801FB420
	private string CreateString(char[] val, int startIndex, int length) { }
	// RVA: 0x1FB430 Offset: 0x1F9C30 VA: 0x1801FB430
	private string CreateString(char[] val) { }
	// RVA: 0x1FB510 Offset: 0x1F9D10 VA: 0x1801FB510
	private string CreateString(char c, int count) { }
	// RVA: 0x1FB620 Offset: 0x1F9E20 VA: 0x1801FB620
	private string CreateString(sbyte* value, int startIndex, int length, Encoding enc) { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum StringSplitOptions // TypeDefIndex: 222
{
	// Fields
	public int value__; // 0x0
	public const StringSplitOptions None = 0; // 0x0
	public const StringSplitOptions RemoveEmptyEntries = 1; // 0x0
}

// Namespace: System
[Serializable]
public abstract class StringComparer : IComparer, IEqualityComparer, IComparer<string>, IEqualityComparer<string> // TypeDefIndex: 223
{
	// Fields
	private static readonly StringComparer _invariantCulture; // 0x0
	private static readonly StringComparer _invariantCultureIgnoreCase; // 0x8
	private static readonly StringComparer _ordinal; // 0x10
	private static readonly StringComparer _ordinalIgnoreCase; // 0x18

	// Properties
	public static StringComparer CurrentCultureIgnoreCase { get; }
	public static StringComparer OrdinalIgnoreCase { get; }

	// Methods
	// RVA: 0x38E9D0 Offset: 0x38D1D0 VA: 0x18038E9D0
	public static StringComparer get_CurrentCultureIgnoreCase() { }
	// RVA: 0x38EAA0 Offset: 0x38D2A0 VA: 0x18038EAA0
	public static StringComparer get_OrdinalIgnoreCase() { }
	// RVA: 0x38EB40 Offset: 0x38D340 VA: 0x18038EB40 Slot: 4
	public int Compare(object x, object y) { }
	// RVA: 0x38EC90 Offset: 0x38D490 VA: 0x18038EC90 Slot: 5
	public bool Equals(object x, object y) { }
	// RVA: 0x38ED90 Offset: 0x38D590 VA: 0x18038ED90 Slot: 6
	public int GetHashCode(object obj) { }
	// RVA: -1 Offset: -1 Slot: 10
	public abstract int Compare(string x, string y) { }
	// RVA: -1 Offset: -1 Slot: 11
	public abstract bool Equals(string x, string y) { }
	// RVA: -1 Offset: -1 Slot: 12
	public abstract int GetHashCode(string obj) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x38EE90 Offset: 0x38D690 VA: 0x18038EE90
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
internal sealed class CultureAwareComparer : StringComparer // TypeDefIndex: 224
{
	// Fields
	private CompareInfo _compareInfo; // 0x10
	private bool _ignoreCase; // 0x18
	[OptionalFieldAttribute] // RVA: 0xD9880 Offset: 0xD8C80 VA: 0x1800D9880
	private CompareOptions _options; // 0x1C

	// Methods
	// RVA: 0x3F9CE0 Offset: 0x3F84E0 VA: 0x1803F9CE0
	internal void .ctor(CultureInfo culture, bool ignoreCase) { }
	// RVA: 0x3F9DB0 Offset: 0x3F85B0 VA: 0x1803F9DB0 Slot: 10
	public override int Compare(string x, string y) { }
	// RVA: 0x3F9E10 Offset: 0x3F8610 VA: 0x1803F9E10 Slot: 11
	public override bool Equals(string x, string y) { }
	// RVA: 0x3F9E70 Offset: 0x3F8670 VA: 0x1803F9E70 Slot: 12
	public override int GetHashCode(string obj) { }
	// RVA: 0x3FA030 Offset: 0x3F8830 VA: 0x1803FA030 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x3FA120 Offset: 0x3F8920 VA: 0x1803FA120 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[Serializable]
internal sealed class OrdinalComparer : StringComparer // TypeDefIndex: 225
{
	// Fields
	private bool _ignoreCase; // 0x10

	// Methods
	// RVA: 0x311300 Offset: 0x30FB00 VA: 0x180311300
	internal void .ctor(bool ignoreCase) { }
	// RVA: 0x3113A0 Offset: 0x30FBA0 VA: 0x1803113A0 Slot: 10
	public override int Compare(string x, string y) { }
	// RVA: 0x311530 Offset: 0x30FD30 VA: 0x180311530 Slot: 11
	public override bool Equals(string x, string y) { }
	// RVA: 0x3116A0 Offset: 0x30FEA0 VA: 0x1803116A0 Slot: 12
	public override int GetHashCode(string obj) { }
	// RVA: 0x3117B0 Offset: 0x30FFB0 VA: 0x1803117B0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x311870 Offset: 0x310070 VA: 0x180311870 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
[Serializable]
public class SystemException : Exception // TypeDefIndex: 226
{
	// Methods
	// RVA: 0x3903D0 Offset: 0x38EBD0 VA: 0x1803903D0
	public void .ctor() { }
	// RVA: 0x390480 Offset: 0x38EC80 VA: 0x180390480
	public void .ctor(string message) { }
	// RVA: 0x390530 Offset: 0x38ED30 VA: 0x180390530
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x3905F0 Offset: 0x38EDF0 VA: 0x1803905F0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xD9A10 Offset: 0xD8E10 VA: 0x1800D9A10
public sealed class STAThreadAttribute : Attribute // TypeDefIndex: 227
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System
[AttributeUsageAttribute] // RVA: 0xD9960 Offset: 0xD8D60 VA: 0x1800D9960
[Serializable]
public class ThreadStaticAttribute : Attribute // TypeDefIndex: 228
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System
internal enum ExceptionArgument // TypeDefIndex: 229
{
	// Fields
	public int value__; // 0x0
	public const ExceptionArgument obj = 0; // 0x0
	public const ExceptionArgument dictionary = 1; // 0x0
	public const ExceptionArgument dictionaryCreationThreshold = 2; // 0x0
	public const ExceptionArgument array = 3; // 0x0
	public const ExceptionArgument info = 4; // 0x0
	public const ExceptionArgument key = 5; // 0x0
	public const ExceptionArgument collection = 6; // 0x0
	public const ExceptionArgument list = 7; // 0x0
	public const ExceptionArgument match = 8; // 0x0
	public const ExceptionArgument converter = 9; // 0x0
	public const ExceptionArgument queue = 10; // 0x0
	public const ExceptionArgument stack = 11; // 0x0
	public const ExceptionArgument capacity = 12; // 0x0
	public const ExceptionArgument index = 13; // 0x0
	public const ExceptionArgument startIndex = 14; // 0x0
	public const ExceptionArgument value = 15; // 0x0
	public const ExceptionArgument count = 16; // 0x0
	public const ExceptionArgument arrayIndex = 17; // 0x0
	public const ExceptionArgument name = 18; // 0x0
	public const ExceptionArgument mode = 19; // 0x0
	public const ExceptionArgument item = 20; // 0x0
	public const ExceptionArgument options = 21; // 0x0
	public const ExceptionArgument view = 22; // 0x0
	public const ExceptionArgument sourceBytesToCopy = 23; // 0x0
	public const ExceptionArgument start = 24; // 0x0
	public const ExceptionArgument pointer = 25; // 0x0
	public const ExceptionArgument ownedMemory = 26; // 0x0
	public const ExceptionArgument text = 27; // 0x0
}

// Namespace: System
internal enum ExceptionResource // TypeDefIndex: 230
{
	// Fields
	public int value__; // 0x0
	public const ExceptionResource Argument_ImplementIComparable = 0; // 0x0
	public const ExceptionResource Argument_InvalidType = 1; // 0x0
	public const ExceptionResource Argument_InvalidArgumentForComparison = 2; // 0x0
	public const ExceptionResource Argument_InvalidRegistryKeyPermissionCheck = 3; // 0x0
	public const ExceptionResource ArgumentOutOfRange_NeedNonNegNum = 4; // 0x0
	public const ExceptionResource Arg_ArrayPlusOffTooSmall = 5; // 0x0
	public const ExceptionResource Arg_NonZeroLowerBound = 6; // 0x0
	public const ExceptionResource Arg_RankMultiDimNotSupported = 7; // 0x0
	public const ExceptionResource Arg_RegKeyDelHive = 8; // 0x0
	public const ExceptionResource Arg_RegKeyStrLenBug = 9; // 0x0
	public const ExceptionResource Arg_RegSetStrArrNull = 10; // 0x0
	public const ExceptionResource Arg_RegSetMismatchedKind = 11; // 0x0
	public const ExceptionResource Arg_RegSubKeyAbsent = 12; // 0x0
	public const ExceptionResource Arg_RegSubKeyValueAbsent = 13; // 0x0
	public const ExceptionResource Argument_AddingDuplicate = 14; // 0x0
	public const ExceptionResource Serialization_InvalidOnDeser = 15; // 0x0
	public const ExceptionResource Serialization_MissingKeys = 16; // 0x0
	public const ExceptionResource Serialization_NullKey = 17; // 0x0
	public const ExceptionResource Argument_InvalidArrayType = 18; // 0x0
	public const ExceptionResource NotSupported_KeyCollectionSet = 19; // 0x0
	public const ExceptionResource NotSupported_ValueCollectionSet = 20; // 0x0
	public const ExceptionResource ArgumentOutOfRange_SmallCapacity = 21; // 0x0
	public const ExceptionResource ArgumentOutOfRange_Index = 22; // 0x0
	public const ExceptionResource Argument_InvalidOffLen = 23; // 0x0
	public const ExceptionResource Argument_ItemNotExist = 24; // 0x0
	public const ExceptionResource ArgumentOutOfRange_Count = 25; // 0x0
	public const ExceptionResource ArgumentOutOfRange_InvalidThreshold = 26; // 0x0
	public const ExceptionResource ArgumentOutOfRange_ListInsert = 27; // 0x0
	public const ExceptionResource NotSupported_ReadOnlyCollection = 28; // 0x0
	public const ExceptionResource InvalidOperation_CannotRemoveFromStackOrQueue = 29; // 0x0
	public const ExceptionResource InvalidOperation_EmptyQueue = 30; // 0x0
	public const ExceptionResource InvalidOperation_EnumOpCantHappen = 31; // 0x0
	public const ExceptionResource InvalidOperation_EnumFailedVersion = 32; // 0x0
	public const ExceptionResource InvalidOperation_EmptyStack = 33; // 0x0
	public const ExceptionResource ArgumentOutOfRange_BiggerThanCollection = 34; // 0x0
	public const ExceptionResource InvalidOperation_EnumNotStarted = 35; // 0x0
	public const ExceptionResource InvalidOperation_EnumEnded = 36; // 0x0
	public const ExceptionResource NotSupported_SortedListNestedWrite = 37; // 0x0
	public const ExceptionResource InvalidOperation_NoValue = 38; // 0x0
	public const ExceptionResource InvalidOperation_RegRemoveSubKey = 39; // 0x0
	public const ExceptionResource Security_RegistryPermission = 40; // 0x0
	public const ExceptionResource UnauthorizedAccess_RegistryNoWrite = 41; // 0x0
	public const ExceptionResource ObjectDisposed_RegKeyClosed = 42; // 0x0
	public const ExceptionResource NotSupported_InComparableType = 43; // 0x0
	public const ExceptionResource Argument_InvalidRegistryOptionsCheck = 44; // 0x0
	public const ExceptionResource Argument_InvalidRegistryViewCheck = 45; // 0x0
}

// Namespace: System
[Serializable]
public class TimeoutException : SystemException // TypeDefIndex: 231
{
	// Methods
	// RVA: 0x49FF50 Offset: 0x49E750 VA: 0x18049FF50
	public void .ctor() { }
	// RVA: 0x49FFE0 Offset: 0x49E7E0 VA: 0x18049FFE0
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public struct TimeSpan : IComparable, IComparable<TimeSpan>, IEquatable<TimeSpan>, IFormattable // TypeDefIndex: 232
{
	// Fields
	public static readonly TimeSpan Zero; // 0x0
	public static readonly TimeSpan MaxValue; // 0x8
	public static readonly TimeSpan MinValue; // 0x10
	internal long _ticks; // 0x0
	private static bool _legacyConfigChecked; // 0x18
	private static bool _legacyMode; // 0x19

	// Properties
	public int Hours { get; }
	public int Minutes { get; }
	public double TotalHours { get; }
	public double TotalMilliseconds { get; }
	public double TotalMinutes { get; }
	public double TotalSeconds { get; }
	private static bool LegacyMode { get; }

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	public void .ctor(long ticks) { }
	// RVA: 0x18B60 Offset: 0x17F60 VA: 0x180018B60
	public void .ctor(int hours, int minutes, int seconds) { }
	// RVA: 0x18B70 Offset: 0x17F70 VA: 0x180018B70
	public void .ctor(int days, int hours, int minutes, int seconds, int milliseconds) { }
	// RVA: 0x18B80 Offset: 0x17F80 VA: 0x180018B80
	public int get_Hours() { }
	// RVA: 0x18BC0 Offset: 0x17FC0 VA: 0x180018BC0
	public int get_Minutes() { }
	// RVA: 0x18C10 Offset: 0x18010 VA: 0x180018C10
	public double get_TotalHours() { }
	// RVA: 0x18C30 Offset: 0x18030 VA: 0x180018C30
	public double get_TotalMilliseconds() { }
	// RVA: 0x18C70 Offset: 0x18070 VA: 0x180018C70
	public double get_TotalMinutes() { }
	// RVA: 0x18C90 Offset: 0x18090 VA: 0x180018C90
	public double get_TotalSeconds() { }
	// RVA: 0x18CB0 Offset: 0x180B0 VA: 0x180018CB0
	public TimeSpan Add(TimeSpan ts) { }
	// RVA: 0x18CC0 Offset: 0x180C0 VA: 0x180018CC0 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0x18DE0 Offset: 0x181E0 VA: 0x180018DE0 Slot: 5
	public int CompareTo(TimeSpan value) { }
	// RVA: 0x494390 Offset: 0x492B90 VA: 0x180494390
	public static TimeSpan FromDays(double value) { }
	// RVA: 0x18E00 Offset: 0x18200 VA: 0x180018E00 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x18E10 Offset: 0x18210 VA: 0x180018E10 Slot: 6
	public bool Equals(TimeSpan obj) { }
	// RVA: 0x18E20 Offset: 0x18220 VA: 0x180018E20 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x494500 Offset: 0x492D00 VA: 0x180494500
	public static TimeSpan FromHours(double value) { }
	// RVA: 0x4945A0 Offset: 0x492DA0 VA: 0x1804945A0
	private static TimeSpan Interval(double value, int scale) { }
	// RVA: 0x494740 Offset: 0x492F40 VA: 0x180494740
	public static TimeSpan FromMilliseconds(double value) { }
	// RVA: 0x4947E0 Offset: 0x492FE0 VA: 0x1804947E0
	public static TimeSpan FromMinutes(double value) { }
	// RVA: 0x18E30 Offset: 0x18230 VA: 0x180018E30
	public TimeSpan Negate() { }
	// RVA: 0x494970 Offset: 0x493170 VA: 0x180494970
	public static TimeSpan FromSeconds(double value) { }
	// RVA: 0x18E40 Offset: 0x18240 VA: 0x180018E40
	public TimeSpan Subtract(TimeSpan ts) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	public static TimeSpan FromTicks(long value) { }
	// RVA: 0x494AF0 Offset: 0x4932F0 VA: 0x180494AF0
	internal static long TimeToTicks(int hour, int minute, int second) { }
	// RVA: 0x18E50 Offset: 0x18250 VA: 0x180018E50 Slot: 3
	public override string ToString() { }
	// RVA: 0x18EF0 Offset: 0x182F0 VA: 0x180018EF0
	public string ToString(string format) { }
	// RVA: 0x18F00 Offset: 0x18300 VA: 0x180018F00 Slot: 7
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x494ED0 Offset: 0x4936D0 VA: 0x180494ED0
	public static TimeSpan op_Subtraction(TimeSpan t1, TimeSpan t2) { }
	// RVA: 0x494EF0 Offset: 0x4936F0 VA: 0x180494EF0
	public static TimeSpan op_Addition(TimeSpan t1, TimeSpan t2) { }
	// RVA: 0x33BBF0 Offset: 0x33A3F0 VA: 0x18033BBF0
	public static bool op_Equality(TimeSpan t1, TimeSpan t2) { }
	// RVA: 0x37BD50 Offset: 0x37A550 VA: 0x18037BD50
	public static bool op_Inequality(TimeSpan t1, TimeSpan t2) { }
	// RVA: 0x494F10 Offset: 0x493710 VA: 0x180494F10
	public static bool op_LessThan(TimeSpan t1, TimeSpan t2) { }
	// RVA: 0x494F20 Offset: 0x493720 VA: 0x180494F20
	public static bool op_LessThanOrEqual(TimeSpan t1, TimeSpan t2) { }
	// RVA: 0x494F30 Offset: 0x493730 VA: 0x180494F30
	public static bool op_GreaterThan(TimeSpan t1, TimeSpan t2) { }
	// RVA: 0x494F40 Offset: 0x493740 VA: 0x180494F40
	public static bool op_GreaterThanOrEqual(TimeSpan t1, TimeSpan t2) { }
	// RVA: 0x494F50 Offset: 0x493750 VA: 0x180494F50
	private static bool get_LegacyMode() { }
	// RVA: 0x495090 Offset: 0x493890 VA: 0x180495090
	private static void .cctor() { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum TimeZoneInfoOptions // TypeDefIndex: 233
{
	// Fields
	public int value__; // 0x0
	public const TimeZoneInfoOptions None = 1; // 0x0
	public const TimeZoneInfoOptions NoThrowOnInvalidTime = 2; // 0x0
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
[Serializable]
public sealed class TimeZoneInfo : IEquatable<TimeZoneInfo>, ISerializable, IDeserializationCallback // TypeDefIndex: 234
{
	// Fields
	private TimeSpan baseUtcOffset; // 0x10
	private string daylightDisplayName; // 0x18
	private string displayName; // 0x20
	private string id; // 0x28
	private static TimeZoneInfo local; // 0x0
	private List<KeyValuePair<DateTime, TimeType>> transitions; // 0x30
	private static bool readlinkNotFound; // 0x8
	private string standardDisplayName; // 0x38
	private bool supportsDaylightSavingTime; // 0x40
	private static TimeZoneInfo utc; // 0x10
	private static string timeZoneDirectory; // 0x18
	private TimeZoneInfo.AdjustmentRule[] adjustmentRules; // 0x48
	private static RegistryKey timeZoneKey; // 0x20
	private static RegistryKey localZoneKey; // 0x28
	private static ReadOnlyCollection<TimeZoneInfo> systemTimeZones; // 0x30

	// Properties
	public static TimeZoneInfo Local { get; }
	public static TimeZoneInfo Utc { get; }
	private static string TimeZoneDirectory { get; }
	private static RegistryKey TimeZoneKey { get; }
	private static RegistryKey LocalZoneKey { get; }

	// Methods
	// RVA: 0x496A50 Offset: 0x495250 VA: 0x180496A50
	internal static bool UtcOffsetOutOfRange(TimeSpan offset) { }
	// RVA: 0x496A80 Offset: 0x495280 VA: 0x180496A80
	private static List<TimeZoneInfo.AdjustmentRule> CreateAdjustmentRule(int year, out long[] data, out string[] names, string standardNameCurrentYear, string daylightNameCurrentYear) { }
	// RVA: 0x496BF0 Offset: 0x4953F0 VA: 0x180496BF0
	private static TimeZoneInfo CreateLocalUnity() { }
	// RVA: 0x496D50 Offset: 0x495550 VA: 0x180496D50
	internal static extern uint EnumDynamicTimeZoneInformation(uint dwIndex, out TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation) { }
	// RVA: 0x496E80 Offset: 0x495680 VA: 0x180496E80
	internal static extern uint GetDynamicTimeZoneInformation(out TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation) { }
	// RVA: 0x496FA0 Offset: 0x4957A0 VA: 0x180496FA0
	internal static extern uint GetDynamicTimeZoneInformationWin32(out TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation) { }
	// RVA: 0x4970C0 Offset: 0x4958C0 VA: 0x1804970C0
	internal static extern uint GetDynamicTimeZoneInformationEffectiveYears(ref TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, out uint FirstYear, out uint LastYear) { }
	// RVA: 0x497210 Offset: 0x495A10 VA: 0x180497210
	internal static extern bool GetTimeZoneInformationForYear(ushort wYear, ref TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pdtzi, out TimeZoneInfo.TIME_ZONE_INFORMATION ptzi) { }
	// RVA: 0x4973D0 Offset: 0x495BD0 VA: 0x1804973D0
	internal static TimeZoneInfo.AdjustmentRule CreateAdjustmentRuleFromTimeZoneInformation(ref TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, DateTime startDate, DateTime endDate, int defaultBaseUtcOffset) { }
	// RVA: 0x497950 Offset: 0x496150 VA: 0x180497950
	private static bool TransitionTimeFromTimeZoneInformation(TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, out TimeZoneInfo.TransitionTime transitionTime, bool readStartDate) { }
	// RVA: 0x497B40 Offset: 0x496340 VA: 0x180497B40
	internal static TimeZoneInfo TryCreateTimeZone(TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation) { }
	// RVA: 0x4981E0 Offset: 0x4969E0 VA: 0x1804981E0
	internal static TimeZoneInfo GetLocalTimeZoneInfoWinRTFallback() { }
	// RVA: 0x498390 Offset: 0x496B90 VA: 0x180498390
	internal static string GetLocalTimeZoneKeyNameWin32Fallback() { }
	// RVA: 0x4984F0 Offset: 0x496CF0 VA: 0x1804984F0
	internal static TimeZoneInfo FindSystemTimeZoneByIdWinRTFallback(string id) { }
	// RVA: 0x4988E0 Offset: 0x4970E0 VA: 0x1804988E0
	internal static List<TimeZoneInfo> GetSystemTimeZonesWinRTFallback() { }
	// RVA: 0x498B30 Offset: 0x497330 VA: 0x180498B30
	public static TimeZoneInfo get_Local() { }
	// RVA: 0x498C10 Offset: 0x497410 VA: 0x180498C10
	private static extern int readlink(string path, byte[] buffer, int buflen) { }
	// RVA: 0x498CD0 Offset: 0x4974D0 VA: 0x180498CD0
	private static string readlink(string path) { }
	// RVA: 0x498EB0 Offset: 0x4976B0 VA: 0x180498EB0
	private static bool TryGetNameFromPath(string path, out string name) { }
	// RVA: 0x499250 Offset: 0x497A50 VA: 0x180499250
	private static TimeZoneInfo CreateLocal() { }
	// RVA: 0x499780 Offset: 0x497F80 VA: 0x180499780
	private static void GetSystemTimeZonesCore(List<TimeZoneInfo> systemTimeZones) { }
	// RVA: 0x499B10 Offset: 0x498310 VA: 0x180499B10
	public static TimeZoneInfo get_Utc() { }
	// RVA: 0x499BE0 Offset: 0x4983E0 VA: 0x180499BE0
	private static string get_TimeZoneDirectory() { }
	// RVA: 0x499C80 Offset: 0x498480 VA: 0x180499C80
	private static string TrimSpecial(string str) { }
	// RVA: 0x499DE0 Offset: 0x4985E0 VA: 0x180499DE0
	private static RegistryKey get_TimeZoneKey() { }
	// RVA: 0x499EE0 Offset: 0x4986E0 VA: 0x180499EE0
	private static RegistryKey get_LocalZoneKey() { }
	// RVA: 0x499FE0 Offset: 0x4987E0 VA: 0x180499FE0
	private static bool TryAddTicks(DateTime date, long ticks, out DateTime result, DateTimeKind kind = 0) { }
	// RVA: 0x49A190 Offset: 0x498990 VA: 0x18049A190
	public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone) { }
	// RVA: 0x49A490 Offset: 0x498C90 VA: 0x18049A490
	private DateTime ConvertTimeFromUtc(DateTime dateTime) { }
	// RVA: 0x49A670 Offset: 0x498E70 VA: 0x18049A670
	public static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo destinationTimeZone) { }
	// RVA: 0x49A730 Offset: 0x498F30 VA: 0x18049A730
	internal static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfoOptions flags) { }
	// RVA: 0x49A770 Offset: 0x498F70 VA: 0x18049A770
	public static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone) { }
	// RVA: 0x49A780 Offset: 0x498F80 VA: 0x18049A780
	private static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfoOptions flags) { }
	// RVA: 0x49A9B0 Offset: 0x4991B0 VA: 0x18049A9B0
	internal static TimeSpan GetDateTimeNowUtcOffsetFromUtc(DateTime time, out bool isAmbiguousLocalDst) { }
	// RVA: 0x49AA20 Offset: 0x499220 VA: 0x18049AA20
	public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName) { }
	// RVA: 0x49AA50 Offset: 0x499250 VA: 0x18049AA50
	public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules) { }
	// RVA: 0x49AA80 Offset: 0x499280 VA: 0x18049AA80
	public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) { }
	// RVA: 0x49AB70 Offset: 0x499370 VA: 0x18049AB70 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x49ACB0 Offset: 0x4994B0 VA: 0x18049ACB0 Slot: 4
	public bool Equals(TimeZoneInfo other) { }
	// RVA: 0x49AD50 Offset: 0x499550 VA: 0x18049AD50
	public static TimeZoneInfo FindSystemTimeZoneById(string id) { }
	// RVA: 0x49AEF0 Offset: 0x4996F0 VA: 0x18049AEF0
	private static TimeZoneInfo FindSystemTimeZoneByFileName(string id, string filepath) { }
	// RVA: 0x49B080 Offset: 0x499880 VA: 0x18049B080
	private static TimeZoneInfo FromRegistryKey(string id, RegistryKey key) { }
	// RVA: 0x49B550 Offset: 0x499D50 VA: 0x18049B550
	private static void ParseRegTzi(List<TimeZoneInfo.AdjustmentRule> adjustmentRules, int start_year, int end_year, byte[] buffer) { }
	// RVA: 0x49B900 Offset: 0x49A100 VA: 0x18049B900
	public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules() { }
	// RVA: 0x49B9E0 Offset: 0x49A1E0 VA: 0x18049B9E0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x49BB40 Offset: 0x49A340 VA: 0x18049BB40 Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x49BCB0 Offset: 0x49A4B0 VA: 0x18049BCB0
	public static ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones() { }
	// RVA: 0x49BDB0 Offset: 0x49A5B0 VA: 0x18049BDB0
	public TimeSpan GetUtcOffset(DateTime dateTime) { }
	// RVA: 0x49BDD0 Offset: 0x49A5D0 VA: 0x18049BDD0
	private TimeSpan GetUtcOffset(DateTime dateTime, out bool isDST) { }
	// RVA: 0x49BED0 Offset: 0x49A6D0 VA: 0x18049BED0
	private static TimeSpan GetUtcOffsetHelper(DateTime dateTime, TimeZoneInfo tz, out bool isDST) { }
	// RVA: 0x49C1A0 Offset: 0x49A9A0 VA: 0x18049C1A0
	public bool HasSameRules(TimeZoneInfo other) { }
	// RVA: 0x49C530 Offset: 0x49AD30 VA: 0x18049C530
	public bool IsAmbiguousTime(DateTime dateTime) { }
	// RVA: 0x49C760 Offset: 0x49AF60 VA: 0x18049C760
	private bool IsInDST(TimeZoneInfo.AdjustmentRule rule, DateTime dateTime) { }
	// RVA: 0x49C820 Offset: 0x49B020 VA: 0x18049C820
	private bool IsInDSTForYear(TimeZoneInfo.AdjustmentRule rule, DateTime dateTime, int year) { }
	// RVA: 0x49CA40 Offset: 0x49B240 VA: 0x18049CA40
	public bool IsInvalidTime(DateTime dateTime) { }
	// RVA: 0x49CBE0 Offset: 0x49B3E0 VA: 0x18049CBE0 Slot: 6
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }
	// RVA: 0x49CCB0 Offset: 0x49B4B0 VA: 0x18049CCB0
	private static void Validate(string id, TimeSpan baseUtcOffset, TimeZoneInfo.AdjustmentRule[] adjustmentRules) { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0 Slot: 3
	public override string ToString() { }
	// RVA: 0x49D250 Offset: 0x49BA50 VA: 0x18049D250
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x49D590 Offset: 0x49BD90 VA: 0x18049D590
	private void .ctor(string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) { }
	// RVA: 0x49DBB0 Offset: 0x49C3B0 VA: 0x18049DBB0
	private TimeZoneInfo.AdjustmentRule GetApplicableRule(DateTime dateTime) { }
	// RVA: 0x49DDC0 Offset: 0x49C5C0 VA: 0x18049DDC0
	private bool TryGetTransitionOffset(DateTime dateTime, out TimeSpan offset, out bool isDst) { }
	// RVA: 0x49E090 Offset: 0x49C890 VA: 0x18049E090
	private static DateTime TransitionPoint(TimeZoneInfo.TransitionTime transition, int year) { }
	// RVA: 0x49E290 Offset: 0x49CA90 VA: 0x18049E290
	private static TimeZoneInfo.AdjustmentRule[] ValidateRules(List<TimeZoneInfo.AdjustmentRule> adjustmentRules) { }
	// RVA: 0x49E440 Offset: 0x49CC40 VA: 0x18049E440
	private static TimeZoneInfo BuildFromStream(string id, Stream stream) { }
	// RVA: 0x49E5B0 Offset: 0x49CDB0 VA: 0x18049E5B0
	private static bool ValidTZFile(byte[] buffer, int length) { }
	// RVA: 0x49E790 Offset: 0x49CF90 VA: 0x18049E790
	private static int SwapInt32(int i) { }
	// RVA: 0x49E7C0 Offset: 0x49CFC0 VA: 0x18049E7C0
	private static int ReadBigEndianInt32(byte[] buffer, int start) { }
	// RVA: 0x49E8A0 Offset: 0x49D0A0 VA: 0x18049E8A0
	private static TimeZoneInfo ParseTZBuffer(string id, byte[] buffer, int length) { }
	// RVA: 0x49F3A0 Offset: 0x49DBA0 VA: 0x18049F3A0
	private static Dictionary<int, string> ParseAbbreviations(byte[] buffer, int index, int count) { }
	// RVA: 0x49F5D0 Offset: 0x49DDD0 VA: 0x18049F5D0
	private static Dictionary<int, TimeType> ParseTimesTypes(byte[] buffer, int index, int count, Dictionary<int, string> abbreviations) { }
	// RVA: 0x49F7B0 Offset: 0x49DFB0 VA: 0x18049F7B0
	private static List<KeyValuePair<DateTime, TimeType>> ParseTransitions(byte[] buffer, int index, int count, Dictionary<int, TimeType> time_types) { }
	// RVA: 0x49FB00 Offset: 0x49E300 VA: 0x18049FB00
	private static DateTime DateTimeFromUnixTime(long unix_time) { }
	// RVA: 0x49FBC0 Offset: 0x49E3C0 VA: 0x18049FBC0
	internal static TimeSpan GetLocalUtcOffset(DateTime dateTime, TimeZoneInfoOptions flags) { }
	// RVA: 0x49BDB0 Offset: 0x49A5B0 VA: 0x18049BDB0
	internal TimeSpan GetUtcOffset(DateTime dateTime, TimeZoneInfoOptions flags) { }
	// RVA: 0x49FC00 Offset: 0x49E400 VA: 0x18049FC00
	internal static TimeSpan GetUtcOffsetFromUtc(DateTime time, TimeZoneInfo zone, out bool isDaylightSavings, out bool isAmbiguousLocalDst) { }
	// RVA: 0x49FC70 Offset: 0x49E470 VA: 0x18049FC70
	internal void .ctor() { }
}

// Namespace: 
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
[Serializable]
public sealed class TimeZoneInfo.AdjustmentRule : IEquatable<TimeZoneInfo.AdjustmentRule>, ISerializable, IDeserializationCallback // TypeDefIndex: 235
{
	// Fields
	private DateTime m_dateStart; // 0x10
	private DateTime m_dateEnd; // 0x18
	private TimeSpan m_daylightDelta; // 0x20
	private TimeZoneInfo.TransitionTime m_daylightTransitionStart; // 0x28
	private TimeZoneInfo.TransitionTime m_daylightTransitionEnd; // 0x40
	private TimeSpan m_baseUtcOffsetDelta; // 0x58

	// Methods
	// RVA: 0x27B380 Offset: 0x279B80 VA: 0x18027B380 Slot: 4
	public bool Equals(TimeZoneInfo.AdjustmentRule other) { }
	// RVA: 0x27B530 Offset: 0x279D30 VA: 0x18027B530 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x27B550 Offset: 0x279D50 VA: 0x18027B550
	public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd) { }
	// RVA: 0x27B6C0 Offset: 0x279EC0 VA: 0x18027B6C0
	internal static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd, TimeSpan baseUtcOffsetDelta) { }
	// RVA: 0x27B730 Offset: 0x279F30 VA: 0x18027B730
	private static void ValidateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd) { }
	// RVA: 0x27BB70 Offset: 0x27A370 VA: 0x18027BB70 Slot: 6
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }
	// RVA: 0x27BC80 Offset: 0x27A480 VA: 0x18027BC80 Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27BE30 Offset: 0x27A630 VA: 0x18027BE30
	private void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: 
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
[Serializable]
public struct TimeZoneInfo.TransitionTime : IEquatable<TimeZoneInfo.TransitionTime>, ISerializable, IDeserializationCallback // TypeDefIndex: 236
{
	// Fields
	private DateTime m_timeOfDay; // 0x0
	private byte m_month; // 0x8
	private byte m_week; // 0x9
	private byte m_day; // 0xA
	private DayOfWeek m_dayOfWeek; // 0xC
	private bool m_isFixedDateRule; // 0x10

	// Methods
	// RVA: 0xC3F0 Offset: 0xB7F0 VA: 0x18000C3F0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x27C130 Offset: 0x27A930 VA: 0x18027C130
	public static bool op_Inequality(TimeZoneInfo.TransitionTime t1, TimeZoneInfo.TransitionTime t2) { }
	// RVA: 0xC4D0 Offset: 0xB8D0 VA: 0x18000C4D0 Slot: 4
	public bool Equals(TimeZoneInfo.TransitionTime other) { }
	// RVA: 0xC500 Offset: 0xB900 VA: 0x18000C500 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x27C2D0 Offset: 0x27AAD0 VA: 0x18027C2D0
	public static TimeZoneInfo.TransitionTime CreateFixedDateRule(DateTime timeOfDay, int month, int day) { }
	// RVA: 0x27C370 Offset: 0x27AB70 VA: 0x18027C370
	public static TimeZoneInfo.TransitionTime CreateFloatingDateRule(DateTime timeOfDay, int month, int week, DayOfWeek dayOfWeek) { }
	// RVA: 0x27C420 Offset: 0x27AC20 VA: 0x18027C420
	private static TimeZoneInfo.TransitionTime CreateTransitionTime(DateTime timeOfDay, int month, int week, int day, DayOfWeek dayOfWeek, bool isFixedDateRule) { }
	// RVA: 0x27C4C0 Offset: 0x27ACC0 VA: 0x18027C4C0
	private static void ValidateTransitionTime(DateTime timeOfDay, int month, int week, int day, DayOfWeek dayOfWeek) { }
	// RVA: 0xC510 Offset: 0xB910 VA: 0x18000C510 Slot: 6
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }
	// RVA: 0xC520 Offset: 0xB920 VA: 0x18000C520 Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0xC680 Offset: 0xBA80 VA: 0x18000C680
	private void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: 
internal struct TimeZoneInfo.SYSTEMTIME // TypeDefIndex: 237
{
	// Fields
	internal ushort wYear; // 0x0
	internal ushort wMonth; // 0x2
	internal ushort wDayOfWeek; // 0x4
	internal ushort wDay; // 0x6
	internal ushort wHour; // 0x8
	internal ushort wMinute; // 0xA
	internal ushort wSecond; // 0xC
	internal ushort wMilliseconds; // 0xE
}

// Namespace: 
internal struct TimeZoneInfo.TIME_ZONE_INFORMATION // TypeDefIndex: 238
{
	// Fields
	internal int Bias; // 0x0
	internal string StandardName; // 0x8
	internal TimeZoneInfo.SYSTEMTIME StandardDate; // 0x10
	internal int StandardBias; // 0x20
	internal string DaylightName; // 0x28
	internal TimeZoneInfo.SYSTEMTIME DaylightDate; // 0x30
	internal int DaylightBias; // 0x40
}

// Namespace: 
internal struct TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION // TypeDefIndex: 239
{
	// Fields
	internal TimeZoneInfo.TIME_ZONE_INFORMATION TZI; // 0x0
	internal string TimeZoneKeyName; // 0x48
	internal byte DynamicDaylightTimeDisabled; // 0x50
}

// Namespace: 
[Serializable]
private sealed class TimeZoneInfo.<>c // TypeDefIndex: 240
{
	// Fields
	public static readonly TimeZoneInfo.<>c <>9; // 0x0
	public static Comparison<TimeZoneInfo.AdjustmentRule> <>9__19_0; // 0x8

	// Methods
	// RVA: 0x27B2B0 Offset: 0x279AB0 VA: 0x18027B2B0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x27B330 Offset: 0x279B30 VA: 0x18027B330
	internal int <CreateLocalUnity>b__19_0(TimeZoneInfo.AdjustmentRule rule1, TimeZoneInfo.AdjustmentRule rule2) { }
}

// Namespace: System
[TypeForwardedFromAttribute] // RVA: 0xD9380 Offset: 0xD8780 VA: 0x1800D9380
[Serializable]
public class TimeZoneNotFoundException : Exception // TypeDefIndex: 241
{
	// Methods
	// RVA: 0x49FCA0 Offset: 0x49E4A0 VA: 0x18049FCA0
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x49FD60 Offset: 0x49E560 VA: 0x18049FD60
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x49FE20 Offset: 0x49E620 VA: 0x18049FE20
	public void .ctor() { }
}

// Namespace: System
[Serializable]
public abstract class Type : MemberInfo // TypeDefIndex: 242
{
	// Fields
	public static readonly MemberFilter FilterAttribute; // 0x0
	public static readonly MemberFilter FilterName; // 0x8
	public static readonly MemberFilter FilterNameIgnoreCase; // 0x10
	public static readonly object Missing; // 0x18
	public static readonly char Delimiter; // 0x20
	public static readonly Type[] EmptyTypes; // 0x28
	private static Binder defaultBinder; // 0x30
	private const BindingFlags DefaultLookup = 28; // 0x0
	internal const BindingFlags DeclaredOnlyLookup = 62; // 0x0
	internal RuntimeTypeHandle _impl; // 0x10

	// Properties
	public override MemberTypes MemberType { get; }
	public override Type DeclaringType { get; }
	public virtual MethodBase DeclaringMethod { get; }
	public override Type ReflectedType { get; }
	public static Binder DefaultBinder { get; }
	public abstract override Module Module { get; }
	public abstract Assembly Assembly { get; }
	public virtual RuntimeTypeHandle TypeHandle { get; }
	public abstract string FullName { get; }
	public abstract string Namespace { get; }
	public abstract string AssemblyQualifiedName { get; }
	public abstract Type BaseType { get; }
	public bool IsNested { get; }
	public TypeAttributes Attributes { get; }
	public virtual GenericParameterAttributes GenericParameterAttributes { get; }
	public bool IsNotPublic { get; }
	public bool IsPublic { get; }
	public bool IsNestedPublic { get; }
	public bool IsNestedAssembly { get; }
	public bool IsExplicitLayout { get; }
	public bool IsClass { get; }
	public bool IsInterface { get; }
	public bool IsValueType { get; }
	public bool IsAbstract { get; }
	public bool IsSealed { get; }
	public virtual bool IsEnum { get; }
	public virtual bool IsSerializable { get; }
	public bool IsArray { get; }
	internal virtual bool IsSzArray { get; }
	public virtual bool IsGenericType { get; }
	public virtual bool IsGenericTypeDefinition { get; }
	public virtual bool IsGenericParameter { get; }
	public virtual int GenericParameterPosition { get; }
	public virtual bool ContainsGenericParameters { get; }
	public bool IsByRef { get; }
	public bool IsPointer { get; }
	public bool IsPrimitive { get; }
	public bool IsCOMObject { get; }
	public bool HasElementType { get; }
	public bool IsContextful { get; }
	public bool IsMarshalByRef { get; }
	public abstract Type UnderlyingSystemType { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x4A13F0 Offset: 0x49FBF0 VA: 0x1804A13F0 Slot: 6
	public override MemberTypes get_MemberType() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 8
	public override Type get_DeclaringType() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 15
	public virtual MethodBase get_DeclaringMethod() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 9
	public override Type get_ReflectedType() { }
	// RVA: 0x4A1400 Offset: 0x49FC00 VA: 0x1804A1400
	public static Type GetType(string typeName, Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError) { }
	// RVA: 0x4A1560 Offset: 0x49FD60 VA: 0x1804A1560 Slot: 16
	public virtual Type MakePointerType() { }
	// RVA: 0x4A15B0 Offset: 0x49FDB0 VA: 0x1804A15B0 Slot: 17
	public virtual Type MakeByRefType() { }
	// RVA: 0x4A1600 Offset: 0x49FE00 VA: 0x1804A1600 Slot: 18
	public virtual Type MakeArrayType() { }
	// RVA: 0x4A1650 Offset: 0x49FE50 VA: 0x1804A1650 Slot: 19
	public virtual Type MakeArrayType(int rank) { }
	// RVA: 0x4A16A0 Offset: 0x49FEA0 VA: 0x1804A16A0
	public static TypeCode GetTypeCode(Type type) { }
	// RVA: 0x4A1750 Offset: 0x49FF50 VA: 0x1804A1750 Slot: 20
	protected virtual TypeCode GetTypeCodeImpl() { }
	// RVA: 0x4A1890 Offset: 0x4A0090 VA: 0x1804A1890
	public static Binder get_DefaultBinder() { }
	// RVA: 0x4A1A60 Offset: 0x4A0260 VA: 0x1804A1A60
	private static void CreateBinder() { }
	// RVA: -1 Offset: -1 Slot: 21
	public abstract object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) { }
	// RVA: -1 Offset: -1 Slot: 14
	public abstract override Module get_Module() { }
	// RVA: -1 Offset: -1 Slot: 22
	public abstract Assembly get_Assembly() { }
	// RVA: 0x4A1B40 Offset: 0x4A0340 VA: 0x1804A1B40 Slot: 23
	public virtual RuntimeTypeHandle get_TypeHandle() { }
	// RVA: 0x4A1B90 Offset: 0x4A0390 VA: 0x1804A1B90
	public static RuntimeTypeHandle GetTypeHandle(object o) { }
	// RVA: -1 Offset: -1 Slot: 24
	public abstract string get_FullName() { }
	// RVA: -1 Offset: -1 Slot: 25
	public abstract string get_Namespace() { }
	// RVA: -1 Offset: -1 Slot: 26
	public abstract string get_AssemblyQualifiedName() { }
	// RVA: 0x4A1CB0 Offset: 0x4A04B0 VA: 0x1804A1CB0 Slot: 27
	public virtual int GetArrayRank() { }
	// RVA: -1 Offset: -1 Slot: 28
	public abstract Type get_BaseType() { }
	// RVA: 0x4A1D20 Offset: 0x4A0520 VA: 0x1804A1D20 Slot: 29
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: 0x4A1EC0 Offset: 0x4A06C0 VA: 0x1804A1EC0 Slot: 30
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: 0x4A2060 Offset: 0x4A0860 VA: 0x1804A2060 Slot: 31
	public ConstructorInfo GetConstructor(Type[] types) { }
	// RVA: -1 Offset: -1 Slot: 32
	protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: -1 Offset: -1 Slot: 33
	public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr) { }
	// RVA: 0x4A2090 Offset: 0x4A0890 VA: 0x1804A2090 Slot: 34
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: 0x4A2260 Offset: 0x4A0A60 VA: 0x1804A2260 Slot: 35
	public MethodInfo GetMethod(string name, Type[] types) { }
	// RVA: 0x4A2430 Offset: 0x4A0C30 VA: 0x1804A2430 Slot: 36
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr) { }
	// RVA: 0x4A2530 Offset: 0x4A0D30 VA: 0x1804A2530 Slot: 37
	public MethodInfo GetMethod(string name) { }
	// RVA: -1 Offset: -1 Slot: 38
	protected abstract MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: 0x4A2620 Offset: 0x4A0E20 VA: 0x1804A2620 Slot: 39
	public MethodInfo[] GetMethods() { }
	// RVA: -1 Offset: -1 Slot: 40
	public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr) { }
	// RVA: -1 Offset: -1 Slot: 41
	public abstract FieldInfo GetField(string name, BindingFlags bindingAttr) { }
	// RVA: 0x4A2640 Offset: 0x4A0E40 VA: 0x1804A2640 Slot: 42
	public FieldInfo GetField(string name) { }
	// RVA: -1 Offset: -1 Slot: 43
	public abstract FieldInfo[] GetFields(BindingFlags bindingAttr) { }
	// RVA: -1 Offset: -1 Slot: 44
	public abstract Type[] GetInterfaces() { }
	// RVA: -1 Offset: -1 Slot: 45
	public abstract EventInfo GetEvent(string name, BindingFlags bindingAttr) { }
	// RVA: 0x4A2660 Offset: 0x4A0E60 VA: 0x1804A2660 Slot: 46
	public PropertyInfo GetProperty(string name, Type returnType, Type[] types) { }
	// RVA: 0x4A27A0 Offset: 0x4A0FA0 VA: 0x1804A27A0 Slot: 47
	public PropertyInfo GetProperty(string name, Type returnType) { }
	// RVA: -1 Offset: -1 Slot: 48
	protected abstract PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: -1 Offset: -1 Slot: 49
	public abstract Type GetNestedType(string name, BindingFlags bindingAttr) { }
	// RVA: 0x4A28F0 Offset: 0x4A10F0 VA: 0x1804A28F0 Slot: 50
	public MemberInfo[] GetMember(string name) { }
	// RVA: 0x4A2910 Offset: 0x4A1110 VA: 0x1804A2910 Slot: 51
	public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr) { }
	// RVA: 0x4A2940 Offset: 0x4A1140 VA: 0x1804A2940 Slot: 52
	public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr) { }
	// RVA: 0x4A29B0 Offset: 0x4A11B0 VA: 0x1804A29B0
	public bool get_IsNested() { }
	// RVA: 0x307420 Offset: 0x305C20 VA: 0x180307420 Slot: 53
	public TypeAttributes get_Attributes() { }
	// RVA: 0x4A2A60 Offset: 0x4A1260 VA: 0x1804A2A60 Slot: 54
	public virtual GenericParameterAttributes get_GenericParameterAttributes() { }
	// RVA: 0x4A2AB0 Offset: 0x4A12B0 VA: 0x1804A2AB0 Slot: 55
	public bool get_IsNotPublic() { }
	// RVA: 0x4A2AD0 Offset: 0x4A12D0 VA: 0x1804A2AD0 Slot: 56
	public bool get_IsPublic() { }
	// RVA: 0x4A2AF0 Offset: 0x4A12F0 VA: 0x1804A2AF0 Slot: 57
	public bool get_IsNestedPublic() { }
	// RVA: 0x4A2B10 Offset: 0x4A1310 VA: 0x1804A2B10 Slot: 58
	public bool get_IsNestedAssembly() { }
	// RVA: 0x4A2B40 Offset: 0x4A1340 VA: 0x1804A2B40 Slot: 59
	public bool get_IsExplicitLayout() { }
	// RVA: 0x4A2B60 Offset: 0x4A1360 VA: 0x1804A2B60 Slot: 60
	public bool get_IsClass() { }
	// RVA: 0x4A2BB0 Offset: 0x4A13B0 VA: 0x1804A2BB0 Slot: 61
	public bool get_IsInterface() { }
	// RVA: 0x4A2CA0 Offset: 0x4A14A0 VA: 0x1804A2CA0 Slot: 62
	public bool get_IsValueType() { }
	// RVA: 0x4A2CC0 Offset: 0x4A14C0 VA: 0x1804A2CC0 Slot: 63
	public bool get_IsAbstract() { }
	// RVA: 0x4A2CF0 Offset: 0x4A14F0 VA: 0x1804A2CF0 Slot: 64
	public bool get_IsSealed() { }
	// RVA: 0x4A2D20 Offset: 0x4A1520 VA: 0x1804A2D20 Slot: 65
	public virtual bool get_IsEnum() { }
	// RVA: 0x4A2DD0 Offset: 0x4A15D0 VA: 0x1804A2DD0 Slot: 66
	public virtual bool get_IsSerializable() { }
	// RVA: 0x4A2FF0 Offset: 0x4A17F0 VA: 0x1804A2FF0 Slot: 67
	public bool get_IsArray() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 68
	internal virtual bool get_IsSzArray() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 69
	public virtual bool get_IsGenericType() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 70
	public virtual bool get_IsGenericTypeDefinition() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 71
	public virtual bool get_IsGenericParameter() { }
	// RVA: 0x4A3010 Offset: 0x4A1810 VA: 0x1804A3010 Slot: 72
	public virtual int get_GenericParameterPosition() { }
	// RVA: 0x4A3080 Offset: 0x4A1880 VA: 0x1804A3080 Slot: 73
	public virtual bool get_ContainsGenericParameters() { }
	// RVA: 0x4A31E0 Offset: 0x4A19E0 VA: 0x1804A31E0 Slot: 74
	public virtual Type[] GetGenericParameterConstraints() { }
	// RVA: 0x4A32D0 Offset: 0x4A1AD0 VA: 0x1804A32D0 Slot: 75
	public bool get_IsByRef() { }
	// RVA: 0x173350 Offset: 0x171B50 VA: 0x180173350 Slot: 76
	public bool get_IsPointer() { }
	// RVA: 0x4A32F0 Offset: 0x4A1AF0 VA: 0x1804A32F0 Slot: 77
	public bool get_IsPrimitive() { }
	// RVA: 0x4A3310 Offset: 0x4A1B10 VA: 0x1804A3310 Slot: 78
	public bool get_IsCOMObject() { }
	// RVA: 0x4A3330 Offset: 0x4A1B30 VA: 0x1804A3330 Slot: 79
	public bool get_HasElementType() { }
	// RVA: 0x4A3350 Offset: 0x4A1B50 VA: 0x1804A3350 Slot: 80
	public bool get_IsContextful() { }
	// RVA: 0x4A3370 Offset: 0x4A1B70 VA: 0x1804A3370 Slot: 81
	public bool get_IsMarshalByRef() { }
	// RVA: 0x4A3390 Offset: 0x4A1B90 VA: 0x1804A3390 Slot: 82
	protected virtual bool IsValueTypeImpl() { }
	// RVA: -1 Offset: -1 Slot: 83
	protected abstract TypeAttributes GetAttributeFlagsImpl() { }
	// RVA: -1 Offset: -1 Slot: 84
	protected abstract bool IsArrayImpl() { }
	// RVA: -1 Offset: -1 Slot: 85
	protected abstract bool IsByRefImpl() { }
	// RVA: -1 Offset: -1 Slot: 86
	protected abstract bool IsPointerImpl() { }
	// RVA: -1 Offset: -1 Slot: 87
	protected abstract bool IsPrimitiveImpl() { }
	// RVA: -1 Offset: -1 Slot: 88
	protected abstract bool IsCOMObjectImpl() { }
	// RVA: 0x4A3440 Offset: 0x4A1C40 VA: 0x1804A3440 Slot: 89
	public virtual Type MakeGenericType(Type[] typeArguments) { }
	// RVA: 0x4A34B0 Offset: 0x4A1CB0 VA: 0x1804A34B0 Slot: 90
	protected virtual bool IsContextfulImpl() { }
	// RVA: 0x4A3580 Offset: 0x4A1D80 VA: 0x1804A3580 Slot: 91
	protected virtual bool IsMarshalByRefImpl() { }
	// RVA: -1 Offset: -1 Slot: 92
	public abstract Type GetElementType() { }
	// RVA: 0x4A3650 Offset: 0x4A1E50 VA: 0x1804A3650 Slot: 93
	public virtual Type[] GetGenericArguments() { }
	// RVA: 0x4A36C0 Offset: 0x4A1EC0 VA: 0x1804A36C0 Slot: 94
	public virtual Type GetGenericTypeDefinition() { }
	// RVA: -1 Offset: -1 Slot: 95
	protected abstract bool HasElementTypeImpl() { }
	// RVA: 0x4A3730 Offset: 0x4A1F30 VA: 0x1804A3730
	internal Type GetRootElementType() { }
	// RVA: 0x4A3790 Offset: 0x4A1F90 VA: 0x1804A3790 Slot: 96
	public virtual string[] GetEnumNames() { }
	// RVA: 0x4A3880 Offset: 0x4A2080 VA: 0x1804A3880 Slot: 97
	public virtual Array GetEnumValues() { }
	// RVA: 0x4A3970 Offset: 0x4A2170 VA: 0x1804A3970
	private Array GetEnumRawConstantValues() { }
	// RVA: 0x4A39A0 Offset: 0x4A21A0 VA: 0x1804A39A0
	private void GetEnumData(out string[] enumNames, out Array enumValues) { }
	// RVA: 0x4A3F50 Offset: 0x4A2750 VA: 0x1804A3F50 Slot: 98
	public virtual Type GetEnumUnderlyingType() { }
	// RVA: 0x4A40B0 Offset: 0x4A28B0 VA: 0x1804A40B0 Slot: 99
	public virtual bool IsEnumDefined(object value) { }
	// RVA: 0x4A4750 Offset: 0x4A2F50 VA: 0x1804A4750 Slot: 100
	public virtual string GetEnumName(object value) { }
	// RVA: 0x4A4AE0 Offset: 0x4A32E0 VA: 0x1804A4AE0
	private static int BinarySearch(Array array, object value) { }
	// RVA: 0x4A4C40 Offset: 0x4A3440 VA: 0x1804A4C40
	internal static bool IsIntegerType(Type t) { }
	// RVA: -1 Offset: -1 Slot: 101
	public abstract Type get_UnderlyingSystemType() { }
	// RVA: 0x4A4EF0 Offset: 0x4A36F0 VA: 0x1804A4EF0 Slot: 102
	public virtual bool IsSubclassOf(Type c) { }
	// RVA: 0x4A5000 Offset: 0x4A3800 VA: 0x1804A5000 Slot: 103
	public virtual bool IsInstanceOfType(object o) { }
	// RVA: 0x4A5040 Offset: 0x4A3840 VA: 0x1804A5040 Slot: 104
	public virtual bool IsAssignableFrom(Type c) { }
	// RVA: 0x4A5270 Offset: 0x4A3A70 VA: 0x1804A5270 Slot: 105
	public virtual bool IsEquivalentTo(Type other) { }
	// RVA: 0x4A5310 Offset: 0x4A3B10 VA: 0x1804A5310
	internal bool ImplementInterface(Type ifaceType) { }
	// RVA: 0x4A54F0 Offset: 0x4A3CF0 VA: 0x1804A54F0
	internal string FormatTypeName() { }
	// RVA: 0x4A5510 Offset: 0x4A3D10 VA: 0x1804A5510 Slot: 106
	internal virtual string FormatTypeName(bool serialization) { }
	// RVA: 0x4A5560 Offset: 0x4A3D60 VA: 0x1804A5560 Slot: 3
	public override string ToString() { }
	// RVA: 0x4A55F0 Offset: 0x4A3DF0 VA: 0x1804A55F0 Slot: 0
	public override bool Equals(object o) { }
	// RVA: 0x4A56D0 Offset: 0x4A3ED0 VA: 0x1804A56D0 Slot: 107
	public virtual bool Equals(Type o) { }
	// RVA: 0x33BBF0 Offset: 0x33A3F0 VA: 0x18033BBF0
	public static bool op_Equality(Type left, Type right) { }
	// RVA: 0x37BD50 Offset: 0x37A550 VA: 0x18037BD50
	public static bool op_Inequality(Type left, Type right) { }
	// RVA: 0x4A5730 Offset: 0x4A3F30 VA: 0x1804A5730 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x492860 Offset: 0x491060 VA: 0x180492860 Slot: 108
	public Type GetType() { }
	// RVA: 0x4A5790 Offset: 0x4A3F90 VA: 0x1804A5790
	private static Type internal_from_name(string name, bool throwOnError, bool ignoreCase) { }
	// RVA: 0x4A57A0 Offset: 0x4A3FA0 VA: 0x1804A57A0
	public static Type GetType(string typeName) { }
	// RVA: 0x4A5840 Offset: 0x4A4040 VA: 0x1804A5840
	public static Type GetType(string typeName, bool throwOnError) { }
	// RVA: 0x4A58F0 Offset: 0x4A40F0 VA: 0x1804A58F0
	public static Type GetType(string typeName, bool throwOnError, bool ignoreCase) { }
	// RVA: 0x4A5B30 Offset: 0x4A4330 VA: 0x1804A5B30
	public static Type GetTypeFromHandle(RuntimeTypeHandle handle) { }
	// RVA: 0x4A5BE0 Offset: 0x4A43E0 VA: 0x1804A5BE0
	private static Type internal_from_handle(IntPtr handle) { }
	// RVA: 0x4A5C00 Offset: 0x4A4400 VA: 0x1804A5C00
	private static void .cctor() { }
}

// Namespace: System
public struct TypedReference // TypeDefIndex: 243
{
	// Fields
	private RuntimeTypeHandle type; // 0x0
	private IntPtr Value; // 0x8
	private IntPtr Type; // 0x10

	// Properties
	internal bool IsNull { get; }

	// Methods
	// RVA: 0x4A96D0 Offset: 0x4A7ED0 VA: 0x1804A96D0
	public static TypedReference MakeTypedReference(object target, FieldInfo[] flds) { }
	// RVA: 0x4A9CD0 Offset: 0x4A84D0 VA: 0x1804A9CD0
	private static TypedReference MakeTypedReferenceInternal(object target, FieldInfo[] fields) { }
	// RVA: 0x18F30 Offset: 0x18330 VA: 0x180018F30 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x19000 Offset: 0x18400 VA: 0x180019000 Slot: 0
	public override bool Equals(object o) { }
	// RVA: 0x19010 Offset: 0x18410 VA: 0x180019010
	internal bool get_IsNull() { }
	// RVA: 0x4A9E40 Offset: 0x4A8640 VA: 0x1804A9E40
	public static void SetTypedReference(TypedReference target, object value) { }
}

// Namespace: System
[Serializable]
public sealed class TypeInitializationException : SystemException // TypeDefIndex: 244
{
	// Fields
	private string _typeName; // 0x88

	// Properties
	public string TypeName { get; }

	// Methods
	// RVA: 0x4A6550 Offset: 0x4A4D50 VA: 0x1804A6550
	private void .ctor() { }
	// RVA: 0x4A65E0 Offset: 0x4A4DE0 VA: 0x1804A65E0
	public void .ctor(string fullTypeName, Exception innerException) { }
	// RVA: 0x4A6700 Offset: 0x4A4F00 VA: 0x1804A6700
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x4A67D0 Offset: 0x4A4FD0 VA: 0x1804A67D0
	public string get_TypeName() { }
	// RVA: 0x4A6860 Offset: 0x4A5060 VA: 0x1804A6860 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class TypeLoadException : SystemException, ISerializable // TypeDefIndex: 245
{
	// Fields
	private string ClassName; // 0x88
	private string AssemblyName; // 0x90
	private string MessageArg; // 0x98
	internal int ResourceId; // 0xA0

	// Properties
	public override string Message { get; }

	// Methods
	// RVA: 0x4A6AB0 Offset: 0x4A52B0 VA: 0x1804A6AB0
	public void .ctor() { }
	// RVA: 0x4A6B40 Offset: 0x4A5340 VA: 0x1804A6B40
	public void .ctor(string message) { }
	// RVA: 0x4A6B60 Offset: 0x4A5360 VA: 0x1804A6B60 Slot: 5
	public override string get_Message() { }
	// RVA: 0x4A6B80 Offset: 0x4A5380 VA: 0x1804A6B80
	private void SetMessageField() { }
	// RVA: 0x4A6CC0 Offset: 0x4A54C0 VA: 0x1804A6CC0
	private void .ctor(string className, string assemblyName) { }
	// RVA: 0x4A6D20 Offset: 0x4A5520 VA: 0x1804A6D20
	private void .ctor(string className, string assemblyName, string messageArg, int resourceId) { }
	// RVA: 0x4A6D90 Offset: 0x4A5590 VA: 0x1804A6D90
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x4A6ED0 Offset: 0x4A56D0 VA: 0x1804A6ED0 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public struct UInt16 : IComparable, IFormattable, IConvertible, IComparable<ushort>, IEquatable<ushort> // TypeDefIndex: 246
{
	// Fields
	private ushort m_value; // 0x0
	public const ushort MaxValue = 65535; // 0x0
	public const ushort MinValue = 0; // 0x0

	// Methods
	// RVA: 0x19030 Offset: 0x18430 VA: 0x180019030 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0xA390 Offset: 0x9790 VA: 0x18000A390 Slot: 23
	public int CompareTo(ushort value) { }
	// RVA: 0x19140 Offset: 0x18540 VA: 0x180019140 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0xA270 Offset: 0x9670 VA: 0x18000A270 Slot: 24
	public bool Equals(ushort obj) { }
	// RVA: 0xA3E0 Offset: 0x97E0 VA: 0x18000A3E0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x19150 Offset: 0x18550 VA: 0x180019150 Slot: 3
	public override string ToString() { }
	// RVA: 0x19180 Offset: 0x18580 VA: 0x180019180 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x191B0 Offset: 0x185B0 VA: 0x1800191B0 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x4A9F70 Offset: 0x4A8770 VA: 0x1804A9F70
	public static ushort Parse(string s, IFormatProvider provider) { }
	// RVA: 0x4A9FA0 Offset: 0x4A87A0 VA: 0x1804A9FA0
	public static ushort Parse(string s, NumberStyles style, IFormatProvider provider) { }
	// RVA: 0x4A9FF0 Offset: 0x4A87F0 VA: 0x1804A9FF0
	private static ushort Parse(string s, NumberStyles style, NumberFormatInfo info) { }
	// RVA: 0x191F0 Offset: 0x185F0 VA: 0x1800191F0 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x19200 Offset: 0x18600 VA: 0x180019200 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x19290 Offset: 0x18690 VA: 0x180019290 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x19320 Offset: 0x18720 VA: 0x180019320 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x19450 Offset: 0x18850 VA: 0x180019450 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x19590 Offset: 0x18990 VA: 0x180019590 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0xA3E0 Offset: 0x97E0 VA: 0x18000A3E0 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x196D0 Offset: 0x18AD0 VA: 0x1800196D0 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x19760 Offset: 0x18B60 VA: 0x180019760 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x197F0 Offset: 0x18BF0 VA: 0x1800197F0 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x19880 Offset: 0x18C80 VA: 0x180019880 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x19910 Offset: 0x18D10 VA: 0x180019910 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x199B0 Offset: 0x18DB0 VA: 0x1800199B0 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x19A50 Offset: 0x18E50 VA: 0x180019A50 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x19B80 Offset: 0x18F80 VA: 0x180019B80 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x19B90 Offset: 0x18F90 VA: 0x180019B90 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[Serializable]
public struct UInt32 : IComparable, IFormattable, IConvertible, IComparable<uint>, IEquatable<uint> // TypeDefIndex: 247
{
	// Fields
	private uint m_value; // 0x0
	public const uint MaxValue = 4294967295; // 0x0
	public const uint MinValue = 0; // 0x0

	// Methods
	// RVA: 0x19C60 Offset: 0x19060 VA: 0x180019C60 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0x19D90 Offset: 0x19190 VA: 0x180019D90 Slot: 23
	public int CompareTo(uint value) { }
	// RVA: 0x19DB0 Offset: 0x191B0 VA: 0x180019DB0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x19DC0 Offset: 0x191C0 VA: 0x180019DC0 Slot: 24
	public bool Equals(uint obj) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x19DD0 Offset: 0x191D0 VA: 0x180019DD0 Slot: 3
	public override string ToString() { }
	// RVA: 0x19E00 Offset: 0x19200 VA: 0x180019E00 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x19E30 Offset: 0x19230 VA: 0x180019E30 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x4AA2C0 Offset: 0x4A8AC0 VA: 0x1804AA2C0
	public static uint Parse(string s, IFormatProvider provider) { }
	// RVA: 0x4AA2F0 Offset: 0x4A8AF0 VA: 0x1804AA2F0
	public static uint Parse(string s, NumberStyles style, IFormatProvider provider) { }
	// RVA: 0x4AA340 Offset: 0x4A8B40 VA: 0x1804AA340
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out uint result) { }
	// RVA: 0x19E70 Offset: 0x19270 VA: 0x180019E70 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x19E80 Offset: 0x19280 VA: 0x180019E80 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x19F10 Offset: 0x19310 VA: 0x180019F10 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x1A040 Offset: 0x19440 VA: 0x18001A040 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x1A170 Offset: 0x19570 VA: 0x18001A170 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x1A2A0 Offset: 0x196A0 VA: 0x18001A2A0 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x1A3D0 Offset: 0x197D0 VA: 0x18001A3D0 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x1A500 Offset: 0x19900 VA: 0x18001A500 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x1A630 Offset: 0x19A30 VA: 0x18001A630 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x1A6C0 Offset: 0x19AC0 VA: 0x18001A6C0 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x1A750 Offset: 0x19B50 VA: 0x18001A750 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x1A7F0 Offset: 0x19BF0 VA: 0x18001A7F0 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x1A890 Offset: 0x19C90 VA: 0x18001A890 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x1A9C0 Offset: 0x19DC0 VA: 0x18001A9C0 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x1A9D0 Offset: 0x19DD0 VA: 0x18001A9D0 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[Serializable]
public struct UInt64 : IComparable, IFormattable, IConvertible, IComparable<ulong>, IEquatable<ulong> // TypeDefIndex: 248
{
	// Fields
	private ulong m_value; // 0x0
	public const ulong MaxValue = 18446744073709551615; // 0x0
	public const ulong MinValue = 0; // 0x0

	// Methods
	// RVA: 0x1AAA0 Offset: 0x19EA0 VA: 0x18001AAA0 Slot: 4
	public int CompareTo(object value) { }
	// RVA: 0x1ABD0 Offset: 0x19FD0 VA: 0x18001ABD0 Slot: 23
	public int CompareTo(ulong value) { }
	// RVA: 0x1ABF0 Offset: 0x19FF0 VA: 0x18001ABF0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x18E10 Offset: 0x18210 VA: 0x180018E10 Slot: 24
	public bool Equals(ulong obj) { }
	// RVA: 0x1AC00 Offset: 0x1A000 VA: 0x18001AC00 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1AC10 Offset: 0x1A010 VA: 0x18001AC10 Slot: 3
	public override string ToString() { }
	// RVA: 0x1AC40 Offset: 0x1A040 VA: 0x18001AC40 Slot: 21
	public string ToString(IFormatProvider provider) { }
	// RVA: 0x1AC70 Offset: 0x1A070 VA: 0x18001AC70
	public string ToString(string format) { }
	// RVA: 0x1ACB0 Offset: 0x1A0B0 VA: 0x18001ACB0 Slot: 5
	public string ToString(string format, IFormatProvider provider) { }
	// RVA: 0x4AA540 Offset: 0x4A8D40 VA: 0x1804AA540
	public static ulong Parse(string s, IFormatProvider provider) { }
	// RVA: 0x4AA570 Offset: 0x4A8D70 VA: 0x1804AA570
	public static ulong Parse(string s, NumberStyles style, IFormatProvider provider) { }
	// RVA: 0x1ACF0 Offset: 0x1A0F0 VA: 0x18001ACF0 Slot: 6
	public TypeCode GetTypeCode() { }
	// RVA: 0x1AD00 Offset: 0x1A100 VA: 0x18001AD00 Slot: 7
	private bool System.IConvertible.ToBoolean(IFormatProvider provider) { }
	// RVA: 0x1AD90 Offset: 0x1A190 VA: 0x18001AD90 Slot: 8
	private char System.IConvertible.ToChar(IFormatProvider provider) { }
	// RVA: 0x1AED0 Offset: 0x1A2D0 VA: 0x18001AED0 Slot: 9
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider) { }
	// RVA: 0x1B000 Offset: 0x1A400 VA: 0x18001B000 Slot: 10
	private byte System.IConvertible.ToByte(IFormatProvider provider) { }
	// RVA: 0x1B140 Offset: 0x1A540 VA: 0x18001B140 Slot: 11
	private short System.IConvertible.ToInt16(IFormatProvider provider) { }
	// RVA: 0x1B280 Offset: 0x1A680 VA: 0x18001B280 Slot: 12
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider) { }
	// RVA: 0x1B3C0 Offset: 0x1A7C0 VA: 0x18001B3C0 Slot: 13
	private int System.IConvertible.ToInt32(IFormatProvider provider) { }
	// RVA: 0x1B500 Offset: 0x1A900 VA: 0x18001B500 Slot: 14
	private uint System.IConvertible.ToUInt32(IFormatProvider provider) { }
	// RVA: 0x1B640 Offset: 0x1AA40 VA: 0x18001B640 Slot: 15
	private long System.IConvertible.ToInt64(IFormatProvider provider) { }
	// RVA: 0x1E50 Offset: 0x1250 VA: 0x180001E50 Slot: 16
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider) { }
	// RVA: 0x1B780 Offset: 0x1AB80 VA: 0x18001B780 Slot: 17
	private float System.IConvertible.ToSingle(IFormatProvider provider) { }
	// RVA: 0x1B840 Offset: 0x1AC40 VA: 0x18001B840 Slot: 18
	private double System.IConvertible.ToDouble(IFormatProvider provider) { }
	// RVA: 0x1B900 Offset: 0x1AD00 VA: 0x18001B900 Slot: 19
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider) { }
	// RVA: 0x1BA40 Offset: 0x1AE40 VA: 0x18001BA40 Slot: 20
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider) { }
	// RVA: 0x1BA50 Offset: 0x1AE50 VA: 0x18001BA50 Slot: 22
	private object System.IConvertible.ToType(Type type, IFormatProvider provider) { }
}

// Namespace: System
[Serializable]
public class UnauthorizedAccessException : SystemException // TypeDefIndex: 249
{
	// Methods
	// RVA: 0x4107F0 Offset: 0x40EFF0 VA: 0x1804107F0
	public void .ctor() { }
	// RVA: 0x410880 Offset: 0x40F080 VA: 0x180410880
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
[Serializable]
public class UnhandledExceptionEventArgs : EventArgs // TypeDefIndex: 250
{
	// Fields
	private object _Exception; // 0x10
	private bool _IsTerminating; // 0x18

	// Properties
	public object ExceptionObject { get; }

	// Methods
	// RVA: 0x411770 Offset: 0x40FF70 VA: 0x180411770
	public void .ctor(object exception, bool isTerminating) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public object get_ExceptionObject() { }
}

// Namespace: System
[Serializable]
public sealed class UnhandledExceptionEventHandler : MulticastDelegate // TypeDefIndex: 251
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x261A80 Offset: 0x260280 VA: 0x180261A80 Slot: 12
	public virtual void Invoke(object sender, UnhandledExceptionEventArgs e) { }
	// RVA: 0x261F90 Offset: 0x260790 VA: 0x180261F90 Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, UnhandledExceptionEventArgs e, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
[Serializable]
internal class UnitySerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 252
{
	// Fields
	private Type[] m_instantiation; // 0x10
	private int[] m_elementTypes; // 0x18
	private int m_genericParameterPosition; // 0x20
	private Type m_declaringType; // 0x28
	private MethodBase m_declaringMethod; // 0x30
	private string m_data; // 0x38
	private string m_assemblyName; // 0x40
	private int m_unityType; // 0x48

	// Methods
	// RVA: 0x415D80 Offset: 0x414580 VA: 0x180415D80
	internal static void GetUnitySerializationInfo(SerializationInfo info, Missing missing) { }
	// RVA: 0x415E50 Offset: 0x414650 VA: 0x180415E50
	internal static RuntimeType AddElementTypes(SerializationInfo info, RuntimeType type) { }
	// RVA: 0x4161A0 Offset: 0x4149A0 VA: 0x1804161A0
	internal Type MakeElementTypes(Type type) { }
	// RVA: 0x4162C0 Offset: 0x414AC0 VA: 0x1804162C0
	internal static void GetUnitySerializationInfo(SerializationInfo info, RuntimeType type) { }
	// RVA: 0x416820 Offset: 0x415020 VA: 0x180416820
	internal static void GetUnitySerializationInfo(SerializationInfo info, int unityType, string data, RuntimeAssembly assembly) { }
	// RVA: 0x416A60 Offset: 0x415260 VA: 0x180416A60
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x416D50 Offset: 0x415550 VA: 0x180416D50
	private void ThrowInsufficientInformation(string field) { }
	// RVA: 0x416DF0 Offset: 0x4155F0 VA: 0x180416DF0 Slot: 6
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x416E60 Offset: 0x415660 VA: 0x180416E60 Slot: 7
	public virtual object GetRealObject(StreamingContext context) { }
}

// Namespace: System
internal struct UnSafeCharBuffer // TypeDefIndex: 253
{
	// Fields
	private char* m_buffer; // 0x0
	private int m_totalSize; // 0x8
	private int m_length; // 0xC

	// Methods
	// RVA: 0x14B50 Offset: 0x13F50 VA: 0x180014B50
	public void .ctor(char* buffer, int bufferSize) { }
	// RVA: 0x14B60 Offset: 0x13F60 VA: 0x180014B60
	public void AppendString(string stringToAppend) { }
}

// Namespace: System
[Serializable]
public sealed class Version : ICloneable, IComparable, IComparable<Version>, IEquatable<Version> // TypeDefIndex: 254
{
	// Fields
	private int _Major; // 0x10
	private int _Minor; // 0x14
	private int _Build; // 0x18
	private int _Revision; // 0x1C
	private static readonly char[] SeparatorsArray; // 0x0

	// Methods
	// RVA: 0x418A70 Offset: 0x417270 VA: 0x180418A70
	public void .ctor(int major, int minor, int build, int revision) { }
	// RVA: 0x418C40 Offset: 0x417440 VA: 0x180418C40
	public void .ctor() { }
	// RVA: 0x418C50 Offset: 0x417450 VA: 0x180418C50 Slot: 4
	public object Clone() { }
	// RVA: 0x418D00 Offset: 0x417500 VA: 0x180418D00 Slot: 5
	public int CompareTo(object version) { }
	// RVA: 0x418ED0 Offset: 0x4176D0 VA: 0x180418ED0 Slot: 6
	public int CompareTo(Version value) { }
	// RVA: 0x419060 Offset: 0x417860 VA: 0x180419060 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x4191E0 Offset: 0x4179E0 VA: 0x1804191E0 Slot: 7
	public bool Equals(Version obj) { }
	// RVA: 0x4192C0 Offset: 0x417AC0 VA: 0x1804192C0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x4192F0 Offset: 0x417AF0 VA: 0x1804192F0 Slot: 3
	public override string ToString() { }
	// RVA: 0x419420 Offset: 0x417C20 VA: 0x180419420
	public string ToString(int fieldCount) { }
	// RVA: 0x4198E0 Offset: 0x4180E0 VA: 0x1804198E0
	private static void AppendPositiveNumber(int num, StringBuilder sb) { }
	// RVA: 0x419980 Offset: 0x418180 VA: 0x180419980
	public static bool op_Equality(Version v1, Version v2) { }
	// RVA: 0x419A80 Offset: 0x418280 VA: 0x180419A80
	public static bool op_Inequality(Version v1, Version v2) { }
	// RVA: 0x419B30 Offset: 0x418330 VA: 0x180419B30
	private static void .cctor() { }
}

// Namespace: System
public sealed class AppDomain : MarshalByRefObject // TypeDefIndex: 255
{
	// Fields
	private IntPtr _mono_app_domain; // 0x18
	private static string _process_guid; // 0x0
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static Dictionary<string, object> type_resolve_in_progress; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static Dictionary<string, object> assembly_resolve_in_progress; // 0x80000008
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static Dictionary<string, object> assembly_resolve_in_progress_refonly; // 0x80000010
	private object _evidence; // 0x20
	private object _granted; // 0x28
	private int _principalPolicy; // 0x30
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static object _principal; // 0x80000018
	private static AppDomain default_domain; // 0x8
	private AssemblyLoadEventHandler AssemblyLoad; // 0x38
	private ResolveEventHandler AssemblyResolve; // 0x40
	private EventHandler DomainUnload; // 0x48
	private EventHandler ProcessExit; // 0x50
	private ResolveEventHandler ResourceResolve; // 0x58
	private ResolveEventHandler TypeResolve; // 0x60
	private UnhandledExceptionEventHandler UnhandledException; // 0x68
	private EventHandler<FirstChanceExceptionEventArgs> FirstChanceException; // 0x70
	private object _domain_manager; // 0x78
	private ResolveEventHandler ReflectionOnlyAssemblyResolve; // 0x80
	private object _activation; // 0x88
	private object _applicationIdentity; // 0x90
	private List<string> compatibility_switch; // 0x98

	// Properties
	public static AppDomain CurrentDomain { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x2CD0F0 Offset: 0x2CB8F0 VA: 0x1802CD0F0
	private string getFriendlyName() { }
	// RVA: 0x2CD110 Offset: 0x2CB910 VA: 0x1802CD110
	private static AppDomain getCurDomain() { }
	// RVA: 0x2CD110 Offset: 0x2CB910 VA: 0x1802CD110
	public static AppDomain get_CurrentDomain() { }
	// RVA: 0x2CD160 Offset: 0x2CB960 VA: 0x1802CD160
	private Assembly[] GetAssemblies(bool refOnly) { }
	// RVA: 0x2CD160 Offset: 0x2CB960 VA: 0x1802CD160 Slot: 6
	public Assembly[] GetAssemblies() { }
	// RVA: 0x2CD220 Offset: 0x2CBA20 VA: 0x1802CD220 Slot: 7
	public object GetData(string name) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 5
	public override object InitializeLifetimeService() { }
	// RVA: 0x2CD380 Offset: 0x2CBB80 VA: 0x1802CD380
	internal Assembly LoadAssembly(string assemblyRef, Evidence securityEvidence, bool refOnly) { }
	// RVA: 0x2CD590 Offset: 0x2CBD90 VA: 0x1802CD590 Slot: 8
	public Assembly Load(string assemblyString) { }
	// RVA: 0x2CD6D0 Offset: 0x2CBED0 VA: 0x1802CD6D0
	internal Assembly Load(string assemblyString, Evidence assemblySecurity, bool refonly) { }
	// RVA: 0x2CD830 Offset: 0x2CC030 VA: 0x1802CD830
	private static AppDomain InternalSetDomainByID(int domain_id) { }
	// RVA: 0x2CD840 Offset: 0x2CC040 VA: 0x1802CD840
	private static AppDomain InternalSetDomain(AppDomain context) { }
	// RVA: 0x2CD850 Offset: 0x2CC050 VA: 0x1802CD850
	internal static void InternalPushDomainRefByID(int domain_id) { }
	// RVA: 0x2CD860 Offset: 0x2CC060 VA: 0x1802CD860
	internal static void InternalPopDomainRef() { }
	// RVA: 0x2CD870 Offset: 0x2CC070 VA: 0x1802CD870
	internal static Context InternalSetContext(Context context) { }
	// RVA: 0x2645E0 Offset: 0x262DE0 VA: 0x1802645E0
	internal static Context InternalGetContext() { }
	// RVA: 0x2645E0 Offset: 0x262DE0 VA: 0x1802645E0
	internal static Context InternalGetDefaultContext() { }
	// RVA: 0x2CD880 Offset: 0x2CC080 VA: 0x1802CD880
	internal static string InternalGetProcessGuid(string newguid) { }
	// RVA: 0x2CD890 Offset: 0x2CC090 VA: 0x1802CD890
	internal static object InvokeInDomainByID(int domain_id, MethodInfo method, object obj, object[] args) { }
	// RVA: 0x2CD900 Offset: 0x2CC100 VA: 0x1802CD900
	internal static string GetProcessGuid() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640
	private static bool InternalIsFinalizingForUnload(int domain_id) { }
	// RVA: 0x2CD9C0 Offset: 0x2CC1C0 VA: 0x1802CD9C0
	public bool IsFinalizingForUnload() { }
	// RVA: 0x2CD9F0 Offset: 0x2CC1F0 VA: 0x1802CD9F0
	private int getDomainID() { }
	// RVA: 0x2CD0F0 Offset: 0x2CB8F0 VA: 0x1802CD0F0 Slot: 3
	public override string ToString() { }
	// RVA: 0x2CDA20 Offset: 0x2CC220 VA: 0x1802CDA20
	private void DoAssemblyLoad(Assembly assembly) { }
	// RVA: 0x2CDB60 Offset: 0x2CC360 VA: 0x1802CDB60
	private Assembly DoAssemblyResolve(string name, Assembly requestingAssembly, bool refonly) { }
	// RVA: 0x2CDF30 Offset: 0x2CC730 VA: 0x1802CDF30
	internal Assembly DoTypeResolve(object name_or_tb) { }
	// RVA: 0x2CE670 Offset: 0x2CCE70 VA: 0x1802CE670
	private void DoDomainUnload() { }
	// RVA: 0x2CE690 Offset: 0x2CCE90 VA: 0x1802CE690
	internal void ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg, out byte[] arrResponse, out CADMethodReturnMessage cadMrm) { }
	// RVA: 0x2CE970 Offset: 0x2CD170 VA: 0x1802CE970 Slot: 9
	public void add_DomainUnload(EventHandler value) { }
	// RVA: 0x2CEA50 Offset: 0x2CD250 VA: 0x1802CEA50 Slot: 10
	public void remove_DomainUnload(EventHandler value) { }
	// RVA: 0x2CEB30 Offset: 0x2CD330 VA: 0x1802CEB30 Slot: 11
	public void add_ProcessExit(EventHandler value) { }
	// RVA: 0x2CEC10 Offset: 0x2CD410 VA: 0x1802CEC10 Slot: 12
	public void remove_ProcessExit(EventHandler value) { }
	// RVA: 0x2CECF0 Offset: 0x2CD4F0 VA: 0x1802CECF0 Slot: 13
	public void add_UnhandledException(UnhandledExceptionEventHandler value) { }
	// RVA: 0x2CEDD0 Offset: 0x2CD5D0 VA: 0x1802CEDD0 Slot: 14
	public void remove_UnhandledException(UnhandledExceptionEventHandler value) { }
}

// Namespace: System
internal class CLRConfig // TypeDefIndex: 256
{
	// Methods
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640
	internal static bool CheckThrowUnobservedTaskExceptions() { }
}

// Namespace: System
internal static class CompatibilitySwitches // TypeDefIndex: 257
{
	// Fields
	public static readonly bool IsAppEarlierThanSilverlight4; // 0x0
	public static readonly bool IsAppEarlierThanWindowsPhone8; // 0x1
}

// Namespace: System
public static class Environment // TypeDefIndex: 258
{
	// Fields
	private const int mono_corlib_version = 1051100001; // 0xABF0E
	private static string nl; // 0xA17960

	// Properties
	public static int CurrentManagedThreadId { get; }
	public static bool HasShutdownStarted { get; }
	public static string NewLine { get; }
	private static PlatformID Platform { get; }
	public static string StackTrace { get; }
	public static int TickCount { get; }
	public static bool Is64BitProcess { get; }
	public static int ProcessorCount { get; }
	internal static bool IsRunningOnWindows { get; }

	// Methods
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	internal static string GetResourceString(string key) { }
	// RVA: 0x48E3F0 Offset: 0x48CBF0 VA: 0x18048E3F0
	internal static string GetResourceString(string key, object[] values) { }
	// RVA: 0x48E4A0 Offset: 0x48CCA0 VA: 0x18048E4A0
	internal static string GetResourceStringEncodingName(int codePage) { }
	// RVA: 0x48E5F0 Offset: 0x48CDF0 VA: 0x18048E5F0
	public static int get_CurrentManagedThreadId() { }
	// RVA: 0x48E620 Offset: 0x48CE20 VA: 0x18048E620
	public static bool get_HasShutdownStarted() { }
	// RVA: 0x48E630 Offset: 0x48CE30 VA: 0x18048E630
	private static string GetNewLine() { }
	// RVA: 0x48E650 Offset: 0x48CE50 VA: 0x18048E650
	public static string get_NewLine() { }
	// RVA: 0x3CC210 Offset: 0x3CAA10 VA: 0x1803CC210
	private static PlatformID get_Platform() { }
	// RVA: 0x48E700 Offset: 0x48CF00 VA: 0x18048E700
	public static string get_StackTrace() { }
	// RVA: 0x48E7B0 Offset: 0x48CFB0 VA: 0x18048E7B0
	public static int get_TickCount() { }
	// RVA: 0x48E7F0 Offset: 0x48CFF0 VA: 0x18048E7F0
	public static void Exit(int exitCode) { }
	// RVA: 0x48E800 Offset: 0x48D000 VA: 0x18048E800
	public static string ExpandEnvironmentVariables(string name) { }
	// RVA: 0x48EB60 Offset: 0x48D360 VA: 0x18048EB60
	internal static string internalGetEnvironmentVariable_native(IntPtr variable) { }
	// RVA: 0x48EC90 Offset: 0x48D490 VA: 0x18048EC90
	internal static string internalGetEnvironmentVariable(string variable) { }
	// RVA: 0x48EF30 Offset: 0x48D730 VA: 0x18048EF30
	public static string GetEnvironmentVariable(string variable) { }
	// RVA: 0x48EF40 Offset: 0x48D740 VA: 0x18048EF40
	private static Hashtable GetEnvironmentVariablesNoCase() { }
	// RVA: 0x48F2F0 Offset: 0x48DAF0 VA: 0x18048F2F0
	public static string GetFolderPath(Environment.SpecialFolder folder) { }
	// RVA: 0x48F2F0 Offset: 0x48DAF0 VA: 0x18048F2F0
	private static string GetWindowsFolderPath(int folder) { }
	// RVA: 0x48F2F0 Offset: 0x48DAF0 VA: 0x18048F2F0
	public static string GetFolderPath(Environment.SpecialFolder folder, Environment.SpecialFolderOption option) { }
	// RVA: 0x48F3D0 Offset: 0x48DBD0 VA: 0x18048F3D0
	private static string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback) { }
	// RVA: 0x48F920 Offset: 0x48E120 VA: 0x18048F920
	internal static string UnixGetFolderPath(Environment.SpecialFolder folder, Environment.SpecialFolderOption option) { }
	// RVA: 0x48FDB0 Offset: 0x48E5B0 VA: 0x18048FDB0
	public static void FailFast(string message, Exception exception) { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20
	public static bool get_Is64BitProcess() { }
	// RVA: 0x48FE10 Offset: 0x48E610 VA: 0x18048FE10
	public static int get_ProcessorCount() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20
	internal static bool get_IsRunningOnWindows() { }
	// RVA: 0x48FE30 Offset: 0x48E630 VA: 0x18048FE30
	private static string[] GetEnvironmentVariableNames() { }
	// RVA: 0x48FE40 Offset: 0x48E640 VA: 0x18048FE40
	internal static string GetMachineConfigPath() { }
	// RVA: 0x48FE50 Offset: 0x48E650 VA: 0x18048FE50
	internal static string internalGetHome() { }
	// RVA: 0x48FED0 Offset: 0x48E6D0 VA: 0x18048FED0
	internal static int GetPageSize() { }
	// RVA: 0x48FEE0 Offset: 0x48E6E0 VA: 0x18048FEE0
	internal static string GetStackTrace(Exception e, bool needFileInfo) { }
}

// Namespace: 
public enum Environment.SpecialFolder // TypeDefIndex: 259
{
	// Fields
	public int value__; // 0x0
	public const Environment.SpecialFolder MyDocuments = 5; // 0x0
	public const Environment.SpecialFolder Desktop = 0; // 0x0
	public const Environment.SpecialFolder MyComputer = 17; // 0x0
	public const Environment.SpecialFolder Programs = 2; // 0x0
	public const Environment.SpecialFolder Personal = 5; // 0x0
	public const Environment.SpecialFolder Favorites = 6; // 0x0
	public const Environment.SpecialFolder Startup = 7; // 0x0
	public const Environment.SpecialFolder Recent = 8; // 0x0
	public const Environment.SpecialFolder SendTo = 9; // 0x0
	public const Environment.SpecialFolder StartMenu = 11; // 0x0
	public const Environment.SpecialFolder MyMusic = 13; // 0x0
	public const Environment.SpecialFolder DesktopDirectory = 16; // 0x0
	public const Environment.SpecialFolder Templates = 21; // 0x0
	public const Environment.SpecialFolder ApplicationData = 26; // 0x0
	public const Environment.SpecialFolder LocalApplicationData = 28; // 0x0
	public const Environment.SpecialFolder InternetCache = 32; // 0x0
	public const Environment.SpecialFolder Cookies = 33; // 0x0
	public const Environment.SpecialFolder History = 34; // 0x0
	public const Environment.SpecialFolder CommonApplicationData = 35; // 0x0
	public const Environment.SpecialFolder System = 37; // 0x0
	public const Environment.SpecialFolder ProgramFiles = 38; // 0x0
	public const Environment.SpecialFolder MyPictures = 39; // 0x0
	public const Environment.SpecialFolder CommonProgramFiles = 43; // 0x0
	public const Environment.SpecialFolder MyVideos = 14; // 0x0
	public const Environment.SpecialFolder NetworkShortcuts = 19; // 0x0
	public const Environment.SpecialFolder Fonts = 20; // 0x0
	public const Environment.SpecialFolder CommonStartMenu = 22; // 0x0
	public const Environment.SpecialFolder CommonPrograms = 23; // 0x0
	public const Environment.SpecialFolder CommonStartup = 24; // 0x0
	public const Environment.SpecialFolder CommonDesktopDirectory = 25; // 0x0
	public const Environment.SpecialFolder PrinterShortcuts = 27; // 0x0
	public const Environment.SpecialFolder Windows = 36; // 0x0
	public const Environment.SpecialFolder UserProfile = 40; // 0x0
	public const Environment.SpecialFolder SystemX86 = 41; // 0x0
	public const Environment.SpecialFolder ProgramFilesX86 = 42; // 0x0
	public const Environment.SpecialFolder CommonProgramFilesX86 = 44; // 0x0
	public const Environment.SpecialFolder CommonTemplates = 45; // 0x0
	public const Environment.SpecialFolder CommonDocuments = 46; // 0x0
	public const Environment.SpecialFolder CommonAdminTools = 47; // 0x0
	public const Environment.SpecialFolder AdminTools = 48; // 0x0
	public const Environment.SpecialFolder CommonMusic = 53; // 0x0
	public const Environment.SpecialFolder CommonPictures = 54; // 0x0
	public const Environment.SpecialFolder CommonVideos = 55; // 0x0
	public const Environment.SpecialFolder Resources = 56; // 0x0
	public const Environment.SpecialFolder LocalizedResources = 57; // 0x0
	public const Environment.SpecialFolder CommonOemLinks = 58; // 0x0
	public const Environment.SpecialFolder CDBurning = 59; // 0x0
}

// Namespace: 
public enum Environment.SpecialFolderOption // TypeDefIndex: 260
{
	// Fields
	public int value__; // 0x0
	public const Environment.SpecialFolderOption None = 0; // 0x0
	public const Environment.SpecialFolderOption DoNotVerify = 16384; // 0x0
	public const Environment.SpecialFolderOption Create = 32768; // 0x0
}

// Namespace: System
internal static class ParseNumbers // TypeDefIndex: 261
{
	// Methods
	// RVA: 0x3155C0 Offset: 0x313DC0 VA: 0x1803155C0
	public static int StringToInt(string value, int fromBase, int flags) { }
	// RVA: 0x3155E0 Offset: 0x313DE0 VA: 0x1803155E0
	public static int StringToInt(string value, int fromBase, int flags, int* parsePos) { }
	// RVA: 0x315A60 Offset: 0x314260 VA: 0x180315A60
	public static long StringToLong(string value, int fromBase, int flags, int* parsePos) { }
	// RVA: 0x315FA0 Offset: 0x3147A0 VA: 0x180315FA0
	public static string IntToString(int value, int toBase, int width, char paddingChar, int flags) { }
	// RVA: 0x316380 Offset: 0x314B80 VA: 0x180316380
	private static void EndianSwap(ref byte[] value) { }
	// RVA: 0x316490 Offset: 0x314C90 VA: 0x180316490
	private static StringBuilder ConvertToBase2(byte[] value) { }
	// RVA: 0x316600 Offset: 0x314E00 VA: 0x180316600
	private static StringBuilder ConvertToBase8(byte[] value) { }
	// RVA: 0x316800 Offset: 0x315000 VA: 0x180316800
	private static StringBuilder ConvertToBase16(byte[] value) { }
}

// Namespace: System
internal class MonoTypeInfo // TypeDefIndex: 262
{
	// Fields
	public string full_name; // 0x10
	public MonoCMethod default_ctor; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System
internal sealed class TypeNameParser // TypeDefIndex: 263
{
	// Methods
	// RVA: 0x4A7300 Offset: 0x4A5B00 VA: 0x1804A7300
	internal static Type GetType(string typeName, Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError, bool ignoreCase, ref StackCrawlMark stackMark) { }
}

// Namespace: System
[Serializable]
public sealed class AppDomainSetup // TypeDefIndex: 264
{
	// Fields
	private string application_base; // 0x10
	private string application_name; // 0x18
	private string cache_path; // 0x20
	private string configuration_file; // 0x28
	private string dynamic_base; // 0x30
	private string license_file; // 0x38
	private string private_bin_path; // 0x40
	private string private_bin_path_probe; // 0x48
	private string shadow_copy_directories; // 0x50
	private string shadow_copy_files; // 0x58
	private bool publisher_policy; // 0x60
	private bool path_changed; // 0x61
	private int loader_optimization; // 0x64
	private bool disallow_binding_redirects; // 0x68
	private bool disallow_code_downloads; // 0x69
	private object _activationArguments; // 0x70
	private object domain_initializer; // 0x78
	private object application_trust; // 0x80
	private string[] domain_initializer_args; // 0x88
	private bool disallow_appbase_probe; // 0x90
	private byte[] configuration_bytes; // 0x98
	private byte[] serialized_non_primitives; // 0xA0
	private string <TargetFrameworkName>k__BackingField; // 0xA8

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System
public struct ArgIterator // TypeDefIndex: 265
{
	// Fields
	private IntPtr sig; // 0x0
	private IntPtr args; // 0x8
	private int next_arg; // 0x10
	private int num_args; // 0x14

	// Methods
	// RVA: 0xDA80 Offset: 0xCE80 VA: 0x18000DA80 Slot: 0
	public override bool Equals(object o) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System
public class AssemblyLoadEventArgs : EventArgs // TypeDefIndex: 266
{
	// Fields
	private Assembly m_loadedAssembly; // 0x10

	// Methods
	// RVA: 0x2D5E50 Offset: 0x2D4650 VA: 0x1802D5E50
	public void .ctor(Assembly loadedAssembly) { }
}

// Namespace: System
[Serializable]
public sealed class AssemblyLoadEventHandler : MulticastDelegate // TypeDefIndex: 267
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x261A80 Offset: 0x260280 VA: 0x180261A80 Slot: 12
	public virtual void Invoke(object sender, AssemblyLoadEventArgs args) { }
	// RVA: 0x261F90 Offset: 0x260790 VA: 0x180261F90 Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, AssemblyLoadEventArgs args, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
public static class Console // TypeDefIndex: 268
{
	// Fields
	internal static TextWriter stdout; // 0x0
	private static TextWriter stderr; // 0x8
	private static TextReader stdin; // 0x10
	private static Encoding inputEncoding; // 0x18
	private static Encoding outputEncoding; // 0x20
	private static ConsoleCancelEventHandler cancel_event; // 0x28
	private static readonly Console.InternalCancelHandler cancel_handler; // 0x30

	// Methods
	// RVA: 0x2609E0 Offset: 0x25F1E0 VA: 0x1802609E0
	private static void .cctor() { }
	// RVA: 0x260B40 Offset: 0x25F340 VA: 0x180260B40
	private static void SetupStreams(Encoding inputEncoding, Encoding outputEncoding) { }
	// RVA: 0x260F90 Offset: 0x25F790 VA: 0x180260F90
	private static Stream Open(IntPtr handle, FileAccess access, int bufferSize) { }
	// RVA: 0x2611C0 Offset: 0x25F9C0 VA: 0x1802611C0
	public static Stream OpenStandardError(int bufferSize) { }
	// RVA: 0x261290 Offset: 0x25FA90 VA: 0x180261290
	public static Stream OpenStandardInput(int bufferSize) { }
	// RVA: 0x261360 Offset: 0x25FB60 VA: 0x180261360
	public static Stream OpenStandardOutput(int bufferSize) { }
	// RVA: 0x261430 Offset: 0x25FC30 VA: 0x180261430
	public static void SetOut(TextWriter newOut) { }
	// RVA: 0x261500 Offset: 0x25FD00 VA: 0x180261500
	public static ConsoleKeyInfo ReadKey() { }
	// RVA: 0x2615B0 Offset: 0x25FDB0 VA: 0x1802615B0
	public static ConsoleKeyInfo ReadKey(bool intercept) { }
	// RVA: 0x261780 Offset: 0x25FF80 VA: 0x180261780
	internal static void DoConsoleCancelEvent() { }
}

// Namespace: 
private class Console.WindowsConsole // TypeDefIndex: 269
{
	// Fields
	public static bool ctrlHandlerAdded; // 0x0
	private static Console.WindowsConsole.WindowsCancelHandler cancelHandler; // 0x8

	// Methods
	// RVA: 0x26BD00 Offset: 0x26A500 VA: 0x18026BD00
	private static extern int GetConsoleCP() { }
	// RVA: 0x26BD70 Offset: 0x26A570 VA: 0x18026BD70
	private static extern int GetConsoleOutputCP() { }
	// RVA: 0x26BDE0 Offset: 0x26A5E0 VA: 0x18026BDE0
	private static bool DoWindowsConsoleCancelEvent(int keyCode) { }
	// RVA: 0x26BE80 Offset: 0x26A680 VA: 0x18026BE80
	public static int GetInputCodePage() { }
	// RVA: 0x26BF60 Offset: 0x26A760 VA: 0x18026BF60
	public static int GetOutputCodePage() { }
	// RVA: 0x26C040 Offset: 0x26A840 VA: 0x18026C040
	private static void .cctor() { }
}

// Namespace: 
private sealed class Console.WindowsConsole.WindowsCancelHandler : MulticastDelegate // TypeDefIndex: 270
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x27FAD0 Offset: 0x27E2D0 VA: 0x18027FAD0 Slot: 12
	public virtual bool Invoke(int keyCode) { }
	// RVA: 0x27FCF0 Offset: 0x27E4F0 VA: 0x18027FCF0 Slot: 13
	public virtual IAsyncResult BeginInvoke(int keyCode, AsyncCallback callback, object object) { }
	// RVA: 0x27FDB0 Offset: 0x27E5B0 VA: 0x18027FDB0 Slot: 14
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class Console.InternalCancelHandler : MulticastDelegate // TypeDefIndex: 271
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
internal static class ConsoleDriver // TypeDefIndex: 272
{
	// Fields
	internal static IConsoleDriver driver; // 0x0
	private static bool is_console; // 0x8
	private static bool called_isatty; // 0x9

	// Properties
	public static bool IsConsole { get; }

	// Methods
	// RVA: 0x261FD0 Offset: 0x2607D0 VA: 0x180261FD0
	private static void .cctor() { }
	// RVA: 0x262060 Offset: 0x260860 VA: 0x180262060
	private static IConsoleDriver CreateNullConsoleDriver() { }
	// RVA: 0x2620D0 Offset: 0x2608D0 VA: 0x1802620D0
	private static IConsoleDriver CreateWindowsConsoleDriver() { }
	// RVA: 0x262210 Offset: 0x260A10 VA: 0x180262210
	private static IConsoleDriver CreateTermInfoDriver(string term) { }
	// RVA: 0x2622B0 Offset: 0x260AB0 VA: 0x1802622B0
	public static ConsoleKeyInfo ReadKey(bool intercept) { }
	// RVA: 0x262400 Offset: 0x260C00 VA: 0x180262400
	public static bool get_IsConsole() { }
	// RVA: 0x2625F0 Offset: 0x260DF0 VA: 0x1802625F0
	private static bool Isatty(IntPtr handle) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	internal static int InternalKeyAvailable(int ms_timeout) { }
	// RVA: 0x262610 Offset: 0x260E10 VA: 0x180262610
	internal static bool TtySetup(string keypadXmit, string teardown, out byte[] control_characters, out int* address) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640
	internal static bool SetEcho(bool wantEcho) { }
}

// Namespace: System
internal sealed class DelegateData // TypeDefIndex: 273
{
	// Fields
	public Type target_type; // 0x10
	public string method_name; // 0x18
	public bool curried_first_arg; // 0x20

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System
[Serializable]
public abstract class Delegate : ICloneable, ISerializable // TypeDefIndex: 274
{
	// Fields
	private IntPtr method_ptr; // 0x10
	private IntPtr invoke_impl; // 0x18
	private object m_target; // 0x20
	private IntPtr method; // 0x28
	private IntPtr delegate_trampoline; // 0x30
	private IntPtr extra_arg; // 0x38
	private IntPtr method_code; // 0x40
	private MethodInfo method_info; // 0x48
	private MethodInfo original_method_info; // 0x50
	private DelegateData data; // 0x58
	private bool method_is_virtual; // 0x60

	// Properties
	public MethodInfo Method { get; }
	public object Target { get; }

	// Methods
	// RVA: 0x24A4D0 Offset: 0x248CD0 VA: 0x18024A4D0
	public MethodInfo get_Method() { }
	// RVA: 0x2644A0 Offset: 0x262CA0 VA: 0x1802644A0
	private MethodInfo GetVirtualMethod_internal() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public object get_Target() { }
	// RVA: 0x51A9B0 Offset: 0x5191B0 VA: 0x18051A9B0
	internal static Delegate CreateDelegate_internal(Type type, object target, MethodInfo info, bool throwOnBindFailure) { }
	// RVA: 0x51AA00 Offset: 0x519200 VA: 0x18051AA00
	private static bool arg_type_match(Type delArgType, Type argType) { }
	// RVA: 0x51ABE0 Offset: 0x5193E0 VA: 0x18051ABE0
	private static bool arg_type_match_this(Type delArgType, Type argType, bool boxedThis) { }
	// RVA: 0x51AD90 Offset: 0x519590 VA: 0x18051AD90
	private static bool return_type_match(Type delReturnType, Type returnType) { }
	// RVA: 0x51AE90 Offset: 0x519690 VA: 0x18051AE90
	private static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure, bool allowClosed) { }
	// RVA: 0x51B770 Offset: 0x519F70 VA: 0x18051B770
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method) { }
	// RVA: 0x51B790 Offset: 0x519F90 VA: 0x18051B790
	public static Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure) { }
	// RVA: 0x51B7C0 Offset: 0x519FC0 VA: 0x18051B7C0
	public static Delegate CreateDelegate(Type type, MethodInfo method) { }
	// RVA: 0x51B7F0 Offset: 0x519FF0 VA: 0x18051B7F0
	public static Delegate CreateDelegate(Type type, object target, string method) { }
	// RVA: 0x51B980 Offset: 0x51A180 VA: 0x18051B980
	private static MethodInfo GetCandidateMethod(Type type, Type target, string method, BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure) { }
	// RVA: 0x51BE40 Offset: 0x51A640 VA: 0x18051BE40
	public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure) { }
	// RVA: 0x51BFF0 Offset: 0x51A7F0 VA: 0x18051BFF0
	public static Delegate CreateDelegate(Type type, Type target, string method) { }
	// RVA: 0x51C190 Offset: 0x51A990 VA: 0x18051C190
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) { }
	// RVA: 0x51C330 Offset: 0x51AB30 VA: 0x18051C330
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase) { }
	// RVA: 0x2569A0 Offset: 0x2551A0 VA: 0x1802569A0 Slot: 6
	public virtual object Clone() { }
	// RVA: 0x51C4D0 Offset: 0x51ACD0 VA: 0x18051C4D0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x51C710 Offset: 0x51AF10 VA: 0x18051C710 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x51C7F0 Offset: 0x51AFF0 VA: 0x18051C7F0 Slot: 7
	protected virtual MethodInfo GetMethodImpl() { }
	// RVA: 0x51C9B0 Offset: 0x51B1B0 VA: 0x18051C9B0 Slot: 8
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x51CC10 Offset: 0x51B410 VA: 0x18051CC10 Slot: 9
	public virtual Delegate[] GetInvocationList() { }
	// RVA: 0x51CCF0 Offset: 0x51B4F0 VA: 0x18051CCF0
	public static Delegate Combine(Delegate a, Delegate b) { }
	// RVA: 0x51CEE0 Offset: 0x51B6E0 VA: 0x18051CEE0
	public static Delegate Combine(Delegate[] delegates) { }
	// RVA: 0x51D140 Offset: 0x51B940 VA: 0x18051D140 Slot: 10
	protected virtual Delegate CombineImpl(Delegate d) { }
	// RVA: 0x51D1B0 Offset: 0x51B9B0 VA: 0x18051D1B0
	public static Delegate Remove(Delegate source, Delegate value) { }
	// RVA: 0x51D3A0 Offset: 0x51BBA0 VA: 0x18051D3A0 Slot: 11
	protected virtual Delegate RemoveImpl(Delegate d) { }
	// RVA: 0x51A9B0 Offset: 0x5191B0 VA: 0x18051A9B0
	internal static Delegate CreateDelegateNoSecurityCheck(RuntimeType type, object firstArgument, MethodInfo method) { }
	// RVA: 0x51D3D0 Offset: 0x51BBD0 VA: 0x18051D3D0
	internal static MulticastDelegate AllocDelegateLike_internal(Delegate d) { }
}

// Namespace: System
[Serializable]
internal class DelegateSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 275
{
	// Fields
	private Delegate _delegate; // 0x10

	// Methods
	// RVA: 0x472A80 Offset: 0x471280 VA: 0x180472A80
	private void .ctor(SerializationInfo info, StreamingContext ctx) { }
	// RVA: 0x472D10 Offset: 0x471510 VA: 0x180472D10
	public static void GetDelegateData(Delegate instance, SerializationInfo info, StreamingContext ctx) { }
	// RVA: 0x472F60 Offset: 0x471760 VA: 0x180472F60 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 5
	public object GetRealObject(StreamingContext context) { }
}

// Namespace: 
[Serializable]
private class DelegateSerializationHolder.DelegateEntry // TypeDefIndex: 276
{
	// Fields
	private string type; // 0x10
	private string assembly; // 0x18
	private object target; // 0x20
	private string targetTypeAssembly; // 0x28
	private string targetTypeName; // 0x30
	private string methodName; // 0x38
	public DelegateSerializationHolder.DelegateEntry delegateEntry; // 0x40

	// Methods
	// RVA: 0x26C9A0 Offset: 0x26B1A0 VA: 0x18026C9A0
	public void .ctor(Delegate del, string targetLabel) { }
	// RVA: 0x26CB40 Offset: 0x26B340 VA: 0x18026CB40
	public Delegate DeserializeDelegate(SerializationInfo info, int index) { }
}

// Namespace: System
internal static class EmptyArray<T> // TypeDefIndex: 277
{
	// Fields
	public static readonly T[] Value; // 0x0

	// Methods
	// RVA: 0x7E84B0 Offset: 0x7E6CB0 VA: 0x1807E84B0
	private static void .cctor() { }
}

// Namespace: System
internal enum SByteEnum // TypeDefIndex: 278
{
	// Fields
	public sbyte value__; // 0x0
}

// Namespace: System
internal enum Int16Enum // TypeDefIndex: 279
{
	// Fields
	public short value__; // 0x0
}

// Namespace: System
internal enum Int32Enum // TypeDefIndex: 280
{
	// Fields
	public int value__; // 0x0
}

// Namespace: System
internal enum Int64Enum // TypeDefIndex: 281
{
	// Fields
	public long value__; // 0x0
}

// Namespace: System
internal enum ByteEnum // TypeDefIndex: 282
{
	// Fields
	public byte value__; // 0x0
}

// Namespace: System
internal enum UInt16Enum // TypeDefIndex: 283
{
	// Fields
	public ushort value__; // 0x0
}

// Namespace: System
internal enum UInt32Enum // TypeDefIndex: 284
{
	// Fields
	public uint value__; // 0x0
}

// Namespace: System
internal enum UInt64Enum // TypeDefIndex: 285
{
	// Fields
	public ulong value__; // 0x0
}

// Namespace: System
internal interface IConsoleDriver // TypeDefIndex: 286
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract ConsoleKeyInfo ReadKey(bool intercept) { }
}

// Namespace: System
[Serializable]
public struct IntPtr : ISerializable // TypeDefIndex: 287
{
	// Fields
	private void* m_value; // 0x0
	public static readonly IntPtr Zero; // 0x0

	// Properties
	public static int Size { get; }

	// Methods
	// RVA: 0x12CE60 Offset: 0x12C260 VA: 0x18012CE60
	public void .ctor(int value) { }
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	public void .ctor(long value) { }
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	public void .ctor(void* value) { }
	// RVA: 0x12CE70 Offset: 0x12C270 VA: 0x18012CE70
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x343A40 Offset: 0x342240 VA: 0x180343A40
	public static int get_Size() { }
	// RVA: 0x12CF10 Offset: 0x12C310 VA: 0x18012CF10 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x12CFD0 Offset: 0x12C3D0 VA: 0x18012CFD0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x27000 Offset: 0x26400 VA: 0x180027000
	public long ToInt64() { }
	// RVA: 0x1E50 Offset: 0x1250 VA: 0x180001E50
	public void* ToPointer() { }
	// RVA: 0x12CFE0 Offset: 0x12C3E0 VA: 0x18012CFE0 Slot: 3
	public override string ToString() { }
	// RVA: 0x12CFF0 Offset: 0x12C3F0 VA: 0x18012CFF0
	public string ToString(string format) { }
	// RVA: 0x33BBF0 Offset: 0x33A3F0 VA: 0x18033BBF0
	public static bool op_Equality(IntPtr value1, IntPtr value2) { }
	// RVA: 0x37BD50 Offset: 0x37A550 VA: 0x18037BD50
	public static bool op_Inequality(IntPtr value1, IntPtr value2) { }
	// RVA: 0x3F0880 Offset: 0x3EF080 VA: 0x1803F0880
	public static IntPtr op_Explicit(int value) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	public static IntPtr op_Explicit(long value) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	public static IntPtr op_Explicit(void* value) { }
	// RVA: 0x3F0890 Offset: 0x3EF090 VA: 0x1803F0890
	public static int op_Explicit(IntPtr value) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	public static void* op_Explicit(IntPtr value) { }
	// RVA: 0xB620 Offset: 0xAA20 VA: 0x18000B620
	internal bool IsNull() { }
}

// Namespace: System
internal static class KnownTerminals // TypeDefIndex: 288
{
	// Properties
	public static byte[] linux { get; }
	public static byte[] xterm { get; }
	public static byte[] ansi { get; }

	// Methods
	// RVA: 0x330600 Offset: 0x32EE00 VA: 0x180330600
	public static byte[] get_linux() { }
	// RVA: 0x330690 Offset: 0x32EE90 VA: 0x180330690
	public static byte[] get_xterm() { }
	// RVA: 0x330720 Offset: 0x32EF20 VA: 0x180330720
	public static byte[] get_ansi() { }
}

// Namespace: System
[Serializable]
public abstract class MarshalByRefObject // TypeDefIndex: 289
{
	// Fields
	private object _identity; // 0x10

	// Properties
	internal ServerIdentity ObjectIdentity { get; set; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x33A3A0 Offset: 0x338BA0 VA: 0x18033A3A0
	internal ServerIdentity get_ObjectIdentity() { }
	// RVA: 0x33A3F0 Offset: 0x338BF0 VA: 0x18033A3F0
	internal void set_ObjectIdentity(ServerIdentity value) { }
	// RVA: 0x33A440 Offset: 0x338C40 VA: 0x18033A440 Slot: 4
	public virtual ObjRef CreateObjRef(Type requestedType) { }
	// RVA: 0x33A490 Offset: 0x338C90 VA: 0x18033A490 Slot: 5
	public virtual object InitializeLifetimeService() { }
}

// Namespace: System
internal class MonoAsyncCall // TypeDefIndex: 290
{
	// Fields
	private object msg; // 0x10
	private IntPtr cb_method; // 0x18
	private object cb_target; // 0x20
	private object state; // 0x28
	private object res; // 0x30
	private object out_args; // 0x38

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System
internal static class MonoCustomAttrs // TypeDefIndex: 291
{
	// Fields
	private static Assembly corlib; // 0x0
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static Dictionary<Type, AttributeUsageAttribute> usage_cache; // 0x80000000
	private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x8

	// Methods
	// RVA: 0x73B640 Offset: 0x739E40 VA: 0x18073B640
	private static bool IsUserCattrProvider(object obj) { }
	// RVA: 0x73B8F0 Offset: 0x73A0F0 VA: 0x18073B8F0
	internal static object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, bool pseudoAttrs) { }
	// RVA: 0x73BA50 Offset: 0x73A250 VA: 0x18073BA50
	internal static object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType) { }
	// RVA: 0x73BF40 Offset: 0x73A740 VA: 0x18073BF40
	private static object[] GetPseudoCustomAttributes(Type type) { }
	// RVA: 0x73C100 Offset: 0x73A900 VA: 0x18073C100
	internal static object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType, bool inheritedOnly) { }
	// RVA: 0x73C3D0 Offset: 0x73ABD0 VA: 0x18073C3D0
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }
	// RVA: 0x73CEC0 Offset: 0x73B6C0 VA: 0x18073CEC0
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, bool inherit) { }
	// RVA: 0x73D060 Offset: 0x73B860 VA: 0x18073D060
	internal static bool IsDefined(ICustomAttributeProvider obj, Type attributeType, bool inherit) { }
	// RVA: 0x73D370 Offset: 0x73BB70 VA: 0x18073D370
	internal static bool IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType) { }
	// RVA: 0x73D3A0 Offset: 0x73BBA0 VA: 0x18073D3A0
	private static PropertyInfo GetBasePropertyDefinition(MonoProperty property) { }
	// RVA: 0x73D930 Offset: 0x73C130 VA: 0x18073D930
	private static EventInfo GetBaseEventDefinition(MonoEvent evt) { }
	// RVA: 0x73DC60 Offset: 0x73C460 VA: 0x18073DC60
	private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj) { }
	// RVA: 0x73E100 Offset: 0x73C900 VA: 0x18073E100
	private static AttributeUsageAttribute RetrieveAttributeUsageNoCache(Type attributeType) { }
	// RVA: 0x73E3A0 Offset: 0x73CBA0 VA: 0x18073E3A0
	private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType) { }
	// RVA: 0x73E670 Offset: 0x73CE70 VA: 0x18073E670
	private static void .cctor() { }
}

// Namespace: 
private class MonoCustomAttrs.AttributeInfo // TypeDefIndex: 292
{
	// Fields
	private AttributeUsageAttribute _usage; // 0x10
	private int _inheritanceLevel; // 0x18

	// Methods
	// RVA: 0x272680 Offset: 0x270E80 VA: 0x180272680
	public void .ctor(AttributeUsageAttribute usage, int inheritanceLevel) { }
}

// Namespace: System
internal sealed class MonoListItem // TypeDefIndex: 293
{
	// Fields
	private MonoListItem next; // 0x10
	private object data; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System
internal sealed class MonoType : RuntimeType // TypeDefIndex: 294
{}

// Namespace: System
[Serializable]
public abstract class MulticastDelegate : Delegate // TypeDefIndex: 295
{
	// Fields
	private Delegate[] delegates; // 0x68

	// Methods
	// RVA: 0x51C9B0 Offset: 0x51B1B0 VA: 0x18051C9B0 Slot: 8
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x744B30 Offset: 0x743330 VA: 0x180744B30 Slot: 0
	public sealed override bool Equals(object obj) { }
	// RVA: 0x51C710 Offset: 0x51AF10 VA: 0x18051C710 Slot: 2
	public sealed override int GetHashCode() { }
	// RVA: 0x744CF0 Offset: 0x7434F0 VA: 0x180744CF0 Slot: 7
	protected override MethodInfo GetMethodImpl() { }
	// RVA: 0x744D50 Offset: 0x743550 VA: 0x180744D50 Slot: 9
	public sealed override Delegate[] GetInvocationList() { }
	// RVA: 0x744E70 Offset: 0x743670 VA: 0x180744E70 Slot: 10
	protected sealed override Delegate CombineImpl(Delegate follow) { }
	// RVA: 0x7452D0 Offset: 0x743AD0 VA: 0x1807452D0
	private int LastIndexOf(Delegate[] haystack, Delegate[] needle) { }
	// RVA: 0x745440 Offset: 0x743C40 VA: 0x180745440 Slot: 11
	protected sealed override Delegate RemoveImpl(Delegate value) { }
}

// Namespace: System
internal class NullConsoleDriver : IConsoleDriver // TypeDefIndex: 296
{
	// Fields
	private static readonly ConsoleKeyInfo EmptyConsoleKeyInfo; // 0xABF30

	// Methods
	// RVA: 0x749510 Offset: 0x747D10 VA: 0x180749510 Slot: 4
	public ConsoleKeyInfo ReadKey(bool intercept) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x7495C0 Offset: 0x747DC0 VA: 0x1807495C0
	private static void .cctor() { }
}

// Namespace: System
public static class Nullable // TypeDefIndex: 297
{
	// Methods
	// RVA: 0x749760 Offset: 0x747F60 VA: 0x180749760
	public static Type GetUnderlyingType(Type nullableType) { }
}

// Namespace: System
[DebuggerStepThroughAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public struct Nullable<T> // TypeDefIndex: 298
{
	// Fields
	internal T value; // 0x0
	internal bool has_value; // 0x0

	// Properties
	public bool HasValue { get; }
	public T Value { get; }

	// Methods
	// RVA: 0x12E960 Offset: 0x12DD60 VA: 0x18012E960
	public void .ctor(T value) { }
	// RVA: 0x12EE30 Offset: 0x12E230 VA: 0x18012EE30
	public bool get_HasValue() { }
	// RVA: 0x12E980 Offset: 0x12DD80 VA: 0x18012E980
	public T get_Value() { }
	// RVA: 0x12E9D0 Offset: 0x12DDD0 VA: 0x18012E9D0 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x12EA20 Offset: 0x12DE20 VA: 0x18012EA20
	private bool Equals(Nullable<T> other) { }
	// RVA: 0x12EAE0 Offset: 0x12DEE0 VA: 0x18012EAE0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10
	public T GetValueOrDefault() { }
	// RVA: 0x12EB00 Offset: 0x12DF00 VA: 0x18012EB00 Slot: 3
	public override string ToString() { }
	// RVA: 0x7AAC40 Offset: 0x7A9440 VA: 0x1807AAC40
	private static object Box(Nullable<T> o) { }
	// RVA: 0x7AACB0 Offset: 0x7A94B0 VA: 0x1807AACB0
	private static Nullable<T> Unbox(object o) { }
}

// Namespace: System
internal sealed class NumberFormatter // TypeDefIndex: 299
{
	// Fields
	private static readonly ulong* MantissaBitsTable; // 0x0
	private static readonly int* TensExponentTable; // 0x8
	private static readonly char* DigitLowerTable; // 0x10
	private static readonly char* DigitUpperTable; // 0x18
	private static readonly long* TenPowersList; // 0x20
	private static readonly int* DecHexDigits; // 0x28
	private NumberFormatInfo _nfi; // 0x10
	private char[] _cbuf; // 0x18
	private bool _NaN; // 0x20
	private bool _infinity; // 0x21
	private bool _isCustomFormat; // 0x22
	private bool _specifierIsUpper; // 0x23
	private bool _positive; // 0x24
	private char _specifier; // 0x26
	private int _precision; // 0x28
	private int _defPrecision; // 0x2C
	private int _digitsLen; // 0x30
	private int _offset; // 0x34
	private int _decPointPos; // 0x38
	private uint _val1; // 0x3C
	private uint _val2; // 0x40
	private uint _val3; // 0x44
	private uint _val4; // 0x48
	private int _ind; // 0x4C
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static NumberFormatter threadNumberFormatter; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static NumberFormatter userFormatProvider; // 0x80000008

	// Properties
	private CultureInfo CurrentCulture { set; }
	private int IntegerDigits { get; }
	private int DecimalDigits { get; }
	private bool IsFloatingSource { get; }
	private bool IsZero { get; }
	private bool IsZeroInteger { get; }

	// Methods
	// RVA: 0x74E610 Offset: 0x74CE10 VA: 0x18074E610
	private static void GetFormatterTables(out ulong* MantissaBitsTable, out int* TensExponentTable, out char* DigitLowerTable, out char* DigitUpperTable, out long* TenPowersList, out int* DecHexDigits) { }
	// RVA: 0x74E660 Offset: 0x74CE60 VA: 0x18074E660
	private static void .cctor() { }
	// RVA: 0x74E710 Offset: 0x74CF10 VA: 0x18074E710
	private static long GetTenPowerOf(int i) { }
	// RVA: 0x74E7B0 Offset: 0x74CFB0 VA: 0x18074E7B0
	private void InitDecHexDigits(uint value) { }
	// RVA: 0x74E8A0 Offset: 0x74D0A0 VA: 0x18074E8A0
	private void InitDecHexDigits(ulong value) { }
	// RVA: 0x74EA10 Offset: 0x74D210 VA: 0x18074EA10
	private void InitDecHexDigits(uint hi, ulong lo) { }
	// RVA: 0x74EC40 Offset: 0x74D440 VA: 0x18074EC40
	private static uint FastToDecHex(int val) { }
	// RVA: 0x74ED50 Offset: 0x74D550 VA: 0x18074ED50
	private static uint ToDecHex(int val) { }
	// RVA: 0x74EE30 Offset: 0x74D630 VA: 0x18074EE30
	private static int FastDecHexLen(int val) { }
	// RVA: 0x74EE60 Offset: 0x74D660 VA: 0x18074EE60
	private static int DecHexLen(uint val) { }
	// RVA: 0x74EF70 Offset: 0x74D770 VA: 0x18074EF70
	private int DecHexLen() { }
	// RVA: 0x74F0E0 Offset: 0x74D8E0 VA: 0x18074F0E0
	private static int ScaleOrder(long hi) { }
	// RVA: 0x74F1A0 Offset: 0x74D9A0 VA: 0x18074F1A0
	private int InitialFloatingPrecision() { }
	// RVA: 0x74F2B0 Offset: 0x74DAB0 VA: 0x18074F2B0
	private static int ParsePrecision(string format) { }
	// RVA: 0x74F330 Offset: 0x74DB30 VA: 0x18074F330
	private void .ctor(Thread current) { }
	// RVA: 0x74F430 Offset: 0x74DC30 VA: 0x18074F430
	private void Init(string format) { }
	// RVA: 0x74F5B0 Offset: 0x74DDB0 VA: 0x18074F5B0
	private void InitHex(ulong value) { }
	// RVA: 0x74F600 Offset: 0x74DE00 VA: 0x18074F600
	private void Init(string format, int value, int defPrecision) { }
	// RVA: 0x74F6B0 Offset: 0x74DEB0 VA: 0x18074F6B0
	private void Init(string format, uint value, int defPrecision) { }
	// RVA: 0x74F750 Offset: 0x74DF50 VA: 0x18074F750
	private void Init(string format, long value) { }
	// RVA: 0x74F7F0 Offset: 0x74DFF0 VA: 0x18074F7F0
	private void Init(string format, ulong value) { }
	// RVA: 0x74F880 Offset: 0x74E080 VA: 0x18074F880
	private void Init(string format, double value, int defPrecision) { }
	// RVA: 0x74FCA0 Offset: 0x74E4A0 VA: 0x18074FCA0
	private void Init(string format, Decimal value) { }
	// RVA: 0x74FE80 Offset: 0x74E680 VA: 0x18074FE80
	private void ResetCharBuf(int size) { }
	// RVA: 0x74FF30 Offset: 0x74E730 VA: 0x18074FF30
	private void Resize(int len) { }
	// RVA: 0x7500E0 Offset: 0x74E8E0 VA: 0x1807500E0
	private void Append(char c) { }
	// RVA: 0x750160 Offset: 0x74E960 VA: 0x180750160
	private void Append(char c, int cnt) { }
	// RVA: 0x7501F0 Offset: 0x74E9F0 VA: 0x1807501F0
	private void Append(string s) { }
	// RVA: 0x7502A0 Offset: 0x74EAA0 VA: 0x1807502A0
	private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp) { }
	// RVA: 0x7502C0 Offset: 0x74EAC0 VA: 0x1807502C0
	private void set_CurrentCulture(CultureInfo value) { }
	// RVA: 0x750310 Offset: 0x74EB10 VA: 0x180750310
	private int get_IntegerDigits() { }
	// RVA: 0x750320 Offset: 0x74EB20 VA: 0x180750320
	private int get_DecimalDigits() { }
	// RVA: 0x750330 Offset: 0x74EB30 VA: 0x180750330
	private bool get_IsFloatingSource() { }
	// RVA: 0x750350 Offset: 0x74EB50 VA: 0x180750350
	private bool get_IsZero() { }
	// RVA: 0x750360 Offset: 0x74EB60 VA: 0x180750360
	private bool get_IsZeroInteger() { }
	// RVA: 0x750380 Offset: 0x74EB80 VA: 0x180750380
	private void RoundPos(int pos) { }
	// RVA: 0x750390 Offset: 0x74EB90 VA: 0x180750390
	private bool RoundDecimal(int decimals) { }
	// RVA: 0x7503B0 Offset: 0x74EBB0 VA: 0x1807503B0
	private bool RoundBits(int shift) { }
	// RVA: 0x7506B0 Offset: 0x74EEB0 VA: 0x1807506B0
	private void RemoveTrailingZeros() { }
	// RVA: 0x7506E0 Offset: 0x74EEE0 VA: 0x1807506E0
	private void AddOneToDecHex() { }
	// RVA: 0x750860 Offset: 0x74F060 VA: 0x180750860
	private static uint AddOneToDecHex(uint val) { }
	// RVA: 0x7508E0 Offset: 0x74F0E0 VA: 0x1807508E0
	private int CountTrailingZeros() { }
	// RVA: 0x750B40 Offset: 0x74F340 VA: 0x180750B40
	private static int CountTrailingZeros(uint val) { }
	// RVA: 0x750B90 Offset: 0x74F390 VA: 0x180750B90
	private static NumberFormatter GetInstance(IFormatProvider fp) { }
	// RVA: 0x750E30 Offset: 0x74F630 VA: 0x180750E30
	private void Release() { }
	// RVA: 0x750F70 Offset: 0x74F770 VA: 0x180750F70
	public static string NumberToString(string format, uint value, IFormatProvider fp) { }
	// RVA: 0x7510D0 Offset: 0x74F8D0 VA: 0x1807510D0
	public static string NumberToString(string format, int value, IFormatProvider fp) { }
	// RVA: 0x751240 Offset: 0x74FA40 VA: 0x180751240
	public static string NumberToString(string format, ulong value, IFormatProvider fp) { }
	// RVA: 0x7513A0 Offset: 0x74FBA0 VA: 0x1807513A0
	public static string NumberToString(string format, long value, IFormatProvider fp) { }
	// RVA: 0x751510 Offset: 0x74FD10 VA: 0x180751510
	public static string NumberToString(string format, float value, IFormatProvider fp) { }
	// RVA: 0x7516E0 Offset: 0x74FEE0 VA: 0x1807516E0
	public static string NumberToString(string format, double value, IFormatProvider fp) { }
	// RVA: 0x751930 Offset: 0x750130 VA: 0x180751930
	public static string NumberToString(string format, Decimal value, IFormatProvider fp) { }
	// RVA: 0x751A50 Offset: 0x750250 VA: 0x180751A50
	private string IntegerToString(string format, IFormatProvider fp) { }
	// RVA: 0x751C90 Offset: 0x750490 VA: 0x180751C90
	private string NumberToString(string format, NumberFormatInfo nfi) { }
	// RVA: 0x751E70 Offset: 0x750670 VA: 0x180751E70
	private string FormatCurrency(int precision, NumberFormatInfo nfi) { }
	// RVA: 0x752290 Offset: 0x750A90 VA: 0x180752290
	private string FormatDecimal(int precision, NumberFormatInfo nfi) { }
	// RVA: 0x752380 Offset: 0x750B80 VA: 0x180752380
	private string FormatHexadecimal(int precision) { }
	// RVA: 0x752510 Offset: 0x750D10 VA: 0x180752510
	private string FormatFixedPoint(int precision, NumberFormatInfo nfi) { }
	// RVA: 0x7526A0 Offset: 0x750EA0 VA: 0x1807526A0
	private string FormatRoundtrip(double origval, NumberFormatInfo nfi) { }
	// RVA: 0x7527D0 Offset: 0x750FD0 VA: 0x1807527D0
	private string FormatRoundtrip(float origval, NumberFormatInfo nfi) { }
	// RVA: 0x752880 Offset: 0x751080 VA: 0x180752880
	private string FormatGeneral(int precision, NumberFormatInfo nfi) { }
	// RVA: 0x7529F0 Offset: 0x7511F0 VA: 0x1807529F0
	private string FormatNumber(int precision, NumberFormatInfo nfi) { }
	// RVA: 0x752B80 Offset: 0x751380 VA: 0x180752B80
	private string FormatPercent(int precision, NumberFormatInfo nfi) { }
	// RVA: 0x752DA0 Offset: 0x7515A0 VA: 0x180752DA0
	private string FormatExponential(int precision, NumberFormatInfo nfi) { }
	// RVA: 0x752E00 Offset: 0x751600 VA: 0x180752E00
	private string FormatExponential(int precision, NumberFormatInfo nfi, int expDigits) { }
	// RVA: 0x752F90 Offset: 0x751790 VA: 0x180752F90
	private string FormatCustom(string format, NumberFormatInfo nfi) { }
	// RVA: 0x7536F0 Offset: 0x751EF0 VA: 0x1807536F0
	private static void ZeroTrimEnd(StringBuilder sb, bool canEmpty) { }
	// RVA: 0x753790 Offset: 0x751F90 VA: 0x180753790
	private static bool IsZeroOnly(StringBuilder sb) { }
	// RVA: 0x753890 Offset: 0x752090 VA: 0x180753890
	private static void AppendNonNegativeNumber(StringBuilder sb, int v) { }
	// RVA: 0x753A30 Offset: 0x752230 VA: 0x180753A30
	private void AppendIntegerString(int minLength, StringBuilder sb) { }
	// RVA: 0x753AC0 Offset: 0x7522C0 VA: 0x180753AC0
	private void AppendIntegerString(int minLength) { }
	// RVA: 0x753B90 Offset: 0x752390 VA: 0x180753B90
	private void AppendDecimalString(int precision, StringBuilder sb) { }
	// RVA: 0x753BC0 Offset: 0x7523C0 VA: 0x180753BC0
	private void AppendDecimalString(int precision) { }
	// RVA: 0x753BE0 Offset: 0x7523E0 VA: 0x180753BE0
	private void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator) { }
	// RVA: 0x753EF0 Offset: 0x7526F0 VA: 0x180753EF0
	private void AppendExponent(NumberFormatInfo nfi, int exponent, int minDigits) { }
	// RVA: 0x7540F0 Offset: 0x7528F0 VA: 0x1807540F0
	private void AppendOneDigit(int start) { }
	// RVA: 0x7541B0 Offset: 0x7529B0 VA: 0x1807541B0
	private void AppendDigits(int start, int end) { }
	// RVA: 0x7544C0 Offset: 0x752CC0 VA: 0x1807544C0
	private void AppendDigits(int start, int end, StringBuilder sb) { }
	// RVA: 0x7546F0 Offset: 0x752EF0 VA: 0x1807546F0
	private void Multiply10(int count) { }
	// RVA: 0x754700 Offset: 0x752F00 VA: 0x180754700
	private void Divide10(int count) { }
	// RVA: 0x754710 Offset: 0x752F10 VA: 0x180754710
	private NumberFormatter GetClone() { }
}

// Namespace: 
private class NumberFormatter.CustomInfo // TypeDefIndex: 300
{
	// Fields
	public bool UseGroup; // 0x10
	public int DecimalDigits; // 0x14
	public int DecimalPointPos; // 0x18
	public int DecimalTailSharpDigits; // 0x1C
	public int IntegerDigits; // 0x20
	public int IntegerHeadSharpDigits; // 0x24
	public int IntegerHeadPos; // 0x28
	public bool UseExponent; // 0x2C
	public int ExponentDigits; // 0x30
	public int ExponentTailSharpDigits; // 0x34
	public bool ExponentNegativeSignOnly; // 0x38
	public int DividePlaces; // 0x3C
	public int Percents; // 0x40
	public int Permilles; // 0x44

	// Methods
	// RVA: 0x272A20 Offset: 0x271220 VA: 0x180272A20
	public static void GetActiveSection(string format, ref bool positive, bool zero, ref int offset, ref int length) { }
	// RVA: 0x272E70 Offset: 0x271670 VA: 0x180272E70
	public static NumberFormatter.CustomInfo Parse(string format, int offset, int length, NumberFormatInfo nfi) { }
	// RVA: 0x273210 Offset: 0x271A10 VA: 0x180273210
	public string Format(string format, int offset, int length, NumberFormatInfo nfi, bool positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp) { }
	// RVA: 0x2739E0 Offset: 0x2721E0 VA: 0x1802739E0
	public void .ctor() { }
}

// Namespace: System
[Serializable]
public class Object // TypeDefIndex: 301
{
	// Methods
	// RVA: 0x33BBF0 Offset: 0x33A3F0 VA: 0x18033BBF0 Slot: 0
	public virtual bool Equals(object obj) { }
	// RVA: 0x7563F0 Offset: 0x754BF0 VA: 0x1807563F0
	public static bool Equals(object objA, object objB) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 1
	protected virtual void Finalize() { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340 Slot: 2
	public virtual int GetHashCode() { }
	// RVA: 0x492860 Offset: 0x491060 VA: 0x180492860
	public Type GetType() { }
	// RVA: 0x2569A0 Offset: 0x2551A0 VA: 0x1802569A0
	protected object MemberwiseClone() { }
	// RVA: 0x756420 Offset: 0x754C20 VA: 0x180756420 Slot: 3
	public virtual string ToString() { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340
	internal static int InternalGetHashCode(object o) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void FieldGetter(string typeName, string fieldName, ref object val) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void FieldSetter(string typeName, string fieldName, object val) { }
}

// Namespace: System
[Serializable]
public enum PlatformID // TypeDefIndex: 302
{
	// Fields
	public int value__; // 0x0
	public const PlatformID Win32S = 0; // 0x0
	public const PlatformID Win32Windows = 1; // 0x0
	public const PlatformID Win32NT = 2; // 0x0
	public const PlatformID WinCE = 3; // 0x0
	public const PlatformID Unix = 4; // 0x0
	public const PlatformID Xbox = 5; // 0x0
	public const PlatformID MacOSX = 6; // 0x0
}

// Namespace: System
public class ResolveEventArgs : EventArgs // TypeDefIndex: 303
{
	// Fields
	private string m_Name; // 0x10
	private Assembly m_Requesting; // 0x18

	// Methods
	// RVA: 0x36FC40 Offset: 0x36E440 VA: 0x18036FC40
	public void .ctor(string name) { }
	// RVA: 0x36FCE0 Offset: 0x36E4E0 VA: 0x18036FCE0
	public void .ctor(string name, Assembly requestingAssembly) { }
}

// Namespace: System
[Serializable]
public sealed class ResolveEventHandler : MulticastDelegate // TypeDefIndex: 304
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x36FD90 Offset: 0x36E590 VA: 0x18036FD90 Slot: 12
	public virtual Assembly Invoke(object sender, ResolveEventArgs args) { }
	// RVA: 0x261F90 Offset: 0x260790 VA: 0x180261F90 Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, ResolveEventArgs args, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual Assembly EndInvoke(IAsyncResult result) { }
}

// Namespace: System
public struct RuntimeArgumentHandle // TypeDefIndex: 305
{
	// Fields
	internal IntPtr args; // 0x0
}

// Namespace: System
[Serializable]
public struct RuntimeFieldHandle : ISerializable // TypeDefIndex: 306
{
	// Fields
	private IntPtr value; // 0x0

	// Methods
	// RVA: 0x114A0 Offset: 0x108A0 VA: 0x1800114A0
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x114C0 Offset: 0x108C0 VA: 0x1800114C0 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x114E0 Offset: 0x108E0 VA: 0x1800114E0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x3721C0 Offset: 0x3709C0 VA: 0x1803721C0
	private static void SetValueInternal(FieldInfo fi, object obj, object value) { }
	// RVA: 0x3721C0 Offset: 0x3709C0 VA: 0x1803721C0
	internal static void SetValue(RtFieldInfo field, object obj, object value, RuntimeType fieldType, FieldAttributes fieldAttr, RuntimeType declaringType, ref bool domainInitialized) { }
	// RVA: 0x3721D0 Offset: 0x3709D0 VA: 0x1803721D0
	internal static void SetValueDirect(RtFieldInfo field, RuntimeType fieldType, void* pTypedRef, object value, RuntimeType contextType) { }
}

// Namespace: System
[Serializable]
public struct RuntimeMethodHandle : ISerializable // TypeDefIndex: 307
{
	// Fields
	private IntPtr value; // 0x0

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	internal void .ctor(IntPtr v) { }
	// RVA: 0x116A0 Offset: 0x10AA0 VA: 0x1800116A0
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x116C0 Offset: 0x10AC0 VA: 0x1800116C0 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x116E0 Offset: 0x10AE0 VA: 0x1800116E0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x373270 Offset: 0x371A70 VA: 0x180373270
	internal static string ConstructInstantiation(RuntimeMethodInfo method, TypeNameFormatFlags format) { }
	// RVA: 0x11800 Offset: 0x10C00 VA: 0x180011800
	internal bool IsNullHandle() { }
}

// Namespace: System
[Serializable]
public struct RuntimeTypeHandle : ISerializable // TypeDefIndex: 308
{
	// Fields
	private IntPtr value; // 0x0

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	internal void .ctor(IntPtr val) { }
	// RVA: 0x11930 Offset: 0x10D30 VA: 0x180011930
	internal void .ctor(RuntimeType type) { }
	// RVA: 0x11950 Offset: 0x10D50 VA: 0x180011950
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x11970 Offset: 0x10D70 VA: 0x180011970 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x11990 Offset: 0x10D90 VA: 0x180011990 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x378BE0 Offset: 0x3773E0 VA: 0x180378BE0
	internal static TypeAttributes GetAttributes(RuntimeType type) { }
	// RVA: 0x37C5D0 Offset: 0x37ADD0 VA: 0x18037C5D0
	private static int GetMetadataToken(RuntimeType type) { }
	// RVA: 0x37C5D0 Offset: 0x37ADD0 VA: 0x18037C5D0
	internal static int GetToken(RuntimeType type) { }
	// RVA: 0x381B40 Offset: 0x380340 VA: 0x180381B40
	private static Type GetGenericTypeDefinition_impl(RuntimeType type) { }
	// RVA: 0x381B40 Offset: 0x380340 VA: 0x180381B40
	internal static Type GetGenericTypeDefinition(RuntimeType type) { }
	// RVA: 0x378F20 Offset: 0x377720 VA: 0x180378F20
	internal static bool HasElementType(RuntimeType type) { }
	// RVA: 0x37A790 Offset: 0x378F90 VA: 0x18037A790
	internal static bool HasInstantiation(RuntimeType type) { }
	// RVA: 0x3790C0 Offset: 0x3778C0 VA: 0x1803790C0
	internal static bool IsArray(RuntimeType type) { }
	// RVA: 0x378CE0 Offset: 0x3774E0 VA: 0x180378CE0
	internal static bool IsByRef(RuntimeType type) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640
	internal static bool IsComObject(RuntimeType type) { }
	// RVA: 0x378430 Offset: 0x376C30 VA: 0x180378430
	internal static bool IsInstanceOfType(RuntimeType type, object o) { }
	// RVA: 0x378D20 Offset: 0x377520 VA: 0x180378D20
	internal static bool IsPointer(RuntimeType type) { }
	// RVA: 0x378CF0 Offset: 0x3774F0 VA: 0x180378CF0
	internal static bool IsPrimitive(RuntimeType type) { }
	// RVA: 0x381BA0 Offset: 0x3803A0 VA: 0x180381BA0
	internal static bool HasReferences(RuntimeType type) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640
	internal static bool IsComObject(RuntimeType type, bool isGenericCOM) { }
	// RVA: 0x378C10 Offset: 0x377410 VA: 0x180378C10
	internal static bool IsContextful(RuntimeType type) { }
	// RVA: 0x379060 Offset: 0x377860 VA: 0x180379060
	internal static bool IsSzArray(RuntimeType type) { }
	// RVA: 0x381BC0 Offset: 0x3803C0 VA: 0x180381BC0
	internal static bool IsInterface(RuntimeType type) { }
	// RVA: 0x381BF0 Offset: 0x3803F0 VA: 0x180381BF0
	internal static int GetArrayRank(RuntimeType type) { }
	// RVA: 0x3783F0 Offset: 0x376BF0 VA: 0x1803783F0
	internal static RuntimeAssembly GetAssembly(RuntimeType type) { }
	// RVA: 0x3791D0 Offset: 0x3779D0 VA: 0x1803791D0
	internal static RuntimeType GetElementType(RuntimeType type) { }
	// RVA: 0x3783D0 Offset: 0x376BD0 VA: 0x1803783D0
	internal static RuntimeModule GetModule(RuntimeType type) { }
	// RVA: 0x37A540 Offset: 0x378D40 VA: 0x18037A540
	internal static bool IsGenericVariable(RuntimeType type) { }
	// RVA: 0x381C10 Offset: 0x380410 VA: 0x180381C10
	internal static RuntimeType GetBaseType(RuntimeType type) { }
	// RVA: 0x381C40 Offset: 0x380440 VA: 0x180381C40
	internal static bool CanCastTo(RuntimeType type, RuntimeType target) { }
	// RVA: 0x381CB0 Offset: 0x3804B0 VA: 0x180381CB0
	private static bool type_is_assignable_from(Type a, Type b) { }
	// RVA: 0x37A510 Offset: 0x378D10 VA: 0x18037A510
	internal static bool IsGenericTypeDefinition(RuntimeType type) { }
	// RVA: 0x381D20 Offset: 0x380520 VA: 0x180381D20
	internal static IntPtr GetGenericParameterInfo(RuntimeType type) { }
}

// Namespace: System
[Serializable]
public enum StringComparison // TypeDefIndex: 309
{
	// Fields
	public int value__; // 0x0
	public const StringComparison CurrentCulture = 0; // 0x0
	public const StringComparison CurrentCultureIgnoreCase = 1; // 0x0
	public const StringComparison InvariantCulture = 2; // 0x0
	public const StringComparison InvariantCultureIgnoreCase = 3; // 0x0
	public const StringComparison Ordinal = 4; // 0x0
	public const StringComparison OrdinalIgnoreCase = 5; // 0x0
}

// Namespace: System
internal class TermInfoDriver : IConsoleDriver // TypeDefIndex: 310
{
	// Fields
	private static int* native_terminal_size; // 0x0
	private static int terminal_size; // 0x8
	private static readonly string[] locations; // 0x10
	private TermInfoReader reader; // 0x10
	private int cursorLeft; // 0x18
	private int cursorTop; // 0x1C
	private string title; // 0x20
	private string titleFormat; // 0x28
	private bool cursorVisible; // 0x30
	private string csrVisible; // 0x38
	private string csrInvisible; // 0x40
	private string clear; // 0x48
	private string bell; // 0x50
	private string term; // 0x58
	private StreamReader stdin; // 0x60
	private CStreamWriter stdout; // 0x68
	private int windowWidth; // 0x70
	private int windowHeight; // 0x74
	private int bufferHeight; // 0x78
	private int bufferWidth; // 0x7C
	private char[] buffer; // 0x80
	private int readpos; // 0x88
	private int writepos; // 0x8C
	private string keypadXmit; // 0x90
	private string keypadLocal; // 0x98
	private bool inited; // 0xA0
	private object initLock; // 0xA8
	private bool initKeys; // 0xB0
	private string origPair; // 0xB8
	private string origColors; // 0xC0
	private string cursorAddress; // 0xC8
	private ConsoleColor fgcolor; // 0xD0
	private string setfgcolor; // 0xD8
	private string setbgcolor; // 0xE0
	private int maxColors; // 0xE8
	private bool noGetPosition; // 0xEC
	private Hashtable keymap; // 0xF0
	private ByteMatcher rootmap; // 0xF8
	private int rl_startx; // 0x100
	private int rl_starty; // 0x104
	private byte[] control_characters; // 0x108
	private static readonly int[] _consoleColorToAnsiCode; // 0x18
	private char[] echobuf; // 0x110
	private int echon; // 0x118

	// Properties
	public int WindowHeight { get; }
	public int WindowWidth { get; }

	// Methods
	// RVA: 0x39C4F0 Offset: 0x39ACF0 VA: 0x18039C4F0
	private static string TryTermInfoDir(string dir, string term) { }
	// RVA: 0x39C670 Offset: 0x39AE70 VA: 0x18039C670
	private static string SearchTerminfo(string term) { }
	// RVA: 0x39C890 Offset: 0x39B090 VA: 0x18039C890
	private void WriteConsole(string str) { }
	// RVA: 0x39C8C0 Offset: 0x39B0C0 VA: 0x18039C8C0
	public void .ctor(string term) { }
	// RVA: 0x39CEB0 Offset: 0x39B6B0 VA: 0x18039CEB0 Slot: 5
	public void Init() { }
	// RVA: 0x39D970 Offset: 0x39C170 VA: 0x18039D970
	private void IncrementX() { }
	// RVA: 0x39DA00 Offset: 0x39C200 VA: 0x18039DA00
	public void WriteSpecialKey(ConsoleKeyInfo key) { }
	// RVA: 0x39DC00 Offset: 0x39C400 VA: 0x18039DC00
	public void WriteSpecialKey(char c) { }
	// RVA: 0x39DC50 Offset: 0x39C450 VA: 0x18039DC50
	public bool IsSpecialKey(ConsoleKeyInfo key) { }
	// RVA: 0x39DD50 Offset: 0x39C550 VA: 0x18039DD50
	public bool IsSpecialKey(char c) { }
	// RVA: 0x39DDA0 Offset: 0x39C5A0 VA: 0x18039DDA0
	private void GetCursorPosition() { }
	// RVA: 0x39DE90 Offset: 0x39C690 VA: 0x18039DE90
	private void CheckWindowDimensions() { }
	// RVA: 0x39E040 Offset: 0x39C840 VA: 0x18039E040 Slot: 6
	public int get_WindowHeight() { }
	// RVA: 0x39E070 Offset: 0x39C870 VA: 0x18039E070 Slot: 7
	public int get_WindowWidth() { }
	// RVA: 0x39E0A0 Offset: 0x39C8A0 VA: 0x18039E0A0
	private void AddToBuffer(int b) { }
	// RVA: 0x39E1D0 Offset: 0x39C9D0 VA: 0x18039E1D0
	private void AdjustBuffer() { }
	// RVA: 0x39E1F0 Offset: 0x39C9F0 VA: 0x18039E1F0
	private ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt) { }
	// RVA: 0x39E320 Offset: 0x39CB20 VA: 0x18039E320
	private object GetKeyFromBuffer(bool cooked) { }
	// RVA: 0x39E720 Offset: 0x39CF20 VA: 0x18039E720
	private ConsoleKeyInfo ReadKeyInternal(out bool fresh) { }
	// RVA: 0x39E8E0 Offset: 0x39D0E0 VA: 0x18039E8E0
	private bool InputPending() { }
	// RVA: 0x39E920 Offset: 0x39D120 VA: 0x18039E920
	private void QueueEcho(char c) { }
	// RVA: 0x39EA50 Offset: 0x39D250 VA: 0x18039EA50
	private void Echo(ConsoleKeyInfo key) { }
	// RVA: 0x39EC10 Offset: 0x39D410 VA: 0x18039EC10
	private void EchoFlush() { }
	// RVA: 0x39EC60 Offset: 0x39D460 VA: 0x18039EC60
	public int Read([In] [Out] char[] dest, int index, int count) { }
	// RVA: 0x39F040 Offset: 0x39D840 VA: 0x18039F040 Slot: 4
	public ConsoleKeyInfo ReadKey(bool intercept) { }
	// RVA: 0x39F0F0 Offset: 0x39D8F0 VA: 0x18039F0F0 Slot: 8
	public string ReadLine() { }
	// RVA: 0x39F100 Offset: 0x39D900 VA: 0x18039F100
	public string ReadToEnd() { }
	// RVA: 0x39F110 Offset: 0x39D910 VA: 0x18039F110
	private string ReadUntilConditionInternal(bool haltOnNewLine) { }
	// RVA: 0x39F3D0 Offset: 0x39DBD0 VA: 0x18039F3D0 Slot: 9
	public void SetCursorPosition(int left, int top) { }
	// RVA: 0x39F610 Offset: 0x39DE10 VA: 0x18039F610
	private void CreateKeyMap() { }
	// RVA: 0x3A1B40 Offset: 0x3A0340 VA: 0x1803A1B40
	private void InitKeys() { }
	// RVA: 0x3A1EB0 Offset: 0x3A06B0 VA: 0x1803A1EB0
	private void AddStringMapping(TermInfoStrings s) { }
	// RVA: 0x3A2000 Offset: 0x3A0800 VA: 0x1803A2000
	private static void .cctor() { }
}

// Namespace: System
internal static class ParameterizedStrings // TypeDefIndex: 311
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static ParameterizedStrings.LowLevelStack _cachedStack; // 0x80000000

	// Methods
	// RVA: 0x313D60 Offset: 0x312560 VA: 0x180313D60
	public static string Evaluate(string format, ParameterizedStrings.FormatParam[] args) { }
	// RVA: 0x313F50 Offset: 0x312750 VA: 0x180313F50
	private static string EvaluateInternal(string format, ref int pos, ParameterizedStrings.FormatParam[] args, ParameterizedStrings.LowLevelStack stack, ref ParameterizedStrings.FormatParam[] dynamicVars, ref ParameterizedStrings.FormatParam[] staticVars) { }
	// RVA: 0x314B40 Offset: 0x313340 VA: 0x180314B40
	private static bool AsBool(int i) { }
	// RVA: 0x314B50 Offset: 0x313350 VA: 0x180314B50
	private static int AsInt(bool b) { }
	// RVA: 0x314B60 Offset: 0x313360 VA: 0x180314B60
	private static string StringFromAsciiBytes(byte[] buffer, int offset, int length) { }
	// RVA: 0x314C80 Offset: 0x313480 VA: 0x180314C80
	private static extern int snprintf(byte* str, IntPtr size, string format, string arg1) { }
	// RVA: 0x314D70 Offset: 0x313570 VA: 0x180314D70
	private static extern int snprintf(byte* str, IntPtr size, string format, int arg1) { }
	// RVA: 0x314E40 Offset: 0x313640 VA: 0x180314E40
	private static string FormatPrintF(string format, object arg) { }
	// RVA: 0x315120 Offset: 0x313920 VA: 0x180315120
	private static ParameterizedStrings.FormatParam[] GetDynamicOrStaticVariables(char c, ref ParameterizedStrings.FormatParam[] dynamicVars, ref ParameterizedStrings.FormatParam[] staticVars, out int index) { }
}

// Namespace: 
public struct ParameterizedStrings.FormatParam // TypeDefIndex: 312
{
	// Fields
	private readonly int _int32; // 0x0
	private readonly string _string; // 0x8

	// Properties
	public string String { get; }
	public object Object { get; }

	// Methods
	// RVA: 0xBBF0 Offset: 0xAFF0 VA: 0x18000BBF0
	public void .ctor(int value) { }
	// RVA: 0xBC00 Offset: 0xB000 VA: 0x18000BC00
	private void .ctor(int intValue, string stringValue) { }
	// RVA: 0x273ED0 Offset: 0x2726D0 VA: 0x180273ED0
	public static ParameterizedStrings.FormatParam op_Implicit(int value) { }
	// RVA: 0xBC10 Offset: 0xB010 VA: 0x18000BC10
	public string get_String() { }
	// RVA: 0xBC20 Offset: 0xB020 VA: 0x18000BC20
	public object get_Object() { }
}

// Namespace: 
private sealed class ParameterizedStrings.LowLevelStack // TypeDefIndex: 313
{
	// Fields
	private ParameterizedStrings.FormatParam[] _arr; // 0x10
	private int _count; // 0x18

	// Methods
	// RVA: 0x274000 Offset: 0x272800 VA: 0x180274000
	public void .ctor() { }
	// RVA: 0x274080 Offset: 0x272880 VA: 0x180274080
	public ParameterizedStrings.FormatParam Pop() { }
	// RVA: 0x274170 Offset: 0x272970 VA: 0x180274170
	public void Push(ParameterizedStrings.FormatParam item) { }
	// RVA: 0x274280 Offset: 0x272A80 VA: 0x180274280
	public void Clear() { }
}

// Namespace: System
internal class ByteMatcher // TypeDefIndex: 314
{
	// Fields
	private Hashtable map; // 0x10
	private Hashtable starts; // 0x18

	// Methods
	// RVA: 0x245200 Offset: 0x243A00 VA: 0x180245200
	public void AddMapping(TermInfoStrings key, byte[] val) { }
	// RVA: 0x245350 Offset: 0x243B50 VA: 0x180245350
	public bool StartsWith(int c) { }
	// RVA: 0x245410 Offset: 0x243C10 VA: 0x180245410
	public TermInfoStrings Match(char[] buffer, int offset, int length, out int used) { }
	// RVA: 0x245730 Offset: 0x243F30 VA: 0x180245730
	public void .ctor() { }
}

// Namespace: System
internal enum TermInfoNumbers // TypeDefIndex: 315
{
	// Fields
	public int value__; // 0x0
	public const TermInfoNumbers Columns = 0; // 0x0
	public const TermInfoNumbers InitTabs = 1; // 0x0
	public const TermInfoNumbers Lines = 2; // 0x0
	public const TermInfoNumbers LinesOfMemory = 3; // 0x0
	public const TermInfoNumbers MagicCookieGlitch = 4; // 0x0
	public const TermInfoNumbers PaddingBaudRate = 5; // 0x0
	public const TermInfoNumbers VirtualTerminal = 6; // 0x0
	public const TermInfoNumbers WidthStatusLine = 7; // 0x0
	public const TermInfoNumbers NumLabels = 8; // 0x0
	public const TermInfoNumbers LabelHeight = 9; // 0x0
	public const TermInfoNumbers LabelWidth = 10; // 0x0
	public const TermInfoNumbers MaxAttributes = 11; // 0x0
	public const TermInfoNumbers MaximumWindows = 12; // 0x0
	public const TermInfoNumbers MaxColors = 13; // 0x0
	public const TermInfoNumbers MaxPairs = 14; // 0x0
	public const TermInfoNumbers NoColorVideo = 15; // 0x0
	public const TermInfoNumbers BufferCapacity = 16; // 0x0
	public const TermInfoNumbers DotVertSpacing = 17; // 0x0
	public const TermInfoNumbers DotHorzSpacing = 18; // 0x0
	public const TermInfoNumbers MaxMicroAddress = 19; // 0x0
	public const TermInfoNumbers MaxMicroJump = 20; // 0x0
	public const TermInfoNumbers MicroColSize = 21; // 0x0
	public const TermInfoNumbers MicroLineSize = 22; // 0x0
	public const TermInfoNumbers NumberOfPins = 23; // 0x0
	public const TermInfoNumbers OutputResChar = 24; // 0x0
	public const TermInfoNumbers OutputResLine = 25; // 0x0
	public const TermInfoNumbers OutputResHorzInch = 26; // 0x0
	public const TermInfoNumbers OutputResVertInch = 27; // 0x0
	public const TermInfoNumbers PrintRate = 28; // 0x0
	public const TermInfoNumbers WideCharSize = 29; // 0x0
	public const TermInfoNumbers Buttons = 30; // 0x0
	public const TermInfoNumbers BitImageEntwining = 31; // 0x0
	public const TermInfoNumbers BitImageType = 32; // 0x0
	public const TermInfoNumbers Last = 33; // 0x0
}

// Namespace: System
internal class TermInfoReader // TypeDefIndex: 316
{
	// Fields
	private short boolSize; // 0x10
	private short numSize; // 0x12
	private short strOffsets; // 0x14
	private byte[] buffer; // 0x18
	private int booleansOffset; // 0x20

	// Methods
	// RVA: 0x3A2230 Offset: 0x3A0A30 VA: 0x1803A2230
	public void .ctor(string term, string filename) { }
	// RVA: 0x3A2450 Offset: 0x3A0C50 VA: 0x1803A2450
	public void .ctor(string term, byte[] buffer) { }
	// RVA: 0x3A2530 Offset: 0x3A0D30 VA: 0x1803A2530
	private void ReadHeader(byte[] buffer, ref int position) { }
	// RVA: 0x3A2870 Offset: 0x3A1070 VA: 0x1803A2870
	private void ReadNames(byte[] buffer, ref int position) { }
	// RVA: 0x3A2920 Offset: 0x3A1120 VA: 0x1803A2920
	public int Get(TermInfoNumbers number) { }
	// RVA: 0x3A29F0 Offset: 0x3A11F0 VA: 0x1803A29F0
	public string Get(TermInfoStrings tstr) { }
	// RVA: 0x3A2B60 Offset: 0x3A1360 VA: 0x1803A2B60
	public byte[] GetStringBytes(TermInfoStrings tstr) { }
	// RVA: 0x3A2C70 Offset: 0x3A1470 VA: 0x1803A2C70
	private short GetInt16(byte[] buffer, int offset) { }
	// RVA: 0x3A2CF0 Offset: 0x3A14F0 VA: 0x1803A2CF0
	private string GetString(byte[] buffer, int offset) { }
	// RVA: 0x3A2D80 Offset: 0x3A1580 VA: 0x1803A2D80
	private byte[] GetStringBytes(byte[] buffer, int offset) { }
}

// Namespace: System
internal enum TermInfoStrings // TypeDefIndex: 317
{
	// Fields
	public int value__; // 0x0
	public const TermInfoStrings BackTab = 0; // 0x0
	public const TermInfoStrings Bell = 1; // 0x0
	public const TermInfoStrings CarriageReturn = 2; // 0x0
	public const TermInfoStrings ChangeScrollRegion = 3; // 0x0
	public const TermInfoStrings ClearAllTabs = 4; // 0x0
	public const TermInfoStrings ClearScreen = 5; // 0x0
	public const TermInfoStrings ClrEol = 6; // 0x0
	public const TermInfoStrings ClrEos = 7; // 0x0
	public const TermInfoStrings ColumnAddress = 8; // 0x0
	public const TermInfoStrings CommandCharacter = 9; // 0x0
	public const TermInfoStrings CursorAddress = 10; // 0x0
	public const TermInfoStrings CursorDown = 11; // 0x0
	public const TermInfoStrings CursorHome = 12; // 0x0
	public const TermInfoStrings CursorInvisible = 13; // 0x0
	public const TermInfoStrings CursorLeft = 14; // 0x0
	public const TermInfoStrings CursorMemAddress = 15; // 0x0
	public const TermInfoStrings CursorNormal = 16; // 0x0
	public const TermInfoStrings CursorRight = 17; // 0x0
	public const TermInfoStrings CursorToLl = 18; // 0x0
	public const TermInfoStrings CursorUp = 19; // 0x0
	public const TermInfoStrings CursorVisible = 20; // 0x0
	public const TermInfoStrings DeleteCharacter = 21; // 0x0
	public const TermInfoStrings DeleteLine = 22; // 0x0
	public const TermInfoStrings DisStatusLine = 23; // 0x0
	public const TermInfoStrings DownHalfLine = 24; // 0x0
	public const TermInfoStrings EnterAltCharsetMode = 25; // 0x0
	public const TermInfoStrings EnterBlinkMode = 26; // 0x0
	public const TermInfoStrings EnterBoldMode = 27; // 0x0
	public const TermInfoStrings EnterCaMode = 28; // 0x0
	public const TermInfoStrings EnterDeleteMode = 29; // 0x0
	public const TermInfoStrings EnterDimMode = 30; // 0x0
	public const TermInfoStrings EnterInsertMode = 31; // 0x0
	public const TermInfoStrings EnterSecureMode = 32; // 0x0
	public const TermInfoStrings EnterProtectedMode = 33; // 0x0
	public const TermInfoStrings EnterReverseMode = 34; // 0x0
	public const TermInfoStrings EnterStandoutMode = 35; // 0x0
	public const TermInfoStrings EnterUnderlineMode = 36; // 0x0
	public const TermInfoStrings EraseChars = 37; // 0x0
	public const TermInfoStrings ExitAltCharsetMode = 38; // 0x0
	public const TermInfoStrings ExitAttributeMode = 39; // 0x0
	public const TermInfoStrings ExitCaMode = 40; // 0x0
	public const TermInfoStrings ExitDeleteMode = 41; // 0x0
	public const TermInfoStrings ExitInsertMode = 42; // 0x0
	public const TermInfoStrings ExitStandoutMode = 43; // 0x0
	public const TermInfoStrings ExitUnderlineMode = 44; // 0x0
	public const TermInfoStrings FlashScreen = 45; // 0x0
	public const TermInfoStrings FormFeed = 46; // 0x0
	public const TermInfoStrings FromStatusLine = 47; // 0x0
	public const TermInfoStrings Init1string = 48; // 0x0
	public const TermInfoStrings Init2string = 49; // 0x0
	public const TermInfoStrings Init3string = 50; // 0x0
	public const TermInfoStrings InitFile = 51; // 0x0
	public const TermInfoStrings InsertCharacter = 52; // 0x0
	public const TermInfoStrings InsertLine = 53; // 0x0
	public const TermInfoStrings InsertPadding = 54; // 0x0
	public const TermInfoStrings KeyBackspace = 55; // 0x0
	public const TermInfoStrings KeyCatab = 56; // 0x0
	public const TermInfoStrings KeyClear = 57; // 0x0
	public const TermInfoStrings KeyCtab = 58; // 0x0
	public const TermInfoStrings KeyDc = 59; // 0x0
	public const TermInfoStrings KeyDl = 60; // 0x0
	public const TermInfoStrings KeyDown = 61; // 0x0
	public const TermInfoStrings KeyEic = 62; // 0x0
	public const TermInfoStrings KeyEol = 63; // 0x0
	public const TermInfoStrings KeyEos = 64; // 0x0
	public const TermInfoStrings KeyF0 = 65; // 0x0
	public const TermInfoStrings KeyF1 = 66; // 0x0
	public const TermInfoStrings KeyF10 = 67; // 0x0
	public const TermInfoStrings KeyF2 = 68; // 0x0
	public const TermInfoStrings KeyF3 = 69; // 0x0
	public const TermInfoStrings KeyF4 = 70; // 0x0
	public const TermInfoStrings KeyF5 = 71; // 0x0
	public const TermInfoStrings KeyF6 = 72; // 0x0
	public const TermInfoStrings KeyF7 = 73; // 0x0
	public const TermInfoStrings KeyF8 = 74; // 0x0
	public const TermInfoStrings KeyF9 = 75; // 0x0
	public const TermInfoStrings KeyHome = 76; // 0x0
	public const TermInfoStrings KeyIc = 77; // 0x0
	public const TermInfoStrings KeyIl = 78; // 0x0
	public const TermInfoStrings KeyLeft = 79; // 0x0
	public const TermInfoStrings KeyLl = 80; // 0x0
	public const TermInfoStrings KeyNpage = 81; // 0x0
	public const TermInfoStrings KeyPpage = 82; // 0x0
	public const TermInfoStrings KeyRight = 83; // 0x0
	public const TermInfoStrings KeySf = 84; // 0x0
	public const TermInfoStrings KeySr = 85; // 0x0
	public const TermInfoStrings KeyStab = 86; // 0x0
	public const TermInfoStrings KeyUp = 87; // 0x0
	public const TermInfoStrings KeypadLocal = 88; // 0x0
	public const TermInfoStrings KeypadXmit = 89; // 0x0
	public const TermInfoStrings LabF0 = 90; // 0x0
	public const TermInfoStrings LabF1 = 91; // 0x0
	public const TermInfoStrings LabF10 = 92; // 0x0
	public const TermInfoStrings LabF2 = 93; // 0x0
	public const TermInfoStrings LabF3 = 94; // 0x0
	public const TermInfoStrings LabF4 = 95; // 0x0
	public const TermInfoStrings LabF5 = 96; // 0x0
	public const TermInfoStrings LabF6 = 97; // 0x0
	public const TermInfoStrings LabF7 = 98; // 0x0
	public const TermInfoStrings LabF8 = 99; // 0x0
	public const TermInfoStrings LabF9 = 100; // 0x0
	public const TermInfoStrings MetaOff = 101; // 0x0
	public const TermInfoStrings MetaOn = 102; // 0x0
	public const TermInfoStrings Newline = 103; // 0x0
	public const TermInfoStrings PadChar = 104; // 0x0
	public const TermInfoStrings ParmDch = 105; // 0x0
	public const TermInfoStrings ParmDeleteLine = 106; // 0x0
	public const TermInfoStrings ParmDownCursor = 107; // 0x0
	public const TermInfoStrings ParmIch = 108; // 0x0
	public const TermInfoStrings ParmIndex = 109; // 0x0
	public const TermInfoStrings ParmInsertLine = 110; // 0x0
	public const TermInfoStrings ParmLeftCursor = 111; // 0x0
	public const TermInfoStrings ParmRightCursor = 112; // 0x0
	public const TermInfoStrings ParmRindex = 113; // 0x0
	public const TermInfoStrings ParmUpCursor = 114; // 0x0
	public const TermInfoStrings PkeyKey = 115; // 0x0
	public const TermInfoStrings PkeyLocal = 116; // 0x0
	public const TermInfoStrings PkeyXmit = 117; // 0x0
	public const TermInfoStrings PrintScreen = 118; // 0x0
	public const TermInfoStrings PrtrOff = 119; // 0x0
	public const TermInfoStrings PrtrOn = 120; // 0x0
	public const TermInfoStrings RepeatChar = 121; // 0x0
	public const TermInfoStrings Reset1string = 122; // 0x0
	public const TermInfoStrings Reset2string = 123; // 0x0
	public const TermInfoStrings Reset3string = 124; // 0x0
	public const TermInfoStrings ResetFile = 125; // 0x0
	public const TermInfoStrings RestoreCursor = 126; // 0x0
	public const TermInfoStrings RowAddress = 127; // 0x0
	public const TermInfoStrings SaveCursor = 128; // 0x0
	public const TermInfoStrings ScrollForward = 129; // 0x0
	public const TermInfoStrings ScrollReverse = 130; // 0x0
	public const TermInfoStrings SetAttributes = 131; // 0x0
	public const TermInfoStrings SetTab = 132; // 0x0
	public const TermInfoStrings SetWindow = 133; // 0x0
	public const TermInfoStrings Tab = 134; // 0x0
	public const TermInfoStrings ToStatusLine = 135; // 0x0
	public const TermInfoStrings UnderlineChar = 136; // 0x0
	public const TermInfoStrings UpHalfLine = 137; // 0x0
	public const TermInfoStrings InitProg = 138; // 0x0
	public const TermInfoStrings KeyA1 = 139; // 0x0
	public const TermInfoStrings KeyA3 = 140; // 0x0
	public const TermInfoStrings KeyB2 = 141; // 0x0
	public const TermInfoStrings KeyC1 = 142; // 0x0
	public const TermInfoStrings KeyC3 = 143; // 0x0
	public const TermInfoStrings PrtrNon = 144; // 0x0
	public const TermInfoStrings CharPadding = 145; // 0x0
	public const TermInfoStrings AcsChars = 146; // 0x0
	public const TermInfoStrings PlabNorm = 147; // 0x0
	public const TermInfoStrings KeyBtab = 148; // 0x0
	public const TermInfoStrings EnterXonMode = 149; // 0x0
	public const TermInfoStrings ExitXonMode = 150; // 0x0
	public const TermInfoStrings EnterAmMode = 151; // 0x0
	public const TermInfoStrings ExitAmMode = 152; // 0x0
	public const TermInfoStrings XonCharacter = 153; // 0x0
	public const TermInfoStrings XoffCharacter = 154; // 0x0
	public const TermInfoStrings EnaAcs = 155; // 0x0
	public const TermInfoStrings LabelOn = 156; // 0x0
	public const TermInfoStrings LabelOff = 157; // 0x0
	public const TermInfoStrings KeyBeg = 158; // 0x0
	public const TermInfoStrings KeyCancel = 159; // 0x0
	public const TermInfoStrings KeyClose = 160; // 0x0
	public const TermInfoStrings KeyCommand = 161; // 0x0
	public const TermInfoStrings KeyCopy = 162; // 0x0
	public const TermInfoStrings KeyCreate = 163; // 0x0
	public const TermInfoStrings KeyEnd = 164; // 0x0
	public const TermInfoStrings KeyEnter = 165; // 0x0
	public const TermInfoStrings KeyExit = 166; // 0x0
	public const TermInfoStrings KeyFind = 167; // 0x0
	public const TermInfoStrings KeyHelp = 168; // 0x0
	public const TermInfoStrings KeyMark = 169; // 0x0
	public const TermInfoStrings KeyMessage = 170; // 0x0
	public const TermInfoStrings KeyMove = 171; // 0x0
	public const TermInfoStrings KeyNext = 172; // 0x0
	public const TermInfoStrings KeyOpen = 173; // 0x0
	public const TermInfoStrings KeyOptions = 174; // 0x0
	public const TermInfoStrings KeyPrevious = 175; // 0x0
	public const TermInfoStrings KeyPrint = 176; // 0x0
	public const TermInfoStrings KeyRedo = 177; // 0x0
	public const TermInfoStrings KeyReference = 178; // 0x0
	public const TermInfoStrings KeyRefresh = 179; // 0x0
	public const TermInfoStrings KeyReplace = 180; // 0x0
	public const TermInfoStrings KeyRestart = 181; // 0x0
	public const TermInfoStrings KeyResume = 182; // 0x0
	public const TermInfoStrings KeySave = 183; // 0x0
	public const TermInfoStrings KeySuspend = 184; // 0x0
	public const TermInfoStrings KeyUndo = 185; // 0x0
	public const TermInfoStrings KeySbeg = 186; // 0x0
	public const TermInfoStrings KeyScancel = 187; // 0x0
	public const TermInfoStrings KeyScommand = 188; // 0x0
	public const TermInfoStrings KeyScopy = 189; // 0x0
	public const TermInfoStrings KeyScreate = 190; // 0x0
	public const TermInfoStrings KeySdc = 191; // 0x0
	public const TermInfoStrings KeySdl = 192; // 0x0
	public const TermInfoStrings KeySelect = 193; // 0x0
	public const TermInfoStrings KeySend = 194; // 0x0
	public const TermInfoStrings KeySeol = 195; // 0x0
	public const TermInfoStrings KeySexit = 196; // 0x0
	public const TermInfoStrings KeySfind = 197; // 0x0
	public const TermInfoStrings KeyShelp = 198; // 0x0
	public const TermInfoStrings KeyShome = 199; // 0x0
	public const TermInfoStrings KeySic = 200; // 0x0
	public const TermInfoStrings KeySleft = 201; // 0x0
	public const TermInfoStrings KeySmessage = 202; // 0x0
	public const TermInfoStrings KeySmove = 203; // 0x0
	public const TermInfoStrings KeySnext = 204; // 0x0
	public const TermInfoStrings KeySoptions = 205; // 0x0
	public const TermInfoStrings KeySprevious = 206; // 0x0
	public const TermInfoStrings KeySprint = 207; // 0x0
	public const TermInfoStrings KeySredo = 208; // 0x0
	public const TermInfoStrings KeySreplace = 209; // 0x0
	public const TermInfoStrings KeySright = 210; // 0x0
	public const TermInfoStrings KeySrsume = 211; // 0x0
	public const TermInfoStrings KeySsave = 212; // 0x0
	public const TermInfoStrings KeySsuspend = 213; // 0x0
	public const TermInfoStrings KeySundo = 214; // 0x0
	public const TermInfoStrings ReqForInput = 215; // 0x0
	public const TermInfoStrings KeyF11 = 216; // 0x0
	public const TermInfoStrings KeyF12 = 217; // 0x0
	public const TermInfoStrings KeyF13 = 218; // 0x0
	public const TermInfoStrings KeyF14 = 219; // 0x0
	public const TermInfoStrings KeyF15 = 220; // 0x0
	public const TermInfoStrings KeyF16 = 221; // 0x0
	public const TermInfoStrings KeyF17 = 222; // 0x0
	public const TermInfoStrings KeyF18 = 223; // 0x0
	public const TermInfoStrings KeyF19 = 224; // 0x0
	public const TermInfoStrings KeyF20 = 225; // 0x0
	public const TermInfoStrings KeyF21 = 226; // 0x0
	public const TermInfoStrings KeyF22 = 227; // 0x0
	public const TermInfoStrings KeyF23 = 228; // 0x0
	public const TermInfoStrings KeyF24 = 229; // 0x0
	public const TermInfoStrings KeyF25 = 230; // 0x0
	public const TermInfoStrings KeyF26 = 231; // 0x0
	public const TermInfoStrings KeyF27 = 232; // 0x0
	public const TermInfoStrings KeyF28 = 233; // 0x0
	public const TermInfoStrings KeyF29 = 234; // 0x0
	public const TermInfoStrings KeyF30 = 235; // 0x0
	public const TermInfoStrings KeyF31 = 236; // 0x0
	public const TermInfoStrings KeyF32 = 237; // 0x0
	public const TermInfoStrings KeyF33 = 238; // 0x0
	public const TermInfoStrings KeyF34 = 239; // 0x0
	public const TermInfoStrings KeyF35 = 240; // 0x0
	public const TermInfoStrings KeyF36 = 241; // 0x0
	public const TermInfoStrings KeyF37 = 242; // 0x0
	public const TermInfoStrings KeyF38 = 243; // 0x0
	public const TermInfoStrings KeyF39 = 244; // 0x0
	public const TermInfoStrings KeyF40 = 245; // 0x0
	public const TermInfoStrings KeyF41 = 246; // 0x0
	public const TermInfoStrings KeyF42 = 247; // 0x0
	public const TermInfoStrings KeyF43 = 248; // 0x0
	public const TermInfoStrings KeyF44 = 249; // 0x0
	public const TermInfoStrings KeyF45 = 250; // 0x0
	public const TermInfoStrings KeyF46 = 251; // 0x0
	public const TermInfoStrings KeyF47 = 252; // 0x0
	public const TermInfoStrings KeyF48 = 253; // 0x0
	public const TermInfoStrings KeyF49 = 254; // 0x0
	public const TermInfoStrings KeyF50 = 255; // 0x0
	public const TermInfoStrings KeyF51 = 256; // 0x0
	public const TermInfoStrings KeyF52 = 257; // 0x0
	public const TermInfoStrings KeyF53 = 258; // 0x0
	public const TermInfoStrings KeyF54 = 259; // 0x0
	public const TermInfoStrings KeyF55 = 260; // 0x0
	public const TermInfoStrings KeyF56 = 261; // 0x0
	public const TermInfoStrings KeyF57 = 262; // 0x0
	public const TermInfoStrings KeyF58 = 263; // 0x0
	public const TermInfoStrings KeyF59 = 264; // 0x0
	public const TermInfoStrings KeyF60 = 265; // 0x0
	public const TermInfoStrings KeyF61 = 266; // 0x0
	public const TermInfoStrings KeyF62 = 267; // 0x0
	public const TermInfoStrings KeyF63 = 268; // 0x0
	public const TermInfoStrings ClrBol = 269; // 0x0
	public const TermInfoStrings ClearMargins = 270; // 0x0
	public const TermInfoStrings SetLeftMargin = 271; // 0x0
	public const TermInfoStrings SetRightMargin = 272; // 0x0
	public const TermInfoStrings LabelFormat = 273; // 0x0
	public const TermInfoStrings SetClock = 274; // 0x0
	public const TermInfoStrings DisplayClock = 275; // 0x0
	public const TermInfoStrings RemoveClock = 276; // 0x0
	public const TermInfoStrings CreateWindow = 277; // 0x0
	public const TermInfoStrings GotoWindow = 278; // 0x0
	public const TermInfoStrings Hangup = 279; // 0x0
	public const TermInfoStrings DialPhone = 280; // 0x0
	public const TermInfoStrings QuickDial = 281; // 0x0
	public const TermInfoStrings Tone = 282; // 0x0
	public const TermInfoStrings Pulse = 283; // 0x0
	public const TermInfoStrings FlashHook = 284; // 0x0
	public const TermInfoStrings FixedPause = 285; // 0x0
	public const TermInfoStrings WaitTone = 286; // 0x0
	public const TermInfoStrings User0 = 287; // 0x0
	public const TermInfoStrings User1 = 288; // 0x0
	public const TermInfoStrings User2 = 289; // 0x0
	public const TermInfoStrings User3 = 290; // 0x0
	public const TermInfoStrings User4 = 291; // 0x0
	public const TermInfoStrings User5 = 292; // 0x0
	public const TermInfoStrings User6 = 293; // 0x0
	public const TermInfoStrings User7 = 294; // 0x0
	public const TermInfoStrings User8 = 295; // 0x0
	public const TermInfoStrings User9 = 296; // 0x0
	public const TermInfoStrings OrigPair = 297; // 0x0
	public const TermInfoStrings OrigColors = 298; // 0x0
	public const TermInfoStrings InitializeColor = 299; // 0x0
	public const TermInfoStrings InitializePair = 300; // 0x0
	public const TermInfoStrings SetColorPair = 301; // 0x0
	public const TermInfoStrings SetForeground = 302; // 0x0
	public const TermInfoStrings SetBackground = 303; // 0x0
	public const TermInfoStrings ChangeCharPitch = 304; // 0x0
	public const TermInfoStrings ChangeLinePitch = 305; // 0x0
	public const TermInfoStrings ChangeResHorz = 306; // 0x0
	public const TermInfoStrings ChangeResVert = 307; // 0x0
	public const TermInfoStrings DefineChar = 308; // 0x0
	public const TermInfoStrings EnterDoublewideMode = 309; // 0x0
	public const TermInfoStrings EnterDraftQuality = 310; // 0x0
	public const TermInfoStrings EnterItalicsMode = 311; // 0x0
	public const TermInfoStrings EnterLeftwardMode = 312; // 0x0
	public const TermInfoStrings EnterMicroMode = 313; // 0x0
	public const TermInfoStrings EnterNearLetterQuality = 314; // 0x0
	public const TermInfoStrings EnterNormalQuality = 315; // 0x0
	public const TermInfoStrings EnterShadowMode = 316; // 0x0
	public const TermInfoStrings EnterSubscriptMode = 317; // 0x0
	public const TermInfoStrings EnterSuperscriptMode = 318; // 0x0
	public const TermInfoStrings EnterUpwardMode = 319; // 0x0
	public const TermInfoStrings ExitDoublewideMode = 320; // 0x0
	public const TermInfoStrings ExitItalicsMode = 321; // 0x0
	public const TermInfoStrings ExitLeftwardMode = 322; // 0x0
	public const TermInfoStrings ExitMicroMode = 323; // 0x0
	public const TermInfoStrings ExitShadowMode = 324; // 0x0
	public const TermInfoStrings ExitSubscriptMode = 325; // 0x0
	public const TermInfoStrings ExitSuperscriptMode = 326; // 0x0
	public const TermInfoStrings ExitUpwardMode = 327; // 0x0
	public const TermInfoStrings MicroColumnAddress = 328; // 0x0
	public const TermInfoStrings MicroDown = 329; // 0x0
	public const TermInfoStrings MicroLeft = 330; // 0x0
	public const TermInfoStrings MicroRight = 331; // 0x0
	public const TermInfoStrings MicroRowAddress = 332; // 0x0
	public const TermInfoStrings MicroUp = 333; // 0x0
	public const TermInfoStrings OrderOfPins = 334; // 0x0
	public const TermInfoStrings ParmDownMicro = 335; // 0x0
	public const TermInfoStrings ParmLeftMicro = 336; // 0x0
	public const TermInfoStrings ParmRightMicro = 337; // 0x0
	public const TermInfoStrings ParmUpMicro = 338; // 0x0
	public const TermInfoStrings SelectCharSet = 339; // 0x0
	public const TermInfoStrings SetBottomMargin = 340; // 0x0
	public const TermInfoStrings SetBottomMarginParm = 341; // 0x0
	public const TermInfoStrings SetLeftMarginParm = 342; // 0x0
	public const TermInfoStrings SetRightMarginParm = 343; // 0x0
	public const TermInfoStrings SetTopMargin = 344; // 0x0
	public const TermInfoStrings SetTopMarginParm = 345; // 0x0
	public const TermInfoStrings StartBitImage = 346; // 0x0
	public const TermInfoStrings StartCharSetDef = 347; // 0x0
	public const TermInfoStrings StopBitImage = 348; // 0x0
	public const TermInfoStrings StopCharSetDef = 349; // 0x0
	public const TermInfoStrings SubscriptCharacters = 350; // 0x0
	public const TermInfoStrings SuperscriptCharacters = 351; // 0x0
	public const TermInfoStrings TheseCauseCr = 352; // 0x0
	public const TermInfoStrings ZeroMotion = 353; // 0x0
	public const TermInfoStrings CharSetNames = 354; // 0x0
	public const TermInfoStrings KeyMouse = 355; // 0x0
	public const TermInfoStrings MouseInfo = 356; // 0x0
	public const TermInfoStrings ReqMousePos = 357; // 0x0
	public const TermInfoStrings GetMouse = 358; // 0x0
	public const TermInfoStrings SetAForeground = 359; // 0x0
	public const TermInfoStrings SetABackground = 360; // 0x0
	public const TermInfoStrings PkeyPlab = 361; // 0x0
	public const TermInfoStrings DeviceType = 362; // 0x0
	public const TermInfoStrings CodeSetInit = 363; // 0x0
	public const TermInfoStrings Set0DesSeq = 364; // 0x0
	public const TermInfoStrings Set1DesSeq = 365; // 0x0
	public const TermInfoStrings Set2DesSeq = 366; // 0x0
	public const TermInfoStrings Set3DesSeq = 367; // 0x0
	public const TermInfoStrings SetLrMargin = 368; // 0x0
	public const TermInfoStrings SetTbMargin = 369; // 0x0
	public const TermInfoStrings BitImageRepeat = 370; // 0x0
	public const TermInfoStrings BitImageNewline = 371; // 0x0
	public const TermInfoStrings BitImageCarriageReturn = 372; // 0x0
	public const TermInfoStrings ColorNames = 373; // 0x0
	public const TermInfoStrings DefineBitImageRegion = 374; // 0x0
	public const TermInfoStrings EndBitImageRegion = 375; // 0x0
	public const TermInfoStrings SetColorBand = 376; // 0x0
	public const TermInfoStrings SetPageLength = 377; // 0x0
	public const TermInfoStrings DisplayPcChar = 378; // 0x0
	public const TermInfoStrings EnterPcCharsetMode = 379; // 0x0
	public const TermInfoStrings ExitPcCharsetMode = 380; // 0x0
	public const TermInfoStrings EnterScancodeMode = 381; // 0x0
	public const TermInfoStrings ExitScancodeMode = 382; // 0x0
	public const TermInfoStrings PcTermOptions = 383; // 0x0
	public const TermInfoStrings ScancodeEscape = 384; // 0x0
	public const TermInfoStrings AltScancodeEsc = 385; // 0x0
	public const TermInfoStrings EnterHorizontalHlMode = 386; // 0x0
	public const TermInfoStrings EnterLeftHlMode = 387; // 0x0
	public const TermInfoStrings EnterLowHlMode = 388; // 0x0
	public const TermInfoStrings EnterRightHlMode = 389; // 0x0
	public const TermInfoStrings EnterTopHlMode = 390; // 0x0
	public const TermInfoStrings EnterVerticalHlMode = 391; // 0x0
	public const TermInfoStrings SetAAttributes = 392; // 0x0
	public const TermInfoStrings SetPglenInch = 393; // 0x0
	public const TermInfoStrings Last = 394; // 0x0
}

// Namespace: System
[Serializable]
public abstract class TimeZone // TypeDefIndex: 318
{
	// Fields
	private static object tz_lock; // 0xABF5F

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x4969D0 Offset: 0x4951D0 VA: 0x1804969D0
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
internal class CurrentSystemTimeZone : TimeZone // TypeDefIndex: 319
{
	// Fields
	private readonly TimeZoneInfo LocalTimeZone; // 0x10

	// Methods
	// RVA: 0x401410 Offset: 0x3FFC10 VA: 0x180401410
	internal void .ctor() { }
	// RVA: 0x4014B0 Offset: 0x3FFCB0 VA: 0x1804014B0
	public static bool GetTimeZoneData(int year, out long[] data, out string[] names, out bool daylight_inverted) { }
}

// Namespace: System
internal class TimeType // TypeDefIndex: 320
{
	// Fields
	public readonly int Offset; // 0x10
	public readonly bool IsDst; // 0x14
	public string Name; // 0x18

	// Methods
	// RVA: 0x4966A0 Offset: 0x494EA0 VA: 0x1804966A0
	public void .ctor(int offset, bool is_dst, string abbrev) { }
	// RVA: 0x4966B0 Offset: 0x494EB0 VA: 0x1804966B0 Slot: 3
	public override string ToString() { }
}

// Namespace: System
[Serializable]
public enum TypeCode // TypeDefIndex: 321
{
	// Fields
	public int value__; // 0x0
	public const TypeCode Empty = 0; // 0x0
	public const TypeCode Object = 1; // 0x0
	public const TypeCode DBNull = 2; // 0x0
	public const TypeCode Boolean = 3; // 0x0
	public const TypeCode Char = 4; // 0x0
	public const TypeCode SByte = 5; // 0x0
	public const TypeCode Byte = 6; // 0x0
	public const TypeCode Int16 = 7; // 0x0
	public const TypeCode UInt16 = 8; // 0x0
	public const TypeCode Int32 = 9; // 0x0
	public const TypeCode UInt32 = 10; // 0x0
	public const TypeCode Int64 = 11; // 0x0
	public const TypeCode UInt64 = 12; // 0x0
	public const TypeCode Single = 13; // 0x0
	public const TypeCode Double = 14; // 0x0
	public const TypeCode Decimal = 15; // 0x0
	public const TypeCode DateTime = 16; // 0x0
	public const TypeCode String = 18; // 0x0
}

// Namespace: System
internal interface TypeName : IEquatable<TypeName> // TypeDefIndex: 322
{
	// Properties
	public abstract string DisplayName { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_DisplayName() { }
}

// Namespace: System
internal interface TypeIdentifier : TypeName, IEquatable<TypeName> // TypeDefIndex: 323
{
	// Properties
	public abstract string InternalName { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_InternalName() { }
}

// Namespace: System
internal class TypeNames // TypeDefIndex: 324
{}

// Namespace: 
internal abstract class TypeNames.ATypeName : TypeName, IEquatable<TypeName> // TypeDefIndex: 325
{
	// Properties
	public abstract string DisplayName { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 6
	public abstract string get_DisplayName() { }
	// RVA: 0x27DFD0 Offset: 0x27C7D0 VA: 0x18027DFD0 Slot: 5
	public bool Equals(TypeName other) { }
	// RVA: 0x27E110 Offset: 0x27C910 VA: 0x18027E110 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x27E150 Offset: 0x27C950 VA: 0x18027E150 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System
internal class TypeIdentifiers // TypeDefIndex: 326
{
	// Methods
	// RVA: 0x4A5F40 Offset: 0x4A4740 VA: 0x1804A5F40
	internal static TypeIdentifier FromDisplay(string displayName) { }
}

// Namespace: 
private class TypeIdentifiers.Display : TypeNames.ATypeName, TypeIdentifier, TypeName, IEquatable<TypeName> // TypeDefIndex: 327
{
	// Fields
	private string displayName; // 0x10
	private string internal_name; // 0x18

	// Properties
	public override string DisplayName { get; }
	public string InternalName { get; }

	// Methods
	// RVA: 0x27DD70 Offset: 0x27C570 VA: 0x18027DD70
	internal void .ctor(string displayName) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 6
	public override string get_DisplayName() { }
	// RVA: 0x27DD80 Offset: 0x27C580 VA: 0x18027DD80 Slot: 7
	public string get_InternalName() { }
	// RVA: 0x27DEC0 Offset: 0x27C6C0 VA: 0x18027DEC0
	private string GetInternalName() { }
}

// Namespace: System
internal interface ModifierSpec // TypeDefIndex: 328
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract Type Resolve(Type type) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract StringBuilder Append(StringBuilder sb) { }
}

// Namespace: System
internal class ArraySpec : ModifierSpec // TypeDefIndex: 329
{
	// Fields
	private int dimensions; // 0x10
	private bool bound; // 0x14

	// Methods
	// RVA: 0x2D4B80 Offset: 0x2D3380 VA: 0x1802D4B80
	internal void .ctor(int dimensions, bool bound) { }
	// RVA: 0x2D4B90 Offset: 0x2D3390 VA: 0x1802D4B90 Slot: 4
	public Type Resolve(Type type) { }
	// RVA: 0x2D4C00 Offset: 0x2D3400 VA: 0x1802D4C00 Slot: 5
	public StringBuilder Append(StringBuilder sb) { }
	// RVA: 0x2D4D90 Offset: 0x2D3590 VA: 0x1802D4D90 Slot: 3
	public override string ToString() { }
}

// Namespace: System
internal class PointerSpec : ModifierSpec // TypeDefIndex: 330
{
	// Fields
	private int pointer_level; // 0x10

	// Methods
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	internal void .ctor(int pointer_level) { }
	// RVA: 0x31BFE0 Offset: 0x31A7E0 VA: 0x18031BFE0 Slot: 4
	public Type Resolve(Type type) { }
	// RVA: 0x31C030 Offset: 0x31A830 VA: 0x18031C030 Slot: 5
	public StringBuilder Append(StringBuilder sb) { }
	// RVA: 0x31C060 Offset: 0x31A860 VA: 0x18031C060 Slot: 3
	public override string ToString() { }
}

// Namespace: System
internal class TypeSpec // TypeDefIndex: 331
{
	// Fields
	private TypeIdentifier name; // 0x10
	private string assembly_name; // 0x18
	private List<TypeIdentifier> nested; // 0x20
	private List<TypeSpec> generic_params; // 0x28
	private List<ModifierSpec> modifier_spec; // 0x30
	private bool is_byref; // 0x38
	private string display_fullname; // 0x40

	// Properties
	internal bool HasModifiers { get; }
	internal string DisplayFullName { get; }

	// Methods
	// RVA: 0x384AC0 Offset: 0x3832C0 VA: 0x180384AC0
	internal bool get_HasModifiers() { }
	// RVA: 0x4A7460 Offset: 0x4A5C60 VA: 0x1804A7460
	private string GetDisplayFullName(TypeSpec.DisplayNameFormat flags) { }
	// RVA: 0x4A7A80 Offset: 0x4A6280 VA: 0x1804A7A80
	private StringBuilder GetModifierString(StringBuilder sb) { }
	// RVA: 0x4A7CF0 Offset: 0x4A64F0 VA: 0x1804A7CF0
	internal string get_DisplayFullName() { }
	// RVA: 0x4A7D20 Offset: 0x4A6520 VA: 0x1804A7D20
	internal static TypeSpec Parse(string typeName) { }
	// RVA: 0x4A7E30 Offset: 0x4A6630 VA: 0x1804A7E30
	internal static string UnescapeInternalName(string displayName) { }
	// RVA: 0x4A7F40 Offset: 0x4A6740 VA: 0x1804A7F40
	internal Type Resolve(Func<AssemblyName, Assembly> assemblyResolver, Func<Assembly, string, bool, Type> typeResolver, bool throwOnError, bool ignoreCase) { }
	// RVA: 0x4A8600 Offset: 0x4A6E00 VA: 0x1804A8600
	private void AddName(string type_name) { }
	// RVA: 0x4A8700 Offset: 0x4A6F00 VA: 0x1804A8700
	private void AddModifier(ModifierSpec md) { }
	// RVA: 0x4A87D0 Offset: 0x4A6FD0 VA: 0x1804A87D0
	private static void SkipSpace(string name, ref int pos) { }
	// RVA: 0x4A88C0 Offset: 0x4A70C0 VA: 0x1804A88C0
	private static void BoundCheck(int idx, string s) { }
	// RVA: 0x4A8980 Offset: 0x4A7180 VA: 0x1804A8980
	private static TypeIdentifier ParsedTypeIdentifier(string displayName) { }
	// RVA: 0x4A8990 Offset: 0x4A7190 VA: 0x1804A8990
	private static TypeSpec Parse(string name, ref int p, bool is_recurse, bool allow_aqn) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum TypeSpec.DisplayNameFormat // TypeDefIndex: 332
{
	// Fields
	public int value__; // 0x0
	public const TypeSpec.DisplayNameFormat Default = 0; // 0x0
	public const TypeSpec.DisplayNameFormat WANT_ASSEMBLY = 1; // 0x0
	public const TypeSpec.DisplayNameFormat NO_MODIFIERS = 2; // 0x0
}

// Namespace: System
[Serializable]
public struct UIntPtr : ISerializable // TypeDefIndex: 333
{
	// Fields
	public static readonly UIntPtr Zero; // 0x0
	private void* _pointer; // 0x0

	// Properties
	public static int Size { get; }

	// Methods
	// RVA: 0x1BB20 Offset: 0x1AF20 VA: 0x18001BB20
	public void .ctor(ulong value) { }
	// RVA: 0x1BB30 Offset: 0x1AF30 VA: 0x18001BB30
	public void .ctor(uint value) { }
	// RVA: 0x1BB40 Offset: 0x1AF40 VA: 0x18001BB40 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1BC10 Offset: 0x1B010 VA: 0x18001BC10 Slot: 3
	public override string ToString() { }
	// RVA: 0x1BCB0 Offset: 0x1B0B0 VA: 0x18001BCB0 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x33BBF0 Offset: 0x33A3F0 VA: 0x18033BBF0
	public static bool op_Equality(UIntPtr value1, UIntPtr value2) { }
	// RVA: 0x4AA730 Offset: 0x4A8F30 VA: 0x1804AA730
	public static UIntPtr op_Explicit(ulong value) { }
	// RVA: 0x343A40 Offset: 0x342240 VA: 0x180343A40
	public static int get_Size() { }
	// RVA: 0x4AA7D0 Offset: 0x4A8FD0 VA: 0x1804AA7D0
	private static void .cctor() { }
}

// Namespace: System
[Serializable]
public abstract class ValueType // TypeDefIndex: 334
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x4185B0 Offset: 0x416DB0 VA: 0x1804185B0
	private static bool InternalEquals(object o1, object o2, out object[] fields) { }
	// RVA: 0x4185C0 Offset: 0x416DC0 VA: 0x1804185C0
	internal static bool DefaultEquals(object o1, object o2) { }
	// RVA: 0x4187E0 Offset: 0x416FE0 VA: 0x1804187E0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x4187F0 Offset: 0x416FF0 VA: 0x1804187F0
	internal static int InternalGetHashCode(object o, out object[] fields) { }
	// RVA: 0x418800 Offset: 0x417000 VA: 0x180418800 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x418880 Offset: 0x417080 VA: 0x180418880 Slot: 3
	public override string ToString() { }
}

// Namespace: System
internal struct Variant // TypeDefIndex: 335
{
	// Fields
	public short vt; // 0x0
	public ushort wReserved1; // 0x2
	public ushort wReserved2; // 0x4
	public ushort wReserved3; // 0x6
	public long llVal; // 0x8
	public int lVal; // 0x8
	public byte bVal; // 0x8
	public short iVal; // 0x8
	public float fltVal; // 0x8
	public double dblVal; // 0x8
	public short boolVal; // 0x8
	public IntPtr bstrVal; // 0x8
	public sbyte cVal; // 0x8
	public ushort uiVal; // 0x8
	public uint ulVal; // 0x8
	public ulong ullVal; // 0x8
	public int intVal; // 0x8
	public uint uintVal; // 0x8
	public IntPtr pdispVal; // 0x8
	public BRECORD bRecord; // 0x8

	// Methods
	// RVA: 0x14B70 Offset: 0x13F70 VA: 0x180014B70
	public void Clear() { }
}

// Namespace: System
internal struct BRECORD // TypeDefIndex: 336
{
	// Fields
	private IntPtr pvRecord; // 0x0
	private IntPtr pRecInfo; // 0x8
}

// Namespace: System
[Serializable]
public struct Void // TypeDefIndex: 337
{}

// Namespace: System
[Serializable]
public class WeakReference : ISerializable // TypeDefIndex: 338
{
	// Fields
	private bool isLongReference; // 0x10
	private GCHandle gcHandle; // 0x14

	// Properties
	public virtual object Target { get; }

	// Methods
	// RVA: 0x41B540 Offset: 0x419D40 VA: 0x18041B540
	private void AllocateHandle(object target) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x41B590 Offset: 0x419D90 VA: 0x18041B590
	public void .ctor(object target) { }
	// RVA: 0x41B5C0 Offset: 0x419DC0 VA: 0x18041B5C0
	public void .ctor(object target, bool trackResurrection) { }
	// RVA: 0x41B610 Offset: 0x419E10 VA: 0x18041B610
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x41B760 Offset: 0x419F60 VA: 0x18041B760 Slot: 5
	public virtual object get_Target() { }
	// RVA: 0x41B770 Offset: 0x419F70 VA: 0x18041B770 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x41B7E0 Offset: 0x419FE0 VA: 0x18041B7E0 Slot: 6
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System
internal struct InputRecord // TypeDefIndex: 339
{
	// Fields
	public short EventType; // 0x0
	public bool KeyDown; // 0x2
	public short RepeatCount; // 0x4
	public short VirtualKeyCode; // 0x6
	public short VirtualScanCode; // 0x8
	public char Character; // 0xA
	public int ControlKeyState; // 0xC
	private int pad1; // 0x10
	private bool pad2; // 0x14
}

// Namespace: System
internal struct Coord // TypeDefIndex: 340
{
	// Fields
	public short X; // 0x0
	public short Y; // 0x2
}

// Namespace: System
internal struct SmallRect // TypeDefIndex: 341
{
	// Fields
	public short Left; // 0x0
	public short Top; // 0x2
	public short Right; // 0x4
	public short Bottom; // 0x6
}

// Namespace: System
internal struct ConsoleScreenBufferInfo // TypeDefIndex: 342
{
	// Fields
	public Coord Size; // 0x0
	public Coord CursorPosition; // 0x4
	public short Attribute; // 0x8
	public SmallRect Window; // 0xA
	public Coord MaxWindowSize; // 0x12
}

// Namespace: System
internal enum Handles // TypeDefIndex: 343
{
	// Fields
	public int value__; // 0x0
	public const Handles STD_INPUT = -10; // 0x0
	public const Handles STD_OUTPUT = -11; // 0x0
	public const Handles STD_ERROR = -12; // 0x0
}

// Namespace: System
internal class WindowsConsoleDriver : IConsoleDriver // TypeDefIndex: 344
{
	// Fields
	private IntPtr inputHandle; // 0x10
	private IntPtr outputHandle; // 0x18
	private short defaultAttribute; // 0x20

	// Methods
	// RVA: 0x41DC10 Offset: 0x41C410 VA: 0x18041DC10
	public void .ctor() { }
	// RVA: 0x41DCE0 Offset: 0x41C4E0 VA: 0x18041DCE0 Slot: 4
	public ConsoleKeyInfo ReadKey(bool intercept) { }
	// RVA: 0x41DFC0 Offset: 0x41C7C0 VA: 0x18041DFC0
	private static bool IsModifierKey(short virtualKeyCode) { }
	// RVA: 0x41DFF0 Offset: 0x41C7F0 VA: 0x18041DFF0
	private static extern IntPtr GetStdHandle(Handles handle) { }
	// RVA: 0x41E080 Offset: 0x41C880 VA: 0x18041E080
	private static extern bool GetConsoleScreenBufferInfo(IntPtr handle, out ConsoleScreenBufferInfo info) { }
	// RVA: 0x41E120 Offset: 0x41C920 VA: 0x18041E120
	private static extern bool ReadConsoleInput(IntPtr handle, out InputRecord record, int length, out int nread) { }
}

// Namespace: System
internal class __ComObject // TypeDefIndex: 345
{
	// Methods
	// RVA: 0x268680 Offset: 0x266E80 VA: 0x180268680
	private void .ctor() { }
}

// Namespace: System.Configuration.Assemblies
[Serializable]
public enum AssemblyHashAlgorithm // TypeDefIndex: 346
{
	// Fields
	public int value__; // 0x0
	public const AssemblyHashAlgorithm None = 0; // 0x0
	public const AssemblyHashAlgorithm MD5 = 32771; // 0x0
	public const AssemblyHashAlgorithm SHA1 = 32772; // 0x0
	public const AssemblyHashAlgorithm SHA256 = 32780; // 0x0
	public const AssemblyHashAlgorithm SHA384 = 32781; // 0x0
	public const AssemblyHashAlgorithm SHA512 = 32782; // 0x0
}

// Namespace: System.Configuration.Assemblies
[Serializable]
public enum AssemblyVersionCompatibility // TypeDefIndex: 347
{
	// Fields
	public int value__; // 0x0
	public const AssemblyVersionCompatibility SameMachine = 1; // 0x0
	public const AssemblyVersionCompatibility SameProcess = 2; // 0x0
	public const AssemblyVersionCompatibility SameDomain = 3; // 0x0
}

// Namespace: System.Text
[Serializable]
public class ASCIIEncoding : Encoding // TypeDefIndex: 348
{
	// Methods
	// RVA: 0x2C7C80 Offset: 0x2C6480 VA: 0x1802C7C80
	public void .ctor() { }
	// RVA: 0x2C7D10 Offset: 0x2C6510 VA: 0x1802C7D10 Slot: 5
	internal override void SetDefaultFallbacks() { }
	// RVA: 0x2C7D40 Offset: 0x2C6540 VA: 0x1802C7D40 Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }
	// RVA: 0x2C7F10 Offset: 0x2C6710 VA: 0x1802C7F10 Slot: 9
	public override int GetByteCount(string chars) { }
	// RVA: 0x2C7FE0 Offset: 0x2C67E0 VA: 0x1802C7FE0 Slot: 11
	public override int GetByteCount(char* chars, int count) { }
	// RVA: 0x2C8120 Offset: 0x2C6920 VA: 0x1802C8120 Slot: 16
	public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x2C83A0 Offset: 0x2C6BA0 VA: 0x1802C83A0 Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x2C8630 Offset: 0x2C6E30 VA: 0x1802C8630 Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }
	// RVA: 0x2C87A0 Offset: 0x2C6FA0 VA: 0x1802C87A0 Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }
	// RVA: 0x2C8970 Offset: 0x2C7170 VA: 0x1802C8970 Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }
	// RVA: 0x2C8AB0 Offset: 0x2C72B0 VA: 0x1802C8AB0 Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
	// RVA: 0x2C8D40 Offset: 0x2C7540 VA: 0x1802C8D40 Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }
	// RVA: 0x2C8EB0 Offset: 0x2C76B0 VA: 0x1802C8EB0 Slot: 32
	public override string GetString(byte[] bytes, int byteIndex, int byteCount) { }
	// RVA: 0x2C9080 Offset: 0x2C7880 VA: 0x1802C9080 Slot: 12
	internal override int GetByteCount(char* chars, int charCount, EncoderNLS encoder) { }
	// RVA: 0x2C9410 Offset: 0x2C7C10 VA: 0x1802C9410 Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder) { }
	// RVA: 0x2C99E0 Offset: 0x2C81E0 VA: 0x1802C99E0 Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS decoder) { }
	// RVA: 0x2C9B90 Offset: 0x2C8390 VA: 0x1802C9B90 Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder) { }
	// RVA: 0x2C9F80 Offset: 0x2C8780 VA: 0x1802C9F80 Slot: 29
	public override int GetMaxByteCount(int charCount) { }
	// RVA: 0x2CA0E0 Offset: 0x2C88E0 VA: 0x1802CA0E0 Slot: 30
	public override int GetMaxCharCount(int byteCount) { }
	// RVA: 0x2CA240 Offset: 0x2C8A40 VA: 0x1802CA240 Slot: 27
	public override Decoder GetDecoder() { }
	// RVA: 0x2CA2F0 Offset: 0x2C8AF0 VA: 0x1802CA2F0 Slot: 28
	public override Encoder GetEncoder() { }
}

// Namespace: System.Text
[Serializable]
public abstract class Decoder // TypeDefIndex: 349
{
	// Fields
	internal DecoderFallback m_fallback; // 0x10
	internal DecoderFallbackBuffer m_fallbackBuffer; // 0x18

	// Properties
	public DecoderFallbackBuffer FallbackBuffer { get; }
	internal bool InternalHasFallbackBuffer { get; }

	// Methods
	// RVA: 0x5116E0 Offset: 0x50FEE0 VA: 0x1805116E0
	internal void SerializeDecoder(SerializationInfo info) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x511780 Offset: 0x50FF80 VA: 0x180511780
	public DecoderFallbackBuffer get_FallbackBuffer() { }
	// RVA: 0x476A40 Offset: 0x475240 VA: 0x180476A40
	internal bool get_InternalHasFallbackBuffer() { }
	// RVA: 0x5117F0 Offset: 0x50FFF0 VA: 0x1805117F0 Slot: 4
	public virtual void Reset() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract int GetCharCount(byte[] bytes, int index, int count) { }
	// RVA: 0x511900 Offset: 0x510100 VA: 0x180511900 Slot: 6
	public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush) { }
	// RVA: 0x511920 Offset: 0x510120 VA: 0x180511920 Slot: 7
	public virtual int GetCharCount(byte* bytes, int count, bool flush) { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
	// RVA: 0x511AC0 Offset: 0x5102C0 VA: 0x180511AC0 Slot: 9
	public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush) { }
	// RVA: 0x511AE0 Offset: 0x5102E0 VA: 0x180511AE0 Slot: 10
	public virtual int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush) { }
}

// Namespace: System.Text
[Serializable]
internal sealed class InternalDecoderBestFitFallback : DecoderFallback // TypeDefIndex: 350
{
	// Fields
	internal Encoding encoding; // 0x18
	internal char[] arrayBestFit; // 0x20
	internal char cReplacement; // 0x28

	// Properties
	public override int MaxCharCount { get; }

	// Methods
	// RVA: 0x327C90 Offset: 0x326490 VA: 0x180327C90
	internal void .ctor(Encoding encoding) { }
	// RVA: 0x327CB0 Offset: 0x3264B0 VA: 0x180327CB0 Slot: 4
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 5
	public override int get_MaxCharCount() { }
	// RVA: 0x327D50 Offset: 0x326550 VA: 0x180327D50 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x327E40 Offset: 0x326640 VA: 0x180327E40 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
internal sealed class InternalDecoderBestFitFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 351
{
	// Fields
	internal char cBestFit; // 0x20
	internal int iCount; // 0x24
	internal int iSize; // 0x28
	private InternalDecoderBestFitFallback oFallback; // 0x30
	private static object s_InternalSyncObject; // 0x0

	// Properties
	private static object InternalSyncObject { get; }

	// Methods
	// RVA: 0x327E70 Offset: 0x326670 VA: 0x180327E70
	private static object get_InternalSyncObject() { }
	// RVA: 0x327F20 Offset: 0x326720 VA: 0x180327F20
	public void .ctor(InternalDecoderBestFitFallback fallback) { }
	// RVA: 0x328200 Offset: 0x326A00 VA: 0x180328200 Slot: 4
	public override bool Fallback(byte[] bytesUnknown, int index) { }
	// RVA: 0x328250 Offset: 0x326A50 VA: 0x180328250 Slot: 5
	public override char GetNextChar() { }
	// RVA: 0x27E8D0 Offset: 0x27D0D0 VA: 0x18027E8D0 Slot: 6
	public override void Reset() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 8
	internal override int InternalFallback(byte[] bytes, byte* pBytes) { }
	// RVA: 0x328270 Offset: 0x326A70 VA: 0x180328270
	private char TryBestFit(byte[] bytesCheck) { }
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderExceptionFallback : DecoderFallback // TypeDefIndex: 352
{
	// Properties
	public override int MaxCharCount { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x511D40 Offset: 0x510540 VA: 0x180511D40 Slot: 4
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 5
	public override int get_MaxCharCount() { }
	// RVA: 0x511DB0 Offset: 0x5105B0 VA: 0x180511DB0 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x511E50 Offset: 0x510650 VA: 0x180511E50 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class DecoderExceptionFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 353
{
	// Methods
	// RVA: 0x511E60 Offset: 0x510660 VA: 0x180511E60 Slot: 4
	public override bool Fallback(byte[] bytesUnknown, int index) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 5
	public override char GetNextChar() { }
	// RVA: 0x511E70 Offset: 0x510670 VA: 0x180511E70
	private void Throw(byte[] bytesUnknown, int index) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderFallbackException : ArgumentException // TypeDefIndex: 354
{
	// Fields
	private byte[] bytesUnknown; // 0x90
	private int index; // 0x98

	// Methods
	// RVA: 0x512D20 Offset: 0x511520 VA: 0x180512D20
	public void .ctor() { }
	// RVA: 0x2CFB00 Offset: 0x2CE300 VA: 0x1802CFB00
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x512DB0 Offset: 0x5115B0 VA: 0x180512DB0
	public void .ctor(string message, byte[] bytesUnknown, int index) { }
}

// Namespace: System.Text
[Serializable]
public abstract class DecoderFallback // TypeDefIndex: 355
{
	// Fields
	internal bool bIsMicrosoftBestFitFallback; // 0x10
	private static DecoderFallback replacementFallback; // 0x0
	private static DecoderFallback exceptionFallback; // 0x8
	private static object s_InternalSyncObject; // 0x10

	// Properties
	private static object InternalSyncObject { get; }
	public static DecoderFallback ReplacementFallback { get; }
	public static DecoderFallback ExceptionFallback { get; }
	public abstract int MaxCharCount { get; }

	// Methods
	// RVA: 0x512090 Offset: 0x510890 VA: 0x180512090
	private static object get_InternalSyncObject() { }
	// RVA: 0x512140 Offset: 0x510940 VA: 0x180512140
	public static DecoderFallback get_ReplacementFallback() { }
	// RVA: 0x5123E0 Offset: 0x510BE0 VA: 0x1805123E0
	public static DecoderFallback get_ExceptionFallback() { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract DecoderFallbackBuffer CreateFallbackBuffer() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract int get_MaxCharCount() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Text
public abstract class DecoderFallbackBuffer // TypeDefIndex: 356
{
	// Fields
	internal byte* byteStart; // 0x10
	internal char* charEnd; // 0x18

	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool Fallback(byte[] bytesUnknown, int index) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract char GetNextChar() { }
	// RVA: 0x512610 Offset: 0x510E10 VA: 0x180512610 Slot: 6
	public virtual void Reset() { }
	// RVA: 0x512640 Offset: 0x510E40 VA: 0x180512640
	internal void InternalReset() { }
	// RVA: 0x25B970 Offset: 0x25A170 VA: 0x18025B970
	internal void InternalInitialize(byte* byteStart, char* charEnd) { }
	// RVA: 0x512660 Offset: 0x510E60 VA: 0x180512660 Slot: 7
	internal virtual bool InternalFallback(byte[] bytes, byte* pBytes, ref char* chars) { }
	// RVA: 0x5128D0 Offset: 0x5110D0 VA: 0x1805128D0 Slot: 8
	internal virtual int InternalFallback(byte[] bytes, byte* pBytes) { }
	// RVA: 0x512B20 Offset: 0x511320 VA: 0x180512B20
	internal void ThrowLastBytesRecursive(byte[] bytesUnknown) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Text
[Serializable]
internal class DecoderNLS : Decoder, ISerializable // TypeDefIndex: 357
{
	// Fields
	protected Encoding m_encoding; // 0x20
	protected bool m_mustFlush; // 0x28
	internal bool m_throwOnOverflow; // 0x29
	internal int m_bytesUsed; // 0x2C

	// Properties
	internal virtual bool HasState { get; }

	// Methods
	// RVA: 0x512E00 Offset: 0x511600 VA: 0x180512E00
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x512EB0 Offset: 0x5116B0 VA: 0x180512EB0 Slot: 11
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27E2F0 Offset: 0x27CAF0 VA: 0x18027E2F0
	internal void .ctor(Encoding encoding) { }
	// RVA: 0x513000 Offset: 0x511800 VA: 0x180513000
	internal void .ctor() { }
	// RVA: 0x513020 Offset: 0x511820 VA: 0x180513020 Slot: 4
	public override void Reset() { }
	// RVA: 0x26D420 Offset: 0x26BC20 VA: 0x18026D420 Slot: 5
	public override int GetCharCount(byte[] bytes, int index, int count) { }
	// RVA: 0x513040 Offset: 0x511840 VA: 0x180513040 Slot: 6
	public override int GetCharCount(byte[] bytes, int index, int count, bool flush) { }
	// RVA: 0x513230 Offset: 0x511A30 VA: 0x180513230 Slot: 7
	public override int GetCharCount(byte* bytes, int count, bool flush) { }
	// RVA: 0x26D4B0 Offset: 0x26BCB0 VA: 0x18026D4B0 Slot: 8
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
	// RVA: 0x513390 Offset: 0x511B90 VA: 0x180513390 Slot: 9
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush) { }
	// RVA: 0x513650 Offset: 0x511E50 VA: 0x180513650 Slot: 10
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 12
	internal virtual bool get_HasState() { }
	// RVA: 0x5137F0 Offset: 0x511FF0 VA: 0x1805137F0
	internal void ClearMustFlush() { }
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderReplacementFallback : DecoderFallback // TypeDefIndex: 358
{
	// Fields
	private string strDefault; // 0x18

	// Properties
	public override int MaxCharCount { get; }

	// Methods
	// RVA: 0x513800 Offset: 0x512000 VA: 0x180513800
	public void .ctor() { }
	// RVA: 0x513880 Offset: 0x512080 VA: 0x180513880
	public void .ctor(string replacement) { }
	// RVA: 0x513A50 Offset: 0x512250 VA: 0x180513A50 Slot: 4
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }
	// RVA: 0x478F50 Offset: 0x477750 VA: 0x180478F50 Slot: 5
	public override int get_MaxCharCount() { }
	// RVA: 0x513AE0 Offset: 0x5122E0 VA: 0x180513AE0 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x4790C0 Offset: 0x4778C0 VA: 0x1804790C0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class DecoderReplacementFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 359
{
	// Fields
	private string strDefault; // 0x20
	private int fallbackCount; // 0x28
	private int fallbackIndex; // 0x2C

	// Methods
	// RVA: 0x513C30 Offset: 0x512430 VA: 0x180513C30
	public void .ctor(DecoderReplacementFallback fallback) { }
	// RVA: 0x513C60 Offset: 0x512460 VA: 0x180513C60 Slot: 4
	public override bool Fallback(byte[] bytesUnknown, int index) { }
	// RVA: 0x513CB0 Offset: 0x5124B0 VA: 0x180513CB0 Slot: 5
	public override char GetNextChar() { }
	// RVA: 0x513D00 Offset: 0x512500 VA: 0x180513D00 Slot: 6
	public override void Reset() { }
	// RVA: 0x513D20 Offset: 0x512520 VA: 0x180513D20 Slot: 8
	internal override int InternalFallback(byte[] bytes, byte* pBytes) { }
}

// Namespace: System.Text
[Serializable]
public abstract class Encoder // TypeDefIndex: 360
{
	// Fields
	internal EncoderFallback m_fallback; // 0x10
	internal EncoderFallbackBuffer m_fallbackBuffer; // 0x18

	// Properties
	public EncoderFallbackBuffer FallbackBuffer { get; }
	internal bool InternalHasFallbackBuffer { get; }

	// Methods
	// RVA: 0x476930 Offset: 0x475130 VA: 0x180476930
	internal void SerializeEncoder(SerializationInfo info) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x4769D0 Offset: 0x4751D0 VA: 0x1804769D0
	public EncoderFallbackBuffer get_FallbackBuffer() { }
	// RVA: 0x476A40 Offset: 0x475240 VA: 0x180476A40
	internal bool get_InternalHasFallbackBuffer() { }
	// RVA: 0x476A50 Offset: 0x475250 VA: 0x180476A50 Slot: 4
	public virtual void Reset() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract int GetByteCount(char[] chars, int index, int count, bool flush) { }
	// RVA: 0x476B60 Offset: 0x475360 VA: 0x180476B60 Slot: 6
	public virtual int GetByteCount(char* chars, int count, bool flush) { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush) { }
	// RVA: 0x476D10 Offset: 0x475510 VA: 0x180476D10 Slot: 8
	public virtual int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush) { }
}

// Namespace: System.Text
[Serializable]
internal class InternalEncoderBestFitFallback : EncoderFallback // TypeDefIndex: 361
{
	// Fields
	internal Encoding encoding; // 0x18
	internal char[] arrayBestFit; // 0x20

	// Properties
	public override int MaxCharCount { get; }

	// Methods
	// RVA: 0x328480 Offset: 0x326C80 VA: 0x180328480
	internal void .ctor(Encoding encoding) { }
	// RVA: 0x328490 Offset: 0x326C90 VA: 0x180328490 Slot: 4
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 5
	public override int get_MaxCharCount() { }
	// RVA: 0x328530 Offset: 0x326D30 VA: 0x180328530 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x327E40 Offset: 0x326640 VA: 0x180327E40 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
internal sealed class InternalEncoderBestFitFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 362
{
	// Fields
	private char cBestFit; // 0x30
	private InternalEncoderBestFitFallback oFallback; // 0x38
	private int iCount; // 0x40
	private int iSize; // 0x44
	private static object s_InternalSyncObject; // 0x0

	// Properties
	private static object InternalSyncObject { get; }
	public override int Remaining { get; }

	// Methods
	// RVA: 0x328650 Offset: 0x326E50 VA: 0x180328650
	private static object get_InternalSyncObject() { }
	// RVA: 0x328700 Offset: 0x326F00 VA: 0x180328700
	public void .ctor(InternalEncoderBestFitFallback fallback) { }
	// RVA: 0x328960 Offset: 0x327160 VA: 0x180328960 Slot: 4
	public override bool Fallback(char charUnknown, int index) { }
	// RVA: 0x328AA0 Offset: 0x3272A0 VA: 0x180328AA0 Slot: 5
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }
	// RVA: 0x328D60 Offset: 0x327560 VA: 0x180328D60 Slot: 6
	public override char GetNextChar() { }
	// RVA: 0x328D80 Offset: 0x327580 VA: 0x180328D80 Slot: 7
	public override bool MovePrevious() { }
	// RVA: 0x328DA0 Offset: 0x3275A0 VA: 0x180328DA0 Slot: 8
	public override int get_Remaining() { }
	// RVA: 0x328DB0 Offset: 0x3275B0 VA: 0x180328DB0 Slot: 9
	public override void Reset() { }
	// RVA: 0x328DD0 Offset: 0x3275D0 VA: 0x180328DD0
	private char TryBestFit(char cUnknown) { }
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderExceptionFallback : EncoderFallback // TypeDefIndex: 363
{
	// Properties
	public override int MaxCharCount { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x476F70 Offset: 0x475770 VA: 0x180476F70 Slot: 4
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 5
	public override int get_MaxCharCount() { }
	// RVA: 0x476FE0 Offset: 0x4757E0 VA: 0x180476FE0 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x477080 Offset: 0x475880 VA: 0x180477080 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class EncoderExceptionFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 364
{
	// Properties
	public override int Remaining { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x477090 Offset: 0x475890 VA: 0x180477090 Slot: 4
	public override bool Fallback(char charUnknown, int index) { }
	// RVA: 0x4771A0 Offset: 0x4759A0 VA: 0x1804771A0 Slot: 5
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 6
	public override char GetNextChar() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 7
	public override bool MovePrevious() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 8
	public override int get_Remaining() { }
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderFallbackException : ArgumentException // TypeDefIndex: 365
{
	// Fields
	private char charUnknown; // 0x90
	private char charUnknownHigh; // 0x92
	private char charUnknownLow; // 0x94
	private int index; // 0x98

	// Methods
	// RVA: 0x477E70 Offset: 0x476670 VA: 0x180477E70
	public void .ctor() { }
	// RVA: 0x2CFB00 Offset: 0x2CE300 VA: 0x1802CFB00
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x477F00 Offset: 0x476700 VA: 0x180477F00
	internal void .ctor(string message, char charUnknown, int index) { }
	// RVA: 0x477F50 Offset: 0x476750 VA: 0x180477F50
	internal void .ctor(string message, char charUnknownHigh, char charUnknownLow, int index) { }
}

// Namespace: System.Text
[Serializable]
public abstract class EncoderFallback // TypeDefIndex: 366
{
	// Fields
	internal bool bIsMicrosoftBestFitFallback; // 0x10
	private static EncoderFallback replacementFallback; // 0x0
	private static EncoderFallback exceptionFallback; // 0x8
	private static object s_InternalSyncObject; // 0x10

	// Properties
	private static object InternalSyncObject { get; }
	public static EncoderFallback ReplacementFallback { get; }
	public static EncoderFallback ExceptionFallback { get; }
	public abstract int MaxCharCount { get; }

	// Methods
	// RVA: 0x477560 Offset: 0x475D60 VA: 0x180477560
	private static object get_InternalSyncObject() { }
	// RVA: 0x477610 Offset: 0x475E10 VA: 0x180477610
	public static EncoderFallback get_ReplacementFallback() { }
	// RVA: 0x4778B0 Offset: 0x4760B0 VA: 0x1804778B0
	public static EncoderFallback get_ExceptionFallback() { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract EncoderFallbackBuffer CreateFallbackBuffer() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract int get_MaxCharCount() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Text
public abstract class EncoderFallbackBuffer // TypeDefIndex: 367
{
	// Fields
	internal char* charStart; // 0x10
	internal char* charEnd; // 0x18
	internal EncoderNLS encoder; // 0x20
	internal bool setEncoder; // 0x28
	internal bool bUsedEncoder; // 0x29
	internal bool bFallingBack; // 0x2A
	internal int iRecursionCount; // 0x2C

	// Properties
	public abstract int Remaining { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool Fallback(char charUnknown, int index) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract char GetNextChar() { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool MovePrevious() { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract int get_Remaining() { }
	// RVA: 0x477AE0 Offset: 0x4762E0 VA: 0x180477AE0 Slot: 9
	public virtual void Reset() { }
	// RVA: 0x477B10 Offset: 0x476310 VA: 0x180477B10
	internal void InternalReset() { }
	// RVA: 0x477B30 Offset: 0x476330 VA: 0x180477B30
	internal void InternalInitialize(char* charStart, char* charEnd, EncoderNLS encoder, bool setEncoder) { }
	// RVA: 0x477B60 Offset: 0x476360 VA: 0x180477B60
	internal char InternalGetNextChar() { }
	// RVA: 0x477BA0 Offset: 0x4763A0 VA: 0x180477BA0 Slot: 10
	internal virtual bool InternalFallback(char ch, ref char* chars) { }
	// RVA: 0x477DB0 Offset: 0x4765B0 VA: 0x180477DB0
	internal void ThrowLastCharRecursive(int charRecursive) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Text
[Serializable]
internal class EncoderNLS : Encoder, ISerializable // TypeDefIndex: 368
{
	// Fields
	internal char charLeftOver; // 0x20
	protected Encoding m_encoding; // 0x28
	protected bool m_mustFlush; // 0x30
	internal bool m_throwOnOverflow; // 0x31
	internal int m_charsUsed; // 0x34

	// Methods
	// RVA: 0x478220 Offset: 0x476A20 VA: 0x180478220
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x4782D0 Offset: 0x476AD0 VA: 0x1804782D0 Slot: 9
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27E9B0 Offset: 0x27D1B0 VA: 0x18027E9B0
	internal void .ctor(Encoding encoding) { }
	// RVA: 0x478440 Offset: 0x476C40 VA: 0x180478440
	internal void .ctor() { }
	// RVA: 0x478460 Offset: 0x476C60 VA: 0x180478460 Slot: 4
	public override void Reset() { }
	// RVA: 0x478490 Offset: 0x476C90 VA: 0x180478490 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count, bool flush) { }
	// RVA: 0x478680 Offset: 0x476E80 VA: 0x180478680 Slot: 6
	public override int GetByteCount(char* chars, int count, bool flush) { }
	// RVA: 0x4787E0 Offset: 0x476FE0 VA: 0x1804787E0 Slot: 7
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush) { }
	// RVA: 0x478AA0 Offset: 0x4772A0 VA: 0x180478AA0 Slot: 8
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush) { }
	// RVA: 0x478C40 Offset: 0x477440 VA: 0x180478C40
	internal void ClearMustFlush() { }
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderReplacementFallback : EncoderFallback // TypeDefIndex: 369
{
	// Fields
	private string strDefault; // 0x18

	// Properties
	public override int MaxCharCount { get; }

	// Methods
	// RVA: 0x478C50 Offset: 0x477450 VA: 0x180478C50
	public void .ctor() { }
	// RVA: 0x478CD0 Offset: 0x4774D0 VA: 0x180478CD0
	public void .ctor(string replacement) { }
	// RVA: 0x478EA0 Offset: 0x4776A0 VA: 0x180478EA0 Slot: 4
	public override EncoderFallbackBuffer CreateFallbackBuffer() { }
	// RVA: 0x478F50 Offset: 0x477750 VA: 0x180478F50 Slot: 5
	public override int get_MaxCharCount() { }
	// RVA: 0x478F70 Offset: 0x477770 VA: 0x180478F70 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x4790C0 Offset: 0x4778C0 VA: 0x1804790C0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Text
public sealed class EncoderReplacementFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 370
{
	// Fields
	private string strDefault; // 0x30
	private int fallbackCount; // 0x38
	private int fallbackIndex; // 0x3C

	// Properties
	public override int Remaining { get; }

	// Methods
	// RVA: 0x4790F0 Offset: 0x4778F0 VA: 0x1804790F0
	public void .ctor(EncoderReplacementFallback fallback) { }
	// RVA: 0x479130 Offset: 0x477930 VA: 0x180479130 Slot: 4
	public override bool Fallback(char charUnknown, int index) { }
	// RVA: 0x4792F0 Offset: 0x477AF0 VA: 0x1804792F0 Slot: 5
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index) { }
	// RVA: 0x479600 Offset: 0x477E00 VA: 0x180479600 Slot: 6
	public override char GetNextChar() { }
	// RVA: 0x479650 Offset: 0x477E50 VA: 0x180479650 Slot: 7
	public override bool MovePrevious() { }
	// RVA: 0x479670 Offset: 0x477E70 VA: 0x180479670 Slot: 8
	public override int get_Remaining() { }
	// RVA: 0x479680 Offset: 0x477E80 VA: 0x180479680 Slot: 9
	public override void Reset() { }
}

// Namespace: System.Text
[Serializable]
public abstract class Encoding : ICloneable // TypeDefIndex: 371
{
	// Fields
	private static Encoding defaultEncoding; // 0x0
	private static Encoding unicodeEncoding; // 0x8
	private static Encoding bigEndianUnicode; // 0x10
	private static Encoding utf7Encoding; // 0x18
	private static Encoding utf8Encoding; // 0x20
	private static Encoding utf32Encoding; // 0x28
	private static Encoding asciiEncoding; // 0x30
	private static Encoding latin1Encoding; // 0x38
	private static Hashtable encodings; // 0x40
	internal int m_codePage; // 0x10
	internal CodePageDataItem dataItem; // 0x18
	internal bool m_deserializedFromEverett; // 0x20
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	private bool m_isReadOnly; // 0x21
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal EncoderFallback encoderFallback; // 0x28
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal DecoderFallback decoderFallback; // 0x30
	private static object s_InternalSyncObject; // 0x48

	// Properties
	private static object InternalSyncObject { get; }
	public virtual string EncodingName { get; }
	public EncoderFallback EncoderFallback { set; }
	public DecoderFallback DecoderFallback { set; }
	public static Encoding ASCII { get; }
	private static Encoding Latin1 { get; }
	public virtual int CodePage { get; }
	public static Encoding Default { get; }
	public static Encoding Unicode { get; }
	public static Encoding BigEndianUnicode { get; }
	public static Encoding UTF7 { get; }
	public static Encoding UTF8 { get; }
	public static Encoding UTF32 { get; }

	// Methods
	// RVA: 0x4796A0 Offset: 0x477EA0 VA: 0x1804796A0
	protected void .ctor() { }
	// RVA: 0x479730 Offset: 0x477F30 VA: 0x180479730
	protected void .ctor(int codePage) { }
	// RVA: 0x479800 Offset: 0x478000 VA: 0x180479800 Slot: 5
	internal virtual void SetDefaultFallbacks() { }
	// RVA: 0x40A460 Offset: 0x408C60 VA: 0x18040A460
	internal void OnDeserializing() { }
	// RVA: 0x4798B0 Offset: 0x4780B0 VA: 0x1804798B0
	internal void OnDeserialized() { }
	[OnDeserializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x40A460 Offset: 0x408C60 VA: 0x18040A460
	private void OnDeserializing(StreamingContext ctx) { }
	[OnDeserializedAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4798B0 Offset: 0x4780B0 VA: 0x1804798B0
	private void OnDeserialized(StreamingContext ctx) { }
	[OnSerializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x1FE980 Offset: 0x1FD180 VA: 0x1801FE980
	private void OnSerializing(StreamingContext ctx) { }
	// RVA: 0x479900 Offset: 0x478100 VA: 0x180479900
	internal void DeserializeEncoding(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x479BD0 Offset: 0x4783D0 VA: 0x180479BD0
	internal void SerializeEncoding(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x479D20 Offset: 0x478520 VA: 0x180479D20
	private static object get_InternalSyncObject() { }
	// RVA: 0x479DD0 Offset: 0x4785D0 VA: 0x180479DD0
	public static Encoding GetEncoding(int codepage) { }
	// RVA: 0x47ABC0 Offset: 0x4793C0 VA: 0x18047ABC0
	public static Encoding GetEncoding(int codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback) { }
	// RVA: 0x47AE50 Offset: 0x479650 VA: 0x18047AE50
	public static Encoding GetEncoding(string name) { }
	// RVA: 0x47B040 Offset: 0x479840 VA: 0x18047B040 Slot: 6
	public virtual byte[] GetPreamble() { }
	// RVA: 0x47B0E0 Offset: 0x4798E0 VA: 0x18047B0E0 Slot: 7
	public virtual string get_EncodingName() { }
	// RVA: 0x47B230 Offset: 0x479A30 VA: 0x18047B230
	public void set_EncoderFallback(EncoderFallback value) { }
	// RVA: 0x47B330 Offset: 0x479B30 VA: 0x18047B330
	public void set_DecoderFallback(DecoderFallback value) { }
	// RVA: 0x47B430 Offset: 0x479C30 VA: 0x18047B430 Slot: 8
	public virtual object Clone() { }
	// RVA: 0x47B500 Offset: 0x479D00 VA: 0x18047B500
	public static Encoding get_ASCII() { }
	// RVA: 0x47B650 Offset: 0x479E50 VA: 0x18047B650
	private static Encoding get_Latin1() { }
	// RVA: 0x47B7A0 Offset: 0x479FA0 VA: 0x18047B7A0 Slot: 9
	public virtual int GetByteCount(string s) { }
	// RVA: -1 Offset: -1 Slot: 10
	public abstract int GetByteCount(char[] chars, int index, int count) { }
	// RVA: 0x47B890 Offset: 0x47A090 VA: 0x18047B890 Slot: 11
	public virtual int GetByteCount(char* chars, int count) { }
	// RVA: 0x47BA30 Offset: 0x47A230 VA: 0x18047BA30 Slot: 12
	internal virtual int GetByteCount(char* chars, int count, EncoderNLS encoder) { }
	// RVA: 0x47BA50 Offset: 0x47A250 VA: 0x18047BA50 Slot: 13
	public virtual byte[] GetBytes(char[] chars, int index, int count) { }
	// RVA: -1 Offset: -1 Slot: 14
	public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x47BB50 Offset: 0x47A350 VA: 0x18047BB50 Slot: 15
	public virtual byte[] GetBytes(string s) { }
	// RVA: 0x47BC80 Offset: 0x47A480 VA: 0x18047BC80 Slot: 16
	public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x47BD80 Offset: 0x47A580 VA: 0x18047BD80 Slot: 17
	internal virtual int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder) { }
	// RVA: 0x47BDA0 Offset: 0x47A5A0 VA: 0x18047BDA0 Slot: 18
	public virtual int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }
	// RVA: -1 Offset: -1 Slot: 19
	public abstract int GetCharCount(byte[] bytes, int index, int count) { }
	// RVA: 0x47BFF0 Offset: 0x47A7F0 VA: 0x18047BFF0 Slot: 20
	public virtual int GetCharCount(byte* bytes, int count) { }
	// RVA: 0x47C180 Offset: 0x47A980 VA: 0x18047C180 Slot: 21
	internal virtual int GetCharCount(byte* bytes, int count, DecoderNLS decoder) { }
	// RVA: 0x47C1A0 Offset: 0x47A9A0 VA: 0x18047C1A0 Slot: 22
	public virtual char[] GetChars(byte[] bytes, int index, int count) { }
	// RVA: -1 Offset: -1 Slot: 23
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
	// RVA: 0x47C2A0 Offset: 0x47AAA0 VA: 0x18047C2A0 Slot: 24
	public virtual int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }
	// RVA: 0x47C4F0 Offset: 0x47ACF0 VA: 0x18047C4F0 Slot: 25
	internal virtual int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder) { }
	// RVA: 0x198900 Offset: 0x197100 VA: 0x180198900 Slot: 26
	public virtual int get_CodePage() { }
	// RVA: 0x47C510 Offset: 0x47AD10 VA: 0x18047C510 Slot: 27
	public virtual Decoder GetDecoder() { }
	// RVA: 0x47C590 Offset: 0x47AD90 VA: 0x18047C590
	private static Encoding CreateDefaultEncoding() { }
	// RVA: 0x47C630 Offset: 0x47AE30 VA: 0x18047C630
	public static Encoding get_Default() { }
	// RVA: 0x47C770 Offset: 0x47AF70 VA: 0x18047C770 Slot: 28
	public virtual Encoder GetEncoder() { }
	// RVA: -1 Offset: -1 Slot: 29
	public abstract int GetMaxByteCount(int charCount) { }
	// RVA: -1 Offset: -1 Slot: 30
	public abstract int GetMaxCharCount(int byteCount) { }
	// RVA: 0x47C7F0 Offset: 0x47AFF0 VA: 0x18047C7F0 Slot: 31
	public virtual string GetString(byte[] bytes) { }
	// RVA: 0x47C8E0 Offset: 0x47B0E0 VA: 0x18047C8E0 Slot: 32
	public virtual string GetString(byte[] bytes, int index, int count) { }
	// RVA: 0x47C910 Offset: 0x47B110 VA: 0x18047C910
	public static Encoding get_Unicode() { }
	// RVA: 0x47C9F0 Offset: 0x47B1F0 VA: 0x18047C9F0
	public static Encoding get_BigEndianUnicode() { }
	// RVA: 0x47CAD0 Offset: 0x47B2D0 VA: 0x18047CAD0
	public static Encoding get_UTF7() { }
	// RVA: 0x47CC20 Offset: 0x47B420 VA: 0x18047CC20
	public static Encoding get_UTF8() { }
	// RVA: 0x47CD70 Offset: 0x47B570 VA: 0x18047CD70
	public static Encoding get_UTF32() { }
	// RVA: 0x47CE60 Offset: 0x47B660 VA: 0x18047CE60 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x47CF80 Offset: 0x47B780 VA: 0x18047CF80 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x47CFF0 Offset: 0x47B7F0 VA: 0x18047CFF0 Slot: 33
	internal virtual char[] GetBestFitUnicodeToBytesData() { }
	// RVA: 0x47D090 Offset: 0x47B890 VA: 0x18047D090
	internal void ThrowBytesOverflow() { }
	// RVA: 0x47D190 Offset: 0x47B990 VA: 0x18047D190
	internal void ThrowBytesOverflow(EncoderNLS encoder, bool nothingEncoded) { }
	// RVA: 0x47D220 Offset: 0x47BA20 VA: 0x18047D220
	internal void ThrowCharsOverflow() { }
	// RVA: 0x47D320 Offset: 0x47BB20 VA: 0x18047D320
	internal void ThrowCharsOverflow(DecoderNLS decoder, bool nothingDecoded) { }
}

// Namespace: 
[Serializable]
internal class Encoding.DefaultEncoder : Encoder, ISerializable, IObjectReference // TypeDefIndex: 372
{
	// Fields
	private Encoding m_encoding; // 0x20
	private bool m_hasInitializedEncoding; // 0x28
	internal char charLeftOver; // 0x2A

	// Methods
	// RVA: 0x26D0F0 Offset: 0x26B8F0 VA: 0x18026D0F0
	public void .ctor(Encoding encoding) { }
	// RVA: 0x26D550 Offset: 0x26BD50 VA: 0x18026D550
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x26D7B0 Offset: 0x26BFB0 VA: 0x18026D7B0 Slot: 10
	public object GetRealObject(StreamingContext context) { }
	// RVA: 0x26D8D0 Offset: 0x26C0D0 VA: 0x18026D8D0 Slot: 9
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x26D990 Offset: 0x26C190 VA: 0x18026D990 Slot: 5
	public override int GetByteCount(char[] chars, int index, int count, bool flush) { }
	// RVA: 0x26D9C0 Offset: 0x26C1C0 VA: 0x18026D9C0 Slot: 6
	public override int GetByteCount(char* chars, int count, bool flush) { }
	// RVA: 0x26D9F0 Offset: 0x26C1F0 VA: 0x18026D9F0 Slot: 7
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush) { }
	// RVA: 0x26DA20 Offset: 0x26C220 VA: 0x18026DA20 Slot: 8
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush) { }
}

// Namespace: 
[Serializable]
internal class Encoding.DefaultDecoder : Decoder, ISerializable, IObjectReference // TypeDefIndex: 373
{
	// Fields
	private Encoding m_encoding; // 0x20
	private bool m_hasInitializedEncoding; // 0x28

	// Methods
	// RVA: 0x26D0F0 Offset: 0x26B8F0 VA: 0x18026D0F0
	public void .ctor(Encoding encoding) { }
	// RVA: 0x26D100 Offset: 0x26B900 VA: 0x18026D100
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x26D310 Offset: 0x26BB10 VA: 0x18026D310 Slot: 12
	public object GetRealObject(StreamingContext context) { }
	// RVA: 0x26D360 Offset: 0x26BB60 VA: 0x18026D360 Slot: 11
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x26D420 Offset: 0x26BC20 VA: 0x18026D420 Slot: 5
	public override int GetCharCount(byte[] bytes, int index, int count) { }
	// RVA: 0x26D450 Offset: 0x26BC50 VA: 0x18026D450 Slot: 6
	public override int GetCharCount(byte[] bytes, int index, int count, bool flush) { }
	// RVA: 0x26D480 Offset: 0x26BC80 VA: 0x18026D480 Slot: 7
	public override int GetCharCount(byte* bytes, int count, bool flush) { }
	// RVA: 0x26D4B0 Offset: 0x26BCB0 VA: 0x18026D4B0 Slot: 8
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
	// RVA: 0x26D4F0 Offset: 0x26BCF0 VA: 0x18026D4F0 Slot: 9
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush) { }
	// RVA: 0x26D520 Offset: 0x26BD20 VA: 0x18026D520 Slot: 10
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush) { }
}

// Namespace: 
internal class Encoding.EncodingCharBuffer // TypeDefIndex: 374
{
	// Fields
	private char* chars; // 0x10
	private char* charStart; // 0x18
	private char* charEnd; // 0x20
	private int charCountResult; // 0x28
	private Encoding enc; // 0x30
	private DecoderNLS decoder; // 0x38
	private byte* byteStart; // 0x40
	private byte* byteEnd; // 0x48
	private byte* bytes; // 0x50
	private DecoderFallbackBuffer fallbackBuffer; // 0x58

	// Properties
	internal bool MoreData { get; }
	internal int BytesUsed { get; }

	// Methods
	// RVA: 0x26E080 Offset: 0x26C880 VA: 0x18026E080
	internal void .ctor(Encoding enc, DecoderNLS decoder, char* charStart, int charCount, byte* byteStart, int byteCount) { }
	// RVA: 0x26E120 Offset: 0x26C920 VA: 0x18026E120
	internal bool AddChar(char ch, int numBytes) { }
	// RVA: 0x26E200 Offset: 0x26CA00 VA: 0x18026E200
	internal bool AddChar(char ch) { }
	// RVA: 0x26E2D0 Offset: 0x26CAD0 VA: 0x18026E2D0
	internal void AdjustBytes(int count) { }
	// RVA: 0x26E2E0 Offset: 0x26CAE0 VA: 0x18026E2E0
	internal bool get_MoreData() { }
	// RVA: 0x26E2F0 Offset: 0x26CAF0 VA: 0x18026E2F0
	internal byte GetNextByte() { }
	// RVA: 0x26E310 Offset: 0x26CB10 VA: 0x18026E310
	internal int get_BytesUsed() { }
	// RVA: 0x26E320 Offset: 0x26CB20 VA: 0x18026E320
	internal bool Fallback(byte fallbackByte) { }
	// RVA: 0x26E3E0 Offset: 0x26CBE0 VA: 0x18026E3E0
	internal bool Fallback(byte[] byteBuffer) { }
}

// Namespace: 
internal class Encoding.EncodingByteBuffer // TypeDefIndex: 375
{
	// Fields
	private byte* bytes; // 0x10
	private byte* byteStart; // 0x18
	private byte* byteEnd; // 0x20
	private char* chars; // 0x28
	private char* charStart; // 0x30
	private char* charEnd; // 0x38
	private int byteCountResult; // 0x40
	private Encoding enc; // 0x48
	private EncoderNLS encoder; // 0x50
	internal EncoderFallbackBuffer fallbackBuffer; // 0x58

	// Properties
	internal bool MoreData { get; }
	internal int CharsUsed { get; }

	// Methods
	// RVA: 0x26DA50 Offset: 0x26C250 VA: 0x18026DA50
	internal void .ctor(Encoding inEncoding, EncoderNLS inEncoder, byte* inByteStart, int inByteCount, char* inCharStart, int inCharCount) { }
	// RVA: 0x26DCE0 Offset: 0x26C4E0 VA: 0x18026DCE0
	internal bool AddByte(byte b, int moreBytesExpected) { }
	// RVA: 0x26DDF0 Offset: 0x26C5F0 VA: 0x18026DDF0
	internal bool AddByte(byte b1) { }
	// RVA: 0x26DE00 Offset: 0x26C600 VA: 0x18026DE00
	internal bool AddByte(byte b1, byte b2) { }
	// RVA: 0x26DE50 Offset: 0x26C650 VA: 0x18026DE50
	internal bool AddByte(byte b1, byte b2, int moreBytesExpected) { }
	// RVA: 0x26DEB0 Offset: 0x26C6B0 VA: 0x18026DEB0
	internal void MovePrevious(bool bThrow) { }
	// RVA: 0x26DFA0 Offset: 0x26C7A0 VA: 0x18026DFA0
	internal bool get_MoreData() { }
	// RVA: 0x26DFF0 Offset: 0x26C7F0 VA: 0x18026DFF0
	internal char GetNextChar() { }
	// RVA: 0x26E060 Offset: 0x26C860 VA: 0x18026E060
	internal int get_CharsUsed() { }
}

// Namespace: System.Text
[Serializable]
internal abstract class EncodingNLS : Encoding // TypeDefIndex: 376
{
	// Methods
	// RVA: 0x47DE70 Offset: 0x47C670 VA: 0x18047DE70
	protected void .ctor(int codePage) { }
	// RVA: 0x47DE80 Offset: 0x47C680 VA: 0x18047DE80 Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }
	// RVA: 0x47E050 Offset: 0x47C850 VA: 0x18047E050 Slot: 9
	public override int GetByteCount(string s) { }
	// RVA: 0x47E120 Offset: 0x47C920 VA: 0x18047E120 Slot: 11
	public override int GetByteCount(char* chars, int count) { }
	// RVA: 0x47E260 Offset: 0x47CA60 VA: 0x18047E260 Slot: 16
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x47E4E0 Offset: 0x47CCE0 VA: 0x18047E4E0 Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x47E770 Offset: 0x47CF70 VA: 0x18047E770 Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }
	// RVA: 0x47E8F0 Offset: 0x47D0F0 VA: 0x18047E8F0 Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }
	// RVA: 0x47EAC0 Offset: 0x47D2C0 VA: 0x18047EAC0 Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }
	// RVA: 0x47EC00 Offset: 0x47D400 VA: 0x18047EC00 Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
	// RVA: 0x47EE90 Offset: 0x47D690 VA: 0x18047EE90 Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }
	// RVA: 0x47F010 Offset: 0x47D810 VA: 0x18047F010 Slot: 32
	public override string GetString(byte[] bytes, int index, int count) { }
	// RVA: 0x47F1E0 Offset: 0x47D9E0 VA: 0x18047F1E0 Slot: 27
	public override Decoder GetDecoder() { }
	// RVA: 0x47F290 Offset: 0x47DA90 VA: 0x18047F290 Slot: 28
	public override Encoder GetEncoder() { }
}

// Namespace: System.Text
public abstract class EncodingProvider // TypeDefIndex: 377
{
	// Fields
	private static object s_InternalSyncObject; // 0x0
	private static EncodingProvider[] s_providers; // 0x8

	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	public abstract Encoding GetEncoding(string name) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract Encoding GetEncoding(int codepage) { }
	// RVA: 0x47F340 Offset: 0x47DB40 VA: 0x18047F340 Slot: 6
	public virtual Encoding GetEncoding(int codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback) { }
	// RVA: 0x47F4B0 Offset: 0x47DCB0 VA: 0x18047F4B0
	internal static Encoding GetEncodingFromProvider(int codepage) { }
	// RVA: 0x47F600 Offset: 0x47DE00 VA: 0x18047F600
	internal static Encoding GetEncodingFromProvider(string encodingName) { }
	// RVA: 0x47F750 Offset: 0x47DF50 VA: 0x18047F750
	internal static Encoding GetEncodingFromProvider(int codepage, EncoderFallback enc, DecoderFallback dec) { }
	// RVA: 0x47F8C0 Offset: 0x47E0C0 VA: 0x18047F8C0
	private static void .cctor() { }
}

// Namespace: System.Text
[Serializable]
internal class Latin1Encoding : EncodingNLS, ISerializable // TypeDefIndex: 378
{
	// Fields
	private static readonly char[] arrayCharBestFit; // 0xA17960

	// Methods
	// RVA: 0x3307B0 Offset: 0x32EFB0 VA: 0x1803307B0
	public void .ctor() { }
	// RVA: 0x330840 Offset: 0x32F040 VA: 0x180330840
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x330900 Offset: 0x32F100 VA: 0x180330900 Slot: 34
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x330B00 Offset: 0x32F300 VA: 0x180330B00 Slot: 12
	internal override int GetByteCount(char* chars, int charCount, EncoderNLS encoder) { }
	// RVA: 0x330D30 Offset: 0x32F530 VA: 0x180330D30 Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder) { }
	// RVA: 0x331240 Offset: 0x32FA40 VA: 0x180331240 Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS decoder) { }
	// RVA: 0x331250 Offset: 0x32FA50 VA: 0x180331250 Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS decoder) { }
	// RVA: 0x331330 Offset: 0x32FB30 VA: 0x180331330 Slot: 29
	public override int GetMaxByteCount(int charCount) { }
	// RVA: 0x331490 Offset: 0x32FC90 VA: 0x180331490 Slot: 30
	public override int GetMaxCharCount(int byteCount) { }
	// RVA: 0x3315F0 Offset: 0x32FDF0 VA: 0x1803315F0 Slot: 33
	internal override char[] GetBestFitUnicodeToBytesData() { }
	// RVA: 0x331690 Offset: 0x32FE90 VA: 0x180331690
	private static void .cctor() { }
}

// Namespace: System.Text
[DefaultMemberAttribute] // RVA: 0xD99E0 Offset: 0xD8DE0 VA: 0x1800D99E0
[Serializable]
public sealed class StringBuilder : ISerializable // TypeDefIndex: 379
{
	// Fields
	internal char[] m_ChunkChars; // 0x10
	internal StringBuilder m_ChunkPrevious; // 0x18
	internal int m_ChunkLength; // 0x20
	internal int m_ChunkOffset; // 0x24
	internal int m_MaxCapacity; // 0x28
	internal const int DefaultCapacity = 16; // 0x0
	private const string CapacityField = "Capacity"; // 0x0
	private const string MaxCapacityField = "m_MaxCapacity"; // 0x0
	private const string StringValueField = "m_StringValue"; // 0x0
	private const string ThreadIDField = "m_currentThread"; // 0x0
	internal const int MaxChunkSize = 8000; // 0x0

	// Properties
	public int Capacity { get; }
	public int Length { get; set; }
	public char Chars { get; set; }

	// Methods
	// RVA: 0x389D90 Offset: 0x388590 VA: 0x180389D90
	public void .ctor() { }
	// RVA: 0x389DA0 Offset: 0x3885A0 VA: 0x180389DA0
	public void .ctor(int capacity) { }
	// RVA: 0x389E60 Offset: 0x388660 VA: 0x180389E60
	public void .ctor(string value) { }
	// RVA: 0x389EA0 Offset: 0x3886A0 VA: 0x180389EA0
	public void .ctor(string value, int capacity) { }
	// RVA: 0x389EE0 Offset: 0x3886E0 VA: 0x180389EE0
	public void .ctor(string value, int startIndex, int length, int capacity) { }
	// RVA: 0x38A1B0 Offset: 0x3889B0 VA: 0x18038A1B0
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x38A600 Offset: 0x388E00 VA: 0x18038A600 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x38A730 Offset: 0x388F30 VA: 0x18038A730
	public int get_Capacity() { }
	// RVA: 0x38A750 Offset: 0x388F50 VA: 0x18038A750 Slot: 3
	public override string ToString() { }
	// RVA: 0x38A8C0 Offset: 0x3890C0 VA: 0x18038A8C0
	public string ToString(int startIndex, int length) { }
	// RVA: 0x38ABB0 Offset: 0x3893B0 VA: 0x18038ABB0
	public StringBuilder Clear() { }
	// RVA: 0x38ABD0 Offset: 0x3893D0 VA: 0x18038ABD0
	public int get_Length() { }
	// RVA: 0x38ABE0 Offset: 0x3893E0 VA: 0x18038ABE0
	public void set_Length(int value) { }
	// RVA: 0x38ADD0 Offset: 0x3895D0 VA: 0x18038ADD0
	public char get_Chars(int index) { }
	// RVA: 0x38AEE0 Offset: 0x3896E0 VA: 0x18038AEE0
	public void set_Chars(int index, char value) { }
	// RVA: 0x38B040 Offset: 0x389840 VA: 0x18038B040
	public StringBuilder Append(char value, int repeatCount) { }
	// RVA: 0x38B180 Offset: 0x389980 VA: 0x18038B180
	public StringBuilder Append(char[] value, int startIndex, int charCount) { }
	// RVA: 0x38B390 Offset: 0x389B90 VA: 0x18038B390
	public StringBuilder Append(string value) { }
	// RVA: 0x38B4B0 Offset: 0x389CB0 VA: 0x18038B4B0
	private void AppendHelper(string value) { }
	// RVA: 0x38B4E0 Offset: 0x389CE0 VA: 0x18038B4E0
	public StringBuilder Append(string value, int startIndex, int count) { }
	// RVA: 0x38B6D0 Offset: 0x389ED0 VA: 0x18038B6D0
	public StringBuilder AppendLine() { }
	// RVA: 0x38B700 Offset: 0x389F00 VA: 0x18038B700
	public StringBuilder AppendLine(string value) { }
	// RVA: 0x38B730 Offset: 0x389F30 VA: 0x18038B730
	public StringBuilder Insert(int index, string value, int count) { }
	// RVA: 0x38BCE0 Offset: 0x38A4E0 VA: 0x18038BCE0
	public StringBuilder Remove(int startIndex, int length) { }
	// RVA: 0x38BEA0 Offset: 0x38A6A0 VA: 0x18038BEA0
	public StringBuilder Append(char value) { }
	// RVA: 0x38BF10 Offset: 0x38A710 VA: 0x18038BF10
	public StringBuilder Append(int value) { }
	// RVA: 0x38BFF0 Offset: 0x38A7F0 VA: 0x18038BFF0
	public StringBuilder Append(long value) { }
	// RVA: 0x38C0D0 Offset: 0x38A8D0 VA: 0x18038C0D0
	public StringBuilder Append(object value) { }
	// RVA: 0x38C110 Offset: 0x38A910 VA: 0x18038C110
	public StringBuilder Insert(int index, string value) { }
	// RVA: 0x38C210 Offset: 0x38AA10 VA: 0x18038C210
	public StringBuilder Insert(int index, char value) { }
	// RVA: 0x38C240 Offset: 0x38AA40 VA: 0x18038C240
	public StringBuilder AppendFormat(string format, object arg0) { }
	// RVA: 0x38C2B0 Offset: 0x38AAB0 VA: 0x18038C2B0
	public StringBuilder AppendFormat(string format, object arg0, object arg1) { }
	// RVA: 0x38C320 Offset: 0x38AB20 VA: 0x18038C320
	public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2) { }
	// RVA: 0x38C3A0 Offset: 0x38ABA0 VA: 0x18038C3A0
	public StringBuilder AppendFormat(string format, object[] args) { }
	// RVA: 0x38C520 Offset: 0x38AD20 VA: 0x18038C520
	public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0) { }
	// RVA: 0x38C5A0 Offset: 0x38ADA0 VA: 0x18038C5A0
	public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0, object arg1) { }
	// RVA: 0x38C620 Offset: 0x38AE20 VA: 0x18038C620
	private static void FormatError() { }
	// RVA: 0x38C690 Offset: 0x38AE90 VA: 0x18038C690
	internal StringBuilder AppendFormatHelper(IFormatProvider provider, string format, ParamsArray args) { }
	// RVA: 0x38CC80 Offset: 0x38B480 VA: 0x18038CC80
	public StringBuilder Replace(string oldValue, string newValue) { }
	// RVA: 0x38CCB0 Offset: 0x38B4B0 VA: 0x18038CCB0
	public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count) { }
	// RVA: 0x38D150 Offset: 0x38B950 VA: 0x18038D150
	public StringBuilder Append(char* value, int valueCount) { }
	// RVA: 0x38D2B0 Offset: 0x38BAB0 VA: 0x18038D2B0
	private void Insert(int index, char* value, int valueCount) { }
	// RVA: 0x38D7C0 Offset: 0x38BFC0 VA: 0x18038D7C0
	private void ReplaceAllInChunk(int[] replacements, int replacementsCount, StringBuilder sourceChunk, int removeCount, string value) { }
	// RVA: 0x38D9E0 Offset: 0x38C1E0 VA: 0x18038D9E0
	private bool StartsWith(StringBuilder chunk, int indexInChunk, int count, string value) { }
	// RVA: 0x38DAC0 Offset: 0x38C2C0 VA: 0x18038DAC0
	private void ReplaceInPlaceAtChunk(ref StringBuilder chunk, ref int indexInChunk, char* value, int count) { }
	// RVA: 0x38DC30 Offset: 0x38C430 VA: 0x18038DC30
	private static void ThreadSafeCopy(char* sourcePtr, char[] destination, int destinationIndex, int count) { }
	// RVA: 0x38DD50 Offset: 0x38C550 VA: 0x18038DD50
	private static void ThreadSafeCopy(char[] source, int sourceIndex, char[] destination, int destinationIndex, int count) { }
	// RVA: 0x38DE90 Offset: 0x38C690 VA: 0x18038DE90
	private StringBuilder FindChunkForIndex(int index) { }
	// RVA: 0x38DED0 Offset: 0x38C6D0 VA: 0x18038DED0
	private StringBuilder Next(StringBuilder chunk) { }
	// RVA: 0x38DF20 Offset: 0x38C720 VA: 0x18038DF20
	private void ExpandByABlock(int minBlockCharCount) { }
	// RVA: 0x38E0D0 Offset: 0x38C8D0 VA: 0x18038E0D0
	private void .ctor(StringBuilder from) { }
	// RVA: 0x38E110 Offset: 0x38C910 VA: 0x18038E110
	private void MakeRoom(int index, int count, out StringBuilder chunk, out int indexInChunk, bool doneMoveFollowingChars) { }
	// RVA: 0x38E4A0 Offset: 0x38CCA0 VA: 0x18038E4A0
	private void .ctor(int size, int maxCapacity, StringBuilder previousBlock) { }
	// RVA: 0x38E560 Offset: 0x38CD60 VA: 0x18038E560
	private void Remove(int startIndex, int count, out StringBuilder chunk, out int indexInChunk) { }
}

// Namespace: System.Text
internal static class StringBuilderCache // TypeDefIndex: 380
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static StringBuilder CachedInstance; // 0x80000000

	// Methods
	// RVA: 0x38E780 Offset: 0x38CF80 VA: 0x18038E780
	public static StringBuilder Acquire(int capacity = 16) { }
	// RVA: 0x38E8A0 Offset: 0x38D0A0 VA: 0x18038E8A0
	public static void Release(StringBuilder sb) { }
	// RVA: 0x38E980 Offset: 0x38D180 VA: 0x18038E980
	public static string GetStringAndRelease(StringBuilder sb) { }
}

// Namespace: System.Text
[Serializable]
public class UnicodeEncoding : Encoding // TypeDefIndex: 381
{
	// Fields
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal bool isThrowException; // 0x38
	internal bool bigEndian; // 0x39
	internal bool byteOrderMark; // 0x3A
	private static readonly ulong highLowPatternMask; // 0x0

	// Methods
	// RVA: 0x411820 Offset: 0x410020 VA: 0x180411820
	public void .ctor() { }
	// RVA: 0x411850 Offset: 0x410050 VA: 0x180411850
	public void .ctor(bool bigEndian, bool byteOrderMark) { }
	// RVA: 0x4118A0 Offset: 0x4100A0 VA: 0x1804118A0
	public void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) { }
	[OnDeserializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x411910 Offset: 0x410110 VA: 0x180411910
	private void OnDeserializing(StreamingContext ctx) { }
	// RVA: 0x411920 Offset: 0x410120 VA: 0x180411920 Slot: 5
	internal override void SetDefaultFallbacks() { }
	// RVA: 0x411A10 Offset: 0x410210 VA: 0x180411A10 Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }
	// RVA: 0x411BE0 Offset: 0x4103E0 VA: 0x180411BE0 Slot: 9
	public override int GetByteCount(string s) { }
	// RVA: 0x411CB0 Offset: 0x4104B0 VA: 0x180411CB0 Slot: 11
	public override int GetByteCount(char* chars, int count) { }
	// RVA: 0x411DF0 Offset: 0x4105F0 VA: 0x180411DF0 Slot: 16
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x412070 Offset: 0x410870 VA: 0x180412070 Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x412300 Offset: 0x410B00 VA: 0x180412300 Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }
	// RVA: 0x412480 Offset: 0x410C80 VA: 0x180412480 Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }
	// RVA: 0x412650 Offset: 0x410E50 VA: 0x180412650 Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }
	// RVA: 0x412790 Offset: 0x410F90 VA: 0x180412790 Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
	// RVA: 0x412A20 Offset: 0x411220 VA: 0x180412A20 Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }
	// RVA: 0x412BA0 Offset: 0x4113A0 VA: 0x180412BA0 Slot: 32
	public override string GetString(byte[] bytes, int index, int count) { }
	// RVA: 0x412D70 Offset: 0x411570 VA: 0x180412D70 Slot: 12
	internal override int GetByteCount(char* chars, int count, EncoderNLS encoder) { }
	// RVA: 0x413560 Offset: 0x411D60 VA: 0x180413560 Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder) { }
	// RVA: 0x413FF0 Offset: 0x4127F0 VA: 0x180413FF0 Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder) { }
	// RVA: 0x414910 Offset: 0x413110 VA: 0x180414910 Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder) { }
	// RVA: 0x415540 Offset: 0x413D40 VA: 0x180415540 Slot: 28
	public override Encoder GetEncoder() { }
	// RVA: 0x4155F0 Offset: 0x413DF0 VA: 0x1804155F0 Slot: 27
	public override Decoder GetDecoder() { }
	// RVA: 0x4156B0 Offset: 0x413EB0 VA: 0x1804156B0 Slot: 6
	public override byte[] GetPreamble() { }
	// RVA: 0x4157F0 Offset: 0x413FF0 VA: 0x1804157F0 Slot: 29
	public override int GetMaxByteCount(int charCount) { }
	// RVA: 0x415950 Offset: 0x414150 VA: 0x180415950 Slot: 30
	public override int GetMaxCharCount(int byteCount) { }
	// RVA: 0x415AC0 Offset: 0x4142C0 VA: 0x180415AC0 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x415C20 Offset: 0x414420 VA: 0x180415C20 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x415CC0 Offset: 0x4144C0 VA: 0x180415CC0
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private class UnicodeEncoding.Decoder : DecoderNLS, ISerializable // TypeDefIndex: 382
{
	// Fields
	internal int lastByte; // 0x30
	internal char lastChar; // 0x34

	// Properties
	internal override bool HasState { get; }

	// Methods
	// RVA: 0x27F500 Offset: 0x27DD00 VA: 0x18027F500
	public void .ctor(UnicodeEncoding encoding) { }
	// RVA: 0x27F540 Offset: 0x27DD40 VA: 0x18027F540
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27F8C0 Offset: 0x27E0C0 VA: 0x18027F8C0 Slot: 11
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27FA80 Offset: 0x27E280 VA: 0x18027FA80 Slot: 4
	public override void Reset() { }
	// RVA: 0x27FAB0 Offset: 0x27E2B0 VA: 0x18027FAB0 Slot: 12
	internal override bool get_HasState() { }
}

// Namespace: System.Text
[Serializable]
public sealed class UTF32Encoding : Encoding // TypeDefIndex: 383
{
	// Fields
	private bool emitUTF32ByteOrderMark; // 0x38
	private bool isThrowException; // 0x39
	private bool bigEndian; // 0x3A

	// Methods
	// RVA: 0x4AA840 Offset: 0x4A9040 VA: 0x1804AA840
	public void .ctor() { }
	// RVA: 0x4AA880 Offset: 0x4A9080 VA: 0x1804AA880
	public void .ctor(bool bigEndian, bool byteOrderMark) { }
	// RVA: 0x4AA8D0 Offset: 0x4A90D0 VA: 0x1804AA8D0
	public void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters) { }
	// RVA: 0x4AA950 Offset: 0x4A9150 VA: 0x1804AA950 Slot: 5
	internal override void SetDefaultFallbacks() { }
	// RVA: 0x4AAA40 Offset: 0x4A9240 VA: 0x1804AAA40 Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }
	// RVA: 0x4AAC10 Offset: 0x4A9410 VA: 0x1804AAC10 Slot: 9
	public override int GetByteCount(string s) { }
	// RVA: 0x4AACE0 Offset: 0x4A94E0 VA: 0x1804AACE0 Slot: 11
	public override int GetByteCount(char* chars, int count) { }
	// RVA: 0x4AAE20 Offset: 0x4A9620 VA: 0x1804AAE20 Slot: 16
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x4AB0A0 Offset: 0x4A98A0 VA: 0x1804AB0A0 Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x4AB330 Offset: 0x4A9B30 VA: 0x1804AB330 Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }
	// RVA: 0x4AB4B0 Offset: 0x4A9CB0 VA: 0x1804AB4B0 Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }
	// RVA: 0x4AB680 Offset: 0x4A9E80 VA: 0x1804AB680 Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }
	// RVA: 0x4AB7C0 Offset: 0x4A9FC0 VA: 0x1804AB7C0 Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
	// RVA: 0x4ABA50 Offset: 0x4AA250 VA: 0x1804ABA50 Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }
	// RVA: 0x4ABBD0 Offset: 0x4AA3D0 VA: 0x1804ABBD0 Slot: 32
	public override string GetString(byte[] bytes, int index, int count) { }
	// RVA: 0x4ABDA0 Offset: 0x4AA5A0 VA: 0x1804ABDA0 Slot: 12
	internal override int GetByteCount(char* chars, int count, EncoderNLS encoder) { }
	// RVA: 0x4AC180 Offset: 0x4AA980 VA: 0x1804AC180 Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS encoder) { }
	// RVA: 0x4AC710 Offset: 0x4AAF10 VA: 0x1804AC710 Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder) { }
	// RVA: 0x4ACB40 Offset: 0x4AB340 VA: 0x1804ACB40 Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder) { }
	// RVA: 0x4AD160 Offset: 0x4AB960 VA: 0x1804AD160
	private uint GetSurrogate(char cHigh, char cLow) { }
	// RVA: 0x4AD180 Offset: 0x4AB980 VA: 0x1804AD180
	private char GetHighSurrogate(uint iChar) { }
	// RVA: 0x4AD1A0 Offset: 0x4AB9A0 VA: 0x1804AD1A0
	private char GetLowSurrogate(uint iChar) { }
	// RVA: 0x4AD1C0 Offset: 0x4AB9C0 VA: 0x1804AD1C0 Slot: 27
	public override Decoder GetDecoder() { }
	// RVA: 0x4AD270 Offset: 0x4ABA70 VA: 0x1804AD270 Slot: 28
	public override Encoder GetEncoder() { }
	// RVA: 0x4AD320 Offset: 0x4ABB20 VA: 0x1804AD320 Slot: 29
	public override int GetMaxByteCount(int charCount) { }
	// RVA: 0x4AD480 Offset: 0x4ABC80 VA: 0x1804AD480 Slot: 30
	public override int GetMaxCharCount(int byteCount) { }
	// RVA: 0x4AD590 Offset: 0x4ABD90 VA: 0x1804AD590 Slot: 6
	public override byte[] GetPreamble() { }
	// RVA: 0x4AD6E0 Offset: 0x4ABEE0 VA: 0x1804AD6E0 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x4AD7E0 Offset: 0x4ABFE0 VA: 0x1804AD7E0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
[Serializable]
internal class UTF32Encoding.UTF32Decoder : DecoderNLS // TypeDefIndex: 384
{
	// Fields
	internal int iChar; // 0x30
	internal int readByteCount; // 0x34

	// Properties
	internal override bool HasState { get; }

	// Methods
	// RVA: 0x27E2F0 Offset: 0x27CAF0 VA: 0x18027E2F0
	public void .ctor(UTF32Encoding encoding) { }
	// RVA: 0x27E320 Offset: 0x27CB20 VA: 0x18027E320 Slot: 4
	public override void Reset() { }
	// RVA: 0x27E350 Offset: 0x27CB50 VA: 0x18027E350 Slot: 12
	internal override bool get_HasState() { }
}

// Namespace: System.Text
[Serializable]
public class UTF7Encoding : Encoding // TypeDefIndex: 385
{
	// Fields
	private byte[] base64Bytes; // 0x38
	private sbyte[] base64Values; // 0x40
	private bool[] directEncode; // 0x48
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	private bool m_allowOptionals; // 0x50

	// Methods
	// RVA: 0x409FB0 Offset: 0x4087B0 VA: 0x180409FB0
	public void .ctor() { }
	// RVA: 0x40A050 Offset: 0x408850 VA: 0x18040A050
	public void .ctor(bool allowOptionals) { }
	// RVA: 0x40A0F0 Offset: 0x4088F0 VA: 0x18040A0F0
	private void MakeTables() { }
	// RVA: 0x40A3A0 Offset: 0x408BA0 VA: 0x18040A3A0 Slot: 5
	internal override void SetDefaultFallbacks() { }
	[OnDeserializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x40A460 Offset: 0x408C60 VA: 0x18040A460
	private void OnDeserializing(StreamingContext ctx) { }
	[OnDeserializedAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x40A470 Offset: 0x408C70 VA: 0x18040A470
	private void OnDeserialized(StreamingContext ctx) { }
	// RVA: 0x40A560 Offset: 0x408D60 VA: 0x18040A560 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x40A680 Offset: 0x408E80 VA: 0x18040A680 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x40A700 Offset: 0x408F00 VA: 0x18040A700 Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }
	// RVA: 0x40A8D0 Offset: 0x4090D0 VA: 0x18040A8D0 Slot: 9
	public override int GetByteCount(string s) { }
	// RVA: 0x40A9A0 Offset: 0x4091A0 VA: 0x18040A9A0 Slot: 11
	public override int GetByteCount(char* chars, int count) { }
	// RVA: 0x40AAE0 Offset: 0x4092E0 VA: 0x18040AAE0 Slot: 16
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x40AD60 Offset: 0x409560 VA: 0x18040AD60 Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x40AFF0 Offset: 0x4097F0 VA: 0x18040AFF0 Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }
	// RVA: 0x40B170 Offset: 0x409970 VA: 0x18040B170 Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }
	// RVA: 0x40B340 Offset: 0x409B40 VA: 0x18040B340 Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }
	// RVA: 0x40B480 Offset: 0x409C80 VA: 0x18040B480 Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
	// RVA: 0x40B710 Offset: 0x409F10 VA: 0x18040B710 Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }
	// RVA: 0x40B890 Offset: 0x40A090 VA: 0x18040B890 Slot: 32
	public override string GetString(byte[] bytes, int index, int count) { }
	// RVA: 0x40BA60 Offset: 0x40A260 VA: 0x18040BA60 Slot: 12
	internal override int GetByteCount(char* chars, int count, EncoderNLS baseEncoder) { }
	// RVA: 0x40BA90 Offset: 0x40A290 VA: 0x18040BA90 Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS baseEncoder) { }
	// RVA: 0x40BFD0 Offset: 0x40A7D0 VA: 0x18040BFD0 Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder) { }
	// RVA: 0x40C000 Offset: 0x40A800 VA: 0x18040C000 Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder) { }
	// RVA: 0x40C340 Offset: 0x40AB40 VA: 0x18040C340 Slot: 27
	public override Decoder GetDecoder() { }
	// RVA: 0x40C3F0 Offset: 0x40ABF0 VA: 0x18040C3F0 Slot: 28
	public override Encoder GetEncoder() { }
	// RVA: 0x40C4A0 Offset: 0x40ACA0 VA: 0x18040C4A0 Slot: 29
	public override int GetMaxByteCount(int charCount) { }
	// RVA: 0x40C5C0 Offset: 0x40ADC0 VA: 0x18040C5C0 Slot: 30
	public override int GetMaxCharCount(int byteCount) { }
}

// Namespace: 
[Serializable]
private class UTF7Encoding.Decoder : DecoderNLS, ISerializable // TypeDefIndex: 386
{
	// Fields
	internal int bits; // 0x30
	internal int bitCount; // 0x34
	internal bool firstByte; // 0x38

	// Properties
	internal override bool HasState { get; }

	// Methods
	// RVA: 0x27E2F0 Offset: 0x27CAF0 VA: 0x18027E2F0
	public void .ctor(UTF7Encoding encoding) { }
	// RVA: 0x27E360 Offset: 0x27CB60 VA: 0x18027E360
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27E5D0 Offset: 0x27CDD0 VA: 0x18027E5D0 Slot: 11
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27E6E0 Offset: 0x27CEE0 VA: 0x18027E6E0 Slot: 4
	public override void Reset() { }
	// RVA: 0x27E710 Offset: 0x27CF10 VA: 0x18027E710 Slot: 12
	internal override bool get_HasState() { }
}

// Namespace: 
[Serializable]
private class UTF7Encoding.Encoder : EncoderNLS, ISerializable // TypeDefIndex: 387
{
	// Fields
	internal int bits; // 0x38
	internal int bitCount; // 0x3C

	// Methods
	// RVA: 0x27E9B0 Offset: 0x27D1B0 VA: 0x18027E9B0
	public void .ctor(UTF7Encoding encoding) { }
	// RVA: 0x27E9E0 Offset: 0x27D1E0 VA: 0x18027E9E0
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27EC00 Offset: 0x27D400 VA: 0x18027EC00 Slot: 9
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27ECF0 Offset: 0x27D4F0 VA: 0x18027ECF0 Slot: 4
	public override void Reset() { }
}

// Namespace: 
[Serializable]
internal sealed class UTF7Encoding.DecoderUTF7Fallback : DecoderFallback // TypeDefIndex: 388
{
	// Properties
	public override int MaxCharCount { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x27E720 Offset: 0x27CF20 VA: 0x18027E720 Slot: 4
	public override DecoderFallbackBuffer CreateFallbackBuffer() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 5
	public override int get_MaxCharCount() { }
	// RVA: 0x27E7A0 Offset: 0x27CFA0 VA: 0x18027E7A0 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x27E840 Offset: 0x27D040 VA: 0x18027E840 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
internal sealed class UTF7Encoding.DecoderUTF7FallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 389
{
	// Fields
	private char cFallback; // 0x20
	private int iCount; // 0x24
	private int iSize; // 0x28

	// Methods
	// RVA: 0x27E850 Offset: 0x27D050 VA: 0x18027E850
	public void .ctor(UTF7Encoding.DecoderUTF7Fallback fallback) { }
	// RVA: 0x27E860 Offset: 0x27D060 VA: 0x18027E860 Slot: 4
	public override bool Fallback(byte[] bytesUnknown, int index) { }
	// RVA: 0x27E8B0 Offset: 0x27D0B0 VA: 0x18027E8B0 Slot: 5
	public override char GetNextChar() { }
	// RVA: 0x27E8D0 Offset: 0x27D0D0 VA: 0x18027E8D0 Slot: 6
	public override void Reset() { }
	// RVA: 0x27E8E0 Offset: 0x27D0E0 VA: 0x18027E8E0 Slot: 8
	internal override int InternalFallback(byte[] bytes, byte* pBytes) { }
}

// Namespace: System.Text
[Serializable]
public class UTF8Encoding : Encoding // TypeDefIndex: 390
{
	// Fields
	private bool emitUTF8Identifier; // 0x38
	private bool isThrowException; // 0x39

	// Methods
	// RVA: 0x40C680 Offset: 0x40AE80 VA: 0x18040C680
	public void .ctor() { }
	// RVA: 0x40C710 Offset: 0x40AF10 VA: 0x18040C710
	public void .ctor(bool encoderShouldEmitUTF8Identifier) { }
	// RVA: 0x40C720 Offset: 0x40AF20 VA: 0x18040C720
	public void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) { }
	// RVA: 0x40C7F0 Offset: 0x40AFF0 VA: 0x18040C7F0 Slot: 5
	internal override void SetDefaultFallbacks() { }
	// RVA: 0x40C8E0 Offset: 0x40B0E0 VA: 0x18040C8E0 Slot: 10
	public override int GetByteCount(char[] chars, int index, int count) { }
	// RVA: 0x40CAB0 Offset: 0x40B2B0 VA: 0x18040CAB0 Slot: 9
	public override int GetByteCount(string chars) { }
	// RVA: 0x40CB80 Offset: 0x40B380 VA: 0x18040CB80 Slot: 11
	public override int GetByteCount(char* chars, int count) { }
	// RVA: 0x40CCC0 Offset: 0x40B4C0 VA: 0x18040CCC0 Slot: 16
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x40CF40 Offset: 0x40B740 VA: 0x18040CF40 Slot: 14
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex) { }
	// RVA: 0x40D1D0 Offset: 0x40B9D0 VA: 0x18040D1D0 Slot: 18
	public override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount) { }
	// RVA: 0x40D350 Offset: 0x40BB50 VA: 0x18040D350 Slot: 19
	public override int GetCharCount(byte[] bytes, int index, int count) { }
	// RVA: 0x40D520 Offset: 0x40BD20 VA: 0x18040D520 Slot: 20
	public override int GetCharCount(byte* bytes, int count) { }
	// RVA: 0x40D660 Offset: 0x40BE60 VA: 0x18040D660 Slot: 23
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex) { }
	// RVA: 0x40D8F0 Offset: 0x40C0F0 VA: 0x18040D8F0 Slot: 24
	public override int GetChars(byte* bytes, int byteCount, char* chars, int charCount) { }
	// RVA: 0x40DA70 Offset: 0x40C270 VA: 0x18040DA70 Slot: 32
	public override string GetString(byte[] bytes, int index, int count) { }
	// RVA: 0x40DC40 Offset: 0x40C440 VA: 0x18040DC40 Slot: 12
	internal override int GetByteCount(char* chars, int count, EncoderNLS baseEncoder) { }
	// RVA: 0x40E340 Offset: 0x40CB40 VA: 0x18040E340
	private static int PtrDiff(char* a, char* b) { }
	// RVA: 0x40E350 Offset: 0x40CB50 VA: 0x18040E350
	private static int PtrDiff(byte* a, byte* b) { }
	// RVA: 0x40E360 Offset: 0x40CB60 VA: 0x18040E360
	private static bool InRange(int ch, int start, int end) { }
	// RVA: 0x40E370 Offset: 0x40CB70 VA: 0x18040E370 Slot: 17
	internal override int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, EncoderNLS baseEncoder) { }
	// RVA: 0x40EC70 Offset: 0x40D470 VA: 0x18040EC70 Slot: 21
	internal override int GetCharCount(byte* bytes, int count, DecoderNLS baseDecoder) { }
	// RVA: 0x40F1F0 Offset: 0x40D9F0 VA: 0x18040F1F0 Slot: 25
	internal override int GetChars(byte* bytes, int byteCount, char* chars, int charCount, DecoderNLS baseDecoder) { }
	// RVA: 0x40FC60 Offset: 0x40E460 VA: 0x18040FC60
	private bool FallbackInvalidByteSequence(ref byte* pSrc, int ch, DecoderFallbackBuffer fallback, ref char* pTarget) { }
	// RVA: 0x40FCE0 Offset: 0x40E4E0 VA: 0x18040FCE0
	private int FallbackInvalidByteSequence(byte* pSrc, int ch, DecoderFallbackBuffer fallback) { }
	// RVA: 0x40FD30 Offset: 0x40E530 VA: 0x18040FD30
	private byte[] GetBytesUnknown(ref byte* pSrc, int ch) { }
	// RVA: 0x410090 Offset: 0x40E890 VA: 0x180410090 Slot: 27
	public override Decoder GetDecoder() { }
	// RVA: 0x410140 Offset: 0x40E940 VA: 0x180410140 Slot: 28
	public override Encoder GetEncoder() { }
	// RVA: 0x4101F0 Offset: 0x40E9F0 VA: 0x1804101F0 Slot: 29
	public override int GetMaxByteCount(int charCount) { }
	// RVA: 0x410350 Offset: 0x40EB50 VA: 0x180410350 Slot: 30
	public override int GetMaxCharCount(int byteCount) { }
	// RVA: 0x4104B0 Offset: 0x40ECB0 VA: 0x1804104B0 Slot: 6
	public override byte[] GetPreamble() { }
	// RVA: 0x410580 Offset: 0x40ED80 VA: 0x180410580 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x4106A0 Offset: 0x40EEA0 VA: 0x1804106A0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
[Serializable]
internal class UTF8Encoding.UTF8Encoder : EncoderNLS, ISerializable // TypeDefIndex: 391
{
	// Fields
	internal int surrogateChar; // 0x38

	// Methods
	// RVA: 0x27E9B0 Offset: 0x27D1B0 VA: 0x18027E9B0
	public void .ctor(UTF8Encoding encoding) { }
	// RVA: 0x27F130 Offset: 0x27D930 VA: 0x18027F130
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27F3B0 Offset: 0x27DBB0 VA: 0x18027F3B0 Slot: 9
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27F4D0 Offset: 0x27DCD0 VA: 0x18027F4D0 Slot: 4
	public override void Reset() { }
}

// Namespace: 
[Serializable]
internal class UTF8Encoding.UTF8Decoder : DecoderNLS, ISerializable // TypeDefIndex: 392
{
	// Fields
	internal int bits; // 0x30

	// Properties
	internal override bool HasState { get; }

	// Methods
	// RVA: 0x27E2F0 Offset: 0x27CAF0 VA: 0x18027E2F0
	public void .ctor(UTF8Encoding encoding) { }
	// RVA: 0x27ED20 Offset: 0x27D520 VA: 0x18027ED20
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27EFA0 Offset: 0x27D7A0 VA: 0x18027EFA0 Slot: 11
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x27F0F0 Offset: 0x27D8F0 VA: 0x18027F0F0 Slot: 4
	public override void Reset() { }
	// RVA: 0x27F120 Offset: 0x27D920 VA: 0x18027F120 Slot: 12
	internal override bool get_HasState() { }
}

// Namespace: System.Text
internal enum NormalizationCheck // TypeDefIndex: 393
{
	// Fields
	public int value__; // 0x0
	public const NormalizationCheck Yes = 0; // 0x0
	public const NormalizationCheck No = 1; // 0x0
	public const NormalizationCheck Maybe = 2; // 0x0
}

// Namespace: System.Text
internal class Normalization // TypeDefIndex: 394
{
	// Fields
	private static byte* props; // 0x0
	private static int* mappedChars; // 0x8
	private static short* charMapIndex; // 0x10
	private static short* helperIndex; // 0x18
	private static ushort* mapIdxToComposite; // 0x20
	private static byte* combiningClass; // 0x28
	private static object forLock; // 0x30
	public static readonly bool isReady; // 0x38

	// Methods
	// RVA: 0x746250 Offset: 0x744A50 VA: 0x180746250
	private static uint PropValue(int cp) { }
	// RVA: 0x7463D0 Offset: 0x744BD0 VA: 0x1807463D0
	private static int CharMapIdx(int cp) { }
	// RVA: 0x746550 Offset: 0x744D50 VA: 0x180746550
	private static byte GetCombiningClass(int c) { }
	// RVA: 0x746640 Offset: 0x744E40 VA: 0x180746640
	private static int GetPrimaryCompositeFromMapIndex(int src) { }
	// RVA: 0x746740 Offset: 0x744F40 VA: 0x180746740
	private static int GetPrimaryCompositeHelperIndex(int cp) { }
	// RVA: 0x746840 Offset: 0x745040 VA: 0x180746840
	private static string Compose(string source, int checkType) { }
	// RVA: 0x746AB0 Offset: 0x7452B0 VA: 0x180746AB0
	private static StringBuilder Combine(string source, int start, int checkType) { }
	// RVA: 0x746C20 Offset: 0x745420 VA: 0x180746C20
	private static void Combine(StringBuilder sb, int i, int checkType) { }
	// RVA: 0x746EF0 Offset: 0x7456F0 VA: 0x180746EF0
	private static int CombineHangul(StringBuilder sb, string s, int current) { }
	// RVA: 0x747100 Offset: 0x745900 VA: 0x180747100
	private static int Fetch(StringBuilder sb, string s, int i) { }
	// RVA: 0x747150 Offset: 0x745950 VA: 0x180747150
	private static int TryComposeWithPreviousStarter(StringBuilder sb, string s, int current) { }
	// RVA: 0x7475D0 Offset: 0x745DD0 VA: 0x1807475D0
	private static int TryCompose(int i, int starter, int candidate) { }
	// RVA: 0x747790 Offset: 0x745F90 VA: 0x180747790
	private static string Decompose(string source, int checkType) { }
	// RVA: 0x747880 Offset: 0x746080 VA: 0x180747880
	private static void Decompose(string source, ref StringBuilder sb, int checkType) { }
	// RVA: 0x747C20 Offset: 0x746420 VA: 0x180747C20
	private static void ReorderCanonical(string src, ref StringBuilder sb, int start) { }
	// RVA: 0x747F00 Offset: 0x746700 VA: 0x180747F00
	private static void DecomposeChar(ref StringBuilder sb, ref int[] buf, string s, int i, int checkType, ref int start) { }
	// RVA: 0x748180 Offset: 0x746980 VA: 0x180748180
	public static NormalizationCheck QuickCheck(char c, int type) { }
	// RVA: 0x748320 Offset: 0x746B20 VA: 0x180748320
	private static int GetCanonicalHangul(int s, int[] buf, int bufIdx) { }
	// RVA: 0x748470 Offset: 0x746C70 VA: 0x180748470
	private static int GetCanonical(int c, int[] buf, int bufIdx, int checkType) { }
	// RVA: 0x748960 Offset: 0x747160 VA: 0x180748960
	public static string Normalize(string source, NormalizationForm normalizationForm) { }
	// RVA: 0x748A90 Offset: 0x747290 VA: 0x180748A90
	public static string Normalize(string source, int type) { }
	// RVA: 0x748C30 Offset: 0x747430 VA: 0x180748C30
	private static void load_normalization_resource(out IntPtr props, out IntPtr mappedChars, out IntPtr charMapIndex, out IntPtr helperIndex, out IntPtr mapIdxToComposite, out IntPtr combiningClass) { }
	// RVA: 0x748C80 Offset: 0x747480 VA: 0x180748C80
	private static void .cctor() { }
}

// Namespace: System.Text
internal static class EncodingHelper // TypeDefIndex: 395
{
	// Fields
	private static Encoding utf8EncodingWithoutMarkers; // 0x0
	private static readonly object lockobj; // 0x8
	private static Assembly i18nAssembly; // 0x10
	private static bool i18nDisabled; // 0x18

	// Properties
	internal static Encoding UTF8Unmarked { get; }

	// Methods
	// RVA: 0x47D3B0 Offset: 0x47BBB0 VA: 0x18047D3B0
	internal static Encoding get_UTF8Unmarked() { }
	// RVA: 0x47D6D0 Offset: 0x47BED0 VA: 0x18047D6D0
	internal static string InternalCodePage(ref int code_page) { }
	// RVA: 0x47D6E0 Offset: 0x47BEE0 VA: 0x18047D6E0
	internal static Encoding GetDefaultEncoding() { }
	// RVA: 0x47D840 Offset: 0x47C040 VA: 0x18047D840
	internal static object InvokeI18N(string name, object[] args) { }
	// RVA: 0x47DDF0 Offset: 0x47C5F0 VA: 0x18047DDF0
	private static void .cctor() { }
}

// Namespace: System.Text
public enum NormalizationForm // TypeDefIndex: 396
{
	// Fields
	public int value__; // 0x0
	public const NormalizationForm FormC = 1; // 0x0
	public const NormalizationForm FormD = 2; // 0x0
	public const NormalizationForm FormKC = 5; // 0x0
	public const NormalizationForm FormKD = 6; // 0x0
}

// Namespace: System.Reflection
[Serializable]
public sealed class AmbiguousMatchException : SystemException // TypeDefIndex: 397
{
	// Methods
	// RVA: 0x2CD040 Offset: 0x2CB840 VA: 0x1802CD040
	public void .ctor() { }
	// RVA: 0x2CD0D0 Offset: 0x2CB8D0 VA: 0x1802CD0D0
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum AssemblyNameFlags // TypeDefIndex: 398
{
	// Fields
	public int value__; // 0x0
	public const AssemblyNameFlags None = 0; // 0x0
	public const AssemblyNameFlags PublicKey = 1; // 0x0
	public const AssemblyNameFlags EnableJITcompileOptimizer = 16384; // 0x0
	public const AssemblyNameFlags EnableJITcompileTracking = 32768; // 0x0
	public const AssemblyNameFlags Retargetable = 256; // 0x0
}

// Namespace: System.Reflection
[Serializable]
public enum AssemblyContentType // TypeDefIndex: 399
{
	// Fields
	public int value__; // 0x0
	public const AssemblyContentType Default = 0; // 0x0
	public const AssemblyContentType WindowsRuntime = 1; // 0x0
}

// Namespace: System.Reflection
[Serializable]
public enum ProcessorArchitecture // TypeDefIndex: 400
{
	// Fields
	public int value__; // 0x0
	public const ProcessorArchitecture None = 0; // 0x0
	public const ProcessorArchitecture MSIL = 1; // 0x0
	public const ProcessorArchitecture X86 = 2; // 0x0
	public const ProcessorArchitecture IA64 = 3; // 0x0
	public const ProcessorArchitecture Amd64 = 4; // 0x0
	public const ProcessorArchitecture Arm = 5; // 0x0
}

// Namespace: System.Reflection
[Serializable]
public abstract class Binder // TypeDefIndex: 401
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, ref object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers) { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers) { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract object ChangeType(object value, Type type, CultureInfo culture) { }
	// RVA: -1 Offset: -1 Slot: 9
	public abstract void ReorderArgumentArray(ref object[] args, object state) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum BindingFlags // TypeDefIndex: 402
{
	// Fields
	public int value__; // 0x0
	public const BindingFlags Default = 0; // 0x0
	public const BindingFlags IgnoreCase = 1; // 0x0
	public const BindingFlags DeclaredOnly = 2; // 0x0
	public const BindingFlags Instance = 4; // 0x0
	public const BindingFlags Static = 8; // 0x0
	public const BindingFlags Public = 16; // 0x0
	public const BindingFlags NonPublic = 32; // 0x0
	public const BindingFlags FlattenHierarchy = 64; // 0x0
	public const BindingFlags InvokeMethod = 256; // 0x0
	public const BindingFlags CreateInstance = 512; // 0x0
	public const BindingFlags GetField = 1024; // 0x0
	public const BindingFlags SetField = 2048; // 0x0
	public const BindingFlags GetProperty = 4096; // 0x0
	public const BindingFlags SetProperty = 8192; // 0x0
	public const BindingFlags PutDispProperty = 16384; // 0x0
	public const BindingFlags PutRefDispProperty = 32768; // 0x0
	public const BindingFlags ExactBinding = 65536; // 0x0
	public const BindingFlags SuppressChangeType = 131072; // 0x0
	public const BindingFlags OptionalParamBinding = 262144; // 0x0
	public const BindingFlags IgnoreReturn = 16777216; // 0x0
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum CallingConventions // TypeDefIndex: 403
{
	// Fields
	public int value__; // 0x0
	public const CallingConventions Standard = 1; // 0x0
	public const CallingConventions VarArgs = 2; // 0x0
	public const CallingConventions Any = 3; // 0x0
	public const CallingConventions HasThis = 32; // 0x0
	public const CallingConventions ExplicitThis = 64; // 0x0
}

// Namespace: System.Reflection
[AttributeUsageAttribute] // RVA: 0xD9AB0 Offset: 0xD8EB0 VA: 0x1800D9AB0
[Serializable]
public sealed class DefaultMemberAttribute : Attribute // TypeDefIndex: 404
{
	// Fields
	private string m_memberName; // 0x10

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(string memberName) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum EventAttributes // TypeDefIndex: 405
{
	// Fields
	public int value__; // 0x0
	public const EventAttributes None = 0; // 0x0
	public const EventAttributes SpecialName = 512; // 0x0
	public const EventAttributes ReservedMask = 1024; // 0x0
	public const EventAttributes RTSpecialName = 1024; // 0x0
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum FieldAttributes // TypeDefIndex: 406
{
	// Fields
	public int value__; // 0x0
	public const FieldAttributes FieldAccessMask = 7; // 0x0
	public const FieldAttributes PrivateScope = 0; // 0x0
	public const FieldAttributes Private = 1; // 0x0
	public const FieldAttributes FamANDAssem = 2; // 0x0
	public const FieldAttributes Assembly = 3; // 0x0
	public const FieldAttributes Family = 4; // 0x0
	public const FieldAttributes FamORAssem = 5; // 0x0
	public const FieldAttributes Public = 6; // 0x0
	public const FieldAttributes Static = 16; // 0x0
	public const FieldAttributes InitOnly = 32; // 0x0
	public const FieldAttributes Literal = 64; // 0x0
	public const FieldAttributes NotSerialized = 128; // 0x0
	public const FieldAttributes SpecialName = 512; // 0x0
	public const FieldAttributes PinvokeImpl = 8192; // 0x0
	public const FieldAttributes ReservedMask = 38144; // 0x0
	public const FieldAttributes RTSpecialName = 1024; // 0x0
	public const FieldAttributes HasFieldMarshal = 4096; // 0x0
	public const FieldAttributes HasDefault = 32768; // 0x0
	public const FieldAttributes HasFieldRVA = 256; // 0x0
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum GenericParameterAttributes // TypeDefIndex: 407
{
	// Fields
	public int value__; // 0x0
	public const GenericParameterAttributes None = 0; // 0x0
	public const GenericParameterAttributes VarianceMask = 3; // 0x0
	public const GenericParameterAttributes Covariant = 1; // 0x0
	public const GenericParameterAttributes Contravariant = 2; // 0x0
	public const GenericParameterAttributes SpecialConstraintMask = 28; // 0x0
	public const GenericParameterAttributes ReferenceTypeConstraint = 4; // 0x0
	public const GenericParameterAttributes NotNullableValueTypeConstraint = 8; // 0x0
	public const GenericParameterAttributes DefaultConstructorConstraint = 16; // 0x0
}

// Namespace: System.Reflection
public interface ICustomAttributeProvider // TypeDefIndex: 408
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool IsDefined(Type attributeType, bool inherit) { }
}

// Namespace: System.Reflection
[Serializable]
public class InvalidFilterCriteriaException : ApplicationException // TypeDefIndex: 409
{
	// Methods
	// RVA: 0x3299A0 Offset: 0x3281A0 VA: 0x1803299A0
	public void .ctor() { }
	// RVA: 0x329A30 Offset: 0x328230 VA: 0x180329A30
	public void .ctor(string message) { }
	// RVA: 0x329A50 Offset: 0x328250 VA: 0x180329A50
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
internal enum PInvokeAttributes // TypeDefIndex: 410
{
	// Fields
	public int value__; // 0x0
	public const PInvokeAttributes NoMangle = 1; // 0x0
	public const PInvokeAttributes CharSetMask = 6; // 0x0
	public const PInvokeAttributes CharSetNotSpec = 0; // 0x0
	public const PInvokeAttributes CharSetAnsi = 2; // 0x0
	public const PInvokeAttributes CharSetUnicode = 4; // 0x0
	public const PInvokeAttributes CharSetAuto = 6; // 0x0
	public const PInvokeAttributes BestFitUseAssem = 0; // 0x0
	public const PInvokeAttributes BestFitEnabled = 16; // 0x0
	public const PInvokeAttributes BestFitDisabled = 32; // 0x0
	public const PInvokeAttributes BestFitMask = 48; // 0x0
	public const PInvokeAttributes ThrowOnUnmappableCharUseAssem = 0; // 0x0
	public const PInvokeAttributes ThrowOnUnmappableCharEnabled = 4096; // 0x0
	public const PInvokeAttributes ThrowOnUnmappableCharDisabled = 8192; // 0x0
	public const PInvokeAttributes ThrowOnUnmappableCharMask = 12288; // 0x0
	public const PInvokeAttributes SupportsLastError = 64; // 0x0
	public const PInvokeAttributes CallConvMask = 1792; // 0x0
	public const PInvokeAttributes CallConvWinapi = 256; // 0x0
	public const PInvokeAttributes CallConvCdecl = 512; // 0x0
	public const PInvokeAttributes CallConvStdcall = 768; // 0x0
	public const PInvokeAttributes CallConvThiscall = 1024; // 0x0
	public const PInvokeAttributes CallConvFastcall = 1280; // 0x0
	public const PInvokeAttributes MaxValue = 65535; // 0x0
}

// Namespace: System.Reflection
[Serializable]
public sealed class MemberFilter : MulticastDelegate // TypeDefIndex: 411
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x33AF30 Offset: 0x339730 VA: 0x18033AF30 Slot: 12
	public virtual bool Invoke(MemberInfo m, object filterCriteria) { }
	// RVA: 0x261F90 Offset: 0x260790 VA: 0x180261F90 Slot: 13
	public virtual IAsyncResult BeginInvoke(MemberInfo m, object filterCriteria, AsyncCallback callback, object object) { }
	// RVA: 0x27FDB0 Offset: 0x27E5B0 VA: 0x18027FDB0 Slot: 14
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[Serializable]
public abstract class MemberInfo : ICustomAttributeProvider // TypeDefIndex: 412
{
	// Properties
	public abstract MemberTypes MemberType { get; }
	public abstract string Name { get; }
	public abstract Type DeclaringType { get; }
	public abstract Type ReflectedType { get; }
	public virtual int MetadataToken { get; }
	public virtual Module Module { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract MemberTypes get_MemberType() { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract string get_Name() { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract Type get_DeclaringType() { }
	// RVA: -1 Offset: -1 Slot: 9
	public abstract Type get_ReflectedType() { }
	// RVA: -1 Offset: -1 Slot: 10
	public abstract object[] GetCustomAttributes(bool inherit) { }
	// RVA: -1 Offset: -1 Slot: 11
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: -1 Offset: -1 Slot: 12
	public abstract bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x33B4E0 Offset: 0x339CE0 VA: 0x18033B4E0 Slot: 13
	public virtual int get_MetadataToken() { }
	// RVA: 0x33B640 Offset: 0x339E40 VA: 0x18033B640 Slot: 14
	public virtual Module get_Module() { }
	// RVA: 0x33B7B0 Offset: 0x339FB0 VA: 0x18033B7B0
	public static bool op_Equality(MemberInfo left, MemberInfo right) { }
	// RVA: 0x33BBD0 Offset: 0x33A3D0 VA: 0x18033BBD0
	public static bool op_Inequality(MemberInfo left, MemberInfo right) { }
	// RVA: 0x33BBF0 Offset: 0x33A3F0 VA: 0x18033BBF0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MemberInfoSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 413
{
	// Fields
	private string m_memberName; // 0x10
	private RuntimeType m_reflectedType; // 0x18
	private string m_signature; // 0x20
	private string m_signature2; // 0x28
	private MemberTypes m_memberType; // 0x30
	private SerializationInfo m_info; // 0x38

	// Methods
	// RVA: 0x33BC00 Offset: 0x33A400 VA: 0x18033BC00
	public static void GetSerializationInfo(SerializationInfo info, string name, RuntimeType reflectedClass, string signature, MemberTypes type) { }
	// RVA: 0x33BC30 Offset: 0x33A430 VA: 0x18033BC30
	public static void GetSerializationInfo(SerializationInfo info, string name, RuntimeType reflectedClass, string signature, string signature2, MemberTypes type, Type[] genericArguments) { }
	// RVA: 0x33C3B0 Offset: 0x33ABB0 VA: 0x18033C3B0
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x33C650 Offset: 0x33AE50 VA: 0x18033C650 Slot: 6
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x33C6C0 Offset: 0x33AEC0 VA: 0x18033C6C0 Slot: 7
	public virtual object GetRealObject(StreamingContext context) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum MemberTypes // TypeDefIndex: 414
{
	// Fields
	public int value__; // 0x0
	public const MemberTypes Constructor = 1; // 0x0
	public const MemberTypes Event = 2; // 0x0
	public const MemberTypes Field = 4; // 0x0
	public const MemberTypes Method = 8; // 0x0
	public const MemberTypes Property = 16; // 0x0
	public const MemberTypes TypeInfo = 32; // 0x0
	public const MemberTypes Custom = 64; // 0x0
	public const MemberTypes NestedType = 128; // 0x0
	public const MemberTypes All = 191; // 0x0
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum MethodAttributes // TypeDefIndex: 415
{
	// Fields
	public int value__; // 0x0
	public const MethodAttributes MemberAccessMask = 7; // 0x0
	public const MethodAttributes PrivateScope = 0; // 0x0
	public const MethodAttributes Private = 1; // 0x0
	public const MethodAttributes FamANDAssem = 2; // 0x0
	public const MethodAttributes Assembly = 3; // 0x0
	public const MethodAttributes Family = 4; // 0x0
	public const MethodAttributes FamORAssem = 5; // 0x0
	public const MethodAttributes Public = 6; // 0x0
	public const MethodAttributes Static = 16; // 0x0
	public const MethodAttributes Final = 32; // 0x0
	public const MethodAttributes Virtual = 64; // 0x0
	public const MethodAttributes HideBySig = 128; // 0x0
	public const MethodAttributes CheckAccessOnOverride = 512; // 0x0
	public const MethodAttributes VtableLayoutMask = 256; // 0x0
	public const MethodAttributes ReuseSlot = 0; // 0x0
	public const MethodAttributes NewSlot = 256; // 0x0
	public const MethodAttributes Abstract = 1024; // 0x0
	public const MethodAttributes SpecialName = 2048; // 0x0
	public const MethodAttributes PinvokeImpl = 8192; // 0x0
	public const MethodAttributes UnmanagedExport = 8; // 0x0
	public const MethodAttributes RTSpecialName = 4096; // 0x0
	public const MethodAttributes ReservedMask = 53248; // 0x0
	public const MethodAttributes HasSecurity = 16384; // 0x0
	public const MethodAttributes RequireSecObject = 32768; // 0x0
}

// Namespace: System.Reflection
[Serializable]
public abstract class MethodBase : MemberInfo // TypeDefIndex: 416
{
	// Properties
	public abstract RuntimeMethodHandle MethodHandle { get; }
	public abstract MethodAttributes Attributes { get; }
	public virtual CallingConventions CallingConvention { get; }
	public virtual bool IsGenericMethodDefinition { get; }
	public virtual bool ContainsGenericParameters { get; }
	public virtual bool IsGenericMethod { get; }
	public virtual bool IsSecurityCritical { get; }
	public bool IsPublic { get; }
	public bool IsStatic { get; }
	public bool IsVirtual { get; }
	public bool IsAbstract { get; }
	public bool IsConstructor { get; }

	// Methods
	// RVA: 0x340C60 Offset: 0x33F460 VA: 0x180340C60
	public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x340F20 Offset: 0x33F720 VA: 0x180340F20
	public static bool op_Equality(MethodBase left, MethodBase right) { }
	// RVA: 0x341200 Offset: 0x33FA00 VA: 0x180341200
	public static bool op_Inequality(MethodBase left, MethodBase right) { }
	// RVA: 0x33BBF0 Offset: 0x33A3F0 VA: 0x18033BBF0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x341220 Offset: 0x33FA20 VA: 0x180341220 Slot: 15
	internal virtual ParameterInfo[] GetParametersNoCopy() { }
	// RVA: -1 Offset: -1 Slot: 16
	public abstract ParameterInfo[] GetParameters() { }
	// RVA: -1 Offset: -1 Slot: 17
	public abstract MethodImplAttributes GetMethodImplementationFlags() { }
	// RVA: -1 Offset: -1 Slot: 18
	public abstract RuntimeMethodHandle get_MethodHandle() { }
	// RVA: -1 Offset: -1 Slot: 19
	public abstract MethodAttributes get_Attributes() { }
	// RVA: -1 Offset: -1 Slot: 20
	public abstract object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 21
	public virtual CallingConventions get_CallingConvention() { }
	// RVA: 0x341240 Offset: 0x33FA40 VA: 0x180341240 Slot: 22
	public virtual Type[] GetGenericArguments() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 23
	public virtual bool get_IsGenericMethodDefinition() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 24
	public virtual bool get_ContainsGenericParameters() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 25
	public virtual bool get_IsGenericMethod() { }
	// RVA: 0x3412B0 Offset: 0x33FAB0 VA: 0x1803412B0 Slot: 26
	public virtual bool get_IsSecurityCritical() { }
	[DebuggerStepThroughAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x341300 Offset: 0x33FB00 VA: 0x180341300 Slot: 27
	public object Invoke(object obj, object[] parameters) { }
	// RVA: 0x341340 Offset: 0x33FB40 VA: 0x180341340 Slot: 28
	public bool get_IsPublic() { }
	// RVA: 0x341370 Offset: 0x33FB70 VA: 0x180341370 Slot: 29
	public bool get_IsStatic() { }
	// RVA: 0x341390 Offset: 0x33FB90 VA: 0x180341390 Slot: 30
	public bool get_IsVirtual() { }
	// RVA: 0x3413B0 Offset: 0x33FBB0 VA: 0x1803413B0 Slot: 31
	public bool get_IsAbstract() { }
	// RVA: 0x3413E0 Offset: 0x33FBE0 VA: 0x1803413E0 Slot: 32
	public bool get_IsConstructor() { }
	// RVA: 0x3414D0 Offset: 0x33FCD0 VA: 0x1803414D0
	internal static string ConstructParameters(Type[] parameterTypes, CallingConventions callingConvention, bool serialization) { }
	// RVA: 0x3416F0 Offset: 0x33FEF0 VA: 0x1803416F0 Slot: 33
	internal virtual string FormatNameAndSig(bool serialization) { }
	// RVA: 0x341860 Offset: 0x340060 VA: 0x180341860 Slot: 34
	internal virtual Type[] GetParameterTypes() { }
	// RVA: 0x341220 Offset: 0x33FA20 VA: 0x180341220 Slot: 35
	internal virtual ParameterInfo[] GetParametersInternal() { }
	// RVA: 0x341A40 Offset: 0x340240 VA: 0x180341A40 Slot: 36
	internal virtual int GetParametersCount() { }
	// RVA: 0x341A70 Offset: 0x340270 VA: 0x180341A70
	internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle) { }
	// RVA: 0x341AF0 Offset: 0x3402F0 VA: 0x180341AF0
	internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle, RuntimeTypeHandle reflectedType) { }
	// RVA: 0x341B30 Offset: 0x340330 VA: 0x180341B30
	private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle) { }
	// RVA: 0x341B40 Offset: 0x340340 VA: 0x180341B40
	internal static MethodBase GetMethodFromHandleInternalType_native(IntPtr method_handle, IntPtr type_handle, bool genericCheck) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum ExceptionHandlingClauseOptions // TypeDefIndex: 417
{
	// Fields
	public int value__; // 0x0
	public const ExceptionHandlingClauseOptions Clause = 0; // 0x0
	public const ExceptionHandlingClauseOptions Filter = 1; // 0x0
	public const ExceptionHandlingClauseOptions Finally = 2; // 0x0
	public const ExceptionHandlingClauseOptions Fault = 4; // 0x0
}

// Namespace: System.Reflection
[Serializable]
public enum MethodImplAttributes // TypeDefIndex: 418
{
	// Fields
	public int value__; // 0x0
	public const MethodImplAttributes CodeTypeMask = 3; // 0x0
	public const MethodImplAttributes IL = 0; // 0x0
	public const MethodImplAttributes Native = 1; // 0x0
	public const MethodImplAttributes OPTIL = 2; // 0x0
	public const MethodImplAttributes Runtime = 3; // 0x0
	public const MethodImplAttributes ManagedMask = 4; // 0x0
	public const MethodImplAttributes Unmanaged = 4; // 0x0
	public const MethodImplAttributes Managed = 0; // 0x0
	public const MethodImplAttributes ForwardRef = 16; // 0x0
	public const MethodImplAttributes PreserveSig = 128; // 0x0
	public const MethodImplAttributes InternalCall = 4096; // 0x0
	public const MethodImplAttributes Synchronized = 32; // 0x0
	public const MethodImplAttributes NoInlining = 8; // 0x0
	public const MethodImplAttributes AggressiveInlining = 256; // 0x0
	public const MethodImplAttributes NoOptimization = 64; // 0x0
	public const MethodImplAttributes MaxMethodImplVal = 65535; // 0x0
}

// Namespace: System.Reflection
[Serializable]
public abstract class MethodInfo : MethodBase // TypeDefIndex: 419
{
	// Properties
	public override MemberTypes MemberType { get; }
	public virtual Type ReturnType { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x3438E0 Offset: 0x3420E0 VA: 0x1803438E0
	public static bool op_Equality(MethodInfo left, MethodInfo right) { }
	// RVA: 0x343A20 Offset: 0x342220 VA: 0x180343A20
	public static bool op_Inequality(MethodInfo left, MethodInfo right) { }
	// RVA: 0x33BBF0 Offset: 0x33A3F0 VA: 0x18033BBF0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x343A40 Offset: 0x342240 VA: 0x180343A40 Slot: 6
	public override MemberTypes get_MemberType() { }
	// RVA: 0x343A50 Offset: 0x342250 VA: 0x180343A50 Slot: 37
	public virtual Type get_ReturnType() { }
	// RVA: 0x343AA0 Offset: 0x3422A0 VA: 0x180343AA0 Slot: 22
	public override Type[] GetGenericArguments() { }
	// RVA: 0x343B10 Offset: 0x342310 VA: 0x180343B10 Slot: 38
	public virtual MethodInfo GetGenericMethodDefinition() { }
	// RVA: 0x343B80 Offset: 0x342380 VA: 0x180343B80 Slot: 39
	public virtual MethodInfo MakeGenericMethod(Type[] typeArguments) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630 Slot: 40
	internal virtual MethodInfo GetBaseMethod() { }
}

// Namespace: System.Reflection
[Serializable]
public sealed class Missing : ISerializable // TypeDefIndex: 420
{
	// Fields
	public static readonly Missing Value; // 0xABF80

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x345620 Offset: 0x343E20 VA: 0x180345620 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x345780 Offset: 0x343F80 VA: 0x180345780
	private static void .cctor() { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum ParameterAttributes // TypeDefIndex: 421
{
	// Fields
	public int value__; // 0x0
	public const ParameterAttributes None = 0; // 0x0
	public const ParameterAttributes In = 1; // 0x0
	public const ParameterAttributes Out = 2; // 0x0
	public const ParameterAttributes Lcid = 4; // 0x0
	public const ParameterAttributes Retval = 8; // 0x0
	public const ParameterAttributes Optional = 16; // 0x0
	public const ParameterAttributes ReservedMask = 61440; // 0x0
	public const ParameterAttributes HasDefault = 4096; // 0x0
	public const ParameterAttributes HasFieldMarshal = 8192; // 0x0
	public const ParameterAttributes Reserved3 = 16384; // 0x0
	public const ParameterAttributes Reserved4 = 32768; // 0x0
}

// Namespace: System.Reflection
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
public struct ParameterModifier // TypeDefIndex: 422
{
	// Fields
	private bool[] _byRef; // 0x0
}

// Namespace: System.Reflection
[Serializable]
public sealed class Pointer : ISerializable // TypeDefIndex: 423
{
	// Fields
	private void* _ptr; // 0x10
	private RuntimeType _ptrType; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x31BB90 Offset: 0x31A390 VA: 0x18031BB90
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x31BD10 Offset: 0x31A510 VA: 0x18031BD10
	public static object Box(void* ptr, Type type) { }
	// RVA: 0x31BF10 Offset: 0x31A710 VA: 0x18031BF10 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum PropertyAttributes // TypeDefIndex: 424
{
	// Fields
	public int value__; // 0x0
	public const PropertyAttributes None = 0; // 0x0
	public const PropertyAttributes SpecialName = 512; // 0x0
	public const PropertyAttributes ReservedMask = 62464; // 0x0
	public const PropertyAttributes RTSpecialName = 1024; // 0x0
	public const PropertyAttributes HasDefault = 4096; // 0x0
	public const PropertyAttributes Reserved2 = 8192; // 0x0
	public const PropertyAttributes Reserved3 = 16384; // 0x0
	public const PropertyAttributes Reserved4 = 32768; // 0x0
}

// Namespace: System.Reflection
[Serializable]
public sealed class ReflectionTypeLoadException : SystemException, ISerializable // TypeDefIndex: 425
{
	// Fields
	private Type[] _classes; // 0x88
	private Exception[] _exceptions; // 0x90

	// Methods
	// RVA: 0x322010 Offset: 0x320810 VA: 0x180322010
	private void .ctor() { }
	// RVA: 0x3220A0 Offset: 0x3208A0 VA: 0x1803220A0
	public void .ctor(Type[] classes, Exception[] exceptions) { }
	// RVA: 0x3220F0 Offset: 0x3208F0 VA: 0x1803220F0
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x322280 Offset: 0x320A80 VA: 0x180322280 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[Serializable]
public class TargetException : ApplicationException // TypeDefIndex: 426
{
	// Methods
	// RVA: 0x390F20 Offset: 0x38F720 VA: 0x180390F20
	public void .ctor() { }
	// RVA: 0x390FD0 Offset: 0x38F7D0 VA: 0x180390FD0
	public void .ctor(string message) { }
	// RVA: 0x329A50 Offset: 0x328250 VA: 0x180329A50
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[Serializable]
public sealed class TargetInvocationException : ApplicationException // TypeDefIndex: 427
{
	// Methods
	// RVA: 0x390FF0 Offset: 0x38F7F0 VA: 0x180390FF0
	private void .ctor() { }
	// RVA: 0x391080 Offset: 0x38F880 VA: 0x180391080
	public void .ctor(Exception inner) { }
	// RVA: 0x391120 Offset: 0x38F920 VA: 0x180391120
	public void .ctor(string message, Exception inner) { }
	// RVA: 0x329A50 Offset: 0x328250 VA: 0x180329A50
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[Serializable]
public sealed class TargetParameterCountException : ApplicationException // TypeDefIndex: 428
{
	// Methods
	// RVA: 0x391140 Offset: 0x38F940 VA: 0x180391140
	public void .ctor() { }
	// RVA: 0x3911D0 Offset: 0x38F9D0 VA: 0x1803911D0
	public void .ctor(string message) { }
	// RVA: 0x329A50 Offset: 0x328250 VA: 0x180329A50
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum TypeAttributes // TypeDefIndex: 429
{
	// Fields
	public int value__; // 0x0
	public const TypeAttributes VisibilityMask = 7; // 0x0
	public const TypeAttributes NotPublic = 0; // 0x0
	public const TypeAttributes Public = 1; // 0x0
	public const TypeAttributes NestedPublic = 2; // 0x0
	public const TypeAttributes NestedPrivate = 3; // 0x0
	public const TypeAttributes NestedFamily = 4; // 0x0
	public const TypeAttributes NestedAssembly = 5; // 0x0
	public const TypeAttributes NestedFamANDAssem = 6; // 0x0
	public const TypeAttributes NestedFamORAssem = 7; // 0x0
	public const TypeAttributes LayoutMask = 24; // 0x0
	public const TypeAttributes AutoLayout = 0; // 0x0
	public const TypeAttributes SequentialLayout = 8; // 0x0
	public const TypeAttributes ExplicitLayout = 16; // 0x0
	public const TypeAttributes ClassSemanticsMask = 32; // 0x0
	public const TypeAttributes Class = 0; // 0x0
	public const TypeAttributes Interface = 32; // 0x0
	public const TypeAttributes Abstract = 128; // 0x0
	public const TypeAttributes Sealed = 256; // 0x0
	public const TypeAttributes SpecialName = 1024; // 0x0
	public const TypeAttributes Import = 4096; // 0x0
	public const TypeAttributes Serializable = 8192; // 0x0
	public const TypeAttributes WindowsRuntime = 16384; // 0x0
	public const TypeAttributes StringFormatMask = 196608; // 0x0
	public const TypeAttributes AnsiClass = 0; // 0x0
	public const TypeAttributes UnicodeClass = 65536; // 0x0
	public const TypeAttributes AutoClass = 131072; // 0x0
	public const TypeAttributes CustomFormatClass = 196608; // 0x0
	public const TypeAttributes CustomFormatMask = 12582912; // 0x0
	public const TypeAttributes BeforeFieldInit = 1048576; // 0x0
	public const TypeAttributes ReservedMask = 264192; // 0x0
	public const TypeAttributes RTSpecialName = 2048; // 0x0
	public const TypeAttributes HasSecurity = 262144; // 0x0
}

// Namespace: System.Reflection
[Serializable]
public sealed class TypeFilter : MulticastDelegate // TypeDefIndex: 430
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x33AF30 Offset: 0x339730 VA: 0x18033AF30 Slot: 12
	public virtual bool Invoke(Type m, object filterCriteria) { }
	// RVA: 0x261F90 Offset: 0x260790 VA: 0x180261F90 Slot: 13
	public virtual IAsyncResult BeginInvoke(Type m, object filterCriteria, AsyncCallback callback, object object) { }
	// RVA: 0x27FDB0 Offset: 0x27E5B0 VA: 0x18027FDB0 Slot: 14
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[Serializable]
public abstract class TypeInfo : Type // TypeDefIndex: 431
{
	// Methods
	// RVA: 0x4A5FD0 Offset: 0x4A47D0 VA: 0x1804A5FD0
	internal void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
public class Assembly : ICustomAttributeProvider, ISerializable // TypeDefIndex: 432
{
	// Fields
	internal IntPtr _mono_assembly; // 0x10
	private Assembly.ResolveEventHolder resolve_event_holder; // 0x18
	private object _evidence; // 0x20
	private object _minimum; // 0x28
	private object _optional; // 0x30
	private object _refuse; // 0x38
	private object _granted; // 0x40
	private object _denied; // 0x48
	private bool fromByteArray; // 0x50
	private string assemblyName; // 0x58

	// Properties
	public virtual string CodeBase { get; }
	public virtual string FullName { get; }

	// Methods
	// RVA: 0x2D4EE0 Offset: 0x2D36E0 VA: 0x1802D4EE0
	protected void .ctor() { }
	// RVA: 0x2D4F60 Offset: 0x2D3760 VA: 0x1802D4F60
	private string get_code_base(bool escaped) { }
	// RVA: 0x2D4F70 Offset: 0x2D3770 VA: 0x1802D4F70
	private string get_fullname() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	internal static string GetAotId() { }
	// RVA: 0x2D4F60 Offset: 0x2D3760 VA: 0x1802D4F60
	private string GetCodeBase(bool escaped) { }
	// RVA: 0x2D5000 Offset: 0x2D3800 VA: 0x1802D5000 Slot: 7
	public virtual string get_CodeBase() { }
	// RVA: 0x1EBD50 Offset: 0x1EA550 VA: 0x1801EBD50 Slot: 8
	public virtual string get_FullName() { }
	// RVA: 0x2D5010 Offset: 0x2D3810 VA: 0x1802D5010 Slot: 9
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x2D5060 Offset: 0x2D3860 VA: 0x1802D5060 Slot: 10
	public virtual bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x2D5120 Offset: 0x2D3920 VA: 0x1802D5120 Slot: 11
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x2D51E0 Offset: 0x2D39E0 VA: 0x1802D51E0
	internal IntPtr GetManifestResourceInternal(string name, out int size, out Module module) { }
	// RVA: 0x2D51F0 Offset: 0x2D39F0 VA: 0x1802D51F0 Slot: 12
	internal virtual Type[] GetTypes(bool exportedOnly) { }
	// RVA: 0x2D5360 Offset: 0x2D3B60 VA: 0x1802D5360 Slot: 13
	public virtual Type[] GetTypes() { }
	// RVA: 0x2D5380 Offset: 0x2D3B80 VA: 0x1802D5380 Slot: 14
	public virtual Type GetType(string name, bool throwOnError) { }
	// RVA: 0x2D53B0 Offset: 0x2D3BB0 VA: 0x1802D53B0 Slot: 15
	public virtual Type GetType(string name) { }
	// RVA: 0x2D53E0 Offset: 0x2D3BE0 VA: 0x1802D53E0
	internal Type InternalGetType(Module module, string name, bool throwOnError, bool ignoreCase) { }
	// RVA: 0x2D53F0 Offset: 0x2D3BF0 VA: 0x1802D53F0 Slot: 16
	public virtual AssemblyName GetName(bool copiedName) { }
	// RVA: 0x2D5440 Offset: 0x2D3C40 VA: 0x1802D5440 Slot: 17
	public virtual AssemblyName GetName() { }
	// RVA: 0x2D5460 Offset: 0x2D3C60 VA: 0x1802D5460 Slot: 3
	public override string ToString() { }
	// RVA: 0x2D5510 Offset: 0x2D3D10 VA: 0x1802D5510
	public static Assembly GetAssembly(Type type) { }
	// RVA: 0x2D55E0 Offset: 0x2D3DE0 VA: 0x1802D55E0
	public static Assembly Load(string assemblyString) { }
	// RVA: 0x2D5760 Offset: 0x2D3F60 VA: 0x1802D5760
	private static Assembly load_with_partial_name(string name, Evidence e) { }
	[ObsoleteAttribute] // RVA: 0xD9AD0 Offset: 0xD8ED0 VA: 0x1800D9AD0
	// RVA: 0x2D5810 Offset: 0x2D4010 VA: 0x1802D5810
	public static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence) { }
	// RVA: 0x2D5960 Offset: 0x2D4160 VA: 0x1802D5960
	internal static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence, bool oldBehavior) { }
	// RVA: 0x2D5AE0 Offset: 0x2D42E0 VA: 0x1802D5AE0 Slot: 18
	internal virtual Module[] GetModulesInternal() { }
	// RVA: 0x2D5B40 Offset: 0x2D4340 VA: 0x1802D5B40
	public static Assembly GetExecutingAssembly() { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x2D5BC0 Offset: 0x2D43C0 VA: 0x1802D5BC0 Slot: 0
	public override bool Equals(object o) { }
	// RVA: 0x2D5D00 Offset: 0x2D4500 VA: 0x1802D5D00
	private static Exception CreateNIE() { }
	// RVA: 0x2D5D90 Offset: 0x2D4590 VA: 0x1802D5D90 Slot: 19
	public virtual Type GetType(string name, bool throwOnError, bool ignoreCase) { }
	// RVA: 0x2D5DD0 Offset: 0x2D45D0 VA: 0x1802D5DD0 Slot: 20
	public virtual Module GetModule(string name) { }
	// RVA: 0x2D5E10 Offset: 0x2D4610 VA: 0x1802D5E10 Slot: 21
	public virtual Module[] GetModules(bool getResourceModules) { }
	// RVA: 0x264350 Offset: 0x262B50 VA: 0x180264350
	public static bool op_Equality(Assembly left, Assembly right) { }
	// RVA: 0x2643A0 Offset: 0x262BA0 VA: 0x1802643A0
	public static bool op_Inequality(Assembly left, Assembly right) { }
}

// Namespace: 
internal class Assembly.ResolveEventHolder // TypeDefIndex: 433
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
public sealed class AssemblyName : ICloneable, ISerializable, IDeserializationCallback // TypeDefIndex: 434
{
	// Fields
	private string name; // 0x10
	private string codebase; // 0x18
	private int major; // 0x20
	private int minor; // 0x24
	private int build; // 0x28
	private int revision; // 0x2C
	private CultureInfo cultureinfo; // 0x30
	private AssemblyNameFlags flags; // 0x38
	private AssemblyHashAlgorithm hashalg; // 0x3C
	private StrongNameKeyPair keypair; // 0x40
	private byte[] publicKey; // 0x48
	private byte[] keyToken; // 0x50
	private AssemblyVersionCompatibility versioncompat; // 0x58
	private Version version; // 0x60
	private ProcessorArchitecture processor_architecture; // 0x68
	private AssemblyContentType contentType; // 0x6C

	// Properties
	public string Name { get; }
	public string FullName { get; }
	public Version Version { set; }
	private bool IsPublicKeyValid { get; }

	// Methods
	// RVA: 0x2D5EF0 Offset: 0x2D46F0 VA: 0x1802D5EF0
	public void .ctor() { }
	// RVA: 0x2D5F00 Offset: 0x2D4700 VA: 0x1802D5F00
	private static bool ParseAssemblyName(IntPtr name, out MonoAssemblyName aname, out bool is_version_definited, out bool is_token_defined) { }
	// RVA: 0x2D5F10 Offset: 0x2D4710 VA: 0x1802D5F10
	public void .ctor(string assemblyName) { }
	// RVA: 0x2D61E0 Offset: 0x2D49E0 VA: 0x1802D61E0
	internal void .ctor(SerializationInfo si, StreamingContext sc) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public string get_Name() { }
	// RVA: 0x2D6590 Offset: 0x2D4D90 VA: 0x1802D6590
	public string get_FullName() { }
	// RVA: 0x2D6A70 Offset: 0x2D5270 VA: 0x1802D6A70
	public void set_Version(Version value) { }
	// RVA: 0x2D6BE0 Offset: 0x2D53E0 VA: 0x1802D6BE0 Slot: 3
	public override string ToString() { }
	// RVA: 0x2D6C30 Offset: 0x2D5430 VA: 0x1802D6C30
	public byte[] GetPublicKeyToken() { }
	// RVA: 0x2D6D40 Offset: 0x2D5540 VA: 0x1802D6D40
	private bool get_IsPublicKeyValid() { }
	// RVA: 0x2D6DF0 Offset: 0x2D55F0 VA: 0x1802D6DF0
	private byte[] InternalGetPublicKeyToken() { }
	// RVA: 0x2644A0 Offset: 0x262CA0 VA: 0x1802644A0
	private static void get_public_token(byte* token, byte* pubkey, int len) { }
	// RVA: 0x2D6F00 Offset: 0x2D5700 VA: 0x1802D6F00
	private byte[] ComputePublicKeyToken() { }
	// RVA: 0x2D6FD0 Offset: 0x2D57D0 VA: 0x1802D6FD0 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x2D7200 Offset: 0x2D5A00 VA: 0x1802D7200 Slot: 4
	public object Clone() { }
	// RVA: 0x2D72F0 Offset: 0x2D5AF0 VA: 0x1802D72F0 Slot: 6
	public void OnDeserialization(object sender) { }
	// RVA: 0x2D7460 Offset: 0x2D5C60 VA: 0x1802D7460
	private static MonoAssemblyName* GetNativeName(IntPtr assembly_ptr) { }
	// RVA: 0x2D7470 Offset: 0x2D5C70 VA: 0x1802D7470
	internal void FillName(MonoAssemblyName* native, string codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef) { }
	// RVA: 0x2D78D0 Offset: 0x2D60D0 VA: 0x1802D78D0
	internal static AssemblyName Create(Assembly assembly, bool fillCodebase) { }
}

// Namespace: System.Reflection
[Serializable]
public abstract class ConstructorInfo : MethodBase // TypeDefIndex: 435
{
	// Fields
	public static readonly string ConstructorName; // 0x0
	public static readonly string TypeConstructorName; // 0x8

	// Properties
	public override MemberTypes MemberType { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 6
	public override MemberTypes get_MemberType() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	[DebuggerStepThroughAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x264240 Offset: 0x262A40 VA: 0x180264240
	public object Invoke(object[] parameters) { }
	// RVA: -1 Offset: -1 Slot: 37
	public abstract object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }
	// RVA: 0x264330 Offset: 0x262B30 VA: 0x180264330 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x264350 Offset: 0x262B50 VA: 0x180264350
	public static bool op_Equality(ConstructorInfo left, ConstructorInfo right) { }
	// RVA: 0x2643A0 Offset: 0x262BA0 VA: 0x1802643A0
	public static bool op_Inequality(ConstructorInfo left, ConstructorInfo right) { }
	// RVA: 0x264400 Offset: 0x262C00 VA: 0x180264400
	private static void .cctor() { }
}

// Namespace: System.Reflection
[Serializable]
public class CustomAttributeData // TypeDefIndex: 436
{
	// Fields
	private ConstructorInfo ctorInfo; // 0x10
	private IList<CustomAttributeTypedArgument> ctorArgs; // 0x18
	private IList<CustomAttributeNamedArgument> namedArgs; // 0x20
	private CustomAttributeData.LazyCAttrData lazyData; // 0x28

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x4015A0 Offset: 0x3FFDA0 VA: 0x1804015A0
	internal void .ctor(ConstructorInfo ctorInfo, Assembly assembly, IntPtr data, uint data_length) { }
	// RVA: 0x401670 Offset: 0x3FFE70 VA: 0x180401670
	private static void ResolveArgumentsInternal(ConstructorInfo ctor, Assembly assembly, IntPtr data, uint data_length, out object[] ctorArgs, out object[] namedArgs) { }
	// RVA: 0x401690 Offset: 0x3FFE90 VA: 0x180401690
	private void ResolveArguments() { }
	// RVA: 0x4017C0 Offset: 0x3FFFC0 VA: 0x1804017C0 Slot: 3
	public override string ToString() { }
	// RVA: 0x52F8D0 Offset: 0x52E0D0 VA: 0x18052F8D0
	private static T[] UnboxValues(object[] values) { }
	// RVA: 0x401FD0 Offset: 0x4007D0 VA: 0x180401FD0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x402440 Offset: 0x400C40 VA: 0x180402440 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
private class CustomAttributeData.LazyCAttrData // TypeDefIndex: 437
{
	// Fields
	internal Assembly assembly; // 0x10
	internal IntPtr data; // 0x18
	internal uint data_length; // 0x20

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
public class CustomAttributeFormatException : FormatException // TypeDefIndex: 438
{
	// Methods
	// RVA: 0x402870 Offset: 0x401070 VA: 0x180402870
	public void .ctor() { }
	// RVA: 0x402900 Offset: 0x401100 VA: 0x180402900
	public void .ctor(string message) { }
	// RVA: 0x402920 Offset: 0x401120 VA: 0x180402920
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Reflection
[Serializable]
public struct CustomAttributeNamedArgument // TypeDefIndex: 439
{
	// Fields
	private CustomAttributeTypedArgument typedArgument; // 0x0
	private MemberInfo memberInfo; // 0x10

	// Methods
	// RVA: 0x138B0 Offset: 0x12CB0 VA: 0x1800138B0
	public void .ctor(MemberInfo memberInfo, object value) { }
	// RVA: 0x13970 Offset: 0x12D70 VA: 0x180013970 Slot: 3
	public override string ToString() { }
	// RVA: 0x13980 Offset: 0x12D80 VA: 0x180013980 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x13990 Offset: 0x12D90 VA: 0x180013990 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[Serializable]
public struct CustomAttributeTypedArgument // TypeDefIndex: 440
{
	// Fields
	private Type argumentType; // 0x0
	private object value; // 0x8

	// Methods
	// RVA: 0x13A00 Offset: 0x12E00 VA: 0x180013A00
	public void .ctor(Type argumentType, object value) { }
	// RVA: 0x13A10 Offset: 0x12E10 VA: 0x180013A10 Slot: 3
	public override string ToString() { }
	// RVA: 0x13A20 Offset: 0x12E20 VA: 0x180013A20 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x13A30 Offset: 0x12E30 VA: 0x180013A30 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Reflection
[Serializable]
public abstract class EventInfo : MemberInfo // TypeDefIndex: 441
{
	// Fields
	private EventInfo.AddEventAdapter cached_add_event; // 0x10

	// Properties
	public virtual Type EventHandlerType { get; }
	public override MemberTypes MemberType { get; }

	// Methods
	// RVA: 0x4904D0 Offset: 0x48ECD0 VA: 0x1804904D0 Slot: 15
	public virtual Type get_EventHandlerType() { }
	// RVA: 0x3CC210 Offset: 0x3CAA10 VA: 0x1803CC210 Slot: 6
	public override MemberTypes get_MemberType() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: -1 Offset: -1 Slot: 16
	public abstract MethodInfo GetAddMethod(bool nonPublic) { }
	// RVA: -1 Offset: -1 Slot: 17
	public abstract MethodInfo GetRaiseMethod(bool nonPublic) { }
	// RVA: -1 Offset: -1 Slot: 18
	public abstract MethodInfo GetRemoveMethod(bool nonPublic) { }
	// RVA: 0x264330 Offset: 0x262B30 VA: 0x180264330 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x264350 Offset: 0x262B50 VA: 0x180264350
	public static bool op_Equality(EventInfo left, EventInfo right) { }
	// RVA: 0x2643A0 Offset: 0x262BA0 VA: 0x1802643A0
	public static bool op_Inequality(EventInfo left, EventInfo right) { }
	// RVA: 0x490540 Offset: 0x48ED40 VA: 0x180490540
	private static EventInfo internal_from_handle_type(IntPtr event_handle, IntPtr type_handle) { }
	// RVA: 0x4905A0 Offset: 0x48EDA0 VA: 0x1804905A0
	internal static EventInfo GetEventFromHandle(RuntimeEventHandle handle, RuntimeTypeHandle reflectedType) { }
}

// Namespace: 
private sealed class EventInfo.AddEventAdapter : MulticastDelegate // TypeDefIndex: 442
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x261A80 Offset: 0x260280 VA: 0x180261A80 Slot: 12
	public virtual void Invoke(object _this, Delegate dele) { }
	// RVA: 0x261F90 Offset: 0x260790 VA: 0x180261F90 Slot: 13
	public virtual IAsyncResult BeginInvoke(object _this, Delegate dele, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
public class ExceptionHandlingClause // TypeDefIndex: 443
{
	// Fields
	internal Type catch_type; // 0x10
	internal int filter_offset; // 0x18
	internal ExceptionHandlingClauseOptions flags; // 0x1C
	internal int try_offset; // 0x20
	internal int try_length; // 0x24
	internal int handler_offset; // 0x28
	internal int handler_length; // 0x2C

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x492D60 Offset: 0x491560 VA: 0x180492D60 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Reflection
[Serializable]
public abstract class FieldInfo : MemberInfo // TypeDefIndex: 444
{
	// Properties
	public abstract FieldAttributes Attributes { get; }
	public abstract RuntimeFieldHandle FieldHandle { get; }
	public abstract Type FieldType { get; }
	public override MemberTypes MemberType { get; }
	public bool IsLiteral { get; }
	public bool IsStatic { get; }
	public bool IsInitOnly { get; }
	public bool IsNotSerialized { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 15
	public abstract FieldAttributes get_Attributes() { }
	// RVA: -1 Offset: -1 Slot: 16
	public abstract RuntimeFieldHandle get_FieldHandle() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: -1 Offset: -1 Slot: 17
	public abstract Type get_FieldType() { }
	// RVA: -1 Offset: -1 Slot: 18
	public abstract object GetValue(object obj) { }
	// RVA: 0x390B30 Offset: 0x38F330 VA: 0x180390B30 Slot: 6
	public override MemberTypes get_MemberType() { }
	// RVA: 0x75F0B0 Offset: 0x75D8B0 VA: 0x18075F0B0 Slot: 19
	public bool get_IsLiteral() { }
	// RVA: 0x75F0D0 Offset: 0x75D8D0 VA: 0x18075F0D0 Slot: 20
	public bool get_IsStatic() { }
	// RVA: 0x75F0F0 Offset: 0x75D8F0 VA: 0x18075F0F0 Slot: 21
	public bool get_IsInitOnly() { }
	// RVA: 0x75F110 Offset: 0x75D910 VA: 0x18075F110 Slot: 22
	public bool get_IsNotSerialized() { }
	// RVA: -1 Offset: -1 Slot: 23
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }
	// RVA: 0x75F130 Offset: 0x75D930 VA: 0x18075F130
	private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle) { }
	// RVA: 0x75F190 Offset: 0x75D990 VA: 0x18075F190
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle) { }
	// RVA: 0x75F240 Offset: 0x75DA40 VA: 0x18075F240
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType) { }
	// RVA: 0x75F360 Offset: 0x75DB60 VA: 0x18075F360 Slot: 24
	internal virtual int GetFieldOffset() { }
	// RVA: 0x75F3C0 Offset: 0x75DBC0 VA: 0x18075F3C0 Slot: 25
	public virtual void SetValueDirect(TypedReference obj, object value) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	private MarshalAsAttribute get_marshal_info() { }
	// RVA: 0x75F430 Offset: 0x75DC30 VA: 0x18075F430
	internal object[] GetPseudoCustomAttributes() { }
	// RVA: 0x75F650 Offset: 0x75DE50 VA: 0x18075F650 Slot: 26
	public virtual object GetRawConstantValue() { }
	// RVA: 0x264330 Offset: 0x262B30 VA: 0x180264330 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x264350 Offset: 0x262B50 VA: 0x180264350
	public static bool op_Equality(FieldInfo left, FieldInfo right) { }
	// RVA: 0x2643A0 Offset: 0x262BA0 VA: 0x1802643A0
	public static bool op_Inequality(FieldInfo left, FieldInfo right) { }
}

// Namespace: System.Reflection
public class LocalVariableInfo // TypeDefIndex: 445
{
	// Fields
	internal Type type; // 0x10
	internal bool is_pinned; // 0x18
	internal ushort position; // 0x1A

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x333CD0 Offset: 0x3324D0 VA: 0x180333CD0 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Reflection
public class MethodBody // TypeDefIndex: 446
{
	// Fields
	private ExceptionHandlingClause[] clauses; // 0x10
	private LocalVariableInfo[] locals; // 0x18
	private byte[] il; // 0x20
	private bool init_locals; // 0x28
	private int sig_token; // 0x2C
	private int max_stack; // 0x30

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
public abstract class Module : ISerializable, ICustomAttributeProvider // TypeDefIndex: 447
{
	// Fields
	public static readonly TypeFilter FilterTypeName; // 0x0
	public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x8
	internal IntPtr _impl; // 0x10
	internal Assembly assembly; // 0x18
	internal string fqname; // 0x20
	internal string name; // 0x28
	internal string scopename; // 0x30
	internal bool is_resource; // 0x38
	internal int token; // 0x3C
	private const BindingFlags defaultBindingFlags = 28; // 0x0

	// Properties
	public virtual Assembly Assembly { get; }
	public virtual string ScopeName { get; }
	public virtual Guid ModuleVersionId { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x346440 Offset: 0x344C40 VA: 0x180346440 Slot: 7
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900 Slot: 3
	public override string ToString() { }
	// RVA: 0x346490 Offset: 0x344C90 VA: 0x180346490 Slot: 8
	internal virtual Guid GetModuleVersionId() { }
	// RVA: 0x3464D0 Offset: 0x344CD0 VA: 0x1803464D0
	private static bool filter_by_type_name(Type m, object filterCriteria) { }
	// RVA: 0x3466D0 Offset: 0x344ED0 VA: 0x1803466D0
	private static bool filter_by_type_name_ignore_case(Type m, object filterCriteria) { }
	// RVA: 0x346BD0 Offset: 0x3453D0 VA: 0x180346BD0
	private string GetGuidInternal() { }
	// RVA: 0x264330 Offset: 0x262B30 VA: 0x180264330 Slot: 0
	public override bool Equals(object o) { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x264350 Offset: 0x262B50 VA: 0x180264350
	public static bool op_Equality(Module left, Module right) { }
	// RVA: 0x346BF0 Offset: 0x3453F0 VA: 0x180346BF0 Slot: 9
	public virtual Assembly get_Assembly() { }
	// RVA: 0x346C50 Offset: 0x345450 VA: 0x180346C50 Slot: 10
	public virtual string get_ScopeName() { }
	// RVA: 0x346CB0 Offset: 0x3454B0 VA: 0x180346CB0 Slot: 11
	public virtual Guid get_ModuleVersionId() { }
	// RVA: 0x346D10 Offset: 0x345510 VA: 0x180346D10
	private static Exception CreateNIE() { }
	// RVA: 0x346DA0 Offset: 0x3455A0 VA: 0x180346DA0 Slot: 12
	public virtual bool IsResource() { }
	// RVA: 0x346E00 Offset: 0x345600 VA: 0x180346E00 Slot: 13
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x346E60 Offset: 0x345660 VA: 0x180346E60 Slot: 14
	public virtual bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x346EC0 Offset: 0x3456C0 VA: 0x180346EC0
	private static void .cctor() { }
}

// Namespace: System.Reflection
internal abstract class RuntimeAssembly : Assembly // TypeDefIndex: 448
{
	// Methods
	// RVA: 0x370F50 Offset: 0x36F750 VA: 0x180370F50 Slot: 9
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x371030 Offset: 0x36F830 VA: 0x180371030
	internal static RuntimeAssembly LoadWithPartialNameInternal(string partialName, Evidence securityEvidence, ref StackCrawlMark stackMark) { }
	// RVA: 0x371220 Offset: 0x36FA20 VA: 0x180371220
	internal static RuntimeAssembly LoadWithPartialNameInternal(AssemblyName an, Evidence securityEvidence, ref StackCrawlMark stackMark) { }
	// RVA: 0x371270 Offset: 0x36FA70 VA: 0x180371270 Slot: 16
	public override AssemblyName GetName(bool copiedName) { }
	// RVA: 0x2D4EE0 Offset: 0x2D36E0 VA: 0x1802D4EE0
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoAssembly : RuntimeAssembly // TypeDefIndex: 449
{
	// Methods
	// RVA: 0x347D80 Offset: 0x346580 VA: 0x180347D80 Slot: 19
	public override Type GetType(string name, bool throwOnError, bool ignoreCase) { }
	// RVA: 0x347EA0 Offset: 0x3466A0 VA: 0x180347EA0 Slot: 20
	public override Module GetModule(string name) { }
	// RVA: 0x348090 Offset: 0x346890 VA: 0x180348090 Slot: 21
	public override Module[] GetModules(bool getResourceModules) { }
	// RVA: 0x2D4EE0 Offset: 0x2D36E0 VA: 0x1802D4EE0
	public void .ctor() { }
}

// Namespace: System.Reflection
internal struct MonoEventInfo // TypeDefIndex: 450
{
	// Fields
	public Type declaring_type; // 0x0
	public Type reflected_type; // 0x8
	public string name; // 0x10
	public MethodInfo add_method; // 0x18
	public MethodInfo remove_method; // 0x20
	public MethodInfo raise_method; // 0x28
	public EventAttributes attrs; // 0x30
	public MethodInfo[] other_methods; // 0x38

	// Methods
	// RVA: 0x73ED20 Offset: 0x73D520 VA: 0x18073ED20
	private static void get_event_info(MonoEvent ev, out MonoEventInfo info) { }
	// RVA: 0x73EE30 Offset: 0x73D630 VA: 0x18073EE30
	internal static MonoEventInfo GetEventInfo(MonoEvent ev) { }
}

// Namespace: System.Reflection
internal abstract class RuntimeEventInfo : EventInfo, ISerializable // TypeDefIndex: 451
{
	// Properties
	public override Module Module { get; }
	private RuntimeType ReflectedTypeInternal { get; }

	// Methods
	// RVA: 0x3718E0 Offset: 0x3700E0 VA: 0x1803718E0 Slot: 14
	public override Module get_Module() { }
	// RVA: 0x3719D0 Offset: 0x3701D0 VA: 0x1803719D0
	internal RuntimeType GetDeclaringTypeInternal() { }
	// RVA: 0x371AA0 Offset: 0x3702A0 VA: 0x180371AA0
	private RuntimeType get_ReflectedTypeInternal() { }
	// RVA: 0x3718E0 Offset: 0x3700E0 VA: 0x1803718E0
	internal RuntimeModule GetRuntimeModule() { }
	// RVA: 0x371B70 Offset: 0x370370 VA: 0x180371B70 Slot: 19
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal sealed class MonoEvent : RuntimeEventInfo // TypeDefIndex: 452
{
	// Fields
	private IntPtr klass; // 0x18
	private IntPtr handle; // 0x20

	// Properties
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override string Name { get; }

	// Methods
	// RVA: 0x73E700 Offset: 0x73CF00 VA: 0x18073E700 Slot: 16
	public override MethodInfo GetAddMethod(bool nonPublic) { }
	// RVA: 0x73E7F0 Offset: 0x73CFF0 VA: 0x18073E7F0 Slot: 17
	public override MethodInfo GetRaiseMethod(bool nonPublic) { }
	// RVA: 0x73E8E0 Offset: 0x73D0E0 VA: 0x18073E8E0 Slot: 18
	public override MethodInfo GetRemoveMethod(bool nonPublic) { }
	// RVA: 0x73E9D0 Offset: 0x73D1D0 VA: 0x18073E9D0 Slot: 8
	public override Type get_DeclaringType() { }
	// RVA: 0x73E9F0 Offset: 0x73D1F0 VA: 0x18073E9F0 Slot: 9
	public override Type get_ReflectedType() { }
	// RVA: 0x73EA20 Offset: 0x73D220 VA: 0x18073EA20 Slot: 7
	public override string get_Name() { }
	// RVA: 0x73EA50 Offset: 0x73D250 VA: 0x18073EA50 Slot: 3
	public override string ToString() { }
	// RVA: 0x73EB00 Offset: 0x73D300 VA: 0x18073EB00 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x73EBC0 Offset: 0x73D3C0 VA: 0x18073EBC0 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }
	// RVA: 0x73EC60 Offset: 0x73D460 VA: 0x18073EC60 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Reflection
internal abstract class RuntimeFieldInfo : FieldInfo, ISerializable // TypeDefIndex: 453
{
	// Properties
	public override Module Module { get; }
	private RuntimeType ReflectedTypeInternal { get; }

	// Methods
	// RVA: 0x3721E0 Offset: 0x3709E0 VA: 0x1803721E0 Slot: 14
	public override Module get_Module() { }
	// RVA: 0x372210 Offset: 0x370A10 VA: 0x180372210
	internal RuntimeType GetDeclaringTypeInternal() { }
	// RVA: 0x3722E0 Offset: 0x370AE0 VA: 0x1803722E0
	private RuntimeType get_ReflectedTypeInternal() { }
	// RVA: 0x3721E0 Offset: 0x3709E0 VA: 0x1803721E0
	internal RuntimeModule GetRuntimeModule() { }
	// RVA: 0x3723B0 Offset: 0x370BB0 VA: 0x1803723B0 Slot: 27
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Reflection
internal abstract class RtFieldInfo : RuntimeFieldInfo // TypeDefIndex: 454
{
	// Methods
	// RVA: 0x370A80 Offset: 0x36F280 VA: 0x180370A80
	internal object UnsafeGetValue(object obj) { }
	// RVA: 0x370AD0 Offset: 0x36F2D0 VA: 0x180370AD0
	internal void CheckConsistency(object target) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	[DebuggerStepThroughAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x370CB0 Offset: 0x36F4B0 VA: 0x180370CB0
	internal void UnsafeSetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	[DebuggerStepThroughAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x370D00 Offset: 0x36F500 VA: 0x180370D00 Slot: 25
	public override void SetValueDirect(TypedReference obj, object value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoField : RtFieldInfo // TypeDefIndex: 455
{
	// Fields
	internal IntPtr klass; // 0x10
	internal RuntimeFieldHandle fhandle; // 0x18
	private string name; // 0x20
	private Type type; // 0x28
	private FieldAttributes attrs; // 0x30

	// Properties
	public override FieldAttributes Attributes { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override Type FieldType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods
	// RVA: 0x16E4D0 Offset: 0x16CCD0 VA: 0x18016E4D0 Slot: 15
	public override FieldAttributes get_Attributes() { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 16
	public override RuntimeFieldHandle get_FieldHandle() { }
	// RVA: 0x2644A0 Offset: 0x262CA0 VA: 0x1802644A0
	private Type ResolveType() { }
	// RVA: 0x73EF50 Offset: 0x73D750 VA: 0x18073EF50 Slot: 17
	public override Type get_FieldType() { }
	// RVA: 0x73F000 Offset: 0x73D800 VA: 0x18073F000
	private Type GetParentType(bool declaring) { }
	// RVA: 0x73F030 Offset: 0x73D830 VA: 0x18073F030 Slot: 9
	public override Type get_ReflectedType() { }
	// RVA: 0x73F040 Offset: 0x73D840 VA: 0x18073F040 Slot: 8
	public override Type get_DeclaringType() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0 Slot: 7
	public override string get_Name() { }
	// RVA: 0x73F060 Offset: 0x73D860 VA: 0x18073F060 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x73F120 Offset: 0x73D920 VA: 0x18073F120 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }
	// RVA: 0x73F1C0 Offset: 0x73D9C0 VA: 0x18073F1C0 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x73F280 Offset: 0x73DA80 VA: 0x18073F280 Slot: 24
	internal override int GetFieldOffset() { }
	// RVA: 0x370A80 Offset: 0x36F280 VA: 0x180370A80
	private object GetValueInternal(object obj) { }
	// RVA: 0x73F290 Offset: 0x73DA90 VA: 0x18073F290 Slot: 18
	public override object GetValue(object obj) { }
	// RVA: 0x73F490 Offset: 0x73DC90 VA: 0x18073F490 Slot: 3
	public override string ToString() { }
	// RVA: 0x3721C0 Offset: 0x3709C0 VA: 0x1803721C0
	private static void SetValueInternal(FieldInfo fi, object obj, object value) { }
	// RVA: 0x73F560 Offset: 0x73DD60 VA: 0x18073F560 Slot: 23
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }
	// RVA: 0x73F880 Offset: 0x73E080 VA: 0x18073F880 Slot: 26
	public override object GetRawConstantValue() { }
	// RVA: 0x73F9C0 Offset: 0x73E1C0 VA: 0x18073F9C0
	private void CheckGeneric() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Reflection
internal struct MonoMethodInfo // TypeDefIndex: 456
{
	// Fields
	private Type parent; // 0x0
	private Type ret; // 0x8
	internal MethodAttributes attrs; // 0x10
	internal MethodImplAttributes iattrs; // 0x14
	private CallingConventions callconv; // 0x18

	// Methods
	// RVA: 0x742ED0 Offset: 0x7416D0 VA: 0x180742ED0
	private static void get_method_info(IntPtr handle, out MonoMethodInfo info) { }
	// RVA: 0x742EE0 Offset: 0x7416E0 VA: 0x180742EE0
	private static int get_method_attributes(IntPtr handle) { }
	// RVA: 0x742EF0 Offset: 0x7416F0 VA: 0x180742EF0
	internal static MonoMethodInfo GetMethodInfo(IntPtr handle) { }
	// RVA: 0x742F20 Offset: 0x741720 VA: 0x180742F20
	internal static Type GetDeclaringType(IntPtr handle) { }
	// RVA: 0x742F40 Offset: 0x741740 VA: 0x180742F40
	internal static Type GetReturnType(IntPtr handle) { }
	// RVA: 0x742EE0 Offset: 0x7416E0 VA: 0x180742EE0
	internal static MethodAttributes GetAttributes(IntPtr handle) { }
	// RVA: 0x742F60 Offset: 0x741760 VA: 0x180742F60
	internal static CallingConventions GetCallingConvention(IntPtr handle) { }
	// RVA: 0x742F80 Offset: 0x741780 VA: 0x180742F80
	internal static MethodImplAttributes GetMethodImplementationFlags(IntPtr handle) { }
	// RVA: 0x742FB0 Offset: 0x7417B0 VA: 0x180742FB0
	private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member) { }
	// RVA: 0x742FB0 Offset: 0x7417B0 VA: 0x180742FB0
	internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member) { }
}

// Namespace: System.Reflection
internal abstract class RuntimeMethodInfo : MethodInfo, ISerializable // TypeDefIndex: 457
{
	// Properties
	public override Module Module { get; }
	private RuntimeType ReflectedTypeInternal { get; }

	// Methods
	// RVA: 0x373450 Offset: 0x371C50 VA: 0x180373450 Slot: 14
	public override Module get_Module() { }
	// RVA: 0x373570 Offset: 0x371D70 VA: 0x180373570
	private RuntimeType get_ReflectedTypeInternal() { }
	// RVA: 0x373640 Offset: 0x371E40 VA: 0x180373640 Slot: 33
	internal override string FormatNameAndSig(bool serialization) { }
	// RVA: 0x3739A0 Offset: 0x3721A0 VA: 0x1803739A0 Slot: 3
	public override string ToString() { }
	// RVA: 0x373450 Offset: 0x371C50 VA: 0x180373450
	internal RuntimeModule GetRuntimeModule() { }
	// RVA: 0x373A80 Offset: 0x372280 VA: 0x180373A80 Slot: 41
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x373CC0 Offset: 0x3724C0 VA: 0x180373CC0
	internal string SerializationToString() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoMethod : RuntimeMethodInfo // TypeDefIndex: 458
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private string name; // 0x18
	private Type reftype; // 0x20

	// Properties
	public override Type ReturnType { get; }
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override bool IsGenericMethodDefinition { get; }
	public override bool IsGenericMethod { get; }
	public override bool ContainsGenericParameters { get; }
	public override bool IsSecurityCritical { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x741C10 Offset: 0x740410 VA: 0x180741C10
	internal static string get_name(MethodBase method) { }
	// RVA: 0x741C50 Offset: 0x740450 VA: 0x180741C50
	internal static MonoMethod get_base_method(MonoMethod method, bool definition) { }
	// RVA: 0x741C60 Offset: 0x740460 VA: 0x180741C60 Slot: 40
	internal override MethodInfo GetBaseMethod() { }
	// RVA: 0x741C70 Offset: 0x740470 VA: 0x180741C70 Slot: 37
	public override Type get_ReturnType() { }
	// RVA: 0x348240 Offset: 0x346A40 VA: 0x180348240 Slot: 17
	public override MethodImplAttributes GetMethodImplementationFlags() { }
	// RVA: 0x741CA0 Offset: 0x7404A0 VA: 0x180741CA0 Slot: 16
	public override ParameterInfo[] GetParameters() { }
	// RVA: 0x348270 Offset: 0x346A70 VA: 0x180348270 Slot: 35
	internal override ParameterInfo[] GetParametersInternal() { }
	// RVA: 0x741DA0 Offset: 0x7405A0 VA: 0x180741DA0 Slot: 36
	internal override int GetParametersCount() { }
	// RVA: 0x3482F0 Offset: 0x346AF0 VA: 0x1803482F0
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc) { }
	[DebuggerStepThroughAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x741DE0 Offset: 0x7405E0 VA: 0x180741DE0 Slot: 20
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }
	// RVA: 0x741FB0 Offset: 0x7407B0 VA: 0x180741FB0
	internal static void ConvertValues(Binder binder, object[] args, ParameterInfo[] pinfo, CultureInfo culture, BindingFlags invokeAttr) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }
	// RVA: 0x348800 Offset: 0x347000 VA: 0x180348800 Slot: 19
	public override MethodAttributes get_Attributes() { }
	// RVA: 0x348810 Offset: 0x347010 VA: 0x180348810 Slot: 21
	public override CallingConventions get_CallingConvention() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0 Slot: 9
	public override Type get_ReflectedType() { }
	// RVA: 0x348880 Offset: 0x347080 VA: 0x180348880 Slot: 8
	public override Type get_DeclaringType() { }
	// RVA: 0x3488B0 Offset: 0x3470B0 VA: 0x1803488B0 Slot: 7
	public override string get_Name() { }
	// RVA: 0x742330 Offset: 0x740B30 VA: 0x180742330 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x7423F0 Offset: 0x740BF0 VA: 0x1807423F0 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }
	// RVA: 0x742490 Offset: 0x740C90 VA: 0x180742490 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x742550 Offset: 0x740D50 VA: 0x180742550
	internal void GetPInvoke(out PInvokeAttributes flags, out string entryPoint, out string dllName) { }
	// RVA: 0x742570 Offset: 0x740D70 VA: 0x180742570
	internal object[] GetPseudoCustomAttributes() { }
	// RVA: 0x742730 Offset: 0x740F30 VA: 0x180742730 Slot: 39
	public override MethodInfo MakeGenericMethod(Type[] methodInstantiation) { }
	// RVA: 0x742AE0 Offset: 0x7412E0 VA: 0x180742AE0
	private MethodInfo MakeGenericMethod_impl(Type[] types) { }
	// RVA: 0x742AF0 Offset: 0x7412F0 VA: 0x180742AF0 Slot: 22
	public override Type[] GetGenericArguments() { }
	// RVA: 0x742C50 Offset: 0x741450 VA: 0x180742C50
	private MethodInfo GetGenericMethodDefinition_impl() { }
	// RVA: 0x742C80 Offset: 0x741480 VA: 0x180742C80 Slot: 38
	public override MethodInfo GetGenericMethodDefinition() { }
	// RVA: 0x742DB0 Offset: 0x7415B0 VA: 0x180742DB0 Slot: 23
	public override bool get_IsGenericMethodDefinition() { }
	// RVA: 0x742DC0 Offset: 0x7415C0 VA: 0x180742DC0 Slot: 25
	public override bool get_IsGenericMethod() { }
	// RVA: 0x742DF0 Offset: 0x7415F0 VA: 0x180742DF0 Slot: 24
	public override bool get_ContainsGenericParameters() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 26
	public override bool get_IsSecurityCritical() { }
}

// Namespace: System.Reflection
internal abstract class RuntimeConstructorInfo : ConstructorInfo, ISerializable // TypeDefIndex: 459
{
	// Properties
	public override Module Module { get; }
	internal BindingFlags BindingFlags { get; }
	private RuntimeType ReflectedTypeInternal { get; }

	// Methods
	// RVA: 0x371370 Offset: 0x36FB70 VA: 0x180371370 Slot: 14
	public override Module get_Module() { }
	// RVA: 0x371370 Offset: 0x36FB70 VA: 0x180371370
	internal RuntimeModule GetRuntimeModule() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	internal BindingFlags get_BindingFlags() { }
	// RVA: 0x371450 Offset: 0x36FC50 VA: 0x180371450
	private RuntimeType get_ReflectedTypeInternal() { }
	// RVA: 0x371520 Offset: 0x36FD20 VA: 0x180371520 Slot: 38
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x371720 Offset: 0x36FF20 VA: 0x180371720
	internal string SerializationToString() { }
	// RVA: 0x371740 Offset: 0x36FF40 VA: 0x180371740
	internal void SerializationInvoke(object target, SerializationInfo info, StreamingContext context) { }
	// RVA: 0x348D00 Offset: 0x347500 VA: 0x180348D00
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoCMethod : RuntimeConstructorInfo // TypeDefIndex: 460
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private string name; // 0x18
	private Type reftype; // 0x20

	// Properties
	public override RuntimeMethodHandle MethodHandle { get; }
	public override MethodAttributes Attributes { get; }
	public override CallingConventions CallingConvention { get; }
	public override bool ContainsGenericParameters { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }
	public override bool IsSecurityCritical { get; }

	// Methods
	// RVA: 0x348240 Offset: 0x346A40 VA: 0x180348240 Slot: 17
	public override MethodImplAttributes GetMethodImplementationFlags() { }
	// RVA: 0x348270 Offset: 0x346A70 VA: 0x180348270 Slot: 16
	public override ParameterInfo[] GetParameters() { }
	// RVA: 0x348270 Offset: 0x346A70 VA: 0x180348270 Slot: 35
	internal override ParameterInfo[] GetParametersInternal() { }
	// RVA: 0x3482B0 Offset: 0x346AB0 VA: 0x1803482B0 Slot: 36
	internal override int GetParametersCount() { }
	// RVA: 0x3482F0 Offset: 0x346AF0 VA: 0x1803482F0
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc) { }
	[DebuggerStepThroughAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x348300 Offset: 0x346B00 VA: 0x180348300 Slot: 20
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }
	// RVA: 0x348470 Offset: 0x346C70 VA: 0x180348470
	private object DoInvoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }
	// RVA: 0x3486C0 Offset: 0x346EC0 VA: 0x1803486C0
	public object InternalInvoke(object obj, object[] parameters) { }
	[DebuggerStepThroughAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x3487D0 Offset: 0x346FD0 VA: 0x1803487D0 Slot: 37
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 18
	public override RuntimeMethodHandle get_MethodHandle() { }
	// RVA: 0x348800 Offset: 0x347000 VA: 0x180348800 Slot: 19
	public override MethodAttributes get_Attributes() { }
	// RVA: 0x348810 Offset: 0x347010 VA: 0x180348810 Slot: 21
	public override CallingConventions get_CallingConvention() { }
	// RVA: 0x348840 Offset: 0x347040 VA: 0x180348840 Slot: 24
	public override bool get_ContainsGenericParameters() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0 Slot: 9
	public override Type get_ReflectedType() { }
	// RVA: 0x348880 Offset: 0x347080 VA: 0x180348880 Slot: 8
	public override Type get_DeclaringType() { }
	// RVA: 0x3488B0 Offset: 0x3470B0 VA: 0x1803488B0 Slot: 7
	public override string get_Name() { }
	// RVA: 0x3488F0 Offset: 0x3470F0 VA: 0x1803488F0 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x3489B0 Offset: 0x3471B0 VA: 0x1803489B0 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }
	// RVA: 0x348A50 Offset: 0x347250 VA: 0x180348A50 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x348B10 Offset: 0x347310 VA: 0x180348B10 Slot: 3
	public override string ToString() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 26
	public override bool get_IsSecurityCritical() { }
	// RVA: 0x348D00 Offset: 0x347500 VA: 0x180348D00
	public void .ctor() { }
}

// Namespace: System.Reflection
internal abstract class RuntimeModule : Module // TypeDefIndex: 461
{
	// Methods
	// RVA: 0x373DA0 Offset: 0x3725A0 VA: 0x180373DA0
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoModule : RuntimeModule // TypeDefIndex: 462
{
	// Properties
	public override Assembly Assembly { get; }
	public override string ScopeName { get; }
	public override Guid ModuleVersionId { get; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 9
	public override Assembly get_Assembly() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0 Slot: 10
	public override string get_ScopeName() { }
	// RVA: 0x743720 Offset: 0x741F20 VA: 0x180743720 Slot: 11
	public override Guid get_ModuleVersionId() { }
	// RVA: 0x2E9C80 Offset: 0x2E8480 VA: 0x1802E9C80 Slot: 12
	public override bool IsResource() { }
	// RVA: 0x743750 Offset: 0x741F50 VA: 0x180743750 Slot: 13
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x743810 Offset: 0x742010 VA: 0x180743810 Slot: 14
	public override bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x7438D0 Offset: 0x7420D0 VA: 0x1807438D0 Slot: 7
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x743A50 Offset: 0x742250 VA: 0x180743A50
	internal RuntimeAssembly GetRuntimeAssembly() { }
	// RVA: 0x373DA0 Offset: 0x3725A0 VA: 0x180373DA0
	public void .ctor() { }
}

// Namespace: System.Reflection
internal abstract class RuntimeParameterInfo : ParameterInfo // TypeDefIndex: 463
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoParameterInfo : RuntimeParameterInfo // TypeDefIndex: 464
{
	// Properties
	public override object DefaultValue { get; }

	// Methods
	// RVA: 0x743B10 Offset: 0x742310 VA: 0x180743B10
	internal void .ctor(ParameterInfo pinfo, MemberInfo member) { }
	// RVA: 0x743B50 Offset: 0x742350 VA: 0x180743B50 Slot: 8
	public override object get_DefaultValue() { }
	// RVA: 0x743DE0 Offset: 0x7425E0 VA: 0x180743DE0 Slot: 9
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x743EA0 Offset: 0x7426A0 VA: 0x180743EA0 Slot: 10
	public override bool IsDefined(Type attributeType, bool inherit) { }
}

// Namespace: System.Reflection
internal struct MonoPropertyInfo // TypeDefIndex: 465
{
	// Fields
	public Type parent; // 0x0
	public Type declaring_type; // 0x8
	public string name; // 0x10
	public MethodInfo get_method; // 0x18
	public MethodInfo set_method; // 0x20
	public PropertyAttributes attrs; // 0x28

	// Methods
	// RVA: 0x744A40 Offset: 0x743240 VA: 0x180744A40
	internal static void get_property_info(MonoProperty prop, ref MonoPropertyInfo info, PInfo req_info) { }
}

// Namespace: System.Reflection
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum PInfo // TypeDefIndex: 466
{
	// Fields
	public int value__; // 0x0
	public const PInfo Attributes = 1; // 0x0
	public const PInfo GetMethod = 2; // 0x0
	public const PInfo SetMethod = 4; // 0x0
	public const PInfo ReflectedType = 8; // 0x0
	public const PInfo DeclaringType = 16; // 0x0
	public const PInfo Name = 32; // 0x0
}

// Namespace: System.Reflection
internal abstract class RuntimePropertyInfo : PropertyInfo, ISerializable // TypeDefIndex: 467
{
	// Properties
	public override Module Module { get; }
	private RuntimeType ReflectedTypeInternal { get; }

	// Methods
	// RVA: 0x373E30 Offset: 0x372630 VA: 0x180373E30 Slot: 14
	public override Module get_Module() { }
	// RVA: 0x373F20 Offset: 0x372720 VA: 0x180373F20
	internal RuntimeType GetDeclaringTypeInternal() { }
	// RVA: 0x373FF0 Offset: 0x3727F0 VA: 0x180373FF0
	private RuntimeType get_ReflectedTypeInternal() { }
	// RVA: 0x373E30 Offset: 0x372630 VA: 0x180373E30
	internal RuntimeModule GetRuntimeModule() { }
	// RVA: 0x3740C0 Offset: 0x3728C0 VA: 0x1803740C0 Slot: 3
	public override string ToString() { }
	// RVA: 0x3740D0 Offset: 0x3728D0 VA: 0x1803740D0
	private string FormatNameAndSig(bool serialization) { }
	// RVA: 0x374290 Offset: 0x372A90 VA: 0x180374290 Slot: 19
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x374480 Offset: 0x372C80 VA: 0x180374480
	internal string SerializationToString() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Reflection
[Serializable]
internal class MonoProperty : RuntimePropertyInfo // TypeDefIndex: 468
{
	// Fields
	internal IntPtr klass; // 0x10
	internal IntPtr prop; // 0x18
	private MonoPropertyInfo info; // 0x20
	private PInfo cached; // 0x50
	private MonoProperty.GetterAdapter cached_getter; // 0x58

	// Properties
	public override Type PropertyType { get; }
	public override Type ReflectedType { get; }
	public override Type DeclaringType { get; }
	public override string Name { get; }

	// Methods
	// RVA: 0x743F60 Offset: 0x742760 VA: 0x180743F60
	private void CachePropertyInfo(PInfo flags) { }
	// RVA: 0x744050 Offset: 0x742850 VA: 0x180744050 Slot: 15
	public override Type get_PropertyType() { }
	// RVA: 0x744190 Offset: 0x742990 VA: 0x180744190 Slot: 9
	public override Type get_ReflectedType() { }
	// RVA: 0x7441D0 Offset: 0x7429D0 VA: 0x1807441D0 Slot: 8
	public override Type get_DeclaringType() { }
	// RVA: 0x744210 Offset: 0x742A10 VA: 0x180744210 Slot: 7
	public override string get_Name() { }
	// RVA: 0x744260 Offset: 0x742A60 VA: 0x180744260 Slot: 16
	public override MethodInfo GetGetMethod(bool nonPublic) { }
	// RVA: 0x744360 Offset: 0x742B60 VA: 0x180744360 Slot: 17
	public override ParameterInfo[] GetIndexParameters() { }
	// RVA: 0x744740 Offset: 0x742F40 VA: 0x180744740 Slot: 18
	public override MethodInfo GetSetMethod(bool nonPublic) { }
	// RVA: 0x744840 Offset: 0x743040 VA: 0x180744840 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x7448F0 Offset: 0x7430F0 VA: 0x1807448F0 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }
	// RVA: 0x744990 Offset: 0x743190 VA: 0x180744990 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x535DA0 Offset: 0x5345A0 VA: 0x180535DA0
	private static object GetterAdapterFrame(MonoProperty.Getter<T, R> getter, object obj) { }
	// RVA: 0x535E30 Offset: 0x534630 VA: 0x180535E30
	private static object StaticGetterAdapterFrame(MonoProperty.StaticGetter<R> getter, object obj) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private sealed class MonoProperty.GetterAdapter : MulticastDelegate // TypeDefIndex: 469
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x272690 Offset: 0x270E90 VA: 0x180272690 Slot: 12
	public virtual object Invoke(object _this) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(object _this, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual object EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class MonoProperty.Getter<T, R> : MulticastDelegate // TypeDefIndex: 470
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x272690 Offset: 0x270E90 VA: 0x180272690 Slot: 12
	public virtual R Invoke(T _this) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(T _this, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual R EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class MonoProperty.StaticGetter<R> : MulticastDelegate // TypeDefIndex: 471
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x7C0230 Offset: 0x7BEA30 VA: 0x1807C0230 Slot: 12
	public virtual R Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual R EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Reflection
[Serializable]
public class ParameterInfo : ICustomAttributeProvider, IObjectReference // TypeDefIndex: 472
{
	// Fields
	protected Type ClassImpl; // 0x10
	protected object DefaultValueImpl; // 0x18
	protected MemberInfo MemberImpl; // 0x20
	protected string NameImpl; // 0x28
	protected int PositionImpl; // 0x30
	protected ParameterAttributes AttrsImpl; // 0x34
	internal MarshalAsAttribute marshalAs; // 0x38

	// Properties
	public virtual Type ParameterType { get; }
	public bool IsIn { get; }
	public bool IsOptional { get; }
	public bool IsOut { get; }
	public bool IsRetval { get; }
	public virtual object DefaultValue { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x312F60 Offset: 0x311760 VA: 0x180312F60 Slot: 3
	public override string ToString() { }
	// RVA: 0x313610 Offset: 0x311E10 VA: 0x180313610
	internal static void FormatParameters(StringBuilder sb, ParameterInfo[] p, CallingConventions callingConvention, bool serialization) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 7
	public virtual Type get_ParameterType() { }
	// RVA: 0x313840 Offset: 0x312040 VA: 0x180313840
	public bool get_IsIn() { }
	// RVA: 0x313850 Offset: 0x312050 VA: 0x180313850
	public bool get_IsOptional() { }
	// RVA: 0x313860 Offset: 0x312060 VA: 0x180313860
	public bool get_IsOut() { }
	// RVA: 0x313870 Offset: 0x312070 VA: 0x180313870
	public bool get_IsRetval() { }
	// RVA: 0x313880 Offset: 0x312080 VA: 0x180313880
	internal object[] GetPseudoCustomAttributes() { }
	// RVA: 0x313B90 Offset: 0x312390 VA: 0x180313B90 Slot: 8
	public virtual object get_DefaultValue() { }
	// RVA: 0x313BE0 Offset: 0x3123E0 VA: 0x180313BE0 Slot: 9
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x313C50 Offset: 0x312450 VA: 0x180313C50 Slot: 6
	public object GetRealObject(StreamingContext context) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 10
	public virtual bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x313CA0 Offset: 0x3124A0 VA: 0x180313CA0
	internal static ParameterInfo New(ParameterInfo pinfo, MemberInfo member) { }
}

// Namespace: System.Reflection
[Serializable]
public abstract class PropertyInfo : MemberInfo // TypeDefIndex: 473
{
	// Properties
	public override MemberTypes MemberType { get; }
	public abstract Type PropertyType { get; }

	// Methods
	// RVA: 0x31CB10 Offset: 0x31B310 VA: 0x18031CB10 Slot: 6
	public override MemberTypes get_MemberType() { }
	// RVA: -1 Offset: -1 Slot: 15
	public abstract Type get_PropertyType() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: -1 Offset: -1 Slot: 16
	public abstract MethodInfo GetGetMethod(bool nonPublic) { }
	// RVA: -1 Offset: -1 Slot: 17
	public abstract ParameterInfo[] GetIndexParameters() { }
	// RVA: -1 Offset: -1 Slot: 18
	public abstract MethodInfo GetSetMethod(bool nonPublic) { }
	// RVA: 0x264330 Offset: 0x262B30 VA: 0x180264330 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x264350 Offset: 0x262B50 VA: 0x180264350
	public static bool op_Equality(PropertyInfo left, PropertyInfo right) { }
	// RVA: 0x2643A0 Offset: 0x262BA0 VA: 0x1802643A0
	public static bool op_Inequality(PropertyInfo left, PropertyInfo right) { }
	// RVA: 0x31CB20 Offset: 0x31B320 VA: 0x18031CB20
	private static PropertyInfo internal_from_handle_type(IntPtr event_handle, IntPtr type_handle) { }
	// RVA: 0x31CB80 Offset: 0x31B380 VA: 0x18031CB80
	internal static PropertyInfo GetPropertyFromHandle(RuntimePropertyHandle handle, RuntimeTypeHandle reflectedType) { }
}

// Namespace: System.Reflection
[Serializable]
public class StrongNameKeyPair : ISerializable, IDeserializationCallback // TypeDefIndex: 474
{
	// Fields
	private byte[] _publicKey; // 0x10
	private string _keyPairContainer; // 0x18
	private bool _keyPairExported; // 0x20
	private byte[] _keyPairArray; // 0x28

	// Methods
	// RVA: 0x38F660 Offset: 0x38DE60 VA: 0x18038F660
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x38F800 Offset: 0x38E000 VA: 0x18038F800 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }
}

// Namespace: System.Reflection.Emit
internal abstract class TypeBuilderInstantiation : TypeInfo // TypeDefIndex: 475
{
	// Methods
	// RVA: 0x4A5E20 Offset: 0x4A4620 VA: 0x1804A5E20
	internal static Type MakeGenericType(Type type, Type[] typeArguments) { }
}

// Namespace: System.IO
internal static class __Error // TypeDefIndex: 476
{
	// Methods
	// RVA: 0x269640 Offset: 0x267E40 VA: 0x180269640
	internal static void EndOfFile() { }
	// RVA: 0x2696B0 Offset: 0x267EB0 VA: 0x1802696B0
	internal static void FileNotOpen() { }
	// RVA: 0x269720 Offset: 0x267F20 VA: 0x180269720
	internal static void StreamIsClosed() { }
	// RVA: 0x269790 Offset: 0x267F90 VA: 0x180269790
	internal static void MemoryStreamNotExpandable() { }
	// RVA: 0x269800 Offset: 0x268000 VA: 0x180269800
	internal static void ReaderClosed() { }
	// RVA: 0x269870 Offset: 0x268070 VA: 0x180269870
	internal static void ReadNotSupported() { }
	// RVA: 0x2698E0 Offset: 0x2680E0 VA: 0x1802698E0
	internal static void WrongAsyncResult() { }
	// RVA: 0x269950 Offset: 0x268150 VA: 0x180269950
	internal static void EndReadCalledTwice() { }
	// RVA: 0x2699C0 Offset: 0x2681C0 VA: 0x1802699C0
	internal static void EndWriteCalledTwice() { }
	// RVA: 0x269A30 Offset: 0x268230 VA: 0x180269A30
	internal static string GetDisplayablePath(string path, bool isInvalidPath) { }
	// RVA: 0x269B80 Offset: 0x268380 VA: 0x180269B80
	internal static void WinIOError(int errorCode, string maybeFullPath) { }
	// RVA: 0x26A270 Offset: 0x268A70 VA: 0x18026A270
	internal static void WriteNotSupported() { }
	// RVA: 0x26A2E0 Offset: 0x268AE0 VA: 0x18026A2E0
	internal static void WriterClosed() { }
}

// Namespace: System.IO
public class BinaryReader : IDisposable // TypeDefIndex: 477
{
	// Fields
	private Stream m_stream; // 0x10
	private byte[] m_buffer; // 0x18
	private Decoder m_decoder; // 0x20
	private byte[] m_charBytes; // 0x28
	private char[] m_singleChar; // 0x30
	private char[] m_charBuffer; // 0x38
	private int m_maxCharsSize; // 0x40
	private bool m_2BytesPerChar; // 0x44
	private bool m_isMemoryStream; // 0x45
	private bool m_leaveOpen; // 0x46

	// Methods
	// RVA: 0x2DF460 Offset: 0x2DDC60 VA: 0x1802DF460
	public void .ctor(Stream input, Encoding encoding) { }
	// RVA: 0x2DF480 Offset: 0x2DDC80 VA: 0x1802DF480
	public void .ctor(Stream input, Encoding encoding, bool leaveOpen) { }
	// RVA: 0x2DF6F0 Offset: 0x2DDEF0 VA: 0x1802DF6F0 Slot: 5
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x2DF750 Offset: 0x2DDF50 VA: 0x1802DF750 Slot: 4
	public void Dispose() { }
	// RVA: 0x2DF770 Offset: 0x2DDF70 VA: 0x1802DF770 Slot: 6
	public virtual int Read() { }
	// RVA: 0x2DF790 Offset: 0x2DDF90 VA: 0x1802DF790 Slot: 7
	public virtual bool ReadBoolean() { }
	// RVA: 0x2DF7E0 Offset: 0x2DDFE0 VA: 0x1802DF7E0 Slot: 8
	public virtual byte ReadByte() { }
	// RVA: 0x2DF820 Offset: 0x2DE020 VA: 0x1802DF820 Slot: 9
	public virtual char ReadChar() { }
	// RVA: 0x2DF850 Offset: 0x2DE050 VA: 0x1802DF850 Slot: 10
	public virtual short ReadInt16() { }
	// RVA: 0x2DF850 Offset: 0x2DE050 VA: 0x1802DF850 Slot: 11
	public virtual ushort ReadUInt16() { }
	// RVA: 0x2DF8C0 Offset: 0x2DE0C0 VA: 0x1802DF8C0 Slot: 12
	public virtual int ReadInt32() { }
	// RVA: 0x2DFB60 Offset: 0x2DE360 VA: 0x1802DFB60 Slot: 13
	public virtual uint ReadUInt32() { }
	// RVA: 0x2DFC10 Offset: 0x2DE410 VA: 0x1802DFC10 Slot: 14
	public virtual long ReadInt64() { }
	// RVA: 0x2DFC10 Offset: 0x2DE410 VA: 0x1802DFC10 Slot: 15
	public virtual ulong ReadUInt64() { }
	// RVA: 0x2DFD80 Offset: 0x2DE580 VA: 0x1802DFD80 Slot: 16
	public virtual float ReadSingle() { }
	// RVA: 0x2DFDD0 Offset: 0x2DE5D0 VA: 0x1802DFDD0 Slot: 17
	public virtual double ReadDouble() { }
	// RVA: 0x2DFF20 Offset: 0x2DE720 VA: 0x1802DFF20 Slot: 18
	public virtual string ReadString() { }
	// RVA: 0x2E02A0 Offset: 0x2DEAA0 VA: 0x1802E02A0
	private int InternalReadChars(char[] buffer, int index, int count) { }
	// RVA: 0x2E0600 Offset: 0x2DEE00 VA: 0x1802E0600
	private int InternalReadOneChar() { }
	// RVA: 0x2E08E0 Offset: 0x2DF0E0 VA: 0x1802E08E0 Slot: 19
	public virtual char[] ReadChars(int count) { }
	// RVA: 0x2E0AB0 Offset: 0x2DF2B0 VA: 0x1802E0AB0 Slot: 20
	public virtual int Read(byte[] buffer, int index, int count) { }
	// RVA: 0x2E0CA0 Offset: 0x2DF4A0 VA: 0x1802E0CA0 Slot: 21
	public virtual byte[] ReadBytes(int count) { }
	// RVA: 0x2E0E80 Offset: 0x2DF680 VA: 0x1802E0E80 Slot: 22
	protected virtual void FillBuffer(int numBytes) { }
	// RVA: 0x2E1010 Offset: 0x2DF810 VA: 0x1802E1010
	protected internal int Read7BitEncodedInt() { }
}

// Namespace: System.IO
[Serializable]
public class BinaryWriter : IDisposable // TypeDefIndex: 478
{
	// Fields
	public static readonly BinaryWriter Null; // 0x0
	protected Stream OutStream; // 0x10
	private byte[] _buffer; // 0x18
	private Encoding _encoding; // 0x20
	private Encoder _encoder; // 0x28
	[OptionalFieldAttribute] // RVA: 0xD9880 Offset: 0xD8C80 VA: 0x1800D9880
	private bool _leaveOpen; // 0x30
	private byte[] _largeByteBuffer; // 0x38
	private int _maxChars; // 0x40

	// Methods
	// RVA: 0x2E1100 Offset: 0x2DF900 VA: 0x1802E1100
	protected void .ctor() { }
	// RVA: 0x2E1210 Offset: 0x2DFA10 VA: 0x1802E1210
	public void .ctor(Stream output, Encoding encoding) { }
	// RVA: 0x2E13A0 Offset: 0x2DFBA0 VA: 0x1802E13A0
	public void .ctor(Stream output, Encoding encoding, bool leaveOpen) { }
	// RVA: 0x2E1530 Offset: 0x2DFD30 VA: 0x1802E1530 Slot: 5
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x2DF750 Offset: 0x2DDF50 VA: 0x1802DF750 Slot: 4
	public void Dispose() { }
	// RVA: 0x1D4930 Offset: 0x1D3130 VA: 0x1801D4930 Slot: 6
	public virtual void Flush() { }
	// RVA: 0x2E1590 Offset: 0x2DFD90 VA: 0x1802E1590 Slot: 7
	public virtual void Write(bool value) { }
	// RVA: 0x2E1600 Offset: 0x2DFE00 VA: 0x1802E1600 Slot: 8
	public virtual void Write(byte value) { }
	// RVA: 0x2E1630 Offset: 0x2DFE30 VA: 0x1802E1630 Slot: 9
	public virtual void Write(byte[] buffer) { }
	// RVA: 0x2E1710 Offset: 0x2DFF10 VA: 0x1802E1710 Slot: 10
	public virtual void Write(byte[] buffer, int index, int count) { }
	// RVA: 0x2E1740 Offset: 0x2DFF40 VA: 0x1802E1740 Slot: 11
	public virtual void Write(char ch) { }
	// RVA: 0x2E18D0 Offset: 0x2E00D0 VA: 0x1802E18D0 Slot: 12
	public virtual void Write(char[] chars) { }
	// RVA: 0x2E19E0 Offset: 0x2E01E0 VA: 0x1802E19E0 Slot: 13
	public virtual void Write(double value) { }
	// RVA: 0x2E1A40 Offset: 0x2E0240 VA: 0x1802E1A40 Slot: 14
	public virtual void Write(short value) { }
	// RVA: 0x2E1AD0 Offset: 0x2E02D0 VA: 0x1802E1AD0 Slot: 15
	public virtual void Write(ushort value) { }
	// RVA: 0x2E1B60 Offset: 0x2E0360 VA: 0x1802E1B60 Slot: 16
	public virtual void Write(int value) { }
	// RVA: 0x2E1C50 Offset: 0x2E0450 VA: 0x1802E1C50 Slot: 17
	public virtual void Write(uint value) { }
	// RVA: 0x2E1D40 Offset: 0x2E0540 VA: 0x1802E1D40 Slot: 18
	public virtual void Write(long value) { }
	// RVA: 0x2E1F00 Offset: 0x2E0700 VA: 0x1802E1F00 Slot: 19
	public virtual void Write(ulong value) { }
	// RVA: 0x2E20C0 Offset: 0x2E08C0 VA: 0x1802E20C0 Slot: 20
	public virtual void Write(float value) { }
	// RVA: 0x2E2120 Offset: 0x2E0920 VA: 0x1802E2120 Slot: 21
	public virtual void Write(string value) { }
	// RVA: 0x2E2460 Offset: 0x2E0C60 VA: 0x1802E2460
	protected void Write7BitEncodedInt(int value) { }
	// RVA: 0x2E24D0 Offset: 0x2E0CD0 VA: 0x1802E24D0
	private static void .cctor() { }
}

// Namespace: System.IO
public static class Directory // TypeDefIndex: 479
{
	// Methods
	// RVA: 0x473050 Offset: 0x471850 VA: 0x180473050
	public static string[] GetFiles(string path) { }
	// RVA: 0x473120 Offset: 0x471920 VA: 0x180473120
	private static string[] InternalGetFiles(string path, string searchPattern, SearchOption searchOption) { }
	// RVA: 0x473150 Offset: 0x471950 VA: 0x180473150
	public static string[] GetDirectories(string path) { }
	// RVA: 0x473220 Offset: 0x471A20 VA: 0x180473220
	public static string[] GetDirectories(string path, string searchPattern) { }
	// RVA: 0x473330 Offset: 0x471B30 VA: 0x180473330
	private static string[] InternalGetDirectories(string path, string searchPattern, SearchOption searchOption) { }
	// RVA: 0x473360 Offset: 0x471B60 VA: 0x180473360
	internal static string[] InternalGetFileDirectoryNames(string path, string userPathOriginal, string searchPattern, bool includeFiles, bool includeDirs, SearchOption searchOption, bool checkHost) { }
	// RVA: 0x473550 Offset: 0x471D50 VA: 0x180473550
	public static DirectoryInfo CreateDirectory(string path) { }
	// RVA: 0x473820 Offset: 0x472020 VA: 0x180473820
	private static DirectoryInfo CreateDirectoriesInternal(string path) { }
	// RVA: 0x473A90 Offset: 0x472290 VA: 0x180473A90
	public static void Delete(string path) { }
	// RVA: 0x473E30 Offset: 0x472630 VA: 0x180473E30
	private static void RecursiveDelete(string path) { }
	// RVA: 0x474100 Offset: 0x472900 VA: 0x180474100
	public static void Delete(string path, bool recursive) { }
	// RVA: 0x4741C0 Offset: 0x4729C0 VA: 0x1804741C0
	public static bool Exists(string path) { }
	// RVA: 0x474340 Offset: 0x472B40 VA: 0x180474340
	public static string GetCurrentDirectory() { }
	// RVA: 0x474350 Offset: 0x472B50 VA: 0x180474350
	internal static string InsecureGetCurrentDirectory() { }
	// RVA: 0x4744A0 Offset: 0x472CA0 VA: 0x1804744A0
	internal static string GetDemandDir(string fullPath, bool thisDirOnly) { }
}

// Namespace: 
internal sealed class Directory.SearchData // TypeDefIndex: 480
{
	// Fields
	public readonly string fullPath; // 0x10
	public readonly string userPath; // 0x18
	public readonly SearchOption searchOption; // 0x20

	// Methods
	// RVA: 0x26D0E0 Offset: 0x26B8E0 VA: 0x18026D0E0
	public void .ctor(string fullPath, string userPath, SearchOption searchOption) { }
}

// Namespace: System.IO
[Serializable]
public class DirectoryNotFoundException : IOException // TypeDefIndex: 481
{
	// Methods
	// RVA: 0x4754A0 Offset: 0x473CA0 VA: 0x1804754A0
	public void .ctor() { }
	// RVA: 0x475530 Offset: 0x473D30 VA: 0x180475530
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[Serializable]
public class DriveNotFoundException : IOException // TypeDefIndex: 482
{
	// Methods
	// RVA: 0x476150 Offset: 0x474950 VA: 0x180476150
	public void .ctor() { }
	// RVA: 0x475530 Offset: 0x473D30 VA: 0x180475530
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[Serializable]
public class EndOfStreamException : IOException // TypeDefIndex: 483
{
	// Methods
	// RVA: 0x488640 Offset: 0x486E40 VA: 0x180488640
	public void .ctor() { }
	// RVA: 0x4886D0 Offset: 0x486ED0 VA: 0x1804886D0
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[Serializable]
public class FileLoadException : IOException // TypeDefIndex: 484
{
	// Fields
	private string _fileName; // 0x90
	private string _fusionLog; // 0x98

	// Properties
	public override string Message { get; }

	// Methods
	// RVA: 0x75FED0 Offset: 0x75E6D0 VA: 0x18075FED0
	public void .ctor() { }
	// RVA: 0x75FF60 Offset: 0x75E760 VA: 0x18075FF60
	public void .ctor(string message) { }
	// RVA: 0x75FF80 Offset: 0x75E780 VA: 0x18075FF80 Slot: 5
	public override string get_Message() { }
	// RVA: 0x75FFB0 Offset: 0x75E7B0 VA: 0x18075FFB0
	private void SetMessageField() { }
	// RVA: 0x75FFE0 Offset: 0x75E7E0 VA: 0x18075FFE0 Slot: 3
	public override string ToString() { }
	// RVA: 0x760290 Offset: 0x75EA90 VA: 0x180760290
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x760390 Offset: 0x75EB90 VA: 0x180760390 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x7606A0 Offset: 0x75EEA0 VA: 0x1807606A0
	internal static string FormatFileLoadExceptionMessage(string fileName, int hResult) { }
}

// Namespace: System.IO
[Serializable]
public class FileNotFoundException : IOException // TypeDefIndex: 485
{
	// Fields
	private string _fileName; // 0x90
	private string _fusionLog; // 0x98

	// Properties
	public override string Message { get; }

	// Methods
	// RVA: 0x760790 Offset: 0x75EF90 VA: 0x180760790
	public void .ctor() { }
	// RVA: 0x760820 Offset: 0x75F020 VA: 0x180760820
	public void .ctor(string message) { }
	// RVA: 0x760840 Offset: 0x75F040 VA: 0x180760840
	public void .ctor(string message, string fileName) { }
	// RVA: 0x760880 Offset: 0x75F080 VA: 0x180760880 Slot: 5
	public override string get_Message() { }
	// RVA: 0x760930 Offset: 0x75F130 VA: 0x180760930
	private void SetMessageField() { }
	// RVA: 0x7609E0 Offset: 0x75F1E0 VA: 0x1807609E0 Slot: 3
	public override string ToString() { }
	// RVA: 0x760C90 Offset: 0x75F490 VA: 0x180760C90
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x760D90 Offset: 0x75F590 VA: 0x180760D90 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
internal static class FileSystemEnumerableFactory // TypeDefIndex: 486
{
	// Methods
	// RVA: 0x764FD0 Offset: 0x7637D0 VA: 0x180764FD0
	internal static IEnumerable<string> CreateFileNameIterator(string path, string originalUserPath, string searchPattern, bool includeFiles, bool includeDirs, SearchOption searchOption, bool checkHost) { }
}

// Namespace: System.IO
internal abstract class Iterator<TSource> : IEnumerable<TSource>, IEnumerable, IEnumerator<TSource>, IDisposable, IEnumerator // TypeDefIndex: 487
{
	// Fields
	private int threadId; // 0x0
	internal int state; // 0x0
	internal TSource current; // 0x0

	// Properties
	public TSource Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x72AB90 Offset: 0x729390 VA: 0x18072AB90
	public void .ctor() { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 6
	public TSource get_Current() { }
	// RVA: -1 Offset: -1 Slot: 10
	protected abstract Iterator<TSource> Clone() { }
	// RVA: 0x72AD70 Offset: 0x729570 VA: 0x18072AD70 Slot: 7
	public void Dispose() { }
	// RVA: 0x72AD60 Offset: 0x729560 VA: 0x18072AD60 Slot: 11
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x72ABF0 Offset: 0x7293F0 VA: 0x18072ABF0 Slot: 4
	public IEnumerator<TSource> GetEnumerator() { }
	// RVA: -1 Offset: -1 Slot: 12
	public abstract bool MoveNext() { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 9
	private object System.Collections.IEnumerator.get_Current() { }
	// RVA: 0x72AE20 Offset: 0x729620 VA: 0x18072AE20 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: System.IO
internal class FileSystemEnumerableIterator<TSource> : Iterator<TSource> // TypeDefIndex: 488
{
	// Fields
	private SearchResultHandler<TSource> _resultHandler; // 0x0
	private List<Directory.SearchData> searchStack; // 0x0
	private Directory.SearchData searchData; // 0x0
	private string searchCriteria; // 0x0
	private SafeFindHandle _hnd; // 0x0
	private bool needsParentPathDiscoveryDemand; // 0x0
	private bool empty; // 0x0
	private string userPath; // 0x0
	private SearchOption searchOption; // 0x0
	private string fullPath; // 0x0
	private string normalizedSearchPath; // 0x0
	private bool _checkHost; // 0x0

	// Methods
	// RVA: 0x7EC200 Offset: 0x7EAA00 VA: 0x1807EC200
	internal void .ctor(string path, string originalUserPath, string searchPattern, SearchOption searchOption, SearchResultHandler<TSource> resultHandler, bool checkHost) { }
	// RVA: 0x7EC510 Offset: 0x7EAD10 VA: 0x1807EC510
	private void CommonInit() { }
	// RVA: 0x7EC830 Offset: 0x7EB030 VA: 0x1807EC830
	private void .ctor(string fullPath, string normalizedSearchPath, string searchCriteria, string userPath, SearchOption searchOption, SearchResultHandler<TSource> resultHandler, bool checkHost) { }
	// RVA: 0x7ECA70 Offset: 0x7EB270 VA: 0x1807ECA70 Slot: 10
	protected override Iterator<TSource> Clone() { }
	// RVA: 0x7ECB40 Offset: 0x7EB340 VA: 0x1807ECB40 Slot: 11
	protected override void Dispose(bool disposing) { }
	// RVA: 0x7ECC10 Offset: 0x7EB410 VA: 0x1807ECC10 Slot: 12
	public override bool MoveNext() { }
	// RVA: 0x7ED0B0 Offset: 0x7EB8B0 VA: 0x1807ED0B0
	private SearchResult CreateSearchResult(Directory.SearchData localSearchData, Win32Native.WIN32_FIND_DATA findData) { }
	// RVA: 0x7ED1B0 Offset: 0x7EB9B0 VA: 0x1807ED1B0
	private void HandleError(int hr, string path) { }
	// RVA: 0x7ED200 Offset: 0x7EBA00 VA: 0x1807ED200
	private void AddSearchableDirsToStack(Directory.SearchData localSearchData) { }
	// RVA: 0x7ED5F0 Offset: 0x7EBDF0 VA: 0x1807ED5F0
	private static string NormalizeSearchPattern(string searchPattern) { }
	// RVA: 0x7ED780 Offset: 0x7EBF80 VA: 0x1807ED780
	private static string GetNormalizedSearchCriteria(string fullSearchString, string fullPathMod) { }
	// RVA: 0x7ED870 Offset: 0x7EC070 VA: 0x1807ED870
	private static string GetFullSearchString(string fullPath, string searchPattern) { }
}

// Namespace: System.IO
internal abstract class SearchResultHandler<TSource> // TypeDefIndex: 489
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	internal abstract bool IsResultIncluded(SearchResult result) { }
	// RVA: -1 Offset: -1 Slot: 5
	internal abstract TSource CreateObject(SearchResult result) { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	protected void .ctor() { }
}

// Namespace: System.IO
internal class StringResultHandler : SearchResultHandler<string> // TypeDefIndex: 490
{
	// Fields
	private bool _includeFiles; // 0x10
	private bool _includeDirs; // 0x11

	// Methods
	// RVA: 0x38F540 Offset: 0x38DD40 VA: 0x18038F540
	internal void .ctor(bool includeFiles, bool includeDirs) { }
	// RVA: 0x38F5E0 Offset: 0x38DDE0 VA: 0x18038F5E0 Slot: 4
	internal override bool IsResultIncluded(SearchResult result) { }
	// RVA: 0x38F640 Offset: 0x38DE40 VA: 0x18038F640 Slot: 5
	internal override string CreateObject(SearchResult result) { }
}

// Namespace: System.IO
internal sealed class SearchResult // TypeDefIndex: 491
{
	// Fields
	private string fullPath; // 0x10
	private string userPath; // 0x18
	private Win32Native.WIN32_FIND_DATA findData; // 0x20

	// Methods
	// RVA: 0x26C0F0 Offset: 0x26A8F0 VA: 0x18026C0F0
	internal void .ctor(string fullPath, string userPath, Win32Native.WIN32_FIND_DATA findData) { }
}

// Namespace: System.IO
internal static class FileSystemEnumerableHelpers // TypeDefIndex: 492
{
	// Methods
	// RVA: 0x765140 Offset: 0x763940 VA: 0x180765140
	internal static bool IsDir(Win32Native.WIN32_FIND_DATA data) { }
	// RVA: 0x765200 Offset: 0x763A00 VA: 0x180765200
	internal static bool IsFile(Win32Native.WIN32_FIND_DATA data) { }
}

// Namespace: System.IO
[Serializable]
public abstract class FileSystemInfo : MarshalByRefObject, ISerializable // TypeDefIndex: 493
{
	// Fields
	internal MonoIOStat _data; // 0x18
	internal int _dataInitialised; // 0x40
	protected string FullPath; // 0x48
	protected string OriginalPath; // 0x50
	private string _displayPath; // 0x58

	// Properties
	public abstract bool Exists { get; }

	// Methods
	// RVA: 0x765220 Offset: 0x763A20 VA: 0x180765220
	protected void .ctor() { }
	// RVA: 0x7652C0 Offset: 0x763AC0 VA: 0x1807652C0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool get_Exists() { }
	// RVA: 0x7653F0 Offset: 0x763BF0 VA: 0x1807653F0
	public void Refresh() { }
	// RVA: 0x7654E0 Offset: 0x763CE0 VA: 0x1807654E0 Slot: 8
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[Serializable]
public class IOException : SystemException // TypeDefIndex: 494
{
	// Fields
	private string _maybeFullPath; // 0x88

	// Methods
	// RVA: 0x775F50 Offset: 0x774750 VA: 0x180775F50
	public void .ctor() { }
	// RVA: 0x775FE0 Offset: 0x7747E0 VA: 0x180775FE0
	public void .ctor(string message) { }
	// RVA: 0x776000 Offset: 0x774800 VA: 0x180776000
	public void .ctor(string message, int hresult) { }
	// RVA: 0x776030 Offset: 0x774830 VA: 0x180776030
	internal void .ctor(string message, int hresult, string maybeFullPath) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[Serializable]
public class MemoryStream : Stream // TypeDefIndex: 495
{
	// Fields
	private byte[] _buffer; // 0x28
	private int _origin; // 0x30
	private int _position; // 0x34
	private int _length; // 0x38
	private int _capacity; // 0x3C
	private bool _expandable; // 0x40
	private bool _writable; // 0x41
	private bool _exposable; // 0x42
	private bool _isOpen; // 0x43
	private Task<int> _lastReadTask; // 0x48

	// Properties
	public override bool CanRead { get; }
	public override bool CanSeek { get; }
	public override bool CanWrite { get; }
	public virtual int Capacity { get; set; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods
	// RVA: 0x33D760 Offset: 0x33BF60 VA: 0x18033D760
	public void .ctor() { }
	// RVA: 0x33D770 Offset: 0x33BF70 VA: 0x18033D770
	public void .ctor(int capacity) { }
	// RVA: 0x33D880 Offset: 0x33C080 VA: 0x18033D880
	public void .ctor(byte[] buffer) { }
	// RVA: 0x33D990 Offset: 0x33C190 VA: 0x18033D990
	public void .ctor(byte[] buffer, bool writable) { }
	// RVA: 0x33DAA0 Offset: 0x33C2A0 VA: 0x18033DAA0 Slot: 7
	public override bool get_CanRead() { }
	// RVA: 0x33DAA0 Offset: 0x33C2A0 VA: 0x18033DAA0 Slot: 8
	public override bool get_CanSeek() { }
	// RVA: 0x207750 Offset: 0x205F50 VA: 0x180207750 Slot: 9
	public override bool get_CanWrite() { }
	// RVA: 0x33DAB0 Offset: 0x33C2B0 VA: 0x18033DAB0
	private void EnsureWriteable() { }
	// RVA: 0x33DAE0 Offset: 0x33C2E0 VA: 0x18033DAE0 Slot: 14
	protected override void Dispose(bool disposing) { }
	// RVA: 0x33DB20 Offset: 0x33C320 VA: 0x18033DB20
	private bool EnsureCapacity(int value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 15
	public override void Flush() { }
	// RVA: 0x33DC30 Offset: 0x33C430 VA: 0x18033DC30 Slot: 25
	public virtual byte[] GetBuffer() { }
	// RVA: 0x33DCF0 Offset: 0x33C4F0 VA: 0x18033DCF0
	internal int InternalGetPosition() { }
	// RVA: 0x33DD10 Offset: 0x33C510 VA: 0x18033DD10
	internal int InternalReadInt32() { }
	// RVA: 0x33DDF0 Offset: 0x33C5F0 VA: 0x18033DDF0
	internal int InternalEmulateRead(int count) { }
	// RVA: 0x33DE30 Offset: 0x33C630 VA: 0x18033DE30 Slot: 26
	public virtual int get_Capacity() { }
	// RVA: 0x33DE50 Offset: 0x33C650 VA: 0x18033DE50 Slot: 27
	public virtual void set_Capacity(int value) { }
	// RVA: 0x33E000 Offset: 0x33C800 VA: 0x18033E000 Slot: 10
	public override long get_Length() { }
	// RVA: 0x33E020 Offset: 0x33C820 VA: 0x18033E020 Slot: 11
	public override long get_Position() { }
	// RVA: 0x33E040 Offset: 0x33C840 VA: 0x18033E040 Slot: 12
	public override void set_Position(long value) { }
	// RVA: 0x33E170 Offset: 0x33C970 VA: 0x18033E170 Slot: 21
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }
	// RVA: 0x33E460 Offset: 0x33CC60 VA: 0x18033E460 Slot: 22
	public override int ReadByte() { }
	// RVA: 0x33E4C0 Offset: 0x33CCC0 VA: 0x18033E4C0 Slot: 20
	public override long Seek(long offset, SeekOrigin loc) { }
	// RVA: 0x33E720 Offset: 0x33CF20 VA: 0x18033E720 Slot: 28
	public virtual byte[] ToArray() { }
	// RVA: 0x33E880 Offset: 0x33D080 VA: 0x18033E880 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }
	// RVA: 0x33EC10 Offset: 0x33D410 VA: 0x18033EC10 Slot: 24
	public override void WriteByte(byte value) { }
}

// Namespace: System.IO
[Serializable]
public class PathTooLongException : IOException // TypeDefIndex: 496
{
	// Methods
	// RVA: 0x31B910 Offset: 0x31A110 VA: 0x18031B910
	public void .ctor() { }
	// RVA: 0x31B9A0 Offset: 0x31A1A0 VA: 0x18031B9A0
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.IO
[Serializable]
public abstract class Stream : MarshalByRefObject, IDisposable // TypeDefIndex: 497
{
	// Fields
	public static readonly Stream Null; // 0x0
	private Stream.ReadWriteTask _activeReadWriteTask; // 0x18
	private SemaphoreSlim _asyncActiveSemaphore; // 0x20

	// Properties
	public abstract bool CanRead { get; }
	public abstract bool CanSeek { get; }
	public abstract bool CanWrite { get; }
	public abstract long Length { get; }
	public abstract long Position { get; set; }

	// Methods
	// RVA: 0x1EBFB0 Offset: 0x1EA7B0 VA: 0x1801EBFB0
	internal SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized() { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool get_CanRead() { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool get_CanSeek() { }
	// RVA: -1 Offset: -1 Slot: 9
	public abstract bool get_CanWrite() { }
	// RVA: -1 Offset: -1 Slot: 10
	public abstract long get_Length() { }
	// RVA: -1 Offset: -1 Slot: 11
	public abstract long get_Position() { }
	// RVA: -1 Offset: -1 Slot: 12
	public abstract void set_Position(long value) { }
	// RVA: 0x1EC0F0 Offset: 0x1EA8F0 VA: 0x1801EC0F0 Slot: 13
	public virtual void Close() { }
	// RVA: 0x1EC1A0 Offset: 0x1EA9A0 VA: 0x1801EC1A0 Slot: 6
	public void Dispose() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 14
	protected virtual void Dispose(bool disposing) { }
	// RVA: -1 Offset: -1 Slot: 15
	public abstract void Flush() { }
	// RVA: 0x1EC1C0 Offset: 0x1EA9C0 VA: 0x1801EC1C0 Slot: 16
	public virtual IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }
	// RVA: 0x1EC1F0 Offset: 0x1EA9F0 VA: 0x1801EC1F0
	internal IAsyncResult BeginReadInternal(byte[] buffer, int offset, int count, AsyncCallback callback, object state, bool serializeAsynchronously) { }
	// RVA: 0x1EC440 Offset: 0x1EAC40 VA: 0x1801EC440 Slot: 17
	public virtual int EndRead(IAsyncResult asyncResult) { }
	// RVA: 0x1EC6D0 Offset: 0x1EAED0 VA: 0x1801EC6D0 Slot: 18
	public virtual IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }
	// RVA: 0x1EC700 Offset: 0x1EAF00 VA: 0x1801EC700
	internal IAsyncResult BeginWriteInternal(byte[] buffer, int offset, int count, AsyncCallback callback, object state, bool serializeAsynchronously) { }
	// RVA: 0x1EC950 Offset: 0x1EB150 VA: 0x1801EC950
	private void RunReadWriteTaskWhenReady(Task asyncWaiter, Stream.ReadWriteTask readWriteTask) { }
	// RVA: 0x1ECB50 Offset: 0x1EB350 VA: 0x1801ECB50
	private void RunReadWriteTask(Stream.ReadWriteTask readWriteTask) { }
	// RVA: 0x1ECC20 Offset: 0x1EB420 VA: 0x1801ECC20 Slot: 19
	public virtual void EndWrite(IAsyncResult asyncResult) { }
	// RVA: -1 Offset: -1 Slot: 20
	public abstract long Seek(long offset, SeekOrigin origin) { }
	// RVA: -1 Offset: -1 Slot: 21
	public abstract int Read([In] [Out] byte[] buffer, int offset, int count) { }
	// RVA: 0x1ECE80 Offset: 0x1EB680 VA: 0x1801ECE80 Slot: 22
	public virtual int ReadByte() { }
	// RVA: -1 Offset: -1 Slot: 23
	public abstract void Write(byte[] buffer, int offset, int count) { }
	// RVA: 0x1ECF70 Offset: 0x1EB770 VA: 0x1801ECF70 Slot: 24
	public virtual void WriteByte(byte value) { }
	// RVA: 0x1ED040 Offset: 0x1EB840 VA: 0x1801ED040
	internal IAsyncResult BlockingBeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }
	// RVA: 0x1ED160 Offset: 0x1EB960 VA: 0x1801ED160
	internal static int BlockingEndRead(IAsyncResult asyncResult) { }
	// RVA: 0x1ED230 Offset: 0x1EBA30 VA: 0x1801ED230
	internal IAsyncResult BlockingBeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }
	// RVA: 0x1ED350 Offset: 0x1EBB50 VA: 0x1801ED350
	internal static void BlockingEndWrite(IAsyncResult asyncResult) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x1ED420 Offset: 0x1EBC20 VA: 0x1801ED420
	private static void .cctor() { }
}

// Namespace: 
private sealed class Stream.ReadWriteTask : Task<int>, ITaskCompletionAction // TypeDefIndex: 498
{
	// Fields
	internal readonly bool _isRead; // 0x58
	internal Stream _stream; // 0x60
	internal byte[] _buffer; // 0x68
	internal int _offset; // 0x70
	internal int _count; // 0x74
	private AsyncCallback _callback; // 0x78
	private ExecutionContext _context; // 0x80
	private static ContextCallback s_invokeAsyncCallback; // 0x0

	// Methods
	// RVA: 0x276740 Offset: 0x274F40 VA: 0x180276740
	internal void ClearBeginState() { }
	// RVA: 0x276750 Offset: 0x274F50 VA: 0x180276750
	public void .ctor(bool isRead, Func<object, int> function, object state, Stream stream, byte[] buffer, int offset, int count, AsyncCallback callback) { }
	// RVA: 0x2768E0 Offset: 0x2750E0 VA: 0x1802768E0
	private static void InvokeAsyncCallback(object completedTask) { }
	// RVA: 0x2769A0 Offset: 0x2751A0 VA: 0x1802769A0 Slot: 20
	private void System.Threading.Tasks.ITaskCompletionAction.Invoke(Task completingTask) { }
}

// Namespace: 
[Serializable]
private sealed class Stream.NullStream : Stream // TypeDefIndex: 499
{
	// Properties
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override bool CanSeek { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods
	// RVA: 0x2764F0 Offset: 0x274CF0 VA: 0x1802764F0
	internal void .ctor() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 7
	public override bool get_CanRead() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 9
	public override bool get_CanWrite() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 8
	public override bool get_CanSeek() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 10
	public override long get_Length() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 11
	public override long get_Position() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 12
	public override void set_Position(long value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 14
	protected override void Dispose(bool disposing) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 15
	public override void Flush() { }
	// RVA: 0x276580 Offset: 0x274D80 VA: 0x180276580 Slot: 16
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }
	// RVA: 0x276590 Offset: 0x274D90 VA: 0x180276590 Slot: 17
	public override int EndRead(IAsyncResult asyncResult) { }
	// RVA: 0x276660 Offset: 0x274E60 VA: 0x180276660 Slot: 18
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) { }
	// RVA: 0x276670 Offset: 0x274E70 VA: 0x180276670 Slot: 19
	public override void EndWrite(IAsyncResult asyncResult) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 21
	public override int Read([In] [Out] byte[] buffer, int offset, int count) { }
	// RVA: 0x24A4C0 Offset: 0x248CC0 VA: 0x18024A4C0 Slot: 22
	public override int ReadByte() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 23
	public override void Write(byte[] buffer, int offset, int count) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 24
	public override void WriteByte(byte value) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 20
	public override long Seek(long offset, SeekOrigin origin) { }
}

// Namespace: 
internal sealed class Stream.SynchronousAsyncResult : IAsyncResult // TypeDefIndex: 500
{
	// Fields
	private readonly object _stateObject; // 0x10
	private readonly bool _isWrite; // 0x18
	private ManualResetEvent _waitHandle; // 0x20
	private ExceptionDispatchInfo _exceptionInfo; // 0x28
	private bool _endXxxCalled; // 0x30
	private int _bytesRead; // 0x34

	// Properties
	public WaitHandle AsyncWaitHandle { get; }

	// Methods
	// RVA: 0x276B40 Offset: 0x275340 VA: 0x180276B40
	internal void .ctor(int bytesRead, object asyncStateObject) { }
	// RVA: 0x276B50 Offset: 0x275350 VA: 0x180276B50
	internal void .ctor(object asyncStateObject) { }
	// RVA: 0x276B60 Offset: 0x275360 VA: 0x180276B60
	internal void .ctor(Exception ex, object asyncStateObject, bool isWrite) { }
	// RVA: 0x276BB0 Offset: 0x2753B0 VA: 0x180276BB0 Slot: 4
	public WaitHandle get_AsyncWaitHandle() { }
	// RVA: 0x276CF0 Offset: 0x2754F0 VA: 0x180276CF0
	internal void ThrowIfError() { }
	// RVA: 0x1ED160 Offset: 0x1EB960 VA: 0x1801ED160
	internal static int EndRead(IAsyncResult asyncResult) { }
	// RVA: 0x1ED350 Offset: 0x1EBB50 VA: 0x1801ED350
	internal static void EndWrite(IAsyncResult asyncResult) { }
}

// Namespace: 
[Serializable]
private sealed class Stream.SynchronousAsyncResult.<>c // TypeDefIndex: 501
{
	// Fields
	public static readonly Stream.SynchronousAsyncResult.<>c <>9; // 0x0
	public static Func<ManualResetEvent> <>9__12_0; // 0x8

	// Methods
	// RVA: 0x27FDF0 Offset: 0x27E5F0 VA: 0x18027FDF0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x27FE70 Offset: 0x27E670 VA: 0x18027FE70
	internal ManualResetEvent <get_AsyncWaitHandle>b__12_0() { }
}

// Namespace: 
[Serializable]
private sealed class Stream.<>c // TypeDefIndex: 502
{
	// Fields
	public static readonly Stream.<>c <>9; // 0x0
	public static Func<SemaphoreSlim> <>9__4_0; // 0x8
	public static Func<object, int> <>9__39_0; // 0x10
	public static Func<object, int> <>9__46_0; // 0x18
	public static Action<Task, object> <>9__47_0; // 0x20

	// Methods
	// RVA: 0x2760B0 Offset: 0x2748B0 VA: 0x1802760B0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x276130 Offset: 0x274930 VA: 0x180276130
	internal SemaphoreSlim <EnsureAsyncActiveSemaphoreInitialized>b__4_0() { }
	// RVA: 0x2761C0 Offset: 0x2749C0 VA: 0x1802761C0
	internal int <BeginReadInternal>b__39_0(object <p0>) { }
	// RVA: 0x2762F0 Offset: 0x274AF0 VA: 0x1802762F0
	internal int <BeginWriteInternal>b__46_0(object <p0>) { }
	// RVA: 0x276420 Offset: 0x274C20 VA: 0x180276420
	internal void <RunReadWriteTaskWhenReady>b__47_0(Task t, object state) { }
}

// Namespace: System.IO
[Serializable]
public class StreamReader : TextReader // TypeDefIndex: 503
{
	// Fields
	public static readonly StreamReader Null; // 0x0
	private Stream stream; // 0x18
	private Encoding encoding; // 0x20
	private Decoder decoder; // 0x28
	private byte[] byteBuffer; // 0x30
	private char[] charBuffer; // 0x38
	private byte[] _preamble; // 0x40
	private int charPos; // 0x48
	private int charLen; // 0x4C
	private int byteLen; // 0x50
	private int bytePos; // 0x54
	private int _maxCharsPerBuffer; // 0x58
	private bool _detectEncoding; // 0x5C
	private bool _checkPreamble; // 0x5D
	private bool _isBlocked; // 0x5E
	private bool _closable; // 0x5F
	private Task _asyncReadTask; // 0x60

	// Properties
	internal bool LeaveOpen { get; }

	// Methods
	// RVA: 0x1ED530 Offset: 0x1EBD30 VA: 0x1801ED530
	private void CheckAsyncTaskInProgress() { }
	// RVA: 0x1ED600 Offset: 0x1EBE00 VA: 0x1801ED600
	internal void .ctor() { }
	// RVA: 0x1ED690 Offset: 0x1EBE90 VA: 0x1801ED690
	public void .ctor(Stream stream) { }
	// RVA: 0x1ED6E0 Offset: 0x1EBEE0 VA: 0x1801ED6E0
	public void .ctor(Stream stream, bool detectEncodingFromByteOrderMarks) { }
	// RVA: 0x1ED740 Offset: 0x1EBF40 VA: 0x1801ED740
	public void .ctor(Stream stream, Encoding encoding) { }
	// RVA: 0x1ED770 Offset: 0x1EBF70 VA: 0x1801ED770
	public void .ctor(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen) { }
	// RVA: 0x1ED950 Offset: 0x1EC150 VA: 0x1801ED950
	public void .ctor(string path) { }
	// RVA: 0x1ED9A0 Offset: 0x1EC1A0 VA: 0x1801ED9A0
	public void .ctor(string path, bool detectEncodingFromByteOrderMarks) { }
	// RVA: 0x1EDA00 Offset: 0x1EC200 VA: 0x1801EDA00
	public void .ctor(string path, Encoding encoding) { }
	// RVA: 0x1EDA30 Offset: 0x1EC230 VA: 0x1801EDA30
	public void .ctor(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) { }
	// RVA: 0x1EDA60 Offset: 0x1EC260 VA: 0x1801EDA60
	internal void .ctor(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool checkHost) { }
	// RVA: 0x1EDCA0 Offset: 0x1EC4A0 VA: 0x1801EDCA0
	private void Init(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen) { }
	// RVA: 0x1EDDF0 Offset: 0x1EC5F0 VA: 0x1801EDDF0
	internal void Init(Stream stream) { }
	// RVA: 0x1EDE00 Offset: 0x1EC600 VA: 0x1801EDE00 Slot: 7
	protected override void Dispose(bool disposing) { }
	// RVA: 0x1EDED0 Offset: 0x1EC6D0 VA: 0x1801EDED0
	internal bool get_LeaveOpen() { }
	// RVA: 0x1EDEE0 Offset: 0x1EC6E0 VA: 0x1801EDEE0 Slot: 8
	public override int Peek() { }
	// RVA: 0x1EDF70 Offset: 0x1EC770 VA: 0x1801EDF70
	internal bool DataAvailable() { }
	// RVA: 0x1EDF80 Offset: 0x1EC780 VA: 0x1801EDF80 Slot: 9
	public override int Read() { }
	// RVA: 0x1EE010 Offset: 0x1EC810 VA: 0x1801EE010 Slot: 10
	public override int Read([In] [Out] char[] buffer, int index, int count) { }
	// RVA: 0x1EE2C0 Offset: 0x1ECAC0 VA: 0x1801EE2C0 Slot: 11
	public override string ReadToEnd() { }
	// RVA: 0x1EE3F0 Offset: 0x1ECBF0 VA: 0x1801EE3F0
	private void CompressBuffer(int n) { }
	// RVA: 0x1EE470 Offset: 0x1ECC70 VA: 0x1801EE470
	private void DetectEncoding() { }
	// RVA: 0x1EE800 Offset: 0x1ED000 VA: 0x1801EE800
	private bool IsPreamble() { }
	// RVA: 0x1EE900 Offset: 0x1ED100 VA: 0x1801EE900 Slot: 13
	internal virtual int ReadBuffer() { }
	// RVA: 0x1EEAB0 Offset: 0x1ED2B0 VA: 0x1801EEAB0
	private int ReadBuffer(char[] userBuffer, int userOffset, int desiredChars, out bool readToUserBuffer) { }
	// RVA: 0x1EED00 Offset: 0x1ED500 VA: 0x1801EED00 Slot: 12
	public override string ReadLine() { }
	// RVA: 0x1EEF50 Offset: 0x1ED750 VA: 0x1801EEF50
	private static void .cctor() { }
}

// Namespace: 
private class StreamReader.NullStreamReader : StreamReader // TypeDefIndex: 504
{
	// Methods
	// RVA: 0x276D30 Offset: 0x275530 VA: 0x180276D30
	internal void .ctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	protected override void Dispose(bool disposing) { }
	// RVA: 0x24A4C0 Offset: 0x248CC0 VA: 0x18024A4C0 Slot: 8
	public override int Peek() { }
	// RVA: 0x24A4C0 Offset: 0x248CC0 VA: 0x18024A4C0 Slot: 9
	public override int Read() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 10
	public override int Read(char[] buffer, int index, int count) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 12
	public override string ReadLine() { }
	// RVA: 0x276E70 Offset: 0x275670 VA: 0x180276E70 Slot: 11
	public override string ReadToEnd() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 13
	internal override int ReadBuffer() { }
}

// Namespace: System.IO
[Serializable]
public class StreamWriter : TextWriter // TypeDefIndex: 505
{
	// Fields
	public static readonly StreamWriter Null; // 0x0
	private Stream stream; // 0x28
	private Encoding encoding; // 0x30
	private Encoder encoder; // 0x38
	private byte[] byteBuffer; // 0x40
	private char[] charBuffer; // 0x48
	private int charPos; // 0x50
	private int charLen; // 0x54
	private bool autoFlush; // 0x58
	private bool haveWrittenPreamble; // 0x59
	private bool closable; // 0x5A
	private Task _asyncWriteTask; // 0x60
	private static Encoding _UTF8NoBOM; // 0x8

	// Properties
	internal static Encoding UTF8NoBOM { get; }
	public virtual bool AutoFlush { set; }
	internal bool LeaveOpen { get; }

	// Methods
	// RVA: 0x1EF110 Offset: 0x1ED910 VA: 0x1801EF110
	private void CheckAsyncTaskInProgress() { }
	// RVA: 0x1EF1E0 Offset: 0x1ED9E0 VA: 0x1801EF1E0
	internal static Encoding get_UTF8NoBOM() { }
	// RVA: 0x1EF320 Offset: 0x1EDB20 VA: 0x1801EF320
	internal void .ctor() { }
	// RVA: 0x1EF3C0 Offset: 0x1EDBC0 VA: 0x1801EF3C0
	public void .ctor(Stream stream) { }
	// RVA: 0x1EF5B0 Offset: 0x1EDDB0 VA: 0x1801EF5B0
	public void .ctor(Stream stream, Encoding encoding, int bufferSize, bool leaveOpen) { }
	// RVA: 0x1EF790 Offset: 0x1EDF90 VA: 0x1801EF790
	public void .ctor(string path, bool append, Encoding encoding) { }
	// RVA: 0x1EF7C0 Offset: 0x1EDFC0 VA: 0x1801EF7C0
	public void .ctor(string path, bool append, Encoding encoding, int bufferSize) { }
	// RVA: 0x1EF7F0 Offset: 0x1EDFF0 VA: 0x1801EF7F0
	internal void .ctor(string path, bool append, Encoding encoding, int bufferSize, bool checkHost) { }
	// RVA: 0x1EFAD0 Offset: 0x1EE2D0 VA: 0x1801EFAD0
	private void Init(Stream streamArg, Encoding encodingArg, int bufferSize, bool shouldLeaveOpen) { }
	// RVA: 0x1EFC30 Offset: 0x1EE430 VA: 0x1801EFC30
	private static Stream CreateFile(string path, bool append, bool checkHost) { }
	// RVA: 0x1EFD30 Offset: 0x1EE530 VA: 0x1801EFD30 Slot: 8
	protected override void Dispose(bool disposing) { }
	// RVA: 0x1EFE80 Offset: 0x1EE680 VA: 0x1801EFE80 Slot: 9
	public override void Flush() { }
	// RVA: 0x1EFEB0 Offset: 0x1EE6B0 VA: 0x1801EFEB0
	private void Flush(bool flushStream, bool flushEncoder) { }
	// RVA: 0x1F0080 Offset: 0x1EE880 VA: 0x1801F0080 Slot: 20
	public virtual void set_AutoFlush(bool value) { }
	// RVA: 0x1F00C0 Offset: 0x1EE8C0 VA: 0x1801F00C0
	internal bool get_LeaveOpen() { }
	// RVA: 0x1F00D0 Offset: 0x1EE8D0 VA: 0x1801F00D0 Slot: 10
	public override void Write(char value) { }
	// RVA: 0x1F0150 Offset: 0x1EE950 VA: 0x1801F0150 Slot: 11
	public override void Write(char[] buffer) { }
	// RVA: 0x1F0280 Offset: 0x1EEA80 VA: 0x1801F0280 Slot: 12
	public override void Write(char[] buffer, int index, int count) { }
	// RVA: 0x1F0520 Offset: 0x1EED20 VA: 0x1801F0520 Slot: 13
	public override void Write(string value) { }
	// RVA: 0x1F05F0 Offset: 0x1EEDF0 VA: 0x1801F05F0
	private static void .cctor() { }
}

// Namespace: System.IO
[Serializable]
public class StringReader : TextReader // TypeDefIndex: 506
{
	// Fields
	private string _s; // 0x18
	private int _pos; // 0x20
	private int _length; // 0x24

	// Methods
	// RVA: 0x38F080 Offset: 0x38D880 VA: 0x18038F080
	public void .ctor(string s) { }
	// RVA: 0x38F160 Offset: 0x38D960 VA: 0x18038F160 Slot: 7
	protected override void Dispose(bool disposing) { }
	// RVA: 0x38F170 Offset: 0x38D970 VA: 0x18038F170 Slot: 8
	public override int Peek() { }
	// RVA: 0x38F1B0 Offset: 0x38D9B0 VA: 0x18038F1B0 Slot: 9
	public override int Read() { }
	// RVA: 0x38F1F0 Offset: 0x38D9F0 VA: 0x18038F1F0 Slot: 10
	public override int Read([In] [Out] char[] buffer, int index, int count) { }
	// RVA: 0x38F400 Offset: 0x38DC00 VA: 0x18038F400 Slot: 11
	public override string ReadToEnd() { }
	// RVA: 0x38F440 Offset: 0x38DC40 VA: 0x18038F440 Slot: 12
	public override string ReadLine() { }
}

// Namespace: System.IO
[Serializable]
public abstract class TextReader : MarshalByRefObject, IDisposable // TypeDefIndex: 507
{
	// Fields
	private static Func<object, string> _ReadLineDelegate; // 0x0
	private static Func<object, int> _ReadDelegate; // 0x8
	public static readonly TextReader Null; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x3A5800 Offset: 0x3A4000 VA: 0x1803A5800 Slot: 6
	public void Dispose() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x24A4C0 Offset: 0x248CC0 VA: 0x18024A4C0 Slot: 8
	public virtual int Peek() { }
	// RVA: 0x24A4C0 Offset: 0x248CC0 VA: 0x18024A4C0 Slot: 9
	public virtual int Read() { }
	// RVA: 0x3A58B0 Offset: 0x3A40B0 VA: 0x1803A58B0 Slot: 10
	public virtual int Read([In] [Out] char[] buffer, int index, int count) { }
	// RVA: 0x3A5AC0 Offset: 0x3A42C0 VA: 0x1803A5AC0 Slot: 11
	public virtual string ReadToEnd() { }
	// RVA: 0x3A5BF0 Offset: 0x3A43F0 VA: 0x1803A5BF0 Slot: 12
	public virtual string ReadLine() { }
	// RVA: 0x3A5D90 Offset: 0x3A4590 VA: 0x1803A5D90
	public static TextReader Synchronized(TextReader reader) { }
	// RVA: 0x3A5F00 Offset: 0x3A4700 VA: 0x1803A5F00
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class TextReader.NullTextReader : TextReader // TypeDefIndex: 508
{
	// Methods
	// RVA: 0x278400 Offset: 0x276C00 VA: 0x180278400
	public void .ctor() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 10
	public override int Read(char[] buffer, int index, int count) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 12
	public override string ReadLine() { }
}

// Namespace: 
[Serializable]
internal sealed class TextReader.SyncTextReader : TextReader // TypeDefIndex: 509
{
	// Fields
	internal TextReader _in; // 0x18

	// Methods
	// RVA: 0x278490 Offset: 0x276C90 VA: 0x180278490
	internal void .ctor(TextReader t) { }
	// RVA: 0x278530 Offset: 0x276D30 VA: 0x180278530 Slot: 7
	protected override void Dispose(bool disposing) { }
	// RVA: 0x1E0E30 Offset: 0x1DF630 VA: 0x1801E0E30 Slot: 8
	public override int Peek() { }
	// RVA: 0x2785D0 Offset: 0x276DD0 VA: 0x1802785D0 Slot: 9
	public override int Read() { }
	// RVA: 0x278600 Offset: 0x276E00 VA: 0x180278600 Slot: 10
	public override int Read([In] [Out] char[] buffer, int index, int count) { }
	// RVA: 0x278630 Offset: 0x276E30 VA: 0x180278630 Slot: 12
	public override string ReadLine() { }
	// RVA: 0x278660 Offset: 0x276E60 VA: 0x180278660 Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: 
[Serializable]
private sealed class TextReader.<>c // TypeDefIndex: 510
{
	// Fields
	public static readonly TextReader.<>c <>9; // 0xABFA3

	// Methods
	// RVA: 0x278180 Offset: 0x276980 VA: 0x180278180
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x278200 Offset: 0x276A00 VA: 0x180278200
	internal string <.cctor>b__22_0(object state) { }
	// RVA: 0x278310 Offset: 0x276B10 VA: 0x180278310
	internal int <.cctor>b__22_1(object state) { }
}

// Namespace: System.IO
[Serializable]
public abstract class TextWriter : MarshalByRefObject, IDisposable // TypeDefIndex: 511
{
	// Fields
	public static readonly TextWriter Null; // 0x0
	private static Action<object> _WriteCharDelegate; // 0x8
	private static Action<object> _WriteStringDelegate; // 0x10
	private static Action<object> _WriteCharArrayRangeDelegate; // 0x18
	private static Action<object> _WriteLineCharDelegate; // 0x20
	private static Action<object> _WriteLineStringDelegate; // 0x28
	private static Action<object> _WriteLineCharArrayRangeDelegate; // 0x30
	private static Action<object> _FlushDelegate; // 0x38
	protected char[] CoreNewLine; // 0x18
	private IFormatProvider InternalFormatProvider; // 0x20

	// Properties
	private static string InitialNewLine { get; }
	public virtual IFormatProvider FormatProvider { get; }

	// Methods
	// RVA: 0x3A60C0 Offset: 0x3A48C0 VA: 0x1803A60C0
	private static string get_InitialNewLine() { }
	// RVA: 0x3A60D0 Offset: 0x3A48D0 VA: 0x1803A60D0
	protected void .ctor() { }
	// RVA: 0x3A6190 Offset: 0x3A4990 VA: 0x1803A6190
	protected void .ctor(IFormatProvider formatProvider) { }
	// RVA: 0x3A6250 Offset: 0x3A4A50 VA: 0x1803A6250 Slot: 7
	public virtual IFormatProvider get_FormatProvider() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 8
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x3A6290 Offset: 0x3A4A90 VA: 0x1803A6290 Slot: 6
	public void Dispose() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 9
	public virtual void Flush() { }
	// RVA: 0x3A6340 Offset: 0x3A4B40 VA: 0x1803A6340
	public static TextWriter Synchronized(TextWriter writer) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 10
	public virtual void Write(char value) { }
	// RVA: 0x3A64D0 Offset: 0x3A4CD0 VA: 0x1803A64D0 Slot: 11
	public virtual void Write(char[] buffer) { }
	// RVA: 0x3A6500 Offset: 0x3A4D00 VA: 0x1803A6500 Slot: 12
	public virtual void Write(char[] buffer, int index, int count) { }
	// RVA: 0x3A6710 Offset: 0x3A4F10 VA: 0x1803A6710 Slot: 13
	public virtual void Write(string value) { }
	// RVA: 0x3A6750 Offset: 0x3A4F50 VA: 0x1803A6750 Slot: 14
	public virtual void WriteLine() { }
	// RVA: 0x3A6770 Offset: 0x3A4F70 VA: 0x1803A6770 Slot: 15
	public virtual void WriteLine(char value) { }
	// RVA: 0x3A67B0 Offset: 0x3A4FB0 VA: 0x1803A67B0 Slot: 16
	public virtual void WriteLine(char[] buffer, int index, int count) { }
	// RVA: 0x3A67F0 Offset: 0x3A4FF0 VA: 0x1803A67F0 Slot: 17
	public virtual void WriteLine(string value) { }
	// RVA: 0x3A6AA0 Offset: 0x3A52A0 VA: 0x1803A6AA0 Slot: 18
	public virtual void WriteLine(string format, object arg0) { }
	// RVA: 0x3A6B50 Offset: 0x3A5350 VA: 0x1803A6B50 Slot: 19
	public virtual void WriteLine(string format, object arg0, object arg1) { }
	// RVA: 0x3A6C00 Offset: 0x3A5400 VA: 0x1803A6C00
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class TextWriter.NullTextWriter : TextWriter // TypeDefIndex: 512
{
	// Methods
	// RVA: 0x278D80 Offset: 0x277580 VA: 0x180278D80
	internal void .ctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 12
	public override void Write(char[] buffer, int index, int count) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 13
	public override void Write(string value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 14
	public override void WriteLine() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 17
	public override void WriteLine(string value) { }
}

// Namespace: 
[Serializable]
internal sealed class TextWriter.SyncTextWriter : TextWriter, IDisposable // TypeDefIndex: 513
{
	// Fields
	private TextWriter _out; // 0x28

	// Properties
	public override IFormatProvider FormatProvider { get; }

	// Methods
	// RVA: 0x278E50 Offset: 0x277650 VA: 0x180278E50
	internal void .ctor(TextWriter t) { }
	// RVA: 0x278F20 Offset: 0x277720 VA: 0x180278F20 Slot: 7
	public override IFormatProvider get_FormatProvider() { }
	// RVA: 0x278F50 Offset: 0x277750 VA: 0x180278F50 Slot: 8
	protected override void Dispose(bool disposing) { }
	// RVA: 0x278FF0 Offset: 0x2777F0 VA: 0x180278FF0 Slot: 9
	public override void Flush() { }
	// RVA: 0x279020 Offset: 0x277820 VA: 0x180279020 Slot: 10
	public override void Write(char value) { }
	// RVA: 0x279050 Offset: 0x277850 VA: 0x180279050 Slot: 11
	public override void Write(char[] buffer) { }
	// RVA: 0x279080 Offset: 0x277880 VA: 0x180279080 Slot: 12
	public override void Write(char[] buffer, int index, int count) { }
	// RVA: 0x2790B0 Offset: 0x2778B0 VA: 0x1802790B0 Slot: 13
	public override void Write(string value) { }
	// RVA: 0x2790E0 Offset: 0x2778E0 VA: 0x1802790E0 Slot: 14
	public override void WriteLine() { }
	// RVA: 0x279110 Offset: 0x277910 VA: 0x180279110 Slot: 15
	public override void WriteLine(char value) { }
	// RVA: 0x279140 Offset: 0x277940 VA: 0x180279140 Slot: 16
	public override void WriteLine(char[] buffer, int index, int count) { }
	// RVA: 0x279170 Offset: 0x277970 VA: 0x180279170 Slot: 17
	public override void WriteLine(string value) { }
	// RVA: 0x2791A0 Offset: 0x2779A0 VA: 0x1802791A0 Slot: 18
	public override void WriteLine(string format, object arg0) { }
	// RVA: 0x2791D0 Offset: 0x2779D0 VA: 0x1802791D0 Slot: 19
	public override void WriteLine(string format, object arg0, object arg1) { }
}

// Namespace: 
[Serializable]
private sealed class TextWriter.<>c // TypeDefIndex: 514
{
	// Fields
	public static readonly TextWriter.<>c <>9; // 0xA1D850

	// Methods
	// RVA: 0x278690 Offset: 0x276E90 VA: 0x180278690
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x278710 Offset: 0x276F10 VA: 0x180278710
	internal void <.cctor>b__73_0(object state) { }
	// RVA: 0x2787F0 Offset: 0x276FF0 VA: 0x1802787F0
	internal void <.cctor>b__73_1(object state) { }
	// RVA: 0x2788D0 Offset: 0x2770D0 VA: 0x1802788D0
	internal void <.cctor>b__73_2(object state) { }
	// RVA: 0x2789C0 Offset: 0x2771C0 VA: 0x1802789C0
	internal void <.cctor>b__73_3(object state) { }
	// RVA: 0x278AA0 Offset: 0x2772A0 VA: 0x180278AA0
	internal void <.cctor>b__73_4(object state) { }
	// RVA: 0x278B80 Offset: 0x277380 VA: 0x180278B80
	internal void <.cctor>b__73_5(object state) { }
	// RVA: 0x278C70 Offset: 0x277470 VA: 0x180278C70
	internal void <.cctor>b__73_6(object state) { }
}

// Namespace: System.IO
internal static class PathInternal // TypeDefIndex: 515
{
	// Methods
	// RVA: 0x31B840 Offset: 0x31A040 VA: 0x18031B840
	public static bool HasIllegalCharacters(string path, bool checkAdditional) { }
}

// Namespace: System.IO
[Serializable]
public sealed class DirectoryInfo : FileSystemInfo // TypeDefIndex: 516
{
	// Fields
	private string current; // 0x60
	private string parent; // 0x68

	// Properties
	public override bool Exists { get; }
	public DirectoryInfo Parent { get; }

	// Methods
	// RVA: 0x4747D0 Offset: 0x472FD0 VA: 0x1804747D0
	public void .ctor(string path) { }
	// RVA: 0x4747E0 Offset: 0x472FE0 VA: 0x1804747E0
	internal void .ctor(string path, bool simpleOriginalPath) { }
	// RVA: 0x474950 Offset: 0x473150 VA: 0x180474950
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x474A80 Offset: 0x473280 VA: 0x180474A80
	private void Initialize() { }
	// RVA: 0x474DB0 Offset: 0x4735B0 VA: 0x180474DB0 Slot: 7
	public override bool get_Exists() { }
	// RVA: 0x474EC0 Offset: 0x4736C0 VA: 0x180474EC0
	public DirectoryInfo get_Parent() { }
	// RVA: 0x474F70 Offset: 0x473770 VA: 0x180474F70
	public void Create() { }
	// RVA: 0x474F80 Offset: 0x473780 VA: 0x180474F80
	public DirectoryInfo[] GetDirectories() { }
	// RVA: 0x475000 Offset: 0x473800 VA: 0x180475000
	public DirectoryInfo[] GetDirectories(string searchPattern) { }
	// RVA: 0x1E31F0 Offset: 0x1E19F0 VA: 0x1801E31F0 Slot: 3
	public override string ToString() { }
	// RVA: 0x4752E0 Offset: 0x473AE0 VA: 0x1804752E0
	internal void CheckPath(string path) { }
}

// Namespace: System.IO
public static class File // TypeDefIndex: 517
{
	// Methods
	// RVA: 0x75F6B0 Offset: 0x75DEB0 VA: 0x18075F6B0
	public static FileStream Create(string path) { }
	// RVA: 0x75F770 Offset: 0x75DF70 VA: 0x18075F770
	public static FileStream Create(string path, int bufferSize) { }
	// RVA: 0x75F840 Offset: 0x75E040 VA: 0x18075F840
	public static void Delete(string path) { }
	// RVA: 0x75FB20 Offset: 0x75E320 VA: 0x18075FB20
	public static bool Exists(string path) { }
	// RVA: 0x75FCD0 Offset: 0x75E4D0 VA: 0x18075FCD0
	public static FileStream OpenRead(string path) { }
	// RVA: 0x75FDA0 Offset: 0x75E5A0 VA: 0x18075FDA0
	internal static int FillAttributeInfo(string path, ref MonoIOStat data, bool tryagain, bool returnErrorOnNotFound) { }
}

// Namespace: System.IO
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum FileAccess // TypeDefIndex: 518
{
	// Fields
	public int value__; // 0x0
	public const FileAccess Read = 1; // 0x0
	public const FileAccess Write = 2; // 0x0
	public const FileAccess ReadWrite = 3; // 0x0
}

// Namespace: System.IO
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum FileAttributes // TypeDefIndex: 519
{
	// Fields
	public int value__; // 0x0
	public const FileAttributes Archive = 32; // 0x0
	public const FileAttributes Compressed = 2048; // 0x0
	public const FileAttributes Device = 64; // 0x0
	public const FileAttributes Directory = 16; // 0x0
	public const FileAttributes Encrypted = 16384; // 0x0
	public const FileAttributes Hidden = 2; // 0x0
	public const FileAttributes Normal = 128; // 0x0
	public const FileAttributes NotContentIndexed = 8192; // 0x0
	public const FileAttributes Offline = 4096; // 0x0
	public const FileAttributes ReadOnly = 1; // 0x0
	public const FileAttributes ReparsePoint = 1024; // 0x0
	public const FileAttributes SparseFile = 512; // 0x0
	public const FileAttributes System = 4; // 0x0
	public const FileAttributes Temporary = 256; // 0x0
	public const FileAttributes IntegrityStream = 32768; // 0x0
	public const FileAttributes NoScrubData = 131072; // 0x0
}

// Namespace: System.IO
[Serializable]
public enum FileMode // TypeDefIndex: 520
{
	// Fields
	public int value__; // 0x0
	public const FileMode CreateNew = 1; // 0x0
	public const FileMode Create = 2; // 0x0
	public const FileMode Open = 3; // 0x0
	public const FileMode OpenOrCreate = 4; // 0x0
	public const FileMode Truncate = 5; // 0x0
	public const FileMode Append = 6; // 0x0
}

// Namespace: System.IO
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum FileOptions // TypeDefIndex: 521
{
	// Fields
	public int value__; // 0x0
	public const FileOptions None = 0; // 0x0
	public const FileOptions Encrypted = 16384; // 0x0
	public const FileOptions DeleteOnClose = 67108864; // 0x0
	public const FileOptions SequentialScan = 134217728; // 0x0
	public const FileOptions RandomAccess = 268435456; // 0x0
	public const FileOptions Asynchronous = 1073741824; // 0x0
	public const FileOptions WriteThrough = -2147483648; // 0x0
}

// Namespace: System.IO
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum FileShare // TypeDefIndex: 522
{
	// Fields
	public int value__; // 0x0
	public const FileShare None = 0; // 0x0
	public const FileShare Read = 1; // 0x0
	public const FileShare Write = 2; // 0x0
	public const FileShare ReadWrite = 3; // 0x0
	public const FileShare Delete = 4; // 0x0
	public const FileShare Inheritable = 16; // 0x0
}

// Namespace: System.IO
public class FileStream : Stream // TypeDefIndex: 523
{
	// Fields
	private static byte[] buf_recycle; // 0x0
	private static readonly object buf_recycle_lock; // 0x8
	private byte[] buf; // 0x28
	private string name; // 0x30
	private SafeFileHandle safeHandle; // 0x38
	private bool isExposed; // 0x40
	private long append_startpos; // 0x48
	private FileAccess access; // 0x50
	private bool owner; // 0x54
	private bool async; // 0x55
	private bool canseek; // 0x56
	private bool anonymous; // 0x57
	private bool buf_dirty; // 0x58
	private int buf_size; // 0x5C
	private int buf_length; // 0x60
	private int buf_offset; // 0x64
	private long buf_start; // 0x68

	// Properties
	public override bool CanRead { get; }
	public override bool CanWrite { get; }
	public override bool CanSeek { get; }
	public override long Length { get; }
	public override long Position { get; set; }

	// Methods
	// RVA: 0x7610A0 Offset: 0x75F8A0 VA: 0x1807610A0
	internal void .ctor(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper) { }
	// RVA: 0x761230 Offset: 0x75FA30 VA: 0x180761230
	public void .ctor(string path, FileMode mode, FileAccess access, FileShare share) { }
	// RVA: 0x761260 Offset: 0x75FA60 VA: 0x180761260
	public void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize) { }
	// RVA: 0x7612A0 Offset: 0x75FAA0 VA: 0x1807612A0
	internal void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options, string msgPath, bool bFromProxy, bool useLongPath = False, bool checkHost = False) { }
	// RVA: 0x7612C0 Offset: 0x75FAC0 VA: 0x1807612C0
	internal void .ctor(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool anonymous, FileOptions options) { }
	// RVA: 0x761B50 Offset: 0x760350 VA: 0x180761B50
	private void Init(SafeFileHandle safeHandle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper) { }
	// RVA: 0x761EA0 Offset: 0x7606A0 VA: 0x180761EA0 Slot: 7
	public override bool get_CanRead() { }
	// RVA: 0x761EB0 Offset: 0x7606B0 VA: 0x180761EB0 Slot: 9
	public override bool get_CanWrite() { }
	// RVA: 0x761ED0 Offset: 0x7606D0 VA: 0x180761ED0 Slot: 8
	public override bool get_CanSeek() { }
	// RVA: 0x761EE0 Offset: 0x7606E0 VA: 0x180761EE0 Slot: 10
	public override long get_Length() { }
	// RVA: 0x762090 Offset: 0x760890 VA: 0x180762090 Slot: 11
	public override long get_Position() { }
	// RVA: 0x762250 Offset: 0x760A50 VA: 0x180762250 Slot: 12
	public override void set_Position(long value) { }
	// RVA: 0x762330 Offset: 0x760B30 VA: 0x180762330
	private void ExposeHandle() { }
	// RVA: 0x762360 Offset: 0x760B60 VA: 0x180762360 Slot: 22
	public override int ReadByte() { }
	// RVA: 0x762520 Offset: 0x760D20 VA: 0x180762520 Slot: 24
	public override void WriteByte(byte value) { }
	// RVA: 0x7626D0 Offset: 0x760ED0 VA: 0x1807626D0 Slot: 21
	public override int Read([In] [Out] byte[] array, int offset, int count) { }
	// RVA: 0x762A10 Offset: 0x761210 VA: 0x180762A10
	private int ReadInternal(byte[] dest, int offset, int count) { }
	// RVA: 0x762AE0 Offset: 0x7612E0 VA: 0x180762AE0 Slot: 16
	public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject) { }
	// RVA: 0x762E30 Offset: 0x761630 VA: 0x180762E30 Slot: 17
	public override int EndRead(IAsyncResult asyncResult) { }
	// RVA: 0x763030 Offset: 0x761830 VA: 0x180763030 Slot: 23
	public override void Write(byte[] array, int offset, int count) { }
	// RVA: 0x7632B0 Offset: 0x761AB0 VA: 0x1807632B0
	private void WriteInternal(byte[] src, int offset, int count) { }
	// RVA: 0x763540 Offset: 0x761D40 VA: 0x180763540 Slot: 18
	public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject) { }
	// RVA: 0x763980 Offset: 0x762180 VA: 0x180763980 Slot: 19
	public override void EndWrite(IAsyncResult asyncResult) { }
	// RVA: 0x763B50 Offset: 0x762350 VA: 0x180763B50 Slot: 20
	public override long Seek(long offset, SeekOrigin origin) { }
	// RVA: 0x763E10 Offset: 0x762610 VA: 0x180763E10 Slot: 15
	public override void Flush() { }
	// RVA: 0x763ED0 Offset: 0x7626D0 VA: 0x180763ED0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x763F50 Offset: 0x762750 VA: 0x180763F50 Slot: 14
	protected override void Dispose(bool disposing) { }
	// RVA: 0x7642F0 Offset: 0x762AF0 VA: 0x1807642F0
	private int ReadSegment(byte[] dest, int dest_offset, int count) { }
	// RVA: 0x764440 Offset: 0x762C40 VA: 0x180764440
	private int WriteSegment(byte[] src, int src_offset, int count) { }
	// RVA: 0x7644B0 Offset: 0x762CB0 VA: 0x1807644B0
	private void FlushBuffer() { }
	// RVA: 0x7646E0 Offset: 0x762EE0 VA: 0x1807646E0
	private void FlushBufferIfDirty() { }
	// RVA: 0x7646F0 Offset: 0x762EF0 VA: 0x1807646F0
	private void RefillBuffer() { }
	// RVA: 0x764730 Offset: 0x762F30 VA: 0x180764730
	private int ReadData(SafeHandle safeHandle, byte[] buf, int offset, int count) { }
	// RVA: 0x7648A0 Offset: 0x7630A0 VA: 0x1807648A0
	private void InitBuffer(int size, bool isZeroSize) { }
	// RVA: 0x764B60 Offset: 0x763360 VA: 0x180764B60
	private string GetSecureFileName(string filename) { }
	// RVA: 0x764C30 Offset: 0x763430 VA: 0x180764C30
	private string GetSecureFileName(string filename, bool full) { }
	// RVA: 0x764D30 Offset: 0x763530 VA: 0x180764D30
	private static void .cctor() { }
}

// Namespace: 
private sealed class FileStream.ReadDelegate : MulticastDelegate // TypeDefIndex: 524
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26EA50 Offset: 0x26D250 VA: 0x18026EA50 Slot: 12
	public virtual int Invoke(byte[] buffer, int offset, int count) { }
	// RVA: 0x26EEC0 Offset: 0x26D6C0 VA: 0x18026EEC0 Slot: 13
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }
	// RVA: 0x26EFA0 Offset: 0x26D7A0 VA: 0x18026EFA0 Slot: 14
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private sealed class FileStream.WriteDelegate : MulticastDelegate // TypeDefIndex: 525
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26EFE0 Offset: 0x26D7E0 VA: 0x18026EFE0 Slot: 12
	public virtual void Invoke(byte[] buffer, int offset, int count) { }
	// RVA: 0x26F450 Offset: 0x26DC50 VA: 0x18026F450 Slot: 13
	public virtual IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.IO
internal class FileStreamAsyncResult : IAsyncResult // TypeDefIndex: 526
{
	// Fields
	private object state; // 0x10
	private ManualResetEvent wh; // 0x18
	private AsyncCallback cb; // 0x20
	public int Count; // 0x28
	public int OriginalCount; // 0x2C
	public int BytesRead; // 0x30
	private AsyncCallback realcb; // 0x38

	// Properties
	public WaitHandle AsyncWaitHandle { get; }

	// Methods
	// RVA: 0x764DB0 Offset: 0x7635B0 VA: 0x180764DB0
	public void .ctor(AsyncCallback cb, object state) { }
	// RVA: 0x764EA0 Offset: 0x7636A0 VA: 0x180764EA0
	private static void CBWrapper(IAsyncResult ares) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	public WaitHandle get_AsyncWaitHandle() { }
}

// Namespace: System.IO
internal enum MonoFileType // TypeDefIndex: 527
{
	// Fields
	public int value__; // 0x0
	public const MonoFileType Unknown = 0; // 0x0
	public const MonoFileType Disk = 1; // 0x0
	public const MonoFileType Char = 2; // 0x0
	public const MonoFileType Pipe = 3; // 0x0
	public const MonoFileType Remote = 32768; // 0x0
}

// Namespace: System.IO
internal static class MonoIO // TypeDefIndex: 528
{
	// Fields
	public static readonly IntPtr InvalidHandle; // 0x0
	private static bool dump_handles; // 0x8

	// Properties
	public static IntPtr ConsoleOutput { get; }
	public static IntPtr ConsoleInput { get; }
	public static IntPtr ConsoleError { get; }
	public static char VolumeSeparatorChar { get; }
	public static char DirectorySeparatorChar { get; }
	public static char AltDirectorySeparatorChar { get; }
	public static char PathSeparator { get; }

	// Methods
	// RVA: 0x73FA90 Offset: 0x73E290 VA: 0x18073FA90
	public static Exception GetException(MonoIOError error) { }
	// RVA: 0x73FBC0 Offset: 0x73E3C0 VA: 0x18073FBC0
	public static Exception GetException(string path, MonoIOError error) { }
	// RVA: 0x7401F0 Offset: 0x73E9F0 VA: 0x1807401F0
	private static bool CreateDirectory(char* path, out MonoIOError error) { }
	// RVA: 0x740270 Offset: 0x73EA70 VA: 0x180740270
	public static bool CreateDirectory(string path, out MonoIOError error) { }
	// RVA: 0x740380 Offset: 0x73EB80 VA: 0x180740380
	private static bool RemoveDirectory(char* path, out MonoIOError error) { }
	// RVA: 0x740400 Offset: 0x73EC00 VA: 0x180740400
	public static bool RemoveDirectory(string path, out MonoIOError error) { }
	// RVA: 0x740510 Offset: 0x73ED10 VA: 0x180740510
	public static string GetCurrentDirectory(out MonoIOError error) { }
	// RVA: 0x7405A0 Offset: 0x73EDA0 VA: 0x1807405A0
	private static bool DeleteFile(char* path, out MonoIOError error) { }
	// RVA: 0x740620 Offset: 0x73EE20 VA: 0x180740620
	public static bool DeleteFile(string path, out MonoIOError error) { }
	// RVA: 0x740730 Offset: 0x73EF30 VA: 0x180740730
	private static FileAttributes GetFileAttributes(char* path, out MonoIOError error) { }
	// RVA: 0x7407B0 Offset: 0x73EFB0 VA: 0x1807407B0
	public static FileAttributes GetFileAttributes(string path, out MonoIOError error) { }
	// RVA: 0x7408C0 Offset: 0x73F0C0 VA: 0x1807408C0
	private static MonoFileType GetFileType(IntPtr handle, out MonoIOError error) { }
	// RVA: 0x7408D0 Offset: 0x73F0D0 VA: 0x1807408D0
	public static MonoFileType GetFileType(SafeHandle safeHandle, out MonoIOError error) { }
	// RVA: 0x740A30 Offset: 0x73F230 VA: 0x180740A30
	private static IntPtr FindFirstFile(char* pathWithPattern, out string fileName, out int fileAttr, out int error) { }
	// RVA: 0x740A40 Offset: 0x73F240 VA: 0x180740A40
	public static IntPtr FindFirstFile(string pathWithPattern, out string fileName, out int fileAttr, out int error) { }
	// RVA: 0x740B10 Offset: 0x73F310 VA: 0x180740B10
	public static bool FindNextFile(IntPtr hnd, out string fileName, out int fileAttr, out int error) { }
	// RVA: 0x740B20 Offset: 0x73F320 VA: 0x180740B20
	public static bool FindCloseFile(IntPtr hnd) { }
	// RVA: 0x740B80 Offset: 0x73F380 VA: 0x180740B80
	public static bool ExistsFile(string path, out MonoIOError error) { }
	// RVA: 0x740C40 Offset: 0x73F440 VA: 0x180740C40
	public static bool ExistsDirectory(string path, out MonoIOError error) { }
	// RVA: 0x740D10 Offset: 0x73F510 VA: 0x180740D10
	public static bool ExistsSymlink(string path, out MonoIOError error) { }
	// RVA: 0x740DD0 Offset: 0x73F5D0 VA: 0x180740DD0
	private static bool GetFileStat(char* path, out MonoIOStat stat, out MonoIOError error) { }
	// RVA: 0x740F00 Offset: 0x73F700 VA: 0x180740F00
	public static bool GetFileStat(string path, out MonoIOStat stat, out MonoIOError error) { }
	// RVA: 0x7410D0 Offset: 0x73F8D0 VA: 0x1807410D0
	private static IntPtr Open(char* filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error) { }
	// RVA: 0x741180 Offset: 0x73F980 VA: 0x180741180
	public static IntPtr Open(string filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error) { }
	// RVA: 0x7412D0 Offset: 0x73FAD0 VA: 0x1807412D0
	public static bool Close(IntPtr handle, out MonoIOError error) { }
	// RVA: 0x741310 Offset: 0x73FB10 VA: 0x180741310
	private static int Read(IntPtr handle, byte[] dest, int dest_offset, int count, out MonoIOError error) { }
	// RVA: 0x7413A0 Offset: 0x73FBA0 VA: 0x1807413A0
	public static int Read(SafeHandle safeHandle, byte[] dest, int dest_offset, int count, out MonoIOError error) { }
	// RVA: 0x741580 Offset: 0x73FD80 VA: 0x180741580
	private static int Write(IntPtr handle, [In] byte[] src, int src_offset, int count, out MonoIOError error) { }
	// RVA: 0x7415B0 Offset: 0x73FDB0 VA: 0x1807415B0
	public static int Write(SafeHandle safeHandle, byte[] src, int src_offset, int count, out MonoIOError error) { }
	// RVA: 0x741750 Offset: 0x73FF50 VA: 0x180741750
	private static long Seek(IntPtr handle, long offset, SeekOrigin origin, out MonoIOError error) { }
	// RVA: 0x741790 Offset: 0x73FF90 VA: 0x180741790
	public static long Seek(SafeHandle safeHandle, long offset, SeekOrigin origin, out MonoIOError error) { }
	// RVA: 0x741930 Offset: 0x740130 VA: 0x180741930
	private static long GetLength(IntPtr handle, out MonoIOError error) { }
	// RVA: 0x741970 Offset: 0x740170 VA: 0x180741970
	public static long GetLength(SafeHandle safeHandle, out MonoIOError error) { }
	// RVA: 0x741AF0 Offset: 0x7402F0 VA: 0x180741AF0
	public static IntPtr get_ConsoleOutput() { }
	// RVA: 0x741B00 Offset: 0x740300 VA: 0x180741B00
	public static IntPtr get_ConsoleInput() { }
	// RVA: 0x741B10 Offset: 0x740310 VA: 0x180741B10
	public static IntPtr get_ConsoleError() { }
	// RVA: 0x741B20 Offset: 0x740320 VA: 0x180741B20
	public static char get_VolumeSeparatorChar() { }
	// RVA: 0x741B30 Offset: 0x740330 VA: 0x180741B30
	public static char get_DirectorySeparatorChar() { }
	// RVA: 0x741B40 Offset: 0x740340 VA: 0x180741B40
	public static char get_AltDirectorySeparatorChar() { }
	// RVA: 0x741B50 Offset: 0x740350 VA: 0x180741B50
	public static char get_PathSeparator() { }
	// RVA: 0x2644A0 Offset: 0x262CA0 VA: 0x1802644A0
	private static void DumpHandles() { }
	// RVA: 0x741B60 Offset: 0x740360 VA: 0x180741B60
	public static bool RemapPath(string path, out string newPath) { }
	// RVA: 0x741B70 Offset: 0x740370 VA: 0x180741B70
	private static void .cctor() { }
}

// Namespace: System.IO
internal enum MonoIOError // TypeDefIndex: 529
{
	// Fields
	public int value__; // 0x0
	public const MonoIOError ERROR_SUCCESS = 0; // 0x0
	public const MonoIOError ERROR_FILE_NOT_FOUND = 2; // 0x0
	public const MonoIOError ERROR_PATH_NOT_FOUND = 3; // 0x0
	public const MonoIOError ERROR_TOO_MANY_OPEN_FILES = 4; // 0x0
	public const MonoIOError ERROR_ACCESS_DENIED = 5; // 0x0
	public const MonoIOError ERROR_INVALID_HANDLE = 6; // 0x0
	public const MonoIOError ERROR_INVALID_DRIVE = 15; // 0x0
	public const MonoIOError ERROR_NOT_SAME_DEVICE = 17; // 0x0
	public const MonoIOError ERROR_NO_MORE_FILES = 18; // 0x0
	public const MonoIOError ERROR_NOT_READY = 21; // 0x0
	public const MonoIOError ERROR_WRITE_FAULT = 29; // 0x0
	public const MonoIOError ERROR_READ_FAULT = 30; // 0x0
	public const MonoIOError ERROR_GEN_FAILURE = 31; // 0x0
	public const MonoIOError ERROR_SHARING_VIOLATION = 32; // 0x0
	public const MonoIOError ERROR_LOCK_VIOLATION = 33; // 0x0
	public const MonoIOError ERROR_HANDLE_DISK_FULL = 39; // 0x0
	public const MonoIOError ERROR_FILE_EXISTS = 80; // 0x0
	public const MonoIOError ERROR_CANNOT_MAKE = 82; // 0x0
	public const MonoIOError ERROR_INVALID_PARAMETER = 87; // 0x0
	public const MonoIOError ERROR_BROKEN_PIPE = 109; // 0x0
	public const MonoIOError ERROR_INVALID_NAME = 123; // 0x0
	public const MonoIOError ERROR_DIR_NOT_EMPTY = 145; // 0x0
	public const MonoIOError ERROR_ALREADY_EXISTS = 183; // 0x0
	public const MonoIOError ERROR_FILENAME_EXCED_RANGE = 206; // 0x0
	public const MonoIOError ERROR_DIRECTORY = 267; // 0x0
	public const MonoIOError ERROR_ENCRYPTION_FAILED = 6000; // 0x0
}

// Namespace: System.IO
internal struct MonoIOStat // TypeDefIndex: 530
{
	// Fields
	public FileAttributes fileAttributes; // 0x0
	public long Length; // 0x8
	public long CreationTime; // 0x10
	public long LastAccessTime; // 0x18
	public long LastWriteTime; // 0x20
}

// Namespace: System.IO
public static class Path // TypeDefIndex: 531
{
	// Fields
	[ObsoleteAttribute] // RVA: 0xD9B00 Offset: 0xD8F00 VA: 0x1800D9B00
	public static readonly char[] InvalidPathChars; // 0x0
	public static readonly char AltDirectorySeparatorChar; // 0x8
	public static readonly char DirectorySeparatorChar; // 0xA
	public static readonly char PathSeparator; // 0xC
	internal static readonly string DirectorySeparatorStr; // 0x10
	public static readonly char VolumeSeparatorChar; // 0x18
	internal static readonly char[] PathSeparatorChars; // 0x20
	private static readonly bool dirEqualsVolume; // 0x28
	internal static readonly char[] trimEndCharsWindows; // 0x30
	internal static readonly char[] trimEndCharsUnix; // 0x38

	// Properties
	internal static char[] TrimEndChars { get; }

	// Methods
	// RVA: 0x316B00 Offset: 0x315300 VA: 0x180316B00
	public static string Combine(string path1, string path2) { }
	// RVA: 0x316F00 Offset: 0x315700 VA: 0x180316F00
	internal static string CleanPath(string s) { }
	// RVA: 0x317410 Offset: 0x315C10 VA: 0x180317410
	public static string GetDirectoryName(string path) { }
	// RVA: 0x317A80 Offset: 0x316280 VA: 0x180317A80
	public static string GetFileName(string path) { }
	// RVA: 0x317BF0 Offset: 0x3163F0 VA: 0x180317BF0
	public static string GetFullPath(string path) { }
	// RVA: 0x317C80 Offset: 0x316480 VA: 0x180317C80
	internal static string GetFullPathInternal(string path) { }
	// RVA: 0x317D10 Offset: 0x316510 VA: 0x180317D10
	private static extern int GetFullPathName(string path, int numBufferChars, StringBuilder buffer, ref IntPtr lpFilePartOrNull) { }
	// RVA: 0x317E90 Offset: 0x316690 VA: 0x180317E90
	internal static string GetFullPathName(string path) { }
	// RVA: 0x318070 Offset: 0x316870 VA: 0x180318070
	internal static string WindowsDriveAdjustment(string path) { }
	// RVA: 0x318370 Offset: 0x316B70 VA: 0x180318370
	internal static string InsecureGetFullPath(string path) { }
	// RVA: 0x318B80 Offset: 0x317380 VA: 0x180318B80
	internal static bool IsDirectorySeparator(char c) { }
	// RVA: 0x318C50 Offset: 0x317450 VA: 0x180318C50
	public static string GetPathRoot(string path) { }
	// RVA: 0x319160 Offset: 0x317960 VA: 0x180319160
	public static bool IsPathRooted(string path) { }
	// RVA: 0x319380 Offset: 0x317B80 VA: 0x180319380
	public static char[] GetInvalidPathChars() { }
	// RVA: 0x319410 Offset: 0x317C10 VA: 0x180319410
	private static void .cctor() { }
	// RVA: 0x3196F0 Offset: 0x317EF0 VA: 0x1803196F0
	private static string GetServerAndShare(string path) { }
	// RVA: 0x319880 Offset: 0x318080 VA: 0x180319880
	private static bool SameRoot(string root, string path) { }
	// RVA: 0x319BC0 Offset: 0x3183C0 VA: 0x180319BC0
	private static string CanonicalizePath(string path) { }
	// RVA: 0x31A680 Offset: 0x318E80 VA: 0x18031A680
	public static string Combine(string[] paths) { }
	// RVA: 0x31AA20 Offset: 0x319220 VA: 0x18031AA20
	public static string Combine(string path1, string path2, string path3) { }
	// RVA: 0x31AC80 Offset: 0x319480 VA: 0x18031AC80
	internal static void Validate(string path) { }
	// RVA: 0x31AD20 Offset: 0x319520 VA: 0x18031AD20
	internal static void Validate(string path, string parameterName) { }
	// RVA: 0x31AF00 Offset: 0x319700 VA: 0x18031AF00
	internal static char[] get_TrimEndChars() { }
	// RVA: 0x31AFA0 Offset: 0x3197A0 VA: 0x18031AFA0
	internal static void CheckSearchPattern(string searchPattern) { }
	// RVA: 0x31B320 Offset: 0x319B20 VA: 0x18031B320
	internal static void CheckInvalidPathChars(string path, bool checkAdditional = False) { }
	// RVA: 0x31B4B0 Offset: 0x319CB0 VA: 0x18031B4B0
	internal static string InternalCombine(string path1, string path2) { }
}

// Namespace: System.IO
[Serializable]
public enum SearchOption // TypeDefIndex: 532
{
	// Fields
	public int value__; // 0x0
	public const SearchOption TopDirectoryOnly = 0; // 0x0
	public const SearchOption AllDirectories = 1; // 0x0
}

// Namespace: System.IO
[Serializable]
public enum SeekOrigin // TypeDefIndex: 533
{
	// Fields
	public int value__; // 0x0
	public const SeekOrigin Begin = 0; // 0x0
	public const SeekOrigin Current = 1; // 0x0
	public const SeekOrigin End = 2; // 0x0
}

// Namespace: System.IO
internal class UnexceptionalStreamReader : StreamReader // TypeDefIndex: 534
{
	// Fields
	private static bool[] newline; // 0x0
	private static char newlineChar; // 0x8

	// Methods
	// RVA: 0x4108A0 Offset: 0x40F0A0 VA: 0x1804108A0
	private static void .cctor() { }
	// RVA: 0x410970 Offset: 0x40F170 VA: 0x180410970
	public void .ctor(Stream stream, Encoding encoding) { }
	// RVA: 0x410A40 Offset: 0x40F240 VA: 0x180410A40 Slot: 8
	public override int Peek() { }
	// RVA: 0x410AE0 Offset: 0x40F2E0 VA: 0x180410AE0 Slot: 9
	public override int Read() { }
	// RVA: 0x410B80 Offset: 0x40F380 VA: 0x180410B80 Slot: 10
	public override int Read([In] [Out] char[] dest_buffer, int index, int count) { }
	// RVA: 0x410DD0 Offset: 0x40F5D0 VA: 0x180410DD0
	private bool CheckEOL(char current) { }
	// RVA: 0x411030 Offset: 0x40F830 VA: 0x180411030 Slot: 12
	public override string ReadLine() { }
	// RVA: 0x4110D0 Offset: 0x40F8D0 VA: 0x1804110D0 Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: System.IO
internal class UnexceptionalStreamWriter : StreamWriter // TypeDefIndex: 535
{
	// Methods
	// RVA: 0x411260 Offset: 0x40FA60 VA: 0x180411260
	public void .ctor(Stream stream, Encoding encoding) { }
	// RVA: 0x411330 Offset: 0x40FB30 VA: 0x180411330 Slot: 9
	public override void Flush() { }
	// RVA: 0x4113D0 Offset: 0x40FBD0 VA: 0x1804113D0 Slot: 12
	public override void Write(char[] buffer, int index, int count) { }
	// RVA: 0x411490 Offset: 0x40FC90 VA: 0x180411490 Slot: 10
	public override void Write(char value) { }
	// RVA: 0x411530 Offset: 0x40FD30 VA: 0x180411530 Slot: 11
	public override void Write(char[] value) { }
	// RVA: 0x4116D0 Offset: 0x40FED0 VA: 0x1804116D0 Slot: 13
	public override void Write(string value) { }
}

// Namespace: System.IO
internal class CStreamReader : StreamReader // TypeDefIndex: 536
{
	// Fields
	private TermInfoDriver driver; // 0x68

	// Methods
	// RVA: 0x249280 Offset: 0x247A80 VA: 0x180249280
	public void .ctor(Stream stream, Encoding encoding) { }
	// RVA: 0x2493D0 Offset: 0x247BD0 VA: 0x1802493D0 Slot: 8
	public override int Peek() { }
	// RVA: 0x249470 Offset: 0x247C70 VA: 0x180249470 Slot: 9
	public override int Read() { }
	// RVA: 0x2495B0 Offset: 0x247DB0 VA: 0x1802495B0 Slot: 10
	public override int Read([In] [Out] char[] dest, int index, int count) { }
	// RVA: 0x249780 Offset: 0x247F80 VA: 0x180249780 Slot: 12
	public override string ReadLine() { }
	// RVA: 0x249830 Offset: 0x248030 VA: 0x180249830 Slot: 11
	public override string ReadToEnd() { }
}

// Namespace: System.IO
internal class CStreamWriter : StreamWriter // TypeDefIndex: 537
{
	// Fields
	private TermInfoDriver driver; // 0x68

	// Methods
	// RVA: 0x2498E0 Offset: 0x2480E0 VA: 0x1802498E0
	public void .ctor(Stream stream, Encoding encoding, bool leaveOpen) { }
	// RVA: 0x249A30 Offset: 0x248230 VA: 0x180249A30 Slot: 12
	public override void Write(char[] buffer, int index, int count) { }
	// RVA: 0x249DA0 Offset: 0x2485A0 VA: 0x180249DA0 Slot: 10
	public override void Write(char val) { }
	// RVA: 0x24A040 Offset: 0x248840 VA: 0x18024A040
	public void InternalWriteString(string val) { }
	// RVA: 0x24A0E0 Offset: 0x2488E0 VA: 0x18024A0E0
	public void InternalWriteChar(char val) { }
	// RVA: 0x24A180 Offset: 0x248980 VA: 0x18024A180
	public void InternalWriteChars(char[] buffer, int n) { }
	// RVA: 0x24A240 Offset: 0x248A40 VA: 0x18024A240 Slot: 11
	public override void Write(char[] val) { }
	// RVA: 0x24A280 Offset: 0x248A80 VA: 0x18024A280 Slot: 13
	public override void Write(string val) { }
}

// Namespace: System.Globalization
public static class CharUnicodeInfo // TypeDefIndex: 538
{
	// Fields
	private static ushort[] s_pCategoryLevel1Index; // 0x0
	private static byte[] s_pCategoriesValue; // 0x8
	private static ushort[] s_pNumericLevel1Index; // 0x10
	private static byte[] s_pNumericValues; // 0x18
	private static ushort[] s_pDigitValues; // 0x20

	// Methods
	// RVA: 0x256C90 Offset: 0x255490 VA: 0x180256C90
	internal static int InternalConvertToUtf32(string s, int index) { }
	// RVA: 0x256D90 Offset: 0x255590 VA: 0x180256D90
	internal static bool IsWhiteSpace(string s, int index) { }
	// RVA: 0x256E50 Offset: 0x255650 VA: 0x180256E50
	internal static bool IsWhiteSpace(char c) { }
	// RVA: 0x256EF0 Offset: 0x2556F0 VA: 0x180256EF0
	public static UnicodeCategory GetUnicodeCategory(char ch) { }
	// RVA: 0x256F80 Offset: 0x255780 VA: 0x180256F80
	public static UnicodeCategory GetUnicodeCategory(string s, int index) { }
	// RVA: 0x257090 Offset: 0x255890 VA: 0x180257090
	internal static UnicodeCategory InternalGetUnicodeCategory(int ch) { }
	// RVA: 0x257250 Offset: 0x255A50 VA: 0x180257250
	internal static byte InternalGetCategoryValue(int ch, int offset) { }
	// RVA: 0x2573A0 Offset: 0x255BA0 VA: 0x1802573A0
	internal static UnicodeCategory InternalGetUnicodeCategory(string value, int index) { }
	// RVA: 0x257510 Offset: 0x255D10 VA: 0x180257510
	private static void .cctor() { }
}

// Namespace: 
internal static class CharUnicodeInfo.Debug // TypeDefIndex: 539
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal static void Assert(bool condition, string message) { }
}

// Namespace: System.Globalization
[Serializable]
public abstract class Calendar : ICloneable // TypeDefIndex: 540
{
	// Fields
	internal const long TicksPerMillisecond = 10000; // 0x0
	internal const long TicksPerSecond = 10000000; // 0x0
	internal const long TicksPerMinute = 600000000; // 0x0
	internal const long TicksPerHour = 36000000000; // 0x0
	internal const long TicksPerDay = 864000000000; // 0x0
	internal const int MillisPerSecond = 1000; // 0x0
	internal const int MillisPerMinute = 60000; // 0x0
	internal const int MillisPerHour = 3600000; // 0x0
	internal const int MillisPerDay = 86400000; // 0x0
	internal const int DaysPerYear = 365; // 0x0
	internal const int DaysPer4Years = 1461; // 0x0
	internal const int DaysPer100Years = 36524; // 0x0
	internal const int DaysPer400Years = 146097; // 0x0
	internal const int DaysTo10000 = 3652059; // 0x0
	internal const long MaxMillis = 315537897600000; // 0x0
	internal const int CAL_GREGORIAN = 1; // 0x0
	internal const int CAL_GREGORIAN_US = 2; // 0x0
	internal const int CAL_JAPAN = 3; // 0x0
	internal const int CAL_TAIWAN = 4; // 0x0
	internal const int CAL_KOREA = 5; // 0x0
	internal const int CAL_HIJRI = 6; // 0x0
	internal const int CAL_THAI = 7; // 0x0
	internal const int CAL_HEBREW = 8; // 0x0
	internal const int CAL_GREGORIAN_ME_FRENCH = 9; // 0x0
	internal const int CAL_GREGORIAN_ARABIC = 10; // 0x0
	internal const int CAL_GREGORIAN_XLIT_ENGLISH = 11; // 0x0
	internal const int CAL_GREGORIAN_XLIT_FRENCH = 12; // 0x0
	internal const int CAL_JULIAN = 13; // 0x0
	internal const int CAL_JAPANESELUNISOLAR = 14; // 0x0
	internal const int CAL_CHINESELUNISOLAR = 15; // 0x0
	internal const int CAL_SAKA = 16; // 0x0
	internal const int CAL_LUNAR_ETO_CHN = 17; // 0x0
	internal const int CAL_LUNAR_ETO_KOR = 18; // 0x0
	internal const int CAL_LUNAR_ETO_ROKUYOU = 19; // 0x0
	internal const int CAL_KOREANLUNISOLAR = 20; // 0x0
	internal const int CAL_TAIWANLUNISOLAR = 21; // 0x0
	internal const int CAL_PERSIAN = 22; // 0x0
	internal const int CAL_UMALQURA = 23; // 0x0
	internal int m_currentEraValue; // 0x10
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	private bool m_isReadOnly; // 0x14
	public const int CurrentEra = 0; // 0x0
	internal int twoDigitYearMax; // 0x18

	// Properties
	public virtual DateTime MinSupportedDateTime { get; }
	public virtual DateTime MaxSupportedDateTime { get; }
	internal virtual int ID { get; }
	internal virtual int BaseCalendarID { get; }
	internal virtual int CurrentEraValue { get; }
	public abstract int[] Eras { get; }
	public virtual int TwoDigitYearMax { get; }

	// Methods
	// RVA: 0x24A370 Offset: 0x248B70 VA: 0x18024A370 Slot: 5
	public virtual DateTime get_MinSupportedDateTime() { }
	// RVA: 0x24A410 Offset: 0x248C10 VA: 0x18024A410 Slot: 6
	public virtual DateTime get_MaxSupportedDateTime() { }
	// RVA: 0x24A4B0 Offset: 0x248CB0 VA: 0x18024A4B0
	protected void .ctor() { }
	// RVA: 0x24A4C0 Offset: 0x248CC0 VA: 0x18024A4C0 Slot: 7
	internal virtual int get_ID() { }
	// RVA: 0x24A4D0 Offset: 0x248CD0 VA: 0x18024A4D0 Slot: 8
	internal virtual int get_BaseCalendarID() { }
	// RVA: 0x24A4F0 Offset: 0x248CF0 VA: 0x18024A4F0 Slot: 9
	public virtual object Clone() { }
	// RVA: 0x24A600 Offset: 0x248E00 VA: 0x18024A600 Slot: 10
	internal virtual int get_CurrentEraValue() { }
	// RVA: -1 Offset: -1 Slot: 11
	public abstract int GetDayOfMonth(DateTime time) { }
	// RVA: -1 Offset: -1 Slot: 12
	public abstract DayOfWeek GetDayOfWeek(DateTime time) { }
	// RVA: -1 Offset: -1 Slot: 13
	public abstract int GetDaysInMonth(int year, int month, int era) { }
	// RVA: -1 Offset: -1 Slot: 14
	public abstract int GetEra(DateTime time) { }
	// RVA: -1 Offset: -1 Slot: 15
	public abstract int[] get_Eras() { }
	// RVA: -1 Offset: -1 Slot: 16
	public abstract int GetMonth(DateTime time) { }
	// RVA: -1 Offset: -1 Slot: 17
	public abstract int GetMonthsInYear(int year, int era) { }
	// RVA: -1 Offset: -1 Slot: 18
	public abstract int GetYear(DateTime time) { }
	// RVA: 0x24A6D0 Offset: 0x248ED0 VA: 0x18024A6D0 Slot: 19
	public virtual bool IsLeapYear(int year) { }
	// RVA: -1 Offset: -1 Slot: 20
	public abstract bool IsLeapYear(int year, int era) { }
	// RVA: -1 Offset: -1 Slot: 21
	public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }
	// RVA: 0x24A6F0 Offset: 0x248EF0 VA: 0x18024A6F0 Slot: 22
	internal virtual bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, out DateTime result) { }
	// RVA: 0x24A830 Offset: 0x249030 VA: 0x18024A830 Slot: 23
	internal virtual bool IsValidYear(int year, int era) { }
	// RVA: 0x24A8C0 Offset: 0x2490C0 VA: 0x18024A8C0 Slot: 24
	internal virtual bool IsValidMonth(int year, int month, int era) { }
	// RVA: 0x24A940 Offset: 0x249140 VA: 0x18024A940 Slot: 25
	internal virtual bool IsValidDay(int year, int month, int day, int era) { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 26
	public virtual int get_TwoDigitYearMax() { }
	// RVA: 0x24A9D0 Offset: 0x2491D0 VA: 0x18024A9D0 Slot: 27
	public virtual int ToFourDigitYear(int year) { }
	// RVA: 0x24AB10 Offset: 0x249310 VA: 0x18024AB10
	internal static int GetSystemTwoDigitYearSetting(int CalID, int defaultYearValue) { }
}

// Namespace: System.Globalization
internal class CalendarData // TypeDefIndex: 541
{
	// Fields
	internal const int MAX_CALENDARS = 23; // 0x0
	internal string sNativeName; // 0x10
	internal string[] saShortDates; // 0x18
	internal string[] saYearMonths; // 0x20
	internal string[] saLongDates; // 0x28
	internal string sMonthDay; // 0x30
	internal string[] saEraNames; // 0x38
	internal string[] saAbbrevEraNames; // 0x40
	internal string[] saAbbrevEnglishEraNames; // 0x48
	internal string[] saDayNames; // 0x50
	internal string[] saAbbrevDayNames; // 0x58
	internal string[] saSuperShortDayNames; // 0x60
	internal string[] saMonthNames; // 0x68
	internal string[] saAbbrevMonthNames; // 0x70
	internal string[] saMonthGenitiveNames; // 0x78
	internal string[] saAbbrevMonthGenitiveNames; // 0x80
	internal string[] saLeapYearMonthNames; // 0x88
	internal int iTwoDigitYearMax; // 0x90
	internal int iCurrentEra; // 0x94
	internal bool bUseUserOverrides; // 0x98
	internal static CalendarData Invariant; // 0x0

	// Methods
	// RVA: 0x24ABA0 Offset: 0x2493A0 VA: 0x18024ABA0
	private void .ctor() { }
	// RVA: 0x24ABB0 Offset: 0x2493B0 VA: 0x18024ABB0
	private static void .cctor() { }
	// RVA: 0x24C040 Offset: 0x24A840 VA: 0x18024C040
	internal void .ctor(string localeName, int calendarId, bool bUseUserOverrides) { }
	// RVA: 0x24C6B0 Offset: 0x24AEB0 VA: 0x18024C6B0
	private void InitializeEraNames(string localeName, int calendarId) { }
	// RVA: 0x24CF00 Offset: 0x24B700 VA: 0x18024CF00
	private void InitializeAbbreviatedEraNames(string localeName, int calendarId) { }
	// RVA: 0x24D420 Offset: 0x24BC20 VA: 0x18024D420
	internal static CalendarData GetCalendarData(int calendarId) { }
	// RVA: 0x24D620 Offset: 0x24BE20 VA: 0x18024D620
	private static string CalendarIdToCultureName(int calendarId) { }
	// RVA: 0x24A4C0 Offset: 0x248CC0 VA: 0x18024A4C0
	public static int nativeGetTwoDigitYearMax(int calID) { }
	// RVA: 0x24D780 Offset: 0x24BF80 VA: 0x18024D780
	private static bool nativeGetCalendarData(CalendarData data, string localeName, int calendarId) { }
	// RVA: 0x24D7D0 Offset: 0x24BFD0 VA: 0x18024D7D0
	private bool fill_calendar_data(string localeName, int datetimeIndex) { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum CompareOptions // TypeDefIndex: 542
{
	// Fields
	public int value__; // 0x0
	public const CompareOptions None = 0; // 0x0
	public const CompareOptions IgnoreCase = 1; // 0x0
	public const CompareOptions IgnoreNonSpace = 2; // 0x0
	public const CompareOptions IgnoreSymbols = 4; // 0x0
	public const CompareOptions IgnoreKanaType = 8; // 0x0
	public const CompareOptions IgnoreWidth = 16; // 0x0
	public const CompareOptions OrdinalIgnoreCase = 268435456; // 0x0
	public const CompareOptions StringSort = 536870912; // 0x0
	public const CompareOptions Ordinal = 1073741824; // 0x0
}

// Namespace: System.Globalization
[Serializable]
public class CompareInfo : IDeserializationCallback // TypeDefIndex: 543
{
	// Fields
	private const CompareOptions ValidIndexMaskOffFlags = -32; // 0x0
	private const CompareOptions ValidCompareMaskOffFlags = -536870944; // 0x0
	private const CompareOptions ValidHashCodeOfStringMaskOffFlags = -32; // 0x0
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	private string m_name; // 0x10
	private string m_sortName; // 0x18
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	private int win32LCID; // 0x20
	private int culture; // 0x24
	private const int LINGUISTIC_IGNORECASE = 16; // 0x0
	private const int NORM_IGNORECASE = 1; // 0x0
	private const int NORM_IGNOREKANATYPE = 65536; // 0x0
	private const int LINGUISTIC_IGNOREDIACRITIC = 32; // 0x0
	private const int NORM_IGNORENONSPACE = 2; // 0x0
	private const int NORM_IGNORESYMBOLS = 4; // 0x0
	private const int NORM_IGNOREWIDTH = 131072; // 0x0
	private const int SORT_STRINGSORT = 4096; // 0x0
	private const int COMPARE_OPTIONS_ORDINAL = 1073741824; // 0x0
	internal const int NORM_LINGUISTIC_CASING = 134217728; // 0x0
	private const int RESERVED_FIND_ASCII_STRING = 536870912; // 0x0
	private const int SORT_VERSION_WHIDBEY = 4096; // 0x0
	private const int SORT_VERSION_V4 = 393473; // 0x0
	[OptionalFieldAttribute] // RVA: 0xD9BB0 Offset: 0xD8FB0 VA: 0x1800D9BB0
	private SortVersion m_SortVersion; // 0x28
	private SimpleCollator collator; // 0x30
	private static Dictionary<string, SimpleCollator> collators; // 0x0
	private static bool managedCollation; // 0x8
	private static bool managedCollationChecked; // 0x9

	// Properties
	public virtual string Name { get; }
	private static bool UseManagedCollation { get; }

	// Methods
	// RVA: 0x258620 Offset: 0x256E20 VA: 0x180258620
	internal void .ctor(CultureInfo culture) { }
	// RVA: 0x258650 Offset: 0x256E50 VA: 0x180258650
	public static CompareInfo GetCompareInfo(string name) { }
	[OnDeserializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x258740 Offset: 0x256F40 VA: 0x180258740
	private void OnDeserializing(StreamingContext ctx) { }
	// RVA: 0x258750 Offset: 0x256F50 VA: 0x180258750
	private void OnDeserialized() { }
	[OnDeserializedAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x258840 Offset: 0x257040 VA: 0x180258840
	private void OnDeserialized(StreamingContext ctx) { }
	[OnSerializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x258850 Offset: 0x257050 VA: 0x180258850
	private void OnSerializing(StreamingContext ctx) { }
	// RVA: 0x258840 Offset: 0x257040 VA: 0x180258840 Slot: 4
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }
	// RVA: 0x258910 Offset: 0x257110 VA: 0x180258910 Slot: 5
	public virtual string get_Name() { }
	// RVA: 0x258A90 Offset: 0x257290 VA: 0x180258A90 Slot: 6
	public virtual int Compare(string string1, string string2) { }
	// RVA: 0x258AC0 Offset: 0x2572C0 VA: 0x180258AC0 Slot: 7
	public virtual int Compare(string string1, string string2, CompareOptions options) { }
	// RVA: 0x258D90 Offset: 0x257590 VA: 0x180258D90 Slot: 8
	public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options) { }
	// RVA: 0x259130 Offset: 0x257930 VA: 0x180259130
	private static int CompareOrdinal(string string1, int offset1, int length1, string string2, int offset2, int length2) { }
	// RVA: 0x259190 Offset: 0x257990 VA: 0x180259190 Slot: 9
	public virtual bool IsPrefix(string source, string prefix, CompareOptions options) { }
	// RVA: 0x2594A0 Offset: 0x257CA0 VA: 0x1802594A0 Slot: 10
	public virtual bool IsSuffix(string source, string suffix, CompareOptions options) { }
	// RVA: 0x259800 Offset: 0x258000 VA: 0x180259800 Slot: 11
	public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options) { }
	// RVA: 0x259AC0 Offset: 0x2582C0 VA: 0x180259AC0 Slot: 12
	public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options) { }
	// RVA: 0x259D80 Offset: 0x258580 VA: 0x180259D80 Slot: 13
	public virtual SortKey GetSortKey(string source, CompareOptions options) { }
	// RVA: 0x259D80 Offset: 0x258580 VA: 0x180259D80
	private SortKey CreateSortKey(string source, CompareOptions options) { }
	// RVA: 0x259EA0 Offset: 0x2586A0 VA: 0x180259EA0 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x25A040 Offset: 0x258840 VA: 0x18025A040 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x25A080 Offset: 0x258880 VA: 0x18025A080
	internal int GetHashCodeOfString(string source, CompareOptions options) { }
	// RVA: 0x25A1E0 Offset: 0x2589E0 VA: 0x18025A1E0
	internal int GetHashCodeOfString(string source, CompareOptions options, bool forceRandomizedHashing, long additionalEntropy) { }
	// RVA: 0x25A340 Offset: 0x258B40 VA: 0x18025A340 Slot: 3
	public override string ToString() { }
	// RVA: 0x25A3D0 Offset: 0x258BD0 VA: 0x18025A3D0
	private static bool get_UseManagedCollation() { }
	// RVA: 0x25A550 Offset: 0x258D50 VA: 0x18025A550
	private SimpleCollator GetCollator() { }
	// RVA: 0x25A920 Offset: 0x259120 VA: 0x18025A920
	private SortKey CreateSortKeyCore(string source, CompareOptions options) { }
	// RVA: 0x25AB90 Offset: 0x259390 VA: 0x18025AB90
	private int internal_index_switch(string s1, int sindex, int count, string s2, CompareOptions opt, bool first) { }
	// RVA: 0x25AD60 Offset: 0x259560 VA: 0x18025AD60
	private int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }
	// RVA: 0x25AE40 Offset: 0x259640 VA: 0x18025AE40
	private int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }
	// RVA: 0x25AEA0 Offset: 0x2596A0 VA: 0x18025AEA0
	private int internal_index_managed(string s1, int sindex, int count, string s2, CompareOptions opt, bool first) { }
	// RVA: 0x25AF40 Offset: 0x259740 VA: 0x18025AF40
	private void assign_sortkey(object key, string source, CompareOptions options) { }
	// RVA: 0x25B030 Offset: 0x259830 VA: 0x18025B030
	private int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options) { }
	// RVA: 0x25B040 Offset: 0x259840 VA: 0x18025B040
	private int internal_index(string source, int sindex, int count, string value, CompareOptions options, bool first) { }
	// RVA: 0x25B130 Offset: 0x259930 VA: 0x18025B130
	internal void .ctor() { }
}

// Namespace: System.Globalization
[Serializable]
public class CultureNotFoundException : ArgumentException, ISerializable // TypeDefIndex: 544
{
	// Fields
	private string m_invalidCultureName; // 0x90
	private Nullable<int> m_invalidCultureId; // 0x98

	// Properties
	private static string DefaultMessage { get; }
	private string FormatedInvalidCultureId { get; }
	public override string Message { get; }

	// Methods
	// RVA: 0x4009B0 Offset: 0x3FF1B0 VA: 0x1804009B0
	public void .ctor() { }
	// RVA: 0x400A40 Offset: 0x3FF240 VA: 0x180400A40
	public void .ctor(string paramName, string message) { }
	// RVA: 0x400A80 Offset: 0x3FF280 VA: 0x180400A80
	public void .ctor(string paramName, string invalidCultureName, string message) { }
	// RVA: 0x400AD0 Offset: 0x3FF2D0 VA: 0x180400AD0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x400CF0 Offset: 0x3FF4F0 VA: 0x180400CF0 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x401020 Offset: 0x3FF820 VA: 0x180401020
	private static string get_DefaultMessage() { }
	// RVA: 0x401090 Offset: 0x3FF890 VA: 0x180401090
	private string get_FormatedInvalidCultureId() { }
	// RVA: 0x4011C0 Offset: 0x3FF9C0 VA: 0x1804011C0 Slot: 5
	public override string get_Message() { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum MonthNameStyles // TypeDefIndex: 545
{
	// Fields
	public int value__; // 0x0
	public const MonthNameStyles Regular = 0; // 0x0
	public const MonthNameStyles Genitive = 1; // 0x0
	public const MonthNameStyles LeapYear = 2; // 0x0
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum DateTimeFormatFlags // TypeDefIndex: 546
{
	// Fields
	public int value__; // 0x0
	public const DateTimeFormatFlags None = 0; // 0x0
	public const DateTimeFormatFlags UseGenitiveMonth = 1; // 0x0
	public const DateTimeFormatFlags UseLeapYearMonth = 2; // 0x0
	public const DateTimeFormatFlags UseSpacesInMonthNames = 4; // 0x0
	public const DateTimeFormatFlags UseHebrewRule = 8; // 0x0
	public const DateTimeFormatFlags UseSpacesInDayNames = 16; // 0x0
	public const DateTimeFormatFlags UseDigitPrefixInTokens = 32; // 0x0
	public const DateTimeFormatFlags NotInitialized = -1; // 0x0
}

// Namespace: System.Globalization
[Serializable]
public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 547
{
	// Fields
	private static DateTimeFormatInfo invariantInfo; // 0x0
	private CultureData m_cultureData; // 0x10
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal string m_name; // 0x18
	private string m_langName; // 0x20
	private CompareInfo m_compareInfo; // 0x28
	private CultureInfo m_cultureInfo; // 0x30
	internal string amDesignator; // 0x38
	internal string pmDesignator; // 0x40
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal string dateSeparator; // 0x48
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal string generalShortTimePattern; // 0x50
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal string generalLongTimePattern; // 0x58
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal string timeSeparator; // 0x60
	internal string monthDayPattern; // 0x68
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal string dateTimeOffsetPattern; // 0x70
	internal const string rfc1123Pattern = "ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'"; // 0x0
	internal const string sortableDateTimePattern = "yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss"; // 0x0
	internal const string universalSortableDateTimePattern = "yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'"; // 0x0
	internal Calendar calendar; // 0x78
	internal int firstDayOfWeek; // 0x80
	internal int calendarWeekRule; // 0x84
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal string fullDateTimePattern; // 0x88
	internal string[] abbreviatedDayNames; // 0x90
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal string[] m_superShortDayNames; // 0x98
	internal string[] dayNames; // 0xA0
	internal string[] abbreviatedMonthNames; // 0xA8
	internal string[] monthNames; // 0xB0
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal string[] genitiveMonthNames; // 0xB8
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal string[] m_genitiveAbbreviatedMonthNames; // 0xC0
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal string[] leapYearMonthNames; // 0xC8
	internal string longDatePattern; // 0xD0
	internal string shortDatePattern; // 0xD8
	internal string yearMonthPattern; // 0xE0
	internal string longTimePattern; // 0xE8
	internal string shortTimePattern; // 0xF0
	[OptionalFieldAttribute] // RVA: 0xD9BB0 Offset: 0xD8FB0 VA: 0x1800D9BB0
	private string[] allYearMonthPatterns; // 0xF8
	internal string[] allShortDatePatterns; // 0x100
	internal string[] allLongDatePatterns; // 0x108
	internal string[] allShortTimePatterns; // 0x110
	internal string[] allLongTimePatterns; // 0x118
	internal string[] m_eraNames; // 0x120
	internal string[] m_abbrevEraNames; // 0x128
	internal string[] m_abbrevEnglishEraNames; // 0x130
	internal int[] optionalCalendars; // 0x138
	private const int DEFAULT_ALL_DATETIMES_SIZE = 132; // 0x0
	internal bool m_isReadOnly; // 0x140
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal DateTimeFormatFlags formatFlags; // 0x144
	internal static bool preferExistingTokens; // 0x8
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	private int CultureID; // 0x148
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	private bool m_useUserOverride; // 0x14C
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	private bool bUseCalendarInfo; // 0x14D
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	private int nDataItem; // 0x150
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal bool m_isDefaultCalendar; // 0x154
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	private static Hashtable s_calendarNativeNames; // 0x10
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal string[] m_dateWords; // 0x158
	private string m_fullTimeSpanPositivePattern; // 0x160
	private string m_fullTimeSpanNegativePattern; // 0x168
	internal const DateTimeStyles InvalidDateTimeStyles = -256; // 0x0
	private TokenHashValue[] m_dtfiTokenHash; // 0x170
	private const int TOKEN_HASH_SIZE = 199; // 0x0
	private const int SECOND_PRIME = 197; // 0x0
	private const string dateSeparatorOrTimeZoneOffset = "-"; // 0x0
	private const string invariantDateSeparator = "/"; // 0x0
	private const string invariantTimeSeparator = ":"; // 0x0
	internal const string IgnorablePeriod = "."; // 0x0
	internal const string IgnorableComma = ","; // 0x0
	internal const string CJKYearSuff = "�"; // 0x0
	internal const string CJKMonthSuff = "�"; // 0x0
	internal const string CJKDaySuff = "�"; // 0x0
	internal const string KoreanYearSuff = "�"; // 0x0
	internal const string KoreanMonthSuff = "�"; // 0x0
	internal const string KoreanDaySuff = "�"; // 0x0
	internal const string KoreanHourSuff = "�"; // 0x0
	internal const string KoreanMinuteSuff = "�"; // 0x0
	internal const string KoreanSecondSuff = "�"; // 0x0
	internal const string CJKHourSuff = "�"; // 0x0
	internal const string ChineseHourSuff = "�"; // 0x0
	internal const string CJKMinuteSuff = "�"; // 0x0
	internal const string CJKSecondSuff = "�"; // 0x0
	internal const string LocalTimeMark = "T"; // 0x0
	internal const string KoreanLangName = "ko"; // 0x0
	internal const string JapaneseLangName = "ja"; // 0x0
	internal const string EnglishLangName = "en"; // 0x0
	private static DateTimeFormatInfo s_jajpDTFI; // 0x18
	private static DateTimeFormatInfo s_zhtwDTFI; // 0x20

	// Properties
	private string CultureName { get; }
	private CultureInfo Culture { get; }
	private string LanguageName { get; }
	public static DateTimeFormatInfo InvariantInfo { get; }
	public static DateTimeFormatInfo CurrentInfo { get; }
	public Calendar Calendar { set; }
	private int[] OptionalCalendars { get; }
	internal string[] EraNames { get; }
	internal string[] AbbreviatedEraNames { get; }
	internal string[] AbbreviatedEnglishEraNames { get; }
	public string FullDateTimePattern { get; }
	public string LongDatePattern { get; set; }
	public string LongTimePattern { get; set; }
	public string MonthDayPattern { get; }
	public string ShortDatePattern { get; set; }
	public string ShortTimePattern { get; set; }
	internal string GeneralShortTimePattern { get; }
	internal string GeneralLongTimePattern { get; }
	internal string DateTimeOffsetPattern { get; }
	public string YearMonthPattern { get; set; }
	public string[] AbbreviatedDayNames { get; }
	public string[] DayNames { get; }
	public string[] AbbreviatedMonthNames { get; }
	public string[] MonthNames { get; }
	internal bool HasSpacesInMonthNames { get; }
	internal bool HasSpacesInDayNames { get; }
	private string[] AllYearMonthPatterns { get; }
	private string[] AllShortDatePatterns { get; }
	private string[] AllShortTimePatterns { get; }
	private string[] AllLongDatePatterns { get; }
	private string[] AllLongTimePatterns { get; }
	private string[] UnclonedYearMonthPatterns { get; }
	private string[] UnclonedShortDatePatterns { get; }
	private string[] UnclonedLongDatePatterns { get; }
	private string[] UnclonedShortTimePatterns { get; }
	private string[] UnclonedLongTimePatterns { get; }
	internal string FullTimeSpanPositivePattern { get; }
	internal string FullTimeSpanNegativePattern { get; }
	internal CompareInfo CompareInfo { get; }
	internal DateTimeFormatFlags FormatFlags { get; }
	internal bool HasForceTwoDigitYears { get; }

	// Methods
	// RVA: 0x4FD5A0 Offset: 0x4FBDA0 VA: 0x1804FD5A0
	private string get_CultureName() { }
	// RVA: 0x4FD5D0 Offset: 0x4FBDD0 VA: 0x1804FD5D0
	private CultureInfo get_Culture() { }
	// RVA: 0x4FD6A0 Offset: 0x4FBEA0 VA: 0x1804FD6A0
	private string get_LanguageName() { }
	// RVA: 0x4FD6D0 Offset: 0x4FBED0 VA: 0x1804FD6D0
	private string[] internalGetAbbreviatedDayOfWeekNames() { }
	// RVA: 0x4FD740 Offset: 0x4FBF40 VA: 0x1804FD740
	private string[] internalGetDayOfWeekNames() { }
	// RVA: 0x4FD7B0 Offset: 0x4FBFB0 VA: 0x1804FD7B0
	private string[] internalGetAbbreviatedMonthNames() { }
	// RVA: 0x4FD820 Offset: 0x4FC020 VA: 0x1804FD820
	private string[] internalGetMonthNames() { }
	// RVA: 0x4FD890 Offset: 0x4FC090 VA: 0x1804FD890
	public void .ctor() { }
	// RVA: 0x4FD990 Offset: 0x4FC190 VA: 0x1804FD990
	internal void .ctor(CultureData cultureData, Calendar cal) { }
	// RVA: 0x4FD9C0 Offset: 0x4FC1C0 VA: 0x1804FD9C0
	private void InitializeOverridableProperties(CultureData cultureData, int calendarID) { }
	[OnDeserializedAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4FDBD0 Offset: 0x4FC3D0 VA: 0x1804FDBD0
	private void OnDeserialized(StreamingContext ctx) { }
	[OnSerializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4FE210 Offset: 0x4FCA10 VA: 0x1804FE210
	private void OnSerializing(StreamingContext ctx) { }
	// RVA: 0x4FE450 Offset: 0x4FCC50 VA: 0x1804FE450
	public static DateTimeFormatInfo get_InvariantInfo() { }
	// RVA: 0x4FE670 Offset: 0x4FCE70 VA: 0x1804FE670
	public static DateTimeFormatInfo get_CurrentInfo() { }
	// RVA: 0x4FE7A0 Offset: 0x4FCFA0 VA: 0x1804FE7A0
	public static DateTimeFormatInfo GetInstance(IFormatProvider provider) { }
	// RVA: 0x4FE930 Offset: 0x4FD130 VA: 0x1804FE930 Slot: 5
	public object GetFormat(Type formatType) { }
	// RVA: 0x4FE9F0 Offset: 0x4FD1F0 VA: 0x1804FE9F0 Slot: 4
	public object Clone() { }
	// RVA: 0x4FEB20 Offset: 0x4FD320 VA: 0x1804FEB20
	public void set_Calendar(Calendar value) { }
	// RVA: 0x4FEE20 Offset: 0x4FD620 VA: 0x1804FEE20
	private int[] get_OptionalCalendars() { }
	// RVA: 0x4FEE60 Offset: 0x4FD660 VA: 0x1804FEE60
	internal string[] get_EraNames() { }
	// RVA: 0x4FEED0 Offset: 0x4FD6D0 VA: 0x1804FEED0
	public string GetEraName(int era) { }
	// RVA: 0x4FF050 Offset: 0x4FD850 VA: 0x1804FF050
	internal string[] get_AbbreviatedEraNames() { }
	// RVA: 0x4FF0C0 Offset: 0x4FD8C0 VA: 0x1804FF0C0
	public string GetAbbreviatedEraName(int era) { }
	// RVA: 0x4FF270 Offset: 0x4FDA70 VA: 0x1804FF270
	internal string[] get_AbbreviatedEnglishEraNames() { }
	// RVA: 0x4FF2E0 Offset: 0x4FDAE0 VA: 0x1804FF2E0
	public string get_FullDateTimePattern() { }
	// RVA: 0x4FF3D0 Offset: 0x4FDBD0 VA: 0x1804FF3D0
	public string get_LongDatePattern() { }
	// RVA: 0x4FF420 Offset: 0x4FDC20 VA: 0x1804FF420
	public void set_LongDatePattern(string value) { }
	// RVA: 0x4FF550 Offset: 0x4FDD50 VA: 0x1804FF550
	public string get_LongTimePattern() { }
	// RVA: 0x4FF5C0 Offset: 0x4FDDC0 VA: 0x1804FF5C0
	public void set_LongTimePattern(string value) { }
	// RVA: 0x4FF700 Offset: 0x4FDF00 VA: 0x1804FF700
	public string get_MonthDayPattern() { }
	// RVA: 0x4FF770 Offset: 0x4FDF70 VA: 0x1804FF770
	public string get_ShortDatePattern() { }
	// RVA: 0x4FF7C0 Offset: 0x4FDFC0 VA: 0x1804FF7C0
	public void set_ShortDatePattern(string value) { }
	// RVA: 0x4FF900 Offset: 0x4FE100 VA: 0x1804FF900
	public string get_ShortTimePattern() { }
	// RVA: 0x4FF970 Offset: 0x4FE170 VA: 0x1804FF970
	public void set_ShortTimePattern(string value) { }
	// RVA: 0x4FFAA0 Offset: 0x4FE2A0 VA: 0x1804FFAA0
	internal string get_GeneralShortTimePattern() { }
	// RVA: 0x4FFB80 Offset: 0x4FE380 VA: 0x1804FFB80
	internal string get_GeneralLongTimePattern() { }
	// RVA: 0x4FFC60 Offset: 0x4FE460 VA: 0x1804FFC60
	internal string get_DateTimeOffsetPattern() { }
	// RVA: 0x5000C0 Offset: 0x4FE8C0 VA: 0x1805000C0
	public string get_YearMonthPattern() { }
	// RVA: 0x500110 Offset: 0x4FE910 VA: 0x180500110
	public void set_YearMonthPattern(string value) { }
	// RVA: 0x500240 Offset: 0x4FEA40 VA: 0x180500240
	public string[] get_AbbreviatedDayNames() { }
	// RVA: 0x500310 Offset: 0x4FEB10 VA: 0x180500310
	public string[] get_DayNames() { }
	// RVA: 0x5003E0 Offset: 0x4FEBE0 VA: 0x1805003E0
	public string[] get_AbbreviatedMonthNames() { }
	// RVA: 0x5004B0 Offset: 0x4FECB0 VA: 0x1805004B0
	public string[] get_MonthNames() { }
	// RVA: 0x500580 Offset: 0x4FED80 VA: 0x180500580
	internal bool get_HasSpacesInMonthNames() { }
	// RVA: 0x5005A0 Offset: 0x4FEDA0 VA: 0x1805005A0
	internal bool get_HasSpacesInDayNames() { }
	// RVA: 0x5005C0 Offset: 0x4FEDC0 VA: 0x1805005C0
	internal string internalGetMonthName(int month, MonthNameStyles style, bool abbreviated) { }
	// RVA: 0x5007F0 Offset: 0x4FEFF0 VA: 0x1805007F0
	private string[] internalGetGenitiveMonthNames(bool abbreviated) { }
	// RVA: 0x5008C0 Offset: 0x4FF0C0 VA: 0x1805008C0
	internal string[] internalGetLeapYearMonthNames() { }
	// RVA: 0x500930 Offset: 0x4FF130 VA: 0x180500930
	public string GetAbbreviatedDayName(DayOfWeek dayofweek) { }
	// RVA: 0x500AC0 Offset: 0x4FF2C0 VA: 0x180500AC0
	private static string[] GetCombinedPatterns(string[] patterns1, string[] patterns2, string connectString) { }
	// RVA: 0x500C70 Offset: 0x4FF470 VA: 0x180500C70
	public string[] GetAllDateTimePatterns(char format) { }
	// RVA: 0x5011A0 Offset: 0x4FF9A0 VA: 0x1805011A0
	public string GetDayName(DayOfWeek dayofweek) { }
	// RVA: 0x501330 Offset: 0x4FFB30 VA: 0x180501330
	public string GetAbbreviatedMonthName(int month) { }
	// RVA: 0x5014C0 Offset: 0x4FFCC0 VA: 0x1805014C0
	public string GetMonthName(int month) { }
	// RVA: 0x501650 Offset: 0x4FFE50 VA: 0x180501650
	private static string[] GetMergedPatterns(string[] patterns, string defaultPattern) { }
	// RVA: 0x5019C0 Offset: 0x5001C0 VA: 0x1805019C0
	private string[] get_AllYearMonthPatterns() { }
	// RVA: 0x501AC0 Offset: 0x5002C0 VA: 0x180501AC0
	private string[] get_AllShortDatePatterns() { }
	// RVA: 0x501BC0 Offset: 0x5003C0 VA: 0x180501BC0
	private string[] get_AllShortTimePatterns() { }
	// RVA: 0x501CA0 Offset: 0x5004A0 VA: 0x180501CA0
	private string[] get_AllLongDatePatterns() { }
	// RVA: 0x501DA0 Offset: 0x5005A0 VA: 0x180501DA0
	private string[] get_AllLongTimePatterns() { }
	// RVA: 0x501E80 Offset: 0x500680 VA: 0x180501E80
	private string[] get_UnclonedYearMonthPatterns() { }
	// RVA: 0x501EF0 Offset: 0x5006F0 VA: 0x180501EF0
	private string[] get_UnclonedShortDatePatterns() { }
	// RVA: 0x501F60 Offset: 0x500760 VA: 0x180501F60
	private string[] get_UnclonedLongDatePatterns() { }
	// RVA: 0x501FD0 Offset: 0x5007D0 VA: 0x180501FD0
	private string[] get_UnclonedShortTimePatterns() { }
	// RVA: 0x502010 Offset: 0x500810 VA: 0x180502010
	private string[] get_UnclonedLongTimePatterns() { }
	// RVA: 0x502050 Offset: 0x500850 VA: 0x180502050
	internal string get_FullTimeSpanPositivePattern() { }
	// RVA: 0x502140 Offset: 0x500940 VA: 0x180502140
	internal string get_FullTimeSpanNegativePattern() { }
	// RVA: 0x5021E0 Offset: 0x5009E0 VA: 0x1805021E0
	internal CompareInfo get_CompareInfo() { }
	// RVA: 0x502350 Offset: 0x500B50 VA: 0x180502350
	internal DateTimeFormatFlags get_FormatFlags() { }
	// RVA: 0x5028A0 Offset: 0x5010A0 VA: 0x1805028A0
	internal bool get_HasForceTwoDigitYears() { }
	// RVA: 0x5028E0 Offset: 0x5010E0 VA: 0x1805028E0
	internal bool YearMonthAdjustment(ref int year, ref int month, bool parsedMonthName) { }
	// RVA: 0x502A00 Offset: 0x501200 VA: 0x180502A00
	internal static DateTimeFormatInfo GetJapaneseCalendarDTFI() { }
	// RVA: 0x502B70 Offset: 0x501370 VA: 0x180502B70
	internal static DateTimeFormatInfo GetTaiwanCalendarDTFI() { }
	// RVA: 0x502CE0 Offset: 0x5014E0 VA: 0x180502CE0
	private void ClearTokenHashTable() { }
	// RVA: 0x502D00 Offset: 0x501500 VA: 0x180502D00
	internal TokenHashValue[] CreateTokenHashTable() { }
	// RVA: 0x504020 Offset: 0x502820 VA: 0x180504020
	private void AddMonthNames(TokenHashValue[] temp, string monthPostfix) { }
	// RVA: 0x5041B0 Offset: 0x5029B0 VA: 0x1805041B0
	private static bool TryParseHebrewNumber(ref __DTString str, out bool badFormat, out int number) { }
	// RVA: 0x504440 Offset: 0x502C40 VA: 0x180504440
	private static bool IsHebrewChar(char ch) { }
	// RVA: 0x504460 Offset: 0x502C60 VA: 0x180504460
	internal bool Tokenize(TokenType TokenMask, out TokenType tokenType, out int tokenValue, ref __DTString str) { }
	// RVA: 0x504990 Offset: 0x503190 VA: 0x180504990
	private void InsertAtCurrentHashNode(TokenHashValue[] hashTable, string str, char ch, TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe) { }
	// RVA: 0x504C00 Offset: 0x503400 VA: 0x180504C00
	private void InsertHash(TokenHashValue[] hashTable, string str, TokenType tokenType, int tokenValue) { }
	// RVA: 0x505130 Offset: 0x503930 VA: 0x180505130
	private static void .cctor() { }
}

// Namespace: System.Globalization
internal class TokenHashValue // TypeDefIndex: 548
{
	// Fields
	internal string tokenString; // 0x10
	internal TokenType tokenType; // 0x18
	internal int tokenValue; // 0x1C

	// Methods
	// RVA: 0x451410 Offset: 0x44FC10 VA: 0x180451410
	internal void .ctor(string tokenString, TokenType tokenType, int tokenValue) { }
}

// Namespace: System.Globalization
internal enum FORMATFLAGS // TypeDefIndex: 549
{
	// Fields
	public int value__; // 0x0
	public const FORMATFLAGS None = 0; // 0x0
	public const FORMATFLAGS UseGenitiveMonth = 1; // 0x0
	public const FORMATFLAGS UseLeapYearMonth = 2; // 0x0
	public const FORMATFLAGS UseSpacesInMonthNames = 4; // 0x0
	public const FORMATFLAGS UseHebrewParsing = 8; // 0x0
	public const FORMATFLAGS UseSpacesInDayNames = 16; // 0x0
	public const FORMATFLAGS UseDigitPrefixInTokens = 32; // 0x0
}

// Namespace: System.Globalization
internal enum CalendarId // TypeDefIndex: 550
{
	// Fields
	public ushort value__; // 0x0
	public const CalendarId GREGORIAN = 1; // 0x0
	public const CalendarId GREGORIAN_US = 2; // 0x0
	public const CalendarId JAPAN = 3; // 0x0
	public const CalendarId TAIWAN = 4; // 0x0
	public const CalendarId KOREA = 5; // 0x0
	public const CalendarId HIJRI = 6; // 0x0
	public const CalendarId THAI = 7; // 0x0
	public const CalendarId HEBREW = 8; // 0x0
	public const CalendarId GREGORIAN_ME_FRENCH = 9; // 0x0
	public const CalendarId GREGORIAN_ARABIC = 10; // 0x0
	public const CalendarId GREGORIAN_XLIT_ENGLISH = 11; // 0x0
	public const CalendarId GREGORIAN_XLIT_FRENCH = 12; // 0x0
	public const CalendarId JULIAN = 13; // 0x0
	public const CalendarId JAPANESELUNISOLAR = 14; // 0x0
	public const CalendarId CHINESELUNISOLAR = 15; // 0x0
	public const CalendarId SAKA = 16; // 0x0
	public const CalendarId LUNAR_ETO_CHN = 17; // 0x0
	public const CalendarId LUNAR_ETO_KOR = 18; // 0x0
	public const CalendarId LUNAR_ETO_ROKUYOU = 19; // 0x0
	public const CalendarId KOREANLUNISOLAR = 20; // 0x0
	public const CalendarId TAIWANLUNISOLAR = 21; // 0x0
	public const CalendarId PERSIAN = 22; // 0x0
	public const CalendarId UMALQURA = 23; // 0x0
	public const CalendarId LAST_CALENDAR = 23; // 0x0
}

// Namespace: System.Globalization
internal class DateTimeFormatInfoScanner // TypeDefIndex: 551
{
	// Fields
	internal List<string> m_dateWords; // 0x10
	private static Dictionary<string, string> s_knownWords; // 0x0
	private DateTimeFormatInfoScanner.FoundDatePattern m_ymdFlags; // 0x18

	// Properties
	private static Dictionary<string, string> KnownWords { get; }

	// Methods
	// RVA: 0x5051B0 Offset: 0x5039B0 VA: 0x1805051B0
	private static Dictionary<string, string> get_KnownWords() { }
	// RVA: 0x505660 Offset: 0x503E60 VA: 0x180505660
	internal static int SkipWhiteSpacesAndNonLetter(string pattern, int currentIndex) { }
	// RVA: 0x505770 Offset: 0x503F70 VA: 0x180505770
	internal void AddDateWordOrPostfix(string formatPostfix, string str) { }
	// RVA: 0x505A10 Offset: 0x504210 VA: 0x180505A10
	internal int AddDateWords(string pattern, int index, string formatPostfix) { }
	// RVA: 0x505CC0 Offset: 0x5044C0 VA: 0x180505CC0
	internal static int ScanRepeatChar(string pattern, char ch, int index, out int count) { }
	// RVA: 0x505DE0 Offset: 0x5045E0 VA: 0x180505DE0
	internal void AddIgnorableSymbols(string text) { }
	// RVA: 0x505EE0 Offset: 0x5046E0 VA: 0x180505EE0
	internal void ScanDateWord(string pattern) { }
	// RVA: 0x506120 Offset: 0x504920 VA: 0x180506120
	internal string[] GetDateWordsOfDTFI(DateTimeFormatInfo dtfi) { }
	// RVA: 0x506540 Offset: 0x504D40 VA: 0x180506540
	internal static FORMATFLAGS GetFormatFlagGenitiveMonth(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames) { }
	// RVA: 0x506690 Offset: 0x504E90 VA: 0x180506690
	internal static FORMATFLAGS GetFormatFlagUseSpaceInMonthNames(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames) { }
	// RVA: 0x506750 Offset: 0x504F50 VA: 0x180506750
	internal static FORMATFLAGS GetFormatFlagUseSpaceInDayNames(string[] dayNames, string[] abbrevDayNames) { }
	// RVA: 0x506790 Offset: 0x504F90 VA: 0x180506790
	internal static FORMATFLAGS GetFormatFlagUseHebrewCalendar(int calID) { }
	// RVA: 0x5067A0 Offset: 0x504FA0 VA: 0x1805067A0
	private static bool EqualStringArrays(string[] array1, string[] array2) { }
	// RVA: 0x506860 Offset: 0x505060 VA: 0x180506860
	private static bool ArrayElementsHaveSpace(string[] array) { }
	// RVA: 0x506980 Offset: 0x505180 VA: 0x180506980
	private static bool ArrayElementsBeginWithDigit(string[] array) { }
	// RVA: 0x506C20 Offset: 0x505420 VA: 0x180506C20
	public void .ctor() { }
}

// Namespace: 
private enum DateTimeFormatInfoScanner.FoundDatePattern // TypeDefIndex: 552
{
	// Fields
	public int value__; // 0x0
	public const DateTimeFormatInfoScanner.FoundDatePattern None = 0; // 0x0
	public const DateTimeFormatInfoScanner.FoundDatePattern FoundYearPatternFlag = 1; // 0x0
	public const DateTimeFormatInfoScanner.FoundDatePattern FoundMonthPatternFlag = 2; // 0x0
	public const DateTimeFormatInfoScanner.FoundDatePattern FoundDayPatternFlag = 4; // 0x0
	public const DateTimeFormatInfoScanner.FoundDatePattern FoundYMDPatternFlag = 7; // 0x0
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum DateTimeStyles // TypeDefIndex: 553
{
	// Fields
	public int value__; // 0x0
	public const DateTimeStyles None = 0; // 0x0
	public const DateTimeStyles AllowLeadingWhite = 1; // 0x0
	public const DateTimeStyles AllowTrailingWhite = 2; // 0x0
	public const DateTimeStyles AllowInnerWhite = 4; // 0x0
	public const DateTimeStyles AllowWhiteSpaces = 7; // 0x0
	public const DateTimeStyles NoCurrentDateDefault = 8; // 0x0
	public const DateTimeStyles AdjustToUniversal = 16; // 0x0
	public const DateTimeStyles AssumeLocal = 32; // 0x0
	public const DateTimeStyles AssumeUniversal = 64; // 0x0
	public const DateTimeStyles RoundtripKind = 128; // 0x0
}

// Namespace: System.Globalization
[Serializable]
public class GregorianCalendar : Calendar // TypeDefIndex: 554
{
	// Fields
	internal GregorianCalendarTypes m_type; // 0x20
	internal static readonly int[] DaysToMonth365; // 0x0
	internal static readonly int[] DaysToMonth366; // 0x8
	private static Calendar s_defaultInstance; // 0x10

	// Properties
	public override DateTime MinSupportedDateTime { get; }
	public override DateTime MaxSupportedDateTime { get; }
	internal override int ID { get; }
	public override int[] Eras { get; }
	public override int TwoDigitYearMax { get; }

	// Methods
	[OnDeserializedAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x769950 Offset: 0x768150 VA: 0x180769950
	private void OnDeserialized(StreamingContext ctx) { }
	// RVA: 0x769A60 Offset: 0x768260 VA: 0x180769A60 Slot: 5
	public override DateTime get_MinSupportedDateTime() { }
	// RVA: 0x769B00 Offset: 0x768300 VA: 0x180769B00 Slot: 6
	public override DateTime get_MaxSupportedDateTime() { }
	// RVA: 0x769BA0 Offset: 0x7683A0 VA: 0x180769BA0
	internal static Calendar GetDefaultInstance() { }
	// RVA: 0x769CD0 Offset: 0x7684D0 VA: 0x180769CD0
	public void .ctor() { }
	// RVA: 0x769CE0 Offset: 0x7684E0 VA: 0x180769CE0
	public void .ctor(GregorianCalendarTypes type) { }
	// RVA: 0x197B20 Offset: 0x196320 VA: 0x180197B20 Slot: 7
	internal override int get_ID() { }
	// RVA: 0x769E50 Offset: 0x768650 VA: 0x180769E50 Slot: 28
	internal virtual int GetDatePart(long ticks, int part) { }
	// RVA: 0x76A080 Offset: 0x768880 VA: 0x18076A080 Slot: 11
	public override int GetDayOfMonth(DateTime time) { }
	// RVA: 0x76A0B0 Offset: 0x7688B0 VA: 0x18076A0B0 Slot: 12
	public override DayOfWeek GetDayOfWeek(DateTime time) { }
	// RVA: 0x76A100 Offset: 0x768900 VA: 0x18076A100 Slot: 13
	public override int GetDaysInMonth(int year, int month, int era) { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 14
	public override int GetEra(DateTime time) { }
	// RVA: 0x76A410 Offset: 0x768C10 VA: 0x18076A410 Slot: 15
	public override int[] get_Eras() { }
	// RVA: 0x76A4B0 Offset: 0x768CB0 VA: 0x18076A4B0 Slot: 16
	public override int GetMonth(DateTime time) { }
	// RVA: 0x76A4E0 Offset: 0x768CE0 VA: 0x18076A4E0 Slot: 17
	public override int GetMonthsInYear(int year, int era) { }
	// RVA: 0x76A680 Offset: 0x768E80 VA: 0x18076A680 Slot: 18
	public override int GetYear(DateTime time) { }
	// RVA: 0x76A6B0 Offset: 0x768EB0 VA: 0x18076A6B0 Slot: 20
	public override bool IsLeapYear(int year, int era) { }
	// RVA: 0x76A880 Offset: 0x769080 VA: 0x18076A880 Slot: 21
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }
	// RVA: 0x76A9B0 Offset: 0x7691B0 VA: 0x18076A9B0 Slot: 22
	internal override bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, out DateTime result) { }
	// RVA: 0x76AAF0 Offset: 0x7692F0 VA: 0x18076AAF0 Slot: 26
	public override int get_TwoDigitYearMax() { }
	// RVA: 0x76AB20 Offset: 0x769320 VA: 0x18076AB20 Slot: 27
	public override int ToFourDigitYear(int year) { }
	// RVA: 0x76AD80 Offset: 0x769580 VA: 0x18076AD80
	private static void .cctor() { }
}

// Namespace: System.Globalization
[Serializable]
internal class EraInfo // TypeDefIndex: 555
{
	// Fields
	internal int era; // 0x10
	internal long ticks; // 0x18
	internal int yearOffset; // 0x20
	internal int minEraYear; // 0x24
	internal int maxEraYear; // 0x28
	[OptionalFieldAttribute] // RVA: 0xD9890 Offset: 0xD8C90 VA: 0x1800D9890
	internal string eraName; // 0x30
	[OptionalFieldAttribute] // RVA: 0xD9890 Offset: 0xD8C90 VA: 0x1800D9890
	internal string abbrevEraName; // 0x38
	[OptionalFieldAttribute] // RVA: 0xD9890 Offset: 0xD8C90 VA: 0x1800D9890
	internal string englishEraName; // 0x40

	// Methods
	// RVA: 0x4901E0 Offset: 0x48E9E0 VA: 0x1804901E0
	internal void .ctor(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear) { }
	// RVA: 0x490250 Offset: 0x48EA50 VA: 0x180490250
	internal void .ctor(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear, string eraName, string abbrevEraName, string englishEraName) { }
}

// Namespace: System.Globalization
[Serializable]
internal class GregorianCalendarHelper // TypeDefIndex: 556
{
	// Fields
	internal static readonly int[] DaysToMonth365; // 0x0
	internal static readonly int[] DaysToMonth366; // 0x8
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal int m_maxYear; // 0x10
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal int m_minYear; // 0x14
	internal Calendar m_Cal; // 0x18
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal EraInfo[] m_EraInfo; // 0x20
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal int[] m_eras; // 0x28
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal DateTime m_minDate; // 0x30

	// Properties
	public int[] Eras { get; }

	// Methods
	// RVA: 0x76AE60 Offset: 0x769660 VA: 0x18076AE60
	internal void .ctor(Calendar cal, EraInfo[] eraInfo) { }
	// RVA: 0x76AF00 Offset: 0x769700 VA: 0x18076AF00
	internal int GetGregorianYear(int year, int era) { }
	// RVA: 0x76B1D0 Offset: 0x7699D0 VA: 0x18076B1D0
	internal bool IsValidYear(int year, int era) { }
	// RVA: 0x76B280 Offset: 0x769A80 VA: 0x18076B280 Slot: 4
	internal virtual int GetDatePart(long ticks, int part) { }
	// RVA: 0x76B4D0 Offset: 0x769CD0 VA: 0x18076B4D0
	internal static long GetAbsoluteDate(int year, int month, int day) { }
	// RVA: 0x76B710 Offset: 0x769F10 VA: 0x18076B710
	internal static long DateToTicks(int year, int month, int day) { }
	// RVA: 0x76B7D0 Offset: 0x769FD0 VA: 0x18076B7D0
	internal static long TimeToTicks(int hour, int minute, int second, int millisecond) { }
	// RVA: 0x76B9B0 Offset: 0x76A1B0 VA: 0x18076B9B0
	internal void CheckTicksRange(long ticks) { }
	// RVA: 0x76BB90 Offset: 0x76A390 VA: 0x18076BB90
	public int GetDayOfMonth(DateTime time) { }
	// RVA: 0x76BBC0 Offset: 0x76A3C0 VA: 0x18076BBC0
	public DayOfWeek GetDayOfWeek(DateTime time) { }
	// RVA: 0x76BC30 Offset: 0x76A430 VA: 0x18076BC30
	public int GetDaysInMonth(int year, int month, int era) { }
	// RVA: 0x76BE20 Offset: 0x76A620 VA: 0x18076BE20
	public int GetEra(DateTime time) { }
	// RVA: 0x76BF30 Offset: 0x76A730 VA: 0x18076BF30
	public int[] get_Eras() { }
	// RVA: 0x76C120 Offset: 0x76A920 VA: 0x18076C120
	public int GetMonth(DateTime time) { }
	// RVA: 0x76C150 Offset: 0x76A950 VA: 0x18076C150
	public int GetMonthsInYear(int year, int era) { }
	// RVA: 0x76C170 Offset: 0x76A970 VA: 0x18076C170
	public int GetYear(DateTime time) { }
	// RVA: 0x76C2A0 Offset: 0x76AAA0 VA: 0x18076C2A0
	public bool IsLeapYear(int year, int era) { }
	// RVA: 0x76C310 Offset: 0x76AB10 VA: 0x18076C310
	public DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }
	// RVA: 0x76C4D0 Offset: 0x76ACD0 VA: 0x18076C4D0
	private static void .cctor() { }
}

// Namespace: System.Globalization
[Serializable]
public enum GregorianCalendarTypes // TypeDefIndex: 557
{
	// Fields
	public int value__; // 0x0
	public const GregorianCalendarTypes Localized = 1; // 0x0
	public const GregorianCalendarTypes USEnglish = 2; // 0x0
	public const GregorianCalendarTypes MiddleEastFrench = 9; // 0x0
	public const GregorianCalendarTypes Arabic = 10; // 0x0
	public const GregorianCalendarTypes TransliteratedEnglish = 11; // 0x0
	public const GregorianCalendarTypes TransliteratedFrench = 12; // 0x0
}

// Namespace: System.Globalization
internal struct HebrewNumberParsingContext // TypeDefIndex: 558
{
	// Fields
	internal HebrewNumber.HS state; // 0x0
	internal int result; // 0x4

	// Methods
	// RVA: 0x12A1C0 Offset: 0x1295C0 VA: 0x18012A1C0
	public void .ctor(int result) { }
}

// Namespace: System.Globalization
internal enum HebrewNumberParsingState // TypeDefIndex: 559
{
	// Fields
	public int value__; // 0x0
	public const HebrewNumberParsingState InvalidHebrewNumber = 0; // 0x0
	public const HebrewNumberParsingState NotHebrewDigit = 1; // 0x0
	public const HebrewNumberParsingState FoundEndOfHebrewNumber = 2; // 0x0
	public const HebrewNumberParsingState ContinueParsing = 3; // 0x0
}

// Namespace: System.Globalization
internal class HebrewNumber // TypeDefIndex: 560
{
	// Fields
	private static HebrewNumber.HebrewValue[] HebrewValues; // 0x0
	private static char maxHebrewNumberCh; // 0x8
	private static readonly HebrewNumber.HS[][] NumberPasingState; // 0x10

	// Methods
	// RVA: 0x774470 Offset: 0x772C70 VA: 0x180774470
	internal static string ToString(int Number) { }
	// RVA: 0x774890 Offset: 0x773090 VA: 0x180774890
	internal static HebrewNumberParsingState ParseByChar(char ch, ref HebrewNumberParsingContext context) { }
	// RVA: 0x774B00 Offset: 0x773300 VA: 0x180774B00
	internal static bool IsDigit(char ch) { }
	// RVA: 0x774C40 Offset: 0x773440 VA: 0x180774C40
	private static void .cctor() { }
}

// Namespace: 
private enum HebrewNumber.HebrewToken // TypeDefIndex: 561
{
	// Fields
	public int value__; // 0x0
	public const HebrewNumber.HebrewToken Invalid = -1; // 0x0
	public const HebrewNumber.HebrewToken Digit400 = 0; // 0x0
	public const HebrewNumber.HebrewToken Digit200_300 = 1; // 0x0
	public const HebrewNumber.HebrewToken Digit100 = 2; // 0x0
	public const HebrewNumber.HebrewToken Digit10 = 3; // 0x0
	public const HebrewNumber.HebrewToken Digit1 = 4; // 0x0
	public const HebrewNumber.HebrewToken Digit6_7 = 5; // 0x0
	public const HebrewNumber.HebrewToken Digit7 = 6; // 0x0
	public const HebrewNumber.HebrewToken Digit9 = 7; // 0x0
	public const HebrewNumber.HebrewToken SingleQuote = 8; // 0x0
	public const HebrewNumber.HebrewToken DoubleQuote = 9; // 0x0
}

// Namespace: 
private class HebrewNumber.HebrewValue // TypeDefIndex: 562
{
	// Fields
	internal HebrewNumber.HebrewToken token; // 0x10
	internal int value; // 0x14

	// Methods
	// RVA: 0x2716C0 Offset: 0x26FEC0 VA: 0x1802716C0
	internal void .ctor(HebrewNumber.HebrewToken token, int value) { }
}

// Namespace: 
internal enum HebrewNumber.HS // TypeDefIndex: 563
{
	// Fields
	public int value__; // 0x0
	public const HebrewNumber.HS _err = -1; // 0x0
	public const HebrewNumber.HS Start = 0; // 0x0
	public const HebrewNumber.HS S400 = 1; // 0x0
	public const HebrewNumber.HS S400_400 = 2; // 0x0
	public const HebrewNumber.HS S400_X00 = 3; // 0x0
	public const HebrewNumber.HS S400_X0 = 4; // 0x0
	public const HebrewNumber.HS X00_DQ = 5; // 0x0
	public const HebrewNumber.HS S400_X00_X0 = 6; // 0x0
	public const HebrewNumber.HS X0_DQ = 7; // 0x0
	public const HebrewNumber.HS X = 8; // 0x0
	public const HebrewNumber.HS X0 = 9; // 0x0
	public const HebrewNumber.HS X00 = 10; // 0x0
	public const HebrewNumber.HS S400_DQ = 11; // 0x0
	public const HebrewNumber.HS S400_400_DQ = 12; // 0x0
	public const HebrewNumber.HS S400_400_100 = 13; // 0x0
	public const HebrewNumber.HS S9 = 14; // 0x0
	public const HebrewNumber.HS X00_S9 = 15; // 0x0
	public const HebrewNumber.HS S9_DQ = 16; // 0x0
	public const HebrewNumber.HS END = 100; // 0x0
}

// Namespace: System.Globalization
[Serializable]
public class JapaneseCalendar : Calendar // TypeDefIndex: 564
{
	// Fields
	internal static readonly DateTime calendarMinValue; // 0x0
	internal static EraInfo[] japaneseEraInfo; // 0x8
	internal static Calendar s_defaultInstance; // 0x10
	internal GregorianCalendarHelper helper; // 0x20

	// Properties
	public override DateTime MinSupportedDateTime { get; }
	public override DateTime MaxSupportedDateTime { get; }
	internal override int ID { get; }
	public override int[] Eras { get; }
	public override int TwoDigitYearMax { get; }

	// Methods
	// RVA: 0x329EB0 Offset: 0x3286B0 VA: 0x180329EB0 Slot: 5
	public override DateTime get_MinSupportedDateTime() { }
	// RVA: 0x329F50 Offset: 0x328750 VA: 0x180329F50 Slot: 6
	public override DateTime get_MaxSupportedDateTime() { }
	// RVA: 0x329FF0 Offset: 0x3287F0 VA: 0x180329FF0
	internal static EraInfo[] GetEraInfo() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	private static EraInfo[] GetErasFromRegistry() { }
	// RVA: 0x32A4B0 Offset: 0x328CB0 VA: 0x18032A4B0
	internal static Calendar GetDefaultInstance() { }
	// RVA: 0x32A5E0 Offset: 0x328DE0 VA: 0x18032A5E0
	public void .ctor() { }
	// RVA: 0x32A7C0 Offset: 0x328FC0 VA: 0x18032A7C0 Slot: 7
	internal override int get_ID() { }
	// RVA: 0x32A7D0 Offset: 0x328FD0 VA: 0x18032A7D0 Slot: 13
	public override int GetDaysInMonth(int year, int month, int era) { }
	// RVA: 0x32A800 Offset: 0x329000 VA: 0x18032A800 Slot: 11
	public override int GetDayOfMonth(DateTime time) { }
	// RVA: 0x32A840 Offset: 0x329040 VA: 0x18032A840 Slot: 12
	public override DayOfWeek GetDayOfWeek(DateTime time) { }
	// RVA: 0x32A8B0 Offset: 0x3290B0 VA: 0x18032A8B0 Slot: 17
	public override int GetMonthsInYear(int year, int era) { }
	// RVA: 0x32A8E0 Offset: 0x3290E0 VA: 0x18032A8E0 Slot: 14
	public override int GetEra(DateTime time) { }
	// RVA: 0x32A900 Offset: 0x329100 VA: 0x18032A900 Slot: 16
	public override int GetMonth(DateTime time) { }
	// RVA: 0x32A940 Offset: 0x329140 VA: 0x18032A940 Slot: 18
	public override int GetYear(DateTime time) { }
	// RVA: 0x32A960 Offset: 0x329160 VA: 0x18032A960 Slot: 20
	public override bool IsLeapYear(int year, int era) { }
	// RVA: 0x32A980 Offset: 0x329180 VA: 0x18032A980 Slot: 21
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }
	// RVA: 0x32A9B0 Offset: 0x3291B0 VA: 0x18032A9B0 Slot: 27
	public override int ToFourDigitYear(int year) { }
	// RVA: 0x32AB70 Offset: 0x329370 VA: 0x18032AB70 Slot: 15
	public override int[] get_Eras() { }
	// RVA: 0x32AB90 Offset: 0x329390 VA: 0x18032AB90
	internal static string[] EraNames() { }
	// RVA: 0x32AD70 Offset: 0x329570 VA: 0x18032AD70
	internal static string[] AbbrevEraNames() { }
	// RVA: 0x32AF50 Offset: 0x329750 VA: 0x18032AF50
	internal static string[] EnglishEraNames() { }
	// RVA: 0x32B130 Offset: 0x329930 VA: 0x18032B130 Slot: 23
	internal override bool IsValidYear(int year, int era) { }
	// RVA: 0x32B1E0 Offset: 0x3299E0 VA: 0x18032B1E0 Slot: 26
	public override int get_TwoDigitYearMax() { }
	// RVA: 0x32B210 Offset: 0x329A10 VA: 0x18032B210
	private static void .cctor() { }
}

// Namespace: System.Globalization
[Serializable]
public sealed class NumberFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 565
{
	// Fields
	private static NumberFormatInfo invariantInfo; // 0x0
	internal int[] numberGroupSizes; // 0x10
	internal int[] currencyGroupSizes; // 0x18
	internal int[] percentGroupSizes; // 0x20
	internal string positiveSign; // 0x28
	internal string negativeSign; // 0x30
	internal string numberDecimalSeparator; // 0x38
	internal string numberGroupSeparator; // 0x40
	internal string currencyGroupSeparator; // 0x48
	internal string currencyDecimalSeparator; // 0x50
	internal string currencySymbol; // 0x58
	internal string ansiCurrencySymbol; // 0x60
	internal string nanSymbol; // 0x68
	internal string positiveInfinitySymbol; // 0x70
	internal string negativeInfinitySymbol; // 0x78
	internal string percentDecimalSeparator; // 0x80
	internal string percentGroupSeparator; // 0x88
	internal string percentSymbol; // 0x90
	internal string perMilleSymbol; // 0x98
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal string[] nativeDigits; // 0xA0
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal int m_dataItem; // 0xA8
	internal int numberDecimalDigits; // 0xAC
	internal int currencyDecimalDigits; // 0xB0
	internal int currencyPositivePattern; // 0xB4
	internal int currencyNegativePattern; // 0xB8
	internal int numberNegativePattern; // 0xBC
	internal int percentPositivePattern; // 0xC0
	internal int percentNegativePattern; // 0xC4
	internal int percentDecimalDigits; // 0xC8
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal int digitSubstitution; // 0xCC
	internal bool isReadOnly; // 0xD0
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal bool m_useUserOverride; // 0xD1
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	internal bool m_isInvariant; // 0xD2
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal bool validForParseAsNumber; // 0xD3
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal bool validForParseAsCurrency; // 0xD4
	private const NumberStyles InvalidNumberStyles = -1024; // 0x0

	// Properties
	public static NumberFormatInfo InvariantInfo { get; }
	public int[] CurrencyGroupSizes { get; }
	public int[] NumberGroupSizes { get; }
	public int[] PercentGroupSizes { get; }
	public static NumberFormatInfo CurrentInfo { get; }

	// Methods
	// RVA: 0x74D240 Offset: 0x74BA40 VA: 0x18074D240
	public void .ctor() { }
	[OnSerializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x74D250 Offset: 0x74BA50 VA: 0x18074D250
	private void OnSerializing(StreamingContext ctx) { }
	[OnDeserializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void OnDeserializing(StreamingContext ctx) { }
	[OnDeserializedAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void OnDeserialized(StreamingContext ctx) { }
	// RVA: 0x74D510 Offset: 0x74BD10 VA: 0x18074D510
	internal void .ctor(CultureData cultureData) { }
	// RVA: 0x74DB10 Offset: 0x74C310 VA: 0x18074DB10
	public static NumberFormatInfo get_InvariantInfo() { }
	// RVA: 0x74DC90 Offset: 0x74C490 VA: 0x18074DC90
	public static NumberFormatInfo GetInstance(IFormatProvider formatProvider) { }
	// RVA: 0x74DE10 Offset: 0x74C610 VA: 0x18074DE10 Slot: 4
	public object Clone() { }
	// RVA: 0x74DEC0 Offset: 0x74C6C0 VA: 0x18074DEC0
	public int[] get_CurrencyGroupSizes() { }
	// RVA: 0x74DF80 Offset: 0x74C780 VA: 0x18074DF80
	public int[] get_NumberGroupSizes() { }
	// RVA: 0x74E040 Offset: 0x74C840 VA: 0x18074E040
	public int[] get_PercentGroupSizes() { }
	// RVA: 0x74E100 Offset: 0x74C900 VA: 0x18074E100
	public static NumberFormatInfo get_CurrentInfo() { }
	// RVA: 0x74E230 Offset: 0x74CA30 VA: 0x18074E230 Slot: 5
	public object GetFormat(Type formatType) { }
	// RVA: 0x74E2F0 Offset: 0x74CAF0 VA: 0x18074E2F0
	public static NumberFormatInfo ReadOnly(NumberFormatInfo nfi) { }
	// RVA: 0x74E3F0 Offset: 0x74CBF0 VA: 0x18074E3F0
	internal static void ValidateParseStyleInteger(NumberStyles style) { }
	// RVA: 0x74E500 Offset: 0x74CD00 VA: 0x18074E500
	internal static void ValidateParseStyleFloatingPoint(NumberStyles style) { }
}

// Namespace: System.Globalization
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum NumberStyles // TypeDefIndex: 566
{
	// Fields
	public int value__; // 0x0
	public const NumberStyles None = 0; // 0x0
	public const NumberStyles AllowLeadingWhite = 1; // 0x0
	public const NumberStyles AllowTrailingWhite = 2; // 0x0
	public const NumberStyles AllowLeadingSign = 4; // 0x0
	public const NumberStyles AllowTrailingSign = 8; // 0x0
	public const NumberStyles AllowParentheses = 16; // 0x0
	public const NumberStyles AllowDecimalPoint = 32; // 0x0
	public const NumberStyles AllowThousands = 64; // 0x0
	public const NumberStyles AllowExponent = 128; // 0x0
	public const NumberStyles AllowCurrencySymbol = 256; // 0x0
	public const NumberStyles AllowHexSpecifier = 512; // 0x0
	public const NumberStyles Integer = 7; // 0x0
	public const NumberStyles HexNumber = 515; // 0x0
	public const NumberStyles Number = 111; // 0x0
	public const NumberStyles Float = 167; // 0x0
	public const NumberStyles Currency = 383; // 0x0
	public const NumberStyles Any = 511; // 0x0
}

// Namespace: System.Globalization
[Serializable]
public sealed class SortVersion // TypeDefIndex: 567
{
	// Fields
	private int m_NlsVersion; // 0x10
	private Guid m_SortId; // 0x14
}

// Namespace: System.Globalization
[Serializable]
public class TaiwanCalendar : Calendar // TypeDefIndex: 568
{
	// Fields
	internal static EraInfo[] taiwanEraInfo; // 0x0
	internal static Calendar s_defaultInstance; // 0x8
	internal GregorianCalendarHelper helper; // 0x20
	internal static readonly DateTime calendarMinValue; // 0x10

	// Properties
	public override DateTime MinSupportedDateTime { get; }
	public override DateTime MaxSupportedDateTime { get; }
	internal override int ID { get; }
	public override int[] Eras { get; }
	public override int TwoDigitYearMax { get; }

	// Methods
	// RVA: 0x3906D0 Offset: 0x38EED0 VA: 0x1803906D0
	internal static Calendar GetDefaultInstance() { }
	// RVA: 0x390800 Offset: 0x38F000 VA: 0x180390800 Slot: 5
	public override DateTime get_MinSupportedDateTime() { }
	// RVA: 0x3908A0 Offset: 0x38F0A0 VA: 0x1803908A0 Slot: 6
	public override DateTime get_MaxSupportedDateTime() { }
	// RVA: 0x390940 Offset: 0x38F140 VA: 0x180390940
	public void .ctor() { }
	// RVA: 0x390B30 Offset: 0x38F330 VA: 0x180390B30 Slot: 7
	internal override int get_ID() { }
	// RVA: 0x32A7D0 Offset: 0x328FD0 VA: 0x18032A7D0 Slot: 13
	public override int GetDaysInMonth(int year, int month, int era) { }
	// RVA: 0x32A800 Offset: 0x329000 VA: 0x18032A800 Slot: 11
	public override int GetDayOfMonth(DateTime time) { }
	// RVA: 0x32A840 Offset: 0x329040 VA: 0x18032A840 Slot: 12
	public override DayOfWeek GetDayOfWeek(DateTime time) { }
	// RVA: 0x32A8B0 Offset: 0x3290B0 VA: 0x18032A8B0 Slot: 17
	public override int GetMonthsInYear(int year, int era) { }
	// RVA: 0x32A8E0 Offset: 0x3290E0 VA: 0x18032A8E0 Slot: 14
	public override int GetEra(DateTime time) { }
	// RVA: 0x32A900 Offset: 0x329100 VA: 0x18032A900 Slot: 16
	public override int GetMonth(DateTime time) { }
	// RVA: 0x32A940 Offset: 0x329140 VA: 0x18032A940 Slot: 18
	public override int GetYear(DateTime time) { }
	// RVA: 0x32A960 Offset: 0x329160 VA: 0x18032A960 Slot: 20
	public override bool IsLeapYear(int year, int era) { }
	// RVA: 0x32A980 Offset: 0x329180 VA: 0x18032A980 Slot: 21
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) { }
	// RVA: 0x32AB70 Offset: 0x329370 VA: 0x18032AB70 Slot: 15
	public override int[] get_Eras() { }
	// RVA: 0x390B40 Offset: 0x38F340 VA: 0x180390B40 Slot: 26
	public override int get_TwoDigitYearMax() { }
	// RVA: 0x390B70 Offset: 0x38F370 VA: 0x180390B70 Slot: 27
	public override int ToFourDigitYear(int year) { }
	// RVA: 0x390D30 Offset: 0x38F530 VA: 0x180390D30
	private static void .cctor() { }
}

// Namespace: System.Globalization
[Serializable]
public class TextInfo : ICloneable, IDeserializationCallback // TypeDefIndex: 569
{
	// Fields
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	private string m_listSeparator; // 0x10
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	private bool m_isReadOnly; // 0x18
	[OptionalFieldAttribute] // RVA: 0xD9BB0 Offset: 0xD8FB0 VA: 0x1800D9BB0
	private string m_cultureName; // 0x20
	private CultureData m_cultureData; // 0x28
	private string m_textInfoName; // 0x30
	private Nullable<bool> m_IsAsciiCasingSameAsInvariant; // 0x38
	internal static TextInfo s_Invariant; // 0x0
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	private string customCultureName; // 0x40
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal int m_nDataItem; // 0x48
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal bool m_useUserOverride; // 0x4C
	[OptionalFieldAttribute] // RVA: 0xD9B30 Offset: 0xD8F30 VA: 0x1800D9B30
	internal int m_win32LangID; // 0x50
	private const int wordSeparatorMask = 536672256; // 0x0

	// Properties
	internal static TextInfo Invariant { get; }
	private bool IsAsciiCasingSameAsInvariant { get; }

	// Methods
	// RVA: 0x3A2EF0 Offset: 0x3A16F0 VA: 0x1803A2EF0
	internal static TextInfo get_Invariant() { }
	// RVA: 0x3A2FD0 Offset: 0x3A17D0 VA: 0x1803A2FD0
	internal void .ctor(CultureData cultureData) { }
	[OnDeserializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x3A3000 Offset: 0x3A1800 VA: 0x1803A3000
	private void OnDeserializing(StreamingContext ctx) { }
	// RVA: 0x3A3010 Offset: 0x3A1810 VA: 0x1803A3010
	private void OnDeserialized() { }
	[OnDeserializedAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x3A3150 Offset: 0x3A1950 VA: 0x1803A3150
	private void OnDeserialized(StreamingContext ctx) { }
	[OnSerializingAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x3A3160 Offset: 0x3A1960 VA: 0x1803A3160
	private void OnSerializing(StreamingContext ctx) { }
	// RVA: 0x3A3220 Offset: 0x3A1A20 VA: 0x1803A3220
	internal static int GetHashCodeOrdinalIgnoreCase(string s) { }
	// RVA: 0x3A3260 Offset: 0x3A1A60 VA: 0x1803A3260
	internal static int GetHashCodeOrdinalIgnoreCase(string s, bool forceRandomizedHashing, long additionalEntropy) { }
	// RVA: 0x3A32C0 Offset: 0x3A1AC0 VA: 0x1803A32C0
	internal static int CompareOrdinalIgnoreCase(string str1, string str2) { }
	// RVA: 0x3A3300 Offset: 0x3A1B00 VA: 0x1803A3300
	internal static int CompareOrdinalIgnoreCaseEx(string strA, int indexA, string strB, int indexB, int lengthA, int lengthB) { }
	// RVA: 0x3A3310 Offset: 0x3A1B10 VA: 0x1803A3310
	internal static int IndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count) { }
	// RVA: 0x3A33E0 Offset: 0x3A1BE0 VA: 0x1803A33E0
	internal static int LastIndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count) { }
	// RVA: 0x3A34A0 Offset: 0x3A1CA0 VA: 0x1803A34A0 Slot: 6
	public virtual object Clone() { }
	// RVA: 0x3A35B0 Offset: 0x3A1DB0 VA: 0x1803A35B0 Slot: 7
	public virtual char ToLower(char c) { }
	// RVA: 0x3A3610 Offset: 0x3A1E10 VA: 0x1803A3610 Slot: 8
	public virtual string ToLower(string str) { }
	// RVA: 0x3A3790 Offset: 0x3A1F90 VA: 0x1803A3790
	private static char ToLowerAsciiInvariant(char c) { }
	// RVA: 0x3A37B0 Offset: 0x3A1FB0 VA: 0x1803A37B0 Slot: 9
	public virtual char ToUpper(char c) { }
	// RVA: 0x3A3810 Offset: 0x3A2010 VA: 0x1803A3810 Slot: 10
	public virtual string ToUpper(string str) { }
	// RVA: 0x3A3990 Offset: 0x3A2190 VA: 0x1803A3990
	private static char ToUpperAsciiInvariant(char c) { }
	// RVA: 0x3A39B0 Offset: 0x3A21B0 VA: 0x1803A39B0
	private static bool IsAscii(char c) { }
	// RVA: 0x3A39C0 Offset: 0x3A21C0 VA: 0x1803A39C0
	private bool get_IsAsciiCasingSameAsInvariant() { }
	// RVA: 0x3A3B80 Offset: 0x3A2380 VA: 0x1803A3B80 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x3A3C70 Offset: 0x3A2470 VA: 0x1803A3C70 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x3A3CA0 Offset: 0x3A24A0 VA: 0x1803A3CA0 Slot: 3
	public override string ToString() { }
	// RVA: 0x3A3150 Offset: 0x3A1950 VA: 0x1803A3150 Slot: 5
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }
	// RVA: 0x3A3D30 Offset: 0x3A2530 VA: 0x1803A3D30
	internal int GetCaseInsensitiveHashCode(string str) { }
	// RVA: 0x3A3D50 Offset: 0x3A2550 VA: 0x1803A3D50
	internal int GetCaseInsensitiveHashCode(string str, bool forceRandomizedHashing, long additionalEntropy) { }
	// RVA: 0x3A4030 Offset: 0x3A2830 VA: 0x1803A4030
	private int GetInvariantCaseInsensitiveHashCode(string str) { }
	// RVA: 0x3A4170 Offset: 0x3A2970 VA: 0x1803A4170
	private string ToUpperInternal(string str) { }
	// RVA: 0x3A4270 Offset: 0x3A2A70 VA: 0x1803A4270
	private string ToLowerInternal(string str) { }
	// RVA: 0x3A4370 Offset: 0x3A2B70 VA: 0x1803A4370
	private char ToUpperInternal(char c) { }
	// RVA: 0x3A4AD0 Offset: 0x3A32D0 VA: 0x1803A4AD0
	private char ToLowerInternal(char c) { }
	// RVA: 0x3A5170 Offset: 0x3A3970 VA: 0x1803A5170
	private static int InternalCompareStringOrdinalIgnoreCase(string strA, int indexA, string strB, int indexB, int lenA, int lenB) { }
	// RVA: 0x3A5340 Offset: 0x3A3B40 VA: 0x1803A5340
	internal void .ctor() { }
}

// Namespace: System.Globalization
internal static class TimeSpanFormat // TypeDefIndex: 570
{
	// Fields
	internal static readonly TimeSpanFormat.FormatLiterals PositiveInvariantFormatLiterals; // 0x0
	internal static readonly TimeSpanFormat.FormatLiterals NegativeInvariantFormatLiterals; // 0x28

	// Methods
	// RVA: 0x495140 Offset: 0x493940 VA: 0x180495140
	private static string IntToString(int n, int digits) { }
	// RVA: 0x495170 Offset: 0x493970 VA: 0x180495170
	internal static string Format(TimeSpan value, string format, IFormatProvider formatProvider) { }
	// RVA: 0x495450 Offset: 0x493C50 VA: 0x180495450
	private static string FormatStandard(TimeSpan value, bool isInvariant, string format, TimeSpanFormat.Pattern pattern) { }
	// RVA: 0x495AD0 Offset: 0x4942D0 VA: 0x180495AD0
	internal static string FormatCustomized(TimeSpan value, string format, DateTimeFormatInfo dtfi) { }
	// RVA: 0x4965D0 Offset: 0x494DD0 VA: 0x1804965D0
	private static void .cctor() { }
}

// Namespace: 
internal enum TimeSpanFormat.Pattern // TypeDefIndex: 571
{
	// Fields
	public int value__; // 0x0
	public const TimeSpanFormat.Pattern None = 0; // 0x0
	public const TimeSpanFormat.Pattern Minimum = 1; // 0x0
	public const TimeSpanFormat.Pattern Full = 2; // 0x0
}

// Namespace: 
internal struct TimeSpanFormat.FormatLiterals // TypeDefIndex: 572
{
	// Fields
	internal string AppCompatLiteral; // 0x0
	internal int dd; // 0x8
	internal int hh; // 0xC
	internal int mm; // 0x10
	internal int ss; // 0x14
	internal int ff; // 0x18
	private string[] literals; // 0x20

	// Properties
	internal string Start { get; }
	internal string DayHourSep { get; }
	internal string HourMinuteSep { get; }
	internal string MinuteSecondSep { get; }
	internal string SecondFractionSep { get; }
	internal string End { get; }

	// Methods
	// RVA: 0xBDF0 Offset: 0xB1F0 VA: 0x18000BDF0
	internal string get_Start() { }
	// RVA: 0xBE30 Offset: 0xB230 VA: 0x18000BE30
	internal string get_DayHourSep() { }
	// RVA: 0xBE70 Offset: 0xB270 VA: 0x18000BE70
	internal string get_HourMinuteSep() { }
	// RVA: 0xBEB0 Offset: 0xB2B0 VA: 0x18000BEB0
	internal string get_MinuteSecondSep() { }
	// RVA: 0xBEF0 Offset: 0xB2F0 VA: 0x18000BEF0
	internal string get_SecondFractionSep() { }
	// RVA: 0xBF30 Offset: 0xB330 VA: 0x18000BF30
	internal string get_End() { }
	// RVA: 0x27A830 Offset: 0x279030 VA: 0x18027A830
	internal static TimeSpanFormat.FormatLiterals InitInvariant(bool isNegative) { }
	// RVA: 0xBF70 Offset: 0xB370 VA: 0x18000BF70
	internal void Init(string format, bool useInvariantFieldLengths) { }
}

// Namespace: System.Globalization
[Serializable]
public enum UnicodeCategory // TypeDefIndex: 573
{
	// Fields
	public int value__; // 0x0
	public const UnicodeCategory UppercaseLetter = 0; // 0x0
	public const UnicodeCategory LowercaseLetter = 1; // 0x0
	public const UnicodeCategory TitlecaseLetter = 2; // 0x0
	public const UnicodeCategory ModifierLetter = 3; // 0x0
	public const UnicodeCategory OtherLetter = 4; // 0x0
	public const UnicodeCategory NonSpacingMark = 5; // 0x0
	public const UnicodeCategory SpacingCombiningMark = 6; // 0x0
	public const UnicodeCategory EnclosingMark = 7; // 0x0
	public const UnicodeCategory DecimalDigitNumber = 8; // 0x0
	public const UnicodeCategory LetterNumber = 9; // 0x0
	public const UnicodeCategory OtherNumber = 10; // 0x0
	public const UnicodeCategory SpaceSeparator = 11; // 0x0
	public const UnicodeCategory LineSeparator = 12; // 0x0
	public const UnicodeCategory ParagraphSeparator = 13; // 0x0
	public const UnicodeCategory Control = 14; // 0x0
	public const UnicodeCategory Format = 15; // 0x0
	public const UnicodeCategory Surrogate = 16; // 0x0
	public const UnicodeCategory PrivateUse = 17; // 0x0
	public const UnicodeCategory ConnectorPunctuation = 18; // 0x0
	public const UnicodeCategory DashPunctuation = 19; // 0x0
	public const UnicodeCategory OpenPunctuation = 20; // 0x0
	public const UnicodeCategory ClosePunctuation = 21; // 0x0
	public const UnicodeCategory InitialQuotePunctuation = 22; // 0x0
	public const UnicodeCategory FinalQuotePunctuation = 23; // 0x0
	public const UnicodeCategory OtherPunctuation = 24; // 0x0
	public const UnicodeCategory MathSymbol = 25; // 0x0
	public const UnicodeCategory CurrencySymbol = 26; // 0x0
	public const UnicodeCategory ModifierSymbol = 27; // 0x0
	public const UnicodeCategory OtherSymbol = 28; // 0x0
	public const UnicodeCategory OtherNotAssigned = 29; // 0x0
}

// Namespace: System.Globalization
[Serializable]
public class SortKey // TypeDefIndex: 574
{
	// Fields
	private readonly string source; // 0x10
	private readonly byte[] key; // 0x18
	private readonly CompareOptions options; // 0x20
	private readonly int lcid; // 0x24

	// Methods
	// RVA: 0x1E5500 Offset: 0x1E3D00 VA: 0x1801E5500
	public static int Compare(SortKey sortkey1, SortKey sortkey2) { }
	// RVA: 0x1E56D0 Offset: 0x1E3ED0 VA: 0x1801E56D0
	internal void .ctor(int lcid, string source, CompareOptions opt) { }
	// RVA: 0x1E56E0 Offset: 0x1E3EE0 VA: 0x1801E56E0
	internal void .ctor(int lcid, string source, byte[] buffer, CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength) { }
	// RVA: 0x1E5700 Offset: 0x1E3F00 VA: 0x1801E5700 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x1E58D0 Offset: 0x1E40D0 VA: 0x1801E58D0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1E5960 Offset: 0x1E4160 VA: 0x1801E5960 Slot: 3
	public override string ToString() { }
	// RVA: 0x1E5C30 Offset: 0x1E4430 VA: 0x1801E5C30
	internal void .ctor() { }
}

// Namespace: System.Globalization
internal class CultureData // TypeDefIndex: 575
{
	// Fields
	private string sAM1159; // 0x10
	private string sPM2359; // 0x18
	private string sTimeSeparator; // 0x20
	private string[] saLongTimes; // 0x28
	private string[] saShortTimes; // 0x30
	private int iFirstDayOfWeek; // 0x38
	private int iFirstWeekOfYear; // 0x3C
	private int[] waCalendars; // 0x40
	private CalendarData[] calendars; // 0x48
	private string sISO639Language; // 0x50
	private readonly string sRealName; // 0x58
	private bool bUseOverrides; // 0x60
	private int calendarId; // 0x64
	private int numberIndex; // 0x68
	private int iDefaultAnsiCodePage; // 0x6C
	private int iDefaultOemCodePage; // 0x70
	private int iDefaultMacCodePage; // 0x74
	private int iDefaultEbcdicCodePage; // 0x78
	private bool isRightToLeft; // 0x7C
	private string sListSeparator; // 0x80
	private static CultureData s_Invariant; // 0x0

	// Properties
	public static CultureData Invariant { get; }
	internal string[] LongTimes { get; }
	internal string[] ShortTimes { get; }
	internal int[] CalendarIds { get; }
	internal bool IsInvariantCulture { get; }

	// Methods
	// RVA: 0x3120D0 Offset: 0x3108D0 VA: 0x1803120D0
	private void .ctor(string name) { }
	// RVA: 0x3FA160 Offset: 0x3F8960 VA: 0x1803FA160
	public static CultureData get_Invariant() { }
	// RVA: 0x3FA570 Offset: 0x3F8D70 VA: 0x1803FA570
	public static CultureData GetCultureData(string cultureName, bool useUserOverride) { }
	// RVA: 0x3FA650 Offset: 0x3F8E50 VA: 0x1803FA650
	public static CultureData GetCultureData(string cultureName, bool useUserOverride, int datetimeIndex, int calendarId, int numberIndex, string iso2lang, int ansiCodePage, int oemCodePage, int macCodePage, int ebcdicCodePage, bool rightToLeft, string listSeparator) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	internal static CultureData GetCultureData(int culture, bool bUseUserOverride) { }
	// RVA: 0x3FA850 Offset: 0x3F9050 VA: 0x1803FA850
	private void fill_culture_data(int datetimeIndex) { }
	// RVA: 0x3FA950 Offset: 0x3F9150 VA: 0x1803FA950
	public CalendarData GetCalendar(int calendarId) { }
	// RVA: 0x3FAAC0 Offset: 0x3F92C0 VA: 0x1803FAAC0
	internal string[] get_LongTimes() { }
	// RVA: 0x3FAAD0 Offset: 0x3F92D0 VA: 0x1803FAAD0
	internal string[] get_ShortTimes() { }
	// RVA: 0x3FAAE0 Offset: 0x3F92E0 VA: 0x1803FAAE0
	internal int[] get_CalendarIds() { }
	// RVA: 0x3FAD80 Offset: 0x3F9580 VA: 0x1803FAD80
	internal bool get_IsInvariantCulture() { }
	// RVA: 0x3FADA0 Offset: 0x3F95A0 VA: 0x1803FADA0
	internal string[] EraNames(int calendarId) { }
	// RVA: 0x3FADC0 Offset: 0x3F95C0 VA: 0x1803FADC0
	internal string[] AbbrevEraNames(int calendarId) { }
	// RVA: 0x3FADE0 Offset: 0x3F95E0 VA: 0x1803FADE0
	internal string[] AbbreviatedEnglishEraNames(int calendarId) { }
	// RVA: 0x3FAE00 Offset: 0x3F9600 VA: 0x1803FAE00
	internal string[] ShortDates(int calendarId) { }
	// RVA: 0x3FAE20 Offset: 0x3F9620 VA: 0x1803FAE20
	internal string[] LongDates(int calendarId) { }
	// RVA: 0x3FAE40 Offset: 0x3F9640 VA: 0x1803FAE40
	internal string[] YearMonths(int calendarId) { }
	// RVA: 0x3FAE60 Offset: 0x3F9660 VA: 0x1803FAE60
	internal string[] DayNames(int calendarId) { }
	// RVA: 0x3FAE80 Offset: 0x3F9680 VA: 0x1803FAE80
	internal string[] AbbreviatedDayNames(int calendarId) { }
	// RVA: 0x3FAEA0 Offset: 0x3F96A0 VA: 0x1803FAEA0
	internal string[] MonthNames(int calendarId) { }
	// RVA: 0x3FAEC0 Offset: 0x3F96C0 VA: 0x1803FAEC0
	internal string[] GenitiveMonthNames(int calendarId) { }
	// RVA: 0x3FAEE0 Offset: 0x3F96E0 VA: 0x1803FAEE0
	internal string[] AbbreviatedMonthNames(int calendarId) { }
	// RVA: 0x3FAF00 Offset: 0x3F9700 VA: 0x1803FAF00
	internal string[] AbbreviatedGenitiveMonthNames(int calendarId) { }
	// RVA: 0x3FAF30 Offset: 0x3F9730 VA: 0x1803FAF30
	internal string[] LeapYearMonthNames(int calendarId) { }
	// RVA: 0x3FAF60 Offset: 0x3F9760 VA: 0x1803FAF60
	internal string MonthDay(int calendarId) { }
	// RVA: 0x3FAF80 Offset: 0x3F9780 VA: 0x1803FAF80
	internal string DateSeparator(int calendarId) { }
	// RVA: 0x3FB040 Offset: 0x3F9840 VA: 0x1803FB040
	private static string GetDateSeparator(string format) { }
	// RVA: 0x3FB0C0 Offset: 0x3F98C0 VA: 0x1803FB0C0
	private static string GetSeparator(string format, string timeParts) { }
	// RVA: 0x3FB320 Offset: 0x3F9B20 VA: 0x1803FB320
	private static int IndexOfTimePart(string format, int startIndex, string timeParts) { }
	// RVA: 0x3FB410 Offset: 0x3F9C10 VA: 0x1803FB410
	private static string UnescapeNlsString(string str, int start, int end) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	internal static string[] ReescapeWin32Strings(string[] array) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	internal static string ReescapeWin32String(string str) { }
	// RVA: 0x3FB5E0 Offset: 0x3F9DE0 VA: 0x1803FB5E0
	internal void GetNFIValues(NumberFormatInfo nfi) { }
	// RVA: 0x3FB640 Offset: 0x3F9E40 VA: 0x1803FB640
	private static void fill_number_data(NumberFormatInfo nfi, int numberIndex) { }
}

// Namespace: System.Globalization
[Serializable]
internal class CodePageDataItem // TypeDefIndex: 576
{
	// Fields
	internal int m_dataIndex; // 0x10
	internal int m_uiFamilyCodePage; // 0x14
	internal uint m_flags; // 0x18
	private static readonly char[] sep; // 0x0

	// Methods
	// RVA: 0x2581D0 Offset: 0x2569D0 VA: 0x1802581D0
	internal void .ctor(int dataIndex) { }
	// RVA: 0x2582E0 Offset: 0x256AE0 VA: 0x1802582E0
	private static void .cctor() { }
}

// Namespace: System.Globalization
internal static class EncodingTable // TypeDefIndex: 577
{
	// Fields
	internal static InternalEncodingDataItem[] encodingDataPtr; // 0x0
	internal static InternalCodePageDataItem[] codePageDataPtr; // 0x8
	private static int lastEncodingItem; // 0x10
	private static Hashtable hashByName; // 0x18
	private static Hashtable hashByCodePage; // 0x20

	// Methods
	// RVA: 0x47F940 Offset: 0x47E140 VA: 0x18047F940
	private static int GetNumEncodingItems() { }
	// RVA: 0x47F9F0 Offset: 0x47E1F0 VA: 0x18047F9F0
	private static InternalEncodingDataItem ENC(string name, ushort cp) { }
	// RVA: 0x47FA10 Offset: 0x47E210 VA: 0x18047FA10
	private static InternalCodePageDataItem MapCodePageDataItem(ushort cp, ushort fcp, string names, uint flags) { }
	// RVA: 0x47FA30 Offset: 0x47E230 VA: 0x18047FA30
	private static void .cctor() { }
	// RVA: 0x487D10 Offset: 0x486510 VA: 0x180487D10
	private static int internalGetCodePageFromName(string name) { }
	// RVA: 0x488220 Offset: 0x486A20 VA: 0x180488220
	internal static int GetCodePageFromName(string name) { }
	// RVA: 0x4883E0 Offset: 0x486BE0 VA: 0x1804883E0
	internal static CodePageDataItem GetCodePageDataItem(int codepage) { }
}

// Namespace: System.Globalization
internal struct InternalEncodingDataItem // TypeDefIndex: 578
{
	// Fields
	internal string webName; // 0x0
	internal ushort codePage; // 0x8
}

// Namespace: System.Globalization
internal struct InternalCodePageDataItem // TypeDefIndex: 579
{
	// Fields
	internal ushort codePage; // 0x0
	internal ushort uiFamilyCodePage; // 0x2
	internal uint flags; // 0x4
	internal string Names; // 0x8
}

// Namespace: System.Globalization
internal static class TextInfoToUpperData // TypeDefIndex: 580
{
	// Fields
	public static readonly char[] range_00e0_0586; // 0x0
	public static readonly char[] range_1e01_1ff3; // 0x8
	public static readonly char[] range_2170_2184; // 0x10
	public static readonly char[] range_24d0_24e9; // 0x18
	public static readonly char[] range_2c30_2ce3; // 0x20
	public static readonly char[] range_2d00_2d25; // 0x28
	public static readonly char[] range_a641_a697; // 0x30
	public static readonly char[] range_a723_a78c; // 0x38

	// Methods
	// RVA: 0x3A55D0 Offset: 0x3A3DD0 VA: 0x1803A55D0
	private static void .cctor() { }
}

// Namespace: System.Globalization
internal static class TextInfoToLowerData // TypeDefIndex: 581
{
	// Fields
	public static readonly char[] range_00c0_0556; // 0x0
	public static readonly char[] range_10a0_10c5; // 0x8
	public static readonly char[] range_1e00_1ffc; // 0x10
	public static readonly char[] range_2160_216f; // 0x18
	public static readonly char[] range_24b6_24cf; // 0x20
	public static readonly char[] range_2c00_2c2e; // 0x28
	public static readonly char[] range_2c60_2ce2; // 0x30
	public static readonly char[] range_a640_a696; // 0x38
	public static readonly char[] range_a722_a78b; // 0x40

	// Methods
	// RVA: 0x3A5370 Offset: 0x3A3B70 VA: 0x1803A5370
	private static void .cctor() { }
}

// Namespace: System.Globalization
[Serializable]
public class CultureInfo : ICloneable, IFormatProvider // TypeDefIndex: 582
{
	// Fields
	private static CultureInfo invariant_culture_info; // 0x0
	private static object shared_table_lock; // 0x8
	private static CultureInfo default_current_culture; // 0x10
	private bool m_isReadOnly; // 0x10
	private int cultureID; // 0x14
	private int parent_lcid; // 0x18
	private int datetime_index; // 0x1C
	private int number_index; // 0x20
	private int default_calendar_type; // 0x24
	private bool m_useUserOverride; // 0x28
	internal NumberFormatInfo numInfo; // 0x30
	internal DateTimeFormatInfo dateTimeInfo; // 0x38
	private TextInfo textInfo; // 0x40
	internal string m_name; // 0x48
	private string englishname; // 0x50
	private string nativename; // 0x58
	private string iso3lang; // 0x60
	private string iso2lang; // 0x68
	private string win3lang; // 0x70
	private string territory; // 0x78
	private string[] native_calendar_names; // 0x80
	private CompareInfo compareInfo; // 0x88
	private readonly void* textinfo_data; // 0x90
	private int m_dataItem; // 0x98
	private Calendar calendar; // 0xA0
	private CultureInfo parent_culture; // 0xA8
	private bool constructed; // 0xB0
	internal byte[] cached_serialized_form; // 0xB8
	internal CultureData m_cultureData; // 0xC0
	internal bool m_isInherited; // 0xC8
	internal const int InvariantCultureId = 127; // 0x0
	private const int CalendarTypeBits = 8; // 0x0
	private const string MSG_READONLY = "This instance is read only"; // 0x0
	private static CultureInfo s_DefaultThreadCurrentUICulture; // 0x18
	private static CultureInfo s_DefaultThreadCurrentCulture; // 0x20
	private static Dictionary<int, CultureInfo> shared_by_number; // 0x28
	private static Dictionary<string, CultureInfo> shared_by_name; // 0x30
	internal static readonly bool IsTaiwanSku; // 0x38

	// Properties
	public static CultureInfo InvariantCulture { get; }
	public static CultureInfo CurrentCulture { get; }
	public static CultureInfo CurrentUICulture { get; }
	public virtual Calendar Calendar { get; }
	public virtual CultureInfo Parent { get; }
	public virtual TextInfo TextInfo { get; }
	public virtual CompareInfo CompareInfo { get; }
	public virtual bool IsNeutralCulture { get; }
	public virtual NumberFormatInfo NumberFormat { get; set; }
	public virtual DateTimeFormatInfo DateTimeFormat { get; set; }
	public virtual string EnglishName { get; }
	internal int CalendarType { get; }
	public static CultureInfo DefaultThreadCurrentCulture { get; }
	public static CultureInfo DefaultThreadCurrentUICulture { get; }
	internal static CultureInfo UserDefaultUICulture { get; }
	internal static CultureInfo UserDefaultCulture { get; }

	// Methods
	// RVA: 0x3FB650 Offset: 0x3F9E50 VA: 0x1803FB650
	public static CultureInfo get_InvariantCulture() { }
	// RVA: 0x3FB6F0 Offset: 0x3F9EF0 VA: 0x1803FB6F0
	public static CultureInfo get_CurrentCulture() { }
	// RVA: 0x3FB720 Offset: 0x3F9F20 VA: 0x1803FB720
	public static CultureInfo get_CurrentUICulture() { }
	// RVA: 0x3FB750 Offset: 0x3F9F50 VA: 0x1803FB750
	internal static CultureInfo ConstructCurrentCulture() { }
	// RVA: 0x3FB990 Offset: 0x3FA190 VA: 0x1803FB990
	internal static CultureInfo ConstructCurrentUICulture() { }
	// RVA: 0x3FBA20 Offset: 0x3FA220 VA: 0x1803FBA20 Slot: 6
	public virtual Calendar get_Calendar() { }
	// RVA: 0x3FBAF0 Offset: 0x3FA2F0 VA: 0x1803FBAF0 Slot: 7
	public virtual CultureInfo get_Parent() { }
	// RVA: 0x3FBD50 Offset: 0x3FA550 VA: 0x1803FBD50 Slot: 8
	public virtual TextInfo get_TextInfo() { }
	// RVA: 0x3FBF40 Offset: 0x3FA740 VA: 0x1803FBF40 Slot: 9
	public virtual object Clone() { }
	// RVA: 0x3FC160 Offset: 0x3FA960 VA: 0x1803FC160 Slot: 0
	public override bool Equals(object value) { }
	// RVA: 0x3FC2E0 Offset: 0x3FAAE0 VA: 0x1803FC2E0
	private CultureInfo.Data GetTextInfoData() { }
	// RVA: 0x2E4C30 Offset: 0x2E3430 VA: 0x1802E4C30 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0 Slot: 3
	public override string ToString() { }
	// RVA: 0x3FC300 Offset: 0x3FAB00 VA: 0x1803FC300 Slot: 10
	public virtual CompareInfo get_CompareInfo() { }
	// RVA: 0x3FC4D0 Offset: 0x3FACD0 VA: 0x1803FC4D0 Slot: 11
	public virtual bool get_IsNeutralCulture() { }
	// RVA: 0x3FC550 Offset: 0x3FAD50 VA: 0x1803FC550 Slot: 12
	public virtual NumberFormatInfo get_NumberFormat() { }
	// RVA: 0x3FC630 Offset: 0x3FAE30 VA: 0x1803FC630 Slot: 13
	public virtual void set_NumberFormat(NumberFormatInfo value) { }
	// RVA: 0x3FC780 Offset: 0x3FAF80 VA: 0x1803FC780 Slot: 14
	public virtual DateTimeFormatInfo get_DateTimeFormat() { }
	// RVA: 0x3FC8B0 Offset: 0x3FB0B0 VA: 0x1803FC8B0 Slot: 15
	public virtual void set_DateTimeFormat(DateTimeFormatInfo value) { }
	// RVA: 0x3FCA00 Offset: 0x3FB200 VA: 0x1803FCA00 Slot: 16
	public virtual string get_EnglishName() { }
	// RVA: 0x3FCA70 Offset: 0x3FB270 VA: 0x1803FCA70 Slot: 17
	public virtual object GetFormat(Type formatType) { }
	// RVA: 0x3FCBB0 Offset: 0x3FB3B0 VA: 0x1803FCBB0
	private void Construct() { }
	// RVA: 0x3FCC10 Offset: 0x3FB410 VA: 0x1803FCC10
	private bool construct_internal_locale_from_lcid(int lcid) { }
	// RVA: 0x3FCC70 Offset: 0x3FB470 VA: 0x1803FCC70
	private bool construct_internal_locale_from_name(string name) { }
	// RVA: 0x3FCD80 Offset: 0x3FB580 VA: 0x1803FCD80
	private static string get_current_locale_name() { }
	// RVA: 0x3FCE00 Offset: 0x3FB600 VA: 0x1803FCE00
	private void ConstructInvariant(bool read_only) { }
	// RVA: 0x3FCF40 Offset: 0x3FB740 VA: 0x1803FCF40
	private TextInfo CreateTextInfo(bool readOnly) { }
	// RVA: 0x3FCFF0 Offset: 0x3FB7F0 VA: 0x1803FCFF0
	public void .ctor(int culture) { }
	// RVA: 0x3FD010 Offset: 0x3FB810 VA: 0x1803FD010
	public void .ctor(int culture, bool useUserOverride) { }
	// RVA: 0x3FD030 Offset: 0x3FB830 VA: 0x1803FD030
	private void .ctor(int culture, bool useUserOverride, bool read_only) { }
	// RVA: 0x3FD2E0 Offset: 0x3FBAE0 VA: 0x1803FD2E0
	public void .ctor(string name) { }
	// RVA: 0x3FD300 Offset: 0x3FBB00 VA: 0x1803FD300
	public void .ctor(string name, bool useUserOverride) { }
	// RVA: 0x3FD320 Offset: 0x3FBB20 VA: 0x1803FD320
	private void .ctor(string name, bool useUserOverride, bool read_only) { }
	// RVA: 0x3FD5B0 Offset: 0x3FBDB0 VA: 0x1803FD5B0
	private void .ctor() { }
	// RVA: 0x3FD5C0 Offset: 0x3FBDC0 VA: 0x1803FD5C0
	private static void insert_into_shared_tables(CultureInfo c) { }
	// RVA: 0x3FD7D0 Offset: 0x3FBFD0 VA: 0x1803FD7D0
	public static CultureInfo GetCultureInfo(int culture) { }
	// RVA: 0x3FDB50 Offset: 0x3FC350 VA: 0x1803FDB50
	public static CultureInfo GetCultureInfo(string name) { }
	// RVA: 0x3FDED0 Offset: 0x3FC6D0 VA: 0x1803FDED0
	internal static CultureInfo CreateCulture(string name, bool reference) { }
	// RVA: 0x3FDFA0 Offset: 0x3FC7A0 VA: 0x1803FDFA0
	public static CultureInfo CreateSpecificCulture(string name) { }
	// RVA: 0x3FE2A0 Offset: 0x3FCAA0 VA: 0x1803FE2A0
	private static CultureInfo CreateSpecificCultureFromNeutral(string name) { }
	// RVA: 0x400010 Offset: 0x3FE810 VA: 0x180400010
	internal int get_CalendarType() { }
	// RVA: 0x4000F0 Offset: 0x3FE8F0 VA: 0x1804000F0
	private static Calendar CreateCalendar(int calendarType) { }
	// RVA: 0x4002C0 Offset: 0x3FEAC0 VA: 0x1804002C0
	private static Exception CreateNotFoundException(string name) { }
	// RVA: 0x400390 Offset: 0x3FEB90 VA: 0x180400390
	public static CultureInfo get_DefaultThreadCurrentCulture() { }
	// RVA: 0x400430 Offset: 0x3FEC30 VA: 0x180400430
	public static CultureInfo get_DefaultThreadCurrentUICulture() { }
	// RVA: 0x4004D0 Offset: 0x3FECD0 VA: 0x1804004D0
	internal static CultureInfo get_UserDefaultUICulture() { }
	// RVA: 0x4005E0 Offset: 0x3FEDE0 VA: 0x1804005E0
	internal static CultureInfo get_UserDefaultCulture() { }
	// RVA: 0x400670 Offset: 0x3FEE70 VA: 0x180400670
	internal static void CheckDomainSafetyObject(object obj, object container) { }
	// RVA: 0x400870 Offset: 0x3FF070 VA: 0x180400870
	private static void .cctor() { }
}

// Namespace: 
private struct CultureInfo.Data // TypeDefIndex: 583
{
	// Fields
	public int ansi; // 0x0
	public int ebcdic; // 0x4
	public int mac; // 0x8
	public int oem; // 0xC
	public bool right_to_left; // 0x10
	public byte list_sep; // 0x11
}

// Namespace: System.Globalization
public sealed class IdnMapping // TypeDefIndex: 584
{
	// Fields
	private bool allow_unassigned; // 0x10
	private bool use_std3; // 0x11
	private Punycode puny; // 0x18

	// Methods
	// RVA: 0x7763F0 Offset: 0x774BF0 VA: 0x1807763F0
	public void .ctor() { }
	// RVA: 0x7764B0 Offset: 0x774CB0 VA: 0x1807764B0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x776570 Offset: 0x774D70 VA: 0x180776570 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x776590 Offset: 0x774D90 VA: 0x180776590
	public string GetAscii(string unicode) { }
	// RVA: 0x776700 Offset: 0x774F00 VA: 0x180776700
	public string GetAscii(string unicode, int index, int count) { }
	// RVA: 0x776870 Offset: 0x775070 VA: 0x180776870
	private string Convert(string input, int index, int count, bool toAscii) { }
	// RVA: 0x776BA0 Offset: 0x7753A0 VA: 0x180776BA0
	private string ToAscii(string s, int offset) { }
	// RVA: 0x777000 Offset: 0x775800 VA: 0x180777000
	private void VerifyLength(string s, int offset) { }
	// RVA: 0x777140 Offset: 0x775940 VA: 0x180777140
	private string NamePrep(string s, int offset) { }
	// RVA: 0x7772B0 Offset: 0x775AB0 VA: 0x1807772B0
	private void VerifyProhibitedCharacters(string s, int offset) { }
	// RVA: 0x7774E0 Offset: 0x775CE0 VA: 0x1807774E0
	private void VerifyStd3AsciiRules(string s, int offset) { }
	// RVA: 0x777730 Offset: 0x775F30 VA: 0x180777730
	public string GetUnicode(string ascii) { }
	// RVA: 0x7778A0 Offset: 0x7760A0 VA: 0x1807778A0
	public string GetUnicode(string ascii, int index, int count) { }
	// RVA: 0x777A10 Offset: 0x776210 VA: 0x180777A10
	private string ToUnicode(string s, int offset) { }
}

// Namespace: System.Globalization
internal class Bootstring // TypeDefIndex: 585
{
	// Fields
	private readonly char delimiter; // 0x10
	private readonly int base_num; // 0x14
	private readonly int tmin; // 0x18
	private readonly int tmax; // 0x1C
	private readonly int skew; // 0x20
	private readonly int damp; // 0x24
	private readonly int initial_bias; // 0x28
	private readonly int initial_n; // 0x2C

	// Methods
	// RVA: 0x2437E0 Offset: 0x241FE0 VA: 0x1802437E0
	public void .ctor(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN) { }
	// RVA: 0x243810 Offset: 0x242010 VA: 0x180243810
	public string Encode(string s, int offset) { }
	// RVA: 0x243C90 Offset: 0x242490 VA: 0x180243C90
	private char EncodeDigit(int d) { }
	// RVA: 0x243CB0 Offset: 0x2424B0 VA: 0x180243CB0
	private int DecodeDigit(char c) { }
	// RVA: 0x243CE0 Offset: 0x2424E0 VA: 0x180243CE0
	private int Adapt(int delta, int numPoints, bool firstTime) { }
	// RVA: 0x243D50 Offset: 0x242550 VA: 0x180243D50
	public string Decode(string s, int offset) { }
}

// Namespace: System.Globalization
internal class Punycode : Bootstring // TypeDefIndex: 586
{
	// Methods
	// RVA: 0x31D590 Offset: 0x31BD90 VA: 0x18031D590
	public void .ctor() { }
}

// Namespace: System.Globalization
[Serializable]
public class RegionInfo // TypeDefIndex: 587
{
	// Fields
	private static RegionInfo currentRegion; // 0x0
	private int regionId; // 0x10
	private string iso2Name; // 0x18
	private string iso3Name; // 0x20
	private string win3Name; // 0x28
	private string englishName; // 0x30
	private string nativeName; // 0x38
	private string currencySymbol; // 0x40
	private string isoCurrencySymbol; // 0x48
	private string currencyEnglishName; // 0x50
	private string currencyNativeName; // 0x58
}

// Namespace: System.Threading
public struct CancellationToken // TypeDefIndex: 588
{
	// Fields
	private CancellationTokenSource m_source; // 0x0
	private static readonly Action<object> s_ActionToActionObjShunt; // 0x0

	// Properties
	public static CancellationToken None { get; }
	public bool IsCancellationRequested { get; }
	public bool CanBeCanceled { get; }

	// Methods
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	public static CancellationToken get_None() { }
	// RVA: 0x9E80 Offset: 0x9280 VA: 0x180009E80
	public bool get_IsCancellationRequested() { }
	// RVA: 0x9EA0 Offset: 0x92A0 VA: 0x180009EA0
	public bool get_CanBeCanceled() { }
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	internal void .ctor(CancellationTokenSource source) { }
	// RVA: 0x24DC40 Offset: 0x24C440 VA: 0x18024DC40
	private static void ActionToActionObjShunt(object obj) { }
	// RVA: 0x9EC0 Offset: 0x92C0 VA: 0x180009EC0
	internal CancellationTokenRegistration InternalRegisterWithoutEC(Action<object> callback, object state) { }
	// RVA: 0x9F00 Offset: 0x9300 VA: 0x180009F00
	private CancellationTokenRegistration Register(Action<object> callback, object state, bool useSynchronizationContext, bool useExecutionContext) { }
	// RVA: 0x9F30 Offset: 0x9330 VA: 0x180009F30
	public bool Equals(CancellationToken other) { }
	// RVA: 0x9F40 Offset: 0x9340 VA: 0x180009F40 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0xA010 Offset: 0x9410 VA: 0x18000A010 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x24DFB0 Offset: 0x24C7B0 VA: 0x18024DFB0
	public static bool op_Equality(CancellationToken left, CancellationToken right) { }
	// RVA: 0x24DFD0 Offset: 0x24C7D0 VA: 0x18024DFD0
	public static bool op_Inequality(CancellationToken left, CancellationToken right) { }
	// RVA: 0xA0E0 Offset: 0x94E0 VA: 0x18000A0E0
	public void ThrowIfCancellationRequested() { }
	// RVA: 0xA110 Offset: 0x9510 VA: 0x18000A110
	internal void ThrowIfSourceDisposed() { }
	// RVA: 0xA120 Offset: 0x9520 VA: 0x18000A120
	private void ThrowOperationCanceledException() { }
	// RVA: 0x24E100 Offset: 0x24C900 VA: 0x18024E100
	private static void ThrowObjectDisposedException() { }
	// RVA: 0x24E170 Offset: 0x24C970 VA: 0x18024E170
	private static void .cctor() { }
}

// Namespace: System.Threading
public struct CancellationTokenRegistration : IEquatable<CancellationTokenRegistration>, IDisposable // TypeDefIndex: 589
{
	// Fields
	private readonly CancellationCallbackInfo m_callbackInfo; // 0x0
	private readonly SparselyPopulatedArrayAddInfo<CancellationCallbackInfo> m_registrationInfo; // 0x8

	// Methods
	// RVA: 0xA150 Offset: 0x9550 VA: 0x18000A150
	internal void .ctor(CancellationCallbackInfo callbackInfo, SparselyPopulatedArrayAddInfo<CancellationCallbackInfo> registrationInfo) { }
	// RVA: 0xA160 Offset: 0x9560 VA: 0x18000A160
	internal bool TryDeregister() { }
	// RVA: 0xA170 Offset: 0x9570 VA: 0x18000A170 Slot: 5
	public void Dispose() { }
	// RVA: 0xA180 Offset: 0x9580 VA: 0x18000A180 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0xA190 Offset: 0x9590 VA: 0x18000A190 Slot: 4
	public bool Equals(CancellationTokenRegistration other) { }
	// RVA: 0xA1F0 Offset: 0x95F0 VA: 0x18000A1F0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Threading
public class CancellationTokenSource : IDisposable // TypeDefIndex: 590
{
	// Fields
	private static readonly CancellationTokenSource _staticSource_Set; // 0x0
	private static readonly CancellationTokenSource _staticSource_NotCancelable; // 0x8
	private static readonly int s_nLists; // 0x10
	private ManualResetEvent m_kernelEvent; // 0x10
	private SparselyPopulatedArray<CancellationCallbackInfo>[] m_registeredCallbacksLists; // 0x18
	private const int CANNOT_BE_CANCELED = 0; // 0x0
	private const int NOT_CANCELED = 1; // 0x0
	private const int NOTIFYING = 2; // 0x0
	private const int NOTIFYINGCOMPLETE = 3; // 0x0
	private int m_state; // 0x20
	private int m_threadIDExecutingCallbacks; // 0x24
	private bool m_disposed; // 0x28
	private CancellationTokenRegistration[] m_linkingRegistrations; // 0x30
	private static readonly Action<object> s_LinkedTokenCancelDelegate; // 0x18
	private CancellationCallbackInfo m_executingCallback; // 0x38
	private Timer m_timer; // 0x40
	private static readonly TimerCallback s_timerCallback; // 0x20

	// Properties
	public bool IsCancellationRequested { get; }
	internal bool IsCancellationCompleted { get; }
	internal int ThreadIDExecutingCallbacks { get; set; }
	public CancellationToken Token { get; }
	internal bool CanBeCanceled { get; }
	internal CancellationCallbackInfo ExecutingCallback { get; }

	// Methods
	// RVA: 0x24E470 Offset: 0x24CC70 VA: 0x18024E470
	private static void LinkedTokenCancelDelegate(object source) { }
	// RVA: 0x24E570 Offset: 0x24CD70 VA: 0x18024E570
	public bool get_IsCancellationRequested() { }
	// RVA: 0x24E580 Offset: 0x24CD80 VA: 0x18024E580
	internal bool get_IsCancellationCompleted() { }
	// RVA: 0x24E590 Offset: 0x24CD90 VA: 0x18024E590
	internal void set_ThreadIDExecutingCallbacks(int value) { }
	// RVA: 0x24E5A0 Offset: 0x24CDA0 VA: 0x18024E5A0
	internal int get_ThreadIDExecutingCallbacks() { }
	// RVA: 0x24E5B0 Offset: 0x24CDB0 VA: 0x18024E5B0
	public CancellationToken get_Token() { }
	// RVA: 0x24E5D0 Offset: 0x24CDD0 VA: 0x18024E5D0
	internal bool get_CanBeCanceled() { }
	// RVA: 0x24E5E0 Offset: 0x24CDE0 VA: 0x18024E5E0
	internal CancellationCallbackInfo get_ExecutingCallback() { }
	// RVA: 0x24E5F0 Offset: 0x24CDF0 VA: 0x18024E5F0
	public void .ctor() { }
	// RVA: 0x24E610 Offset: 0x24CE10 VA: 0x18024E610
	private void .ctor(bool set) { }
	// RVA: 0x24E630 Offset: 0x24CE30 VA: 0x18024E630
	public void Cancel() { }
	// RVA: 0x24E660 Offset: 0x24CE60 VA: 0x18024E660
	public void Cancel(bool throwOnFirstException) { }
	// RVA: 0x24E690 Offset: 0x24CE90 VA: 0x18024E690
	private static void TimerCallbackLogic(object obj) { }
	// RVA: 0x24E7A0 Offset: 0x24CFA0 VA: 0x18024E7A0 Slot: 4
	public void Dispose() { }
	// RVA: 0x24E850 Offset: 0x24D050 VA: 0x18024E850 Slot: 5
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x24E940 Offset: 0x24D140 VA: 0x18024E940
	internal void ThrowIfDisposed() { }
	// RVA: 0x24E9E0 Offset: 0x24D1E0 VA: 0x18024E9E0
	private static void ThrowObjectDisposedException() { }
	// RVA: 0x24EA50 Offset: 0x24D250 VA: 0x18024EA50
	internal static CancellationTokenSource InternalGetStaticSource(bool set) { }
	// RVA: 0x24EB20 Offset: 0x24D320 VA: 0x18024EB20
	internal CancellationTokenRegistration InternalRegister(Action<object> callback, object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext executionContext) { }
	// RVA: 0x24EE90 Offset: 0x24D690 VA: 0x18024EE90
	private void NotifyCancellation(bool throwOnFirstException) { }
	// RVA: 0x24EFD0 Offset: 0x24D7D0 VA: 0x18024EFD0
	private void ExecuteCallbackHandlers(bool throwOnFirstException) { }
	// RVA: 0x24F3E0 Offset: 0x24DBE0 VA: 0x18024F3E0
	private void CancellationCallbackCoreWork_OnSyncContext(object obj) { }
	// RVA: 0x24F4A0 Offset: 0x24DCA0 VA: 0x18024F4A0
	private void CancellationCallbackCoreWork(CancellationCallbackCoreWorkArguments args) { }
	// RVA: 0x24F5A0 Offset: 0x24DDA0 VA: 0x18024F5A0
	public static CancellationTokenSource CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2) { }
	// RVA: 0x24F7F0 Offset: 0x24DFF0 VA: 0x18024F7F0
	internal void WaitForCallbackToComplete(CancellationCallbackInfo callbackInfo) { }
	// RVA: 0x24FBA0 Offset: 0x24E3A0 VA: 0x18024FBA0
	private static void .cctor() { }
}

// Namespace: System.Threading
internal struct CancellationCallbackCoreWorkArguments // TypeDefIndex: 591
{
	// Fields
	internal SparselyPopulatedArrayFragment<CancellationCallbackInfo> m_currArrayFragment; // 0x0
	internal int m_currArrayIndex; // 0x8

	// Methods
	// RVA: 0x9E50 Offset: 0x9250 VA: 0x180009E50
	public void .ctor(SparselyPopulatedArrayFragment<CancellationCallbackInfo> currArrayFragment, int currArrayIndex) { }
}

// Namespace: System.Threading
internal class CancellationCallbackInfo // TypeDefIndex: 592
{
	// Fields
	internal readonly Action<object> Callback; // 0x10
	internal readonly object StateForCallback; // 0x18
	internal readonly SynchronizationContext TargetSyncContext; // 0x20
	internal readonly ExecutionContext TargetExecutionContext; // 0x28
	internal readonly CancellationTokenSource CancellationTokenSource; // 0x30
	private static ContextCallback s_executionContextCallback; // 0x0

	// Methods
	// RVA: 0x24D960 Offset: 0x24C160 VA: 0x18024D960
	internal void .ctor(Action<object> callback, object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext targetExecutionContext, CancellationTokenSource cancellationTokenSource) { }
	// RVA: 0x24D980 Offset: 0x24C180 VA: 0x18024D980
	internal void ExecuteCallback() { }
	// RVA: 0x24DB50 Offset: 0x24C350 VA: 0x18024DB50
	private static void ExecutionContextCallback(object obj) { }
}

// Namespace: System.Threading
internal class SparselyPopulatedArray<T> // TypeDefIndex: 593
{
	// Fields
	private SparselyPopulatedArrayFragment<T> m_tail; // 0x0

	// Properties
	internal SparselyPopulatedArrayFragment<T> Tail { get; }

	// Methods
	// RVA: 0x7BFA50 Offset: 0x7BE250 VA: 0x1807BFA50
	internal void .ctor(int initialSize) { }
	// RVA: 0x7BF3E0 Offset: 0x7BDBE0 VA: 0x1807BF3E0
	internal SparselyPopulatedArrayFragment<T> get_Tail() { }
	// RVA: 0x7BFAE0 Offset: 0x7BE2E0 VA: 0x1807BFAE0
	internal SparselyPopulatedArrayAddInfo<T> Add(T element) { }
}

// Namespace: System.Threading
internal struct SparselyPopulatedArrayAddInfo<T> // TypeDefIndex: 594
{
	// Fields
	private SparselyPopulatedArrayFragment<T> m_source; // 0x0
	private int m_index; // 0x0

	// Methods
	// RVA: 0x9E50 Offset: 0x9250 VA: 0x180009E50
	internal void .ctor(SparselyPopulatedArrayFragment<T> source, int index) { }
}

// Namespace: System.Threading
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
internal class SparselyPopulatedArrayFragment<T> // TypeDefIndex: 595
{
	// Fields
	internal readonly T[] m_elements; // 0x0
	internal int m_freeCount; // 0x0
	internal SparselyPopulatedArrayFragment<T> m_next; // 0x0
	internal SparselyPopulatedArrayFragment<T> m_prev; // 0x0

	// Properties
	internal T Item { get; }
	internal int Length { get; }
	internal SparselyPopulatedArrayFragment<T> Prev { get; }

	// Methods
	// RVA: 0x7A1CA0 Offset: 0x7A04A0 VA: 0x1807A1CA0
	internal void .ctor(int size) { }
	// RVA: 0x7BF920 Offset: 0x7BE120 VA: 0x1807BF920
	internal void .ctor(int size, SparselyPopulatedArrayFragment<T> prev) { }
	// RVA: 0x7BF9A0 Offset: 0x7BE1A0 VA: 0x1807BF9A0
	internal T get_Item(int index) { }
	// RVA: 0x1E7080 Offset: 0x1E5880 VA: 0x1801E7080
	internal int get_Length() { }
	// RVA: 0x3FAAC0 Offset: 0x3F92C0 VA: 0x1803FAAC0
	internal SparselyPopulatedArrayFragment<T> get_Prev() { }
	// RVA: 0x7BF9E0 Offset: 0x7BE1E0 VA: 0x1807BF9E0
	internal T SafeAtomicRemove(int index, T expectedElement) { }
}

// Namespace: System.Threading
public static class LazyInitializer // TypeDefIndex: 596
{
	// Methods
	// RVA: 0x534680 Offset: 0x532E80 VA: 0x180534680
	public static T EnsureInitialized(ref T target, Func<T> valueFactory) { }
	// RVA: 0x5346B0 Offset: 0x532EB0 VA: 0x1805346B0
	private static T EnsureInitializedCore(ref T target, Func<T> valueFactory) { }
}

// Namespace: System.Threading
public class ManualResetEventSlim : IDisposable // TypeDefIndex: 597
{
	// Fields
	private const int DEFAULT_SPIN_SP = 1; // 0x0
	private const int DEFAULT_SPIN_MP = 10; // 0x0
	private object m_lock; // 0x10
	private ManualResetEvent m_eventObj; // 0x18
	private int m_combinedState; // 0x20
	private const int SignalledState_BitMask = -2147483648; // 0x0
	private const int SignalledState_ShiftCount = 31; // 0x0
	private const int Dispose_BitMask = 1073741824; // 0x0
	private const int SpinCountState_BitMask = 1073217536; // 0x0
	private const int SpinCountState_ShiftCount = 19; // 0x0
	private const int SpinCountState_MaxValue = 2047; // 0x0
	private const int NumWaitersState_BitMask = 524287; // 0x0
	private const int NumWaitersState_ShiftCount = 0; // 0x0
	private const int NumWaitersState_MaxValue = 524287; // 0x0
	private static Action<object> s_cancellationTokenCallback; // 0x0

	// Properties
	public WaitHandle WaitHandle { get; }
	public bool IsSet { get; set; }
	public int SpinCount { get; set; }
	private int Waiters { get; set; }

	// Methods
	// RVA: 0x3384E0 Offset: 0x336CE0 VA: 0x1803384E0
	public WaitHandle get_WaitHandle() { }
	// RVA: 0x338520 Offset: 0x336D20 VA: 0x180338520
	public bool get_IsSet() { }
	// RVA: 0x3385C0 Offset: 0x336DC0 VA: 0x1803385C0
	private void set_IsSet(bool value) { }
	// RVA: 0x3385F0 Offset: 0x336DF0 VA: 0x1803385F0
	public int get_SpinCount() { }
	// RVA: 0x338690 Offset: 0x336E90 VA: 0x180338690
	private void set_SpinCount(int value) { }
	// RVA: 0x3386B0 Offset: 0x336EB0 VA: 0x1803386B0
	private int get_Waiters() { }
	// RVA: 0x338750 Offset: 0x336F50 VA: 0x180338750
	private void set_Waiters(int value) { }
	// RVA: 0x338850 Offset: 0x337050 VA: 0x180338850
	public void .ctor(bool initialState) { }
	// RVA: 0x3388B0 Offset: 0x3370B0 VA: 0x1803388B0
	public void .ctor(bool initialState, int spinCount) { }
	// RVA: 0x338A30 Offset: 0x337230 VA: 0x180338A30
	private void Initialize(bool initialState, int spinCount) { }
	// RVA: 0x338AA0 Offset: 0x3372A0 VA: 0x180338AA0
	private void EnsureLockObjectCreated() { }
	// RVA: 0x338B40 Offset: 0x337340 VA: 0x180338B40
	private bool LazyInitializeEvent() { }
	// RVA: 0x277C30 Offset: 0x276430 VA: 0x180277C30
	public void Set() { }
	// RVA: 0x338DA0 Offset: 0x3375A0 VA: 0x180338DA0
	private void Set(bool duringCancellation) { }
	// RVA: 0x339050 Offset: 0x337850 VA: 0x180339050
	public void Reset() { }
	// RVA: 0x3390B0 Offset: 0x3378B0 VA: 0x1803390B0
	public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { }
	// RVA: 0x3396E0 Offset: 0x337EE0 VA: 0x1803396E0 Slot: 4
	public void Dispose() { }
	// RVA: 0x339790 Offset: 0x337F90 VA: 0x180339790 Slot: 5
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x339890 Offset: 0x338090 VA: 0x180339890
	private void ThrowIfDisposed() { }
	// RVA: 0x339950 Offset: 0x338150 VA: 0x180339950
	private static void CancellationTokenCallback(object obj) { }
	// RVA: 0x339B60 Offset: 0x338360 VA: 0x180339B60
	private void UpdateStateAtomically(int newBits, int updateBitsMask) { }
	// RVA: 0x339C40 Offset: 0x338440 VA: 0x180339C40
	private static int ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount) { }
	// RVA: 0x339C50 Offset: 0x338450 VA: 0x180339C50
	private static int ExtractStatePortion(int state, int mask) { }
	// RVA: 0x339C60 Offset: 0x338460 VA: 0x180339C60
	private static void .cctor() { }
}

// Namespace: System.Threading
public class SemaphoreSlim : IDisposable // TypeDefIndex: 598
{
	// Fields
	private int m_currentCount; // 0x10
	private readonly int m_maxCount; // 0x14
	private int m_waitCount; // 0x18
	private object m_lockObj; // 0x20
	private ManualResetEvent m_waitHandle; // 0x28
	private SemaphoreSlim.TaskNode m_asyncHead; // 0x30
	private SemaphoreSlim.TaskNode m_asyncTail; // 0x38
	private static readonly Task<bool> s_trueTask; // 0x0
	private const int NO_MAXIMUM = 2147483647; // 0x0
	private static Action<object> s_cancellationTokenCanceledEventHandler; // 0x8

	// Methods
	// RVA: 0x388100 Offset: 0x386900 VA: 0x180388100
	public void .ctor(int initialCount, int maxCount) { }
	// RVA: 0x3882C0 Offset: 0x386AC0 VA: 0x1803882C0
	public void Wait() { }
	// RVA: 0x3882D0 Offset: 0x386AD0 VA: 0x1803882D0
	public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { }
	// RVA: 0x388A00 Offset: 0x387200 VA: 0x180388A00
	private bool WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, CancellationToken cancellationToken) { }
	// RVA: 0x388AB0 Offset: 0x3872B0 VA: 0x180388AB0
	public Task WaitAsync() { }
	// RVA: 0x388AC0 Offset: 0x3872C0 VA: 0x180388AC0
	public Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken) { }
	// RVA: 0x389050 Offset: 0x387850 VA: 0x180389050
	private SemaphoreSlim.TaskNode CreateAndAddAsyncWaiter() { }
	// RVA: 0x389210 Offset: 0x387A10 VA: 0x180389210
	private bool RemoveAsyncWaiter(SemaphoreSlim.TaskNode task) { }
	// RVA: 0x389290 Offset: 0x387A90 VA: 0x180389290
	private Task<bool> WaitUntilCountOrTimeoutAsync(SemaphoreSlim.TaskNode asyncWaiter, int millisecondsTimeout, CancellationToken cancellationToken) { }
	// RVA: 0x3893E0 Offset: 0x387BE0 VA: 0x1803893E0
	public int Release() { }
	// RVA: 0x3893F0 Offset: 0x387BF0 VA: 0x1803893F0
	public int Release(int releaseCount) { }
	// RVA: 0x3897C0 Offset: 0x387FC0 VA: 0x1803897C0
	private static void QueueWaiterTask(SemaphoreSlim.TaskNode waiterTask) { }
	// RVA: 0x3897D0 Offset: 0x387FD0 VA: 0x1803897D0 Slot: 4
	public void Dispose() { }
	// RVA: 0x389880 Offset: 0x388080 VA: 0x180389880 Slot: 5
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x3898F0 Offset: 0x3880F0 VA: 0x1803898F0
	private static void CancellationTokenCanceledEventHandler(object obj) { }
	// RVA: 0x389AF0 Offset: 0x3882F0 VA: 0x180389AF0
	private void CheckDispose() { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	private static string GetResourceString(string str) { }
	// RVA: 0x389BD0 Offset: 0x3883D0 VA: 0x180389BD0
	private static void .cctor() { }
}

// Namespace: 
private sealed class SemaphoreSlim.TaskNode : Task<bool>, IThreadPoolWorkItem // TypeDefIndex: 599
{
	// Fields
	internal SemaphoreSlim.TaskNode Prev; // 0x58
	internal SemaphoreSlim.TaskNode Next; // 0x60

	// Methods
	// RVA: 0x274FE0 Offset: 0x2737E0 VA: 0x180274FE0
	internal void .ctor() { }
	// RVA: 0x275100 Offset: 0x273900 VA: 0x180275100 Slot: 4
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }
}

// Namespace: 
private struct SemaphoreSlim.<WaitUntilCountOrTimeoutAsync>d__31 : IAsyncStateMachine // TypeDefIndex: 600
{
	// Fields
	public int <>1__state; // 0x0
	public AsyncTaskMethodBuilder<bool> <>t__builder; // 0x8
	public CancellationToken cancellationToken; // 0x20
	public SemaphoreSlim.TaskNode asyncWaiter; // 0x28
	public int millisecondsTimeout; // 0x30
	private CancellationTokenSource <cts>5__1; // 0x38
	public SemaphoreSlim <>4__this; // 0x40
	private object <>7__wrap1; // 0x48
	private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<Task> <>u__1; // 0x50
	private ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool> <>u__2; // 0x60

	// Methods
	// RVA: 0xBC30 Offset: 0xB030 VA: 0x18000BC30 Slot: 4
	private void MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0xBC40 Offset: 0xB040 VA: 0x18000BC40 Slot: 5
	private void SetStateMachine(IAsyncStateMachine stateMachine) { }
}

// Namespace: System.Threading
public struct SpinLock // TypeDefIndex: 601
{
	// Fields
	private int m_owner; // 0x0
	private static int MAXIMUM_WAITERS; // 0x0

	// Properties
	public bool IsHeldByCurrentThread { get; }
	public bool IsThreadOwnerTrackingEnabled { get; }

	// Methods
	// RVA: 0x7830 Offset: 0x6C30 VA: 0x180007830
	public void .ctor(bool enableThreadOwnerTracking) { }
	// RVA: 0x7860 Offset: 0x6C60 VA: 0x180007860
	public void Enter(ref bool lockTaken) { }
	// RVA: 0x7870 Offset: 0x6C70 VA: 0x180007870
	public void TryEnter(int millisecondsTimeout, ref bool lockTaken) { }
	// RVA: 0x7880 Offset: 0x6C80 VA: 0x180007880
	private void ContinueTryEnter(int millisecondsTimeout, ref bool lockTaken) { }
	// RVA: 0x7890 Offset: 0x6C90 VA: 0x180007890
	private void DecrementWaiters() { }
	// RVA: 0x78A0 Offset: 0x6CA0 VA: 0x1800078A0
	private void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ref bool lockTaken) { }
	// RVA: 0x78B0 Offset: 0x6CB0 VA: 0x1800078B0
	public void Exit(bool useMemoryBarrier) { }
	// RVA: 0x78C0 Offset: 0x6CC0 VA: 0x1800078C0
	private void ExitSlowPath(bool useMemoryBarrier) { }
	// RVA: 0x78D0 Offset: 0x6CD0 VA: 0x1800078D0
	public bool get_IsHeldByCurrentThread() { }
	// RVA: 0x78E0 Offset: 0x6CE0 VA: 0x1800078E0
	public bool get_IsThreadOwnerTrackingEnabled() { }
	// RVA: 0x1E8D80 Offset: 0x1E7580 VA: 0x1801E8D80
	private static void .cctor() { }
}

// Namespace: System.Threading
public struct SpinWait // TypeDefIndex: 602
{
	// Fields
	private int m_count; // 0x0

	// Properties
	public bool NextSpinWillYield { get; }

	// Methods
	// RVA: 0x78F0 Offset: 0x6CF0 VA: 0x1800078F0
	public bool get_NextSpinWillYield() { }
	// RVA: 0x7920 Offset: 0x6D20 VA: 0x180007920
	public void SpinOnce() { }
	// RVA: 0x7930 Offset: 0x6D30 VA: 0x180007930
	public void Reset() { }
}

// Namespace: System.Threading
internal static class PlatformHelper // TypeDefIndex: 603
{
	// Fields
	private static int s_processorCount; // 0x0
	private static int s_lastProcessorCountRefreshTicks; // 0x4

	// Properties
	internal static int ProcessorCount { get; }
	internal static bool IsSingleProcessor { get; }

	// Methods
	// RVA: 0x31B9C0 Offset: 0x31A1C0 VA: 0x18031B9C0
	internal static int get_ProcessorCount() { }
	// RVA: 0x31BAE0 Offset: 0x31A2E0 VA: 0x18031BAE0
	internal static bool get_IsSingleProcessor() { }
}

// Namespace: System.Threading
internal static class TimeoutHelper // TypeDefIndex: 604
{
	// Methods
	// RVA: 0x48E7B0 Offset: 0x48CFB0 VA: 0x18048E7B0
	public static uint GetTime() { }
	// RVA: 0x4A0000 Offset: 0x49E800 VA: 0x1804A0000
	public static int UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout) { }
}

// Namespace: System.Threading
[Serializable]
public class AbandonedMutexException : SystemException // TypeDefIndex: 605
{
	// Fields
	private int m_MutexIndex; // 0x88
	private Mutex m_Mutex; // 0x90

	// Methods
	// RVA: 0x2CA3A0 Offset: 0x2C8BA0 VA: 0x1802CA3A0
	public void .ctor() { }
	// RVA: 0x2CA430 Offset: 0x2C8C30 VA: 0x1802CA430
	public void .ctor(int location, WaitHandle handle) { }
	// RVA: 0x2CA550 Offset: 0x2C8D50 VA: 0x1802CA550
	private void SetupException(int location, WaitHandle handle) { }
	// RVA: 0x2CA600 Offset: 0x2C8E00 VA: 0x1802CA600
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public sealed class AsyncLocal<T> // TypeDefIndex: 606
{
	// Fields
	private readonly Action<AsyncLocalValueChangedArgs<T>> m_valueChangedHandler; // 0x0
}

// Namespace: System.Threading
internal interface IAsyncLocal // TypeDefIndex: 607
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnValueChanged(object previousValue, object currentValue, bool contextChanged) { }
}

// Namespace: System.Threading
public struct AsyncLocalValueChangedArgs<T> // TypeDefIndex: 608
{
	// Fields
	private T <PreviousValue>k__BackingField; // 0x0
	private T <CurrentValue>k__BackingField; // 0x0
	private bool <ThreadContextChanged>k__BackingField; // 0x0
}

// Namespace: System.Threading
public enum EventResetMode // TypeDefIndex: 609
{
	// Fields
	public int value__; // 0x0
	public const EventResetMode AutoReset = 0; // 0x0
	public const EventResetMode ManualReset = 1; // 0x0
}

// Namespace: System.Threading
public class EventWaitHandle : WaitHandle // TypeDefIndex: 610
{
	// Methods
	// RVA: 0x490830 Offset: 0x48F030 VA: 0x180490830
	public void .ctor(bool initialState, EventResetMode mode) { }
	// RVA: 0x490850 Offset: 0x48F050 VA: 0x180490850
	public void .ctor(bool initialState, EventResetMode mode, string name) { }
	// RVA: 0x490BD0 Offset: 0x48F3D0 VA: 0x180490BD0
	public bool Reset() { }
	// RVA: 0x490C80 Offset: 0x48F480 VA: 0x180490C80
	public bool Set() { }
}

// Namespace: System.Threading
public sealed class ContextCallback : MulticastDelegate // TypeDefIndex: 611
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(object state) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
internal struct ExecutionContextSwitcher // TypeDefIndex: 612
{
	// Fields
	internal ExecutionContext.Reader outerEC; // 0x0
	internal bool outerECBelongsToScope; // 0x8
	internal object hecsw; // 0x10
	internal Thread thread; // 0x18

	// Methods
	// RVA: 0x129CA0 Offset: 0x1290A0 VA: 0x180129CA0
	internal bool UndoNoThrow() { }
	// RVA: 0x129CB0 Offset: 0x1290B0 VA: 0x180129CB0
	internal void Undo() { }
}

// Namespace: System.Threading
[Serializable]
public sealed class ExecutionContext : IDisposable, ISerializable // TypeDefIndex: 613
{
	// Fields
	private SynchronizationContext _syncContext; // 0x10
	private SynchronizationContext _syncContextNoFlow; // 0x18
	private LogicalCallContext _logicalCallContext; // 0x20
	private IllogicalCallContext _illogicalCallContext; // 0x28
	private ExecutionContext.Flags _flags; // 0x30
	private Dictionary<IAsyncLocal, object> _localValues; // 0x38
	private List<IAsyncLocal> _localChangeNotifications; // 0x40
	private static readonly ExecutionContext s_dummyDefaultEC; // 0x0

	// Properties
	internal bool isNewCapture { get; set; }
	internal bool isFlowSuppressed { get; set; }
	internal bool IsPreAllocatedDefault { get; }
	internal LogicalCallContext LogicalCallContext { get; }
	internal IllogicalCallContext IllogicalCallContext { get; }

	// Methods
	// RVA: 0x75D1E0 Offset: 0x75B9E0 VA: 0x18075D1E0
	internal bool get_isNewCapture() { }
	// RVA: 0x75D1F0 Offset: 0x75B9F0 VA: 0x18075D1F0
	internal void set_isNewCapture(bool value) { }
	// RVA: 0x75D210 Offset: 0x75BA10 VA: 0x18075D210
	internal bool get_isFlowSuppressed() { }
	// RVA: 0x75D220 Offset: 0x75BA20 VA: 0x18075D220
	internal void set_isFlowSuppressed(bool value) { }
	// RVA: 0x75D240 Offset: 0x75BA40 VA: 0x18075D240
	internal bool get_IsPreAllocatedDefault() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x75D250 Offset: 0x75BA50 VA: 0x18075D250
	internal void .ctor(bool isPreAllocatedDefault) { }
	// RVA: 0x75D260 Offset: 0x75BA60 VA: 0x18075D260
	internal static void OnAsyncLocalContextChanged(ExecutionContext previous, ExecutionContext current) { }
	// RVA: 0x75D610 Offset: 0x75BE10 VA: 0x18075D610
	internal LogicalCallContext get_LogicalCallContext() { }
	// RVA: 0x75D6A0 Offset: 0x75BEA0 VA: 0x18075D6A0
	internal IllogicalCallContext get_IllogicalCallContext() { }
	// RVA: 0x42AD20 Offset: 0x429520 VA: 0x18042AD20 Slot: 4
	public void Dispose() { }
	// RVA: 0x75D730 Offset: 0x75BF30 VA: 0x18075D730
	public static void Run(ExecutionContext executionContext, ContextCallback callback, object state) { }
	// RVA: 0x75D880 Offset: 0x75C080 VA: 0x18075D880
	internal static void Run(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx) { }
	// RVA: 0x75D950 Offset: 0x75C150 VA: 0x18075D950
	internal static void RunInternal(ExecutionContext executionContext, ContextCallback callback, object state, bool preserveSyncCtx) { }
	// RVA: 0x75DB80 Offset: 0x75C380 VA: 0x18075DB80
	internal static void EstablishCopyOnWriteScope(ref ExecutionContextSwitcher ecsw) { }
	// RVA: 0x75DC40 Offset: 0x75C440 VA: 0x18075DC40
	private static void EstablishCopyOnWriteScope(Thread currentThread, bool knownNullWindowsIdentity, ref ExecutionContextSwitcher ecsw) { }
	// RVA: 0x75DC70 Offset: 0x75C470 VA: 0x18075DC70
	internal static ExecutionContextSwitcher SetExecutionContext(ExecutionContext executionContext, bool preserveSyncCtx) { }
	// RVA: 0x75DDD0 Offset: 0x75C5D0 VA: 0x18075DDD0
	public ExecutionContext CreateCopy() { }
	// RVA: 0x75DFA0 Offset: 0x75C7A0 VA: 0x18075DFA0
	internal ExecutionContext CreateMutableCopy() { }
	// RVA: 0x75E1C0 Offset: 0x75C9C0 VA: 0x18075E1C0
	public static bool IsFlowSuppressed() { }
	// RVA: 0x75E1F0 Offset: 0x75C9F0 VA: 0x18075E1F0
	public static ExecutionContext Capture() { }
	// RVA: 0x75E280 Offset: 0x75CA80 VA: 0x18075E280
	internal static ExecutionContext FastCapture() { }
	// RVA: 0x75E310 Offset: 0x75CB10 VA: 0x18075E310
	internal static ExecutionContext Capture(ref StackCrawlMark stackMark, ExecutionContext.CaptureOptions options) { }
	// RVA: 0x75E500 Offset: 0x75CD00 VA: 0x18075E500 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x75E700 Offset: 0x75CF00 VA: 0x18075E700
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x75E820 Offset: 0x75D020 VA: 0x18075E820
	internal bool IsDefaultFTContext(bool ignoreSyncCtx) { }
	// RVA: 0x75E8C0 Offset: 0x75D0C0 VA: 0x18075E8C0
	private static void .cctor() { }
}

// Namespace: 
private enum ExecutionContext.Flags // TypeDefIndex: 614
{
	// Fields
	public int value__; // 0x0
	public const ExecutionContext.Flags None = 0; // 0x0
	public const ExecutionContext.Flags IsNewCapture = 1; // 0x0
	public const ExecutionContext.Flags IsFlowSuppressed = 2; // 0x0
	public const ExecutionContext.Flags IsPreAllocatedDefault = 4; // 0x0
}

// Namespace: 
internal struct ExecutionContext.Reader // TypeDefIndex: 615
{
	// Fields
	private ExecutionContext m_ec; // 0x0

	// Properties
	public bool IsNull { get; }
	public bool IsFlowSuppressed { get; }
	public SynchronizationContext SynchronizationContext { get; }
	public SynchronizationContext SynchronizationContextNoFlow { get; }
	public LogicalCallContext.Reader LogicalCallContext { get; }

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	public void .ctor(ExecutionContext ec) { }
	// RVA: 0xB620 Offset: 0xAA20 VA: 0x18000B620
	public bool get_IsNull() { }
	// RVA: 0xB630 Offset: 0xAA30 VA: 0x18000B630
	public bool IsDefaultFTContext(bool ignoreSyncCtx) { }
	// RVA: 0xB650 Offset: 0xAA50 VA: 0x18000B650
	public bool get_IsFlowSuppressed() { }
	// RVA: 0xB670 Offset: 0xAA70 VA: 0x18000B670
	public SynchronizationContext get_SynchronizationContext() { }
	// RVA: 0xB680 Offset: 0xAA80 VA: 0x18000B680
	public SynchronizationContext get_SynchronizationContextNoFlow() { }
	// RVA: 0xB690 Offset: 0xAA90 VA: 0x18000B690
	public LogicalCallContext.Reader get_LogicalCallContext() { }
	// RVA: 0xB6B0 Offset: 0xAAB0 VA: 0x18000B6B0
	public bool HasSameLocalValues(ExecutionContext other) { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum ExecutionContext.CaptureOptions // TypeDefIndex: 616
{
	// Fields
	public int value__; // 0x0
	public const ExecutionContext.CaptureOptions None = 0; // 0x0
	public const ExecutionContext.CaptureOptions IgnoreSyncCtx = 1; // 0x0
	public const ExecutionContext.CaptureOptions OptimizeDefaultCase = 2; // 0x0
}

// Namespace: System.Threading
[Serializable]
public class LockRecursionException : Exception // TypeDefIndex: 617
{
	// Methods
	// RVA: 0x333DD0 Offset: 0x3325D0 VA: 0x180333DD0
	public void .ctor() { }
	// RVA: 0x333E60 Offset: 0x332660 VA: 0x180333E60
	public void .ctor(string message) { }
	// RVA: 0x333F10 Offset: 0x332710 VA: 0x180333F10
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public sealed class ManualResetEvent : EventWaitHandle // TypeDefIndex: 618
{
	// Methods
	// RVA: 0x3384C0 Offset: 0x336CC0 VA: 0x1803384C0
	public void .ctor(bool initialState) { }
}

// Namespace: System.Threading
public static class Monitor // TypeDefIndex: 619
{
	// Methods
	// RVA: 0x346F90 Offset: 0x345790 VA: 0x180346F90
	public static void Enter(object obj) { }
	// RVA: 0x346FC0 Offset: 0x3457C0 VA: 0x180346FC0
	public static void Enter(object obj, ref bool lockTaken) { }
	// RVA: 0x3470B0 Offset: 0x3458B0 VA: 0x1803470B0
	private static void ThrowLockTakenException() { }
	// RVA: 0x347120 Offset: 0x345920 VA: 0x180347120
	public static void Exit(object obj) { }
	// RVA: 0x347150 Offset: 0x345950 VA: 0x180347150
	public static bool TryEnter(object obj) { }
	// RVA: 0x347200 Offset: 0x345A00 VA: 0x180347200
	public static void TryEnter(object obj, int millisecondsTimeout, ref bool lockTaken) { }
	// RVA: 0x347220 Offset: 0x345A20 VA: 0x180347220
	public static bool Wait(object obj, int millisecondsTimeout, bool exitContext) { }
	// RVA: 0x3473D0 Offset: 0x345BD0 VA: 0x1803473D0
	public static bool Wait(object obj, int millisecondsTimeout) { }
	// RVA: 0x3473E0 Offset: 0x345BE0 VA: 0x1803473E0
	public static void Pulse(object obj) { }
	// RVA: 0x347540 Offset: 0x345D40 VA: 0x180347540
	public static void PulseAll(object obj) { }
	// RVA: 0x3476D0 Offset: 0x345ED0 VA: 0x1803476D0
	private static bool Monitor_test_synchronised(object obj) { }
	// RVA: 0x347720 Offset: 0x345F20 VA: 0x180347720
	private static void Monitor_pulse(object obj) { }
	// RVA: 0x347750 Offset: 0x345F50 VA: 0x180347750
	private static void ObjPulse(object obj) { }
	// RVA: 0x347830 Offset: 0x346030 VA: 0x180347830
	private static void Monitor_pulse_all(object obj) { }
	// RVA: 0x3478B0 Offset: 0x3460B0 VA: 0x1803478B0
	private static void ObjPulseAll(object obj) { }
	// RVA: 0x3479D0 Offset: 0x3461D0 VA: 0x1803479D0
	private static bool Monitor_wait(object obj, int ms) { }
	// RVA: 0x347A00 Offset: 0x346200 VA: 0x180347A00
	private static bool ObjWait(bool exitContext, int millisecondsTimeout, object obj) { }
	// RVA: 0x347B20 Offset: 0x346320 VA: 0x180347B20
	private static void try_enter_with_atomic_var(object obj, int millisecondsTimeout, ref bool lockTaken) { }
	// RVA: 0x347B80 Offset: 0x346380 VA: 0x180347B80
	private static void ReliableEnterTimeout(object obj, int timeout, ref bool lockTaken) { }
	// RVA: 0x347CA0 Offset: 0x3464A0 VA: 0x180347CA0
	private static void ReliableEnter(object obj, ref bool lockTaken) { }
}

// Namespace: System.Threading
public sealed class ParameterizedThreadStart : MulticastDelegate // TypeDefIndex: 620
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(object obj) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[TypeForwardedFromAttribute] // RVA: 0xD9C30 Offset: 0xD9030 VA: 0x1800D9C30
[Serializable]
public class SemaphoreFullException : SystemException // TypeDefIndex: 621
{
	// Methods
	// RVA: 0x388080 Offset: 0x386880 VA: 0x180388080
	public void .ctor() { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public sealed class SendOrPostCallback : MulticastDelegate // TypeDefIndex: 622
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(object state) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum SynchronizationContextProperties // TypeDefIndex: 623
{
	// Fields
	public int value__; // 0x0
	public const SynchronizationContextProperties None = 0; // 0x0
	public const SynchronizationContextProperties RequireWaitNotification = 1; // 0x0
}

// Namespace: System.Threading
public class SynchronizationContext // TypeDefIndex: 624
{
	// Fields
	private SynchronizationContextProperties _props; // 0x10
	private static Type s_cachedPreparedType1; // 0x0
	private static Type s_cachedPreparedType2; // 0x8
	private static Type s_cachedPreparedType3; // 0x10
	private static Type s_cachedPreparedType4; // 0x18
	private static Type s_cachedPreparedType5; // 0x20

	// Properties
	public static SynchronizationContext Current { get; }
	internal static SynchronizationContext CurrentNoFlow { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x38FAF0 Offset: 0x38E2F0 VA: 0x18038FAF0 Slot: 4
	public virtual void Send(SendOrPostCallback d, object state) { }
	// RVA: 0x38FB20 Offset: 0x38E320 VA: 0x18038FB20 Slot: 5
	public virtual void Post(SendOrPostCallback d, object state) { }
	// RVA: 0x38FBD0 Offset: 0x38E3D0 VA: 0x18038FBD0
	public static void SetSynchronizationContext(SynchronizationContext syncContext) { }
	// RVA: 0x38FC10 Offset: 0x38E410 VA: 0x18038FC10
	public static SynchronizationContext get_Current() { }
	// RVA: 0x38FC50 Offset: 0x38E450 VA: 0x18038FC50
	internal static SynchronizationContext get_CurrentNoFlow() { }
	// RVA: 0x38FC90 Offset: 0x38E490 VA: 0x18038FC90
	private static SynchronizationContext GetThreadLocalContext() { }
	// RVA: 0x38FD20 Offset: 0x38E520 VA: 0x18038FD20 Slot: 6
	public virtual SynchronizationContext CreateCopy() { }
}

// Namespace: System.Threading
internal class OSSpecificSynchronizationContext : SynchronizationContext // TypeDefIndex: 625
{
	// Fields
	private object m_OSSynchronizationContext; // 0x18
	private static readonly ConditionalWeakTable<object, OSSpecificSynchronizationContext> s_ContextCache; // 0x0

	// Methods
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	private void .ctor(object osContext) { }
	// RVA: 0x7547B0 Offset: 0x752FB0 VA: 0x1807547B0
	public static OSSpecificSynchronizationContext Get() { }
	// RVA: 0x7549E0 Offset: 0x7531E0 VA: 0x1807549E0 Slot: 6
	public override SynchronizationContext CreateCopy() { }
	// RVA: 0x754A60 Offset: 0x753260 VA: 0x180754A60 Slot: 4
	public override void Send(SendOrPostCallback d, object state) { }
	// RVA: 0x754AB0 Offset: 0x7532B0 VA: 0x180754AB0 Slot: 5
	public override void Post(SendOrPostCallback d, object state) { }
	[OSSpecificSynchronizationContext.MonoPInvokeCallbackAttribute] // RVA: 0xD9C70 Offset: 0xD9070 VA: 0x1800D9C70
	// RVA: 0x754C90 Offset: 0x753490 VA: 0x180754C90
	private static void InvocationEntry(IntPtr arg) { }
	// RVA: 0x754E90 Offset: 0x753690 VA: 0x180754E90
	private static object GetOSContext() { }
	// RVA: 0x754F50 Offset: 0x753750 VA: 0x180754F50
	private static void PostInternal(object osSynchronizationContext, IntPtr callback, IntPtr arg) { }
	// RVA: 0x754F60 Offset: 0x753760 VA: 0x180754F60
	private static void .cctor() { }
}

// Namespace: 
private sealed class OSSpecificSynchronizationContext.InvocationEntryDelegate : MulticastDelegate // TypeDefIndex: 626
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x273B20 Offset: 0x272320 VA: 0x180273B20 Slot: 12
	public virtual void Invoke(IntPtr arg) { }
	// RVA: 0x273D50 Offset: 0x272550 VA: 0x180273D50 Slot: 13
	public virtual IAsyncResult BeginInvoke(IntPtr arg, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[AttributeUsageAttribute] // RVA: 0xD9A10 Offset: 0xD8E10 VA: 0x1800D9A10
private sealed class OSSpecificSynchronizationContext.MonoPInvokeCallbackAttribute : Attribute // TypeDefIndex: 627
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor(Type t) { }
}

// Namespace: 
private class OSSpecificSynchronizationContext.InvocationContext // TypeDefIndex: 628
{
	// Fields
	private SendOrPostCallback m_Delegate; // 0x10
	private object m_State; // 0x18

	// Methods
	// RVA: 0x25B970 Offset: 0x25A170 VA: 0x18025B970
	public void .ctor(SendOrPostCallback d, object state) { }
	// RVA: 0x273AF0 Offset: 0x2722F0 VA: 0x180273AF0
	public void Invoke() { }
}

// Namespace: 
[Serializable]
private sealed class OSSpecificSynchronizationContext.<>c // TypeDefIndex: 629
{
	// Fields
	public static readonly OSSpecificSynchronizationContext.<>c <>9; // 0x0
	public static ConditionalWeakTable.CreateValueCallback<object, OSSpecificSynchronizationContext> <>9__3_0; // 0x8

	// Methods
	// RVA: 0x2739F0 Offset: 0x2721F0 VA: 0x1802739F0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x273A70 Offset: 0x272270 VA: 0x180273A70
	internal OSSpecificSynchronizationContext <Get>b__3_0(object _osContext) { }
}

// Namespace: System.Threading
[Serializable]
public class SynchronizationLockException : SystemException // TypeDefIndex: 630
{
	// Methods
	// RVA: 0x390320 Offset: 0x38EB20 VA: 0x180390320
	public void .ctor() { }
	// RVA: 0x3903B0 Offset: 0x38EBB0 VA: 0x1803903B0
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
internal class ThreadHelper // TypeDefIndex: 631
{
	// Fields
	private Delegate _start; // 0x10
	private object _startArg; // 0x18
	private ExecutionContext _executionContext; // 0x20
	internal static ContextCallback _ccb; // 0x0

	// Methods
	// RVA: 0x3A8AA0 Offset: 0x3A72A0 VA: 0x1803A8AA0
	private static void .cctor() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	internal void .ctor(Delegate start) { }
	// RVA: 0x3A8B40 Offset: 0x3A7340 VA: 0x1803A8B40
	private static void ThreadStart_Context(object state) { }
	// RVA: 0x3A8C80 Offset: 0x3A7480 VA: 0x1803A8C80
	internal void ThreadStart(object obj) { }
	// RVA: 0x3A8DC0 Offset: 0x3A75C0 VA: 0x1803A8DC0
	internal void ThreadStart() { }
}

// Namespace: System.Threading
public sealed class Thread : CriticalFinalizerObject // TypeDefIndex: 632
{
	// Fields
	private static LocalDataStoreMgr s_LocalDataStoreMgr; // 0x0
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static LocalDataStoreHolder s_LocalDataStore; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal static CultureInfo m_CurrentCulture; // 0x80000008
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal static CultureInfo m_CurrentUICulture; // 0x80000010
	private static AsyncLocal<CultureInfo> s_asyncLocalCurrentCulture; // 0x8
	private static AsyncLocal<CultureInfo> s_asyncLocalCurrentUICulture; // 0x10
	private InternalThread internal_thread; // 0x10
	private object m_ThreadStartArg; // 0x18
	private object pending_exception; // 0x20
	private IPrincipal principal; // 0x28
	private int principal_version; // 0x30
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static Thread current_thread; // 0x80000018
	private MulticastDelegate m_Delegate; // 0x38
	private ExecutionContext m_ExecutionContext; // 0x40
	private bool m_ExecutionContextBelongsToOuterScope; // 0x48

	// Properties
	internal bool ExecutionContextBelongsToCurrentScope { get; set; }
	public ThreadPriority Priority { set; }
	public CultureInfo CurrentUICulture { get; }
	public CultureInfo CurrentCulture { get; }
	private InternalThread Internal { get; }
	public static Context CurrentContext { get; }
	public static Thread CurrentThread { get; }
	public bool IsThreadPoolThread { get; }
	internal bool IsThreadPoolThreadInternal { get; }
	public bool IsAlive { get; }
	public bool IsBackground { set; }
	public string Name { set; }
	public ThreadState ThreadState { get; }
	public int ManagedThreadId { get; }

	// Methods
	// RVA: 0x3A6F40 Offset: 0x3A5740 VA: 0x1803A6F40
	public void .ctor(ThreadStart start) { }
	// RVA: 0x3A7000 Offset: 0x3A5800 VA: 0x1803A7000
	public void .ctor(ParameterizedThreadStart start) { }
	// RVA: 0x3A70C0 Offset: 0x3A58C0 VA: 0x1803A70C0
	public void Start() { }
	// RVA: 0x3A70E0 Offset: 0x3A58E0 VA: 0x1803A70E0
	public void Start(object parameter) { }
	// RVA: 0x3A71E0 Offset: 0x3A59E0 VA: 0x1803A71E0
	private void Start(ref StackCrawlMark stackMark) { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	internal ExecutionContext.Reader GetExecutionContextReader() { }
	// RVA: 0x3A73E0 Offset: 0x3A5BE0 VA: 0x1803A73E0
	internal bool get_ExecutionContextBelongsToCurrentScope() { }
	// RVA: 0x3A73F0 Offset: 0x3A5BF0 VA: 0x1803A73F0
	internal void set_ExecutionContextBelongsToCurrentScope(bool value) { }
	// RVA: 0x3A7400 Offset: 0x3A5C00 VA: 0x1803A7400
	internal ExecutionContext GetMutableExecutionContext() { }
	// RVA: 0x3A74B0 Offset: 0x3A5CB0 VA: 0x1803A74B0
	internal void SetExecutionContext(ExecutionContext value, bool belongsToCurrentScope) { }
	// RVA: 0x3A74B0 Offset: 0x3A5CB0 VA: 0x1803A74B0
	internal void SetExecutionContext(ExecutionContext.Reader value, bool belongsToCurrentScope) { }
	// RVA: 0x3A74C0 Offset: 0x3A5CC0 VA: 0x1803A74C0
	public void set_Priority(ThreadPriority value) { }
	// RVA: 0x3A74C0 Offset: 0x3A5CC0 VA: 0x1803A74C0
	private void SetPriorityNative(int priority) { }
	// RVA: 0x3A74D0 Offset: 0x3A5CD0 VA: 0x1803A74D0
	private static void SleepInternal(int millisecondsTimeout) { }
	// RVA: 0x3A7530 Offset: 0x3A5D30 VA: 0x1803A7530
	public static void Sleep(int millisecondsTimeout) { }
	// RVA: 0x3A7630 Offset: 0x3A5E30 VA: 0x1803A7630
	private static bool YieldInternal() { }
	// RVA: 0x3A7630 Offset: 0x3A5E30 VA: 0x1803A7630
	public static bool Yield() { }
	// RVA: 0x3A7650 Offset: 0x3A5E50 VA: 0x1803A7650
	private void SetStartHelper(Delegate start, int maxStackSize) { }
	// RVA: 0x3A7810 Offset: 0x3A6010 VA: 0x1803A7810
	public CultureInfo get_CurrentUICulture() { }
	// RVA: 0x3A7820 Offset: 0x3A6020 VA: 0x1803A7820
	internal CultureInfo GetCurrentUICultureNoAppX() { }
	// RVA: 0x3A7B00 Offset: 0x3A6300 VA: 0x1803A7B00
	public CultureInfo get_CurrentCulture() { }
	// RVA: 0x3A7B10 Offset: 0x3A6310 VA: 0x1803A7B10
	private CultureInfo GetCurrentCultureNoAppX() { }
	// RVA: 0x3A7D70 Offset: 0x3A6570 VA: 0x1803A7D70
	public static void MemoryBarrier() { }
	// RVA: 0x3A7D80 Offset: 0x3A6580 VA: 0x1803A7D80
	private void ConstructInternalThread() { }
	// RVA: 0x3A7E30 Offset: 0x3A6630 VA: 0x1803A7E30
	private InternalThread get_Internal() { }
	// RVA: 0x2645E0 Offset: 0x262DE0 VA: 0x1802645E0
	public static Context get_CurrentContext() { }
	// RVA: 0x3A7EF0 Offset: 0x3A66F0 VA: 0x1803A7EF0
	private static Thread GetCurrentThread() { }
	// RVA: 0x3A7F20 Offset: 0x3A6720 VA: 0x1803A7F20
	public static Thread get_CurrentThread() { }
	// RVA: 0x2CD9F0 Offset: 0x2CC1F0 VA: 0x1802CD9F0
	public static int GetDomainID() { }
	// RVA: 0x3A7FF0 Offset: 0x3A67F0 VA: 0x1803A7FF0
	private IntPtr Thread_internal(MulticastDelegate start) { }
	// RVA: 0x3A8000 Offset: 0x3A6800 VA: 0x1803A8000 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x3A8030 Offset: 0x3A6830 VA: 0x1803A8030
	public bool get_IsThreadPoolThread() { }
	// RVA: 0x3A8030 Offset: 0x3A6830 VA: 0x1803A8030
	internal bool get_IsThreadPoolThreadInternal() { }
	// RVA: 0x3A8060 Offset: 0x3A6860 VA: 0x1803A8060
	public bool get_IsAlive() { }
	// RVA: 0x3A80C0 Offset: 0x3A68C0 VA: 0x1803A80C0
	public void set_IsBackground(bool value) { }
	// RVA: 0x3A8240 Offset: 0x3A6A40 VA: 0x1803A8240
	private static void SetName_internal(InternalThread thread, string name) { }
	// RVA: 0x3A8370 Offset: 0x3A6B70 VA: 0x1803A8370
	public void set_Name(string value) { }
	// RVA: 0x3A84B0 Offset: 0x3A6CB0 VA: 0x1803A84B0
	public ThreadState get_ThreadState() { }
	// RVA: 0x3A8510 Offset: 0x3A6D10 VA: 0x1803A8510
	private static void Abort_internal(InternalThread thread, object stateInfo) { }
	// RVA: 0x3A8520 Offset: 0x3A6D20 VA: 0x1803A8520
	public void Abort() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private static void SpinWait_nop() { }
	// RVA: 0x3A8540 Offset: 0x3A6D40 VA: 0x1803A8540
	public static void SpinWait(int iterations) { }
	// RVA: 0x3A8550 Offset: 0x3A6D50 VA: 0x1803A8550
	private void StartInternal(IPrincipal principal, ref StackCrawlMark stackMark) { }
	// RVA: 0x3A8610 Offset: 0x3A6E10 VA: 0x1803A8610
	private static void SetState(InternalThread thread, ThreadState set) { }
	// RVA: 0x3A8670 Offset: 0x3A6E70 VA: 0x1803A8670
	private static void ClrState(InternalThread thread, ThreadState clr) { }
	// RVA: 0x3A86D0 Offset: 0x3A6ED0 VA: 0x1803A86D0
	private static ThreadState GetState(InternalThread thread) { }
	// RVA: 0x39B230 Offset: 0x399A30 VA: 0x18039B230
	private static int SystemMaxStackStize() { }
	// RVA: 0x3A8720 Offset: 0x3A6F20 VA: 0x1803A8720
	private static int GetProcessDefaultStackSize(int maxStackSize) { }
	// RVA: 0x3A87F0 Offset: 0x3A6FF0 VA: 0x1803A87F0
	private void SetStart(MulticastDelegate start, int maxStackSize) { }
	// RVA: 0x3A8820 Offset: 0x3A7020 VA: 0x1803A8820
	public int get_ManagedThreadId() { }
	// RVA: 0x3A8850 Offset: 0x3A7050 VA: 0x1803A8850
	public static void BeginCriticalRegion() { }
	// RVA: 0x3A88A0 Offset: 0x3A70A0 VA: 0x1803A88A0
	public static void EndCriticalRegion() { }
	// RVA: 0x3A8820 Offset: 0x3A7020 VA: 0x1803A8820 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x3A88F0 Offset: 0x3A70F0 VA: 0x1803A88F0
	private ThreadState ValidateThreadState() { }
}

// Namespace: System.Threading
[Serializable]
internal enum StackCrawlMark // TypeDefIndex: 633
{
	// Fields
	public int value__; // 0x0
	public const StackCrawlMark LookForMe = 0; // 0x0
	public const StackCrawlMark LookForMyCaller = 1; // 0x0
	public const StackCrawlMark LookForMyCallersCaller = 2; // 0x0
	public const StackCrawlMark LookForThread = 3; // 0x0
}

// Namespace: System.Threading
[Serializable]
public sealed class ThreadAbortException : SystemException // TypeDefIndex: 634
{
	// Methods
	// RVA: 0x3A89F0 Offset: 0x3A71F0 VA: 0x1803A89F0
	private void .ctor() { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
[Serializable]
public class ThreadInterruptedException : SystemException // TypeDefIndex: 635
{
	// Methods
	// RVA: 0x3A8EF0 Offset: 0x3A76F0 VA: 0x1803A8EF0
	public void .ctor() { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
internal interface IThreadPoolWorkItem // TypeDefIndex: 636
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void ExecuteWorkItem() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void MarkAborted(ThreadAbortException tae) { }
}

// Namespace: System.Threading
public sealed class WaitCallback : MulticastDelegate // TypeDefIndex: 637
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(object state) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
public sealed class WaitOrTimerCallback : MulticastDelegate // TypeDefIndex: 638
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x41B100 Offset: 0x419900 VA: 0x18041B100 Slot: 12
	public virtual void Invoke(object state, bool timedOut) { }
	// RVA: 0x41B470 Offset: 0x419C70 VA: 0x18041B470 Slot: 13
	public virtual IAsyncResult BeginInvoke(object state, bool timedOut, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
internal static class ThreadPoolGlobals // TypeDefIndex: 639
{
	// Fields
	public static uint tpQuantum; // 0x0
	public static int processorCount; // 0x4
	public static bool tpHosted; // 0x8
	public static bool vmTpInitialized; // 0x9
	public static bool enableWorkerTracking; // 0xA
	public static ThreadPoolWorkQueue workQueue; // 0x10

	// Methods
	// RVA: 0x3A9C60 Offset: 0x3A8460 VA: 0x1803A9C60
	private static void .cctor() { }
}

// Namespace: System.Threading
internal sealed class ThreadPoolWorkQueue // TypeDefIndex: 640
{
	// Fields
	internal ThreadPoolWorkQueue.QueueSegment queueHead; // 0x10
	internal ThreadPoolWorkQueue.QueueSegment queueTail; // 0x18
	internal static ThreadPoolWorkQueue.SparseArray<ThreadPoolWorkQueue.WorkStealingQueue> allThreadQueues; // 0x0
	private int numOutstandingThreadRequests; // 0x20

	// Methods
	// RVA: 0x3AA380 Offset: 0x3A8B80 VA: 0x1803AA380
	public void .ctor() { }
	// RVA: 0x3AA420 Offset: 0x3A8C20 VA: 0x1803AA420
	public ThreadPoolWorkQueueThreadLocals EnsureCurrentThreadHasQueue() { }
	// RVA: 0x3AA570 Offset: 0x3A8D70 VA: 0x1803AA570
	internal void EnsureThreadRequested() { }
	// RVA: 0x3AA660 Offset: 0x3A8E60 VA: 0x1803AA660
	internal void MarkThreadRequestSatisfied() { }
	// RVA: 0x3AA690 Offset: 0x3A8E90 VA: 0x1803AA690
	public void Enqueue(IThreadPoolWorkItem callback, bool forceGlobal) { }
	// RVA: 0x3AA8B0 Offset: 0x3A90B0 VA: 0x1803AA8B0
	internal bool LocalFindAndPop(IThreadPoolWorkItem callback) { }
	// RVA: 0x3AA9A0 Offset: 0x3A91A0 VA: 0x1803AA9A0
	public void Dequeue(ThreadPoolWorkQueueThreadLocals tl, out IThreadPoolWorkItem callback, out bool missedSteal) { }
	// RVA: 0x3AABE0 Offset: 0x3A93E0 VA: 0x1803AABE0
	internal static bool Dispatch() { }
	// RVA: 0x3AB0B0 Offset: 0x3A98B0 VA: 0x1803AB0B0
	private static void .cctor() { }
}

// Namespace: 
internal class ThreadPoolWorkQueue.SparseArray<T> // TypeDefIndex: 641
{
	// Fields
	private T[] m_array; // 0x0

	// Properties
	internal T[] Current { get; }

	// Methods
	// RVA: 0x7BF370 Offset: 0x7BDB70 VA: 0x1807BF370
	internal void .ctor(int initialSize) { }
	// RVA: 0x7BF3E0 Offset: 0x7BDBE0 VA: 0x1807BF3E0
	internal T[] get_Current() { }
	// RVA: 0x7BF3F0 Offset: 0x7BDBF0 VA: 0x1807BF3F0
	internal int Add(T e) { }
	// RVA: 0x7BF700 Offset: 0x7BDF00 VA: 0x1807BF700
	internal void Remove(T e) { }
}

// Namespace: 
internal class ThreadPoolWorkQueue.WorkStealingQueue // TypeDefIndex: 642
{
	// Fields
	internal IThreadPoolWorkItem[] m_array; // 0x10
	private int m_mask; // 0x18
	private int m_headIndex; // 0x1C
	private int m_tailIndex; // 0x20
	private SpinLock m_foreignLock; // 0x24

	// Methods
	// RVA: 0x279800 Offset: 0x278000 VA: 0x180279800
	public void LocalPush(IThreadPoolWorkItem obj) { }
	// RVA: 0x279DB0 Offset: 0x2785B0 VA: 0x180279DB0
	public bool LocalFindAndPop(IThreadPoolWorkItem obj) { }
	// RVA: 0x27A0C0 Offset: 0x2788C0 VA: 0x18027A0C0
	public bool LocalPop(out IThreadPoolWorkItem obj) { }
	// RVA: 0x27A440 Offset: 0x278C40 VA: 0x18027A440
	public bool TrySteal(out IThreadPoolWorkItem obj, ref bool missedSteal) { }
	// RVA: 0x27A460 Offset: 0x278C60 VA: 0x18027A460
	private bool TrySteal(out IThreadPoolWorkItem obj, ref bool missedSteal, int millisecondsTimeout) { }
	// RVA: 0x27A780 Offset: 0x278F80 VA: 0x18027A780
	public void .ctor() { }
}

// Namespace: 
internal class ThreadPoolWorkQueue.QueueSegment // TypeDefIndex: 643
{
	// Fields
	internal readonly IThreadPoolWorkItem[] nodes; // 0x10
	private int indexes; // 0x18
	public ThreadPoolWorkQueue.QueueSegment Next; // 0x20

	// Methods
	// RVA: 0x279200 Offset: 0x277A00 VA: 0x180279200
	private void GetIndexes(out int upper, out int lower) { }
	// RVA: 0x279220 Offset: 0x277A20 VA: 0x180279220
	private bool CompareExchangeIndexes(ref int prevUpper, int newUpper, ref int prevLower, int newLower) { }
	// RVA: 0x279270 Offset: 0x277A70 VA: 0x180279270
	public void .ctor() { }
	// RVA: 0x2792F0 Offset: 0x277AF0 VA: 0x1802792F0
	public bool IsUsedUp() { }
	// RVA: 0x279340 Offset: 0x277B40 VA: 0x180279340
	public bool TryEnqueue(IThreadPoolWorkItem node) { }
	// RVA: 0x2793F0 Offset: 0x277BF0 VA: 0x1802793F0
	public bool TryDequeue(out IThreadPoolWorkItem node) { }
}

// Namespace: System.Threading
internal sealed class ThreadPoolWorkQueueThreadLocals // TypeDefIndex: 644
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public static ThreadPoolWorkQueueThreadLocals threadLocals; // 0x80000000
	public readonly ThreadPoolWorkQueue workQueue; // 0x10
	public readonly ThreadPoolWorkQueue.WorkStealingQueue workStealingQueue; // 0x18
	public readonly Random random; // 0x20

	// Methods
	// RVA: 0x4930F0 Offset: 0x4918F0 VA: 0x1804930F0
	public void .ctor(ThreadPoolWorkQueue tpq) { }
	// RVA: 0x4932D0 Offset: 0x491AD0 VA: 0x1804932D0
	private void CleanUp() { }
	// RVA: 0x493470 Offset: 0x491C70 VA: 0x180493470 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.Threading
internal static class _ThreadPoolWaitCallback // TypeDefIndex: 645
{
	// Methods
	// RVA: 0x420180 Offset: 0x41E980 VA: 0x180420180
	internal static bool PerformWaitCallback() { }
}

// Namespace: System.Threading
internal sealed class QueueUserWorkItemCallback : IThreadPoolWorkItem // TypeDefIndex: 646
{
	// Fields
	private WaitCallback callback; // 0x10
	private ExecutionContext context; // 0x18
	private object state; // 0x20
	internal static ContextCallback ccb; // 0x0

	// Methods
	// RVA: 0x31E370 Offset: 0x31CB70 VA: 0x18031E370
	private static void .cctor() { }
	// RVA: 0x31E410 Offset: 0x31CC10 VA: 0x18031E410
	internal void .ctor(WaitCallback waitCallback, object stateObj, bool compressStack, ref StackCrawlMark stackMark) { }
	// RVA: 0x31E520 Offset: 0x31CD20 VA: 0x18031E520 Slot: 4
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }
	// RVA: 0x31E630 Offset: 0x31CE30 VA: 0x18031E630
	private static void WaitCallback_Context(object state) { }
}

// Namespace: System.Threading
public static class ThreadPool // TypeDefIndex: 647
{
	// Methods
	// RVA: 0x3A8FA0 Offset: 0x3A77A0 VA: 0x1803A8FA0
	private static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ref StackCrawlMark stackMark, bool compressStack) { }
	// RVA: 0x3A9220 Offset: 0x3A7A20 VA: 0x1803A9220
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce) { }
	// RVA: 0x3A93C0 Offset: 0x3A7BC0 VA: 0x1803A93C0
	public static bool QueueUserWorkItem(WaitCallback callBack, object state) { }
	// RVA: 0x3A93F0 Offset: 0x3A7BF0 VA: 0x1803A93F0
	public static bool QueueUserWorkItem(WaitCallback callBack) { }
	// RVA: 0x3A9420 Offset: 0x3A7C20 VA: 0x1803A9420
	public static bool UnsafeQueueUserWorkItem(WaitCallback callBack, object state) { }
	// RVA: 0x3A9450 Offset: 0x3A7C50 VA: 0x1803A9450
	private static bool QueueUserWorkItemHelper(WaitCallback callBack, object state, ref StackCrawlMark stackMark, bool compressStack) { }
	// RVA: 0x3A9680 Offset: 0x3A7E80 VA: 0x1803A9680
	internal static void UnsafeQueueCustomWorkItem(IThreadPoolWorkItem workItem, bool forceGlobal) { }
	// RVA: 0x3A9770 Offset: 0x3A7F70 VA: 0x1803A9770
	internal static bool TryPopCustomWorkItem(IThreadPoolWorkItem workItem) { }
	// RVA: 0x3A9930 Offset: 0x3A8130 VA: 0x1803A9930
	internal static bool RequestWorkerThread() { }
	// RVA: 0x3A9960 Offset: 0x3A8160 VA: 0x1803A9960
	private static void EnsureVMInitialized() { }
	// RVA: 0x3A9A60 Offset: 0x3A8260 VA: 0x1803A9A60
	internal static bool NotifyWorkItemComplete() { }
	// RVA: 0x2644A0 Offset: 0x262CA0 VA: 0x1802644A0
	internal static void ReportThreadStatus(bool isWorking) { }
	// RVA: 0x3A9AE0 Offset: 0x3A82E0 VA: 0x1803A9AE0
	internal static void NotifyWorkItemProgress() { }
	// RVA: 0x3A9C00 Offset: 0x3A8400 VA: 0x1803A9C00
	internal static void NotifyWorkItemProgressNative() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640
	internal static bool IsThreadPoolHosted() { }
	// RVA: 0x3A9C50 Offset: 0x3A8450 VA: 0x1803A9C50
	private static void InitializeVMTp(ref bool enableWorkerTracking) { }
}

// Namespace: System.Threading
[Serializable]
public enum ThreadPriority // TypeDefIndex: 648
{
	// Fields
	public int value__; // 0x0
	public const ThreadPriority Lowest = 0; // 0x0
	public const ThreadPriority BelowNormal = 1; // 0x0
	public const ThreadPriority Normal = 2; // 0x0
	public const ThreadPriority AboveNormal = 3; // 0x0
	public const ThreadPriority Highest = 4; // 0x0
}

// Namespace: System.Threading
public sealed class ThreadStart : MulticastDelegate // TypeDefIndex: 649
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum ThreadState // TypeDefIndex: 650
{
	// Fields
	public int value__; // 0x0
	public const ThreadState Running = 0; // 0x0
	public const ThreadState StopRequested = 1; // 0x0
	public const ThreadState SuspendRequested = 2; // 0x0
	public const ThreadState Background = 4; // 0x0
	public const ThreadState Unstarted = 8; // 0x0
	public const ThreadState Stopped = 16; // 0x0
	public const ThreadState WaitSleepJoin = 32; // 0x0
	public const ThreadState Suspended = 64; // 0x0
	public const ThreadState AbortRequested = 128; // 0x0
	public const ThreadState Aborted = 256; // 0x0
}

// Namespace: System.Threading
[Serializable]
public class ThreadStateException : SystemException // TypeDefIndex: 651
{
	// Methods
	// RVA: 0x493560 Offset: 0x491D60 VA: 0x180493560
	public void .ctor() { }
	// RVA: 0x4935F0 Offset: 0x491DF0 VA: 0x1804935F0
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public static class Timeout // TypeDefIndex: 652
{
	// Fields
	public static readonly TimeSpan InfiniteTimeSpan; // 0xABFB0

	// Methods
	// RVA: 0x49FEB0 Offset: 0x49E6B0 VA: 0x18049FEB0
	private static void .cctor() { }
}

// Namespace: System.Threading
public abstract class WaitHandle : MarshalByRefObject, IDisposable // TypeDefIndex: 653
{
	// Fields
	public const int WaitTimeout = 258; // 0x0
	private const int MAX_WAITHANDLES = 64; // 0x0
	private IntPtr waitHandle; // 0x18
	internal SafeWaitHandle safeWaitHandle; // 0x20
	internal bool hasThreadAffinity; // 0x28
	private const int WAIT_OBJECT_0 = 0; // 0x0
	private const int WAIT_ABANDONED = 128; // 0x0
	private const int WAIT_FAILED = 2147483647; // 0x0
	private const int ERROR_TOO_MANY_POSTS = 298; // 0x0
	protected static readonly IntPtr InvalidHandle; // 0x0
	internal const int MaxWaitHandles = 64; // 0x0

	// Properties
	[ObsoleteAttribute] // RVA: 0xD9CE0 Offset: 0xD90E0 VA: 0x1800D9CE0
	public virtual IntPtr Handle { set; }
	public SafeWaitHandle SafeWaitHandle { get; }

	// Methods
	// RVA: 0x419C30 Offset: 0x418430 VA: 0x180419C30
	protected void .ctor() { }
	// RVA: 0x419C30 Offset: 0x418430 VA: 0x180419C30
	private void Init() { }
	// RVA: 0x419CF0 Offset: 0x4184F0 VA: 0x180419CF0 Slot: 7
	public virtual void set_Handle(IntPtr value) { }
	// RVA: 0x419E00 Offset: 0x418600 VA: 0x180419E00
	public SafeWaitHandle get_SafeWaitHandle() { }
	// RVA: 0x419F00 Offset: 0x418700 VA: 0x180419F00
	internal void SetHandleInternal(SafeWaitHandle handle) { }
	// RVA: 0x419F30 Offset: 0x418730 VA: 0x180419F30 Slot: 8
	public virtual bool WaitOne(int millisecondsTimeout, bool exitContext) { }
	// RVA: 0x41A010 Offset: 0x418810 VA: 0x18041A010 Slot: 9
	public virtual bool WaitOne() { }
	// RVA: 0x41A030 Offset: 0x418830 VA: 0x18041A030 Slot: 10
	public virtual bool WaitOne(int millisecondsTimeout) { }
	// RVA: 0x41A050 Offset: 0x418850 VA: 0x18041A050
	private bool WaitOne(long timeout, bool exitContext) { }
	// RVA: 0x41A230 Offset: 0x418A30 VA: 0x18041A230
	internal static bool InternalWaitOne(SafeHandle waitableSafeHandle, long millisecondsTimeout, bool hasThreadAffinity, bool exitContext) { }
	// RVA: 0x41A390 Offset: 0x418B90 VA: 0x18041A390
	public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext) { }
	// RVA: 0x41A730 Offset: 0x418F30 VA: 0x18041A730
	public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext) { }
	// RVA: 0x41A870 Offset: 0x419070 VA: 0x18041A870
	private static void ThrowAbandonedMutexException() { }
	// RVA: 0x41A8C0 Offset: 0x4190C0 VA: 0x18041A8C0
	private static void ThrowAbandonedMutexException(int location, WaitHandle handle) { }
	// RVA: 0x41A920 Offset: 0x419120 VA: 0x18041A920 Slot: 11
	public virtual void Close() { }
	// RVA: 0x41A9D0 Offset: 0x4191D0 VA: 0x18041A9D0 Slot: 12
	protected virtual void Dispose(bool explicitDisposing) { }
	// RVA: 0x41AA20 Offset: 0x419220 VA: 0x18041AA20 Slot: 6
	public void Dispose() { }
	// RVA: 0x41AAD0 Offset: 0x4192D0 VA: 0x18041AAD0
	private static int WaitMultiple(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll) { }
	// RVA: 0x41ADD0 Offset: 0x4195D0 VA: 0x18041ADD0
	private static int WaitOneNative(SafeHandle waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext) { }
	// RVA: 0x41AFC0 Offset: 0x4197C0 VA: 0x18041AFC0
	private static int Wait_internal(IntPtr* handles, int numHandles, bool waitAll, int ms) { }
	// RVA: 0x41AFD0 Offset: 0x4197D0 VA: 0x18041AFD0
	private static void .cctor() { }
}

// Namespace: System.Threading
[Serializable]
public class WaitHandleCannotBeOpenedException : ApplicationException // TypeDefIndex: 654
{
	// Methods
	// RVA: 0x41B050 Offset: 0x419850 VA: 0x18041B050
	public void .ctor() { }
	// RVA: 0x41B0E0 Offset: 0x4198E0 VA: 0x18041B0E0
	public void .ctor(string message) { }
	// RVA: 0x329A50 Offset: 0x328250 VA: 0x180329A50
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public static class Interlocked // TypeDefIndex: 655
{
	// Methods
	// RVA: 0x327B50 Offset: 0x326350 VA: 0x180327B50
	public static int CompareExchange(ref int location1, int value, int comparand) { }
	// RVA: 0x327B60 Offset: 0x326360 VA: 0x180327B60
	internal static int CompareExchange(ref int location1, int value, int comparand, ref bool succeeded) { }
	// RVA: 0x327B80 Offset: 0x326380 VA: 0x180327B80
	public static object CompareExchange(ref object location1, object value, object comparand) { }
	// RVA: 0x327B90 Offset: 0x326390 VA: 0x180327B90
	public static float CompareExchange(ref float location1, float value, float comparand) { }
	// RVA: 0x327BC0 Offset: 0x3263C0 VA: 0x180327BC0
	public static int Decrement(ref int location) { }
	// RVA: 0x327BD0 Offset: 0x3263D0 VA: 0x180327BD0
	public static int Increment(ref int location) { }
	// RVA: 0x327BE0 Offset: 0x3263E0 VA: 0x180327BE0
	public static int Exchange(ref int location1, int value) { }
	// RVA: 0x327BF0 Offset: 0x3263F0 VA: 0x180327BF0
	public static object Exchange(ref object location1, object value) { }
	// RVA: 0x327C00 Offset: 0x326400 VA: 0x180327C00
	public static float Exchange(ref float location1, float value) { }
	// RVA: 0x327B80 Offset: 0x326380 VA: 0x180327B80
	public static long CompareExchange(ref long location1, long value, long comparand) { }
	// RVA: 0x327B80 Offset: 0x326380 VA: 0x180327B80
	public static IntPtr CompareExchange(ref IntPtr location1, IntPtr value, IntPtr comparand) { }
	// RVA: 0x327C20 Offset: 0x326420 VA: 0x180327C20
	public static double CompareExchange(ref double location1, double value, double comparand) { }
	// RVA: -1 Offset: -1
	public static T CompareExchange(ref T location1, T value, T comparand) { }
	// RVA: 0x327BF0 Offset: 0x3263F0 VA: 0x180327BF0
	public static long Exchange(ref long location1, long value) { }
	// RVA: 0x327BF0 Offset: 0x3263F0 VA: 0x180327BF0
	public static IntPtr Exchange(ref IntPtr location1, IntPtr value) { }
	// RVA: 0x327C50 Offset: 0x326450 VA: 0x180327C50
	public static double Exchange(ref double location1, double value) { }
	// RVA: -1 Offset: -1
	public static T Exchange(ref T location1, T value) { }
	// RVA: 0x327C70 Offset: 0x326470 VA: 0x180327C70
	public static int Add(ref int location1, int value) { }
	// RVA: 0x327C80 Offset: 0x326480 VA: 0x180327C80
	public static long Add(ref long location1, long value) { }
}

// Namespace: System.Threading
public sealed class Mutex : WaitHandle // TypeDefIndex: 656
{}

// Namespace: System.Threading
internal static class NativeEventCalls // TypeDefIndex: 657
{
	// Methods
	// RVA: 0x745DF0 Offset: 0x7445F0 VA: 0x180745DF0
	public static IntPtr CreateEvent_internal(bool manual, bool initial, string name, out int errorCode) { }
	// RVA: 0x745E70 Offset: 0x744670 VA: 0x180745E70
	public static bool SetEvent(SafeWaitHandle handle) { }
	// RVA: 0x745F70 Offset: 0x744770 VA: 0x180745F70
	private static bool SetEvent_internal(IntPtr handle) { }
	// RVA: 0x745FA0 Offset: 0x7447A0 VA: 0x180745FA0
	public static bool ResetEvent(SafeWaitHandle handle) { }
	// RVA: 0x7460A0 Offset: 0x7448A0 VA: 0x1807460A0
	private static bool ResetEvent_internal(IntPtr handle) { }
	// RVA: 0x7460D0 Offset: 0x7448D0 VA: 0x1807460D0
	public static void CloseEvent_internal(IntPtr handle) { }
}

// Namespace: System.Threading
public sealed class RegisteredWaitHandle : MarshalByRefObject // TypeDefIndex: 658
{
	// Fields
	private WaitHandle _waitObject; // 0x18
	private WaitOrTimerCallback _callback; // 0x20
	private object _state; // 0x28
	private WaitHandle _finalEvent; // 0x30
	private ManualResetEvent _cancelEvent; // 0x38
	private TimeSpan _timeout; // 0x40
	private int _callsInProcess; // 0x48
	private bool _executeOnlyOnce; // 0x4C
	private bool _unregistered; // 0x4D

	// Methods
	// RVA: 0x322590 Offset: 0x320D90 VA: 0x180322590
	internal void .ctor(WaitHandle waitObject, WaitOrTimerCallback callback, object state, TimeSpan timeout, bool executeOnlyOnce) { }
	// RVA: 0x322680 Offset: 0x320E80 VA: 0x180322680
	internal void Wait(object state) { }
	// RVA: 0x322DA0 Offset: 0x3215A0 VA: 0x180322DA0
	private void DoCallBack(object timedOut) { }
}

// Namespace: System.Threading
internal sealed class InternalThread : CriticalFinalizerObject // TypeDefIndex: 659
{
	// Fields
	private int lock_thread_id; // 0x10
	private IntPtr handle; // 0x18
	private IntPtr native_handle; // 0x20
	private IntPtr unused3; // 0x28
	private IntPtr name; // 0x30
	private int name_len; // 0x38
	private ThreadState state; // 0x3C
	private object abort_exc; // 0x40
	private int abort_state_handle; // 0x48
	internal long thread_id; // 0x50
	private IntPtr debugger_thread; // 0x58
	private UIntPtr static_data; // 0x60
	private IntPtr runtime_thread_info; // 0x68
	private object current_appcontext; // 0x70
	private object root_domain_thread; // 0x78
	internal byte[] _serialized_principal; // 0x80
	internal int _serialized_principal_version; // 0x88
	private IntPtr appdomain_refs; // 0x90
	private int interruption_requested; // 0x98
	private IntPtr synch_cs; // 0xA0
	internal bool threadpool_thread; // 0xA8
	private bool thread_interrupt_requested; // 0xA9
	internal int stack_size; // 0xAC
	internal byte apartment_state; // 0xB0
	internal int critical_region_level; // 0xB4
	internal int managed_id; // 0xB8
	private int small_id; // 0xBC
	private IntPtr manage_callback; // 0xC0
	private IntPtr unused4; // 0xC8
	private IntPtr flags; // 0xD0
	private IntPtr thread_pinning_ref; // 0xD8
	private IntPtr abort_protected_block_count; // 0xE0
	private int priority; // 0xE8
	private IntPtr owned_mutex; // 0xF0
	private IntPtr suspended_event; // 0xF8
	private int self_suspended; // 0x100
	private IntPtr unused1; // 0x108
	private IntPtr unused2; // 0x110
	private IntPtr last; // 0x118

	// Methods
	// RVA: 0x329700 Offset: 0x327F00 VA: 0x180329700
	private void Thread_free_internal() { }
	// RVA: 0x329770 Offset: 0x327F70 VA: 0x180329770 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x329840 Offset: 0x328040 VA: 0x180329840
	public void .ctor() { }
}

// Namespace: System.Threading
public sealed class Timer : MarshalByRefObject, IDisposable // TypeDefIndex: 660
{
	// Fields
	private static readonly Timer.Scheduler scheduler; // 0x0
	private TimerCallback callback; // 0x18
	private object state; // 0x20
	private long due_time_ms; // 0x28
	private long period_ms; // 0x30
	private long next_run; // 0x38
	private bool disposed; // 0x40
	private const long MaxValue = 4294967294; // 0x0

	// Methods
	// RVA: 0x4A0070 Offset: 0x49E870 VA: 0x1804A0070
	public void .ctor(TimerCallback callback, object state, int dueTime, int period) { }
	// RVA: 0x4A0090 Offset: 0x49E890 VA: 0x1804A0090
	public void .ctor(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period) { }
	// RVA: 0x4A0110 Offset: 0x49E910 VA: 0x1804A0110
	private void Init(TimerCallback callback, object state, long dueTime, long period) { }
	// RVA: 0x4A0200 Offset: 0x49EA00 VA: 0x1804A0200
	public bool Change(TimeSpan dueTime, TimeSpan period) { }
	// RVA: 0x4A0280 Offset: 0x49EA80 VA: 0x1804A0280 Slot: 6
	public void Dispose() { }
	// RVA: 0x4A0340 Offset: 0x49EB40 VA: 0x1804A0340
	private bool Change(long dueTime, long period, bool first) { }
	// RVA: 0x4A05D0 Offset: 0x49EDD0 VA: 0x1804A05D0
	private static long GetTimeMonotonic() { }
	// RVA: 0x4A05E0 Offset: 0x49EDE0 VA: 0x1804A05E0
	private static void .cctor() { }
}

// Namespace: 
private sealed class Timer.TimerComparer : IComparer // TypeDefIndex: 661
{
	// Methods
	// RVA: 0x27DC80 Offset: 0x27C480 VA: 0x18027DC80 Slot: 4
	public int Compare(object x, object y) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private sealed class Timer.Scheduler // TypeDefIndex: 662
{
	// Fields
	private static Timer.Scheduler instance; // 0x0
	private SortedList list; // 0x10
	private ManualResetEvent changed; // 0x18

	// Methods
	// RVA: 0x27CB70 Offset: 0x27B370 VA: 0x18027CB70
	private static void .cctor() { }
	// RVA: 0x27CC00 Offset: 0x27B400 VA: 0x18027CC00
	private void .ctor() { }
	// RVA: 0x27CDC0 Offset: 0x27B5C0 VA: 0x18027CDC0
	public void Remove(Timer timer) { }
	// RVA: 0x27CF60 Offset: 0x27B760 VA: 0x18027CF60
	public void Change(Timer timer, long new_next_run) { }
	// RVA: 0x27D1F0 Offset: 0x27B9F0 VA: 0x18027D1F0
	private int FindByDueTime(long nr) { }
	// RVA: 0x27D390 Offset: 0x27BB90 VA: 0x18027D390
	private void Add(Timer timer) { }
	// RVA: 0x27D520 Offset: 0x27BD20 VA: 0x18027D520
	private int InternalRemove(Timer timer) { }
	// RVA: 0x27D580 Offset: 0x27BD80 VA: 0x18027D580
	private static void TimerCB(object o) { }
	// RVA: 0x27D630 Offset: 0x27BE30 VA: 0x18027D630
	private void SchedulerThread() { }
	// RVA: 0x27DBD0 Offset: 0x27C3D0 VA: 0x18027DBD0
	private void ShrinkIfNeeded(List<Timer> list, int initial) { }
}

// Namespace: System.Threading
public sealed class TimerCallback : MulticastDelegate // TypeDefIndex: 663
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(object state) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Threading
public static class Volatile // TypeDefIndex: 664
{
	// Methods
	// RVA: 0x419BE0 Offset: 0x4183E0 VA: 0x180419BE0
	public static bool Read(ref bool location) { }
	// RVA: 0x419BF0 Offset: 0x4183F0 VA: 0x180419BF0
	public static int Read(ref int location) { }
	// RVA: 0x419C00 Offset: 0x418400 VA: 0x180419C00
	public static long Read(ref long location) { }
	// RVA: 0x419C00 Offset: 0x418400 VA: 0x180419C00
	public static T Read(ref T location) { }
	// RVA: 0x419C10 Offset: 0x418410 VA: 0x180419C10
	public static void Write(ref int location, int value) { }
	// RVA: 0x419C20 Offset: 0x418420 VA: 0x180419C20
	public static void Write(ref long location, long value) { }
	// RVA: 0x419C20 Offset: 0x418420 VA: 0x180419C20
	public static void Write(ref T location, T value) { }
}

// Namespace: System.Threading.Tasks
internal enum CausalityTraceLevel // TypeDefIndex: 665
{
	// Fields
	public int value__; // 0x0
	public const CausalityTraceLevel Required = 0; // 0x0
	public const CausalityTraceLevel Important = 1; // 0x0
	public const CausalityTraceLevel Verbose = 2; // 0x0
}

// Namespace: System.Threading.Tasks
internal enum CausalitySynchronousWork // TypeDefIndex: 666
{
	// Fields
	public int value__; // 0x0
	public const CausalitySynchronousWork CompletionNotification = 0; // 0x0
	public const CausalitySynchronousWork ProgressNotification = 1; // 0x0
	public const CausalitySynchronousWork Execution = 2; // 0x0
}

// Namespace: System.Threading.Tasks
internal static class AsyncCausalityTracer // TypeDefIndex: 667
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal static void TraceSynchronousWorkStart(CausalityTraceLevel traceLevel, int taskId, CausalitySynchronousWork work) { }
}

// Namespace: System.Threading.Tasks
public class Task<TResult> : Task // TypeDefIndex: 668
{
	// Fields
	internal TResult m_result; // 0x0
	private static readonly TaskFactory<TResult> s_Factory; // 0x0
	internal static readonly Func<Task<Task>, Task<TResult>> TaskWhenAnyCast; // 0x0

	// Properties
	public TResult Result { get; }

	// Methods
	// RVA: 0x7C1160 Offset: 0x7BF960 VA: 0x1807C1160
	internal void .ctor() { }
	// RVA: 0x7C1200 Offset: 0x7BFA00 VA: 0x1807C1200
	internal void .ctor(TResult result) { }
	// RVA: 0x7C1320 Offset: 0x7BFB20 VA: 0x1807C1320
	internal void .ctor(bool canceled, TResult result, TaskCreationOptions creationOptions, CancellationToken ct) { }
	// RVA: 0x7C1410 Offset: 0x7BFC10 VA: 0x1807C1410
	public void .ctor(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions) { }
	// RVA: 0x7C1540 Offset: 0x7BFD40 VA: 0x1807C1540
	internal void .ctor(Delegate valueSelector, object state, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler) { }
	// RVA: 0x7C16A0 Offset: 0x7BFEA0 VA: 0x1807C16A0
	internal bool TrySetResult(TResult result) { }
	// RVA: 0x7C1750 Offset: 0x7BFF50 VA: 0x1807C1750
	public TResult get_Result() { }
	// RVA: 0x7C17A0 Offset: 0x7BFFA0 VA: 0x1807C17A0
	internal TResult GetResultCore(bool waitCompletionNotification) { }
	// RVA: 0x7C1850 Offset: 0x7C0050 VA: 0x1807C1850
	internal bool TrySetException(object exceptionObject) { }
	// RVA: 0x7C18D0 Offset: 0x7C00D0 VA: 0x1807C18D0
	internal bool TrySetCanceled(CancellationToken tokenToRecord) { }
	// RVA: 0x7C1900 Offset: 0x7C0100 VA: 0x1807C1900
	internal bool TrySetCanceled(CancellationToken tokenToRecord, object cancellationException) { }
	// RVA: 0x7C1980 Offset: 0x7C0180 VA: 0x1807C1980 Slot: 19
	internal override void InnerInvoke() { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	public TaskAwaiter<TResult> GetAwaiter() { }
	// RVA: 0x7C1A50 Offset: 0x7C0250 VA: 0x1807C1A50
	public ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext) { }
	// RVA: 0x7C1AC0 Offset: 0x7C02C0 VA: 0x1807C1AC0
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class Task.<>c<TResult> // TypeDefIndex: 669
{
	// Fields
	public static readonly Task.<>c<TResult> <>9; // 0x0

	// Methods
	// RVA: 0x7C66A0 Offset: 0x7C4EA0 VA: 0x1807C66A0
	private static void .cctor() { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
	// RVA: 0x7C6790 Offset: 0x7C4F90 VA: 0x1807C6790
	internal Task<TResult> <.cctor>b__64_0(Task<Task> completed) { }
}

// Namespace: System.Threading.Tasks
public class TaskFactory<TResult> // TypeDefIndex: 670
{
	// Fields
	private CancellationToken m_defaultCancellationToken; // 0x0
	private TaskScheduler m_defaultScheduler; // 0x0
	private TaskCreationOptions m_defaultCreationOptions; // 0x0
	private TaskContinuationOptions m_defaultContinuationOptions; // 0x0

	// Methods
	// RVA: 0x7C10B0 Offset: 0x7BF8B0 VA: 0x1807C10B0
	public void .ctor() { }
	// RVA: 0x7C10F0 Offset: 0x7BF8F0 VA: 0x1807C10F0
	public void .ctor(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { }
}

// Namespace: System.Threading.Tasks
public class ParallelOptions // TypeDefIndex: 671
{
	// Fields
	private TaskScheduler m_scheduler; // 0x10
	private int m_maxDegreeOfParallelism; // 0x18
	private CancellationToken m_cancellationToken; // 0x20

	// Properties
	internal TaskScheduler EffectiveTaskScheduler { get; }
	internal int EffectiveMaxConcurrencyLevel { get; }

	// Methods
	// RVA: 0x312C50 Offset: 0x311450 VA: 0x180312C50
	public void .ctor() { }
	// RVA: 0x312D20 Offset: 0x311520 VA: 0x180312D20
	internal TaskScheduler get_EffectiveTaskScheduler() { }
	// RVA: 0x312E80 Offset: 0x311680 VA: 0x180312E80
	internal int get_EffectiveMaxConcurrencyLevel() { }
}

// Namespace: System.Threading.Tasks
public static class Parallel // TypeDefIndex: 672
{
	// Fields
	internal static ParallelOptions s_defaultParallelOptions; // 0xABFF5

	// Methods
	// RVA: 0x311AB0 Offset: 0x3102B0 VA: 0x180311AB0
	public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int> body) { }
	// RVA: 0x425970 Offset: 0x424170 VA: 0x180425970
	private static ParallelLoopResult ForWorker(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int> body, Action<int, ParallelLoopState> bodyWithState, Func<int, ParallelLoopState, TLocal, TLocal> bodyWithLocal, Func<TLocal> localInit, Action<TLocal> localFinally) { }
	// RVA: 0x311C00 Offset: 0x310400 VA: 0x180311C00
	internal static void ThrowIfReducableToSingleOCE(IEnumerable<Exception> excCollection, CancellationToken ct) { }
	// RVA: 0x311E70 Offset: 0x310670 VA: 0x180311E70
	private static void .cctor() { }
}

// Namespace: 
internal struct Parallel.LoopTimer // TypeDefIndex: 673
{
	// Fields
	private int m_timeLimit; // 0x0

	// Methods
	// RVA: 0xBB00 Offset: 0xAF00 VA: 0x18000BB00
	public void .ctor(int nWorkerTaskIndex) { }
	// RVA: 0xBB10 Offset: 0xAF10 VA: 0x18000BB10
	public bool LimitExceeded() { }
}

// Namespace: 
private sealed class Parallel.<>c__DisplayClass17_0<TLocal> // TypeDefIndex: 674
{
	// Fields
	public ParallelLoopStateFlags32 sharedPStateFlags; // 0x0
	public OperationCanceledException oce; // 0x0
	public ParallelOptions parallelOptions; // 0x0
	public ParallelForReplicatingTask rootTask; // 0x0
	public RangeManager rangeManager; // 0x0
	public Action<int, ParallelLoopState> bodyWithState; // 0x0
	public Func<int, ParallelLoopState, TLocal, TLocal> bodyWithLocal; // 0x0
	public Func<TLocal> localInit; // 0x0
	public Action<int> body; // 0x0
	public Action<TLocal> localFinally; // 0x0

	// Methods
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
	// RVA: 0x7C6CD0 Offset: 0x7C54D0 VA: 0x1807C6CD0
	internal void <ForWorker>b__0(object o) { }
	// RVA: 0x7C6E30 Offset: 0x7C5630 VA: 0x1807C6E30
	internal void <ForWorker>b__1() { }
}

// Namespace: System.Threading.Tasks
public class ParallelLoopState // TypeDefIndex: 675
{
	// Fields
	private ParallelLoopStateFlags m_flagsBase; // 0x10

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	internal void .ctor(ParallelLoopStateFlags fbase) { }
}

// Namespace: System.Threading.Tasks
internal class ParallelLoopState32 : ParallelLoopState // TypeDefIndex: 676
{
	// Fields
	private ParallelLoopStateFlags32 m_sharedParallelStateFlags; // 0x18
	private int m_currentIteration; // 0x20

	// Methods
	// RVA: 0x3123C0 Offset: 0x310BC0 VA: 0x1803123C0
	internal void .ctor(ParallelLoopStateFlags32 sharedParallelStateFlags) { }
}

// Namespace: System.Threading.Tasks
internal class ParallelLoopStateFlags // TypeDefIndex: 677
{
	// Fields
	internal static int PLS_NONE; // 0x0
	internal static int PLS_EXCEPTIONAL; // 0x4
	internal static int PLS_BROKEN; // 0x8
	internal static int PLS_STOPPED; // 0xC
	internal static int PLS_CANCELED; // 0x10
	private int m_LoopStateFlags; // 0x10

	// Properties
	internal int LoopStateFlags { get; }

	// Methods
	// RVA: 0x3123D0 Offset: 0x310BD0 VA: 0x1803123D0
	internal int get_LoopStateFlags() { }
	// RVA: 0x3123E0 Offset: 0x310BE0 VA: 0x1803123E0
	internal bool AtomicLoopStateUpdate(int newState, int illegalStates) { }
	// RVA: 0x3124E0 Offset: 0x310CE0 VA: 0x1803124E0
	internal bool AtomicLoopStateUpdate(int newState, int illegalStates, ref int oldState) { }
	// RVA: 0x312600 Offset: 0x310E00 VA: 0x180312600
	internal void SetExceptional() { }
	// RVA: 0x3126B0 Offset: 0x310EB0 VA: 0x1803126B0
	internal bool Cancel() { }
	// RVA: 0x312760 Offset: 0x310F60 VA: 0x180312760
	public void .ctor() { }
	// RVA: 0x312810 Offset: 0x311010 VA: 0x180312810
	private static void .cctor() { }
}

// Namespace: System.Threading.Tasks
internal class ParallelLoopStateFlags32 : ParallelLoopStateFlags // TypeDefIndex: 678
{
	// Fields
	internal int m_lowestBreakIteration; // 0x18

	// Properties
	internal int LowestBreakIteration { get; }

	// Methods
	// RVA: 0x3128D0 Offset: 0x3110D0 VA: 0x1803128D0
	internal int get_LowestBreakIteration() { }
	// RVA: 0x3128E0 Offset: 0x3110E0 VA: 0x1803128E0
	internal bool ShouldExitLoop(int CallerIteration) { }
	// RVA: 0x312A30 Offset: 0x311230 VA: 0x180312A30
	internal bool ShouldExitLoop() { }
	// RVA: 0x312B10 Offset: 0x311310 VA: 0x180312B10
	public void .ctor() { }
}

// Namespace: System.Threading.Tasks
public struct ParallelLoopResult // TypeDefIndex: 679
{
	// Fields
	internal bool m_completed; // 0x0
	internal Nullable<long> m_lowestBreakIteration; // 0x8
}

// Namespace: System.Threading.Tasks
internal struct IndexRange // TypeDefIndex: 680
{
	// Fields
	internal long m_nFromInclusive; // 0x0
	internal long m_nToExclusive; // 0x8
	internal Shared<long> m_nSharedCurrentIndexOffset; // 0x10
	internal int m_bRangeFinished; // 0x18
}

// Namespace: System.Threading.Tasks
internal struct RangeWorker // TypeDefIndex: 681
{
	// Fields
	internal readonly IndexRange[] m_indexRanges; // 0x0
	internal int m_nCurrentIndexRange; // 0x8
	internal long m_nStep; // 0x10
	internal long m_nIncrementValue; // 0x18
	internal readonly long m_nMaxIncrementValue; // 0x20
	internal readonly bool _use32BitCurrentIndex; // 0x28

	// Methods
	// RVA: 0xFB60 Offset: 0xEF60 VA: 0x18000FB60
	internal void .ctor(IndexRange[] ranges, int nInitialRange, long nStep, bool use32BitCurrentIndex) { }
	// RVA: 0xFB90 Offset: 0xEF90 VA: 0x18000FB90
	internal bool FindNewWork(out long nFromInclusiveLocal, out long nToExclusiveLocal) { }
	// RVA: 0xFBA0 Offset: 0xEFA0 VA: 0x18000FBA0
	internal bool FindNewWork32(out int nFromInclusiveLocal32, out int nToExclusiveLocal32) { }
}

// Namespace: System.Threading.Tasks
internal class RangeManager // TypeDefIndex: 682
{
	// Fields
	internal readonly IndexRange[] m_indexRanges; // 0x10
	internal readonly bool _use32BitCurrentIndex; // 0x18
	internal int m_nCurrentIndexRangeToAssign; // 0x1C
	internal long m_nStep; // 0x20

	// Methods
	// RVA: 0x31F620 Offset: 0x31DE20 VA: 0x18031F620
	internal void .ctor(long nFromInclusive, long nToExclusive, long nStep, int nNumExpectedWorkers) { }
	// RVA: 0x31F7F0 Offset: 0x31DFF0 VA: 0x18031F7F0
	internal RangeWorker RegisterNewWorker() { }
}

// Namespace: System.Threading.Tasks
internal class Shared<T> // TypeDefIndex: 683
{
	// Fields
	internal T Value; // 0x0

	// Methods
	// RVA: 0x7BF320 Offset: 0x7BDB20 VA: 0x1807BF320
	internal void .ctor(T value) { }
}

// Namespace: System.Threading.Tasks
public enum TaskStatus // TypeDefIndex: 684
{
	// Fields
	public int value__; // 0x0
	public const TaskStatus Created = 0; // 0x0
	public const TaskStatus WaitingForActivation = 1; // 0x0
	public const TaskStatus WaitingToRun = 2; // 0x0
	public const TaskStatus Running = 3; // 0x0
	public const TaskStatus WaitingForChildrenToComplete = 4; // 0x0
	public const TaskStatus RanToCompletion = 5; // 0x0
	public const TaskStatus Canceled = 6; // 0x0
	public const TaskStatus Faulted = 7; // 0x0
}

// Namespace: System.Threading.Tasks
public class Task : IThreadPoolWorkItem, IAsyncResult, IDisposable // TypeDefIndex: 685
{
	// Fields
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal static Task t_currentTask; // 0x80000000
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static StackGuard t_stackGuard; // 0x80000008
	internal static int s_taskIdCounter; // 0x0
	private static readonly TaskFactory s_factory; // 0x8
	private int m_taskId; // 0x10
	internal object m_action; // 0x18
	internal object m_stateObject; // 0x20
	internal TaskScheduler m_taskScheduler; // 0x28
	internal readonly Task m_parent; // 0x30
	internal int m_stateFlags; // 0x38
	private const int OptionsMask = 65535; // 0x0
	internal const int TASK_STATE_STARTED = 65536; // 0x0
	internal const int TASK_STATE_DELEGATE_INVOKED = 131072; // 0x0
	internal const int TASK_STATE_DISPOSED = 262144; // 0x0
	internal const int TASK_STATE_EXCEPTIONOBSERVEDBYPARENT = 524288; // 0x0
	internal const int TASK_STATE_CANCELLATIONACKNOWLEDGED = 1048576; // 0x0
	internal const int TASK_STATE_FAULTED = 2097152; // 0x0
	internal const int TASK_STATE_CANCELED = 4194304; // 0x0
	internal const int TASK_STATE_WAITING_ON_CHILDREN = 8388608; // 0x0
	internal const int TASK_STATE_RAN_TO_COMPLETION = 16777216; // 0x0
	internal const int TASK_STATE_WAITINGFORACTIVATION = 33554432; // 0x0
	internal const int TASK_STATE_COMPLETION_RESERVED = 67108864; // 0x0
	internal const int TASK_STATE_THREAD_WAS_ABORTED = 134217728; // 0x0
	internal const int TASK_STATE_WAIT_COMPLETION_NOTIFICATION = 268435456; // 0x0
	internal const int TASK_STATE_EXECUTIONCONTEXT_IS_NULL = 536870912; // 0x0
	internal const int TASK_STATE_TASKSCHEDULED_WAS_FIRED = 1073741824; // 0x0
	private const int TASK_STATE_COMPLETED_MASK = 23068672; // 0x0
	private const int CANCELLATION_REQUESTED = 1; // 0x0
	private object m_continuationObject; // 0x40
	private static readonly object s_taskCompletionSentinel; // 0x10
	internal static bool s_asyncDebuggingEnabled; // 0x18
	private static readonly Dictionary<int, Task> s_currentActiveTasks; // 0x20
	private static readonly object s_activeTasksLock; // 0x28
	internal Task.ContingentProperties m_contingentProperties; // 0x48
	private static readonly Action<object> s_taskCancelCallback; // 0x30
	private static readonly Func<Task.ContingentProperties> s_createContingentProperties; // 0x38
	private static Task s_completedTask; // 0x40
	private static readonly Predicate<Task> s_IsExceptionObservedByParentPredicate; // 0x48
	private static ContextCallback s_ecCallback; // 0x50
	private static readonly Predicate<object> s_IsTaskContinuationNullPredicate; // 0x58

	// Properties
	internal TaskCreationOptions Options { get; }
	internal bool IsWaitNotificationEnabledOrNotRanToCompletion { get; }
	internal virtual bool ShouldNotifyDebuggerOfWaitCompletion { get; }
	internal bool IsWaitNotificationEnabled { get; }
	public int Id { get; }
	internal static StackGuard CurrentStackGuard { get; }
	public AggregateException Exception { get; }
	public TaskStatus Status { get; }
	public bool IsCanceled { get; }
	internal bool IsCancellationRequested { get; }
	internal CancellationToken CancellationToken { get; }
	internal bool IsCancellationAcknowledged { get; }
	public bool IsCompleted { get; }
	internal bool IsRanToCompletion { get; }
	public TaskCreationOptions CreationOptions { get; }
	private WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
	public static Task CompletedTask { get; }
	internal ManualResetEventSlim CompletedEvent { get; }
	internal bool IsSelfReplicatingRoot { get; }
	internal bool IsChildReplica { get; }
	internal int ActiveChildCount { get; }
	internal bool ExceptionRecorded { get; }
	public bool IsFaulted { get; }
	internal ExecutionContext CapturedContext { get; set; }
	internal bool IsExceptionObservedByParent { get; }
	internal bool IsDelegateInvoked { get; }
	internal virtual object SavedStateForNextReplica { get; set; }
	internal virtual object SavedStateFromPreviousReplica { get; set; }
	internal virtual Task HandedOverChildReplica { get; set; }

	// Methods
	// RVA: 0x3911F0 Offset: 0x38F9F0 VA: 0x1803911F0
	internal static bool AddToActiveTasks(Task task) { }
	// RVA: 0x391470 Offset: 0x38FC70 VA: 0x180391470
	internal static void RemoveFromActiveTasks(int taskId) { }
	// RVA: 0x3916B0 Offset: 0x38FEB0 VA: 0x1803916B0
	internal void .ctor(bool canceled, TaskCreationOptions creationOptions, CancellationToken ct) { }
	// RVA: 0x391790 Offset: 0x38FF90 VA: 0x180391790
	internal void .ctor() { }
	// RVA: 0x3917A0 Offset: 0x38FFA0 VA: 0x1803917A0
	internal void .ctor(Delegate action, object state, Task parent, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler) { }
	// RVA: 0x3918C0 Offset: 0x3900C0 VA: 0x1803918C0
	internal void TaskConstructorCore(object action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler) { }
	// RVA: 0x391AE0 Offset: 0x3902E0 VA: 0x180391AE0
	private void AssignCancellationToken(CancellationToken cancellationToken, Task antecedent, TaskContinuation continuation) { }
	// RVA: 0x391D70 Offset: 0x390570 VA: 0x180391D70
	private static void TaskCancelCallback(object o) { }
	// RVA: 0x391EA0 Offset: 0x3906A0 VA: 0x180391EA0
	internal void PossiblyCaptureContext(ref StackCrawlMark stackMark) { }
	// RVA: 0x391F90 Offset: 0x390790 VA: 0x180391F90
	internal TaskCreationOptions get_Options() { }
	// RVA: 0x392030 Offset: 0x390830 VA: 0x180392030
	internal static TaskCreationOptions OptionsMethod(int flags) { }
	// RVA: 0x392040 Offset: 0x390840 VA: 0x180392040
	internal bool AtomicStateUpdate(int newBits, int illegalBits) { }
	// RVA: 0x392140 Offset: 0x390940 VA: 0x180392140
	internal bool AtomicStateUpdate(int newBits, int illegalBits, ref int oldFlags) { }
	// RVA: 0x392260 Offset: 0x390A60 VA: 0x180392260
	internal void SetNotificationForWaitCompletion(bool enabled) { }
	// RVA: 0x392350 Offset: 0x390B50 VA: 0x180392350
	internal bool NotifyDebuggerOfWaitCompletionIfNecessary() { }
	// RVA: 0x3923A0 Offset: 0x390BA0 VA: 0x1803923A0
	internal bool get_IsWaitNotificationEnabledOrNotRanToCompletion() { }
	// RVA: 0x3923C0 Offset: 0x390BC0 VA: 0x1803923C0 Slot: 8
	internal virtual bool get_ShouldNotifyDebuggerOfWaitCompletion() { }
	// RVA: 0x3923C0 Offset: 0x390BC0 VA: 0x1803923C0
	internal bool get_IsWaitNotificationEnabled() { }
	// RVA: 0x3923E0 Offset: 0x390BE0 VA: 0x1803923E0
	private void NotifyDebuggerOfWaitCompletion() { }
	// RVA: 0x392410 Offset: 0x390C10 VA: 0x180392410
	internal bool MarkStarted() { }
	// RVA: 0x392430 Offset: 0x390C30 VA: 0x180392430
	internal void AddNewChild() { }
	// RVA: 0x3924B0 Offset: 0x390CB0 VA: 0x1803924B0
	internal void DisregardChild() { }
	// RVA: 0x3924E0 Offset: 0x390CE0 VA: 0x1803924E0
	public void RunSynchronously(TaskScheduler scheduler) { }
	// RVA: 0x3925A0 Offset: 0x390DA0 VA: 0x1803925A0
	internal void InternalRunSynchronously(TaskScheduler scheduler, bool waitForCompletion) { }
	// RVA: 0x392940 Offset: 0x391140 VA: 0x180392940
	internal static int NewId() { }
	// RVA: 0x3929F0 Offset: 0x3911F0 VA: 0x1803929F0
	public int get_Id() { }
	// RVA: 0x392B50 Offset: 0x391350 VA: 0x180392B50
	internal static Task InternalCurrentIfAttached(TaskCreationOptions creationOptions) { }
	// RVA: 0x392C30 Offset: 0x391430 VA: 0x180392C30
	internal static StackGuard get_CurrentStackGuard() { }
	// RVA: 0x392D80 Offset: 0x391580 VA: 0x180392D80
	public AggregateException get_Exception() { }
	// RVA: 0x392DB0 Offset: 0x3915B0 VA: 0x180392DB0
	public TaskStatus get_Status() { }
	// RVA: 0x392E10 Offset: 0x391610 VA: 0x180392E10
	public bool get_IsCanceled() { }
	// RVA: 0x392E30 Offset: 0x391630 VA: 0x180392E30
	internal bool get_IsCancellationRequested() { }
	// RVA: 0x392E70 Offset: 0x391670 VA: 0x180392E70
	internal Task.ContingentProperties EnsureContingentPropertiesInitialized(bool needsProtection) { }
	// RVA: 0x392F90 Offset: 0x391790 VA: 0x180392F90
	private Task.ContingentProperties EnsureContingentPropertiesInitializedCore(bool needsProtection) { }
	// RVA: 0x3930B0 Offset: 0x3918B0 VA: 0x1803930B0
	internal CancellationToken get_CancellationToken() { }
	// RVA: 0x3930D0 Offset: 0x3918D0 VA: 0x1803930D0
	internal bool get_IsCancellationAcknowledged() { }
	// RVA: 0x3930F0 Offset: 0x3918F0 VA: 0x1803930F0 Slot: 9
	public bool get_IsCompleted() { }
	// RVA: 0x393190 Offset: 0x391990 VA: 0x180393190
	private static bool IsCompletedMethod(int flags) { }
	// RVA: 0x3931A0 Offset: 0x3919A0 VA: 0x1803931A0
	internal bool get_IsRanToCompletion() { }
	// RVA: 0x3931C0 Offset: 0x3919C0 VA: 0x1803931C0
	public TaskCreationOptions get_CreationOptions() { }
	// RVA: 0x3931E0 Offset: 0x3919E0 VA: 0x1803931E0 Slot: 6
	private WaitHandle System.IAsyncResult.get_AsyncWaitHandle() { }
	// RVA: 0x393420 Offset: 0x391C20 VA: 0x180393420
	public static Task get_CompletedTask() { }
	// RVA: 0x393570 Offset: 0x391D70 VA: 0x180393570
	internal ManualResetEventSlim get_CompletedEvent() { }
	// RVA: 0x3936D0 Offset: 0x391ED0 VA: 0x1803936D0
	internal bool get_IsSelfReplicatingRoot() { }
	// RVA: 0x3936F0 Offset: 0x391EF0 VA: 0x1803936F0
	internal bool get_IsChildReplica() { }
	// RVA: 0x393710 Offset: 0x391F10 VA: 0x180393710
	internal int get_ActiveChildCount() { }
	// RVA: 0x393730 Offset: 0x391F30 VA: 0x180393730
	internal bool get_ExceptionRecorded() { }
	// RVA: 0x393780 Offset: 0x391F80 VA: 0x180393780
	public bool get_IsFaulted() { }
	// RVA: 0x3937A0 Offset: 0x391FA0 VA: 0x1803937A0
	internal ExecutionContext get_CapturedContext() { }
	// RVA: 0x393870 Offset: 0x392070 VA: 0x180393870
	internal void set_CapturedContext(ExecutionContext value) { }
	// RVA: 0x3938C0 Offset: 0x3920C0 VA: 0x1803938C0
	private static ExecutionContext CopyExecutionContext(ExecutionContext capturedContext) { }
	// RVA: 0x393980 Offset: 0x392180 VA: 0x180393980 Slot: 7
	public void Dispose() { }
	// RVA: 0x393A30 Offset: 0x392230 VA: 0x180393A30 Slot: 10
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x393B70 Offset: 0x392370 VA: 0x180393B70
	internal void ScheduleAndStart(bool needsProtection) { }
	// RVA: 0x393DC0 Offset: 0x3925C0 VA: 0x180393DC0
	internal void AddException(object exceptionObject) { }
	// RVA: 0x393DD0 Offset: 0x3925D0 VA: 0x180393DD0
	internal void AddException(object exceptionObject, bool representsCancellation) { }
	// RVA: 0x394120 Offset: 0x392920 VA: 0x180394120
	private AggregateException GetExceptions(bool includeTaskCanceledExceptions) { }
	// RVA: 0x3942F0 Offset: 0x392AF0 VA: 0x1803942F0
	internal ReadOnlyCollection<ExceptionDispatchInfo> GetExceptionDispatchInfos() { }
	// RVA: 0x3944B0 Offset: 0x392CB0 VA: 0x1803944B0
	internal ExceptionDispatchInfo GetCancellationExceptionDispatchInfo() { }
	// RVA: 0x3944E0 Offset: 0x392CE0 VA: 0x1803944E0
	internal void ThrowIfExceptional(bool includeTaskCanceledExceptions) { }
	// RVA: 0x394590 Offset: 0x392D90 VA: 0x180394590
	internal void UpdateExceptionObservedStatus() { }
	// RVA: 0x394670 Offset: 0x392E70 VA: 0x180394670
	internal bool get_IsExceptionObservedByParent() { }
	// RVA: 0x394690 Offset: 0x392E90 VA: 0x180394690
	internal bool get_IsDelegateInvoked() { }
	// RVA: 0x3946B0 Offset: 0x392EB0 VA: 0x1803946B0
	internal void Finish(bool bUserDelegateExecuted) { }
	// RVA: 0x3948F0 Offset: 0x3930F0 VA: 0x1803948F0
	internal void FinishStageTwo() { }
	// RVA: 0x394AC0 Offset: 0x3932C0 VA: 0x180394AC0
	internal void FinishStageThree() { }
	// RVA: 0x394B20 Offset: 0x393320 VA: 0x180394B20
	internal void ProcessChildCompletion(Task childTask) { }
	// RVA: 0x394D30 Offset: 0x393530 VA: 0x180394D30
	internal void AddExceptionsFromChildren() { }
	// RVA: 0x394FA0 Offset: 0x3937A0 VA: 0x180394FA0
	internal void FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan) { }
	// RVA: 0x395020 Offset: 0x393820 VA: 0x180395020
	private void Execute() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 11
	internal virtual bool ShouldReplicate() { }
	// RVA: 0x395270 Offset: 0x393A70 VA: 0x180395270 Slot: 12
	internal virtual Task CreateReplicaTask(Action<object> taskReplicaDelegate, object stateObject, Task parentTask, TaskScheduler taskScheduler, TaskCreationOptions creationOptionsForReplica, InternalTaskOptions internalOptionsForReplica) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 13
	internal virtual object get_SavedStateForNextReplica() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 14
	internal virtual void set_SavedStateForNextReplica(object value) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 15
	internal virtual object get_SavedStateFromPreviousReplica() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 16
	internal virtual void set_SavedStateFromPreviousReplica(object value) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 17
	internal virtual Task get_HandedOverChildReplica() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 18
	internal virtual void set_HandedOverChildReplica(Task value) { }
	// RVA: 0x395360 Offset: 0x393B60 VA: 0x180395360
	private static void ExecuteSelfReplicating(Task root) { }
	// RVA: 0x395460 Offset: 0x393C60 VA: 0x180395460 Slot: 4
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }
	// RVA: 0x395470 Offset: 0x393C70 VA: 0x180395470 Slot: 5
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }
	// RVA: 0x395500 Offset: 0x393D00 VA: 0x180395500
	internal bool ExecuteEntry(bool bPreventDoubleExecution) { }
	// RVA: 0x395760 Offset: 0x393F60 VA: 0x180395760
	private void ExecuteWithThreadLocal(ref Task currentTaskSlot) { }
	// RVA: 0x3959E0 Offset: 0x3941E0 VA: 0x1803959E0
	private static void ExecutionContextCallback(object obj) { }
	// RVA: 0x395AD0 Offset: 0x3942D0 VA: 0x180395AD0 Slot: 19
	internal virtual void InnerInvoke() { }
	// RVA: 0x395BA0 Offset: 0x3943A0 VA: 0x180395BA0
	internal void InnerInvokeWithArg(Task childTask) { }
	// RVA: 0x395BD0 Offset: 0x3943D0 VA: 0x180395BD0
	private void HandleException(Exception unhandledException) { }
	// RVA: 0x395D50 Offset: 0x394550 VA: 0x180395D50
	internal void SetContinuationForAwait(Action continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, ref StackCrawlMark stackMark) { }
	// RVA: 0x395FE0 Offset: 0x3947E0 VA: 0x180395FE0
	public void Wait() { }
	// RVA: 0x3960B0 Offset: 0x3948B0 VA: 0x1803960B0
	public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken) { }
	// RVA: 0x396200 Offset: 0x394A00 VA: 0x180396200
	private bool WrappedTryRunInline() { }
	// RVA: 0x396320 Offset: 0x394B20 VA: 0x180396320
	internal bool InternalWait(int millisecondsTimeout, CancellationToken cancellationToken) { }
	// RVA: 0x396490 Offset: 0x394C90 VA: 0x180396490
	private bool SpinThenBlockingWait(int millisecondsTimeout, CancellationToken cancellationToken) { }
	// RVA: 0x396860 Offset: 0x395060 VA: 0x180396860
	private bool SpinWait(int millisecondsTimeout) { }
	// RVA: 0x396900 Offset: 0x395100 VA: 0x180396900
	internal bool InternalCancel(bool bCancelNonExecutingOnly) { }
	// RVA: 0x396B70 Offset: 0x395370 VA: 0x180396B70
	internal void RecordInternalCancellationRequest() { }
	// RVA: 0x396BA0 Offset: 0x3953A0 VA: 0x180396BA0
	internal void RecordInternalCancellationRequest(CancellationToken tokenToRecord) { }
	// RVA: 0x396C90 Offset: 0x395490 VA: 0x180396C90
	internal void RecordInternalCancellationRequest(CancellationToken tokenToRecord, object cancellationException) { }
	// RVA: 0x396DA0 Offset: 0x3955A0 VA: 0x180396DA0
	internal void CancellationCleanupLogic() { }
	// RVA: 0x396F10 Offset: 0x395710 VA: 0x180396F10
	private void SetCancellationAcknowledged() { }
	// RVA: 0x396F30 Offset: 0x395730 VA: 0x180396F30
	internal void FinishContinuations() { }
	// RVA: 0x397500 Offset: 0x395D00 VA: 0x180397500
	public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { }
	// RVA: 0x397540 Offset: 0x395D40 VA: 0x180397540
	private Task ContinueWith(Action<Task, object> continuationAction, object state, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, ref StackCrawlMark stackMark) { }
	// RVA: 0x397920 Offset: 0x396120 VA: 0x180397920
	internal static void CreationOptionsFromContinuationOptions(TaskContinuationOptions continuationOptions, out TaskCreationOptions creationOptions, out InternalTaskOptions internalOptions) { }
	// RVA: 0x397AA0 Offset: 0x3962A0 VA: 0x180397AA0
	internal void ContinueWithCore(Task continuationTask, TaskScheduler scheduler, CancellationToken cancellationToken, TaskContinuationOptions options) { }
	// RVA: 0x397CB0 Offset: 0x3964B0 VA: 0x180397CB0
	internal void AddCompletionAction(ITaskCompletionAction action) { }
	// RVA: 0x397CC0 Offset: 0x3964C0 VA: 0x180397CC0
	private void AddCompletionAction(ITaskCompletionAction action, bool addBeforeOthers) { }
	// RVA: 0x397D70 Offset: 0x396570 VA: 0x180397D70
	private bool AddTaskContinuationComplex(object tc, bool addBeforeOthers) { }
	// RVA: 0x398100 Offset: 0x396900 VA: 0x180398100
	private bool AddTaskContinuation(object tc, bool addBeforeOthers) { }
	// RVA: 0x398190 Offset: 0x396990 VA: 0x180398190
	internal void RemoveContinuation(object continuationObject) { }
	// RVA: 0x398470 Offset: 0x396C70 VA: 0x180398470
	internal static Task FromCancellation(CancellationToken cancellationToken) { }
	// RVA: 0x42AAE0 Offset: 0x4292E0 VA: 0x18042AAE0
	internal static Task<TResult> FromCancellation(CancellationToken cancellationToken) { }
	// RVA: 0x398560 Offset: 0x396D60 VA: 0x180398560
	public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken) { }
	// RVA: 0x398BB0 Offset: 0x3973B0 VA: 0x180398BB0
	public static Task<Task> WhenAny(Task[] tasks) { }
	// RVA: 0x398DC0 Offset: 0x3975C0 VA: 0x180398DC0
	private static void .cctor() { }
}

// Namespace: 
internal class Task.ContingentProperties // TypeDefIndex: 686
{
	// Fields
	internal ExecutionContext m_capturedContext; // 0x10
	internal ManualResetEventSlim m_completionEvent; // 0x18
	internal TaskExceptionHolder m_exceptionsHolder; // 0x20
	internal CancellationToken m_cancellationToken; // 0x28
	internal Shared<CancellationTokenRegistration> m_cancellationRegistration; // 0x30
	internal int m_internalCancellationRequested; // 0x38
	internal int m_completionCountdown; // 0x3C
	internal List<Task> m_exceptionalChildren; // 0x40

	// Methods
	// RVA: 0x2776D0 Offset: 0x275ED0 VA: 0x1802776D0
	internal void SetCompleted() { }
	// RVA: 0x277700 Offset: 0x275F00 VA: 0x180277700
	internal void DeregisterCancellationCallback() { }
	// RVA: 0x2777C0 Offset: 0x275FC0 VA: 0x1802777C0
	public void .ctor() { }
}

// Namespace: 
private sealed class Task.SetOnInvokeMres : ManualResetEventSlim, ITaskCompletionAction // TypeDefIndex: 687
{
	// Methods
	// RVA: 0x277B10 Offset: 0x276310 VA: 0x180277B10
	internal void .ctor() { }
	// RVA: 0x277C30 Offset: 0x276430 VA: 0x180277C30 Slot: 6
	public void Invoke(Task completingTask) { }
}

// Namespace: 
private sealed class Task.DelayPromise : Task<VoidTaskResult> // TypeDefIndex: 688
{
	// Fields
	internal readonly CancellationToken Token; // 0x58
	internal CancellationTokenRegistration Registration; // 0x60
	internal Timer Timer; // 0x78

	// Methods
	// RVA: 0x2777D0 Offset: 0x275FD0 VA: 0x1802777D0
	internal void .ctor(CancellationToken token) { }
	// RVA: 0x277960 Offset: 0x276160 VA: 0x180277960
	internal void Complete() { }
}

// Namespace: 
private sealed class Task.<>c__DisplayClass178_0 // TypeDefIndex: 689
{
	// Fields
	public Task root; // 0x10
	public bool replicasAreQuitting; // 0x18
	public Action<object> taskReplicaDelegate; // 0x20
	public TaskCreationOptions creationOptionsForReplicas; // 0x28
	public InternalTaskOptions internalOptionsForReplicas; // 0x2C

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x277290 Offset: 0x275A90 VA: 0x180277290
	internal void <ExecuteSelfReplicating>b__0(object <p0>) { }
}

// Namespace: 
[Serializable]
private sealed class Task.<>c // TypeDefIndex: 690
{
	// Fields
	public static readonly Task.<>c <>9; // 0x0
	public static Action<object> <>9__276_0; // 0x8
	public static TimerCallback <>9__276_1; // 0x10

	// Methods
	// RVA: 0x277010 Offset: 0x275810 VA: 0x180277010
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x277090 Offset: 0x275890 VA: 0x180277090
	internal void <Delay>b__276_0(object state) { }
	// RVA: 0x277130 Offset: 0x275930 VA: 0x180277130
	internal void <Delay>b__276_1(object state) { }
	// RVA: 0x2771D0 Offset: 0x2759D0 VA: 0x1802771D0
	internal Task.ContingentProperties <.cctor>b__295_0() { }
	// RVA: 0x277250 Offset: 0x275A50 VA: 0x180277250
	internal bool <.cctor>b__295_1(Task t) { }
	// RVA: 0x277280 Offset: 0x275A80 VA: 0x180277280
	internal bool <.cctor>b__295_2(object tc) { }
}

// Namespace: System.Threading.Tasks
internal sealed class CompletionActionInvoker : IThreadPoolWorkItem // TypeDefIndex: 691
{
	// Fields
	private readonly ITaskCompletionAction m_action; // 0x10
	private readonly Task m_completingTask; // 0x18

	// Methods
	// RVA: 0x25B970 Offset: 0x25A170 VA: 0x18025B970
	internal void .ctor(ITaskCompletionAction action, Task completingTask) { }
	// RVA: 0x25BD20 Offset: 0x25A520 VA: 0x18025BD20 Slot: 4
	public void ExecuteWorkItem() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	public void MarkAborted(ThreadAbortException tae) { }
}

// Namespace: System.Threading.Tasks
internal class ParallelForReplicatingTask : Task // TypeDefIndex: 692
{
	// Fields
	private int m_replicationDownCount; // 0x50

	// Methods
	// RVA: 0x3120E0 Offset: 0x3108E0 VA: 0x1803120E0
	internal void .ctor(ParallelOptions parallelOptions, Action action, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions) { }
	// RVA: 0x312240 Offset: 0x310A40 VA: 0x180312240 Slot: 11
	internal override bool ShouldReplicate() { }
	// RVA: 0x312260 Offset: 0x310A60 VA: 0x180312260 Slot: 12
	internal override Task CreateReplicaTask(Action<object> taskReplicaDelegate, object stateObject, Task parentTask, TaskScheduler taskScheduler, TaskCreationOptions creationOptionsForReplica, InternalTaskOptions internalOptionsForReplica) { }
}

// Namespace: System.Threading.Tasks
internal class ParallelForReplicaTask : Task // TypeDefIndex: 693
{
	// Fields
	internal object m_stateForNextReplica; // 0x50
	internal object m_stateFromPreviousReplica; // 0x58
	internal Task m_handedOverChildReplica; // 0x60

	// Properties
	internal override object SavedStateForNextReplica { get; set; }
	internal override object SavedStateFromPreviousReplica { get; set; }
	internal override Task HandedOverChildReplica { get; set; }

	// Methods
	// RVA: 0x311FC0 Offset: 0x3107C0 VA: 0x180311FC0
	internal void .ctor(Action<object> taskReplicaDelegate, object stateObject, Task parentTask, TaskScheduler taskScheduler, TaskCreationOptions creationOptionsForReplica, InternalTaskOptions internalOptionsForReplica) { }
	// RVA: 0x1E31F0 Offset: 0x1E19F0 VA: 0x1801E31F0 Slot: 13
	internal override object get_SavedStateForNextReplica() { }
	// RVA: 0x2701B0 Offset: 0x26E9B0 VA: 0x1802701B0 Slot: 14
	internal override void set_SavedStateForNextReplica(object value) { }
	// RVA: 0x3120C0 Offset: 0x3108C0 VA: 0x1803120C0 Slot: 15
	internal override object get_SavedStateFromPreviousReplica() { }
	// RVA: 0x3120D0 Offset: 0x3108D0 VA: 0x1803120D0 Slot: 16
	internal override void set_SavedStateFromPreviousReplica(object value) { }
	// RVA: 0x29E380 Offset: 0x29CB80 VA: 0x18029E380 Slot: 17
	internal override Task get_HandedOverChildReplica() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0 Slot: 18
	internal override void set_HandedOverChildReplica(Task value) { }
}

// Namespace: System.Threading.Tasks
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum TaskCreationOptions // TypeDefIndex: 694
{
	// Fields
	public int value__; // 0x0
	public const TaskCreationOptions None = 0; // 0x0
	public const TaskCreationOptions PreferFairness = 1; // 0x0
	public const TaskCreationOptions LongRunning = 2; // 0x0
	public const TaskCreationOptions AttachedToParent = 4; // 0x0
	public const TaskCreationOptions DenyChildAttach = 8; // 0x0
	public const TaskCreationOptions HideScheduler = 16; // 0x0
	public const TaskCreationOptions RunContinuationsAsynchronously = 64; // 0x0
}

// Namespace: System.Threading.Tasks
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
internal enum InternalTaskOptions // TypeDefIndex: 695
{
	// Fields
	public int value__; // 0x0
	public const InternalTaskOptions None = 0; // 0x0
	public const InternalTaskOptions InternalOptionsMask = 65280; // 0x0
	public const InternalTaskOptions ChildReplica = 256; // 0x0
	public const InternalTaskOptions ContinuationTask = 512; // 0x0
	public const InternalTaskOptions PromiseTask = 1024; // 0x0
	public const InternalTaskOptions SelfReplicating = 2048; // 0x0
	public const InternalTaskOptions LazyCancellation = 4096; // 0x0
	public const InternalTaskOptions QueuedByRuntime = 8192; // 0x0
	public const InternalTaskOptions DoNotDispose = 16384; // 0x0
}

// Namespace: System.Threading.Tasks
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum TaskContinuationOptions // TypeDefIndex: 696
{
	// Fields
	public int value__; // 0x0
	public const TaskContinuationOptions None = 0; // 0x0
	public const TaskContinuationOptions PreferFairness = 1; // 0x0
	public const TaskContinuationOptions LongRunning = 2; // 0x0
	public const TaskContinuationOptions AttachedToParent = 4; // 0x0
	public const TaskContinuationOptions DenyChildAttach = 8; // 0x0
	public const TaskContinuationOptions HideScheduler = 16; // 0x0
	public const TaskContinuationOptions LazyCancellation = 32; // 0x0
	public const TaskContinuationOptions RunContinuationsAsynchronously = 64; // 0x0
	public const TaskContinuationOptions NotOnRanToCompletion = 65536; // 0x0
	public const TaskContinuationOptions NotOnFaulted = 131072; // 0x0
	public const TaskContinuationOptions NotOnCanceled = 262144; // 0x0
	public const TaskContinuationOptions OnlyOnRanToCompletion = 393216; // 0x0
	public const TaskContinuationOptions OnlyOnFaulted = 327680; // 0x0
	public const TaskContinuationOptions OnlyOnCanceled = 196608; // 0x0
	public const TaskContinuationOptions ExecuteSynchronously = 524288; // 0x0
}

// Namespace: System.Threading.Tasks
internal class StackGuard // TypeDefIndex: 697
{
	// Fields
	private int m_inliningDepth; // 0x10
	private const int MAX_UNCHECKED_INLINING_DEPTH = 20; // 0x0

	// Methods
	// RVA: 0x1EAB70 Offset: 0x1E9370 VA: 0x1801EAB70
	internal bool TryBeginInliningScope() { }
	// RVA: 0x1EAB80 Offset: 0x1E9380 VA: 0x1801EAB80
	internal void EndInliningScope() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Threading.Tasks
internal struct VoidTaskResult // TypeDefIndex: 698
{}

// Namespace: System.Threading.Tasks
internal interface ITaskCompletionAction // TypeDefIndex: 699
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Invoke(Task completingTask) { }
}

// Namespace: System.Threading.Tasks
[Serializable]
public class TaskCanceledException : OperationCanceledException // TypeDefIndex: 700
{
	// Fields
	private Task m_canceledTask; // 0x90

	// Methods
	// RVA: 0x399470 Offset: 0x397C70 VA: 0x180399470
	public void .ctor() { }
	// RVA: 0x399500 Offset: 0x397D00 VA: 0x180399500
	public void .ctor(Task task) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading.Tasks
internal sealed class ContinuationTaskFromTask : Task // TypeDefIndex: 701
{
	// Fields
	private Task m_antecedent; // 0x50

	// Methods
	// RVA: 0x3EA280 Offset: 0x3E8A80 VA: 0x1803EA280
	public void .ctor(Task antecedent, Delegate action, object state, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, ref StackCrawlMark stackMark) { }
	// RVA: 0x3EA390 Offset: 0x3E8B90 VA: 0x1803EA390 Slot: 19
	internal override void InnerInvoke() { }
}

// Namespace: System.Threading.Tasks
internal abstract class TaskContinuation // TypeDefIndex: 702
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	internal abstract void Run(Task completedTask, bool bCanInlineContinuationTask) { }
	// RVA: 0x3995D0 Offset: 0x397DD0 VA: 0x1803995D0
	protected static void InlineIfPossibleOrElseQueue(Task task, bool needsProtection) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Threading.Tasks
internal class StandardTaskContinuation : TaskContinuation // TypeDefIndex: 703
{
	// Fields
	internal readonly Task m_task; // 0x10
	internal readonly TaskContinuationOptions m_options; // 0x18
	private readonly TaskScheduler m_taskScheduler; // 0x20

	// Methods
	// RVA: 0x1EBD70 Offset: 0x1EA570 VA: 0x1801EBD70
	internal void .ctor(Task task, TaskContinuationOptions options, TaskScheduler scheduler) { }
	// RVA: 0x1EBE60 Offset: 0x1EA660 VA: 0x1801EBE60 Slot: 4
	internal override void Run(Task completedTask, bool bCanInlineContinuationTask) { }
}

// Namespace: System.Threading.Tasks
internal sealed class SynchronizationContextAwaitTaskContinuation : AwaitTaskContinuation // TypeDefIndex: 704
{
	// Fields
	private static readonly SendOrPostCallback s_postCallback; // 0x0
	private static ContextCallback s_postActionCallback; // 0x8
	private readonly SynchronizationContext m_syncContext; // 0x20

	// Methods
	// RVA: 0x38FD90 Offset: 0x38E590 VA: 0x18038FD90
	internal void .ctor(SynchronizationContext context, Action action, bool flowExecutionContext, ref StackCrawlMark stackMark) { }
	// RVA: 0x38FDD0 Offset: 0x38E5D0 VA: 0x18038FDD0 Slot: 4
	internal sealed override void Run(Task task, bool canInlineContinuationTask) { }
	// RVA: 0x390060 Offset: 0x38E860 VA: 0x180390060
	private static void PostAction(object state) { }
	// RVA: 0x390150 Offset: 0x38E950 VA: 0x180390150
	private static ContextCallback GetPostActionCallback() { }
	// RVA: 0x390250 Offset: 0x38EA50 VA: 0x180390250
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class SynchronizationContextAwaitTaskContinuation.<>c // TypeDefIndex: 705
{
	// Fields
	public static readonly SynchronizationContextAwaitTaskContinuation.<>c <>9; // 0xA15984

	// Methods
	// RVA: 0x276EF0 Offset: 0x2756F0 VA: 0x180276EF0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x276F70 Offset: 0x275770 VA: 0x180276F70
	internal void <.cctor>b__7_0(object state) { }
}

// Namespace: System.Threading.Tasks
internal sealed class TaskSchedulerAwaitTaskContinuation : AwaitTaskContinuation // TypeDefIndex: 706
{
	// Fields
	private readonly TaskScheduler m_scheduler; // 0x20

	// Methods
	// RVA: 0x38FD90 Offset: 0x38E590 VA: 0x18038FD90
	internal void .ctor(TaskScheduler scheduler, Action action, bool flowExecutionContext, ref StackCrawlMark stackMark) { }
	// RVA: 0x39BFE0 Offset: 0x39A7E0 VA: 0x18039BFE0 Slot: 4
	internal sealed override void Run(Task ignored, bool canInlineContinuationTask) { }
}

// Namespace: 
[Serializable]
private sealed class TaskSchedulerAwaitTaskContinuation.<>c // TypeDefIndex: 707
{
	// Fields
	public static readonly TaskSchedulerAwaitTaskContinuation.<>c <>9; // 0x0
	public static Action<object> <>9__2_0; // 0x8

	// Methods
	// RVA: 0x278040 Offset: 0x276840 VA: 0x180278040
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x2780C0 Offset: 0x2768C0 VA: 0x1802780C0
	internal void <Run>b__2_0(object state) { }
}

// Namespace: System.Threading.Tasks
internal class AwaitTaskContinuation : TaskContinuation, IThreadPoolWorkItem // TypeDefIndex: 708
{
	// Fields
	private readonly ExecutionContext m_capturedContext; // 0x10
	protected readonly Action m_action; // 0x18
	private static ContextCallback s_invokeActionCallback; // 0x0

	// Properties
	internal static bool IsValidLocationForInlining { get; }

	// Methods
	// RVA: 0x2DA3D0 Offset: 0x2D8BD0 VA: 0x1802DA3D0
	internal void .ctor(Action action, bool flowExecutionContext, ref StackCrawlMark stackMark) { }
	// RVA: 0x2DA4A0 Offset: 0x2D8CA0 VA: 0x1802DA4A0
	internal void .ctor(Action action, bool flowExecutionContext) { }
	// RVA: 0x2DA560 Offset: 0x2D8D60 VA: 0x1802DA560
	protected Task CreateTask(Action<object> action, object state, TaskScheduler scheduler) { }
	// RVA: 0x2DA710 Offset: 0x2D8F10 VA: 0x1802DA710 Slot: 4
	internal override void Run(Task task, bool canInlineContinuationTask) { }
	// RVA: 0x2DA800 Offset: 0x2D9000 VA: 0x1802DA800
	internal static bool get_IsValidLocationForInlining() { }
	// RVA: 0x2DA970 Offset: 0x2D9170 VA: 0x1802DA970
	private void ExecuteWorkItemHelper() { }
	// RVA: 0x2DAAC0 Offset: 0x2D92C0 VA: 0x1802DAAC0 Slot: 5
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 6
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }
	// RVA: 0x2DAAF0 Offset: 0x2D92F0 VA: 0x1802DAAF0
	private static void InvokeAction(object state) { }
	// RVA: 0x2DAB90 Offset: 0x2D9390 VA: 0x1802DAB90
	protected static ContextCallback GetInvokeActionCallback() { }
	// RVA: 0x2DAC50 Offset: 0x2D9450 VA: 0x1802DAC50
	protected void RunCallback(ContextCallback callback, object state, ref Task currentTask) { }
	// RVA: 0x2DAE00 Offset: 0x2D9600 VA: 0x1802DAE00
	internal static void RunOrScheduleAction(Action action, bool allowInlining, ref Task currentTask) { }
	// RVA: 0x2DAF90 Offset: 0x2D9790 VA: 0x1802DAF90
	internal static void UnsafeScheduleAction(Action action, Task task) { }
	// RVA: 0x2DB090 Offset: 0x2D9890 VA: 0x1802DB090
	protected static void ThrowAsyncIfNecessary(Exception exc) { }
}

// Namespace: 
[Serializable]
private sealed class AwaitTaskContinuation.<>c // TypeDefIndex: 709
{
	// Fields
	public static readonly AwaitTaskContinuation.<>c <>9; // 0x0
	public static WaitCallback <>9__17_0; // 0x8

	// Methods
	// RVA: 0x26BA40 Offset: 0x26A240 VA: 0x18026BA40
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x26BAC0 Offset: 0x26A2C0 VA: 0x18026BAC0
	internal void <ThrowAsyncIfNecessary>b__17_0(object s) { }
}

// Namespace: System.Threading.Tasks
internal class TaskExceptionHolder // TypeDefIndex: 710
{
	// Fields
	private static readonly bool s_failFastOnUnobservedException; // 0x0
	private static bool s_domainUnloadStarted; // 0x1
	private static EventHandler s_adUnloadEventHandler; // 0x8
	private readonly Task m_task; // 0x10
	private List<ExceptionDispatchInfo> m_faultExceptions; // 0x18
	private ExceptionDispatchInfo m_cancellationException; // 0x20
	private bool m_isHandled; // 0x28

	// Properties
	internal bool ContainsFaultList { get; }

	// Methods
	// RVA: 0x399770 Offset: 0x397F70 VA: 0x180399770
	internal void .ctor(Task task) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640
	private static bool ShouldFailFastOnUnobservedException() { }
	// RVA: 0x399810 Offset: 0x398010 VA: 0x180399810
	private static void EnsureADUnloadCallbackRegistered() { }
	// RVA: 0x3999B0 Offset: 0x3981B0 VA: 0x1803999B0
	private static void AppDomainUnloadCallback(object sender, EventArgs e) { }
	// RVA: 0x399A50 Offset: 0x398250 VA: 0x180399A50 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x399FA0 Offset: 0x3987A0 VA: 0x180399FA0
	internal bool get_ContainsFaultList() { }
	// RVA: 0x399FB0 Offset: 0x3987B0 VA: 0x180399FB0
	internal void Add(object exceptionObject, bool representsCancellation) { }
	// RVA: 0x39A0C0 Offset: 0x3988C0 VA: 0x18039A0C0
	private void SetCancellationException(object exceptionObject) { }
	// RVA: 0x39A1B0 Offset: 0x3989B0 VA: 0x18039A1B0
	private void AddFaultException(object exceptionObject) { }
	// RVA: 0x39A610 Offset: 0x398E10 VA: 0x18039A610
	private void MarkAsUnhandled() { }
	// RVA: 0x39A6C0 Offset: 0x398EC0 VA: 0x18039A6C0
	internal void MarkAsHandled(bool calledFromFinalizer) { }
	// RVA: 0x39A780 Offset: 0x398F80 VA: 0x18039A780
	internal AggregateException CreateExceptionObject(bool calledFromFinalizer, Exception includeThisException) { }
	// RVA: 0x39AB20 Offset: 0x399320 VA: 0x18039AB20
	internal ReadOnlyCollection<ExceptionDispatchInfo> GetExceptionDispatchInfos() { }
	// RVA: 0x39ABE0 Offset: 0x3993E0 VA: 0x18039ABE0
	private static void .cctor() { }
}

// Namespace: System.Threading.Tasks
public class TaskFactory // TypeDefIndex: 711
{
	// Fields
	private CancellationToken m_defaultCancellationToken; // 0x10
	private TaskScheduler m_defaultScheduler; // 0x18
	private TaskCreationOptions m_defaultCreationOptions; // 0x20
	private TaskContinuationOptions m_defaultContinuationOptions; // 0x24

	// Methods
	// RVA: 0x39AC60 Offset: 0x399460 VA: 0x18039AC60
	public void .ctor() { }
	// RVA: 0x39ACF0 Offset: 0x3994F0 VA: 0x18039ACF0
	public void .ctor(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler) { }
	// RVA: 0x39AD50 Offset: 0x399550 VA: 0x18039AD50
	internal static void CheckCreationOptions(TaskCreationOptions creationOptions) { }
	// RVA: 0x39ADF0 Offset: 0x3995F0 VA: 0x18039ADF0
	internal static Task<Task> CommonCWAnyLogic(IList<Task> tasks) { }
	// RVA: 0x39B0E0 Offset: 0x3998E0 VA: 0x18039B0E0
	internal static void CheckMultiTaskContinuationOptions(TaskContinuationOptions continuationOptions) { }
}

// Namespace: 
internal sealed class TaskFactory.CompleteOnInvokePromise : Task<Task>, ITaskCompletionAction // TypeDefIndex: 712
{
	// Fields
	private IList<Task> _tasks; // 0x58
	private int m_firstTaskAlreadyCompleted; // 0x60

	// Methods
	// RVA: 0x277C40 Offset: 0x276440 VA: 0x180277C40
	public void .ctor(IList<Task> tasks) { }
	// RVA: 0x277DD0 Offset: 0x2765D0 VA: 0x180277DD0 Slot: 20
	public void Invoke(Task completingTask) { }
}

// Namespace: System.Threading.Tasks
public abstract class TaskScheduler // TypeDefIndex: 713
{
	// Fields
	private static ConditionalWeakTable<TaskScheduler, object> s_activeTaskSchedulers; // 0x0
	private static readonly TaskScheduler s_defaultTaskScheduler; // 0x8
	internal static int s_taskSchedulerIdCounter; // 0x10
	private int m_taskSchedulerId; // 0x10
	private static EventHandler<UnobservedTaskExceptionEventArgs> _unobservedTaskException; // 0x18
	private static readonly object _unobservedTaskExceptionLockObject; // 0x20

	// Properties
	public virtual int MaximumConcurrencyLevel { get; }
	internal virtual bool RequiresAtomicStartTransition { get; }
	public static TaskScheduler Current { get; }
	internal static TaskScheduler InternalCurrent { get; }
	public int Id { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	protected internal abstract void QueueTask(Task task) { }
	// RVA: -1 Offset: -1 Slot: 5
	protected abstract bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued) { }
	// RVA: 0x39B230 Offset: 0x399A30 VA: 0x18039B230 Slot: 6
	public virtual int get_MaximumConcurrencyLevel() { }
	// RVA: 0x39B240 Offset: 0x399A40 VA: 0x18039B240
	internal bool TryRunInline(Task task, bool taskWasPreviouslyQueued) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 7
	protected internal virtual bool TryDequeue(Task task) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 8
	internal virtual void NotifyWorkItemProgress() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 9
	internal virtual bool get_RequiresAtomicStartTransition() { }
	// RVA: 0x39B5D0 Offset: 0x399DD0 VA: 0x18039B5D0
	internal void InternalQueueTask(Task task) { }
	// RVA: 0x39B5F0 Offset: 0x399DF0 VA: 0x18039B5F0
	protected void .ctor() { }
	// RVA: 0x39B810 Offset: 0x39A010 VA: 0x18039B810
	private void AddToActiveTaskSchedulers() { }
	// RVA: 0x39B930 Offset: 0x39A130 VA: 0x18039B930
	public static TaskScheduler get_Current() { }
	// RVA: 0x39B9F0 Offset: 0x39A1F0 VA: 0x18039B9F0
	internal static TaskScheduler get_InternalCurrent() { }
	// RVA: 0x39BAE0 Offset: 0x39A2E0 VA: 0x18039BAE0
	public int get_Id() { }
	// RVA: 0x39BBB0 Offset: 0x39A3B0 VA: 0x18039BBB0
	internal static void PublishUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs ueea) { }
	// RVA: 0x39BDF0 Offset: 0x39A5F0 VA: 0x18039BDF0
	private static void .cctor() { }
}

// Namespace: System.Threading.Tasks
public class UnobservedTaskExceptionEventArgs : EventArgs // TypeDefIndex: 714
{
	// Fields
	private AggregateException m_exception; // 0x10
	internal bool m_observed; // 0x18

	// Methods
	// RVA: 0x417FB0 Offset: 0x4167B0 VA: 0x180417FB0
	public void .ctor(AggregateException exception) { }
}

// Namespace: System.Threading.Tasks
[Serializable]
public class TaskSchedulerException : Exception // TypeDefIndex: 715
{
	// Methods
	// RVA: 0x39C2C0 Offset: 0x39AAC0 VA: 0x18039C2C0
	public void .ctor() { }
	// RVA: 0x39C370 Offset: 0x39AB70 VA: 0x18039C370
	public void .ctor(Exception innerException) { }
	// RVA: 0x39C430 Offset: 0x39AC30 VA: 0x18039C430
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading.Tasks
internal sealed class ThreadPoolTaskScheduler : TaskScheduler // TypeDefIndex: 716
{
	// Fields
	private static readonly ParameterizedThreadStart s_longRunningThreadWork; // 0xAC000

	// Properties
	internal override bool RequiresAtomicStartTransition { get; }

	// Methods
	// RVA: 0x3A9DD0 Offset: 0x3A85D0 VA: 0x1803A9DD0
	internal void .ctor() { }
	// RVA: 0x3A9F20 Offset: 0x3A8720 VA: 0x1803A9F20
	private static void LongRunningThreadWork(object obj) { }
	// RVA: 0x3AA010 Offset: 0x3A8810 VA: 0x1803AA010 Slot: 4
	protected internal override void QueueTask(Task task) { }
	// RVA: 0x3AA1D0 Offset: 0x3A89D0 VA: 0x1803AA1D0 Slot: 5
	protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued) { }
	// RVA: 0x3AA2D0 Offset: 0x3A8AD0 VA: 0x1803AA2D0 Slot: 7
	protected internal override bool TryDequeue(Task task) { }
	// RVA: 0x3A9AE0 Offset: 0x3A82E0 VA: 0x1803A9AE0 Slot: 8
	internal override void NotifyWorkItemProgress() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 9
	internal override bool get_RequiresAtomicStartTransition() { }
	// RVA: 0x3AA2E0 Offset: 0x3A8AE0 VA: 0x1803AA2E0
	private static void .cctor() { }
}

// Namespace: System.Security
[Serializable]
public sealed class SecurityElement // TypeDefIndex: 717
{
	// Fields
	private string text; // 0x10
	private string tag; // 0x18
	private ArrayList attributes; // 0x20
	private ArrayList children; // 0x28
	private static readonly char[] invalid_tag_chars; // 0x0
	private static readonly char[] invalid_text_chars; // 0x8
	private static readonly char[] invalid_attr_name_chars; // 0x10
	private static readonly char[] invalid_attr_value_chars; // 0x18
	private static readonly char[] invalid_chars; // 0x20

	// Properties
	public Hashtable Attributes { get; }
	public string Text { set; }

	// Methods
	// RVA: 0x385960 Offset: 0x384160 VA: 0x180385960
	public void .ctor(string tag) { }
	// RVA: 0x385970 Offset: 0x384170 VA: 0x180385970
	public void .ctor(string tag, string text) { }
	// RVA: 0x385B60 Offset: 0x384360 VA: 0x180385B60
	public Hashtable get_Attributes() { }
	// RVA: 0x385E10 Offset: 0x384610 VA: 0x180385E10
	public void set_Text(string value) { }
	// RVA: 0x385FF0 Offset: 0x3847F0 VA: 0x180385FF0
	public void AddAttribute(string name, string value) { }
	// RVA: 0x3861C0 Offset: 0x3849C0 VA: 0x1803861C0
	public void AddChild(SecurityElement child) { }
	// RVA: 0x3862C0 Offset: 0x384AC0 VA: 0x1803862C0
	public static string Escape(string str) { }
	// RVA: 0x3864D0 Offset: 0x384CD0 VA: 0x1803864D0
	private static string Unescape(string str) { }
	// RVA: 0x386680 Offset: 0x384E80 VA: 0x180386680
	public static SecurityElement FromString(string xml) { }
	// RVA: 0x386970 Offset: 0x385170 VA: 0x180386970
	public static bool IsValidAttributeName(string name) { }
	// RVA: 0x386A40 Offset: 0x385240 VA: 0x180386A40
	public static bool IsValidAttributeValue(string value) { }
	// RVA: 0x386B10 Offset: 0x385310 VA: 0x180386B10
	public static bool IsValidTag(string tag) { }
	// RVA: 0x386BE0 Offset: 0x3853E0 VA: 0x180386BE0
	public static bool IsValidText(string text) { }
	// RVA: 0x386CB0 Offset: 0x3854B0 VA: 0x180386CB0 Slot: 3
	public override string ToString() { }
	// RVA: 0x386D80 Offset: 0x385580 VA: 0x180386D80
	private void ToXml(ref StringBuilder s, int level) { }
	// RVA: 0x387320 Offset: 0x385B20 VA: 0x180387320
	internal SecurityElement.SecurityAttribute GetAttribute(string name) { }
	// RVA: 0x3875C0 Offset: 0x385DC0 VA: 0x1803875C0
	private static void .cctor() { }
}

// Namespace: 
internal class SecurityElement.SecurityAttribute // TypeDefIndex: 718
{
	// Fields
	private string _name; // 0x10
	private string _value; // 0x18

	// Methods
	// RVA: 0x274540 Offset: 0x272D40 VA: 0x180274540
	public void .ctor(string name, string value) { }
}

// Namespace: System.Security
[Serializable]
public class SecurityException : SystemException // TypeDefIndex: 719
{
	// Fields
	private string permissionState; // 0x88

	// Methods
	// RVA: 0x387780 Offset: 0x385F80 VA: 0x180387780
	public void .ctor() { }
	// RVA: 0x387810 Offset: 0x386010 VA: 0x180387810
	public void .ctor(string message) { }
	// RVA: 0x387830 Offset: 0x386030 VA: 0x180387830
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x3879E0 Offset: 0x3861E0 VA: 0x1803879E0
	public void .ctor(string message, Exception inner) { }
	// RVA: 0x387A00 Offset: 0x386200 VA: 0x180387A00 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x387AE0 Offset: 0x3862E0 VA: 0x180387AE0 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Security
[Serializable]
public sealed class XmlSyntaxException : SystemException // TypeDefIndex: 720
{
	// Methods
	// RVA: 0x327B20 Offset: 0x326320 VA: 0x180327B20
	public void .ctor() { }
	// RVA: 0x327B30 Offset: 0x326330 VA: 0x180327B30
	public void .ctor(string message) { }
	// RVA: 0x327B40 Offset: 0x326340 VA: 0x180327B40
	public void .ctor(string message, Exception inner) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Evidence : ICollection, IEnumerable // TypeDefIndex: 721
{
	// Fields
	private bool _locked; // 0x10
	private ArrayList hostEvidenceList; // 0x18
	private ArrayList assemblyEvidenceList; // 0x20

	// Properties
	[ObsoleteAttribute] // RVA: 0xD9D10 Offset: 0xD9110 VA: 0x1800D9D10
	public int Count { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x490D30 Offset: 0x48F530 VA: 0x180490D30 Slot: 5
	public int get_Count() { }
	[ObsoleteAttribute] // RVA: 0xD9D10 Offset: 0xD9110 VA: 0x1800D9D10
	// RVA: 0x490D90 Offset: 0x48F590 VA: 0x180490D90 Slot: 4
	public void CopyTo(Array array, int index) { }
	[ObsoleteAttribute] // RVA: 0xD9D10 Offset: 0xD9110 VA: 0x1800D9D10
	// RVA: 0x490E50 Offset: 0x48F650 VA: 0x180490E50 Slot: 6
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
private class Evidence.EvidenceEnumerator : IEnumerator // TypeDefIndex: 722
{
	// Fields
	private IEnumerator currentEnum; // 0x10
	private IEnumerator hostEnum; // 0x18
	private IEnumerator assemblyEnum; // 0x20

	// Properties
	public object Current { get; }

	// Methods
	// RVA: 0x26E900 Offset: 0x26D100 VA: 0x18026E900
	public void .ctor(IEnumerator hostenum, IEnumerator assemblyenum) { }
	// RVA: 0x26E910 Offset: 0x26D110 VA: 0x18026E910 Slot: 4
	public bool MoveNext() { }
	// RVA: 0x26E9C0 Offset: 0x26D1C0 VA: 0x18026E9C0 Slot: 5
	public object get_Current() { }
}

// Namespace: System.Security.Principal
public interface IPrincipal // TypeDefIndex: 723
{}

// Namespace: System.Security.Cryptography
[Serializable]
public class CryptographicException : SystemException // TypeDefIndex: 724
{
	// Methods
	// RVA: 0x3F9C30 Offset: 0x3F8430 VA: 0x1803F9C30
	public void .ctor() { }
	// RVA: 0x3F9CC0 Offset: 0x3F84C0 VA: 0x1803F9CC0
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Security.Cryptography
public abstract class HashAlgorithm : IDisposable // TypeDefIndex: 725
{
	// Fields
	protected int HashSizeValue; // 0x10
	protected internal byte[] HashValue; // 0x18
	private bool m_bDisposed; // 0x20

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x76FC60 Offset: 0x76E460 VA: 0x18076FC60
	public byte[] ComputeHash(byte[] buffer) { }
	// RVA: 0x76FDF0 Offset: 0x76E5F0 VA: 0x18076FDF0 Slot: 4
	public void Dispose() { }
	// RVA: 0x76FEA0 Offset: 0x76E6A0 VA: 0x18076FEA0 Slot: 5
	protected virtual void Dispose(bool disposing) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract void Initialize() { }
	// RVA: -1 Offset: -1 Slot: 7
	protected abstract void HashCore(byte[] array, int ibStart, int cbSize) { }
	// RVA: -1 Offset: -1 Slot: 8
	protected abstract byte[] HashFinal() { }
}

// Namespace: System.Security.Cryptography
public abstract class RandomNumberGenerator : IDisposable // TypeDefIndex: 726
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x31F460 Offset: 0x31DC60 VA: 0x18031F460
	public static RandomNumberGenerator Create() { }
	// RVA: 0x31F570 Offset: 0x31DD70 VA: 0x18031F570 Slot: 4
	public void Dispose() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	protected virtual void Dispose(bool disposing) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract void GetBytes(byte[] data) { }
}

// Namespace: System.Security.Cryptography
public abstract class SHA256 : HashAlgorithm // TypeDefIndex: 727
{
	// Methods
	// RVA: 0x382500 Offset: 0x380D00 VA: 0x180382500
	protected void .ctor() { }
	// RVA: 0x382510 Offset: 0x380D10 VA: 0x180382510
	public static SHA256 Create() { }
}

// Namespace: System.Security.Cryptography
public class SHA256Managed : SHA256 // TypeDefIndex: 728
{
	// Fields
	private byte[] _buffer; // 0x28
	private long _count; // 0x30
	private uint[] _stateSHA256; // 0x38
	private uint[] _W; // 0x40
	private static readonly uint[] _K; // 0x0

	// Methods
	// RVA: 0x382640 Offset: 0x380E40 VA: 0x180382640
	public void .ctor() { }
	// RVA: 0x382700 Offset: 0x380F00 VA: 0x180382700 Slot: 6
	public override void Initialize() { }
	// RVA: 0x382750 Offset: 0x380F50 VA: 0x180382750 Slot: 7
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize) { }
	// RVA: 0x382760 Offset: 0x380F60 VA: 0x180382760 Slot: 8
	protected override byte[] HashFinal() { }
	// RVA: 0x382770 Offset: 0x380F70 VA: 0x180382770
	private void InitializeState() { }
	// RVA: 0x3828F0 Offset: 0x3810F0 VA: 0x1803828F0
	private void _HashData(byte[] partIn, int ibStart, int cbSize) { }
	// RVA: 0x382C50 Offset: 0x381450 VA: 0x180382C50
	private byte[] _EndHash() { }
	// RVA: 0x382FE0 Offset: 0x3817E0 VA: 0x180382FE0
	private static void SHATransform(uint* expandedBuffer, uint* state, byte* block) { }
	// RVA: 0x383790 Offset: 0x381F90 VA: 0x180383790
	private static uint RotateRight(uint x, int n) { }
	// RVA: 0x3837B0 Offset: 0x381FB0 VA: 0x1803837B0
	private static uint Ch(uint x, uint y, uint z) { }
	// RVA: 0x3837C0 Offset: 0x381FC0 VA: 0x1803837C0
	private static uint Maj(uint x, uint y, uint z) { }
	// RVA: 0x3837D0 Offset: 0x381FD0 VA: 0x1803837D0
	private static uint sigma_0(uint x) { }
	// RVA: 0x383880 Offset: 0x382080 VA: 0x180383880
	private static uint sigma_1(uint x) { }
	// RVA: 0x383930 Offset: 0x382130 VA: 0x180383930
	private static uint Sigma_0(uint x) { }
	// RVA: 0x3839E0 Offset: 0x3821E0 VA: 0x1803839E0
	private static uint Sigma_1(uint x) { }
	// RVA: 0x383A90 Offset: 0x382290 VA: 0x180383A90
	private static void SHA256Expand(uint* x) { }
	// RVA: 0x383B70 Offset: 0x382370 VA: 0x180383B70
	private static void .cctor() { }
}

// Namespace: System.Security.Cryptography
internal static class Utils // TypeDefIndex: 729
{
	// Methods
	// RVA: 0x418050 Offset: 0x416850 VA: 0x180418050
	internal static void DWORDFromBigEndian(uint* x, int digits, byte* block) { }
	// RVA: 0x4180B0 Offset: 0x4168B0 VA: 0x1804180B0
	internal static void DWORDToBigEndian(byte[] block, uint[] x, int digits) { }
}

// Namespace: System.Security.Cryptography
public sealed class RNGCryptoServiceProvider : RandomNumberGenerator // TypeDefIndex: 730
{
	// Fields
	private static object _lock; // 0x0
	private IntPtr _handle; // 0x10

	// Methods
	// RVA: 0x31E6E0 Offset: 0x31CEE0 VA: 0x18031E6E0
	private static void .cctor() { }
	// RVA: 0x31E750 Offset: 0x31CF50 VA: 0x18031E750
	public void .ctor() { }
	// RVA: 0x31E7F0 Offset: 0x31CFF0 VA: 0x18031E7F0
	private void Check() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640
	private static bool RngOpen() { }
	// RVA: 0x31E8B0 Offset: 0x31D0B0 VA: 0x18031E8B0
	private static IntPtr RngInitialize(byte[] seed) { }
	// RVA: 0x31E8C0 Offset: 0x31D0C0 VA: 0x18031E8C0
	private static IntPtr RngGetBytes(IntPtr handle, byte[] data) { }
	// RVA: 0x31E940 Offset: 0x31D140 VA: 0x18031E940
	private static void RngClose(IntPtr handle) { }
	// RVA: 0x31E950 Offset: 0x31D150 VA: 0x18031E950 Slot: 6
	public override void GetBytes(byte[] data) { }
	// RVA: 0x31EC40 Offset: 0x31D440 VA: 0x18031EC40 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	protected override void Dispose(bool disposing) { }
}

// Namespace: System.Runtime.Versioning
internal static class BinaryCompatibility // TypeDefIndex: 731
{
	// Fields
	public static readonly bool TargetsAtLeast_Desktop_V4_5; // 0x0
	public static readonly bool TargetsAtLeast_Desktop_V4_5_1; // 0x1

	// Methods
	// RVA: 0x2DC650 Offset: 0x2DAE50 VA: 0x1802DC650
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal sealed class DeserializationEventHandler : MulticastDelegate // TypeDefIndex: 732
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(object sender) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(object sender, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal sealed class SerializationEventHandler : MulticastDelegate // TypeDefIndex: 733
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D2210 Offset: 0x1D0A10 VA: 0x1801D2210 Slot: 12
	public virtual void Invoke(StreamingContext context) { }
	// RVA: 0x1D2540 Offset: 0x1D0D40 VA: 0x1801D2540 Slot: 13
	public virtual IAsyncResult BeginInvoke(StreamingContext context, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Serialization
public class FormatterConverter : IFormatterConverter // TypeDefIndex: 734
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x765B80 Offset: 0x764380 VA: 0x180765B80 Slot: 4
	public object Convert(object value, Type type) { }
	// RVA: 0x765C90 Offset: 0x764490 VA: 0x180765C90 Slot: 5
	public bool ToBoolean(object value) { }
	// RVA: 0x765D90 Offset: 0x764590 VA: 0x180765D90 Slot: 6
	public int ToInt32(object value) { }
	// RVA: 0x765E90 Offset: 0x764690 VA: 0x180765E90 Slot: 7
	public long ToInt64(object value) { }
	// RVA: 0x765F90 Offset: 0x764790 VA: 0x180765F90 Slot: 8
	public float ToSingle(object value) { }
	// RVA: 0x766090 Offset: 0x764890 VA: 0x180766090 Slot: 9
	public string ToString(object value) { }
}

// Namespace: System.Runtime.Serialization
public static class FormatterServices // TypeDefIndex: 735
{
	// Fields
	internal static ConcurrentDictionary<MemberHolder, MemberInfo[]> m_MemberInfoTable; // 0x0
	private static bool unsafeTypeForwardersIsEnabled; // 0x8
	private static bool unsafeTypeForwardersIsEnabledInitialized; // 0x9
	private static readonly Type[] advancedTypes; // 0x10
	private static Binder s_binder; // 0x18

	// Methods
	// RVA: 0x766280 Offset: 0x764A80 VA: 0x180766280
	private static void .cctor() { }
	// RVA: 0x766410 Offset: 0x764C10 VA: 0x180766410
	private static MemberInfo[] GetSerializableMembers(RuntimeType type) { }
	// RVA: 0x766600 Offset: 0x764E00 VA: 0x180766600
	private static bool CheckSerializable(RuntimeType type) { }
	// RVA: 0x766630 Offset: 0x764E30 VA: 0x180766630
	private static MemberInfo[] InternalGetSerializableMembers(RuntimeType type) { }
	// RVA: 0x766D20 Offset: 0x765520 VA: 0x180766D20
	private static bool GetParentTypes(RuntimeType parentType, out RuntimeType[] parentTypes, out int parentTypeCount) { }
	// RVA: 0x767120 Offset: 0x765920 VA: 0x180767120
	public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context) { }
	// RVA: 0x767370 Offset: 0x765B70 VA: 0x180767370
	public static object GetUninitializedObject(Type type) { }
	// RVA: 0x2CB7A0 Offset: 0x2C9FA0 VA: 0x1802CB7A0
	private static object nativeGetUninitializedObject(RuntimeType type) { }
	// RVA: 0x767590 Offset: 0x765D90 VA: 0x180767590
	internal static bool UnsafeTypeForwardersIsEnabled() { }
	// RVA: 0x7676B0 Offset: 0x765EB0 VA: 0x1807676B0
	internal static void SerializationSetValue(MemberInfo fi, object target, object value) { }
	// RVA: 0x767960 Offset: 0x766160 VA: 0x180767960
	public static object PopulateObjectMembers(object obj, MemberInfo[] members, object[] data) { }
	// RVA: 0x767CD0 Offset: 0x7664D0 VA: 0x180767CD0
	public static object[] GetObjectData(object obj, MemberInfo[] members) { }
	// RVA: 0x768070 Offset: 0x766870 VA: 0x180768070
	public static Type GetTypeFromAssembly(Assembly assem, string name) { }
	// RVA: 0x768140 Offset: 0x766940 VA: 0x180768140
	internal static Assembly LoadAssemblyFromString(string assemblyName) { }
	// RVA: 0x768150 Offset: 0x766950 VA: 0x180768150
	internal static Assembly LoadAssemblyFromStringNoThrow(string assemblyName) { }
	// RVA: 0x768200 Offset: 0x766A00 VA: 0x180768200
	internal static string GetClrAssemblyName(Type type, out bool hasTypeForwardedFrom) { }
	// RVA: 0x7683A0 Offset: 0x766BA0 VA: 0x1807683A0
	internal static string GetClrTypeFullName(Type type) { }
	// RVA: 0x768480 Offset: 0x766C80 VA: 0x180768480
	private static string GetClrTypeFullNameForArray(Type type) { }
	// RVA: 0x7686E0 Offset: 0x766EE0 VA: 0x1807686E0
	private static string GetClrTypeFullNameForNonArrayTypes(Type type) { }
}

// Namespace: 
private sealed class FormatterServices.<>c__DisplayClass9_0 // TypeDefIndex: 736
{
	// Fields
	public Type type; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x26F530 Offset: 0x26DD30 VA: 0x18026F530
	internal MemberInfo[] <GetSerializableMembers>b__0(MemberHolder _) { }
}

// Namespace: System.Runtime.Serialization
internal sealed class SurrogateForCyclicalReference // TypeDefIndex: 737
{}

// Namespace: System.Runtime.Serialization
public interface IDeserializationCallback // TypeDefIndex: 738
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDeserialization(object sender) { }
}

// Namespace: System.Runtime.Serialization
public interface IFormatterConverter // TypeDefIndex: 739
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract object Convert(object value, Type type) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool ToBoolean(object value) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract int ToInt32(object value) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract long ToInt64(object value) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract float ToSingle(object value) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract string ToString(object value) { }
}

// Namespace: System.Runtime.Serialization
public interface IObjectReference // TypeDefIndex: 740
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract object GetRealObject(StreamingContext context) { }
}

// Namespace: System.Runtime.Serialization
public interface ISerializable // TypeDefIndex: 741
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Runtime.Serialization
public interface ISerializationSurrogate // TypeDefIndex: 742
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetObjectData(object obj, SerializationInfo info, StreamingContext context) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector) { }
}

// Namespace: System.Runtime.Serialization
public interface ISurrogateSelector // TypeDefIndex: 743
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector) { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal class MemberHolder // TypeDefIndex: 744
{
	// Fields
	internal Type memberType; // 0x10
	internal StreamingContext context; // 0x18

	// Methods
	// RVA: 0x33B370 Offset: 0x339B70 VA: 0x18033B370
	internal void .ctor(Type type, StreamingContext ctx) { }
	// RVA: 0x33B380 Offset: 0x339B80 VA: 0x18033B380 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x33B3B0 Offset: 0x339BB0 VA: 0x18033B3B0 Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
public class ObjectIDGenerator // TypeDefIndex: 745
{
	// Fields
	internal int m_currentCount; // 0x10
	internal int m_currentSize; // 0x14
	internal long[] m_ids; // 0x18
	internal object[] m_objs; // 0x20
	private static readonly int[] sizes; // 0x0

	// Methods
	// RVA: 0x758220 Offset: 0x756A20 VA: 0x180758220
	public void .ctor() { }
	// RVA: 0x758320 Offset: 0x756B20 VA: 0x180758320
	private int FindElement(object obj, out bool found) { }
	// RVA: 0x7583E0 Offset: 0x756BE0 VA: 0x1807583E0 Slot: 4
	public virtual long GetId(object obj, out bool firstTime) { }
	// RVA: 0x7585F0 Offset: 0x756DF0 VA: 0x1807585F0 Slot: 5
	public virtual long HasId(object obj, out bool firstTime) { }
	// RVA: 0x758720 Offset: 0x756F20 VA: 0x180758720
	private void Rehash() { }
	// RVA: 0x758A90 Offset: 0x757290 VA: 0x180758A90
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization
public class ObjectManager // TypeDefIndex: 746
{
	// Fields
	private DeserializationEventHandler m_onDeserializationHandler; // 0x10
	private SerializationEventHandler m_onDeserializedHandler; // 0x18
	internal ObjectHolder[] m_objects; // 0x20
	internal object m_topObject; // 0x28
	internal ObjectHolderList m_specialFixupObjects; // 0x30
	internal long m_fixupCount; // 0x38
	internal ISurrogateSelector m_selector; // 0x40
	internal StreamingContext m_context; // 0x48

	// Properties
	internal ObjectHolderList SpecialFixupObjects { get; }

	// Methods
	// RVA: 0x758B30 Offset: 0x757330 VA: 0x180758B30
	internal void .ctor(ISurrogateSelector selector, StreamingContext context, bool checkSecurity, bool isCrossAppDomain) { }
	// RVA: 0x758BE0 Offset: 0x7573E0 VA: 0x180758BE0
	internal ObjectHolderList get_SpecialFixupObjects() { }
	// RVA: 0x758CF0 Offset: 0x7574F0 VA: 0x180758CF0
	internal ObjectHolder FindObjectHolder(long objectID) { }
	// RVA: 0x758D50 Offset: 0x757550 VA: 0x180758D50
	internal ObjectHolder FindOrCreateObjectHolder(long objectID) { }
	// RVA: 0x758EE0 Offset: 0x7576E0 VA: 0x180758EE0
	private void AddObjectHolder(ObjectHolder holder) { }
	// RVA: 0x7590E0 Offset: 0x7578E0 VA: 0x1807590E0
	private bool GetCompletionInfo(FixupHolder fixup, out ObjectHolder holder, out object member, bool bThrowIfMissing) { }
	// RVA: 0x759490 Offset: 0x757C90 VA: 0x180759490
	private void FixupSpecialObject(ObjectHolder holder) { }
	// RVA: 0x759750 Offset: 0x757F50 VA: 0x180759750
	private bool ResolveObjectReference(ObjectHolder holder) { }
	// RVA: 0x759AD0 Offset: 0x7582D0 VA: 0x180759AD0
	private bool DoValueTypeFixup(FieldInfo memberToFix, ObjectHolder holder, object value) { }
	// RVA: 0x75A0E0 Offset: 0x7588E0 VA: 0x18075A0E0
	internal void CompleteObject(ObjectHolder holder, bool bObjectFullyComplete) { }
	// RVA: 0x75AA40 Offset: 0x759240 VA: 0x18075AA40
	private void DoNewlyRegisteredObjectFixups(ObjectHolder holder) { }
	// RVA: 0x75AC00 Offset: 0x759400 VA: 0x18075AC00 Slot: 4
	public virtual object GetObject(long objectID) { }
	// RVA: 0x75AD40 Offset: 0x759540 VA: 0x18075AD40
	internal void RegisterString(string obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member) { }
	// RVA: 0x75AEE0 Offset: 0x7596E0 VA: 0x18075AEE0
	public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, int[] arrayIndex) { }
	// RVA: 0x75B400 Offset: 0x759C00 VA: 0x18075B400
	internal void CompleteISerializableObject(object obj, SerializationInfo info, StreamingContext context) { }
	// RVA: 0x75B750 Offset: 0x759F50 VA: 0x18075B750
	internal static RuntimeConstructorInfo GetConstructor(RuntimeType t) { }
	// RVA: 0x75B8A0 Offset: 0x75A0A0 VA: 0x18075B8A0 Slot: 5
	public virtual void DoFixups() { }
	// RVA: 0x75BCE0 Offset: 0x75A4E0 VA: 0x18075BCE0
	private void RegisterFixup(FixupHolder fixup, long objectToBeFixed, long objectRequired) { }
	// RVA: 0x75BE20 Offset: 0x75A620 VA: 0x18075BE20 Slot: 6
	public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired) { }
	// RVA: 0x75C0E0 Offset: 0x75A8E0 VA: 0x18075C0E0 Slot: 7
	public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired) { }
	// RVA: 0x75C250 Offset: 0x75AA50 VA: 0x18075C250 Slot: 8
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired) { }
	// RVA: 0x75C3C0 Offset: 0x75ABC0 VA: 0x18075C3C0 Slot: 9
	public virtual void RaiseDeserializationEvent() { }
	// RVA: 0x75C410 Offset: 0x75AC10 VA: 0x18075C410 Slot: 10
	internal virtual void AddOnDeserialization(DeserializationEventHandler handler) { }
	// RVA: 0x75C4D0 Offset: 0x75ACD0 VA: 0x18075C4D0 Slot: 11
	internal virtual void AddOnDeserialized(object obj) { }
	// RVA: 0x75C5B0 Offset: 0x75ADB0 VA: 0x18075C5B0 Slot: 12
	internal virtual void RaiseOnDeserializedEvent(object obj) { }
	// RVA: 0x75C6A0 Offset: 0x75AEA0 VA: 0x18075C6A0
	public void RaiseOnDeserializingEvent(object obj) { }
}

// Namespace: System.Runtime.Serialization
internal sealed class ObjectHolder // TypeDefIndex: 747
{
	// Fields
	private object m_object; // 0x10
	internal long m_id; // 0x18
	private int m_missingElementsRemaining; // 0x20
	private int m_missingDecendents; // 0x24
	internal SerializationInfo m_serInfo; // 0x28
	internal ISerializationSurrogate m_surrogate; // 0x30
	internal FixupHolderList m_missingElements; // 0x38
	internal LongList m_dependentObjects; // 0x40
	internal ObjectHolder m_next; // 0x48
	internal int m_flags; // 0x50
	private bool m_markForFixupWhenAvailable; // 0x54
	private ValueTypeFixupInfo m_valueFixup; // 0x58
	private TypeLoadExceptionHolder m_typeLoad; // 0x60
	private bool m_reachable; // 0x68

	// Properties
	internal bool IsIncompleteObjectReference { get; set; }
	internal bool RequiresDelayedFixup { get; }
	internal bool RequiresValueTypeFixup { get; }
	internal bool ValueTypeFixupPerformed { get; set; }
	internal bool HasISerializable { get; }
	internal bool HasSurrogate { get; }
	internal bool CanSurrogatedObjectValueChange { get; }
	internal bool CanObjectValueChange { get; }
	internal int TotalDependentObjects { get; }
	internal bool TypeLoadExceptionReachable { get; }
	internal bool RequiresSerInfoFixup { get; set; }
	internal bool CompletelyFixed { get; }
	internal long ContainerID { get; }

	// Methods
	// RVA: 0x756B40 Offset: 0x755340 VA: 0x180756B40
	internal void .ctor(long objID) { }
	// RVA: 0x756BF0 Offset: 0x7553F0 VA: 0x180756BF0
	internal void .ctor(object obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, int[] arrayIndex) { }
	// RVA: 0x756F40 Offset: 0x755740 VA: 0x180756F40
	internal void .ctor(string obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, int[] arrayIndex) { }
	// RVA: 0x7570F0 Offset: 0x7558F0 VA: 0x1807570F0
	private void IncrementDescendentFixups(int amount) { }
	// RVA: 0x757100 Offset: 0x755900 VA: 0x180757100
	internal void DecrementFixupsRemaining(ObjectManager manager) { }
	// RVA: 0x757160 Offset: 0x755960 VA: 0x180757160
	internal void RemoveDependency(long id) { }
	// RVA: 0x7571F0 Offset: 0x7559F0 VA: 0x1807571F0
	internal void AddFixup(FixupHolder fixup, ObjectManager manager) { }
	// RVA: 0x757380 Offset: 0x755B80 VA: 0x180757380
	private void UpdateDescendentDependencyChain(int amount, ObjectManager manager) { }
	// RVA: 0x7573E0 Offset: 0x755BE0 VA: 0x1807573E0
	internal void AddDependency(long dependentObject) { }
	// RVA: 0x7575F0 Offset: 0x755DF0 VA: 0x1807575F0
	internal void UpdateData(object obj, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainer, FieldInfo field, int[] arrayIndex, ObjectManager manager) { }
	// RVA: 0x757900 Offset: 0x756100 VA: 0x180757900
	internal void MarkForCompletionWhenAvailable() { }
	// RVA: 0x757910 Offset: 0x756110 VA: 0x180757910
	internal void SetFlags() { }
	// RVA: 0x7579D0 Offset: 0x7561D0 VA: 0x1807579D0
	internal bool get_IsIncompleteObjectReference() { }
	// RVA: 0x7579E0 Offset: 0x7561E0 VA: 0x1807579E0
	internal void set_IsIncompleteObjectReference(bool value) { }
	// RVA: 0x757A00 Offset: 0x756200 VA: 0x180757A00
	internal bool get_RequiresDelayedFixup() { }
	// RVA: 0x757A10 Offset: 0x756210 VA: 0x180757A10
	internal bool get_RequiresValueTypeFixup() { }
	// RVA: 0x757A20 Offset: 0x756220 VA: 0x180757A20
	internal bool get_ValueTypeFixupPerformed() { }
	// RVA: 0x757A50 Offset: 0x756250 VA: 0x180757A50
	internal void set_ValueTypeFixupPerformed(bool value) { }
	// RVA: 0x757A60 Offset: 0x756260 VA: 0x180757A60
	internal bool get_HasISerializable() { }
	// RVA: 0x757A70 Offset: 0x756270 VA: 0x180757A70
	internal bool get_HasSurrogate() { }
	// RVA: 0x757A80 Offset: 0x756280 VA: 0x180757A80
	internal bool get_CanSurrogatedObjectValueChange() { }
	// RVA: 0x757B50 Offset: 0x756350 VA: 0x180757B50
	internal bool get_CanObjectValueChange() { }
	// RVA: 0x38ABD0 Offset: 0x3893D0 VA: 0x18038ABD0
	internal int get_TotalDependentObjects() { }
	// RVA: 0x757B70 Offset: 0x756370 VA: 0x180757B70
	internal bool get_TypeLoadExceptionReachable() { }
	// RVA: 0x757B80 Offset: 0x756380 VA: 0x180757B80
	internal void SetObjectValue(object obj, ObjectManager manager) { }
	// RVA: 0x757CC0 Offset: 0x7564C0 VA: 0x180757CC0
	internal bool get_RequiresSerInfoFixup() { }
	// RVA: 0x757CE0 Offset: 0x7564E0 VA: 0x180757CE0
	internal void set_RequiresSerInfoFixup(bool value) { }
	// RVA: 0x757D00 Offset: 0x756500 VA: 0x180757D00
	internal bool get_CompletelyFixed() { }
	// RVA: 0x757D20 Offset: 0x756520 VA: 0x180757D20
	internal long get_ContainerID() { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal class FixupHolder // TypeDefIndex: 748
{
	// Fields
	internal long m_id; // 0x10
	internal object m_fixupInfo; // 0x18
	internal int m_fixupType; // 0x20

	// Methods
	// RVA: 0x26D0E0 Offset: 0x26B8E0 VA: 0x18026D0E0
	internal void .ctor(long id, object fixupInfo, int fixupType) { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal class FixupHolderList // TypeDefIndex: 749
{
	// Fields
	internal FixupHolder[] m_values; // 0x10
	internal int m_count; // 0x18

	// Methods
	// RVA: 0x7657A0 Offset: 0x763FA0 VA: 0x1807657A0
	internal void .ctor() { }
	// RVA: 0x765830 Offset: 0x764030 VA: 0x180765830
	internal void .ctor(int startingSize) { }
	// RVA: 0x7658D0 Offset: 0x7640D0 VA: 0x1807658D0 Slot: 4
	internal virtual void Add(FixupHolder fixup) { }
	// RVA: 0x765A10 Offset: 0x764210 VA: 0x180765A10
	private void EnlargeArray() { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal class LongList // TypeDefIndex: 750
{
	// Fields
	private long[] m_values; // 0x10
	private int m_count; // 0x18
	private int m_totalItems; // 0x1C
	private int m_currentItem; // 0x20

	// Properties
	internal long Current { get; }

	// Methods
	// RVA: 0x334FE0 Offset: 0x3337E0 VA: 0x180334FE0
	internal void .ctor() { }
	// RVA: 0x335070 Offset: 0x333870 VA: 0x180335070
	internal void .ctor(int startingSize) { }
	// RVA: 0x335110 Offset: 0x333910 VA: 0x180335110
	internal void Add(long value) { }
	// RVA: 0x335220 Offset: 0x333A20 VA: 0x180335220
	internal void StartEnumeration() { }
	// RVA: 0x335230 Offset: 0x333A30 VA: 0x180335230
	internal bool MoveNext() { }
	// RVA: 0x3352A0 Offset: 0x333AA0 VA: 0x1803352A0
	internal long get_Current() { }
	// RVA: 0x3352E0 Offset: 0x333AE0 VA: 0x1803352E0
	internal bool RemoveElement(long value) { }
	// RVA: 0x335370 Offset: 0x333B70 VA: 0x180335370
	private void EnlargeArray() { }
}

// Namespace: System.Runtime.Serialization
internal class ObjectHolderList // TypeDefIndex: 751
{
	// Fields
	internal ObjectHolder[] m_values; // 0x10
	internal int m_count; // 0x18

	// Methods
	// RVA: 0x757D30 Offset: 0x756530 VA: 0x180757D30
	internal void .ctor() { }
	// RVA: 0x757DC0 Offset: 0x7565C0 VA: 0x180757DC0
	internal void .ctor(int startingSize) { }
	// RVA: 0x757E60 Offset: 0x756660 VA: 0x180757E60 Slot: 4
	internal virtual void Add(ObjectHolder value) { }
	// RVA: 0x757FA0 Offset: 0x7567A0 VA: 0x180757FA0
	internal ObjectHolderListEnumerator GetFixupEnumerator() { }
	// RVA: 0x758040 Offset: 0x756840 VA: 0x180758040
	private void EnlargeArray() { }
}

// Namespace: System.Runtime.Serialization
internal class ObjectHolderListEnumerator // TypeDefIndex: 752
{
	// Fields
	private bool m_isFixupEnumerator; // 0x10
	private ObjectHolderList m_list; // 0x18
	private int m_startingVersion; // 0x20
	private int m_currPos; // 0x24

	// Properties
	internal ObjectHolder Current { get; }

	// Methods
	// RVA: 0x758100 Offset: 0x756900 VA: 0x180758100
	internal void .ctor(ObjectHolderList list, bool isFixupEnumerator) { }
	// RVA: 0x758130 Offset: 0x756930 VA: 0x180758130
	internal bool MoveNext() { }
	// RVA: 0x7581E0 Offset: 0x7569E0 VA: 0x1807581E0
	internal ObjectHolder get_Current() { }
}

// Namespace: System.Runtime.Serialization
internal class TypeLoadExceptionHolder // TypeDefIndex: 753
{
	// Fields
	private string m_typeName; // 0x10

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	internal void .ctor(string typeName) { }
}

// Namespace: System.Runtime.Serialization
public sealed class SafeSerializationEventArgs : EventArgs // TypeDefIndex: 754
{
	// Fields
	private StreamingContext m_streamingContext; // 0x10
	private List<object> m_serializedStates; // 0x20

	// Methods
	// RVA: 0x384810 Offset: 0x383010 VA: 0x180384810
	internal void .ctor(StreamingContext streamingContext) { }
}

// Namespace: System.Runtime.Serialization
public interface ISafeSerializationData // TypeDefIndex: 755
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void CompleteDeserialization(object deserialized) { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
internal sealed class SafeSerializationManager : IObjectReference, ISerializable // TypeDefIndex: 756
{
	// Fields
	private IList<object> m_serializedStates; // 0x10
	private SerializationInfo m_savedSerializationInfo; // 0x18
	private object m_realObject; // 0x20
	private RuntimeType m_realType; // 0x28
	private EventHandler<SafeSerializationEventArgs> SerializeObjectState; // 0x30
	private const string RealTypeSerializationName = "CLR_SafeSerializationManager_RealType"; // 0x0

	// Properties
	internal bool IsActive { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x3848E0 Offset: 0x3830E0 VA: 0x1803848E0
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x384AC0 Offset: 0x3832C0 VA: 0x180384AC0
	internal bool get_IsActive() { }
	// RVA: 0x384AD0 Offset: 0x3832D0 VA: 0x180384AD0
	internal void CompleteSerialization(object serializedObject, SerializationInfo info, StreamingContext context) { }
	// RVA: 0x384DB0 Offset: 0x3835B0 VA: 0x180384DB0
	internal void CompleteDeserialization(object deserializedObject) { }
	// RVA: 0x385040 Offset: 0x383840 VA: 0x180385040 Slot: 5
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x385200 Offset: 0x383A00 VA: 0x180385200 Slot: 4
	private object System.Runtime.Serialization.IObjectReference.GetRealObject(StreamingContext context) { }
	[OnDeserializedAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x3854E0 Offset: 0x383CE0 VA: 0x1803854E0
	private void OnDeserialized(StreamingContext context) { }
}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0xD9960 Offset: 0xD8D60 VA: 0x1800D9960
public sealed class OptionalFieldAttribute : Attribute // TypeDefIndex: 757
{
	// Fields
	private int versionAdded; // 0x10

	// Properties
	public int VersionAdded { set; }

	// Methods
	// RVA: 0x1D4960 Offset: 0x1D3160 VA: 0x1801D4960
	public void .ctor() { }
	// RVA: 0x311240 Offset: 0x30FA40 VA: 0x180311240
	public void set_VersionAdded(int value) { }
}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0xD9D30 Offset: 0xD9130 VA: 0x1800D9D30
public sealed class OnSerializingAttribute : Attribute // TypeDefIndex: 758
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0xD9D30 Offset: 0xD9130 VA: 0x1800D9D30
public sealed class OnSerializedAttribute : Attribute // TypeDefIndex: 759
{}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0xD9D30 Offset: 0xD9130 VA: 0x1800D9D30
public sealed class OnDeserializingAttribute : Attribute // TypeDefIndex: 760
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization
[AttributeUsageAttribute] // RVA: 0xD9D30 Offset: 0xD9130 VA: 0x1800D9D30
public sealed class OnDeserializedAttribute : Attribute // TypeDefIndex: 761
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
public abstract class SerializationBinder // TypeDefIndex: 762
{
	// Methods
	// RVA: 0x1D2200 Offset: 0x1D0A00 VA: 0x1801D2200 Slot: 4
	public virtual void BindToName(Type serializedType, out string assemblyName, out string typeName) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract Type BindToType(string assemblyName, string typeName) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Runtime.Serialization
internal class SerializationEvents // TypeDefIndex: 763
{
	// Fields
	private List<MethodInfo> m_OnSerializingMethods; // 0x10
	private List<MethodInfo> m_OnSerializedMethods; // 0x18
	private List<MethodInfo> m_OnDeserializingMethods; // 0x20
	private List<MethodInfo> m_OnDeserializedMethods; // 0x28

	// Properties
	internal bool HasOnSerializingEvents { get; }

	// Methods
	// RVA: 0x1D2610 Offset: 0x1D0E10 VA: 0x1801D2610
	private List<MethodInfo> GetMethodsWithAttribute(Type attribute, Type t) { }
	// RVA: 0x1D2820 Offset: 0x1D1020 VA: 0x1801D2820
	internal void .ctor(Type t) { }
	// RVA: 0x1D2950 Offset: 0x1D1150 VA: 0x1801D2950
	internal bool get_HasOnSerializingEvents() { }
	// RVA: 0x1D2970 Offset: 0x1D1170 VA: 0x1801D2970
	internal void InvokeOnSerializing(object obj, StreamingContext context) { }
	// RVA: 0x1D2D60 Offset: 0x1D1560 VA: 0x1801D2D60
	internal void InvokeOnDeserializing(object obj, StreamingContext context) { }
	// RVA: 0x1D3150 Offset: 0x1D1950 VA: 0x1801D3150
	internal void InvokeOnDeserialized(object obj, StreamingContext context) { }
	// RVA: 0x1D3540 Offset: 0x1D1D40 VA: 0x1801D3540
	internal SerializationEventHandler AddOnSerialized(object obj, SerializationEventHandler handler) { }
	// RVA: 0x1D38F0 Offset: 0x1D20F0 VA: 0x1801D38F0
	internal SerializationEventHandler AddOnDeserialized(object obj, SerializationEventHandler handler) { }
}

// Namespace: System.Runtime.Serialization
internal static class SerializationEventsCache // TypeDefIndex: 764
{
	// Fields
	private static Hashtable cache; // 0xAC037

	// Methods
	// RVA: 0x1D3CA0 Offset: 0x1D24A0 VA: 0x1801D3CA0
	internal static SerializationEvents GetSerializationEventsForType(Type t) { }
	// RVA: 0x1D41A0 Offset: 0x1D29A0 VA: 0x1801D41A0
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
public class SerializationException : SystemException // TypeDefIndex: 765
{
	// Fields
	private static string _nullMessage; // 0xA17960

	// Methods
	// RVA: 0x1D4240 Offset: 0x1D2A40 VA: 0x1801D4240
	public void .ctor() { }
	// RVA: 0x1D42F0 Offset: 0x1D2AF0 VA: 0x1801D42F0
	public void .ctor(string message) { }
	// RVA: 0x1D4310 Offset: 0x1D2B10 VA: 0x1801D4310
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x1D4350 Offset: 0x1D2B50 VA: 0x1801D4350
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization
internal sealed class SerializationFieldInfo : FieldInfo // TypeDefIndex: 766
{
	// Fields
	private RuntimeFieldInfo m_field; // 0x10
	private string m_serializationName; // 0x18

	// Properties
	public override Module Module { get; }
	public override int MetadataToken { get; }
	public override string Name { get; }
	public override Type DeclaringType { get; }
	public override Type ReflectedType { get; }
	public override Type FieldType { get; }
	public override RuntimeFieldHandle FieldHandle { get; }
	public override FieldAttributes Attributes { get; }

	// Methods
	// RVA: 0x1D43D0 Offset: 0x1D2BD0 VA: 0x1801D43D0 Slot: 14
	public override Module get_Module() { }
	// RVA: 0x1D4400 Offset: 0x1D2C00 VA: 0x1801D4400 Slot: 13
	public override int get_MetadataToken() { }
	// RVA: 0x1D4430 Offset: 0x1D2C30 VA: 0x1801D4430
	internal void .ctor(RuntimeFieldInfo field, string namePrefix) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	public override string get_Name() { }
	// RVA: 0x1D44F0 Offset: 0x1D2CF0 VA: 0x1801D44F0 Slot: 8
	public override Type get_DeclaringType() { }
	// RVA: 0x1D4520 Offset: 0x1D2D20 VA: 0x1801D4520 Slot: 9
	public override Type get_ReflectedType() { }
	// RVA: 0x1D4550 Offset: 0x1D2D50 VA: 0x1801D4550 Slot: 10
	public override object[] GetCustomAttributes(bool inherit) { }
	// RVA: 0x1D4580 Offset: 0x1D2D80 VA: 0x1801D4580 Slot: 11
	public override object[] GetCustomAttributes(Type attributeType, bool inherit) { }
	// RVA: 0x1D45B0 Offset: 0x1D2DB0 VA: 0x1801D45B0 Slot: 12
	public override bool IsDefined(Type attributeType, bool inherit) { }
	// RVA: 0x1D45E0 Offset: 0x1D2DE0 VA: 0x1801D45E0 Slot: 17
	public override Type get_FieldType() { }
	// RVA: 0x1D4610 Offset: 0x1D2E10 VA: 0x1801D4610 Slot: 18
	public override object GetValue(object obj) { }
	// RVA: 0x1D4640 Offset: 0x1D2E40 VA: 0x1801D4640
	internal object InternalGetValue(object obj) { }
	// RVA: 0x1D4770 Offset: 0x1D2F70 VA: 0x1801D4770 Slot: 23
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }
	// RVA: 0x1D47A0 Offset: 0x1D2FA0 VA: 0x1801D47A0
	internal void InternalSetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture) { }
	// RVA: 0x1D4900 Offset: 0x1D3100 VA: 0x1801D4900 Slot: 16
	public override RuntimeFieldHandle get_FieldHandle() { }
	// RVA: 0x1D4930 Offset: 0x1D3130 VA: 0x1801D4930 Slot: 15
	public override FieldAttributes get_Attributes() { }
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationInfo // TypeDefIndex: 767
{
	// Fields
	private const int defaultSize = 4; // 0x0
	private const string s_mscorlibAssemblySimpleName = "mscorlib"; // 0x0
	private const string s_mscorlibFileName = "mscorlib.dll"; // 0x0
	internal string[] m_members; // 0x10
	internal object[] m_data; // 0x18
	internal Type[] m_types; // 0x20
	private Dictionary<string, int> m_nameToIndex; // 0x28
	internal int m_currMember; // 0x30
	internal IFormatterConverter m_converter; // 0x38
	private string m_fullTypeName; // 0x40
	private string m_assemName; // 0x48
	private Type objectType; // 0x50
	private bool isFullTypeNameSetExplicit; // 0x58
	private bool isAssemblyNameSetExplicit; // 0x59
	private bool requireSameTokenInPartialTrust; // 0x5A

	// Methods
	// RVA: 0x1D4CF0 Offset: 0x1D34F0 VA: 0x1801D4CF0
	public void .ctor(Type type, IFormatterConverter converter) { }
	// RVA: 0x1D4D10 Offset: 0x1D3510 VA: 0x1801D4D10
	public void .ctor(Type type, IFormatterConverter converter, bool requireSameTokenInPartialTrust) { }
	// RVA: 0x1D4F10 Offset: 0x1D3710 VA: 0x1801D4F10
	public void SetType(Type type) { }
	// RVA: 0x1D50D0 Offset: 0x1D38D0 VA: 0x1801D50D0
	private static bool Compare(byte[] a, byte[] b) { }
	// RVA: 0x1D5160 Offset: 0x1D3960 VA: 0x1801D5160
	internal static void DemandForUnsafeAssemblyNameAssignments(string originalAssemblyName, string newAssemblyName) { }
	// RVA: 0x1D5170 Offset: 0x1D3970 VA: 0x1801D5170
	internal static bool IsAssemblyNameAssignmentSafe(string originalAssemblyName, string newAssemblyName) { }
	// RVA: 0x1D55A0 Offset: 0x1D3DA0 VA: 0x1801D55A0
	public SerializationInfoEnumerator GetEnumerator() { }
	// RVA: 0x1D5660 Offset: 0x1D3E60 VA: 0x1801D5660
	private void ExpandArrays() { }
	// RVA: 0x1D5770 Offset: 0x1D3F70 VA: 0x1801D5770
	public void AddValue(string name, object value, Type type) { }
	// RVA: 0x1D5890 Offset: 0x1D4090 VA: 0x1801D5890
	public void AddValue(string name, object value) { }
	// RVA: 0x1D5B30 Offset: 0x1D4330 VA: 0x1801D5B30
	public void AddValue(string name, bool value) { }
	// RVA: 0x1D5CF0 Offset: 0x1D44F0 VA: 0x1801D5CF0
	public void AddValue(string name, char value) { }
	// RVA: 0x1D5EB0 Offset: 0x1D46B0 VA: 0x1801D5EB0
	public void AddValue(string name, byte value) { }
	// RVA: 0x1D6070 Offset: 0x1D4870 VA: 0x1801D6070
	public void AddValue(string name, int value) { }
	// RVA: 0x1D6230 Offset: 0x1D4A30 VA: 0x1801D6230
	public void AddValue(string name, long value) { }
	// RVA: 0x1D63F0 Offset: 0x1D4BF0 VA: 0x1801D63F0
	public void AddValue(string name, ulong value) { }
	// RVA: 0x1D65B0 Offset: 0x1D4DB0 VA: 0x1801D65B0
	public void AddValue(string name, float value) { }
	// RVA: 0x1D6780 Offset: 0x1D4F80 VA: 0x1801D6780
	public void AddValue(string name, DateTime value) { }
	// RVA: 0x1D6940 Offset: 0x1D5140 VA: 0x1801D6940
	internal void AddValueInternal(string name, object value, Type type) { }
	// RVA: 0x1D6CA0 Offset: 0x1D54A0 VA: 0x1801D6CA0
	internal void UpdateValue(string name, object value, Type type) { }
	// RVA: 0x1D6DC0 Offset: 0x1D55C0 VA: 0x1801D6DC0
	private int FindElement(string name) { }
	// RVA: 0x1D6EE0 Offset: 0x1D56E0 VA: 0x1801D6EE0
	private object GetElement(string name, out Type foundType) { }
	// RVA: 0x1D7050 Offset: 0x1D5850 VA: 0x1801D7050
	private object GetElementNoThrow(string name, out Type foundType) { }
	// RVA: 0x1D70E0 Offset: 0x1D58E0 VA: 0x1801D70E0
	public object GetValue(string name, Type type) { }
	// RVA: 0x1D72A0 Offset: 0x1D5AA0 VA: 0x1801D72A0
	internal object GetValueNoThrow(string name, Type type) { }
	// RVA: 0x1D7400 Offset: 0x1D5C00 VA: 0x1801D7400
	public bool GetBoolean(string name) { }
	// RVA: 0x1D7530 Offset: 0x1D5D30 VA: 0x1801D7530
	public int GetInt32(string name) { }
	// RVA: 0x1D7660 Offset: 0x1D5E60 VA: 0x1801D7660
	public long GetInt64(string name) { }
	// RVA: 0x1D7790 Offset: 0x1D5F90 VA: 0x1801D7790
	public float GetSingle(string name) { }
	// RVA: 0x1D78C0 Offset: 0x1D60C0 VA: 0x1801D78C0
	public string GetString(string name) { }
}

// Namespace: System.Runtime.Serialization
public struct SerializationEntry // TypeDefIndex: 768
{
	// Fields
	private Type m_type; // 0x0
	private object m_value; // 0x8
	private string m_name; // 0x10

	// Methods
	// RVA: 0x65A0 Offset: 0x59A0 VA: 0x1800065A0
	internal void .ctor(string entryName, object entryValue, Type entryType) { }
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationInfoEnumerator : IEnumerator // TypeDefIndex: 769
{
	// Fields
	private string[] m_members; // 0x10
	private object[] m_data; // 0x18
	private Type[] m_types; // 0x20
	private int m_numItems; // 0x28
	private int m_currItem; // 0x2C
	private bool m_current; // 0x30

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public SerializationEntry Current { get; }
	public string Name { get; }
	public object Value { get; }
	public Type ObjectType { get; }

	// Methods
	// RVA: 0x1D79F0 Offset: 0x1D61F0 VA: 0x1801D79F0
	internal void .ctor(string[] members, object[] info, Type[] types, int numItems) { }
	// RVA: 0x1D7A20 Offset: 0x1D6220 VA: 0x1801D7A20 Slot: 4
	public bool MoveNext() { }
	// RVA: 0x1D7A40 Offset: 0x1D6240 VA: 0x1801D7A40 Slot: 5
	private object System.Collections.IEnumerator.get_Current() { }
	// RVA: 0x1D7BA0 Offset: 0x1D63A0 VA: 0x1801D7BA0
	public SerializationEntry get_Current() { }
	// RVA: 0x1D7CF0 Offset: 0x1D64F0 VA: 0x1801D7CF0
	public string get_Name() { }
	// RVA: 0x1D7DE0 Offset: 0x1D65E0 VA: 0x1801D7DE0
	public object get_Value() { }
	// RVA: 0x1D7ED0 Offset: 0x1D66D0 VA: 0x1801D7ED0
	public Type get_ObjectType() { }
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationObjectManager // TypeDefIndex: 770
{
	// Fields
	private Hashtable m_objectSeenTable; // 0x10
	private SerializationEventHandler m_onSerializedHandler; // 0x18
	private StreamingContext m_context; // 0x20

	// Methods
	// RVA: 0x1D7FC0 Offset: 0x1D67C0 VA: 0x1801D7FC0
	public void .ctor(StreamingContext context) { }
	// RVA: 0x1D80A0 Offset: 0x1D68A0 VA: 0x1801D80A0
	public void RegisterObject(object obj) { }
	// RVA: 0x1D82C0 Offset: 0x1D6AC0 VA: 0x1801D82C0
	public void RaiseOnSerializedEvent() { }
	// RVA: 0x1D82F0 Offset: 0x1D6AF0 VA: 0x1801D82F0
	private void AddOnSerialized(object obj) { }
}

// Namespace: System.Runtime.Serialization
[Serializable]
public struct StreamingContext // TypeDefIndex: 771
{
	// Fields
	internal object m_additionalContext; // 0x0
	internal StreamingContextStates m_state; // 0x8

	// Methods
	// RVA: 0x7AE0 Offset: 0x6EE0 VA: 0x180007AE0
	public void .ctor(StreamingContextStates state) { }
	// RVA: 0x7AF0 Offset: 0x6EF0 VA: 0x180007AF0
	public void .ctor(StreamingContextStates state, object additional) { }
	// RVA: 0x7B00 Offset: 0x6F00 VA: 0x180007B00 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x1F40 Offset: 0x1340 VA: 0x180001F40 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Runtime.Serialization
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum StreamingContextStates // TypeDefIndex: 772
{
	// Fields
	public int value__; // 0x0
	public const StreamingContextStates CrossProcess = 1; // 0x0
	public const StreamingContextStates CrossMachine = 2; // 0x0
	public const StreamingContextStates File = 4; // 0x0
	public const StreamingContextStates Persistence = 8; // 0x0
	public const StreamingContextStates Remoting = 16; // 0x0
	public const StreamingContextStates Other = 32; // 0x0
	public const StreamingContextStates Clone = 64; // 0x0
	public const StreamingContextStates CrossAppDomain = 128; // 0x0
	public const StreamingContextStates All = 255; // 0x0
}

// Namespace: System.Runtime.Serialization
internal class ValueTypeFixupInfo // TypeDefIndex: 773
{
	// Fields
	private long m_containerID; // 0x10
	private FieldInfo m_parentField; // 0x18
	private int[] m_parentIndex; // 0x20

	// Methods
	// RVA: 0x4188C0 Offset: 0x4170C0 VA: 0x1804188C0
	public void .ctor(long containerID, FieldInfo member, int[] parentIndex) { }
}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public enum FormatterTypeStyle // TypeDefIndex: 774
{
	// Fields
	public int value__; // 0x0
	public const FormatterTypeStyle TypesWhenNeeded = 0; // 0x0
	public const FormatterTypeStyle TypesAlways = 1; // 0x0
	public const FormatterTypeStyle XsdString = 2; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public enum FormatterAssemblyStyle // TypeDefIndex: 775
{
	// Fields
	public int value__; // 0x0
	public const FormatterAssemblyStyle Simple = 0; // 0x0
	public const FormatterAssemblyStyle Full = 1; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters
public enum TypeFilterLevel // TypeDefIndex: 776
{
	// Fields
	public int value__; // 0x0
	public const TypeFilterLevel Low = 2; // 0x0
	public const TypeFilterLevel Full = 3; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal static class BinaryConverter // TypeDefIndex: 777
{
	// Methods
	// RVA: 0x2DC6E0 Offset: 0x2DAEE0 VA: 0x1802DC6E0
	internal static BinaryTypeEnum GetBinaryTypeInfo(Type type, WriteObjectInfo objectInfo, string typeName, ObjectWriter objectWriter, out object typeInformation, out int assemId) { }
	// RVA: 0x2DCA70 Offset: 0x2DB270 VA: 0x1802DCA70
	internal static BinaryTypeEnum GetParserBinaryTypeInfo(Type type, out object typeInformation) { }
	// RVA: 0x2DCD10 Offset: 0x2DB510 VA: 0x1802DCD10
	internal static void WriteTypeInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, int assemId, __BinaryWriter sout) { }
	// RVA: 0x2DCF80 Offset: 0x2DB780 VA: 0x1802DCF80
	internal static object ReadTypeInfo(BinaryTypeEnum binaryTypeEnum, __BinaryParser input, out int assemId) { }
	// RVA: 0x2DD1A0 Offset: 0x2DB9A0 VA: 0x1802DD1A0
	internal static void TypeFromInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, ObjectReader objectReader, BinaryAssemblyInfo assemblyInfo, out InternalPrimitiveTypeE primitiveTypeEnum, out string typeString, out Type type, out bool isVariant) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal static class IOUtil // TypeDefIndex: 778
{
	// Methods
	// RVA: 0x776070 Offset: 0x774870 VA: 0x180776070
	internal static bool FlagTest(MessageEnum flag, MessageEnum target) { }
	// RVA: 0x776080 Offset: 0x774880 VA: 0x180776080
	internal static void WriteStringWithCode(string value, __BinaryWriter sout) { }
	// RVA: 0x776110 Offset: 0x774910 VA: 0x180776110
	internal static void WriteWithCode(Type type, object value, __BinaryWriter sout) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryAssemblyInfo // TypeDefIndex: 779
{
	// Fields
	internal string assemblyString; // 0x10
	private Assembly assembly; // 0x18

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	internal void .ctor(string assemblyString) { }
	// RVA: 0x25B970 Offset: 0x25A170 VA: 0x18025B970
	internal void .ctor(string assemblyString, Assembly assembly) { }
	// RVA: 0x2DC510 Offset: 0x2DAD10 VA: 0x1802DC510
	internal Assembly GetAssembly() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class SerializationHeaderRecord // TypeDefIndex: 780
{
	// Fields
	internal int binaryFormatterMajorVersion; // 0x10
	internal int binaryFormatterMinorVersion; // 0x14
	internal BinaryHeaderEnum binaryHeaderEnum; // 0x18
	internal int topId; // 0x1C
	internal int headerId; // 0x20
	internal int majorVersion; // 0x24
	internal int minorVersion; // 0x28

	// Methods
	// RVA: 0x1D4960 Offset: 0x1D3160 VA: 0x1801D4960
	internal void .ctor() { }
	// RVA: 0x1D4970 Offset: 0x1D3170 VA: 0x1801D4970
	internal void .ctor(BinaryHeaderEnum binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion) { }
	// RVA: 0x1D49A0 Offset: 0x1D31A0 VA: 0x1801D49A0 Slot: 4
	public void Write(__BinaryWriter sout) { }
	// RVA: 0x1D4A70 Offset: 0x1D3270 VA: 0x1801D4A70
	private static int GetInt32(byte[] buffer, int index) { }
	// RVA: 0x1D4B20 Offset: 0x1D3320 VA: 0x1801D4B20 Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryAssembly // TypeDefIndex: 781
{
	// Fields
	internal int assemId; // 0x10
	internal string assemblyString; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x2DC420 Offset: 0x2DAC20 VA: 0x1802DC420
	internal void Set(int assemId, string assemblyString) { }
	// RVA: 0x2DC430 Offset: 0x2DAC30 VA: 0x1802DC430 Slot: 4
	public void Write(__BinaryWriter sout) { }
	// RVA: 0x2DC4B0 Offset: 0x2DACB0 VA: 0x1802DC4B0 Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryCrossAppDomainAssembly // TypeDefIndex: 782
{
	// Fields
	internal int assemId; // 0x10
	internal int assemblyIndex; // 0x14

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x2DD6A0 Offset: 0x2DBEA0 VA: 0x1802DD6A0 Slot: 4
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryObject // TypeDefIndex: 783
{
	// Fields
	internal int objectId; // 0x10
	internal int mapId; // 0x14

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x2716C0 Offset: 0x26FEC0 VA: 0x1802716C0
	internal void Set(int objectId, int mapId) { }
	// RVA: 0x2DE940 Offset: 0x2DD140 VA: 0x1802DE940 Slot: 4
	public void Write(__BinaryWriter sout) { }
	// RVA: 0x2DD6A0 Offset: 0x2DBEA0 VA: 0x1802DD6A0 Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryMethodCall // TypeDefIndex: 784
{
	// Fields
	private string methodName; // 0x10
	private string typeName; // 0x18
	private object[] args; // 0x20
	private object callContext; // 0x28
	private Type[] argTypes; // 0x30
	private bool bArgsPrimitive; // 0x38
	private MessageEnum messageEnum; // 0x3C

	// Methods
	// RVA: 0x2DE340 Offset: 0x2DCB40 VA: 0x1802DE340
	internal void Write(__BinaryWriter sout) { }
	// RVA: 0x29CB20 Offset: 0x29B320 VA: 0x18029CB20
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryMethodReturn // TypeDefIndex: 785
{
	// Fields
	private object returnValue; // 0x10
	private object[] args; // 0x18
	private object callContext; // 0x20
	private Type[] argTypes; // 0x28
	private bool bArgsPrimitive; // 0x30
	private MessageEnum messageEnum; // 0x34
	private Type returnType; // 0x38
	private static object instanceOfVoid; // 0x0

	// Methods
	// RVA: 0x2DE620 Offset: 0x2DCE20 VA: 0x1802DE620
	private static void .cctor() { }
	// RVA: 0x2DE700 Offset: 0x2DCF00 VA: 0x1802DE700
	internal void .ctor() { }
	// RVA: 0x2DE710 Offset: 0x2DCF10 VA: 0x1802DE710 Slot: 4
	public void Write(__BinaryWriter sout) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryObjectString // TypeDefIndex: 786
{
	// Fields
	internal int objectId; // 0x10
	internal string value; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x2DC420 Offset: 0x2DAC20 VA: 0x1802DC420
	internal void Set(int objectId, string value) { }
	// RVA: 0x2DE9C0 Offset: 0x2DD1C0 VA: 0x1802DE9C0 Slot: 4
	public void Write(__BinaryWriter sout) { }
	// RVA: 0x2DC4B0 Offset: 0x2DACB0 VA: 0x1802DC4B0 Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryCrossAppDomainString // TypeDefIndex: 787
{
	// Fields
	internal int objectId; // 0x10
	internal int value; // 0x14

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x2DD6A0 Offset: 0x2DBEA0 VA: 0x1802DD6A0 Slot: 4
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryCrossAppDomainMap // TypeDefIndex: 788
{
	// Fields
	internal int crossAppDomainArrayIndex; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x2DD700 Offset: 0x2DBF00 VA: 0x1802DD700 Slot: 4
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class MemberPrimitiveTyped // TypeDefIndex: 789
{
	// Fields
	internal InternalPrimitiveTypeE primitiveTypeEnum; // 0x10
	internal object value; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x2DC420 Offset: 0x2DAC20 VA: 0x1802DC420
	internal void Set(InternalPrimitiveTypeE primitiveTypeEnum, object value) { }
	// RVA: 0x33D5D0 Offset: 0x33BDD0 VA: 0x18033D5D0 Slot: 4
	public void Write(__BinaryWriter sout) { }
	// RVA: 0x33D640 Offset: 0x33BE40 VA: 0x18033D640 Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryObjectWithMap // TypeDefIndex: 790
{
	// Fields
	internal BinaryHeaderEnum binaryHeaderEnum; // 0x10
	internal int objectId; // 0x14
	internal string name; // 0x18
	internal int numMembers; // 0x20
	internal string[] memberNames; // 0x28
	internal int assemId; // 0x30

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	internal void .ctor(BinaryHeaderEnum binaryHeaderEnum) { }
	// RVA: 0x2DEA40 Offset: 0x2DD240 VA: 0x1802DEA40
	internal void Set(int objectId, string name, int numMembers, string[] memberNames, int assemId) { }
	// RVA: 0x2DEA70 Offset: 0x2DD270 VA: 0x1802DEA70 Slot: 4
	public void Write(__BinaryWriter sout) { }
	// RVA: 0x2DEB90 Offset: 0x2DD390 VA: 0x1802DEB90 Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryObjectWithMapTyped // TypeDefIndex: 791
{
	// Fields
	internal BinaryHeaderEnum binaryHeaderEnum; // 0x10
	internal int objectId; // 0x14
	internal string name; // 0x18
	internal int numMembers; // 0x20
	internal string[] memberNames; // 0x28
	internal BinaryTypeEnum[] binaryTypeEnumA; // 0x30
	internal object[] typeInformationA; // 0x38
	internal int[] memberAssemIds; // 0x40
	internal int assemId; // 0x48

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	internal void .ctor(BinaryHeaderEnum binaryHeaderEnum) { }
	// RVA: 0x2DEDD0 Offset: 0x2DD5D0 VA: 0x1802DEDD0
	internal void Set(int objectId, string name, int numMembers, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, int assemId) { }
	// RVA: 0x2DEE20 Offset: 0x2DD620 VA: 0x1802DEE20 Slot: 4
	public void Write(__BinaryWriter sout) { }
	// RVA: 0x2DF060 Offset: 0x2DD860 VA: 0x1802DF060 Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class BinaryArray // TypeDefIndex: 792
{
	// Fields
	internal int objectId; // 0x10
	internal int rank; // 0x14
	internal int[] lengthA; // 0x18
	internal int[] lowerBoundA; // 0x20
	internal BinaryTypeEnum binaryTypeEnum; // 0x28
	internal object typeInformation; // 0x30
	internal int assemId; // 0x38
	private BinaryHeaderEnum binaryHeaderEnum; // 0x3C
	internal BinaryArrayTypeEnum binaryArrayTypeEnum; // 0x40

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x2DBB20 Offset: 0x2DA320 VA: 0x1802DBB20
	internal void .ctor(BinaryHeaderEnum binaryHeaderEnum) { }
	// RVA: 0x2DBB30 Offset: 0x2DA330 VA: 0x1802DBB30
	internal void Set(int objectId, int rank, int[] lengthA, int[] lowerBoundA, BinaryTypeEnum binaryTypeEnum, object typeInformation, BinaryArrayTypeEnum binaryArrayTypeEnum, int assemId) { }
	// RVA: 0x2DBBA0 Offset: 0x2DA3A0 VA: 0x1802DBBA0 Slot: 4
	public void Write(__BinaryWriter sout) { }
	// RVA: 0x2DBFB0 Offset: 0x2DA7B0 VA: 0x1802DBFB0 Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class MemberPrimitiveUnTyped // TypeDefIndex: 793
{
	// Fields
	internal InternalPrimitiveTypeE typeInformation; // 0x10
	internal object value; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x2DC420 Offset: 0x2DAC20 VA: 0x1802DC420
	internal void Set(InternalPrimitiveTypeE typeInformation, object value) { }
	// RVA: 0x33D6A0 Offset: 0x33BEA0 VA: 0x18033D6A0 Slot: 4
	public void Write(__BinaryWriter sout) { }
	// RVA: 0x33D6D0 Offset: 0x33BED0 VA: 0x18033D6D0 Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class MemberReference // TypeDefIndex: 794
{
	// Fields
	internal int idRef; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x33D700 Offset: 0x33BF00 VA: 0x18033D700 Slot: 4
	public void Write(__BinaryWriter sout) { }
	// RVA: 0x2DD700 Offset: 0x2DBF00 VA: 0x1802DD700 Slot: 5
	public void Read(__BinaryParser input) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectNull // TypeDefIndex: 795
{
	// Fields
	internal int nullCount; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x307C60 Offset: 0x306460 VA: 0x180307C60 Slot: 4
	public void Write(__BinaryWriter sout) { }
	// RVA: 0x307D40 Offset: 0x306540 VA: 0x180307D40
	public void Read(__BinaryParser input, BinaryHeaderEnum binaryHeaderEnum) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class MessageEnd // TypeDefIndex: 796
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x340B80 Offset: 0x33F380 VA: 0x180340B80 Slot: 4
	public void Write(__BinaryWriter sout) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectMap // TypeDefIndex: 797
{
	// Fields
	internal string objectName; // 0x10
	internal Type objectType; // 0x18
	internal BinaryTypeEnum[] binaryTypeEnumA; // 0x20
	internal object[] typeInformationA; // 0x28
	internal Type[] memberTypes; // 0x30
	internal string[] memberNames; // 0x38
	internal ReadObjectInfo objectInfo; // 0x40
	internal bool isInitObjectInfo; // 0x48
	internal ObjectReader objectReader; // 0x50
	internal int objectId; // 0x58
	internal BinaryAssemblyInfo assemblyInfo; // 0x60

	// Methods
	// RVA: 0x75C790 Offset: 0x75AF90 VA: 0x18075C790
	internal void .ctor(string objectName, Type objectType, string[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo) { }
	// RVA: 0x75CAB0 Offset: 0x75B2B0 VA: 0x18075CAB0
	internal void .ctor(string objectName, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable) { }
	// RVA: 0x75CFA0 Offset: 0x75B7A0 VA: 0x18075CFA0
	internal ReadObjectInfo CreateObjectInfo(ref SerializationInfo si, ref object[] memberData) { }
	// RVA: 0x75CFF0 Offset: 0x75B7F0 VA: 0x18075CFF0
	internal static ObjectMap Create(string name, Type objectType, string[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo) { }
	// RVA: 0x75D0D0 Offset: 0x75B8D0 VA: 0x18075D0D0
	internal static ObjectMap Create(string name, string[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectProgress // TypeDefIndex: 798
{
	// Fields
	internal static int opRecordIdCount; // 0x0
	internal bool isInitial; // 0x10
	internal int count; // 0x14
	internal BinaryTypeEnum expectedType; // 0x18
	internal object expectedTypeInformation; // 0x20
	internal string name; // 0x28
	internal InternalObjectTypeE objectTypeEnum; // 0x30
	internal InternalMemberTypeE memberTypeEnum; // 0x34
	internal InternalMemberValueE memberValueEnum; // 0x38
	internal Type dtType; // 0x40
	internal int numItems; // 0x48
	internal BinaryTypeEnum binaryTypeEnum; // 0x4C
	internal object typeInformation; // 0x50
	internal int nullCount; // 0x58
	internal int memberLength; // 0x5C
	internal BinaryTypeEnum[] binaryTypeEnumA; // 0x60
	internal object[] typeInformationA; // 0x68
	internal string[] memberNames; // 0x70
	internal Type[] memberTypes; // 0x78
	internal ParseRecord pr; // 0x80

	// Methods
	// RVA: 0x307DD0 Offset: 0x3065D0 VA: 0x180307DD0
	internal void .ctor() { }
	// RVA: 0x307E60 Offset: 0x306660 VA: 0x180307E60
	internal void Init() { }
	// RVA: 0x307EC0 Offset: 0x3066C0 VA: 0x180307EC0
	internal void ArrayCountIncrement(int value) { }
	// RVA: 0x307ED0 Offset: 0x3066D0 VA: 0x180307ED0
	internal bool GetNext(out BinaryTypeEnum outBinaryTypeEnum, out object outTypeInformation) { }
	// RVA: 0x308010 Offset: 0x306810 VA: 0x180308010
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class Converter // TypeDefIndex: 799
{
	// Fields
	private static int primitiveTypeEnumLength; // 0x0
	private static Type[] typeA; // 0x8
	private static Type[] arrayTypeA; // 0x10
	private static string[] valueA; // 0x18
	private static TypeCode[] typeCodeA; // 0x20
	private static InternalPrimitiveTypeE[] codeA; // 0x28
	internal static Type typeofISerializable; // 0x30
	internal static Type typeofString; // 0x38
	internal static Type typeofConverter; // 0x40
	internal static Type typeofBoolean; // 0x48
	internal static Type typeofByte; // 0x50
	internal static Type typeofChar; // 0x58
	internal static Type typeofDecimal; // 0x60
	internal static Type typeofDouble; // 0x68
	internal static Type typeofInt16; // 0x70
	internal static Type typeofInt32; // 0x78
	internal static Type typeofInt64; // 0x80
	internal static Type typeofSByte; // 0x88
	internal static Type typeofSingle; // 0x90
	internal static Type typeofTimeSpan; // 0x98
	internal static Type typeofDateTime; // 0xA0
	internal static Type typeofUInt16; // 0xA8
	internal static Type typeofUInt32; // 0xB0
	internal static Type typeofUInt64; // 0xB8
	internal static Type typeofObject; // 0xC0
	internal static Type typeofSystemVoid; // 0xC8
	internal static Assembly urtAssembly; // 0xD0
	internal static string urtAssemblyString; // 0xD8
	internal static Type typeofTypeArray; // 0xE0
	internal static Type typeofObjectArray; // 0xE8
	internal static Type typeofStringArray; // 0xF0
	internal static Type typeofBooleanArray; // 0xF8
	internal static Type typeofByteArray; // 0x100
	internal static Type typeofCharArray; // 0x108
	internal static Type typeofDecimalArray; // 0x110
	internal static Type typeofDoubleArray; // 0x118
	internal static Type typeofInt16Array; // 0x120
	internal static Type typeofInt32Array; // 0x128
	internal static Type typeofInt64Array; // 0x130
	internal static Type typeofSByteArray; // 0x138
	internal static Type typeofSingleArray; // 0x140
	internal static Type typeofTimeSpanArray; // 0x148
	internal static Type typeofDateTimeArray; // 0x150
	internal static Type typeofUInt16Array; // 0x158
	internal static Type typeofUInt32Array; // 0x160
	internal static Type typeofUInt64Array; // 0x168
	internal static Type typeofMarshalByRefObject; // 0x170

	// Methods
	// RVA: 0x3F4F30 Offset: 0x3F3730 VA: 0x1803F4F30
	internal static InternalPrimitiveTypeE ToCode(Type type) { }
	// RVA: 0x3F5200 Offset: 0x3F3A00 VA: 0x1803F5200
	internal static bool IsWriteAsByteArray(InternalPrimitiveTypeE code) { }
	// RVA: 0x3F5270 Offset: 0x3F3A70 VA: 0x1803F5270
	internal static int TypeLength(InternalPrimitiveTypeE code) { }
	// RVA: 0x3F52F0 Offset: 0x3F3AF0 VA: 0x1803F52F0
	internal static Type ToArrayType(InternalPrimitiveTypeE code) { }
	// RVA: 0x3F5420 Offset: 0x3F3C20 VA: 0x1803F5420
	private static void InitTypeA() { }
	// RVA: 0x3F5AB0 Offset: 0x3F42B0 VA: 0x1803F5AB0
	private static void InitArrayTypeA() { }
	// RVA: 0x3F6150 Offset: 0x3F4950 VA: 0x1803F6150
	internal static Type ToType(InternalPrimitiveTypeE code) { }
	// RVA: 0x3F6280 Offset: 0x3F4A80 VA: 0x1803F6280
	internal static Array CreatePrimitiveArray(InternalPrimitiveTypeE code, int length) { }
	// RVA: 0x3F63F0 Offset: 0x3F4BF0 VA: 0x1803F63F0
	internal static bool IsPrimitiveArray(Type type, out object typeInformation) { }
	// RVA: 0x3F6760 Offset: 0x3F4F60 VA: 0x1803F6760
	private static void InitValueA() { }
	// RVA: 0x3F6D70 Offset: 0x3F5570 VA: 0x1803F6D70
	internal static string ToComType(InternalPrimitiveTypeE code) { }
	// RVA: 0x3F6EA0 Offset: 0x3F56A0 VA: 0x1803F6EA0
	private static void InitTypeCodeA() { }
	// RVA: 0x3F7170 Offset: 0x3F5970 VA: 0x1803F7170
	internal static TypeCode ToTypeCode(InternalPrimitiveTypeE code) { }
	// RVA: 0x3F72A0 Offset: 0x3F5AA0 VA: 0x1803F72A0
	private static void InitCodeA() { }
	// RVA: 0x3F75B0 Offset: 0x3F5DB0 VA: 0x1803F75B0
	internal static InternalPrimitiveTypeE ToPrimitiveTypeEnum(TypeCode typeCode) { }
	// RVA: 0x3F76E0 Offset: 0x3F5EE0 VA: 0x1803F76E0
	internal static object FromString(string value, InternalPrimitiveTypeE code) { }
	// RVA: 0x3F7910 Offset: 0x3F6110 VA: 0x1803F7910
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum BinaryHeaderEnum // TypeDefIndex: 800
{
	// Fields
	public int value__; // 0x0
	public const BinaryHeaderEnum SerializedStreamHeader = 0; // 0x0
	public const BinaryHeaderEnum Object = 1; // 0x0
	public const BinaryHeaderEnum ObjectWithMap = 2; // 0x0
	public const BinaryHeaderEnum ObjectWithMapAssemId = 3; // 0x0
	public const BinaryHeaderEnum ObjectWithMapTyped = 4; // 0x0
	public const BinaryHeaderEnum ObjectWithMapTypedAssemId = 5; // 0x0
	public const BinaryHeaderEnum ObjectString = 6; // 0x0
	public const BinaryHeaderEnum Array = 7; // 0x0
	public const BinaryHeaderEnum MemberPrimitiveTyped = 8; // 0x0
	public const BinaryHeaderEnum MemberReference = 9; // 0x0
	public const BinaryHeaderEnum ObjectNull = 10; // 0x0
	public const BinaryHeaderEnum MessageEnd = 11; // 0x0
	public const BinaryHeaderEnum Assembly = 12; // 0x0
	public const BinaryHeaderEnum ObjectNullMultiple256 = 13; // 0x0
	public const BinaryHeaderEnum ObjectNullMultiple = 14; // 0x0
	public const BinaryHeaderEnum ArraySinglePrimitive = 15; // 0x0
	public const BinaryHeaderEnum ArraySingleObject = 16; // 0x0
	public const BinaryHeaderEnum ArraySingleString = 17; // 0x0
	public const BinaryHeaderEnum CrossAppDomainMap = 18; // 0x0
	public const BinaryHeaderEnum CrossAppDomainString = 19; // 0x0
	public const BinaryHeaderEnum CrossAppDomainAssembly = 20; // 0x0
	public const BinaryHeaderEnum MethodCall = 21; // 0x0
	public const BinaryHeaderEnum MethodReturn = 22; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum BinaryTypeEnum // TypeDefIndex: 801
{
	// Fields
	public int value__; // 0x0
	public const BinaryTypeEnum Primitive = 0; // 0x0
	public const BinaryTypeEnum String = 1; // 0x0
	public const BinaryTypeEnum Object = 2; // 0x0
	public const BinaryTypeEnum ObjectUrt = 3; // 0x0
	public const BinaryTypeEnum ObjectUser = 4; // 0x0
	public const BinaryTypeEnum ObjectArray = 5; // 0x0
	public const BinaryTypeEnum StringArray = 6; // 0x0
	public const BinaryTypeEnum PrimitiveArray = 7; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum BinaryArrayTypeEnum // TypeDefIndex: 802
{
	// Fields
	public int value__; // 0x0
	public const BinaryArrayTypeEnum Single = 0; // 0x0
	public const BinaryArrayTypeEnum Jagged = 1; // 0x0
	public const BinaryArrayTypeEnum Rectangular = 2; // 0x0
	public const BinaryArrayTypeEnum SingleOffset = 3; // 0x0
	public const BinaryArrayTypeEnum JaggedOffset = 4; // 0x0
	public const BinaryArrayTypeEnum RectangularOffset = 5; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalSerializerTypeE // TypeDefIndex: 803
{
	// Fields
	public int value__; // 0x0
	public const InternalSerializerTypeE Soap = 1; // 0x0
	public const InternalSerializerTypeE Binary = 2; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalParseTypeE // TypeDefIndex: 804
{
	// Fields
	public int value__; // 0x0
	public const InternalParseTypeE Empty = 0; // 0x0
	public const InternalParseTypeE SerializedStreamHeader = 1; // 0x0
	public const InternalParseTypeE Object = 2; // 0x0
	public const InternalParseTypeE Member = 3; // 0x0
	public const InternalParseTypeE ObjectEnd = 4; // 0x0
	public const InternalParseTypeE MemberEnd = 5; // 0x0
	public const InternalParseTypeE Headers = 6; // 0x0
	public const InternalParseTypeE HeadersEnd = 7; // 0x0
	public const InternalParseTypeE SerializedStreamHeaderEnd = 8; // 0x0
	public const InternalParseTypeE Envelope = 9; // 0x0
	public const InternalParseTypeE EnvelopeEnd = 10; // 0x0
	public const InternalParseTypeE Body = 11; // 0x0
	public const InternalParseTypeE BodyEnd = 12; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalObjectTypeE // TypeDefIndex: 805
{
	// Fields
	public int value__; // 0x0
	public const InternalObjectTypeE Empty = 0; // 0x0
	public const InternalObjectTypeE Object = 1; // 0x0
	public const InternalObjectTypeE Array = 2; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalObjectPositionE // TypeDefIndex: 806
{
	// Fields
	public int value__; // 0x0
	public const InternalObjectPositionE Empty = 0; // 0x0
	public const InternalObjectPositionE Top = 1; // 0x0
	public const InternalObjectPositionE Child = 2; // 0x0
	public const InternalObjectPositionE Headers = 3; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalArrayTypeE // TypeDefIndex: 807
{
	// Fields
	public int value__; // 0x0
	public const InternalArrayTypeE Empty = 0; // 0x0
	public const InternalArrayTypeE Single = 1; // 0x0
	public const InternalArrayTypeE Jagged = 2; // 0x0
	public const InternalArrayTypeE Rectangular = 3; // 0x0
	public const InternalArrayTypeE Base64 = 4; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalMemberTypeE // TypeDefIndex: 808
{
	// Fields
	public int value__; // 0x0
	public const InternalMemberTypeE Empty = 0; // 0x0
	public const InternalMemberTypeE Header = 1; // 0x0
	public const InternalMemberTypeE Field = 2; // 0x0
	public const InternalMemberTypeE Item = 3; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalMemberValueE // TypeDefIndex: 809
{
	// Fields
	public int value__; // 0x0
	public const InternalMemberValueE Empty = 0; // 0x0
	public const InternalMemberValueE InlineValue = 1; // 0x0
	public const InternalMemberValueE Nested = 2; // 0x0
	public const InternalMemberValueE Reference = 3; // 0x0
	public const InternalMemberValueE Null = 4; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum InternalPrimitiveTypeE // TypeDefIndex: 810
{
	// Fields
	public int value__; // 0x0
	public const InternalPrimitiveTypeE Invalid = 0; // 0x0
	public const InternalPrimitiveTypeE Boolean = 1; // 0x0
	public const InternalPrimitiveTypeE Byte = 2; // 0x0
	public const InternalPrimitiveTypeE Char = 3; // 0x0
	public const InternalPrimitiveTypeE Currency = 4; // 0x0
	public const InternalPrimitiveTypeE Decimal = 5; // 0x0
	public const InternalPrimitiveTypeE Double = 6; // 0x0
	public const InternalPrimitiveTypeE Int16 = 7; // 0x0
	public const InternalPrimitiveTypeE Int32 = 8; // 0x0
	public const InternalPrimitiveTypeE Int64 = 9; // 0x0
	public const InternalPrimitiveTypeE SByte = 10; // 0x0
	public const InternalPrimitiveTypeE Single = 11; // 0x0
	public const InternalPrimitiveTypeE TimeSpan = 12; // 0x0
	public const InternalPrimitiveTypeE DateTime = 13; // 0x0
	public const InternalPrimitiveTypeE UInt16 = 14; // 0x0
	public const InternalPrimitiveTypeE UInt32 = 15; // 0x0
	public const InternalPrimitiveTypeE UInt64 = 16; // 0x0
	public const InternalPrimitiveTypeE Null = 17; // 0x0
	public const InternalPrimitiveTypeE String = 18; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
internal enum MessageEnum // TypeDefIndex: 811
{
	// Fields
	public int value__; // 0x0
	public const MessageEnum NoArgs = 1; // 0x0
	public const MessageEnum ArgsInline = 2; // 0x0
	public const MessageEnum ArgsIsArray = 4; // 0x0
	public const MessageEnum ArgsInArray = 8; // 0x0
	public const MessageEnum NoContext = 16; // 0x0
	public const MessageEnum ContextInline = 32; // 0x0
	public const MessageEnum ContextInArray = 64; // 0x0
	public const MessageEnum MethodSignatureInArray = 128; // 0x0
	public const MessageEnum PropertyInArray = 256; // 0x0
	public const MessageEnum NoReturnValue = 512; // 0x0
	public const MessageEnum ReturnValueVoid = 1024; // 0x0
	public const MessageEnum ReturnValueInline = 2048; // 0x0
	public const MessageEnum ReturnValueInArray = 4096; // 0x0
	public const MessageEnum ExceptionInArray = 8192; // 0x0
	public const MessageEnum GenericMethod = 32768; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[Serializable]
internal enum ValueFixupEnum // TypeDefIndex: 812
{
	// Fields
	public int value__; // 0x0
	public const ValueFixupEnum Empty = 0; // 0x0
	public const ValueFixupEnum Array = 1; // 0x0
	public const ValueFixupEnum Header = 2; // 0x0
	public const ValueFixupEnum Member = 3; // 0x0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
public sealed class BinaryFormatter // TypeDefIndex: 813
{
	// Fields
	internal ISurrogateSelector m_surrogates; // 0x10
	internal StreamingContext m_context; // 0x18
	internal SerializationBinder m_binder; // 0x28
	internal FormatterTypeStyle m_typeFormat; // 0x30
	internal FormatterAssemblyStyle m_assemblyFormat; // 0x34
	internal TypeFilterLevel m_securityLevel; // 0x38
	internal object[] m_crossAppDomainArray; // 0x40
	private static Dictionary<Type, TypeInformation> typeNameCache; // 0x0

	// Methods
	// RVA: 0x2DD740 Offset: 0x2DBF40 VA: 0x1802DD740
	public void .ctor() { }
	// RVA: 0x2DD780 Offset: 0x2DBF80 VA: 0x1802DD780
	public void .ctor(ISurrogateSelector selector, StreamingContext context) { }
	// RVA: 0x2DD7A0 Offset: 0x2DBFA0 VA: 0x1802DD7A0 Slot: 4
	public object Deserialize(Stream serializationStream) { }
	// RVA: 0x2DD7C0 Offset: 0x2DBFC0 VA: 0x1802DD7C0
	internal object Deserialize(Stream serializationStream, HeaderHandler handler, bool fCheck) { }
	// RVA: 0x2DDB60 Offset: 0x2DC360 VA: 0x1802DDB60 Slot: 5
	public object Deserialize(Stream serializationStream, HeaderHandler handler) { }
	// RVA: 0x2DDB80 Offset: 0x2DC380 VA: 0x1802DDB80 Slot: 6
	public void Serialize(Stream serializationStream, object graph) { }
	// RVA: 0x2DDBA0 Offset: 0x2DC3A0 VA: 0x1802DDBA0 Slot: 7
	public void Serialize(Stream serializationStream, object graph, Header[] headers) { }
	// RVA: 0x2DDBC0 Offset: 0x2DC3C0 VA: 0x1802DDBC0
	internal void Serialize(Stream serializationStream, object graph, Header[] headers, bool fCheck) { }
	// RVA: 0x2DDEF0 Offset: 0x2DC6F0 VA: 0x1802DDEF0
	internal static TypeInformation GetTypeInformation(Type type) { }
	// RVA: 0x2DE280 Offset: 0x2DCA80 VA: 0x1802DE280
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class __BinaryWriter // TypeDefIndex: 814
{
	// Fields
	internal Stream sout; // 0x10
	internal FormatterTypeStyle formatterTypeStyle; // 0x18
	internal Hashtable objectMapTable; // 0x20
	internal ObjectWriter objectWriter; // 0x28
	internal BinaryWriter dataWriter; // 0x30
	internal int m_nestedObjectCount; // 0x38
	private int nullCount; // 0x3C
	internal BinaryMethodCall binaryMethodCall; // 0x40
	internal BinaryMethodReturn binaryMethodReturn; // 0x48
	internal BinaryObject binaryObject; // 0x50
	internal BinaryObjectWithMap binaryObjectWithMap; // 0x58
	internal BinaryObjectWithMapTyped binaryObjectWithMapTyped; // 0x60
	internal BinaryObjectString binaryObjectString; // 0x68
	internal BinaryArray binaryArray; // 0x70
	private byte[] byteBuffer; // 0x78
	private int chunkSize; // 0x80
	internal MemberPrimitiveUnTyped memberPrimitiveUnTyped; // 0x88
	internal MemberPrimitiveTyped memberPrimitiveTyped; // 0x90
	internal ObjectNull objectNull; // 0x98
	internal MemberReference memberReference; // 0xA0
	internal BinaryAssembly binaryAssembly; // 0xA8

	// Methods
	// RVA: 0x265A20 Offset: 0x264220 VA: 0x180265A20
	internal void .ctor(Stream sout, ObjectWriter objectWriter, FormatterTypeStyle formatterTypeStyle) { }
	// RVA: 0x265C50 Offset: 0x264450 VA: 0x180265C50
	internal void WriteEnd() { }
	// RVA: 0x265C80 Offset: 0x264480 VA: 0x180265C80
	internal void WriteBoolean(bool value) { }
	// RVA: 0x265CB0 Offset: 0x2644B0 VA: 0x180265CB0
	internal void WriteByte(byte value) { }
	// RVA: 0x265CE0 Offset: 0x2644E0 VA: 0x180265CE0
	private void WriteBytes(byte[] value) { }
	// RVA: 0x265D10 Offset: 0x264510 VA: 0x180265D10
	private void WriteBytes(byte[] byteA, int offset, int size) { }
	// RVA: 0x265D40 Offset: 0x264540 VA: 0x180265D40
	internal void WriteChar(char value) { }
	// RVA: 0x265D70 Offset: 0x264570 VA: 0x180265D70
	internal void WriteChars(char[] value) { }
	// RVA: 0x265DA0 Offset: 0x2645A0 VA: 0x180265DA0
	internal void WriteDecimal(Decimal value) { }
	// RVA: 0x265E80 Offset: 0x264680 VA: 0x180265E80
	internal void WriteSingle(float value) { }
	// RVA: 0x265EB0 Offset: 0x2646B0 VA: 0x180265EB0
	internal void WriteDouble(double value) { }
	// RVA: 0x265EE0 Offset: 0x2646E0 VA: 0x180265EE0
	internal void WriteInt16(short value) { }
	// RVA: 0x265F10 Offset: 0x264710 VA: 0x180265F10
	internal void WriteInt32(int value) { }
	// RVA: 0x265F40 Offset: 0x264740 VA: 0x180265F40
	internal void WriteInt64(long value) { }
	// RVA: 0x265CB0 Offset: 0x2644B0 VA: 0x180265CB0
	internal void WriteSByte(sbyte value) { }
	// RVA: 0x265F70 Offset: 0x264770 VA: 0x180265F70
	internal void WriteString(string value) { }
	// RVA: 0x265F40 Offset: 0x264740 VA: 0x180265F40
	internal void WriteTimeSpan(TimeSpan value) { }
	// RVA: 0x265F40 Offset: 0x264740 VA: 0x180265F40
	internal void WriteDateTime(DateTime value) { }
	// RVA: 0x265FA0 Offset: 0x2647A0 VA: 0x180265FA0
	internal void WriteUInt16(ushort value) { }
	// RVA: 0x265FD0 Offset: 0x2647D0 VA: 0x180265FD0
	internal void WriteUInt32(uint value) { }
	// RVA: 0x266000 Offset: 0x264800 VA: 0x180266000
	internal void WriteUInt64(ulong value) { }
	// RVA: 0x266030 Offset: 0x264830 VA: 0x180266030
	internal void WriteSerializationHeaderEnd() { }
	// RVA: 0x2660D0 Offset: 0x2648D0 VA: 0x1802660D0
	internal void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion) { }
	// RVA: 0x266240 Offset: 0x264A40 VA: 0x180266240
	internal void WriteMethodCall() { }
	// RVA: 0x2662E0 Offset: 0x264AE0 VA: 0x1802662E0
	internal void WriteMethodReturn() { }
	// RVA: 0x266380 Offset: 0x264B80 VA: 0x180266380
	internal void WriteObject(NameInfo nameInfo, NameInfo typeNameInfo, int numMembers, string[] memberNames, Type[] memberTypes, WriteObjectInfo[] memberObjectInfos) { }
	// RVA: 0x266AB0 Offset: 0x2652B0 VA: 0x180266AB0
	internal void WriteObjectString(int objectId, string value) { }
	// RVA: 0x266BD0 Offset: 0x2653D0 VA: 0x180266BD0
	internal void WriteSingleArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound, Array array) { }
	// RVA: 0x266F60 Offset: 0x265760 VA: 0x180266F60
	private void WriteArrayAsBytes(Array array, int typeLength) { }
	// RVA: 0x267230 Offset: 0x265A30 VA: 0x180267230
	internal void WriteJaggedArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound) { }
	// RVA: 0x267460 Offset: 0x265C60 VA: 0x180267460
	internal void WriteRectangleArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int rank, int[] lengthA, int[] lowerBoundA) { }
	// RVA: 0x267660 Offset: 0x265E60 VA: 0x180267660
	internal void WriteObjectByteArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound, byte[] byteA) { }
	// RVA: 0x2676C0 Offset: 0x265EC0 VA: 0x1802676C0
	internal void WriteMember(NameInfo memberNameInfo, NameInfo typeNameInfo, object value) { }
	// RVA: 0x267850 Offset: 0x266050 VA: 0x180267850
	internal void WriteNullMember(NameInfo memberNameInfo, NameInfo typeNameInfo) { }
	// RVA: 0x267940 Offset: 0x266140 VA: 0x180267940
	internal void WriteMemberObjectRef(NameInfo memberNameInfo, int idRef) { }
	// RVA: 0x267A50 Offset: 0x266250 VA: 0x180267A50
	internal void WriteMemberNested(NameInfo memberNameInfo) { }
	// RVA: 0x267A80 Offset: 0x266280 VA: 0x180267A80
	internal void WriteMemberString(NameInfo memberNameInfo, NameInfo typeNameInfo, string value) { }
	// RVA: 0x267AE0 Offset: 0x2662E0 VA: 0x180267AE0
	internal void WriteItem(NameInfo itemNameInfo, NameInfo typeNameInfo, object value) { }
	// RVA: 0x267B40 Offset: 0x266340 VA: 0x180267B40
	internal void WriteNullItem(NameInfo itemNameInfo, NameInfo typeNameInfo) { }
	// RVA: 0x267B50 Offset: 0x266350 VA: 0x180267B50
	internal void WriteDelayedNullItem() { }
	// RVA: 0x267B60 Offset: 0x266360 VA: 0x180267B60
	internal void WriteItemEnd() { }
	// RVA: 0x267B70 Offset: 0x266370 VA: 0x180267B70
	private void InternalWriteItemNull() { }
	// RVA: 0x267C30 Offset: 0x266430 VA: 0x180267C30
	internal void WriteItemObjectRef(NameInfo nameInfo, int idRef) { }
	// RVA: 0x267C70 Offset: 0x266470 VA: 0x180267C70
	internal void WriteAssembly(Type type, string assemblyString, int assemId, bool isNew) { }
	// RVA: 0x267DB0 Offset: 0x2665B0 VA: 0x180267DB0
	internal void WriteValue(InternalPrimitiveTypeE code, object value) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectMapInfo // TypeDefIndex: 815
{
	// Fields
	internal int objectId; // 0x10
	private int numMembers; // 0x14
	private string[] memberNames; // 0x18
	private Type[] memberTypes; // 0x20

	// Methods
	// RVA: 0x307AA0 Offset: 0x3062A0 VA: 0x180307AA0
	internal void .ctor(int objectId, int numMembers, string[] memberNames, Type[] memberTypes) { }
	// RVA: 0x307AC0 Offset: 0x3062C0 VA: 0x180307AC0
	internal bool isCompatible(int numMembers, string[] memberNames, Type[] memberTypes) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class WriteObjectInfo // TypeDefIndex: 816
{
	// Fields
	internal int objectInfoId; // 0x10
	internal object obj; // 0x18
	internal Type objectType; // 0x20
	internal bool isSi; // 0x28
	internal bool isNamed; // 0x29
	internal bool isTyped; // 0x2A
	internal bool isArray; // 0x2B
	internal SerializationInfo si; // 0x30
	internal SerObjectInfoCache cache; // 0x38
	internal object[] memberData; // 0x40
	internal ISerializationSurrogate serializationSurrogate; // 0x48
	internal StreamingContext context; // 0x50
	internal SerObjectInfoInit serObjectInfoInit; // 0x60
	internal long objectId; // 0x68
	internal long assemId; // 0x70
	private string binderTypeName; // 0x78
	private string binderAssemblyString; // 0x80

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x41E250 Offset: 0x41CA50 VA: 0x18041E250
	internal void ObjectEnd() { }
	// RVA: 0x41E280 Offset: 0x41CA80 VA: 0x18041E280
	private void InternalInit() { }
	// RVA: 0x41E2B0 Offset: 0x41CAB0 VA: 0x18041E2B0
	internal static WriteObjectInfo Serialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder) { }
	// RVA: 0x41E360 Offset: 0x41CB60 VA: 0x18041E360
	internal void InitSerialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder) { }
	// RVA: 0x41EA30 Offset: 0x41D230 VA: 0x18041EA30
	internal static WriteObjectInfo Serialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder) { }
	// RVA: 0x41EAD0 Offset: 0x41D2D0 VA: 0x18041EAD0
	internal void InitSerialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder) { }
	// RVA: 0x41EFB0 Offset: 0x41D7B0 VA: 0x18041EFB0
	private void InitSiWrite() { }
	// RVA: 0x41F510 Offset: 0x41DD10 VA: 0x18041F510
	private static void CheckTypeForwardedFrom(SerObjectInfoCache cache, Type objectType, string binderAssemblyString) { }
	// RVA: 0x41F620 Offset: 0x41DE20 VA: 0x18041F620
	private void InitNoMembers() { }
	// RVA: 0x41F750 Offset: 0x41DF50 VA: 0x18041F750
	private void InitMemberInfo() { }
	// RVA: 0x41FBD0 Offset: 0x41E3D0 VA: 0x18041FBD0
	internal string GetTypeFullName() { }
	// RVA: 0x41FC00 Offset: 0x41E400 VA: 0x18041FC00
	internal string GetAssemblyString() { }
	// RVA: 0x41FC30 Offset: 0x41E430 VA: 0x18041FC30
	private void InvokeSerializationBinder(SerializationBinder binder) { }
	// RVA: 0x41FC70 Offset: 0x41E470 VA: 0x18041FC70
	internal Type GetMemberType(MemberInfo objMember) { }
	// RVA: 0x41FF20 Offset: 0x41E720 VA: 0x18041FF20
	internal void GetMemberInfo(out string[] outMemberNames, out Type[] outMemberTypes, out object[] outMemberData) { }
	// RVA: 0x420030 Offset: 0x41E830 VA: 0x180420030
	private static WriteObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit) { }
	// RVA: 0x420150 Offset: 0x41E950 VA: 0x180420150
	private static void PutObjectInfo(SerObjectInfoInit serObjectInfoInit, WriteObjectInfo objectInfo) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ReadObjectInfo // TypeDefIndex: 817
{
	// Fields
	internal int objectInfoId; // 0x10
	internal static int readObjectInfoCounter; // 0x0
	internal Type objectType; // 0x18
	internal ObjectManager objectManager; // 0x20
	internal int count; // 0x28
	internal bool isSi; // 0x2C
	internal bool isNamed; // 0x2D
	internal bool isTyped; // 0x2E
	internal bool bSimpleAssembly; // 0x2F
	internal SerObjectInfoCache cache; // 0x30
	internal string[] wireMemberNames; // 0x38
	internal Type[] wireMemberTypes; // 0x40
	private int lastPosition; // 0x48
	internal ISerializationSurrogate serializationSurrogate; // 0x50
	internal StreamingContext context; // 0x58
	internal List<Type> memberTypesList; // 0x68
	internal SerObjectInfoInit serObjectInfoInit; // 0x70
	internal IFormatterConverter formatterConverter; // 0x78

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x31FB90 Offset: 0x31E390 VA: 0x18031FB90
	internal void PrepareForReuse() { }
	// RVA: 0x31FBA0 Offset: 0x31E3A0 VA: 0x18031FBA0
	internal static ReadObjectInfo Create(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly) { }
	// RVA: 0x31FC50 Offset: 0x31E450 VA: 0x18031FC50
	internal void Init(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly) { }
	// RVA: 0x31FCB0 Offset: 0x31E4B0 VA: 0x18031FCB0
	internal static ReadObjectInfo Create(Type objectType, string[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly) { }
	// RVA: 0x31FD90 Offset: 0x31E590 VA: 0x18031FD90
	internal void Init(Type objectType, string[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly) { }
	// RVA: 0x31FE20 Offset: 0x31E620 VA: 0x18031FE20
	private void InitReadConstructor(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context) { }
	// RVA: 0x320140 Offset: 0x31E940 VA: 0x180320140
	private void InitSiRead() { }
	// RVA: 0x320220 Offset: 0x31EA20 VA: 0x180320220
	private void InitNoMembers() { }
	// RVA: 0x3202C0 Offset: 0x31EAC0 VA: 0x1803202C0
	private void InitMemberInfo() { }
	// RVA: 0x320660 Offset: 0x31EE60 VA: 0x180320660
	internal MemberInfo GetMemberInfo(string name) { }
	// RVA: 0x3208A0 Offset: 0x31F0A0 VA: 0x1803208A0
	internal Type GetType(string name) { }
	// RVA: 0x320A40 Offset: 0x31F240 VA: 0x180320A40
	internal void AddValue(string name, object value, ref SerializationInfo si, ref object[] memberData) { }
	// RVA: 0x320AF0 Offset: 0x31F2F0 VA: 0x180320AF0
	internal void InitDataStore(ref SerializationInfo si, ref object[] memberData) { }
	// RVA: 0x320C00 Offset: 0x31F400 VA: 0x180320C00
	internal void RecordFixup(long objectId, string name, long idRef) { }
	// RVA: 0x320CD0 Offset: 0x31F4D0 VA: 0x180320CD0
	internal void PopulateObjectMembers(object obj, object[] memberData) { }
	// RVA: 0x320DA0 Offset: 0x31F5A0 VA: 0x180320DA0
	private int Position(string name) { }
	// RVA: 0x320F60 Offset: 0x31F760 VA: 0x180320F60
	internal Type[] GetMemberTypes(string[] inMemberNames, Type objectType) { }
	// RVA: 0x321640 Offset: 0x31FE40 VA: 0x180321640
	internal Type GetMemberType(MemberInfo objMember) { }
	// RVA: 0x3218F0 Offset: 0x3200F0 VA: 0x1803218F0
	private static ReadObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class SerObjectInfoInit // TypeDefIndex: 818
{
	// Fields
	internal Hashtable seenBeforeTable; // 0x10
	internal int objectInfoIdCount; // 0x18
	internal SerStack oiPool; // 0x20

	// Methods
	// RVA: 0x1D1D50 Offset: 0x1D0550 VA: 0x1801D1D50
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class SerObjectInfoCache // TypeDefIndex: 819
{
	// Fields
	internal string fullTypeName; // 0x10
	internal string assemblyString; // 0x18
	internal bool hasTypeForwardedFrom; // 0x20
	internal MemberInfo[] memberInfos; // 0x28
	internal string[] memberNames; // 0x30
	internal Type[] memberTypes; // 0x38

	// Methods
	// RVA: 0x1D1C80 Offset: 0x1D0480 VA: 0x1801D1C80
	internal void .ctor(string typeName, string assemblyName, bool hasTypeForwardedFrom) { }
	// RVA: 0x1D1C90 Offset: 0x1D0490 VA: 0x1801D1C90
	internal void .ctor(Type type) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class TypeInformation // TypeDefIndex: 820
{
	// Fields
	private string fullTypeName; // 0x10
	private string assemblyString; // 0x18
	private bool hasTypeForwardedFrom; // 0x20

	// Methods
	// RVA: 0x1D1C80 Offset: 0x1D0480 VA: 0x1801D1C80
	internal void .ctor(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectReader // TypeDefIndex: 821
{
	// Fields
	internal Stream m_stream; // 0x10
	internal ISurrogateSelector m_surrogates; // 0x18
	internal StreamingContext m_context; // 0x20
	internal ObjectManager m_objectManager; // 0x30
	internal InternalFE formatterEnums; // 0x38
	internal SerializationBinder m_binder; // 0x40
	internal long topId; // 0x48
	internal bool bSimpleAssembly; // 0x50
	internal object handlerObject; // 0x58
	internal object m_topObject; // 0x60
	internal Header[] headers; // 0x68
	internal HeaderHandler handler; // 0x70
	internal SerObjectInfoInit serObjectInfoInit; // 0x78
	internal IFormatterConverter m_formatterConverter; // 0x80
	internal SerStack stack; // 0x88
	private SerStack valueFixupStack; // 0x90
	internal object[] crossAppDomainArray; // 0x98
	private bool bFullDeserialization; // 0xA0
	private bool bOldFormatDetected; // 0xA1
	private IntSizedArray valTypeObjectIdTable; // 0xA8
	private NameCache typeCache; // 0xB0
	private string previousAssemblyString; // 0xB8
	private string previousName; // 0xC0
	private Type previousType; // 0xC8

	// Properties
	private SerStack ValueFixupStack { get; }
	internal object TopObject { set; }

	// Methods
	// RVA: 0x308090 Offset: 0x306890 VA: 0x180308090
	private SerStack get_ValueFixupStack() { }
	// RVA: 0x308140 Offset: 0x306940 VA: 0x180308140
	internal void set_TopObject(object value) { }
	// RVA: 0x308160 Offset: 0x306960 VA: 0x180308160
	internal void .ctor(Stream stream, ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder) { }
	// RVA: 0x308270 Offset: 0x306A70 VA: 0x180308270
	internal object Deserialize(HeaderHandler handler, __BinaryParser serParser, bool fCheck) { }
	// RVA: 0x308630 Offset: 0x306E30 VA: 0x180308630
	private bool HasSurrogate(Type t) { }
	// RVA: 0x308760 Offset: 0x306F60 VA: 0x180308760
	private void CheckSerializable(Type t) { }
	// RVA: 0x3088F0 Offset: 0x3070F0 VA: 0x1803088F0
	private void InitFullDeserialization() { }
	// RVA: 0x308A60 Offset: 0x307260 VA: 0x180308A60
	internal object CrossAppDomainArray(int index) { }
	// RVA: 0x308AA0 Offset: 0x3072A0 VA: 0x180308AA0
	internal ReadObjectInfo CreateReadObjectInfo(Type objectType) { }
	// RVA: 0x308B60 Offset: 0x307360 VA: 0x180308B60
	internal ReadObjectInfo CreateReadObjectInfo(Type objectType, string[] memberNames, Type[] memberTypes) { }
	// RVA: 0x308C50 Offset: 0x307450 VA: 0x180308C50
	internal void Parse(ParseRecord pr) { }
	// RVA: 0x308F10 Offset: 0x307710 VA: 0x180308F10
	private void ParseError(ParseRecord processing, ParseRecord onStack) { }
	// RVA: 0x309160 Offset: 0x307960 VA: 0x180309160
	private void ParseSerializedStreamHeader(ParseRecord pr) { }
	// RVA: 0x309190 Offset: 0x307990 VA: 0x180309190
	private void ParseSerializedStreamHeaderEnd(ParseRecord pr) { }
	// RVA: 0x3091C0 Offset: 0x3079C0 VA: 0x1803091C0
	private void ParseObject(ParseRecord pr) { }
	// RVA: 0x3095E0 Offset: 0x307DE0 VA: 0x1803095E0
	private void ParseObjectEnd(ParseRecord pr) { }
	// RVA: 0x309B10 Offset: 0x308310 VA: 0x180309B10
	private void ParseArray(ParseRecord pr) { }
	// RVA: 0x30A420 Offset: 0x308C20 VA: 0x18030A420
	private void NextRectangleMap(ParseRecord pr) { }
	// RVA: 0x30A530 Offset: 0x308D30 VA: 0x18030A530
	private void ParseArrayMember(ParseRecord pr) { }
	// RVA: 0x30B330 Offset: 0x309B30 VA: 0x18030B330
	private void ParseArrayMemberEnd(ParseRecord pr) { }
	// RVA: 0x30B360 Offset: 0x309B60 VA: 0x18030B360
	private void ParseMember(ParseRecord pr) { }
	// RVA: 0x30BB30 Offset: 0x30A330 VA: 0x18030BB30
	private void ParseMemberEnd(ParseRecord pr) { }
	// RVA: 0x30BC20 Offset: 0x30A420 VA: 0x18030BC20
	private void ParseString(ParseRecord pr, ParseRecord parentPr) { }
	// RVA: 0x30BC70 Offset: 0x30A470 VA: 0x18030BC70
	private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr) { }
	// RVA: 0x30BC90 Offset: 0x30A490 VA: 0x18030BC90
	private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr, bool bIsString) { }
	// RVA: 0x30BF70 Offset: 0x30A770 VA: 0x18030BF70
	internal long GetId(long objectId) { }
	// RVA: 0x30C220 Offset: 0x30AA20 VA: 0x18030C220
	internal Type Bind(string assemblyString, string typeString) { }
	// RVA: 0x30C280 Offset: 0x30AA80 VA: 0x18030C280
	internal Type FastBindToType(string assemblyName, string typeName) { }
	// RVA: 0x30C580 Offset: 0x30AD80 VA: 0x18030C580
	private static Assembly ResolveSimpleAssemblyName(AssemblyName assemblyName) { }
	// RVA: 0x30C5E0 Offset: 0x30ADE0 VA: 0x18030C5E0
	private static void GetSimplyNamedTypeFromAssembly(Assembly assm, string typeName, ref Type type) { }
	// RVA: 0x30C770 Offset: 0x30AF70 VA: 0x18030C770
	internal Type GetType(BinaryAssemblyInfo assemblyInfo, string name) { }
	// RVA: 0x30CAA0 Offset: 0x30B2A0 VA: 0x18030CAA0
	private static void CheckTypeForwardedTo(Assembly sourceAssembly, Assembly destAssembly, Type resolvedType) { }
}

// Namespace: 
internal class ObjectReader.TypeNAssembly // TypeDefIndex: 822
{
	// Fields
	public Type type; // 0x10
	public string assemblyName; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
internal sealed class ObjectReader.TopLevelAssemblyTypeResolver // TypeDefIndex: 823
{
	// Fields
	private Assembly m_topLevelAssembly; // 0x10

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(Assembly topLevelAssembly) { }
	// RVA: 0x273E10 Offset: 0x272610 VA: 0x180273E10
	public Type ResolveType(Assembly assembly, string simpleTypeName, bool ignoreCase) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ObjectWriter // TypeDefIndex: 824
{
	// Fields
	private Queue m_objectQueue; // 0x10
	private ObjectIDGenerator m_idGenerator; // 0x18
	private int m_currentId; // 0x20
	private ISurrogateSelector m_surrogates; // 0x28
	private StreamingContext m_context; // 0x30
	private __BinaryWriter serWriter; // 0x40
	private SerializationObjectManager m_objectManager; // 0x48
	private long topId; // 0x50
	private string topName; // 0x58
	private Header[] headers; // 0x60
	private InternalFE formatterEnums; // 0x68
	private SerializationBinder m_binder; // 0x70
	private SerObjectInfoInit serObjectInfoInit; // 0x78
	private IFormatterConverter m_formatterConverter; // 0x80
	internal object[] crossAppDomainArray; // 0x88
	private object previousObj; // 0x90
	private long previousId; // 0x98
	private Type previousType; // 0xA0
	private InternalPrimitiveTypeE previousCode; // 0xA8
	private Hashtable assemblyToIdTable; // 0xB0
	private SerStack niPool; // 0xB8

	// Methods
	// RVA: 0x30CBF0 Offset: 0x30B3F0 VA: 0x18030CBF0
	internal void .ctor(ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder) { }
	// RVA: 0x30CD90 Offset: 0x30B590 VA: 0x18030CD90
	internal void Serialize(object graph, Header[] inHeaders, __BinaryWriter serWriter, bool fCheck) { }
	// RVA: 0x30D3B0 Offset: 0x30BBB0 VA: 0x18030D3B0
	private void Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo) { }
	// RVA: 0x30DD80 Offset: 0x30C580 VA: 0x18030DD80
	private void Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, string[] memberNames, Type[] memberTypes, object[] memberData, WriteObjectInfo[] memberObjectInfos) { }
	// RVA: 0x30E1D0 Offset: 0x30C9D0 VA: 0x18030E1D0
	private void WriteMemberSetup(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, string memberName, Type memberType, object memberData, WriteObjectInfo memberObjectInfo) { }
	// RVA: 0x30E320 Offset: 0x30CB20 VA: 0x18030E320
	private void WriteMembers(NameInfo memberNameInfo, NameInfo memberTypeNameInfo, object memberData, WriteObjectInfo objectInfo, NameInfo typeNameInfo, WriteObjectInfo memberObjectInfo) { }
	// RVA: 0x30E990 Offset: 0x30D190 VA: 0x18030E990
	private void WriteArray(WriteObjectInfo objectInfo, NameInfo memberNameInfo, WriteObjectInfo memberObjectInfo) { }
	// RVA: 0x30F760 Offset: 0x30DF60 VA: 0x18030F760
	private void WriteArrayMember(WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, object data) { }
	// RVA: 0x30FB30 Offset: 0x30E330 VA: 0x18030FB30
	private void WriteRectangle(WriteObjectInfo objectInfo, int rank, int[] maxA, Array array, NameInfo arrayElemNameTypeInfo, int[] lowerBoundA) { }
	// RVA: 0x30FDE0 Offset: 0x30E5E0 VA: 0x18030FDE0
	private object GetNext(out long objID) { }
	// RVA: 0x30FFB0 Offset: 0x30E7B0 VA: 0x18030FFB0
	private long InternalGetId(object obj, bool assignUniqueIdToValueType, Type type, out bool isNew) { }
	// RVA: 0x3100A0 Offset: 0x30E8A0 VA: 0x1803100A0
	private long Schedule(object obj, bool assignUniqueIdToValueType, Type type) { }
	// RVA: 0x310120 Offset: 0x30E920 VA: 0x180310120
	private long Schedule(object obj, bool assignUniqueIdToValueType, Type type, WriteObjectInfo objectInfo) { }
	// RVA: 0x3101D0 Offset: 0x30E9D0 VA: 0x1803101D0
	private bool WriteKnownValueClass(NameInfo memberNameInfo, NameInfo typeNameInfo, object data) { }
	// RVA: 0x310310 Offset: 0x30EB10 VA: 0x180310310
	private void WriteObjectRef(NameInfo nameInfo, long objectId) { }
	// RVA: 0x310330 Offset: 0x30EB30 VA: 0x180310330
	private void WriteString(NameInfo memberNameInfo, NameInfo typeNameInfo, object stringObject) { }
	// RVA: 0x3104D0 Offset: 0x30ECD0 VA: 0x1803104D0
	private bool CheckForNull(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, object data) { }
	// RVA: 0x310670 Offset: 0x30EE70 VA: 0x180310670
	private void WriteSerializedStreamHeader(long topId, long headerId) { }
	// RVA: 0x3107E0 Offset: 0x30EFE0 VA: 0x1803107E0
	private NameInfo TypeToNameInfo(Type type, WriteObjectInfo objectInfo, InternalPrimitiveTypeE code, NameInfo nameInfo) { }
	// RVA: 0x3108A0 Offset: 0x30F0A0 VA: 0x1803108A0
	private NameInfo TypeToNameInfo(Type type) { }
	// RVA: 0x3108F0 Offset: 0x30F0F0 VA: 0x1803108F0
	private NameInfo TypeToNameInfo(WriteObjectInfo objectInfo) { }
	// RVA: 0x310990 Offset: 0x30F190 VA: 0x180310990
	private NameInfo TypeToNameInfo(WriteObjectInfo objectInfo, NameInfo nameInfo) { }
	// RVA: 0x310A70 Offset: 0x30F270 VA: 0x180310A70
	private void TypeToNameInfo(Type type, NameInfo nameInfo) { }
	// RVA: 0x310B00 Offset: 0x30F300 VA: 0x180310B00
	private NameInfo MemberToNameInfo(string name) { }
	// RVA: 0x310B30 Offset: 0x30F330 VA: 0x180310B30
	internal InternalPrimitiveTypeE ToCode(Type type) { }
	// RVA: 0x310C00 Offset: 0x30F400 VA: 0x180310C00
	private long GetAssemblyId(WriteObjectInfo objectInfo) { }
	// RVA: 0x310F90 Offset: 0x30F790 VA: 0x180310F90
	private Type GetType(object obj) { }
	// RVA: 0x310FB0 Offset: 0x30F7B0 VA: 0x180310FB0
	private NameInfo GetNameInfo() { }
	// RVA: 0x3110B0 Offset: 0x30F8B0 VA: 0x1803110B0
	private bool CheckTypeFormat(FormatterTypeStyle test, FormatterTypeStyle want) { }
	// RVA: 0x3110C0 Offset: 0x30F8C0 VA: 0x1803110C0
	private void PutNameInfo(NameInfo nameInfo) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class __BinaryParser // TypeDefIndex: 825
{
	// Fields
	internal ObjectReader objectReader; // 0x10
	internal Stream input; // 0x18
	internal long topId; // 0x20
	internal long headerId; // 0x28
	internal SizedArray objectMapIdTable; // 0x30
	internal SizedArray assemIdToAssemblyTable; // 0x38
	internal SerStack stack; // 0x40
	internal BinaryTypeEnum expectedType; // 0x48
	internal object expectedTypeInformation; // 0x50
	internal ParseRecord PRS; // 0x58
	private BinaryAssemblyInfo systemAssemblyInfo; // 0x60
	private BinaryReader dataReader; // 0x68
	private static Encoding encoding; // 0x0
	private SerStack opPool; // 0x70
	private BinaryObject binaryObject; // 0x78
	private BinaryObjectWithMap bowm; // 0x80
	private BinaryObjectWithMapTyped bowmt; // 0x88
	internal BinaryObjectString objectString; // 0x90
	internal BinaryCrossAppDomainString crossAppDomainString; // 0x98
	internal MemberPrimitiveTyped memberPrimitiveTyped; // 0xA0
	private byte[] byteBuffer; // 0xA8
	internal MemberPrimitiveUnTyped memberPrimitiveUnTyped; // 0xB0
	internal MemberReference memberReference; // 0xB8
	internal ObjectNull objectNull; // 0xC0
	internal static MessageEnd messageEnd; // 0x8

	// Properties
	internal BinaryAssemblyInfo SystemAssemblyInfo { get; }
	internal SizedArray ObjectMapIdTable { get; }
	internal SizedArray AssemIdToAssemblyTable { get; }
	internal ParseRecord prs { get; }

	// Methods
	// RVA: 0x420210 Offset: 0x41EA10 VA: 0x180420210
	internal void .ctor(Stream stream, ObjectReader objectReader) { }
	// RVA: 0x420340 Offset: 0x41EB40 VA: 0x180420340
	internal BinaryAssemblyInfo get_SystemAssemblyInfo() { }
	// RVA: 0x420420 Offset: 0x41EC20 VA: 0x180420420
	internal SizedArray get_ObjectMapIdTable() { }
	// RVA: 0x420540 Offset: 0x41ED40 VA: 0x180420540
	internal SizedArray get_AssemIdToAssemblyTable() { }
	// RVA: 0x420660 Offset: 0x41EE60 VA: 0x180420660
	internal ParseRecord get_prs() { }
	// RVA: 0x4206F0 Offset: 0x41EEF0 VA: 0x1804206F0
	internal void Run() { }
	// RVA: 0x420CC0 Offset: 0x41F4C0 VA: 0x180420CC0
	internal bool ReadBoolean() { }
	// RVA: 0x420CF0 Offset: 0x41F4F0 VA: 0x180420CF0
	internal byte ReadByte() { }
	// RVA: 0x420D20 Offset: 0x41F520 VA: 0x180420D20
	internal byte[] ReadBytes(int length) { }
	// RVA: 0x420D50 Offset: 0x41F550 VA: 0x180420D50
	internal void ReadBytes(byte[] byteA, int offset, int size) { }
	// RVA: 0x420DD0 Offset: 0x41F5D0 VA: 0x180420DD0
	internal char ReadChar() { }
	// RVA: 0x420E00 Offset: 0x41F600 VA: 0x180420E00
	internal char[] ReadChars(int length) { }
	// RVA: 0x420E30 Offset: 0x41F630 VA: 0x180420E30
	internal Decimal ReadDecimal() { }
	// RVA: 0x420F50 Offset: 0x41F750 VA: 0x180420F50
	internal float ReadSingle() { }
	// RVA: 0x420F80 Offset: 0x41F780 VA: 0x180420F80
	internal double ReadDouble() { }
	// RVA: 0x420FB0 Offset: 0x41F7B0 VA: 0x180420FB0
	internal short ReadInt16() { }
	// RVA: 0x420FE0 Offset: 0x41F7E0 VA: 0x180420FE0
	internal int ReadInt32() { }
	// RVA: 0x421010 Offset: 0x41F810 VA: 0x180421010
	internal long ReadInt64() { }
	// RVA: 0x420CF0 Offset: 0x41F4F0 VA: 0x180420CF0
	internal sbyte ReadSByte() { }
	// RVA: 0x421040 Offset: 0x41F840 VA: 0x180421040
	internal string ReadString() { }
	// RVA: 0x421010 Offset: 0x41F810 VA: 0x180421010
	internal TimeSpan ReadTimeSpan() { }
	// RVA: 0x421070 Offset: 0x41F870 VA: 0x180421070
	internal DateTime ReadDateTime() { }
	// RVA: 0x4211F0 Offset: 0x41F9F0 VA: 0x1804211F0
	internal ushort ReadUInt16() { }
	// RVA: 0x421220 Offset: 0x41FA20 VA: 0x180421220
	internal uint ReadUInt32() { }
	// RVA: 0x421250 Offset: 0x41FA50 VA: 0x180421250
	internal ulong ReadUInt64() { }
	// RVA: 0x421280 Offset: 0x41FA80 VA: 0x180421280
	internal void ReadSerializationHeaderRecord() { }
	// RVA: 0x421360 Offset: 0x41FB60 VA: 0x180421360
	internal void ReadAssembly(BinaryHeaderEnum binaryHeaderEnum) { }
	// RVA: 0x421630 Offset: 0x41FE30 VA: 0x180421630
	private void ReadObject() { }
	// RVA: 0x421AF0 Offset: 0x4202F0 VA: 0x180421AF0
	internal void ReadCrossAppDomainMap() { }
	// RVA: 0x421CF0 Offset: 0x4204F0 VA: 0x180421CF0
	internal void ReadObjectWithMap(BinaryHeaderEnum binaryHeaderEnum) { }
	// RVA: 0x421DC0 Offset: 0x4205C0 VA: 0x180421DC0
	private void ReadObjectWithMap(BinaryObjectWithMap record) { }
	// RVA: 0x422400 Offset: 0x420C00 VA: 0x180422400
	internal void ReadObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum) { }
	// RVA: 0x4224D0 Offset: 0x420CD0 VA: 0x1804224D0
	private void ReadObjectWithMapTyped(BinaryObjectWithMapTyped record) { }
	// RVA: 0x422B50 Offset: 0x421350 VA: 0x180422B50
	private void ReadObjectString(BinaryHeaderEnum binaryHeaderEnum) { }
	// RVA: 0x4231F0 Offset: 0x4219F0 VA: 0x1804231F0
	private void ReadMemberPrimitiveTyped() { }
	// RVA: 0x4235F0 Offset: 0x421DF0 VA: 0x1804235F0
	private void ReadArray(BinaryHeaderEnum binaryHeaderEnum) { }
	// RVA: 0x423CB0 Offset: 0x4224B0 VA: 0x180423CB0
	private void ReadArrayAsBytes(ParseRecord pr) { }
	// RVA: 0x424100 Offset: 0x422900 VA: 0x180424100
	private void ReadMemberPrimitiveUnTyped() { }
	// RVA: 0x424400 Offset: 0x422C00 VA: 0x180424400
	private void ReadMemberReference() { }
	// RVA: 0x424650 Offset: 0x422E50 VA: 0x180424650
	private void ReadObjectNull(BinaryHeaderEnum binaryHeaderEnum) { }
	// RVA: 0x424900 Offset: 0x423100 VA: 0x180424900
	private void ReadMessageEnd() { }
	// RVA: 0x424A50 Offset: 0x423250 VA: 0x180424A50
	internal object ReadValue(InternalPrimitiveTypeE code) { }
	// RVA: 0x425090 Offset: 0x423890 VA: 0x180425090
	private ObjectProgress GetOp() { }
	// RVA: 0x425240 Offset: 0x423A40 VA: 0x180425240
	private void PutOp(ObjectProgress op) { }
	// RVA: 0x425310 Offset: 0x423B10 VA: 0x180425310
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ParseRecord // TypeDefIndex: 826
{
	// Fields
	internal static int parseRecordIdCount; // 0x0
	internal InternalParseTypeE PRparseTypeEnum; // 0x10
	internal InternalObjectTypeE PRobjectTypeEnum; // 0x14
	internal InternalArrayTypeE PRarrayTypeEnum; // 0x18
	internal InternalMemberTypeE PRmemberTypeEnum; // 0x1C
	internal InternalMemberValueE PRmemberValueEnum; // 0x20
	internal InternalObjectPositionE PRobjectPositionEnum; // 0x24
	internal string PRname; // 0x28
	internal string PRvalue; // 0x30
	internal object PRvarValue; // 0x38
	internal string PRkeyDt; // 0x40
	internal Type PRdtType; // 0x48
	internal InternalPrimitiveTypeE PRdtTypeCode; // 0x50
	internal bool PRisEnum; // 0x54
	internal long PRobjectId; // 0x58
	internal long PRidRef; // 0x60
	internal string PRarrayElementTypeString; // 0x68
	internal Type PRarrayElementType; // 0x70
	internal bool PRisArrayVariant; // 0x78
	internal InternalPrimitiveTypeE PRarrayElementTypeCode; // 0x7C
	internal int PRrank; // 0x80
	internal int[] PRlengthA; // 0x88
	internal int[] PRpositionA; // 0x90
	internal int[] PRlowerBoundA; // 0x98
	internal int[] PRupperBoundA; // 0xA0
	internal int[] PRindexMap; // 0xA8
	internal int PRmemberIndex; // 0xB0
	internal int PRlinearlength; // 0xB4
	internal int[] PRrectangularMap; // 0xB8
	internal bool PRisLowerBound; // 0xC0
	internal long PRtopId; // 0xC8
	internal long PRheaderId; // 0xD0
	internal ReadObjectInfo PRobjectInfo; // 0xD8
	internal bool PRisValueTypeFixup; // 0xE0
	internal object PRnewObj; // 0xE8
	internal object[] PRobjectA; // 0xF0
	internal PrimitiveArray PRprimitiveArray; // 0xF8
	internal bool PRisRegistered; // 0x100
	internal object[] PRmemberData; // 0x108
	internal SerializationInfo PRsi; // 0x110
	internal int PRnullCount; // 0x118

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x3169C0 Offset: 0x3151C0 VA: 0x1803169C0
	internal void Init() { }
	// RVA: 0x316A80 Offset: 0x315280 VA: 0x180316A80
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class SerStack // TypeDefIndex: 827
{
	// Fields
	internal object[] objects; // 0x10
	internal string stackId; // 0x18
	internal int top; // 0x20

	// Methods
	// RVA: 0x1D1E20 Offset: 0x1D0620 VA: 0x1801D1E20
	internal void .ctor(string stackId) { }
	// RVA: 0x1D1EC0 Offset: 0x1D06C0 VA: 0x1801D1EC0
	internal void Push(object obj) { }
	// RVA: 0x1D2010 Offset: 0x1D0810 VA: 0x1801D2010
	internal object Pop() { }
	// RVA: 0x1D2080 Offset: 0x1D0880 VA: 0x1801D2080
	internal void IncreaseCapacity() { }
	// RVA: 0x1D2150 Offset: 0x1D0950 VA: 0x1801D2150
	internal object Peek() { }
	// RVA: 0x1D21A0 Offset: 0x1D09A0 VA: 0x1801D21A0
	internal object PeekPeek() { }
	// RVA: 0x1D21F0 Offset: 0x1D09F0 VA: 0x1801D21F0
	internal bool IsEmpty() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
internal sealed class SizedArray : ICloneable // TypeDefIndex: 828
{
	// Fields
	internal object[] objects; // 0x10
	internal object[] negObjects; // 0x18

	// Properties
	internal object Item { get; set; }

	// Methods
	// RVA: 0x1DFE60 Offset: 0x1DE660 VA: 0x1801DFE60
	internal void .ctor() { }
	// RVA: 0x1DFF00 Offset: 0x1DE700 VA: 0x1801DFF00
	internal void .ctor(int length) { }
	// RVA: 0x1DFFA0 Offset: 0x1DE7A0 VA: 0x1801DFFA0
	private void .ctor(SizedArray sizedArray) { }
	// RVA: 0x1E0090 Offset: 0x1DE890 VA: 0x1801E0090 Slot: 4
	public object Clone() { }
	// RVA: 0x1E01F0 Offset: 0x1DE9F0 VA: 0x1801E01F0
	internal object get_Item(int index) { }
	// RVA: 0x1E0270 Offset: 0x1DEA70 VA: 0x1801E0270
	internal void set_Item(int index, object value) { }
	// RVA: 0x1E03C0 Offset: 0x1DEBC0 VA: 0x1801E03C0
	internal void IncreaseCapacity(int index) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
internal sealed class IntSizedArray : ICloneable // TypeDefIndex: 829
{
	// Fields
	internal int[] objects; // 0x10
	internal int[] negObjects; // 0x18

	// Properties
	internal int Item { get; set; }

	// Methods
	// RVA: 0x778D30 Offset: 0x777530 VA: 0x180778D30
	public void .ctor() { }
	// RVA: 0x778DD0 Offset: 0x7775D0 VA: 0x180778DD0
	private void .ctor(IntSizedArray sizedArray) { }
	// RVA: 0x778EE0 Offset: 0x7776E0 VA: 0x180778EE0 Slot: 4
	public object Clone() { }
	// RVA: 0x779070 Offset: 0x777870 VA: 0x180779070
	internal int get_Item(int index) { }
	// RVA: 0x7790F0 Offset: 0x7778F0 VA: 0x1807790F0
	internal void set_Item(int index, int value) { }
	// RVA: 0x7791C0 Offset: 0x7779C0 VA: 0x1807791C0
	internal void IncreaseCapacity(int index) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class NameCache // TypeDefIndex: 830
{
	// Fields
	private static ConcurrentDictionary<string, object> ht; // 0x0
	private string name; // 0x10

	// Methods
	// RVA: 0x7458A0 Offset: 0x7440A0 VA: 0x1807458A0
	internal object GetCachedValue(string name) { }
	// RVA: 0x745A90 Offset: 0x744290 VA: 0x180745A90
	internal void SetCachedValue(object value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x745C90 Offset: 0x744490 VA: 0x180745C90
	private static void .cctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class ValueFixup // TypeDefIndex: 831
{
	// Fields
	internal ValueFixupEnum valueFixupEnum; // 0x10
	internal Array arrayObj; // 0x18
	internal int[] indexMap; // 0x20
	internal object header; // 0x28
	internal object memberObject; // 0x30
	internal static MemberInfo valueInfo; // 0x0
	internal ReadObjectInfo objectInfo; // 0x38
	internal string memberName; // 0x40

	// Methods
	// RVA: 0x418210 Offset: 0x416A10 VA: 0x180418210
	internal void .ctor(Array arrayObj, int[] indexMap) { }
	// RVA: 0x418220 Offset: 0x416A20 VA: 0x180418220
	internal void .ctor(object memberObject, string memberName, ReadObjectInfo objectInfo) { }
	// RVA: 0x418240 Offset: 0x416A40 VA: 0x180418240
	internal void Fixup(ParseRecord record, ParseRecord parent) { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class InternalFE // TypeDefIndex: 832
{
	// Fields
	internal FormatterTypeStyle FEtypeFormat; // 0x10
	internal FormatterAssemblyStyle FEassemblyFormat; // 0x14
	internal TypeFilterLevel FEsecurityLevel; // 0x18
	internal InternalSerializerTypeE FEserializerTypeEnum; // 0x1C

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class NameInfo // TypeDefIndex: 833
{
	// Fields
	internal string NIFullName; // 0x10
	internal long NIobjectId; // 0x18
	internal long NIassemId; // 0x20
	internal InternalPrimitiveTypeE NIprimitiveTypeEnum; // 0x28
	internal Type NItype; // 0x30
	internal bool NIisSealed; // 0x38
	internal bool NIisArray; // 0x39
	internal bool NIisArrayItem; // 0x3A
	internal bool NItransmitTypeOnObject; // 0x3B
	internal bool NItransmitTypeOnMember; // 0x3C
	internal bool NIisParentTypeOnObject; // 0x3D
	internal InternalArrayTypeE NIarrayEnum; // 0x40
	private bool NIsealedStatusChecked; // 0x44

	// Properties
	public bool IsSealed { get; }
	public string NIname { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x745D30 Offset: 0x744530 VA: 0x180745D30
	internal void Init() { }
	// RVA: 0x745D60 Offset: 0x744560 VA: 0x180745D60
	public bool get_IsSealed() { }
	// RVA: 0x745DB0 Offset: 0x7445B0 VA: 0x180745DB0
	public string get_NIname() { }
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal sealed class PrimitiveArray // TypeDefIndex: 834
{
	// Fields
	private InternalPrimitiveTypeE code; // 0x10
	private bool[] booleanA; // 0x18
	private char[] charA; // 0x20
	private double[] doubleA; // 0x28
	private short[] int16A; // 0x30
	private int[] int32A; // 0x38
	private long[] int64A; // 0x40
	private sbyte[] sbyteA; // 0x48
	private float[] singleA; // 0x50
	private ushort[] uint16A; // 0x58
	private uint[] uint32A; // 0x60
	private ulong[] uint64A; // 0x68

	// Methods
	// RVA: 0x31C130 Offset: 0x31A930 VA: 0x18031C130
	internal void .ctor(InternalPrimitiveTypeE code, Array array) { }
	// RVA: 0x31C140 Offset: 0x31A940 VA: 0x18031C140
	internal void Init(InternalPrimitiveTypeE code, Array array) { }
	// RVA: 0x31C480 Offset: 0x31AC80 VA: 0x18031C480
	internal void SetValue(string value, int index) { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class ChannelInfo : IChannelInfo // TypeDefIndex: 835
{
	// Fields
	private object[] channelData; // 0x10

	// Properties
	public object[] ChannelData { get; }

	// Methods
	// RVA: 0x251330 Offset: 0x24FB30 VA: 0x180251330
	public void .ctor() { }
	// RVA: 0x2513D0 Offset: 0x24FBD0 VA: 0x1802513D0
	public void .ctor(object remoteChannelData) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 4
	public object[] get_ChannelData() { }
}

// Namespace: System.Runtime.Remoting
public class ActivatedClientTypeEntry : TypeEntry // TypeDefIndex: 836
{
	// Fields
	private string applicationUrl; // 0x20
	private Type obj_type; // 0x28

	// Properties
	public IContextAttribute[] ContextAttributes { get; }

	// Methods
	// RVA: 0x2CA630 Offset: 0x2C8E30 VA: 0x1802CA630
	public void .ctor(string typeName, string assemblyName, string appUrl) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	public IContextAttribute[] get_ContextAttributes() { }
	// RVA: 0x2CA780 Offset: 0x2C8F80 VA: 0x1802CA780 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting
public class ActivatedServiceTypeEntry : TypeEntry // TypeDefIndex: 837
{
	// Fields
	private Type obj_type; // 0x20

	// Methods
	// RVA: 0x2CA7A0 Offset: 0x2C8FA0 VA: 0x1802CA7A0
	public void .ctor(string typeName, string assemblyName) { }
	// RVA: 0x2CA8E0 Offset: 0x2C90E0 VA: 0x1802CA8E0 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class EnvoyInfo : IEnvoyInfo // TypeDefIndex: 838
{
	// Fields
	private IMessageSink envoySinks; // 0x10

	// Properties
	public IMessageSink EnvoySinks { get; }

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(IMessageSink sinks) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 4
	public IMessageSink get_EnvoySinks() { }
}

// Namespace: System.Runtime.Remoting
public interface IChannelInfo // TypeDefIndex: 839
{
	// Properties
	public abstract object[] ChannelData { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract object[] get_ChannelData() { }
}

// Namespace: System.Runtime.Remoting
public interface IEnvoyInfo // TypeDefIndex: 840
{
	// Properties
	public abstract IMessageSink EnvoySinks { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink get_EnvoySinks() { }
}

// Namespace: System.Runtime.Remoting
public interface IRemotingTypeInfo // TypeDefIndex: 841
{
	// Properties
	public abstract string TypeName { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_TypeName() { }
}

// Namespace: System.Runtime.Remoting
internal abstract class Identity // TypeDefIndex: 842
{
	// Fields
	protected string _objectUri; // 0x10
	protected IMessageSink _channelSink; // 0x18
	protected IMessageSink _envoySink; // 0x20
	private DynamicPropertyCollection _clientDynamicProperties; // 0x28
	private DynamicPropertyCollection _serverDynamicProperties; // 0x30
	protected ObjRef _objRef; // 0x38
	private bool _disposed; // 0x40

	// Properties
	public string ObjectUri { set; }
	public bool IsConnected { get; }
	public bool HasServerDynamicSinks { get; }

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(string objectUri) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract ObjRef CreateObjRef(Type requestedType) { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void set_ObjectUri(string value) { }
	// RVA: 0x24D830 Offset: 0x24C030 VA: 0x18024D830
	public bool get_IsConnected() { }
	// RVA: 0x776290 Offset: 0x774A90 VA: 0x180776290
	public bool get_HasServerDynamicSinks() { }
	// RVA: 0x7762D0 Offset: 0x774AD0 VA: 0x1807762D0
	public void NotifyClientDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }
	// RVA: 0x776360 Offset: 0x774B60 VA: 0x180776360
	public void NotifyServerDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }
}

// Namespace: System.Runtime.Remoting
internal class ClientIdentity : Identity // TypeDefIndex: 843
{
	// Fields
	private WeakReference _proxyReference; // 0x48

	// Properties
	public MarshalByRefObject ClientProxy { get; set; }
	public string TargetUri { get; }

	// Methods
	// RVA: 0x257F60 Offset: 0x256760 VA: 0x180257F60
	public void .ctor(string objectUri, ObjRef objRef) { }
	// RVA: 0x258020 Offset: 0x256820 VA: 0x180258020
	public MarshalByRefObject get_ClientProxy() { }
	// RVA: 0x258100 Offset: 0x256900 VA: 0x180258100
	public void set_ClientProxy(MarshalByRefObject value) { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0 Slot: 4
	public override ObjRef CreateObjRef(Type requestedType) { }
	// RVA: 0x2581B0 Offset: 0x2569B0 VA: 0x1802581B0
	public string get_TargetUri() { }
}

// Namespace: System.Runtime.Remoting
public class InternalRemotingServices // TypeDefIndex: 844
{
	// Fields
	private static Hashtable _soapAttributes; // 0xAC040

	// Methods
	// RVA: 0x328EE0 Offset: 0x3276E0 VA: 0x180328EE0
	public static SoapAttribute GetCachedSoapAttribute(object reflectionObject) { }
	// RVA: 0x3294B0 Offset: 0x327CB0 VA: 0x1803294B0
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
public class ObjRef : IObjectReference, ISerializable // TypeDefIndex: 845
{
	// Fields
	private IChannelInfo channel_info; // 0x10
	private string uri; // 0x18
	private IRemotingTypeInfo typeInfo; // 0x20
	private IEnvoyInfo envoyInfo; // 0x28
	private int flags; // 0x30
	private Type _serverType; // 0x38
	private static int MarshalledObjectRef; // 0x0
	private static int WellKnowObjectRef; // 0x4

	// Properties
	internal bool IsReferenceToWellKnow { get; }
	internal Type ServerType { get; }

	// Methods
	// RVA: 0x755000 Offset: 0x753800 VA: 0x180755000
	public void .ctor() { }
	// RVA: 0x4F7740 Offset: 0x4F5F40 VA: 0x1804F7740
	internal void .ctor(string uri, IChannelInfo cinfo) { }
	// RVA: 0x755010 Offset: 0x753810 VA: 0x180755010
	internal ObjRef DeserializeInTheCurrentDomain(int domainId, byte[] tInfo) { }
	// RVA: 0x755140 Offset: 0x753940 VA: 0x180755140
	internal byte[] SerializeType() { }
	// RVA: 0x755210 Offset: 0x753A10 VA: 0x180755210
	internal void .ctor(Type type, string url, object remoteChannelData) { }
	// RVA: 0x755320 Offset: 0x753B20 VA: 0x180755320
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x7559F0 Offset: 0x7541F0 VA: 0x1807559F0
	internal bool get_IsReferenceToWellKnow() { }
	// RVA: 0x755A90 Offset: 0x754290 VA: 0x180755A90 Slot: 6
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x755EA0 Offset: 0x7546A0 VA: 0x180755EA0 Slot: 7
	public virtual object GetRealObject(StreamingContext context) { }
	// RVA: 0x755F80 Offset: 0x754780 VA: 0x180755F80
	internal void UpdateChannelInfo() { }
	// RVA: 0x756090 Offset: 0x754890 VA: 0x180756090
	internal Type get_ServerType() { }
	// RVA: 0x756180 Offset: 0x754980 VA: 0x180756180
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting
public static class RemotingConfiguration // TypeDefIndex: 846
{
	// Fields
	private static string applicationID; // 0x0
	private static string applicationName; // 0x8
	private static string processGuid; // 0x10
	private static bool defaultConfigRead; // 0x18
	private static bool defaultDelayedConfigRead; // 0x19
	private static string _errorMode; // 0x20
	private static Hashtable wellKnownClientEntries; // 0x28
	private static Hashtable activatedClientEntries; // 0x30
	private static Hashtable wellKnownServiceEntries; // 0x38
	private static Hashtable activatedServiceEntries; // 0x40
	private static Hashtable channelTemplates; // 0x48
	private static Hashtable clientProviderTemplates; // 0x50
	private static Hashtable serverProviderTemplates; // 0x58

	// Properties
	public static string ProcessId { get; }

	// Methods
	// RVA: 0x324C40 Offset: 0x323440 VA: 0x180324C40
	public static string get_ProcessId() { }
	// RVA: 0x324E00 Offset: 0x323600 VA: 0x180324E00
	internal static void LoadDefaultDelayedChannels() { }
	// RVA: 0x325240 Offset: 0x323A40 VA: 0x180325240
	public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(Type svrType) { }
	// RVA: 0x3254F0 Offset: 0x323CF0 VA: 0x1803254F0
	public static WellKnownClientTypeEntry IsWellKnownClientType(Type svrType) { }
	// RVA: 0x3257A0 Offset: 0x323FA0 VA: 0x1803257A0
	public static void RegisterActivatedClientType(ActivatedClientTypeEntry entry) { }
	// RVA: 0x325B00 Offset: 0x324300 VA: 0x180325B00
	public static void RegisterActivatedServiceType(ActivatedServiceTypeEntry entry) { }
	// RVA: 0x325D50 Offset: 0x324550 VA: 0x180325D50
	public static void RegisterWellKnownClientType(WellKnownClientTypeEntry entry) { }
	// RVA: 0x3260B0 Offset: 0x3248B0 VA: 0x1803260B0
	public static void RegisterWellKnownServiceType(WellKnownServiceTypeEntry entry) { }
	// RVA: 0x326350 Offset: 0x324B50 VA: 0x180326350
	internal static void RegisterChannelTemplate(ChannelData channel) { }
	// RVA: 0x326420 Offset: 0x324C20 VA: 0x180326420
	internal static void RegisterClientProviderTemplate(ProviderData prov) { }
	// RVA: 0x3264F0 Offset: 0x324CF0 VA: 0x1803264F0
	internal static void RegisterServerProviderTemplate(ProviderData prov) { }
	// RVA: 0x3265C0 Offset: 0x324DC0 VA: 0x1803265C0
	internal static void RegisterChannels(ArrayList channels, bool onlyDelayed) { }
	// RVA: 0x326FE0 Offset: 0x3257E0 VA: 0x180326FE0
	internal static void RegisterTypes(ArrayList types) { }
	// RVA: 0x327440 Offset: 0x325C40 VA: 0x180327440
	public static bool CustomErrorsEnabled(bool isLocalRequest) { }
	// RVA: 0x327620 Offset: 0x325E20 VA: 0x180327620
	internal static void SetCustomErrorsMode(string mode) { }
	// RVA: 0x3278F0 Offset: 0x3260F0 VA: 0x1803278F0
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting
internal class ConfigHandler : SmallXmlParser.IContentHandler // TypeDefIndex: 847
{
	// Fields
	private ArrayList typeEntries; // 0x10
	private ArrayList channelInstances; // 0x18
	private ChannelData currentChannel; // 0x20
	private Stack currentProviderData; // 0x28
	private string currentClientUrl; // 0x30
	private string appName; // 0x38
	private string currentXmlPath; // 0x40
	private bool onlyDelayedChannels; // 0x48

	// Methods
	// RVA: 0x25BDA0 Offset: 0x25A5A0 VA: 0x18025BDA0
	public void .ctor(bool onlyDelayedChannels) { }
	// RVA: 0x25BE70 Offset: 0x25A670 VA: 0x18025BE70
	private void ValidatePath(string element, string[] paths) { }
	// RVA: 0x25BF90 Offset: 0x25A790 VA: 0x18025BF90
	private bool CheckPath(string path) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 4
	public void OnStartParsing(SmallXmlParser parser) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 8
	public void OnProcessingInstruction(string name, string text) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 10
	public void OnIgnorableWhitespace(string s) { }
	// RVA: 0x25C170 Offset: 0x25A970 VA: 0x18025C170 Slot: 6
	public void OnStartElement(string name, SmallXmlParser.IAttrList attrs) { }
	// RVA: 0x25C360 Offset: 0x25AB60 VA: 0x18025C360
	public void ParseElement(string name, SmallXmlParser.IAttrList attrs) { }
	// RVA: 0x25D850 Offset: 0x25C050 VA: 0x18025D850 Slot: 7
	public void OnEndElement(string name) { }
	// RVA: 0x25D8E0 Offset: 0x25C0E0 VA: 0x18025D8E0
	private void ReadCustomProviderData(string name, SmallXmlParser.IAttrList attrs) { }
	// RVA: 0x25DC90 Offset: 0x25C490 VA: 0x18025DC90
	private void ReadLifetine(SmallXmlParser.IAttrList attrs) { }
	// RVA: 0x25E190 Offset: 0x25C990 VA: 0x18025E190
	private TimeSpan ParseTime(string s) { }
	// RVA: 0x25E950 Offset: 0x25D150 VA: 0x18025E950
	private void ReadChannel(SmallXmlParser.IAttrList attrs, bool isTemplate) { }
	// RVA: 0x25F0C0 Offset: 0x25D8C0 VA: 0x18025F0C0
	private ProviderData ReadProvider(string name, SmallXmlParser.IAttrList attrs, bool isTemplate) { }
	// RVA: 0x25F6B0 Offset: 0x25DEB0 VA: 0x18025F6B0
	private void ReadClientActivated(SmallXmlParser.IAttrList attrs) { }
	// RVA: 0x25F980 Offset: 0x25E180 VA: 0x18025F980
	private void ReadServiceActivated(SmallXmlParser.IAttrList attrs) { }
	// RVA: 0x25FB80 Offset: 0x25E380 VA: 0x18025FB80
	private void ReadClientWellKnown(SmallXmlParser.IAttrList attrs) { }
	// RVA: 0x25FDA0 Offset: 0x25E5A0 VA: 0x18025FDA0
	private void ReadServiceWellKnown(SmallXmlParser.IAttrList attrs) { }
	// RVA: 0x260170 Offset: 0x25E970 VA: 0x180260170
	private void ReadInteropXml(SmallXmlParser.IAttrList attrs, bool isElement) { }
	// RVA: 0x2603B0 Offset: 0x25EBB0 VA: 0x1802603B0
	private void ReadPreload(SmallXmlParser.IAttrList attrs) { }
	// RVA: 0x260640 Offset: 0x25EE40 VA: 0x180260640
	private string GetNotNull(SmallXmlParser.IAttrList attrs, string name) { }
	// RVA: 0x2607A0 Offset: 0x25EFA0 VA: 0x1802607A0
	private string ExtractAssembly(ref string type) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 9
	public void OnChars(string ch) { }
	// RVA: 0x2608C0 Offset: 0x25F0C0 VA: 0x1802608C0 Slot: 5
	public void OnEndParsing(SmallXmlParser parser) { }
}

// Namespace: System.Runtime.Remoting
internal class ChannelData // TypeDefIndex: 848
{
	// Fields
	internal string Ref; // 0x10
	internal string Type; // 0x18
	internal string Id; // 0x20
	internal string DelayLoadAsClientChannel; // 0x28
	private ArrayList _serverProviders; // 0x30
	private ArrayList _clientProviders; // 0x38
	private Hashtable _customProperties; // 0x40

	// Properties
	internal ArrayList ServerProviders { get; }
	public ArrayList ClientProviders { get; }
	public Hashtable CustomProperties { get; }

	// Methods
	// RVA: 0x250870 Offset: 0x24F070 VA: 0x180250870
	internal ArrayList get_ServerProviders() { }
	// RVA: 0x250910 Offset: 0x24F110 VA: 0x180250910
	public ArrayList get_ClientProviders() { }
	// RVA: 0x2509B0 Offset: 0x24F1B0 VA: 0x1802509B0
	public Hashtable get_CustomProperties() { }
	// RVA: 0x250A60 Offset: 0x24F260 VA: 0x180250A60
	public void CopyFrom(ChannelData other) { }
	// RVA: 0x251250 Offset: 0x24FA50 VA: 0x180251250
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting
internal class ProviderData // TypeDefIndex: 849
{
	// Fields
	internal string Ref; // 0x10
	internal string Type; // 0x18
	internal string Id; // 0x20
	internal Hashtable CustomProperties; // 0x28
	internal IList CustomData; // 0x30

	// Methods
	// RVA: 0x31CCA0 Offset: 0x31B4A0 VA: 0x18031CCA0
	public void CopyFrom(ProviderData other) { }
	// RVA: 0x31D330 Offset: 0x31BB30 VA: 0x18031D330
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting
internal class FormatterData : ProviderData // TypeDefIndex: 850
{
	// Methods
	// RVA: 0x766270 Offset: 0x764A70 VA: 0x180766270
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
public class RemotingException : SystemException // TypeDefIndex: 851
{
	// Methods
	// RVA: 0x327B20 Offset: 0x326320 VA: 0x180327B20
	public void .ctor() { }
	// RVA: 0x327B30 Offset: 0x326330 VA: 0x180327B30
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x327B40 Offset: 0x326340 VA: 0x180327B40
	public void .ctor(string message, Exception InnerException) { }
}

// Namespace: System.Runtime.Remoting
public static class RemotingServices // TypeDefIndex: 852
{
	// Fields
	private static Hashtable uri_hash; // 0x0
	private static BinaryFormatter _serializationFormatter; // 0x8
	private static BinaryFormatter _deserializationFormatter; // 0x10
	private static string app_id; // 0x18
	private static readonly object app_id_lock; // 0x20
	private static int next_id; // 0x28
	private static readonly MethodInfo FieldSetterMethod; // 0x30
	private static readonly MethodInfo FieldGetterMethod; // 0x38

	// Methods
	// RVA: 0x36B520 Offset: 0x369D20 VA: 0x18036B520
	private static void .cctor() { }
	// RVA: 0x36B810 Offset: 0x36A010 VA: 0x18036B810
	internal static object InternalExecute(MethodBase method, object obj, object[] parameters, out object[] out_args) { }
	// RVA: 0x36B820 Offset: 0x36A020 VA: 0x18036B820
	internal static MethodBase GetVirtualMethod(Type type, MethodBase method) { }
	// RVA: 0x36B830 Offset: 0x36A030 VA: 0x18036B830
	public static bool IsTransparentProxy(object proxy) { }
	// RVA: 0x36B880 Offset: 0x36A080 VA: 0x18036B880
	internal static IMethodReturnMessage InternalExecuteMessage(MarshalByRefObject target, IMethodCallMessage reqMsg) { }
	// RVA: 0x36BBD0 Offset: 0x36A3D0 VA: 0x18036BBD0
	public static object Connect(Type classToProxy, string url) { }
	// RVA: 0x36BCB0 Offset: 0x36A4B0 VA: 0x18036BCB0
	public static object Connect(Type classToProxy, string url, object data) { }
	// RVA: 0x36BDA0 Offset: 0x36A5A0 VA: 0x18036BDA0
	public static Type GetServerTypeForUri(string URI) { }
	// RVA: 0x36BE90 Offset: 0x36A690 VA: 0x18036BE90
	public static object Unmarshal(ObjRef objectRef) { }
	// RVA: 0x36BF30 Offset: 0x36A730 VA: 0x18036BF30
	public static object Unmarshal(ObjRef objectRef, bool fRefine) { }
	// RVA: 0x36C360 Offset: 0x36AB60 VA: 0x18036C360
	public static ObjRef Marshal(MarshalByRefObject Obj) { }
	// RVA: 0x36C3C0 Offset: 0x36ABC0 VA: 0x18036C3C0
	public static ObjRef Marshal(MarshalByRefObject Obj, string ObjURI, Type RequestedType) { }
	// RVA: 0x36C410 Offset: 0x36AC10 VA: 0x18036C410
	private static string NewUri() { }
	// RVA: 0x36CA10 Offset: 0x36B210 VA: 0x18036CA10
	public static RealProxy GetRealProxy(object proxy) { }
	// RVA: 0x36CA60 Offset: 0x36B260 VA: 0x18036CA60
	public static MethodBase GetMethodBaseFromMethodMessage(IMethodMessage msg) { }
	// RVA: 0x36CC40 Offset: 0x36B440 VA: 0x18036CC40
	internal static MethodBase GetMethodBaseFromName(Type type, string methodName, Type[] signature) { }
	// RVA: 0x36CFA0 Offset: 0x36B7A0 VA: 0x18036CFA0
	private static MethodBase FindInterfaceMethod(Type type, string methodName, Type[] signature) { }
	// RVA: 0x36D1D0 Offset: 0x36B9D0 VA: 0x18036D1D0
	public static void GetObjectData(object obj, SerializationInfo info, StreamingContext context) { }
	// RVA: 0x36D2A0 Offset: 0x36BAA0 VA: 0x18036D2A0
	public static bool IsOneWay(MethodBase method) { }
	// RVA: 0x36D370 Offset: 0x36BB70 VA: 0x18036D370
	internal static object CreateClientProxy(ActivatedClientTypeEntry entry, object[] activationAttributes) { }
	// RVA: 0x36D4C0 Offset: 0x36BCC0 VA: 0x18036D4C0
	internal static object CreateClientProxy(Type objectType, string url, object[] activationAttributes) { }
	// RVA: 0x36D610 Offset: 0x36BE10 VA: 0x18036D610
	internal static object CreateClientProxy(WellKnownClientTypeEntry entry) { }
	// RVA: 0x36D770 Offset: 0x36BF70 VA: 0x18036D770
	internal static object CreateClientProxyForContextBound(Type type, object[] activationAttributes) { }
	// RVA: 0x36D950 Offset: 0x36C150 VA: 0x18036D950
	internal static Identity GetIdentityForUri(string uri) { }
	// RVA: 0x36DCE0 Offset: 0x36C4E0 VA: 0x18036DCE0
	private static string RemoveAppNameFromUri(string uri) { }
	// RVA: 0x36DE90 Offset: 0x36C690 VA: 0x18036DE90
	internal static ClientIdentity GetOrCreateClientIdentity(ObjRef objRef, Type proxyType, out object clientProxy) { }
	// RVA: 0x36E570 Offset: 0x36CD70 VA: 0x18036E570
	private static IMessageSink GetClientChannelSinkChain(string url, object channelData, out string objectUri) { }
	// RVA: 0x36E6B0 Offset: 0x36CEB0 VA: 0x18036E6B0
	internal static ClientActivatedIdentity CreateContextBoundObjectIdentity(Type objectType) { }
	// RVA: 0x36E780 Offset: 0x36CF80 VA: 0x18036E780
	internal static ClientActivatedIdentity CreateClientActivatedServerIdentity(MarshalByRefObject realObject, Type objectType, string objectUri) { }
	// RVA: 0x36E820 Offset: 0x36D020 VA: 0x18036E820
	internal static ServerIdentity CreateWellKnownServerIdentity(Type objectType, string objectUri, WellKnownObjectMode mode) { }
	// RVA: 0x36E980 Offset: 0x36D180 VA: 0x18036E980
	private static void RegisterServerIdentity(ServerIdentity identity) { }
	// RVA: 0x36EC90 Offset: 0x36D490 VA: 0x18036EC90
	internal static object GetProxyForRemoteObject(ObjRef objref, Type classToProxy) { }
	// RVA: 0x36EDC0 Offset: 0x36D5C0 VA: 0x18036EDC0
	internal static object GetRemoteObject(ObjRef objRef, Type proxyType) { }
	// RVA: 0x36EE80 Offset: 0x36D680 VA: 0x18036EE80
	private static void RegisterInternalChannels() { }
	// RVA: 0x36EF10 Offset: 0x36D710 VA: 0x18036EF10
	internal static void DisposeIdentity(Identity ident) { }
	// RVA: 0x36F230 Offset: 0x36DA30 VA: 0x18036F230
	internal static Identity GetMessageTargetIdentity(IMessage msg) { }
	// RVA: 0x36F630 Offset: 0x36DE30 VA: 0x18036F630
	internal static void SetMessageTargetIdentity(IMessage msg, Identity ident) { }
	// RVA: 0x36F720 Offset: 0x36DF20 VA: 0x18036F720
	private static string GetNormalizedUri(string uri) { }
}

// Namespace: System.Runtime.Remoting
internal abstract class ServerIdentity : Identity // TypeDefIndex: 853
{
	// Fields
	protected Type _objectType; // 0x48
	protected MarshalByRefObject _serverObject; // 0x50
	protected IMessageSink _serverSink; // 0x58
	protected Context _context; // 0x60
	protected Lease _lease; // 0x68

	// Methods
	// RVA: 0x1D8690 Offset: 0x1D6E90 VA: 0x1801D8690
	public void .ctor(string objectUri, Context context, Type objectType) { }
	// RVA: 0x1D86A0 Offset: 0x1D6EA0 VA: 0x1801D86A0
	public void StartTrackingLifetime(ILease lease) { }
	// RVA: 0x1D89B0 Offset: 0x1D71B0 VA: 0x1801D89B0 Slot: 5
	public virtual void OnLifetimeExpired() { }
	// RVA: 0x1D89C0 Offset: 0x1D71C0 VA: 0x1801D89C0 Slot: 4
	public override ObjRef CreateObjRef(Type requestedType) { }
	// RVA: 0x1D8B60 Offset: 0x1D7360 VA: 0x1801D8B60
	public void AttachServerObject(MarshalByRefObject serverObject, Context context) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract IMessage SyncObjectProcessMessage(IMessage msg) { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
	// RVA: 0x1D8BE0 Offset: 0x1D73E0 VA: 0x1801D8BE0
	protected void DisposeServerObject() { }
}

// Namespace: System.Runtime.Remoting
internal class ClientActivatedIdentity : ServerIdentity // TypeDefIndex: 854
{
	// Fields
	private MarshalByRefObject _targetThis; // 0x70

	// Methods
	// RVA: 0x257690 Offset: 0x255E90 VA: 0x180257690
	public void .ctor(string objectUri, Type objectType) { }
	// RVA: 0x2576B0 Offset: 0x255EB0 VA: 0x1802576B0 Slot: 5
	public override void OnLifetimeExpired() { }
	// RVA: 0x257750 Offset: 0x255F50 VA: 0x180257750 Slot: 6
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }
	// RVA: 0x257820 Offset: 0x256020 VA: 0x180257820 Slot: 7
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
internal class SingletonIdentity : ServerIdentity // TypeDefIndex: 855
{
	// Methods
	// RVA: 0x1D8690 Offset: 0x1D6E90 VA: 0x1801D8690
	public void .ctor(string objectUri, Context context, Type objectType) { }
	// RVA: 0x1DFA30 Offset: 0x1DE230 VA: 0x1801DFA30
	public MarshalByRefObject GetServerObject() { }
	// RVA: 0x1DFBF0 Offset: 0x1DE3F0 VA: 0x1801DFBF0 Slot: 6
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }
	// RVA: 0x1DFCC0 Offset: 0x1DE4C0 VA: 0x1801DFCC0 Slot: 7
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
internal class SingleCallIdentity : ServerIdentity // TypeDefIndex: 856
{
	// Methods
	// RVA: 0x1D8690 Offset: 0x1D6E90 VA: 0x1801D8690
	public void .ctor(string objectUri, Context context, Type objectType) { }
	// RVA: 0x1DF770 Offset: 0x1DDF70 VA: 0x1801DF770 Slot: 6
	public override IMessage SyncObjectProcessMessage(IMessage msg) { }
	// RVA: 0x1DF7D0 Offset: 0x1DDFD0 VA: 0x1801DF7D0 Slot: 7
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
internal class DisposerReplySink : IMessageSink // TypeDefIndex: 857
{
	// Fields
	private IMessageSink _next; // 0x10
	private IDisposable _disposable; // 0x18

	// Methods
	// RVA: 0x25B970 Offset: 0x25A170 VA: 0x18025B970
	public void .ctor(IMessageSink next, IDisposable disposable) { }
	// RVA: 0x475550 Offset: 0x473D50 VA: 0x180475550 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x475600 Offset: 0x473E00 VA: 0x180475600 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting
public class SoapServices // TypeDefIndex: 858
{
	// Fields
	private static Hashtable _xmlTypes; // 0x0
	private static Hashtable _xmlElements; // 0x8
	private static Hashtable _soapActions; // 0x10
	private static Hashtable _soapActionsMethods; // 0x18
	private static Hashtable _typeInfos; // 0x20

	// Methods
	// RVA: 0x1E3A90 Offset: 0x1E2290 VA: 0x1801E3A90
	public static string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName) { }
	// RVA: 0x1E3CA0 Offset: 0x1E24A0 VA: 0x1801E3CA0
	private static string GetNameKey(string name, string namspace) { }
	// RVA: 0x1E3D40 Offset: 0x1E2540 VA: 0x1801E3D40
	private static string GetAssemblyName(MethodBase mb) { }
	// RVA: 0x1E3EF0 Offset: 0x1E26F0 VA: 0x1801E3EF0
	public static bool GetXmlElementForInteropType(Type type, out string xmlElement, out string xmlNamespace) { }
	// RVA: 0x1E3FF0 Offset: 0x1E27F0 VA: 0x1801E3FF0
	public static string GetXmlNamespaceForMethodCall(MethodBase mb) { }
	// RVA: 0x1E40D0 Offset: 0x1E28D0 VA: 0x1801E40D0
	public static string GetXmlNamespaceForMethodResponse(MethodBase mb) { }
	// RVA: 0x1E41B0 Offset: 0x1E29B0 VA: 0x1801E41B0
	public static bool GetXmlTypeForInteropType(Type type, out string xmlType, out string xmlTypeNamespace) { }
	// RVA: 0x1E42B0 Offset: 0x1E2AB0 VA: 0x1801E42B0
	public static void PreLoad(Assembly assembly) { }
	// RVA: 0x1E43B0 Offset: 0x1E2BB0 VA: 0x1801E43B0
	public static void PreLoad(Type type) { }
	// RVA: 0x1E4AE0 Offset: 0x1E32E0 VA: 0x1801E4AE0
	public static void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, Type type) { }
	// RVA: 0x1E4D80 Offset: 0x1E3580 VA: 0x1801E4D80
	public static void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, Type type) { }
	// RVA: 0x1E5020 Offset: 0x1E3820 VA: 0x1801E5020
	private static string EncodeNs(string ns) { }
	// RVA: 0x1E50F0 Offset: 0x1E38F0 VA: 0x1801E50F0
	private static void .cctor() { }
}

// Namespace: 
private class SoapServices.TypeInfo // TypeDefIndex: 859
{
	// Fields
	public Hashtable Attributes; // 0x10
	public Hashtable Elements; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting
public class TypeEntry // TypeDefIndex: 860
{
	// Fields
	private string assembly_name; // 0x10
	private string type_name; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class TypeInfo : IRemotingTypeInfo // TypeDefIndex: 861
{
	// Fields
	private string serverType; // 0x10
	private string[] serverHierarchy; // 0x18
	private string[] interfacesImplemented; // 0x20

	// Properties
	public string TypeName { get; }

	// Methods
	// RVA: 0x4A6060 Offset: 0x4A4860 VA: 0x1804A6060
	public void .ctor(Type type) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 4
	public string get_TypeName() { }
}

// Namespace: System.Runtime.Remoting
public class WellKnownClientTypeEntry : TypeEntry // TypeDefIndex: 862
{
	// Fields
	private Type obj_type; // 0x20
	private string obj_url; // 0x28
	private string app_url; // 0x30

	// Methods
	// RVA: 0x41B900 Offset: 0x41A100 VA: 0x18041B900
	public void .ctor(string typeName, string assemblyName, string objectUrl) { }
	// RVA: 0x41BA50 Offset: 0x41A250 VA: 0x18041BA50 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting
[Serializable]
public enum WellKnownObjectMode // TypeDefIndex: 863
{
	// Fields
	public int value__; // 0x0
	public const WellKnownObjectMode Singleton = 1; // 0x0
	public const WellKnownObjectMode SingleCall = 2; // 0x0
}

// Namespace: System.Runtime.Remoting
public class WellKnownServiceTypeEntry : TypeEntry // TypeDefIndex: 864
{
	// Fields
	private Type obj_type; // 0x20
	private string obj_uri; // 0x28
	private WellKnownObjectMode obj_mode; // 0x30

	// Methods
	// RVA: 0x41BA90 Offset: 0x41A290 VA: 0x18041BA90
	public void .ctor(string typeName, string assemblyName, string objectUri, WellKnownObjectMode mode) { }
	// RVA: 0x41BBF0 Offset: 0x41A3F0 VA: 0x18041BBF0 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.Remoting.Services
public interface ITrackingHandler // TypeDefIndex: 865
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void DisconnectedObject(object obj) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void MarshaledObject(object obj, ObjRef or) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void UnmarshaledObject(object obj, ObjRef or) { }
}

// Namespace: System.Runtime.Remoting.Services
public class TrackingServices // TypeDefIndex: 866
{
	// Fields
	private static ArrayList _handlers; // 0xAC09A

	// Methods
	// RVA: 0x4A0690 Offset: 0x49EE90 VA: 0x1804A0690
	internal static void NotifyMarshaledObject(object obj, ObjRef or) { }
	// RVA: 0x4A0AD0 Offset: 0x49F2D0 VA: 0x1804A0AD0
	internal static void NotifyUnmarshaledObject(object obj, ObjRef or) { }
	// RVA: 0x4A0F10 Offset: 0x49F710 VA: 0x1804A0F10
	internal static void NotifyDisconnectedObject(object obj) { }
	// RVA: 0x4A1350 Offset: 0x49FB50 VA: 0x1804A1350
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Proxies
[AttributeUsageAttribute] // RVA: 0xD9D50 Offset: 0xD9150 VA: 0x1800D9D50
public class ProxyAttribute : Attribute // TypeDefIndex: 867
{
	// Methods
	// RVA: 0x31D3D0 Offset: 0x31BBD0 VA: 0x18031D3D0 Slot: 4
	public virtual MarshalByRefObject CreateInstance(Type serverType) { }
	// RVA: 0x31D520 Offset: 0x31BD20 VA: 0x18031D520 Slot: 5
	public virtual RealProxy CreateProxy(ObjRef objRef, Type serverType, object serverObject, Context serverContext) { }
}

// Namespace: System.Runtime.Remoting.Proxies
internal class TransparentProxy // TypeDefIndex: 868
{
	// Fields
	public RealProxy _rp; // 0x10
	private RuntimeRemoteClassHandle _class; // 0x18
	private bool _custom_type_info; // 0x20
}

// Namespace: System.Runtime.Remoting.Proxies
public abstract class RealProxy // TypeDefIndex: 869
{
	// Fields
	private Type class_to_proxy; // 0x10
	internal Context _targetContext; // 0x18
	internal MarshalByRefObject _server; // 0x20
	private int _targetDomainId; // 0x28
	internal string _targetUri; // 0x30
	internal Identity _objectIdentity; // 0x38
	private object _objTP; // 0x40
	private object _stubData; // 0x48

	// Methods
	// RVA: 0x321990 Offset: 0x320190 VA: 0x180321990
	protected void .ctor(Type classToProxy) { }
	// RVA: 0x321A30 Offset: 0x320230 VA: 0x180321A30
	internal void .ctor(Type classToProxy, ClientIdentity identity) { }
	// RVA: 0x321AE0 Offset: 0x3202E0 VA: 0x180321AE0
	protected void .ctor(Type classToProxy, IntPtr stub, object stubData) { }
	// RVA: 0x321C10 Offset: 0x320410 VA: 0x180321C10
	private static Type InternalGetProxyType(object transparentProxy) { }
	// RVA: 0x321C20 Offset: 0x320420 VA: 0x180321C20
	public Type GetProxiedType() { }
	// RVA: 0x321D00 Offset: 0x320500 VA: 0x180321D00 Slot: 4
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract IMessage Invoke(IMessage msg) { }
	// RVA: 0x321D80 Offset: 0x320580 VA: 0x180321D80 Slot: 6
	internal virtual object InternalGetTransparentProxy(string className) { }
	// RVA: 0x321D90 Offset: 0x320590 VA: 0x180321D90 Slot: 7
	public virtual object GetTransparentProxy() { }
}

// Namespace: System.Runtime.Remoting.Proxies
internal class RemotingProxy : RealProxy, IRemotingTypeInfo // TypeDefIndex: 870
{
	// Fields
	private static MethodInfo _cache_GetTypeMethod; // 0x0
	private static MethodInfo _cache_GetHashCodeMethod; // 0x8
	private IMessageSink _sink; // 0x50
	private bool _hasEnvoySink; // 0x58
	private ConstructionCall _ctorCall; // 0x60

	// Properties
	public string TypeName { get; }

	// Methods
	// RVA: 0x36A6B0 Offset: 0x368EB0 VA: 0x18036A6B0
	internal void .ctor(Type type, ClientIdentity identity) { }
	// RVA: 0x36A780 Offset: 0x368F80 VA: 0x18036A780
	internal void .ctor(Type type, string activationUrl, object[] activationAttributes) { }
	// RVA: 0x36A850 Offset: 0x369050 VA: 0x18036A850 Slot: 5
	public override IMessage Invoke(IMessage request) { }
	// RVA: 0x36AE30 Offset: 0x369630 VA: 0x18036AE30
	internal void AttachIdentity(Identity identity) { }
	// RVA: 0x36B1D0 Offset: 0x3699D0 VA: 0x18036B1D0 Slot: 8
	public string get_TypeName() { }
	// RVA: 0x36B2F0 Offset: 0x369AF0 VA: 0x18036B2F0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x36B420 Offset: 0x369C20 VA: 0x18036B420
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Lifetime
public interface ILease // TypeDefIndex: 871
{
	// Properties
	public abstract TimeSpan CurrentLeaseTime { get; }
	public abstract LeaseState CurrentState { get; }
	public abstract TimeSpan RenewOnCallTime { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract TimeSpan get_CurrentLeaseTime() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract LeaseState get_CurrentState() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract TimeSpan get_RenewOnCallTime() { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract TimeSpan Renew(TimeSpan renewalTime) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
public interface ISponsor // TypeDefIndex: 872
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract TimeSpan Renewal(ILease lease) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class Lease : MarshalByRefObject, ILease // TypeDefIndex: 873
{
	// Fields
	private DateTime _leaseExpireTime; // 0x18
	private LeaseState _currentState; // 0x20
	private TimeSpan _initialLeaseTime; // 0x28
	private TimeSpan _renewOnCallTime; // 0x30
	private TimeSpan _sponsorshipTimeout; // 0x38
	private ArrayList _sponsors; // 0x40
	private Queue _renewingSponsors; // 0x48
	private Lease.RenewalDelegate _renewalDelegate; // 0x50

	// Properties
	public TimeSpan CurrentLeaseTime { get; }
	public LeaseState CurrentState { get; }
	public TimeSpan RenewOnCallTime { get; }

	// Methods
	// RVA: 0x331730 Offset: 0x32FF30 VA: 0x180331730
	public void .ctor() { }
	// RVA: 0x331840 Offset: 0x330040 VA: 0x180331840 Slot: 6
	public TimeSpan get_CurrentLeaseTime() { }
	// RVA: 0x197B20 Offset: 0x196320 VA: 0x180197B20 Slot: 7
	public LeaseState get_CurrentState() { }
	// RVA: 0x3318F0 Offset: 0x3300F0 VA: 0x1803318F0
	public void Activate() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0 Slot: 8
	public TimeSpan get_RenewOnCallTime() { }
	// RVA: 0x331900 Offset: 0x330100 VA: 0x180331900 Slot: 9
	public TimeSpan Renew(TimeSpan renewalTime) { }
	// RVA: 0x3319D0 Offset: 0x3301D0 VA: 0x1803319D0 Slot: 10
	public void Unregister(ISponsor obj) { }
	// RVA: 0x331C00 Offset: 0x330400 VA: 0x180331C00
	internal void UpdateState() { }
	// RVA: 0x331DA0 Offset: 0x3305A0 VA: 0x180331DA0
	private void CheckNextSponsor() { }
	// RVA: 0x332030 Offset: 0x330830 VA: 0x180332030
	private void ProcessSponsorResponse(object state, bool timedOut) { }
}

// Namespace: 
private sealed class Lease.RenewalDelegate : MulticastDelegate // TypeDefIndex: 874
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x2716D0 Offset: 0x26FED0 VA: 0x1802716D0 Slot: 12
	public virtual TimeSpan Invoke(ILease lease) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(ILease lease, AsyncCallback callback, object object) { }
	// RVA: 0x271B20 Offset: 0x270320 VA: 0x180271B20 Slot: 14
	public virtual TimeSpan EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseManager // TypeDefIndex: 875
{
	// Fields
	private ArrayList _objects; // 0x10
	private Timer _timer; // 0x18

	// Methods
	// RVA: 0x3322B0 Offset: 0x330AB0 VA: 0x1803322B0
	public void SetPollTime(TimeSpan timeSpan) { }
	// RVA: 0x3324C0 Offset: 0x330CC0 VA: 0x1803324C0
	public void TrackLifetime(ServerIdentity identity) { }
	// RVA: 0x3327F0 Offset: 0x330FF0 VA: 0x1803327F0
	public void StartManager() { }
	// RVA: 0x332960 Offset: 0x331160 VA: 0x180332960
	public void StopManager() { }
	// RVA: 0x332980 Offset: 0x331180 VA: 0x180332980
	public void ManageLeases(object state) { }
	// RVA: 0x332CD0 Offset: 0x3314D0 VA: 0x180332CD0
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseSink : IMessageSink // TypeDefIndex: 876
{
	// Fields
	private IMessageSink _nextSink; // 0x10

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(IMessageSink nextSink) { }
	// RVA: 0x332D60 Offset: 0x331560 VA: 0x180332D60 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x332E10 Offset: 0x331610 VA: 0x180332E10 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// RVA: 0x332ED0 Offset: 0x3316D0 VA: 0x180332ED0
	private void RenewLease(IMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Lifetime
[Serializable]
public enum LeaseState // TypeDefIndex: 877
{
	// Fields
	public int value__; // 0x0
	public const LeaseState Null = 0; // 0x0
	public const LeaseState Initial = 1; // 0x0
	public const LeaseState Active = 2; // 0x0
	public const LeaseState Renewing = 3; // 0x0
	public const LeaseState Expired = 4; // 0x0
}

// Namespace: System.Runtime.Remoting.Lifetime
public sealed class LifetimeServices // TypeDefIndex: 878
{
	// Fields
	private static TimeSpan _leaseManagerPollTime; // 0x0
	private static TimeSpan _leaseTime; // 0x8
	private static TimeSpan _renewOnCallTime; // 0x10
	private static TimeSpan _sponsorshipTimeout; // 0x18
	private static LeaseManager _leaseManager; // 0x20

	// Properties
	public static TimeSpan LeaseManagerPollTime { set; }

	// Methods
	// RVA: 0x333110 Offset: 0x331910 VA: 0x180333110
	private static void .cctor() { }
	// RVA: 0x3332C0 Offset: 0x331AC0 VA: 0x1803332C0
	public static void set_LeaseManagerPollTime(TimeSpan value) { }
	// RVA: 0x333380 Offset: 0x331B80 VA: 0x180333380
	internal static void TrackLifetime(ServerIdentity identity) { }
}

// Namespace: System.Runtime.Remoting.Contexts
public class Context // TypeDefIndex: 879
{
	// Fields
	private int domain_id; // 0x10
	private int context_id; // 0x14
	private UIntPtr static_data; // 0x18
	private UIntPtr data; // 0x20
	private static IMessageSink default_server_context_sink; // 0x0
	private IMessageSink server_context_sink_chain; // 0x28
	private IMessageSink client_context_sink_chain; // 0x30
	private List<IContextProperty> context_properties; // 0x38
	private static int global_count; // 0x8
	private LocalDataStoreHolder _localDataStore; // 0x40
	private static LocalDataStoreMgr _localDataStoreMgr; // 0x10
	private static DynamicPropertyCollection global_dynamic_properties; // 0x18
	private DynamicPropertyCollection context_dynamic_properties; // 0x48
	private ContextCallbackObject callback_object; // 0x50

	// Properties
	public static Context DefaultContext { get; }
	internal static bool HasGlobalDynamicSinks { get; }
	internal bool HasDynamicSinks { get; }
	internal bool HasExitSinks { get; }

	// Methods
	// RVA: 0x2644A0 Offset: 0x262CA0 VA: 0x1802644A0
	private static void RegisterContext(Context ctx) { }
	// RVA: 0x2644A0 Offset: 0x262CA0 VA: 0x1802644A0
	private static void ReleaseContext(Context ctx) { }
	// RVA: 0x2644B0 Offset: 0x262CB0 VA: 0x1802644B0
	public void .ctor() { }
	// RVA: 0x264540 Offset: 0x262D40 VA: 0x180264540 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x2645E0 Offset: 0x262DE0 VA: 0x1802645E0
	public static Context get_DefaultContext() { }
	// RVA: 0x264620 Offset: 0x262E20 VA: 0x180264620
	internal static void NotifyGlobalDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }
	// RVA: 0x2647A0 Offset: 0x262FA0 VA: 0x1802647A0
	internal static bool get_HasGlobalDynamicSinks() { }
	// RVA: 0x264890 Offset: 0x263090 VA: 0x180264890
	internal void NotifyDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async) { }
	// RVA: 0x264920 Offset: 0x263120 VA: 0x180264920
	internal bool get_HasDynamicSinks() { }
	// RVA: 0x264960 Offset: 0x263160 VA: 0x180264960
	internal bool get_HasExitSinks() { }
	// RVA: 0x264A80 Offset: 0x263280 VA: 0x180264A80 Slot: 4
	public virtual IContextProperty GetProperty(string name) { }
	// RVA: 0x264C10 Offset: 0x263410 VA: 0x180264C10 Slot: 5
	public virtual void SetProperty(IContextProperty prop) { }
	// RVA: 0x264D90 Offset: 0x263590 VA: 0x180264D90 Slot: 6
	public virtual void Freeze() { }
	// RVA: 0x264EA0 Offset: 0x2636A0 VA: 0x180264EA0 Slot: 3
	public override string ToString() { }
	// RVA: 0x264F40 Offset: 0x263740 VA: 0x180264F40
	internal IMessageSink GetServerContextSinkChain() { }
	// RVA: 0x265170 Offset: 0x263970 VA: 0x180265170
	internal IMessageSink GetClientContextSinkChain() { }
	// RVA: 0x2653B0 Offset: 0x263BB0 VA: 0x1802653B0
	internal IMessageSink CreateServerObjectSinkChain(MarshalByRefObject obj, bool forceInternalExecute) { }
	// RVA: 0x265600 Offset: 0x263E00 VA: 0x180265600
	internal IMessageSink CreateEnvoySink(MarshalByRefObject serverObject) { }
	// RVA: 0x265850 Offset: 0x264050 VA: 0x180265850
	internal static Context SwitchToContext(Context newContext) { }
	// RVA: 0x265860 Offset: 0x264060 VA: 0x180265860
	internal static Context CreateNewContext(IConstructionCallMessage msg) { }
	// RVA: 0x2658C0 Offset: 0x2640C0 VA: 0x1802658C0
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Contexts
internal class DynamicPropertyCollection // TypeDefIndex: 880
{
	// Fields
	private ArrayList _properties; // 0x10

	// Properties
	public bool HasProperties { get; }

	// Methods
	// RVA: 0x4761E0 Offset: 0x4749E0 VA: 0x1804761E0
	public bool get_HasProperties() { }
	// RVA: 0x476210 Offset: 0x474A10 VA: 0x180476210
	public void NotifyMessage(bool start, IMessage msg, bool client_site, bool async) { }
}

// Namespace: 
private class DynamicPropertyCollection.DynamicPropertyReg // TypeDefIndex: 881
{
	// Fields
	public IDynamicMessageSink Sink; // 0x10
}

// Namespace: System.Runtime.Remoting.Contexts
internal class ContextCallbackObject : ContextBoundObject // TypeDefIndex: 882
{}

// Namespace: System.Runtime.Remoting.Contexts
internal class CrossContextChannel : IMessageSink // TypeDefIndex: 883
{
	// Methods
	// RVA: 0x3F94B0 Offset: 0x3F7CB0 VA: 0x1803F94B0 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x3F9840 Offset: 0x3F8040 VA: 0x1803F9840 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private class CrossContextChannel.ContextRestoreSink : IMessageSink // TypeDefIndex: 884
{
	// Fields
	private IMessageSink _next; // 0x10
	private Context _context; // 0x18
	private IMessage _call; // 0x20

	// Methods
	// RVA: 0x26C0F0 Offset: 0x26A8F0 VA: 0x18026C0F0
	public void .ctor(IMessageSink next, Context context, IMessage call) { }
	// RVA: 0x26C100 Offset: 0x26A900 VA: 0x18026C100 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x26C3C0 Offset: 0x26ABC0 VA: 0x18026C3C0 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContextAttribute // TypeDefIndex: 885
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetPropertiesForNewContext(IConstructionCallMessage msg) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool IsContextOK(Context ctx, IConstructionCallMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContextProperty // TypeDefIndex: 886
{
	// Properties
	public abstract string Name { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool IsNewContextOK(Context newCtx) { }
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeClientContextSink // TypeDefIndex: 887
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetClientContextSink(IMessageSink nextSink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeEnvoySink // TypeDefIndex: 888
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeObjectSink // TypeDefIndex: 889
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeServerContextSink // TypeDefIndex: 890
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink GetServerContextSink(IMessageSink nextSink) { }
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IDynamicMessageSink // TypeDefIndex: 891
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void ProcessMessageFinish(IMessage replyMsg, bool bCliSide, bool bAsync) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void ProcessMessageStart(IMessage reqMsg, bool bCliSide, bool bAsync) { }
}

// Namespace: System.Runtime.Remoting.Channels
public sealed class ChannelServices // TypeDefIndex: 892
{
	// Fields
	private static ArrayList registeredChannels; // 0x0
	private static ArrayList delayedClientChannels; // 0x8
	private static CrossContextChannel _crossContextSink; // 0x10
	internal static string CrossContextUrl; // 0x18
	private static IList oldStartModeTypes; // 0x20

	// Methods
	// RVA: 0x2514C0 Offset: 0x24FCC0 VA: 0x1802514C0
	internal static IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, out string objectUri) { }
	// RVA: 0x251D40 Offset: 0x250540 VA: 0x180251D40
	internal static IMessageSink CreateClientChannelSinkChain(IChannelSender sender, string url, object[] channelDataArray, out string objectUri) { }
	[ObsoleteAttribute] // RVA: 0xD9D70 Offset: 0xD9170 VA: 0x1800D9D70
	// RVA: 0x251E70 Offset: 0x250670 VA: 0x180251E70
	public static void RegisterChannel(IChannel chnl) { }
	// RVA: 0x251F10 Offset: 0x250710 VA: 0x180251F10
	public static void RegisterChannel(IChannel chnl, bool ensureSecurity) { }
	// RVA: 0x252690 Offset: 0x250E90 VA: 0x180252690
	internal static void RegisterChannelConfig(ChannelData channel) { }
	// RVA: 0x253490 Offset: 0x251C90 VA: 0x180253490
	private static object CreateProvider(ProviderData prov) { }
	// RVA: 0x2537D0 Offset: 0x251FD0 VA: 0x1802537D0
	public static IMessage SyncDispatchMessage(IMessage msg) { }
	// RVA: 0x2538F0 Offset: 0x2520F0 VA: 0x1802538F0
	private static ReturnMessage CheckIncomingMessage(IMessage msg) { }
	// RVA: 0x253AF0 Offset: 0x2522F0 VA: 0x180253AF0
	internal static IMessage CheckReturnMessage(IMessage callMsg, IMessage retMsg) { }
	// RVA: 0x253C50 Offset: 0x252450 VA: 0x180253C50
	internal static object[] GetCurrentChannelInfo() { }
	// RVA: 0x254160 Offset: 0x252960 VA: 0x180254160
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainData // TypeDefIndex: 893
{
	// Fields
	private object _ContextID; // 0x10
	private int _DomainID; // 0x18
	private string _processGuid; // 0x20

	// Methods
	// RVA: 0x3F85D0 Offset: 0x3F6DD0 VA: 0x1803F85D0
	internal void .ctor(int domainId) { }
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainChannel : IChannel, IChannelSender, IChannelReceiver // TypeDefIndex: 894
{
	// Fields
	private static object s_lock; // 0xA15984

	// Properties
	public virtual string ChannelName { get; }
	public virtual int ChannelPriority { get; }
	public virtual object ChannelData { get; }

	// Methods
	// RVA: 0x3F7F80 Offset: 0x3F6780 VA: 0x1803F7F80
	internal static void RegisterCrossAppDomainChannel() { }
	// RVA: 0x3F8190 Offset: 0x3F6990 VA: 0x1803F8190 Slot: 9
	public virtual string get_ChannelName() { }
	// RVA: 0x3F8200 Offset: 0x3F6A00 VA: 0x1803F8200 Slot: 10
	public virtual int get_ChannelPriority() { }
	// RVA: 0x3F8210 Offset: 0x3F6A10 VA: 0x1803F8210 Slot: 11
	public virtual object get_ChannelData() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 12
	public virtual void StartListening(object data) { }
	// RVA: 0x3F82C0 Offset: 0x3F6AC0 VA: 0x1803F82C0 Slot: 13
	public virtual IMessageSink CreateMessageSink(string url, object data, out string uri) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x3F8550 Offset: 0x3F6D50 VA: 0x1803F8550
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Channels
internal class CrossAppDomainSink : IMessageSink // TypeDefIndex: 895
{
	// Fields
	private static Hashtable s_sinks; // 0x0
	private static MethodInfo processMessageMethod; // 0x8
	private int _domainID; // 0x10

	// Methods
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	internal void .ctor(int domainID) { }
	// RVA: 0x3F86A0 Offset: 0x3F6EA0 VA: 0x1803F86A0
	internal static CrossAppDomainSink GetSink(int domainID) { }
	// RVA: 0x3F8AB0 Offset: 0x3F72B0 VA: 0x1803F8AB0
	private static CrossAppDomainSink.ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg) { }
	// RVA: 0x3F8EB0 Offset: 0x3F76B0 VA: 0x1803F8EB0 Slot: 6
	public virtual IMessage SyncProcessMessage(IMessage msgRequest) { }
	// RVA: 0x3F9060 Offset: 0x3F7860 VA: 0x1803F9060 Slot: 7
	public virtual IMessageCtrl AsyncProcessMessage(IMessage reqMsg, IMessageSink replySink) { }
	// RVA: 0x3F9140 Offset: 0x3F7940 VA: 0x1803F9140
	public void SendAsyncMessage(object data) { }
	// RVA: 0x3F9240 Offset: 0x3F7A40 VA: 0x1803F9240
	private static void .cctor() { }
	// RVA: 0x3F9340 Offset: 0x3F7B40 VA: 0x1803F9340
	private void <AsyncProcessMessage>b__10_0(object data) { }
}

// Namespace: 
private struct CrossAppDomainSink.ProcessMessageRes // TypeDefIndex: 896
{
	// Fields
	public byte[] arrResponse; // 0x0
	public CADMethodReturnMessage cadMrm; // 0x8
}

// Namespace: System.Runtime.Remoting.Channels
internal class CADSerializer // TypeDefIndex: 897
{
	// Methods
	// RVA: 0x248C10 Offset: 0x247410 VA: 0x180248C10
	internal static IMessage DeserializeMessage(MemoryStream mem, IMethodCallMessage msg) { }
	// RVA: 0x248C60 Offset: 0x247460 VA: 0x180248C60
	internal static MemoryStream SerializeMessage(IMessage msg) { }
	// RVA: 0x248D90 Offset: 0x247590 VA: 0x180248D90
	internal static object DeserializeObjectSafe(byte[] mem) { }
	// RVA: 0x248E60 Offset: 0x247660 VA: 0x180248E60
	internal static MemoryStream SerializeObject(object obj) { }
	// RVA: 0x248F90 Offset: 0x247790 VA: 0x180248F90
	internal static object DeserializeObject(MemoryStream mem) { }
}

// Namespace: System.Runtime.Remoting.Channels
internal class AsyncRequest // TypeDefIndex: 898
{
	// Fields
	internal IMessageSink ReplySink; // 0x10
	internal IMessage MsgRequest; // 0x18

	// Methods
	// RVA: 0x1D8C70 Offset: 0x1D7470 VA: 0x1801D8C70
	public void .ctor(IMessage msgRequest, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannel // TypeDefIndex: 899
{
	// Properties
	public abstract string ChannelName { get; }
	public abstract int ChannelPriority { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_ChannelName() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_ChannelPriority() { }
}

// Namespace: System.Runtime.Remoting.Channels
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public interface IChannelDataStore // TypeDefIndex: 900
{}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelReceiver : IChannel // TypeDefIndex: 901
{
	// Properties
	public abstract object ChannelData { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_ChannelData() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void StartListening(object data) { }
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelSender : IChannel // TypeDefIndex: 902
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessageSink CreateMessageSink(string url, object remoteChannelData, out string objectURI) { }
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientChannelSinkProvider // TypeDefIndex: 903
{
	// Properties
	set; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_Next(IClientChannelSinkProvider value) { }
}

// Namespace: System.Runtime.Remoting.Channels
public interface ISecurableChannel // TypeDefIndex: 904
{
	// Properties
	set; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_IsSecured(bool value) { }
}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerChannelSinkProvider // TypeDefIndex: 905
{
	// Properties
	set; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_Next(IServerChannelSinkProvider value) { }
}

// Namespace: System.Runtime.Remoting.Channels
public class SinkProviderData // TypeDefIndex: 906
{
	// Fields
	private string sinkName; // 0x10
	private ArrayList children; // 0x18
	private Hashtable properties; // 0x20

	// Methods
	// RVA: 0x1DFDA0 Offset: 0x1DE5A0 VA: 0x1801DFDA0
	public void .ctor(string name) { }
}

// Namespace: System.Runtime.Remoting.Activation
internal class ActivationServices // TypeDefIndex: 907
{
	// Fields
	private static IActivator _constructionActivator; // 0xAC0C0

	// Properties
	private static IActivator ConstructionActivator { get; }

	// Methods
	// RVA: 0x2CA8F0 Offset: 0x2C90F0 VA: 0x1802CA8F0
	private static IActivator get_ConstructionActivator() { }
	// RVA: 0x2CA9A0 Offset: 0x2C91A0 VA: 0x1802CA9A0
	public static IMessage RemoteActivate(IConstructionCallMessage ctorCall) { }
	// RVA: 0x2CAA90 Offset: 0x2C9290 VA: 0x1802CAA90
	public static ConstructionCall CreateConstructionCall(Type type, string activationUrl, object[] activationAttributes) { }
	// RVA: 0x2CB3A0 Offset: 0x2C9BA0 VA: 0x1802CB3A0
	public static IMessage CreateInstanceFromMessage(IConstructionCallMessage ctorCall) { }
	// RVA: 0x2CB460 Offset: 0x2C9C60 VA: 0x1802CB460
	public static object CreateProxyForType(Type type) { }
	// RVA: 0x2CB7A0 Offset: 0x2C9FA0 VA: 0x1802CB7A0
	public static object AllocateUninitializedClassInstance(Type type) { }
	// RVA: 0x2CB7E0 Offset: 0x2C9FE0 VA: 0x1802CB7E0
	public static void EnableProxyActivation(Type type, bool enable) { }
}

// Namespace: System.Runtime.Remoting.Activation
internal class AppDomainLevelActivator : IActivator // TypeDefIndex: 908
{
	// Fields
	private string _activationUrl; // 0x10
	private IActivator _next; // 0x18

	// Properties
	public IActivator NextActivator { get; }

	// Methods
	// RVA: 0x25B970 Offset: 0x25A170 VA: 0x18025B970
	public void .ctor(string activationUrl, IActivator next) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	public IActivator get_NextActivator() { }
	// RVA: 0x2CEEB0 Offset: 0x2CD6B0 VA: 0x1802CEEB0 Slot: 5
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall) { }
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ConstructionLevelActivator : IActivator // TypeDefIndex: 909
{
	// Properties
	public IActivator NextActivator { get; }

	// Methods
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 4
	public IActivator get_NextActivator() { }
	// RVA: 0x263F90 Offset: 0x262790 VA: 0x180263F90 Slot: 5
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ContextLevelActivator : IActivator // TypeDefIndex: 910
{
	// Fields
	private IActivator m_NextActivator; // 0x10

	// Properties
	public IActivator NextActivator { get; }

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(IActivator next) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 4
	public IActivator get_NextActivator() { }
	// RVA: 0x3EA070 Offset: 0x3E8870 VA: 0x1803EA070 Slot: 5
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall) { }
}

// Namespace: System.Runtime.Remoting.Activation
public interface IActivator // TypeDefIndex: 911
{
	// Properties
	public abstract IActivator NextActivator { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IActivator get_NextActivator() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract IConstructionReturnMessage Activate(IConstructionCallMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Activation
public interface IConstructionCallMessage : IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 912
{
	// Properties
	public abstract Type ActivationType { get; }
	public abstract string ActivationTypeName { get; }
	public abstract IActivator Activator { get; set; }
	public abstract object[] CallSiteActivationAttributes { get; }
	public abstract IList ContextProperties { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract Type get_ActivationType() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract string get_ActivationTypeName() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract IActivator get_Activator() { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Activator(IActivator value) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract object[] get_CallSiteActivationAttributes() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract IList get_ContextProperties() { }
}

// Namespace: System.Runtime.Remoting.Activation
public interface IConstructionReturnMessage : IMethodReturnMessage, IMethodMessage, IMessage // TypeDefIndex: 913
{}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivator : MarshalByRefObject // TypeDefIndex: 914
{}

// Namespace: System.Runtime.Remoting.Metadata
public class SoapAttribute : Attribute // TypeDefIndex: 915
{
	// Fields
	private bool _useAttribute; // 0x10
	protected string ProtXmlNamespace; // 0x18
	protected object ReflectInfo; // 0x20

	// Properties
	public virtual bool UseAttribute { get; }
	public virtual string XmlNamespace { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x1E30F0 Offset: 0x1E18F0 VA: 0x1801E30F0 Slot: 4
	public virtual bool get_UseAttribute() { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 5
	public virtual string get_XmlNamespace() { }
	// RVA: 0x16EEC0 Offset: 0x16D6C0 VA: 0x18016EEC0 Slot: 6
	internal virtual void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Metadata
[AttributeUsageAttribute] // RVA: 0xD9DA0 Offset: 0xD91A0 VA: 0x1800D9DA0
public sealed class SoapFieldAttribute : SoapAttribute // TypeDefIndex: 916
{
	// Fields
	private string _elementName; // 0x28
	private bool _isElement; // 0x30

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x1E3100 Offset: 0x1E1900 VA: 0x1801E3100 Slot: 6
	internal override void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Metadata
[AttributeUsageAttribute] // RVA: 0xD9A10 Offset: 0xD8E10 VA: 0x1800D9A10
public sealed class SoapMethodAttribute : SoapAttribute // TypeDefIndex: 917
{
	// Fields
	private string _responseElement; // 0x28
	private string _responseNamespace; // 0x30
	private string _returnElement; // 0x38
	private string _soapAction; // 0x40
	private bool _useAttribute; // 0x48
	private string _namespace; // 0x50

	// Properties
	public override bool UseAttribute { get; }
	public override string XmlNamespace { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x16F150 Offset: 0x16D950 VA: 0x18016F150 Slot: 4
	public override bool get_UseAttribute() { }
	// RVA: 0x1E31F0 Offset: 0x1E19F0 VA: 0x1801E31F0 Slot: 5
	public override string get_XmlNamespace() { }
	// RVA: 0x1E3200 Offset: 0x1E1A00 VA: 0x1801E3200 Slot: 6
	internal override void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Metadata
[AttributeUsageAttribute] // RVA: 0xD9DC0 Offset: 0xD91C0 VA: 0x1800D9DC0
public sealed class SoapParameterAttribute : SoapAttribute // TypeDefIndex: 918
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Metadata
[AttributeUsageAttribute] // RVA: 0xD9DE0 Offset: 0xD91E0 VA: 0x1800D9DE0
public sealed class SoapTypeAttribute : SoapAttribute // TypeDefIndex: 919
{
	// Fields
	private bool _useAttribute; // 0x28
	private string _xmlElementName; // 0x30
	private string _xmlNamespace; // 0x38
	private string _xmlTypeName; // 0x40
	private string _xmlTypeNamespace; // 0x48
	private bool _isType; // 0x50
	private bool _isElement; // 0x51

	// Properties
	public override bool UseAttribute { get; }
	public override string XmlNamespace { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x1E5260 Offset: 0x1E3A60 VA: 0x1801E5260 Slot: 4
	public override bool get_UseAttribute() { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0 Slot: 5
	public override string get_XmlNamespace() { }
	// RVA: 0x1E5270 Offset: 0x1E3A70 VA: 0x1801E5270 Slot: 6
	internal override void SetReflectionObject(object reflectionObject) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public sealed class CallContext // TypeDefIndex: 920
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x24D7E0 Offset: 0x24BFE0 VA: 0x18024D7E0
	internal static LogicalCallContext SetLogicalCallContext(LogicalCallContext callCtx) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class IllogicalCallContext // TypeDefIndex: 921
{
	// Fields
	private Hashtable m_Datastore; // 0x10
	private object m_HostContext; // 0x18

	// Properties
	private Hashtable Datastore { get; }
	internal bool HasUserData { get; }

	// Methods
	// RVA: 0x777DB0 Offset: 0x7765B0 VA: 0x180777DB0
	private Hashtable get_Datastore() { }
	// RVA: 0x334E50 Offset: 0x333650 VA: 0x180334E50
	internal bool get_HasUserData() { }
	// RVA: 0x777E60 Offset: 0x776660 VA: 0x180777E60
	public IllogicalCallContext CreateCopy() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public sealed class LogicalCallContext : ISerializable, ICloneable // TypeDefIndex: 922
{
	// Fields
	private static Type s_callContextType; // 0x0
	private const string s_CorrelationMgrSlotName = "System.Diagnostics.Trace.CorrelationManagerSlot"; // 0x0
	private Hashtable m_Datastore; // 0x10
	private CallContextRemotingData m_RemotingData; // 0x18
	private CallContextSecurityData m_SecurityData; // 0x20
	private object m_HostContext; // 0x28
	private bool m_IsCorrelationMgr; // 0x30
	private Header[] _sendHeaders; // 0x38
	private Header[] _recvHeaders; // 0x40

	// Properties
	public bool HasInfo { get; }
	private bool HasUserData { get; }
	private Hashtable Datastore { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x333FD0 Offset: 0x3327D0 VA: 0x180333FD0
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x3342E0 Offset: 0x332AE0 VA: 0x1803342E0 Slot: 4
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x334650 Offset: 0x332E50 VA: 0x180334650 Slot: 5
	public object Clone() { }
	// RVA: 0x334DF0 Offset: 0x3335F0 VA: 0x180334DF0
	public bool get_HasInfo() { }
	// RVA: 0x334E50 Offset: 0x333650 VA: 0x180334E50
	private bool get_HasUserData() { }
	// RVA: 0x334E80 Offset: 0x333680 VA: 0x180334E80
	private Hashtable get_Datastore() { }
	// RVA: 0x334F30 Offset: 0x333730 VA: 0x180334F30
	private static void .cctor() { }
}

// Namespace: 
internal struct LogicalCallContext.Reader // TypeDefIndex: 923
{
	// Fields
	private LogicalCallContext m_ctx; // 0x0

	// Properties
	public bool IsNull { get; }
	public bool HasInfo { get; }

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	public void .ctor(LogicalCallContext ctx) { }
	// RVA: 0xB620 Offset: 0xAA20 VA: 0x18000B620
	public bool get_IsNull() { }
	// RVA: 0xBA30 Offset: 0xAE30 VA: 0x18000BA30
	public bool get_HasInfo() { }
	// RVA: 0xBA40 Offset: 0xAE40 VA: 0x18000BA40
	public LogicalCallContext Clone() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class CallContextSecurityData : ICloneable // TypeDefIndex: 924
{
	// Fields
	private IPrincipal _principal; // 0x10

	// Properties
	internal bool HasInfo { get; }

	// Methods
	// RVA: 0x24D830 Offset: 0x24C030 VA: 0x18024D830
	internal bool get_HasInfo() { }
	// RVA: 0x24D8D0 Offset: 0x24C0D0 VA: 0x18024D8D0 Slot: 4
	public object Clone() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class CallContextRemotingData : ICloneable // TypeDefIndex: 925
{
	// Fields
	private string _logicalCallID; // 0x10

	// Properties
	internal bool HasInfo { get; }

	// Methods
	// RVA: 0x24D830 Offset: 0x24C030 VA: 0x18024D830
	internal bool get_HasInfo() { }
	// RVA: 0x24D840 Offset: 0x24C040 VA: 0x18024D840 Slot: 4
	public object Clone() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal enum ArgInfoType // TypeDefIndex: 926
{
	// Fields
	public byte value__; // 0x0
	public const ArgInfoType In = 0; // 0x0
	public const ArgInfoType Out = 1; // 0x0
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ArgInfo // TypeDefIndex: 927
{
	// Fields
	private int[] _paramMap; // 0x10
	private int _inoutArgCount; // 0x18
	private MethodBase _method; // 0x20

	// Methods
	// RVA: 0x2CF5A0 Offset: 0x2CDDA0 VA: 0x1802CF5A0
	public void .ctor(MethodBase method, ArgInfoType type) { }
	// RVA: 0x2CF7C0 Offset: 0x2CDFC0 VA: 0x1802CF7C0
	public object[] GetInOutArgs(object[] args) { }
}

// Namespace: System.Runtime.Remoting.Messaging
public class AsyncResult : IAsyncResult, IMessageSink, IThreadPoolWorkItem // TypeDefIndex: 928
{
	// Fields
	private object async_state; // 0x10
	private WaitHandle handle; // 0x18
	private object async_delegate; // 0x20
	private IntPtr data; // 0x28
	private object object_data; // 0x30
	private bool sync_completed; // 0x38
	private bool completed; // 0x39
	private bool endinvoke_called; // 0x3A
	private object async_callback; // 0x40
	private ExecutionContext current; // 0x48
	private ExecutionContext original; // 0x50
	private long add_time; // 0x58
	private MonoMethodMessage call_message; // 0x60
	private IMessageCtrl message_ctrl; // 0x68
	private IMessage reply_message; // 0x70
	private WaitCallback orig_cb; // 0x78
	internal static ContextCallback ccb; // 0x0

	// Properties
	public virtual WaitHandle AsyncWaitHandle { get; }
	public virtual object AsyncDelegate { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x2D8520 Offset: 0x2D6D20 VA: 0x1802D8520
	private static void WaitCallback_Context(object state) { }
	// RVA: 0x2D85F0 Offset: 0x2D6DF0 VA: 0x1802D85F0 Slot: 9
	public virtual WaitHandle get_AsyncWaitHandle() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0 Slot: 10
	public virtual object get_AsyncDelegate() { }
	// RVA: 0x2D8800 Offset: 0x2D7000 VA: 0x1802D8800 Slot: 11
	public virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// RVA: 0x2D8850 Offset: 0x2D7050 VA: 0x1802D8850 Slot: 12
	public virtual IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x2D8A50 Offset: 0x2D7250 VA: 0x1802D8A50 Slot: 7
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 8
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }
	// RVA: 0x2D8B50 Offset: 0x2D7350 VA: 0x1802D8B50
	internal object Invoke() { }
	// RVA: 0x2D8C70 Offset: 0x2D7470 VA: 0x1802D8C70
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADArgHolder // TypeDefIndex: 929
{
	// Fields
	public int index; // 0x10

	// Methods
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int i) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADObjRef // TypeDefIndex: 930
{
	// Fields
	internal ObjRef objref; // 0x10
	internal int SourceDomain; // 0x18
	internal byte[] TypeInfo; // 0x20

	// Methods
	// RVA: 0x248B10 Offset: 0x247310 VA: 0x180248B10
	public void .ctor(ObjRef o, int sourceDomain) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class CADMethodRef // TypeDefIndex: 931
{
	// Fields
	private bool ctor; // 0x10
	private string typeName; // 0x18
	private string methodName; // 0x20
	private string[] param_names; // 0x28
	private string[] generic_arg_names; // 0x30

	// Methods
	// RVA: 0x247A50 Offset: 0x246250 VA: 0x180247A50
	private Type[] GetTypes(string[] typeArray) { }
	// RVA: 0x247BC0 Offset: 0x2463C0 VA: 0x180247BC0
	public MethodBase Resolve() { }
	// RVA: 0x248140 Offset: 0x246940 VA: 0x180248140
	public void .ctor(IMethodMessage msg) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMessageBase // TypeDefIndex: 932
{
	// Fields
	protected object[] _args; // 0x10
	protected byte[] _serializedArgs; // 0x18
	protected int _propertyCount; // 0x20
	protected CADArgHolder _callContext; // 0x28
	internal byte[] serializedMethod; // 0x30

	// Methods
	// RVA: 0x245810 Offset: 0x244010 VA: 0x180245810
	public void .ctor(IMethodMessage msg) { }
	// RVA: 0x2458E0 Offset: 0x2440E0 VA: 0x1802458E0
	internal MethodBase GetMethod() { }
	// RVA: 0x2459F0 Offset: 0x2441F0 VA: 0x1802459F0
	protected static Type[] GetSignature(MethodBase methodBase, bool load) { }
	// RVA: 0x245C30 Offset: 0x244430 VA: 0x180245C30
	internal static int MarshalProperties(IDictionary dict, ref ArrayList args) { }
	// RVA: 0x246110 Offset: 0x244910 VA: 0x180246110
	internal static void UnmarshalProperties(IDictionary dict, int count, ArrayList args) { }
	// RVA: 0x2462A0 Offset: 0x244AA0 VA: 0x1802462A0
	private static bool IsPossibleToIgnoreMarshal(object obj) { }
	// RVA: 0x2464C0 Offset: 0x244CC0 VA: 0x1802464C0
	protected object MarshalArgument(object arg, ref ArrayList args) { }
	// RVA: 0x246660 Offset: 0x244E60 VA: 0x180246660
	protected object UnmarshalArgument(object arg, ArrayList args) { }
	// RVA: 0x246FB0 Offset: 0x2457B0 VA: 0x180246FB0
	internal object[] MarshalArguments(object[] arguments, ref ArrayList args) { }
	// RVA: 0x247190 Offset: 0x245990 VA: 0x180247190
	internal object[] UnmarshalArguments(object[] arguments, ArrayList args) { }
	// RVA: 0x247370 Offset: 0x245B70 VA: 0x180247370
	protected void SaveLogicalCallContext(IMethodMessage msg, ref ArrayList serializeList) { }
	// RVA: 0x2474F0 Offset: 0x245CF0 VA: 0x1802474F0
	internal LogicalCallContext GetLogicalCallContext(ArrayList args) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodCallMessage : CADMessageBase // TypeDefIndex: 933
{
	// Fields
	private string _uri; // 0x38

	// Methods
	// RVA: 0x2475D0 Offset: 0x245DD0 VA: 0x1802475D0
	internal static CADMethodCallMessage Create(IMessage callMsg) { }
	// RVA: 0x2477C0 Offset: 0x245FC0 VA: 0x1802477C0
	internal void .ctor(IMethodCallMessage callMsg) { }
	// RVA: 0x247920 Offset: 0x246120 VA: 0x180247920
	internal ArrayList GetArguments() { }
	// RVA: 0x247A40 Offset: 0x246240 VA: 0x180247A40
	internal object[] GetArgs(ArrayList args) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodReturnMessage : CADMessageBase // TypeDefIndex: 934
{
	// Fields
	private object _returnValue; // 0x38
	private CADArgHolder _exception; // 0x40
	private Type[] _sig; // 0x48

	// Methods
	// RVA: 0x2485F0 Offset: 0x246DF0 VA: 0x1802485F0
	internal static CADMethodReturnMessage Create(IMessage callMsg) { }
	// RVA: 0x2486B0 Offset: 0x246EB0 VA: 0x1802486B0
	internal void .ctor(IMethodReturnMessage retMsg) { }
	// RVA: 0x2488D0 Offset: 0x2470D0 VA: 0x1802488D0
	internal ArrayList GetArguments() { }
	// RVA: 0x247A40 Offset: 0x246240 VA: 0x180247A40
	internal object[] GetArgs(ArrayList args) { }
	// RVA: 0x2489F0 Offset: 0x2471F0 VA: 0x1802489F0
	internal object GetReturnValue(ArrayList args) { }
	// RVA: 0x248A00 Offset: 0x247200 VA: 0x180248A00
	internal Exception GetException(ArrayList args) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextTerminatorSink : IMessageSink // TypeDefIndex: 935
{
	// Fields
	private Context _context; // 0x10

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(Context ctx) { }
	// RVA: 0x257A80 Offset: 0x256280 VA: 0x180257A80 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x257CD0 Offset: 0x2564D0 VA: 0x180257CD0 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextReplySink : IMessageSink // TypeDefIndex: 936
{
	// Fields
	private IMessageSink _replySink; // 0x10
	private Context _context; // 0x18

	// Methods
	// RVA: 0x1D8C70 Offset: 0x1D7470 VA: 0x1801D8C70
	public void .ctor(Context ctx, IMessageSink replySink) { }
	// RVA: 0x257900 Offset: 0x256100 VA: 0x180257900 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x257A30 Offset: 0x256230 VA: 0x180257A30 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class ConstructionCall : MethodCall, IConstructionCallMessage, IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 937
{
	// Fields
	private IActivator _activator; // 0x68
	private object[] _activationAttributes; // 0x70
	private IList _contextProperties; // 0x78
	private Type _activationType; // 0x80
	private string _activationTypeName; // 0x88
	private bool _isContextOk; // 0x90
	private RemotingProxy _sourceProxy; // 0x98

	// Properties
	public Type ActivationType { get; }
	public string ActivationTypeName { get; }
	public IActivator Activator { get; set; }
	public object[] CallSiteActivationAttributes { get; }
	public IList ContextProperties { get; }
	public override IDictionary Properties { get; }

	// Methods
	// RVA: 0x262740 Offset: 0x260F40 VA: 0x180262740
	internal void .ctor(Type type) { }
	// RVA: 0x262790 Offset: 0x260F90 VA: 0x180262790
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x262830 Offset: 0x261030 VA: 0x180262830 Slot: 21
	internal override void InitDictionary() { }
	// RVA: 0x262980 Offset: 0x261180 VA: 0x180262980 Slot: 22
	public Type get_ActivationType() { }
	// RVA: 0x262A60 Offset: 0x261260 VA: 0x180262A60 Slot: 23
	public string get_ActivationTypeName() { }
	// RVA: 0x262A70 Offset: 0x261270 VA: 0x180262A70 Slot: 24
	public IActivator get_Activator() { }
	// RVA: 0x21EFD0 Offset: 0x21D7D0 VA: 0x18021EFD0 Slot: 25
	public void set_Activator(IActivator value) { }
	// RVA: 0x262A80 Offset: 0x261280 VA: 0x180262A80 Slot: 26
	public object[] get_CallSiteActivationAttributes() { }
	// RVA: 0x262A90 Offset: 0x261290 VA: 0x180262A90 Slot: 27
	public IList get_ContextProperties() { }
	// RVA: 0x262B30 Offset: 0x261330 VA: 0x180262B30 Slot: 18
	internal override void InitMethodProperty(string key, object value) { }
	// RVA: 0x262F90 Offset: 0x261790 VA: 0x180262F90 Slot: 19
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x2630E0 Offset: 0x2618E0 VA: 0x1802630E0 Slot: 20
	public override IDictionary get_Properties() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ConstructionCallDictionary : MessageDictionary // TypeDefIndex: 938
{
	// Fields
	public static string[] InternalKeys; // 0xAC0EE

	// Methods
	// RVA: 0x263110 Offset: 0x261910 VA: 0x180263110
	public void .ctor(IConstructionCallMessage message) { }
	// RVA: 0x2631C0 Offset: 0x2619C0 VA: 0x1802631C0 Slot: 12
	protected override object GetMethodProperty(string key) { }
	// RVA: 0x263720 Offset: 0x261F20 VA: 0x180263720 Slot: 13
	protected override void SetMethodProperty(string key, object value) { }
	// RVA: 0x263B40 Offset: 0x262340 VA: 0x180263B40
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class ConstructionResponse : MethodResponse, IConstructionReturnMessage, IMethodReturnMessage, IMethodMessage, IMessage // TypeDefIndex: 939
{
	// Properties
	public override IDictionary Properties { get; }

	// Methods
	// RVA: 0x264090 Offset: 0x262890 VA: 0x180264090
	internal void .ctor(object resultObject, LogicalCallContext callCtx, IMethodCallMessage msg) { }
	// RVA: 0x2640C0 Offset: 0x2628C0 VA: 0x1802640C0
	internal void .ctor(Exception e, IMethodCallMessage msg) { }
	// RVA: 0x2640D0 Offset: 0x2628D0 VA: 0x1802640D0
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x264160 Offset: 0x262960 VA: 0x180264160 Slot: 21
	public override IDictionary get_Properties() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class EnvoyTerminatorSink : IMessageSink // TypeDefIndex: 940
{
	// Fields
	public static EnvoyTerminatorSink Instance; // 0xA171D0

	// Methods
	// RVA: 0x48FFC0 Offset: 0x48E7C0 VA: 0x18048FFC0 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x490080 Offset: 0x48E880 VA: 0x180490080 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x490160 Offset: 0x48E960 VA: 0x180490160
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class ErrorMessage : IMethodCallMessage, IMethodMessage, IMessage // TypeDefIndex: 941
{
	// Fields
	private string _uri; // 0x10

	// Properties
	public object[] Args { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public string TypeName { get; }
	public string Uri { get; }
	public LogicalCallContext LogicalCallContext { get; }

	// Methods
	// RVA: 0x4902E0 Offset: 0x48EAE0 VA: 0x1804902E0
	public void .ctor() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 4
	public object[] get_Args() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 6
	public MethodBase get_MethodBase() { }
	// RVA: 0x490370 Offset: 0x48EB70 VA: 0x180490370 Slot: 7
	public string get_MethodName() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 8
	public object get_MethodSignature() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 13
	public virtual IDictionary get_Properties() { }
	// RVA: 0x4903E0 Offset: 0x48EBE0 VA: 0x1804903E0 Slot: 9
	public string get_TypeName() { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 10
	public string get_Uri() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 11
	public object GetArg(int arg_num) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 5
	public LogicalCallContext get_LogicalCallContext() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class Header // TypeDefIndex: 942
{
	// Fields
	public string HeaderNamespace; // 0x10
	public bool MustUnderstand; // 0x18
	public string Name; // 0x20
	public object Value; // 0x28
}

// Namespace: System.Runtime.Remoting.Messaging
public sealed class HeaderHandler : MulticastDelegate // TypeDefIndex: 943
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x774090 Offset: 0x772890 VA: 0x180774090 Slot: 12
	public virtual object Invoke(Header[] headers) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(Header[] headers, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual object EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal interface IInternalMessage // TypeDefIndex: 944
{
	// Properties
	public abstract Identity TargetIdentity { get; set; }
	public abstract string Uri { get; set; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract Identity get_TargetIdentity() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_TargetIdentity(Identity value) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract string get_Uri() { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void set_Uri(string value) { }
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessage // TypeDefIndex: 945
{
	// Properties
	public abstract IDictionary Properties { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IDictionary get_Properties() { }
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessageCtrl // TypeDefIndex: 946
{}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessageSink // TypeDefIndex: 947
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodCallMessage : IMethodMessage, IMessage // TypeDefIndex: 948
{}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodMessage : IMessage // TypeDefIndex: 949
{
	// Properties
	public abstract object[] Args { get; }
	public abstract LogicalCallContext LogicalCallContext { get; }
	public abstract MethodBase MethodBase { get; }
	public abstract string MethodName { get; }
	public abstract object MethodSignature { get; }
	public abstract string TypeName { get; }
	public abstract string Uri { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract object[] get_Args() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract LogicalCallContext get_LogicalCallContext() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract MethodBase get_MethodBase() { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract string get_MethodName() { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract object get_MethodSignature() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract string get_TypeName() { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract string get_Uri() { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract object GetArg(int argNum) { }
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodReturnMessage : IMethodMessage, IMessage // TypeDefIndex: 950
{
	// Properties
	public abstract Exception Exception { get; }
	public abstract object[] OutArgs { get; }
	public abstract object ReturnValue { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract Exception get_Exception() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract object[] get_OutArgs() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract object get_ReturnValue() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class MethodCall : IMethodCallMessage, IMethodMessage, IMessage, ISerializable, IInternalMessage // TypeDefIndex: 951
{
	// Fields
	private string _uri; // 0x10
	private string _typeName; // 0x18
	private string _methodName; // 0x20
	private object[] _args; // 0x28
	private Type[] _methodSignature; // 0x30
	private MethodBase _methodBase; // 0x38
	private LogicalCallContext _callContext; // 0x40
	private Identity _targetIdentity; // 0x48
	private Type[] _genericArguments; // 0x50
	protected IDictionary ExternalProperties; // 0x58
	protected IDictionary InternalProperties; // 0x60

	// Properties
	public object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public string TypeName { get; }
	public string Uri { get; }
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	private Type[] GenericArguments { get; }

	// Methods
	// RVA: 0x262790 Offset: 0x260F90 VA: 0x180262790
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x341B50 Offset: 0x340350 VA: 0x180341B50
	internal void .ctor(CADMethodCallMessage msg) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x341D50 Offset: 0x340550 VA: 0x180341D50 Slot: 18
	internal virtual void InitMethodProperty(string key, object value) { }
	// RVA: 0x342430 Offset: 0x340C30 VA: 0x180342430 Slot: 19
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900 Slot: 4
	public object[] get_Args() { }
	// RVA: 0x342720 Offset: 0x340F20 VA: 0x180342720 Slot: 5
	public LogicalCallContext get_LogicalCallContext() { }
	// RVA: 0x3427B0 Offset: 0x340FB0 VA: 0x1803427B0 Slot: 6
	public MethodBase get_MethodBase() { }
	// RVA: 0x342840 Offset: 0x341040 VA: 0x180342840 Slot: 7
	public string get_MethodName() { }
	// RVA: 0x342880 Offset: 0x341080 VA: 0x180342880 Slot: 8
	public object get_MethodSignature() { }
	// RVA: 0x2630E0 Offset: 0x2618E0 VA: 0x1802630E0 Slot: 20
	public virtual IDictionary get_Properties() { }
	// RVA: 0x342AD0 Offset: 0x3412D0 VA: 0x180342AD0 Slot: 21
	internal virtual void InitDictionary() { }
	// RVA: 0x342BA0 Offset: 0x3413A0 VA: 0x180342BA0 Slot: 9
	public string get_TypeName() { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 10
	public string get_Uri() { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 16
	private string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0 Slot: 17
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value) { }
	// RVA: 0x342C00 Offset: 0x341400 VA: 0x180342C00 Slot: 11
	public object GetArg(int argNum) { }
	// RVA: 0x342C40 Offset: 0x341440 VA: 0x180342C40
	public void ResolveMethod() { }
	// RVA: 0x3433D0 Offset: 0x341BD0 VA: 0x1803433D0
	private Type CastTo(string clientType, Type serverType) { }
	// RVA: 0x3437A0 Offset: 0x341FA0 VA: 0x1803437A0
	private static string GetTypeNameFromAssemblyQualifiedName(string aqname) { }
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0 Slot: 14
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }
	// RVA: 0x16C1B0 Offset: 0x16A9B0 VA: 0x18016C1B0 Slot: 15
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }
	// RVA: 0x343890 Offset: 0x342090 VA: 0x180343890
	private Type[] get_GenericArguments() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MCMDictionary : MessageDictionary // TypeDefIndex: 952
{
	// Fields
	public static string[] InternalKeys; // 0xAC0F0

	// Methods
	// RVA: 0x3355F0 Offset: 0x333DF0 VA: 0x1803355F0
	public void .ctor(IMethodMessage message) { }
	// RVA: 0x3356A0 Offset: 0x333EA0 VA: 0x1803356A0
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
internal class MessageDictionary : IDictionary, ICollection, IEnumerable // TypeDefIndex: 953
{
	// Fields
	private IDictionary _internalProperties; // 0x10
	protected IMethodMessage _message; // 0x18
	private string[] _methodKeys; // 0x20
	private bool _ownProperties; // 0x28

	// Properties
	internal IDictionary InternalDictionary { get; }
	public object Item { get; set; }
	public ICollection Values { get; }
	public int Count { get; }

	// Methods
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void .ctor(IMethodMessage message) { }
	// RVA: 0x33ED00 Offset: 0x33D500 VA: 0x18033ED00
	internal bool HasUserData() { }
	// RVA: 0x33EE60 Offset: 0x33D660 VA: 0x18033EE60
	internal IDictionary get_InternalDictionary() { }
	// RVA: 0x33EFA0 Offset: 0x33D7A0 VA: 0x18033EFA0 Slot: 11
	protected virtual IDictionary AllocInternalProperties() { }
	// RVA: 0x33F040 Offset: 0x33D840 VA: 0x18033F040
	public IDictionary GetInternalProperties() { }
	// RVA: 0x33F070 Offset: 0x33D870 VA: 0x18033F070
	private bool IsOverridenKey(string key) { }
	// RVA: 0x33F160 Offset: 0x33D960 VA: 0x18033F160 Slot: 4
	public object get_Item(object key) { }
	// RVA: 0x33F320 Offset: 0x33DB20 VA: 0x18033F320 Slot: 5
	public void set_Item(object key, object value) { }
	// RVA: 0x33F330 Offset: 0x33DB30 VA: 0x18033F330 Slot: 12
	protected virtual object GetMethodProperty(string key) { }
	// RVA: 0x33FA60 Offset: 0x33E260 VA: 0x18033FA60 Slot: 13
	protected virtual void SetMethodProperty(string key, object value) { }
	// RVA: 0x340080 Offset: 0x33E880 VA: 0x180340080 Slot: 14
	public ICollection get_Values() { }
	// RVA: 0x340560 Offset: 0x33ED60 VA: 0x180340560 Slot: 15
	public void Add(object key, object value) { }
	// RVA: 0x340730 Offset: 0x33EF30 VA: 0x180340730 Slot: 6
	public bool Contains(object key) { }
	// RVA: 0x3408E0 Offset: 0x33F0E0 VA: 0x1803408E0 Slot: 9
	public int get_Count() { }
	// RVA: 0x340990 Offset: 0x33F190 VA: 0x180340990 Slot: 8
	public void CopyTo(Array array, int index) { }
	// RVA: 0x340A40 Offset: 0x33F240 VA: 0x180340A40 Slot: 10
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x340AE0 Offset: 0x33F2E0 VA: 0x180340AE0 Slot: 7
	public IDictionaryEnumerator GetEnumerator() { }
}

// Namespace: 
private class MessageDictionary.DictionaryEnumerator : IDictionaryEnumerator, IEnumerator // TypeDefIndex: 954
{
	// Fields
	private MessageDictionary _methodDictionary; // 0x10
	private IDictionaryEnumerator _hashtableEnum; // 0x18
	private int _posMethod; // 0x20

	// Properties
	public object Current { get; }
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }

	// Methods
	// RVA: 0x2721E0 Offset: 0x2709E0 VA: 0x1802721E0
	public void .ctor(MessageDictionary methodDictionary) { }
	// RVA: 0x2722A0 Offset: 0x270AA0 VA: 0x1802722A0 Slot: 8
	public object get_Current() { }
	// RVA: 0x272340 Offset: 0x270B40 VA: 0x180272340 Slot: 7
	public bool MoveNext() { }
	// RVA: 0x272480 Offset: 0x270C80 VA: 0x180272480 Slot: 6
	public DictionaryEntry get_Entry() { }
	// RVA: 0x272630 Offset: 0x270E30 VA: 0x180272630 Slot: 4
	public object get_Key() { }
	// RVA: 0x272650 Offset: 0x270E50 VA: 0x180272650 Slot: 5
	public object get_Value() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class MethodResponse : IMethodReturnMessage, IMethodMessage, IMessage, ISerializable, IInternalMessage // TypeDefIndex: 955
{
	// Fields
	private string _methodName; // 0x10
	private string _uri; // 0x18
	private string _typeName; // 0x20
	private MethodBase _methodBase; // 0x28
	private object _returnValue; // 0x30
	private Exception _exception; // 0x38
	private Type[] _methodSignature; // 0x40
	private ArgInfo _inArgInfo; // 0x48
	private object[] _args; // 0x50
	private object[] _outArgs; // 0x58
	private IMethodCallMessage _callMsg; // 0x60
	private LogicalCallContext _callContext; // 0x68
	private Identity _targetIdentity; // 0x70
	protected IDictionary ExternalProperties; // 0x78
	protected IDictionary InternalProperties; // 0x80

	// Properties
	public object[] Args { get; }
	public Exception Exception { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public object[] OutArgs { get; }
	public virtual IDictionary Properties { get; }
	public object ReturnValue { get; }
	public string TypeName { get; }
	public string Uri { get; }
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }

	// Methods
	// RVA: 0x343BF0 Offset: 0x3423F0 VA: 0x180343BF0
	internal void .ctor(Exception e, IMethodCallMessage msg) { }
	// RVA: 0x343CD0 Offset: 0x3424D0 VA: 0x180343CD0
	internal void .ctor(object returnValue, object[] outArgs, LogicalCallContext callCtx, IMethodCallMessage msg) { }
	// RVA: 0x343D90 Offset: 0x342590 VA: 0x180343D90
	internal void .ctor(IMethodCallMessage msg, CADMethodReturnMessage retmsg) { }
	// RVA: 0x2640D0 Offset: 0x2628D0 VA: 0x1802640D0
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x3440B0 Offset: 0x3428B0 VA: 0x1803440B0
	internal void InitMethodProperty(string key, object value) { }
	// RVA: 0x1E31F0 Offset: 0x1E19F0 VA: 0x1801E31F0 Slot: 7
	public object[] get_Args() { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0 Slot: 4
	public Exception get_Exception() { }
	// RVA: 0x3447C0 Offset: 0x342FC0 VA: 0x1803447C0 Slot: 8
	public LogicalCallContext get_LogicalCallContext() { }
	// RVA: 0x344850 Offset: 0x343050 VA: 0x180344850 Slot: 9
	public MethodBase get_MethodBase() { }
	// RVA: 0x344A80 Offset: 0x343280 VA: 0x180344A80 Slot: 10
	public string get_MethodName() { }
	// RVA: 0x344B20 Offset: 0x343320 VA: 0x180344B20 Slot: 11
	public object get_MethodSignature() { }
	// RVA: 0x344C00 Offset: 0x343400 VA: 0x180344C00 Slot: 5
	public object[] get_OutArgs() { }
	// RVA: 0x264160 Offset: 0x262960 VA: 0x180264160 Slot: 21
	public virtual IDictionary get_Properties() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0 Slot: 6
	public object get_ReturnValue() { }
	// RVA: 0x344CF0 Offset: 0x3434F0 VA: 0x180344CF0 Slot: 12
	public string get_TypeName() { }
	// RVA: 0x344D90 Offset: 0x343590 VA: 0x180344D90 Slot: 13
	public string get_Uri() { }
	// RVA: 0x344D90 Offset: 0x343590 VA: 0x180344D90 Slot: 19
	private string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0 Slot: 20
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value) { }
	// RVA: 0x344E30 Offset: 0x343630 VA: 0x180344E30 Slot: 14
	public object GetArg(int argNum) { }
	// RVA: 0x344E70 Offset: 0x343670 VA: 0x180344E70 Slot: 22
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x262A80 Offset: 0x261280 VA: 0x180262A80 Slot: 17
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }
	// RVA: 0x345180 Offset: 0x343980 VA: 0x180345180 Slot: 18
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MethodReturnDictionary : MessageDictionary // TypeDefIndex: 956
{
	// Fields
	public static string[] InternalReturnKeys; // 0x0
	public static string[] InternalExceptionKeys; // 0x8

	// Methods
	// RVA: 0x345190 Offset: 0x343990 VA: 0x180345190
	public void .ctor(IMethodReturnMessage message) { }
	// RVA: 0x3452A0 Offset: 0x343AA0 VA: 0x1803452A0
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class MonoMethodMessage : IMethodCallMessage, IMessage, IInternalMessage // TypeDefIndex: 957
{
	// Fields
	private MonoMethod method; // 0x10
	private object[] args; // 0x18
	private string[] names; // 0x20
	private byte[] arg_types; // 0x28
	public LogicalCallContext ctx; // 0x30
	public object rval; // 0x38
	public Exception exc; // 0x40
	private AsyncResult asyncResult; // 0x48
	private CallType call_type; // 0x50
	private string uri; // 0x58
	private MCMDictionary properties; // 0x60
	private Type[] methodSignature; // 0x68
	private Identity identity; // 0x70
	internal static string CallContextKey; // 0x0
	internal static string UriKey; // 0x8

	// Properties
	public IDictionary Properties { get; }
	public object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public string TypeName { get; }
	public string Uri { get; set; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }
	internal CallType CallType { get; }

	// Methods
	// RVA: 0x742FF0 Offset: 0x7417F0 VA: 0x180742FF0 Slot: 12
	public IDictionary get_Properties() { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	public object[] get_Args() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0 Slot: 5
	public LogicalCallContext get_LogicalCallContext() { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 6
	public MethodBase get_MethodBase() { }
	// RVA: 0x743090 Offset: 0x741890 VA: 0x180743090 Slot: 7
	public string get_MethodName() { }
	// RVA: 0x7431B0 Offset: 0x7419B0 VA: 0x1807431B0 Slot: 8
	public object get_MethodSignature() { }
	// RVA: 0x7433A0 Offset: 0x741BA0 VA: 0x1807433A0 Slot: 9
	public string get_TypeName() { }
	// RVA: 0x3120C0 Offset: 0x3108C0 VA: 0x1803120C0 Slot: 15
	public string get_Uri() { }
	// RVA: 0x3120D0 Offset: 0x3108D0 VA: 0x1803120D0 Slot: 16
	public void set_Uri(string value) { }
	// RVA: 0x7434E0 Offset: 0x741CE0 VA: 0x1807434E0 Slot: 11
	public object GetArg(int arg_num) { }
	// RVA: 0x262A80 Offset: 0x261280 VA: 0x180262A80 Slot: 13
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }
	// RVA: 0x345180 Offset: 0x343980 VA: 0x180345180 Slot: 14
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }
	// RVA: 0x743520 Offset: 0x741D20 VA: 0x180743520
	internal CallType get_CallType() { }
	// RVA: 0x743680 Offset: 0x741E80 VA: 0x180743680
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal enum CallType // TypeDefIndex: 958
{
	// Fields
	public int value__; // 0x0
	public const CallType Sync = 0; // 0x0
	public const CallType BeginInvoke = 1; // 0x0
	public const CallType EndInvoke = 2; // 0x0
	public const CallType OneWay = 3; // 0x0
}

// Namespace: System.Runtime.Remoting.Messaging
[AttributeUsageAttribute] // RVA: 0xD9A10 Offset: 0xD8E10 VA: 0x1800D9A10
public class OneWayAttribute : Attribute // TypeDefIndex: 959
{}

// Namespace: System.Runtime.Remoting.Messaging
internal class RemotingSurrogate : ISerializationSurrogate // TypeDefIndex: 960
{
	// Methods
	// RVA: 0x36F880 Offset: 0x36E080 VA: 0x18036F880 Slot: 6
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc) { }
	// RVA: 0x36F950 Offset: 0x36E150 VA: 0x18036F950 Slot: 7
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ObjRefSurrogate : ISerializationSurrogate // TypeDefIndex: 961
{
	// Methods
	// RVA: 0x756210 Offset: 0x754A10 VA: 0x180756210 Slot: 6
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc) { }
	// RVA: 0x756390 Offset: 0x754B90 VA: 0x180756390 Slot: 7
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
public class RemotingSurrogateSelector : ISurrogateSelector // TypeDefIndex: 962
{
	// Fields
	private static Type s_cachedTypeObjRef; // 0x0
	private static ObjRefSurrogate _objRefSurrogate; // 0x8
	private static RemotingSurrogate _objRemotingSurrogate; // 0x10
	private ISurrogateSelector _next; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x36F9A0 Offset: 0x36E1A0 VA: 0x18036F9A0 Slot: 5
	public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector ssout) { }
	// RVA: 0x36FB60 Offset: 0x36E360 VA: 0x18036FB60
	private static void .cctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
public class ReturnMessage : IMethodReturnMessage, IMethodMessage, IMessage, IInternalMessage // TypeDefIndex: 963
{
	// Fields
	private object[] _outArgs; // 0x10
	private object[] _args; // 0x18
	private LogicalCallContext _callCtx; // 0x20
	private object _returnValue; // 0x28
	private string _uri; // 0x30
	private Exception _exception; // 0x38
	private MethodBase _methodBase; // 0x40
	private string _methodName; // 0x48
	private Type[] _methodSignature; // 0x50
	private string _typeName; // 0x58
	private MethodReturnDictionary _properties; // 0x60
	private Identity _targetIdentity; // 0x68
	private ArgInfo _inArgInfo; // 0x70

	// Properties
	public object[] Args { get; }
	public LogicalCallContext LogicalCallContext { get; }
	public MethodBase MethodBase { get; }
	public string MethodName { get; }
	public object MethodSignature { get; }
	public virtual IDictionary Properties { get; }
	public string TypeName { get; }
	public string Uri { get; }
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; }
	public Exception Exception { get; }
	public object[] OutArgs { get; }
	public virtual object ReturnValue { get; }
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; }

	// Methods
	// RVA: 0x3702B0 Offset: 0x36EAB0 VA: 0x1803702B0
	public void .ctor(object ret, object[] outArgs, int outArgsCount, LogicalCallContext callCtx, IMethodCallMessage mcm) { }
	// RVA: 0x3703A0 Offset: 0x36EBA0 VA: 0x1803703A0
	public void .ctor(Exception e, IMethodCallMessage mcm) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	public object[] get_Args() { }
	// RVA: 0x370460 Offset: 0x36EC60 VA: 0x180370460 Slot: 8
	public LogicalCallContext get_LogicalCallContext() { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130 Slot: 9
	public MethodBase get_MethodBase() { }
	// RVA: 0x3704F0 Offset: 0x36ECF0 VA: 0x1803704F0 Slot: 10
	public string get_MethodName() { }
	// RVA: 0x3705A0 Offset: 0x36EDA0 VA: 0x1803705A0 Slot: 11
	public object get_MethodSignature() { }
	// RVA: 0x3707F0 Offset: 0x36EFF0 VA: 0x1803707F0 Slot: 20
	public virtual IDictionary get_Properties() { }
	// RVA: 0x370890 Offset: 0x36F090 VA: 0x180370890 Slot: 12
	public string get_TypeName() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0 Slot: 13
	public string get_Uri() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0 Slot: 18
	private string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri() { }
	// RVA: 0x1A20C0 Offset: 0x1A08C0 VA: 0x1801A20C0 Slot: 19
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value) { }
	// RVA: 0x370960 Offset: 0x36F160 VA: 0x180370960 Slot: 14
	public object GetArg(int argNum) { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0 Slot: 4
	public Exception get_Exception() { }
	// RVA: 0x3709A0 Offset: 0x36F1A0 VA: 0x1803709A0 Slot: 5
	public object[] get_OutArgs() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900 Slot: 21
	public virtual object get_ReturnValue() { }
	// RVA: 0x262A70 Offset: 0x261270 VA: 0x180262A70 Slot: 16
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity() { }
	// RVA: 0x21EFD0 Offset: 0x21D7D0 VA: 0x18021EFD0 Slot: 17
	private void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(Identity value) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerContextTerminatorSink : IMessageSink // TypeDefIndex: 964
{
	// Methods
	// RVA: 0x1D83D0 Offset: 0x1D6BD0 VA: 0x1801D83D0 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x1D8540 Offset: 0x1D6D40 VA: 0x1801D8540 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectTerminatorSink : IMessageSink // TypeDefIndex: 965
{
	// Fields
	private IMessageSink _nextSink; // 0x10

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(IMessageSink nextSink) { }
	// RVA: 0x1D8DE0 Offset: 0x1D75E0 VA: 0x1801D8DE0 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x1D8FA0 Offset: 0x1D77A0 VA: 0x1801D8FA0 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectReplySink : IMessageSink // TypeDefIndex: 966
{
	// Fields
	private IMessageSink _replySink; // 0x10
	private ServerIdentity _identity; // 0x18

	// Methods
	// RVA: 0x1D8C70 Offset: 0x1D7470 VA: 0x1801D8C70
	public void .ctor(ServerIdentity identity, IMessageSink replySink) { }
	// RVA: 0x1D8C80 Offset: 0x1D7480 VA: 0x1801D8C80 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x1D8D80 Offset: 0x1D7580 VA: 0x1801D8D80 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
}

// Namespace: System.Runtime.Remoting.Messaging
internal class StackBuilderSink : IMessageSink // TypeDefIndex: 967
{
	// Fields
	private MarshalByRefObject _target; // 0x10
	private RealProxy _rp; // 0x18

	// Methods
	// RVA: 0x1E98B0 Offset: 0x1E80B0 VA: 0x1801E98B0
	public void .ctor(MarshalByRefObject obj, bool forceInternalExecute) { }
	// RVA: 0x1E9970 Offset: 0x1E8170 VA: 0x1801E9970 Slot: 4
	public IMessage SyncProcessMessage(IMessage msg) { }
	// RVA: 0x1E9A80 Offset: 0x1E8280 VA: 0x1801E9A80 Slot: 5
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink) { }
	// RVA: 0x1E9BF0 Offset: 0x1E83F0 VA: 0x1801E9BF0
	private void ExecuteAsyncMessage(object ob) { }
	// RVA: 0x1EA1F0 Offset: 0x1E89F0 VA: 0x1801EA1F0
	private void CheckParameters(IMessage msg) { }
	// RVA: 0x1EA570 Offset: 0x1E8D70 VA: 0x1801EA570
	private void <AsyncProcessMessage>b__4_0(object data) { }
}

// Namespace: System.Runtime.ExceptionServices
public class FirstChanceExceptionEventArgs : EventArgs // TypeDefIndex: 968
{}

// Namespace: System.Runtime.ExceptionServices
public sealed class ExceptionDispatchInfo // TypeDefIndex: 969
{
	// Fields
	private Exception m_Exception; // 0x10
	private object m_stackTrace; // 0x18

	// Properties
	public Exception SourceException { get; }

	// Methods
	// RVA: 0x492990 Offset: 0x491190 VA: 0x180492990
	private void .ctor(Exception exception) { }
	// RVA: 0x492AF0 Offset: 0x4912F0 VA: 0x180492AF0
	public static ExceptionDispatchInfo Capture(Exception source) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public Exception get_SourceException() { }
	// RVA: 0x492D00 Offset: 0x491500 VA: 0x180492D00
	public void Throw() { }
}

// Namespace: System.Runtime.ConstrainedExecution
public abstract class CriticalFinalizerObject // TypeDefIndex: 970
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x3F7F60 Offset: 0x3F6760 VA: 0x1803F7F60 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System.Runtime.CompilerServices
public struct AsyncTaskMethodBuilder<TResult> // TypeDefIndex: 971
{
	// Fields
	internal static readonly Task<TResult> s_defaultResultTask; // 0x0
	private AsyncMethodBuilderCore m_coreState; // 0x0
	private Task<TResult> m_task; // 0x0

	// Properties
	public Task<TResult> Task { get; }

	// Methods
	// RVA: 0x183D90 Offset: 0x182590 VA: 0x180183D90
	public static AsyncTaskMethodBuilder<TResult> Create() { }
	[DebuggerStepThroughAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x15D40 Offset: 0x15140 VA: 0x180015D40
	public void Start(ref TStateMachine stateMachine) { }
	// RVA: 0xDAF0 Offset: 0xCEF0 VA: 0x18000DAF0
	public void SetStateMachine(IAsyncStateMachine stateMachine) { }
	// RVA: 0x15D20 Offset: 0x15120 VA: 0x180015D20
	public void AwaitUnsafeOnCompleted(ref TAwaiter awaiter, ref TStateMachine stateMachine) { }
	// RVA: 0x226B0 Offset: 0x21AB0 VA: 0x1800226B0
	public Task<TResult> get_Task() { }
	// RVA: 0x226C0 Offset: 0x21AC0 VA: 0x1800226C0
	public void SetResult(TResult result) { }
	// RVA: 0x226D0 Offset: 0x21AD0 VA: 0x1800226D0
	public void SetException(Exception exception) { }
	// RVA: 0x226E0 Offset: 0x21AE0 VA: 0x1800226E0
	private Task<TResult> GetTaskForResult(TResult result) { }
	// RVA: 0x6154E0 Offset: 0x613CE0 VA: 0x1806154E0
	private static void .cctor() { }
}

// Namespace: System.Runtime.CompilerServices
internal static class AsyncTaskCache // TypeDefIndex: 972
{
	// Fields
	internal static readonly Task<bool> TrueTask; // 0x0
	internal static readonly Task<bool> FalseTask; // 0x8
	internal static readonly Task<int>[] Int32Tasks; // 0x10

	// Methods
	// RVA: 0x2D8D10 Offset: 0x2D7510 VA: 0x1802D8D10
	private static Task<int>[] CreateInt32Tasks() { }
	// RVA: 0x52D770 Offset: 0x52BF70 VA: 0x18052D770
	internal static Task<TResult> CreateCacheableTask(TResult result) { }
	// RVA: 0x2D8E30 Offset: 0x2D7630 VA: 0x1802D8E30
	private static void .cctor() { }
}

// Namespace: System.Runtime.CompilerServices
internal struct AsyncMethodBuilderCore // TypeDefIndex: 973
{
	// Fields
	internal IAsyncStateMachine m_stateMachine; // 0x0
	internal Action m_defaultContextAction; // 0x8

	// Methods
	// RVA: 0xDAF0 Offset: 0xCEF0 VA: 0x18000DAF0
	public void SetStateMachine(IAsyncStateMachine stateMachine) { }
	// RVA: 0xDB00 Offset: 0xCF00 VA: 0x18000DB00
	internal Action GetCompletionAction(Task taskForTracing, ref AsyncMethodBuilderCore.MoveNextRunner runnerToInitialize) { }
	// RVA: 0xDB10 Offset: 0xCF10 VA: 0x18000DB10
	private Action OutputAsyncCausalityEvents(Task innerTask, Action continuation) { }
	// RVA: 0xDB20 Offset: 0xCF20 VA: 0x18000DB20
	internal void PostBoxInitialization(IAsyncStateMachine stateMachine, AsyncMethodBuilderCore.MoveNextRunner runner, Task builtTask) { }
	// RVA: 0x2D7FE0 Offset: 0x2D67E0 VA: 0x1802D7FE0
	internal static void ThrowAsync(Exception exception, SynchronizationContext targetContext) { }
	// RVA: 0x2D82C0 Offset: 0x2D6AC0 VA: 0x1802D82C0
	internal static Action CreateContinuationWrapper(Action continuation, Action invokeAction, Task innerTask) { }
	// RVA: 0x2D8450 Offset: 0x2D6C50 VA: 0x1802D8450
	internal static Task TryGetContinuationTask(Action action) { }
}

// Namespace: 
internal sealed class AsyncMethodBuilderCore.MoveNextRunner // TypeDefIndex: 974
{
	// Fields
	private readonly ExecutionContext m_context; // 0x10
	internal IAsyncStateMachine m_stateMachine; // 0x18
	private static ContextCallback s_invokeMoveNext; // 0x0

	// Methods
	// RVA: 0x25B970 Offset: 0x25A170 VA: 0x18025B970
	internal void .ctor(ExecutionContext context, IAsyncStateMachine stateMachine) { }
	// RVA: 0x26B7D0 Offset: 0x269FD0 VA: 0x18026B7D0
	internal void Run() { }
	// RVA: 0x26B970 Offset: 0x26A170 VA: 0x18026B970
	private static void InvokeMoveNext(object stateMachine) { }
}

// Namespace: 
private class AsyncMethodBuilderCore.ContinuationWrapper // TypeDefIndex: 975
{
	// Fields
	internal readonly Action m_continuation; // 0x10
	private readonly Action m_invokeAction; // 0x18
	internal readonly Task m_innerTask; // 0x20

	// Methods
	// RVA: 0x26B6C0 Offset: 0x269EC0 VA: 0x18026B6C0
	internal void .ctor(Action continuation, Action invokeAction, Task innerTask) { }
	// RVA: 0x26B7B0 Offset: 0x269FB0 VA: 0x18026B7B0
	internal void Invoke() { }
}

// Namespace: 
private sealed class AsyncMethodBuilderCore.<>c__DisplayClass4_0 // TypeDefIndex: 976
{
	// Fields
	public Task innerTask; // 0x10
	public Action continuation; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x26B680 Offset: 0x269E80 VA: 0x18026B680
	internal void <OutputAsyncCausalityEvents>b__0() { }
}

// Namespace: 
[Serializable]
private sealed class AsyncMethodBuilderCore.<>c // TypeDefIndex: 977
{
	// Fields
	public static readonly AsyncMethodBuilderCore.<>c <>9; // 0x0
	public static SendOrPostCallback <>9__6_0; // 0x8
	public static WaitCallback <>9__6_1; // 0x10

	// Methods
	// RVA: 0x26B540 Offset: 0x269D40 VA: 0x18026B540
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x26B5C0 Offset: 0x269DC0 VA: 0x18026B5C0
	internal void <ThrowAsync>b__6_0(object state) { }
	// RVA: 0x26B620 Offset: 0x269E20 VA: 0x18026B620
	internal void <ThrowAsync>b__6_1(object state) { }
}

// Namespace: System.Runtime.CompilerServices
public interface IAsyncStateMachine // TypeDefIndex: 978
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void MoveNext() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void SetStateMachine(IAsyncStateMachine stateMachine) { }
}

// Namespace: System.Runtime.CompilerServices
public interface ICriticalNotifyCompletion // TypeDefIndex: 979
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void UnsafeOnCompleted(Action continuation) { }
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class RuntimeWrappedException : Exception // TypeDefIndex: 980
{
	// Fields
	private object m_wrappedException; // 0x88

	// Methods
	// RVA: 0x381D30 Offset: 0x380530 VA: 0x180381D30
	private void .ctor(object thrownObject) { }
	// RVA: 0x381DF0 Offset: 0x3805F0 VA: 0x180381DF0 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x382000 Offset: 0x380800 VA: 0x180382000
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x382120 Offset: 0x380920 VA: 0x180382120
	internal void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
public struct TaskAwaiter : ICriticalNotifyCompletion // TypeDefIndex: 981
{
	// Fields
	private readonly Task m_task; // 0x0

	// Methods
	// RVA: 0x12BA0 Offset: 0x11FA0 VA: 0x180012BA0 Slot: 4
	public void UnsafeOnCompleted(Action continuation) { }
	// RVA: 0x399070 Offset: 0x397870 VA: 0x180399070
	internal static void ValidateEnd(Task task) { }
	// RVA: 0x399120 Offset: 0x397920 VA: 0x180399120
	private static void HandleNonSuccessAndDebuggerNotification(Task task) { }
	// RVA: 0x3991B0 Offset: 0x3979B0 VA: 0x1803991B0
	private static void ThrowForNonSuccess(Task task) { }
	// RVA: 0x399370 Offset: 0x397B70 VA: 0x180399370
	internal static void OnCompletedInternal(Task task, Action continuation, bool continueOnCapturedContext, bool flowExecutionContext) { }
}

// Namespace: System.Runtime.CompilerServices
public struct TaskAwaiter<TResult> : ICriticalNotifyCompletion // TypeDefIndex: 982
{
	// Fields
	private readonly Task<TResult> m_task; // 0x0

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	internal void .ctor(Task<TResult> task) { }
	// RVA: 0x12BA0 Offset: 0x11FA0 VA: 0x180012BA0 Slot: 4
	public void UnsafeOnCompleted(Action continuation) { }
	// RVA: 0x12DC50 Offset: 0x12D050 VA: 0x18012DC50
	public TResult GetResult() { }
}

// Namespace: System.Runtime.CompilerServices
public struct ConfiguredTaskAwaitable<TResult> // TypeDefIndex: 983
{
	// Fields
	private readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> m_configuredTaskAwaiter; // 0x0

	// Methods
	// RVA: 0x12DB90 Offset: 0x12CF90 VA: 0x18012DB90
	internal void .ctor(Task<TResult> task, bool continueOnCapturedContext) { }
}

// Namespace: 
public struct ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> : ICriticalNotifyCompletion // TypeDefIndex: 984
{
	// Fields
	private readonly Task<TResult> m_task; // 0x0
	private readonly bool m_continueOnCapturedContext; // 0x0

	// Properties
	public bool IsCompleted { get; }

	// Methods
	// RVA: 0x12DBF0 Offset: 0x12CFF0 VA: 0x18012DBF0
	internal void .ctor(Task<TResult> task, bool continueOnCapturedContext) { }
	// RVA: 0x12DC00 Offset: 0x12D000 VA: 0x18012DC00
	public bool get_IsCompleted() { }
	// RVA: 0x12DC20 Offset: 0x12D020 VA: 0x18012DC20 Slot: 4
	public void UnsafeOnCompleted(Action continuation) { }
	// RVA: 0x12DC50 Offset: 0x12D050 VA: 0x18012DC50
	public TResult GetResult() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0xD9E00 Offset: 0xD9200 VA: 0x1800D9E00
public sealed class TypeForwardedFromAttribute : Attribute // TypeDefIndex: 985
{
	// Fields
	private string assemblyFullName; // 0x10

	// Methods
	// RVA: 0x4A5E80 Offset: 0x4A4680 VA: 0x1804A5E80
	public void .ctor(string assemblyFullName) { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0xD9E20 Offset: 0xD9220 VA: 0x1800D9E20
[Serializable]
public abstract class CustomConstantAttribute : Attribute // TypeDefIndex: 986
{
	// Properties
	public abstract object Value { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	public abstract object get_Value() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0xD9E20 Offset: 0xD9220 VA: 0x1800D9E20
[Serializable]
public sealed class DateTimeConstantAttribute : CustomConstantAttribute // TypeDefIndex: 987
{
	// Fields
	private DateTime date; // 0x10

	// Properties
	public override object Value { get; }

	// Methods
	// RVA: 0x406ED0 Offset: 0x4056D0 VA: 0x180406ED0 Slot: 4
	public override object get_Value() { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0xD9E20 Offset: 0xD9220 VA: 0x1800D9E20
[Serializable]
public sealed class DecimalConstantAttribute : Attribute // TypeDefIndex: 988
{
	// Fields
	private Decimal dec; // 0x10

	// Methods
	// RVA: 0x511690 Offset: 0x50FE90 VA: 0x180511690
	public void .ctor(byte scale, byte sign, uint hi, uint mid, uint low) { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0xD9960 Offset: 0xD8D60 VA: 0x1800D9960
public sealed class FixedBufferAttribute : Attribute // TypeDefIndex: 989
{
	// Fields
	private Type elementType; // 0x10
	private int length; // 0x18

	// Methods
	// RVA: 0x272680 Offset: 0x270E80 VA: 0x180272680
	public void .ctor(Type elementType, int length) { }
}

// Namespace: System.Runtime.CompilerServices
[AttributeUsageAttribute] // RVA: 0xD9E40 Offset: 0xD9240 VA: 0x1800D9E40
public sealed class InternalsVisibleToAttribute : Attribute // TypeDefIndex: 990
{
	// Fields
	private string _assemblyName; // 0x10
	private bool _allInternalsVisible; // 0x18

	// Properties
	public string AssemblyName { get; }
	public bool AllInternalsVisible { get; set; }

	// Methods
	// RVA: 0x329850 Offset: 0x328050 VA: 0x180329850
	public void .ctor(string assemblyName) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public string get_AssemblyName() { }
	// RVA: 0x28C960 Offset: 0x28B160 VA: 0x18028C960
	public bool get_AllInternalsVisible() { }
	// RVA: 0x2E9780 Offset: 0x2E7F80 VA: 0x1802E9780
	public void set_AllInternalsVisible(bool value) { }
}

// Namespace: System.Runtime.CompilerServices
public static class IsVolatile // TypeDefIndex: 991
{}

// Namespace: System.Runtime.CompilerServices
internal static class JitHelpers // TypeDefIndex: 992
{
	// Methods
	// RVA: 0x5342E0 Offset: 0x532AE0 VA: 0x1805342E0
	internal static T UnsafeCast(object o) { }
	// RVA: 0x5342E0 Offset: 0x532AE0 VA: 0x1805342E0
	internal static int UnsafeEnumCast(T val) { }
	// RVA: -1 Offset: -1
	internal static long UnsafeEnumCastLong(T val) { }
}

// Namespace: System.Runtime.CompilerServices
internal struct Ephemeron // TypeDefIndex: 993
{
	// Fields
	internal object key; // 0x0
	internal object value; // 0x8
}

// Namespace: System.Runtime.CompilerServices
public sealed class ConditionalWeakTable<TKey, TValue> // TypeDefIndex: 994
{
	// Fields
	private const int INITIAL_SIZE = 13; // 0x0
	private const float LOAD_FACTOR = 0.7; // 0x0
	private const float COMPACT_FACTOR = 0.5; // 0x0
	private const float EXPAND_FACTOR = 1.1; // 0x0
	private Ephemeron[] data; // 0x0
	private object _lock; // 0x0
	private int size; // 0x0

	// Methods
	// RVA: 0x79FEB0 Offset: 0x79E6B0 VA: 0x18079FEB0
	public void .ctor() { }
	// RVA: 0x79FF60 Offset: 0x79E760 VA: 0x18079FF60 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x79FF90 Offset: 0x79E790 VA: 0x18079FF90
	private void RehashWithoutResize() { }
	// RVA: 0x7A0230 Offset: 0x79EA30 VA: 0x1807A0230
	private void RecomputeSize() { }
	// RVA: 0x7A02A0 Offset: 0x79EAA0 VA: 0x1807A02A0
	private void Rehash() { }
	// RVA: 0x7A05E0 Offset: 0x79EDE0 VA: 0x1807A05E0
	public void Add(TKey key, TValue value) { }
	// RVA: 0x7A09D0 Offset: 0x79F1D0 VA: 0x1807A09D0
	public bool Remove(TKey key) { }
	// RVA: 0x7A0D60 Offset: 0x79F560 VA: 0x1807A0D60
	public bool TryGetValue(TKey key, out TValue value) { }
	// RVA: 0x7A10F0 Offset: 0x79F8F0 VA: 0x1807A10F0
	public TValue GetValue(TKey key, ConditionalWeakTable.CreateValueCallback<TKey, TValue> createValueCallback) { }
}

// Namespace: 
public sealed class ConditionalWeakTable.CreateValueCallback<TKey, TValue> : MulticastDelegate // TypeDefIndex: 995
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x272690 Offset: 0x270E90 VA: 0x180272690 Slot: 12
	public virtual TValue Invoke(TKey key) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(TKey key, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual TValue EndInvoke(IAsyncResult result) { }
}

// Namespace: System.Runtime.CompilerServices
public static class RuntimeHelpers // TypeDefIndex: 996
{
	// Properties
	public static int OffsetToStringData { get; }

	// Methods
	// RVA: 0x372860 Offset: 0x371060 VA: 0x180372860
	private static void InitializeArray(Array array, IntPtr fldHandle) { }
	// RVA: 0x372970 Offset: 0x371170 VA: 0x180372970
	public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle) { }
	// RVA: 0x372B20 Offset: 0x371320 VA: 0x180372B20
	public static int get_OffsetToStringData() { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340
	public static int GetHashCode(object o) { }
	// RVA: 0x428CB0 Offset: 0x4274B0 VA: 0x180428CB0
	public static bool IsReferenceOrContainsReferences() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xD9E60 Offset: 0xD9260 VA: 0x1800D9E60
public sealed class UnmanagedFunctionPointerAttribute : Attribute // TypeDefIndex: 997
{
	// Fields
	private CallingConvention m_callingConvention; // 0x10
	public CharSet CharSet; // 0x14
	public bool BestFitMapping; // 0x18
	public bool ThrowOnUnmappableChar; // 0x19
	public bool SetLastError; // 0x1A
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum VarEnum // TypeDefIndex: 998
{
	// Fields
	public int value__; // 0x0
	public const VarEnum VT_EMPTY = 0; // 0x0
	public const VarEnum VT_NULL = 1; // 0x0
	public const VarEnum VT_I2 = 2; // 0x0
	public const VarEnum VT_I4 = 3; // 0x0
	public const VarEnum VT_R4 = 4; // 0x0
	public const VarEnum VT_R8 = 5; // 0x0
	public const VarEnum VT_CY = 6; // 0x0
	public const VarEnum VT_DATE = 7; // 0x0
	public const VarEnum VT_BSTR = 8; // 0x0
	public const VarEnum VT_DISPATCH = 9; // 0x0
	public const VarEnum VT_ERROR = 10; // 0x0
	public const VarEnum VT_BOOL = 11; // 0x0
	public const VarEnum VT_VARIANT = 12; // 0x0
	public const VarEnum VT_UNKNOWN = 13; // 0x0
	public const VarEnum VT_DECIMAL = 14; // 0x0
	public const VarEnum VT_I1 = 16; // 0x0
	public const VarEnum VT_UI1 = 17; // 0x0
	public const VarEnum VT_UI2 = 18; // 0x0
	public const VarEnum VT_UI4 = 19; // 0x0
	public const VarEnum VT_I8 = 20; // 0x0
	public const VarEnum VT_UI8 = 21; // 0x0
	public const VarEnum VT_INT = 22; // 0x0
	public const VarEnum VT_UINT = 23; // 0x0
	public const VarEnum VT_VOID = 24; // 0x0
	public const VarEnum VT_HRESULT = 25; // 0x0
	public const VarEnum VT_PTR = 26; // 0x0
	public const VarEnum VT_SAFEARRAY = 27; // 0x0
	public const VarEnum VT_CARRAY = 28; // 0x0
	public const VarEnum VT_USERDEFINED = 29; // 0x0
	public const VarEnum VT_LPSTR = 30; // 0x0
	public const VarEnum VT_LPWSTR = 31; // 0x0
	public const VarEnum VT_RECORD = 36; // 0x0
	public const VarEnum VT_FILETIME = 64; // 0x0
	public const VarEnum VT_BLOB = 65; // 0x0
	public const VarEnum VT_STREAM = 66; // 0x0
	public const VarEnum VT_STORAGE = 67; // 0x0
	public const VarEnum VT_STREAMED_OBJECT = 68; // 0x0
	public const VarEnum VT_STORED_OBJECT = 69; // 0x0
	public const VarEnum VT_BLOB_OBJECT = 70; // 0x0
	public const VarEnum VT_CF = 71; // 0x0
	public const VarEnum VT_CLSID = 72; // 0x0
	public const VarEnum VT_VECTOR = 4096; // 0x0
	public const VarEnum VT_ARRAY = 8192; // 0x0
	public const VarEnum VT_BYREF = 16384; // 0x0
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum UnmanagedType // TypeDefIndex: 999
{
	// Fields
	public int value__; // 0x0
	public const UnmanagedType Bool = 2; // 0x0
	public const UnmanagedType I1 = 3; // 0x0
	public const UnmanagedType U1 = 4; // 0x0
	public const UnmanagedType I2 = 5; // 0x0
	public const UnmanagedType U2 = 6; // 0x0
	public const UnmanagedType I4 = 7; // 0x0
	public const UnmanagedType U4 = 8; // 0x0
	public const UnmanagedType I8 = 9; // 0x0
	public const UnmanagedType U8 = 10; // 0x0
	public const UnmanagedType R4 = 11; // 0x0
	public const UnmanagedType R8 = 12; // 0x0
	public const UnmanagedType Currency = 15; // 0x0
	public const UnmanagedType BStr = 19; // 0x0
	public const UnmanagedType LPStr = 20; // 0x0
	public const UnmanagedType LPWStr = 21; // 0x0
	public const UnmanagedType LPTStr = 22; // 0x0
	public const UnmanagedType ByValTStr = 23; // 0x0
	public const UnmanagedType IUnknown = 25; // 0x0
	public const UnmanagedType IDispatch = 26; // 0x0
	public const UnmanagedType Struct = 27; // 0x0
	public const UnmanagedType Interface = 28; // 0x0
	public const UnmanagedType SafeArray = 29; // 0x0
	public const UnmanagedType ByValArray = 30; // 0x0
	public const UnmanagedType SysInt = 31; // 0x0
	public const UnmanagedType SysUInt = 32; // 0x0
	public const UnmanagedType VBByRefStr = 34; // 0x0
	public const UnmanagedType AnsiBStr = 35; // 0x0
	public const UnmanagedType TBStr = 36; // 0x0
	public const UnmanagedType VariantBool = 37; // 0x0
	public const UnmanagedType FunctionPtr = 38; // 0x0
	public const UnmanagedType AsAny = 40; // 0x0
	public const UnmanagedType LPArray = 42; // 0x0
	public const UnmanagedType LPStruct = 43; // 0x0
	public const UnmanagedType CustomMarshaler = 44; // 0x0
	public const UnmanagedType Error = 45; // 0x0
	public const UnmanagedType IInspectable = 46; // 0x0
	public const UnmanagedType HString = 47; // 0x0
	public const UnmanagedType LPUTF8Str = 48; // 0x0
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xD9E80 Offset: 0xD9280 VA: 0x1800D9E80
public sealed class ComImportAttribute : Attribute // TypeDefIndex: 1000
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xD9EA0 Offset: 0xD92A0 VA: 0x1800D9EA0
public sealed class GuidAttribute : Attribute // TypeDefIndex: 1001
{
	// Fields
	internal string _val; // 0x10

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(string guid) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xD9D30 Offset: 0xD9130 VA: 0x1800D9D30
public sealed class PreserveSigAttribute : Attribute // TypeDefIndex: 1002
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xD9EC0 Offset: 0xD92C0 VA: 0x1800D9EC0
public sealed class InAttribute : Attribute // TypeDefIndex: 1003
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xD9EC0 Offset: 0xD92C0 VA: 0x1800D9EC0
public sealed class OutAttribute : Attribute // TypeDefIndex: 1004
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xD9EC0 Offset: 0xD92C0 VA: 0x1800D9EC0
public sealed class OptionalAttribute : Attribute // TypeDefIndex: 1005
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xD9D30 Offset: 0xD9130 VA: 0x1800D9D30
public sealed class DllImportAttribute : Attribute // TypeDefIndex: 1006
{
	// Fields
	internal string _val; // 0x10
	public string EntryPoint; // 0x18
	public CharSet CharSet; // 0x20
	public bool SetLastError; // 0x24
	public bool ExactSpelling; // 0x25
	public bool PreserveSig; // 0x26
	public CallingConvention CallingConvention; // 0x28
	public bool BestFitMapping; // 0x2C
	public bool ThrowOnUnmappableChar; // 0x2D

	// Methods
	// RVA: 0x4756E0 Offset: 0x473EE0 VA: 0x1804756E0
	internal static Attribute GetCustomAttribute(RuntimeMethodInfo method) { }
	// RVA: 0x475870 Offset: 0x474070 VA: 0x180475870
	internal void .ctor(string dllName, string entryPoint, CharSet charSet, bool exactSpelling, bool setLastError, bool preserveSig, CallingConvention callingConvention, bool bestFitMapping, bool throwOnUnmappableChar) { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xD9960 Offset: 0xD8D60 VA: 0x1800D9960
public sealed class FieldOffsetAttribute : Attribute // TypeDefIndex: 1007
{
	// Fields
	internal int _val; // 0x10

	// Methods
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int offset) { }
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum CallingConvention // TypeDefIndex: 1008
{
	// Fields
	public int value__; // 0x0
	public const CallingConvention Winapi = 1; // 0x0
	public const CallingConvention Cdecl = 2; // 0x0
	public const CallingConvention StdCall = 3; // 0x0
	public const CallingConvention ThisCall = 4; // 0x0
	public const CallingConvention FastCall = 5; // 0x0
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum CharSet // TypeDefIndex: 1009
{
	// Fields
	public int value__; // 0x0
	public const CharSet None = 1; // 0x0
	public const CharSet Ansi = 2; // 0x0
	public const CharSet Unicode = 3; // 0x0
	public const CharSet Auto = 4; // 0x0
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class ExternalException : SystemException // TypeDefIndex: 1010
{
	// Methods
	// RVA: 0x75ED60 Offset: 0x75D560 VA: 0x18075ED60
	public void .ctor() { }
	// RVA: 0x75EDF0 Offset: 0x75D5F0 VA: 0x18075EDF0
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x75EE10 Offset: 0x75D610 VA: 0x18075EE10 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Runtime.InteropServices
public interface ICustomMarshaler // TypeDefIndex: 1011
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract object MarshalNativeToManaged(IntPtr pNativeData) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract IntPtr MarshalManagedToNative(object ManagedObj) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void CleanUpNativeData(IntPtr pNativeData) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void CleanUpManagedData(object ManagedObj) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract int GetNativeDataSize() { }
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class MarshalDirectiveException : SystemException // TypeDefIndex: 1012
{
	// Methods
	// RVA: 0x33A4E0 Offset: 0x338CE0 VA: 0x18033A4E0
	public void .ctor() { }
	// RVA: 0x33A570 Offset: 0x338D70 VA: 0x18033A570
	public void .ctor(string message) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Runtime.InteropServices
public abstract class SafeHandle : CriticalFinalizerObject, IDisposable // TypeDefIndex: 1013
{
	// Fields
	protected IntPtr handle; // 0x10
	private int _state; // 0x18
	private bool _ownsHandle; // 0x1C
	private bool _fullyInitialized; // 0x1D
	private const int RefCount_Mask = 2147483644; // 0x0
	private const int RefCount_One = 4; // 0x0

	// Properties
	public bool IsClosed { get; }
	public abstract bool IsInvalid { get; }

	// Methods
	// RVA: 0x383FE0 Offset: 0x3827E0 VA: 0x180383FE0
	protected void .ctor(IntPtr invalidHandleValue, bool ownsHandle) { }
	// RVA: 0x3840B0 Offset: 0x3828B0 VA: 0x1803840B0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x384150 Offset: 0x382950 VA: 0x180384150
	public bool get_IsClosed() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool get_IsInvalid() { }
	// RVA: 0x384160 Offset: 0x382960 VA: 0x180384160
	public void Close() { }
	// RVA: 0x384160 Offset: 0x382960 VA: 0x180384160 Slot: 4
	public void Dispose() { }
	// RVA: 0x384180 Offset: 0x382980 VA: 0x180384180 Slot: 6
	protected virtual void Dispose(bool disposing) { }
	// RVA: -1 Offset: -1 Slot: 7
	protected abstract bool ReleaseHandle() { }
	// RVA: 0x384270 Offset: 0x382A70 VA: 0x180384270
	public void SetHandleAsInvalid() { }
	// RVA: 0x384340 Offset: 0x382B40 VA: 0x180384340
	public void DangerousAddRef(ref bool success) { }
	// RVA: 0x384450 Offset: 0x382C50 VA: 0x180384450
	public void DangerousRelease() { }
	// RVA: 0x384460 Offset: 0x382C60 VA: 0x180384460
	private void InternalDispose() { }
	// RVA: 0x384530 Offset: 0x382D30 VA: 0x180384530
	private void InternalFinalize() { }
	// RVA: 0x384550 Offset: 0x382D50 VA: 0x180384550
	private void DangerousReleaseInternal(bool dispose) { }
}

// Namespace: System.Runtime.InteropServices
public struct GCHandle // TypeDefIndex: 1014
{
	// Fields
	private int handle; // 0x0

	// Properties
	public bool IsAllocated { get; }
	public object Target { get; }

	// Methods
	// RVA: 0x1ED0 Offset: 0x12D0 VA: 0x180001ED0
	private void .ctor(IntPtr h) { }
	// RVA: 0x129CC0 Offset: 0x1290C0 VA: 0x180129CC0
	private void .ctor(object obj) { }
	// RVA: 0x129CE0 Offset: 0x1290E0 VA: 0x180129CE0
	internal void .ctor(object value, GCHandleType type) { }
	// RVA: 0x129DF0 Offset: 0x1291F0 VA: 0x180129DF0
	public bool get_IsAllocated() { }
	// RVA: 0x129E00 Offset: 0x129200 VA: 0x180129E00
	public object get_Target() { }
	// RVA: 0x129E10 Offset: 0x129210 VA: 0x180129E10
	public IntPtr AddrOfPinnedObject() { }
	// RVA: 0x7694F0 Offset: 0x767CF0 VA: 0x1807694F0
	public static GCHandle Alloc(object value) { }
	// RVA: 0x769510 Offset: 0x767D10 VA: 0x180769510
	public static GCHandle Alloc(object value, GCHandleType type) { }
	// RVA: 0x129E20 Offset: 0x129220 VA: 0x180129E20
	public void Free() { }
	// RVA: 0x3F0880 Offset: 0x3EF080 VA: 0x1803F0880
	public static IntPtr op_Explicit(GCHandle value) { }
	// RVA: 0x7696D0 Offset: 0x767ED0 VA: 0x1807696D0
	public static GCHandle op_Explicit(IntPtr value) { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20
	private static bool CheckCurrentDomain(int handle) { }
	// RVA: 0x769770 Offset: 0x767F70 VA: 0x180769770
	private static object GetTarget(int handle) { }
	// RVA: 0x769780 Offset: 0x767F80 VA: 0x180769780
	private static int GetTargetHandle(object obj, int handle, GCHandleType type) { }
	// RVA: 0x769800 Offset: 0x768000 VA: 0x180769800
	private static void FreeHandle(int handle) { }
	// RVA: 0x769810 Offset: 0x768010 VA: 0x180769810
	private static IntPtr GetAddrOfPinnedObject(int handle) { }
	// RVA: 0x769870 Offset: 0x768070 VA: 0x180769870
	public static bool op_Equality(GCHandle a, GCHandle b) { }
	// RVA: 0x129E30 Offset: 0x129230 VA: 0x180129E30 Slot: 0
	public override bool Equals(object o) { }
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x7696D0 Offset: 0x767ED0 VA: 0x1807696D0
	public static GCHandle FromIntPtr(IntPtr value) { }
	// RVA: 0x3F0880 Offset: 0x3EF080 VA: 0x1803F0880
	public static IntPtr ToIntPtr(GCHandle value) { }
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum GCHandleType // TypeDefIndex: 1015
{
	// Fields
	public int value__; // 0x0
	public const GCHandleType Weak = 0; // 0x0
	public const GCHandleType WeakTrackResurrection = 1; // 0x0
	public const GCHandleType Normal = 2; // 0x0
	public const GCHandleType Pinned = 3; // 0x0
}

// Namespace: System.Runtime.InteropServices
public static class Marshal // TypeDefIndex: 1016
{
	// Fields
	public static readonly int SystemMaxDBCSCharSize; // 0x0
	public static readonly int SystemDefaultCharSize; // 0x4

	// Methods
	// RVA: 0x339D00 Offset: 0x338500 VA: 0x180339D00
	internal static void copy_from_unmanaged(IntPtr source, int startIndex, Array destination, int length) { }
	// RVA: 0x339D40 Offset: 0x338540 VA: 0x180339D40
	public static void Copy(IntPtr source, byte[] destination, int startIndex, int length) { }
	// RVA: 0x339E10 Offset: 0x338610 VA: 0x180339E10
	public static void Copy(IntPtr source, char[] destination, int startIndex, int length) { }
	// RVA: 0x339EE0 Offset: 0x3386E0 VA: 0x180339EE0
	public static void FreeBSTR(IntPtr ptr) { }
	// RVA: 0x339EF0 Offset: 0x3386F0 VA: 0x180339EF0
	public static int GetLastWin32Error() { }
	// RVA: 0x339F50 Offset: 0x338750 VA: 0x180339F50
	private static int ReleaseInternal(IntPtr pUnk) { }
	// RVA: 0x339F60 Offset: 0x338760 VA: 0x180339F60
	public static int Release(IntPtr pUnk) { }
	// RVA: 0x33A030 Offset: 0x338830 VA: 0x18033A030
	public static int SizeOf(Type t) { }
	// RVA: 0x33A120 Offset: 0x338920 VA: 0x18033A120
	public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld) { }
	// RVA: 0x534890 Offset: 0x533090 VA: 0x180534890
	public static void StructureToPtr(T structure, IntPtr ptr, bool fDeleteOld) { }
	// RVA: 0x33A240 Offset: 0x338A40 VA: 0x18033A240
	public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index) { }
	// RVA: 0x534AD0 Offset: 0x5332D0 VA: 0x180534AD0
	public static IntPtr UnsafeAddrOfPinnedArrayElement(T[] arr, int index) { }
	// RVA: 0x33A260 Offset: 0x338A60 VA: 0x18033A260
	private static IntPtr GetFunctionPointerForDelegateInternal(Delegate d) { }
	// RVA: 0x5347A0 Offset: 0x532FA0 VA: 0x1805347A0
	public static IntPtr GetFunctionPointerForDelegate(TDelegate d) { }
	// RVA: 0x33A270 Offset: 0x338A70 VA: 0x18033A270
	private static void .cctor() { }
}

// Namespace: System.Runtime.InteropServices
[AttributeUsageAttribute] // RVA: 0xD9EE0 Offset: 0xD92E0 VA: 0x1800D9EE0
public sealed class MarshalAsAttribute : Attribute // TypeDefIndex: 1017
{
	// Fields
	public string MarshalCookie; // 0x10
	public string MarshalType; // 0x18
	public Type MarshalTypeRef; // 0x20
	public Type SafeArrayUserDefinedSubType; // 0x28
	private UnmanagedType utype; // 0x30
	public UnmanagedType ArraySubType; // 0x34
	public VarEnum SafeArraySubType; // 0x38
	public int SizeConst; // 0x3C
	public int IidParameterIndex; // 0x40
	public short SizeParamIndex; // 0x44

	// Methods
	// RVA: 0x33A300 Offset: 0x338B00 VA: 0x18033A300
	internal MarshalAsAttribute Copy() { }
}

// Namespace: System.Collections
[Serializable]
public struct DictionaryEntry // TypeDefIndex: 1018
{
	// Fields
	private object _key; // 0x0
	private object _value; // 0x8

	// Methods
	// RVA: 0x5CF0 Offset: 0x50F0 VA: 0x180005CF0
	public void .ctor(object key, object value) { }
}

// Namespace: System.Collections
internal sealed class LowLevelComparer : IComparer // TypeDefIndex: 1019
{
	// Fields
	internal static readonly LowLevelComparer Default; // 0xAC146

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x335430 Offset: 0x333C30 VA: 0x180335430 Slot: 4
	public int Compare(object a, object b) { }
	// RVA: 0x335570 Offset: 0x333D70 VA: 0x180335570
	private static void .cctor() { }
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
public class ArrayList : IList, ICollection, IEnumerable, ICloneable // TypeDefIndex: 1020
{
	// Fields
	private object[] _items; // 0x10
	private int _size; // 0x18
	private int _version; // 0x1C
	private object _syncRoot; // 0x20
	private static readonly object[] emptyArray; // 0x0

	// Properties
	public virtual int Capacity { set; }
	public virtual int Count { get; }
	public virtual object SyncRoot { get; }
	public virtual object Item { get; }

	// Methods
	// RVA: 0x2D36E0 Offset: 0x2D1EE0 VA: 0x1802D36E0
	public void .ctor() { }
	// RVA: 0x2D3780 Offset: 0x2D1F80 VA: 0x1802D3780
	public void .ctor(int capacity) { }
	// RVA: 0x2D38E0 Offset: 0x2D20E0 VA: 0x1802D38E0
	public void .ctor(ICollection c) { }
	// RVA: 0x2D3A30 Offset: 0x2D2230 VA: 0x1802D3A30 Slot: 10
	public virtual void set_Capacity(int value) { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 11
	public virtual int get_Count() { }
	// RVA: 0x2D3B70 Offset: 0x2D2370 VA: 0x1802D3B70 Slot: 12
	public virtual object get_SyncRoot() { }
	// RVA: 0x2D3C00 Offset: 0x2D2400 VA: 0x1802D3C00 Slot: 13
	public virtual object get_Item(int index) { }
	// RVA: 0x2D3CF0 Offset: 0x2D24F0 VA: 0x1802D3CF0 Slot: 14
	public virtual int Add(object value) { }
	// RVA: 0x2D3DE0 Offset: 0x2D25E0 VA: 0x1802D3DE0 Slot: 15
	public virtual void AddRange(ICollection c) { }
	// RVA: 0x2D3E00 Offset: 0x2D2600 VA: 0x1802D3E00 Slot: 16
	public virtual object Clone() { }
	// RVA: 0x2D4000 Offset: 0x2D2800 VA: 0x1802D4000 Slot: 17
	public virtual bool Contains(object item) { }
	// RVA: 0x2D4100 Offset: 0x2D2900 VA: 0x1802D4100 Slot: 18
	public virtual void CopyTo(Array array, int arrayIndex) { }
	// RVA: 0x2D4200 Offset: 0x2D2A00 VA: 0x1802D4200
	private void EnsureCapacity(int min) { }
	// RVA: 0x2D4260 Offset: 0x2D2A60 VA: 0x1802D4260 Slot: 19
	public virtual IEnumerator GetEnumerator() { }
	// RVA: 0x2D43F0 Offset: 0x2D2BF0 VA: 0x1802D43F0 Slot: 20
	public virtual int IndexOf(object value) { }
	// RVA: 0x2D4420 Offset: 0x2D2C20 VA: 0x1802D4420 Slot: 21
	public virtual void Insert(int index, object value) { }
	// RVA: 0x2D45A0 Offset: 0x2D2DA0 VA: 0x1802D45A0 Slot: 22
	public virtual void InsertRange(int index, ICollection c) { }
	// RVA: 0x2D4770 Offset: 0x2D2F70 VA: 0x1802D4770 Slot: 23
	public virtual void Remove(object obj) { }
	// RVA: 0x2D47B0 Offset: 0x2D2FB0 VA: 0x1802D47B0 Slot: 24
	public virtual void RemoveAt(int index) { }
	// RVA: 0x2D48E0 Offset: 0x2D30E0 VA: 0x1802D48E0 Slot: 25
	public virtual object[] ToArray() { }
	// RVA: 0x2D4990 Offset: 0x2D3190 VA: 0x1802D4990 Slot: 26
	public virtual Array ToArray(Type type) { }
	// RVA: 0x2D4AD0 Offset: 0x2D32D0 VA: 0x1802D4AD0
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class ArrayList.ArrayListEnumeratorSimple : IEnumerator, ICloneable // TypeDefIndex: 1021
{
	// Fields
	private ArrayList list; // 0x10
	private int index; // 0x18
	private int version; // 0x1C
	private object currentElement; // 0x20
	private bool isArrayList; // 0x28
	private static object dummyObject; // 0x0

	// Properties
	public object Current { get; }

	// Methods
	// RVA: 0x26B040 Offset: 0x269840 VA: 0x18026B040
	internal void .ctor(ArrayList list) { }
	// RVA: 0x2569A0 Offset: 0x2551A0 VA: 0x1802569A0 Slot: 6
	public object Clone() { }
	// RVA: 0x26B160 Offset: 0x269960 VA: 0x18026B160 Slot: 4
	public bool MoveNext() { }
	// RVA: 0x26B390 Offset: 0x269B90 VA: 0x18026B390 Slot: 5
	public object get_Current() { }
	// RVA: 0x26B4C0 Offset: 0x269CC0 VA: 0x18026B4C0
	private static void .cctor() { }
}

// Namespace: System.Collections
[Serializable]
public class CaseInsensitiveComparer : IComparer // TypeDefIndex: 1022
{
	// Fields
	private CompareInfo m_compareInfo; // 0x10

	// Properties
	public static CaseInsensitiveComparer Default { get; }

	// Methods
	// RVA: 0x24FDB0 Offset: 0x24E5B0 VA: 0x18024FDB0
	public void .ctor() { }
	// RVA: 0x24FE70 Offset: 0x24E670 VA: 0x18024FE70
	public void .ctor(CultureInfo culture) { }
	// RVA: 0x24FF40 Offset: 0x24E740 VA: 0x18024FF40
	public static CaseInsensitiveComparer get_Default() { }
	// RVA: 0x2500C0 Offset: 0x24E8C0 VA: 0x1802500C0 Slot: 4
	public int Compare(object a, object b) { }
}

// Namespace: System.Collections
[ObsoleteAttribute] // RVA: 0xD9F00 Offset: 0xD9300 VA: 0x1800D9F00
[Serializable]
public class CaseInsensitiveHashCodeProvider : IHashCodeProvider // TypeDefIndex: 1023
{
	// Fields
	private TextInfo m_text; // 0x10

	// Properties
	public static CaseInsensitiveHashCodeProvider Default { get; }

	// Methods
	// RVA: 0x2501F0 Offset: 0x24E9F0 VA: 0x1802501F0
	public void .ctor() { }
	// RVA: 0x2502B0 Offset: 0x24EAB0 VA: 0x1802502B0
	public void .ctor(CultureInfo culture) { }
	// RVA: 0x250380 Offset: 0x24EB80 VA: 0x180250380
	public static CaseInsensitiveHashCodeProvider get_Default() { }
	// RVA: 0x250500 Offset: 0x24ED00 VA: 0x180250500 Slot: 4
	public int GetHashCode(object obj) { }
}

// Namespace: System.Collections
[Serializable]
public sealed class Comparer : IComparer, ISerializable // TypeDefIndex: 1024
{
	// Fields
	private CompareInfo m_compareInfo; // 0x10
	public static readonly Comparer Default; // 0x0
	public static readonly Comparer DefaultInvariant; // 0x8

	// Methods
	// RVA: 0x258740 Offset: 0x256F40 VA: 0x180258740
	private void .ctor() { }
	// RVA: 0x25B160 Offset: 0x259960 VA: 0x18025B160
	public void .ctor(CultureInfo culture) { }
	// RVA: 0x25B230 Offset: 0x259A30 VA: 0x18025B230
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x25B440 Offset: 0x259C40 VA: 0x18025B440 Slot: 4
	public int Compare(object a, object b) { }
	// RVA: 0x25B5C0 Offset: 0x259DC0 VA: 0x18025B5C0 Slot: 5
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x25B690 Offset: 0x259E90 VA: 0x18025B690
	private static void .cctor() { }
}

// Namespace: System.Collections
[Serializable]
internal class CompatibleComparer : IEqualityComparer // TypeDefIndex: 1025
{
	// Fields
	private IComparer _comparer; // 0x10
	private IHashCodeProvider _hcp; // 0x18

	// Methods
	// RVA: 0x25B970 Offset: 0x25A170 VA: 0x18025B970
	internal void .ctor(IComparer comparer, IHashCodeProvider hashCodeProvider) { }
	// RVA: 0x25B980 Offset: 0x25A180 VA: 0x18025B980
	public int Compare(object a, object b) { }
	// RVA: 0x25BAF0 Offset: 0x25A2F0 VA: 0x18025BAF0 Slot: 4
	public bool Equals(object a, object b) { }
	// RVA: 0x25BC30 Offset: 0x25A430 VA: 0x18025BC30 Slot: 5
	public int GetHashCode(object obj) { }
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
public class Hashtable : IDictionary, ICollection, IEnumerable, ISerializable, IDeserializationCallback, ICloneable // TypeDefIndex: 1026
{
	// Fields
	internal const int HashPrime = 101; // 0x0
	private const int InitialSize = 3; // 0x0
	private const string LoadFactorName = "LoadFactor"; // 0x0
	private const string VersionName = "Version"; // 0x0
	private const string ComparerName = "Comparer"; // 0x0
	private const string HashCodeProviderName = "HashCodeProvider"; // 0x0
	private const string HashSizeName = "HashSize"; // 0x0
	private const string KeysName = "Keys"; // 0x0
	private const string ValuesName = "Values"; // 0x0
	private const string KeyComparerName = "KeyComparer"; // 0x0
	private Hashtable.bucket[] buckets; // 0x10
	private int count; // 0x18
	private int occupancy; // 0x1C
	private int loadsize; // 0x20
	private float loadFactor; // 0x24
	private int version; // 0x28
	private bool isWriterInProgress; // 0x2C
	private ICollection keys; // 0x30
	private ICollection values; // 0x38
	private IEqualityComparer _keycomparer; // 0x40
	private object _syncRoot; // 0x48

	// Properties
	public virtual object Item { get; set; }
	public virtual ICollection Keys { get; }
	public virtual object SyncRoot { get; }
	public virtual int Count { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor(bool trash) { }
	// RVA: 0x770430 Offset: 0x76EC30 VA: 0x180770430
	public void .ctor() { }
	// RVA: 0x770450 Offset: 0x76EC50 VA: 0x180770450
	public void .ctor(int capacity) { }
	// RVA: 0x770460 Offset: 0x76EC60 VA: 0x180770460
	public void .ctor(int capacity, float loadFactor) { }
	[ObsoleteAttribute] // RVA: 0xD9F30 Offset: 0xD9330 VA: 0x1800D9F30
	// RVA: 0x770710 Offset: 0x76EF10 VA: 0x180770710
	public void .ctor(int capacity, float loadFactor, IHashCodeProvider hcp, IComparer comparer) { }
	// RVA: 0x7707F0 Offset: 0x76EFF0 VA: 0x1807707F0
	public void .ctor(int capacity, float loadFactor, IEqualityComparer equalityComparer) { }
	[ObsoleteAttribute] // RVA: 0xD9F60 Offset: 0xD9360 VA: 0x1800D9F60
	// RVA: 0x770820 Offset: 0x76F020 VA: 0x180770820
	public void .ctor(IHashCodeProvider hcp, IComparer comparer) { }
	// RVA: 0x7708F0 Offset: 0x76F0F0 VA: 0x1807708F0
	public void .ctor(IEqualityComparer equalityComparer) { }
	// RVA: 0x770930 Offset: 0x76F130 VA: 0x180770930
	public void .ctor(int capacity, IEqualityComparer equalityComparer) { }
	// RVA: 0x770960 Offset: 0x76F160 VA: 0x180770960
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x770A20 Offset: 0x76F220 VA: 0x180770A20
	private uint InitHash(object key, int hashsize, out uint seed, out uint incr) { }
	// RVA: 0x770A70 Offset: 0x76F270 VA: 0x180770A70 Slot: 14
	public virtual void Add(object key, object value) { }
	// RVA: 0x770A90 Offset: 0x76F290 VA: 0x180770A90 Slot: 15
	public virtual void Clear() { }
	// RVA: 0x770C10 Offset: 0x76F410 VA: 0x180770C10 Slot: 16
	public virtual object Clone() { }
	// RVA: 0x770D50 Offset: 0x76F550 VA: 0x180770D50 Slot: 17
	public virtual bool Contains(object key) { }
	// RVA: 0x770D70 Offset: 0x76F570 VA: 0x180770D70 Slot: 18
	public virtual bool ContainsKey(object key) { }
	// RVA: 0x770F40 Offset: 0x76F740 VA: 0x180770F40
	private void CopyKeys(Array array, int arrayIndex) { }
	// RVA: 0x770FE0 Offset: 0x76F7E0 VA: 0x180770FE0
	private void CopyEntries(Array array, int arrayIndex) { }
	// RVA: 0x771100 Offset: 0x76F900 VA: 0x180771100 Slot: 19
	public virtual void CopyTo(Array array, int arrayIndex) { }
	// RVA: 0x7713C0 Offset: 0x76FBC0 VA: 0x1807713C0
	private void CopyValues(Array array, int arrayIndex) { }
	// RVA: 0x771460 Offset: 0x76FC60 VA: 0x180771460 Slot: 20
	public virtual object get_Item(object key) { }
	// RVA: 0x771830 Offset: 0x770030 VA: 0x180771830 Slot: 21
	public virtual void set_Item(object key, object value) { }
	// RVA: 0x771850 Offset: 0x770050 VA: 0x180771850
	private void expand() { }
	// RVA: 0x771910 Offset: 0x770110 VA: 0x180771910
	private void rehash() { }
	// RVA: 0x771940 Offset: 0x770140 VA: 0x180771940
	private void UpdateVersion() { }
	// RVA: 0x771960 Offset: 0x770160 VA: 0x180771960
	private void rehash(int newsize, bool forceNewHashCode) { }
	// RVA: 0x771BA0 Offset: 0x7703A0 VA: 0x180771BA0 Slot: 10
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x771C50 Offset: 0x770450 VA: 0x180771C50 Slot: 22
	public virtual IDictionaryEnumerator GetEnumerator() { }
	// RVA: 0x771D00 Offset: 0x770500 VA: 0x180771D00 Slot: 23
	protected virtual int GetHash(object key) { }
	// RVA: 0x771DC0 Offset: 0x7705C0 VA: 0x180771DC0 Slot: 24
	protected virtual bool KeyEquals(object item, object key) { }
	// RVA: 0x771EC0 Offset: 0x7706C0 VA: 0x180771EC0 Slot: 25
	public virtual ICollection get_Keys() { }
	// RVA: 0x771F50 Offset: 0x770750 VA: 0x180771F50
	private void Insert(object key, object nvalue, bool add) { }
	// RVA: 0x772610 Offset: 0x770E10 VA: 0x180772610
	private void putEntry(Hashtable.bucket[] newBuckets, object key, object nvalue, int hashcode) { }
	// RVA: 0x772730 Offset: 0x770F30 VA: 0x180772730 Slot: 26
	public virtual void Remove(object key) { }
	// RVA: 0x772A10 Offset: 0x771210 VA: 0x180772A10 Slot: 27
	public virtual object get_SyncRoot() { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 28
	public virtual int get_Count() { }
	// RVA: 0x772AA0 Offset: 0x7712A0 VA: 0x180772AA0
	public static Hashtable Synchronized(Hashtable table) { }
	// RVA: 0x772B50 Offset: 0x771350 VA: 0x180772B50 Slot: 29
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x7734D0 Offset: 0x771CD0 VA: 0x1807734D0 Slot: 30
	public virtual void OnDeserialization(object sender) { }
}

// Namespace: 
private struct Hashtable.bucket // TypeDefIndex: 1027
{
	// Fields
	public object key; // 0x0
	public object val; // 0x8
	public int hash_coll; // 0x10
}

// Namespace: 
[Serializable]
private class Hashtable.KeyCollection : ICollection, IEnumerable // TypeDefIndex: 1028
{
	// Fields
	private Hashtable _hashtable; // 0x10

	// Properties
	public virtual int Count { get; }

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	internal void .ctor(Hashtable hashtable) { }
	// RVA: 0x26FED0 Offset: 0x26E6D0 VA: 0x18026FED0 Slot: 7
	public virtual void CopyTo(Array array, int arrayIndex) { }
	// RVA: 0x270100 Offset: 0x26E900 VA: 0x180270100 Slot: 8
	public virtual IEnumerator GetEnumerator() { }
	// RVA: 0x1E7080 Offset: 0x1E5880 VA: 0x1801E7080 Slot: 9
	public virtual int get_Count() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
private class Hashtable.SyncHashtable : Hashtable, IEnumerable // TypeDefIndex: 1029
{
	// Fields
	protected Hashtable _table; // 0x50

	// Properties
	public override int Count { get; }
	public override object Item { get; set; }
	public override object SyncRoot { get; }
	public override ICollection Keys { get; }

	// Methods
	// RVA: 0x2701B0 Offset: 0x26E9B0 VA: 0x1802701B0
	internal void .ctor(Hashtable table) { }
	// RVA: 0x2701C0 Offset: 0x26E9C0 VA: 0x1802701C0
	internal void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x2703C0 Offset: 0x26EBC0 VA: 0x1802703C0 Slot: 29
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x270720 Offset: 0x26EF20 VA: 0x180270720 Slot: 28
	public override int get_Count() { }
	// RVA: 0x270750 Offset: 0x26EF50 VA: 0x180270750 Slot: 20
	public override object get_Item(object key) { }
	// RVA: 0x270780 Offset: 0x26EF80 VA: 0x180270780 Slot: 21
	public override void set_Item(object key, object value) { }
	// RVA: 0x270950 Offset: 0x26F150 VA: 0x180270950 Slot: 27
	public override object get_SyncRoot() { }
	// RVA: 0x270980 Offset: 0x26F180 VA: 0x180270980 Slot: 14
	public override void Add(object key, object value) { }
	// RVA: 0x270B50 Offset: 0x26F350 VA: 0x180270B50 Slot: 15
	public override void Clear() { }
	// RVA: 0x270CF0 Offset: 0x26F4F0 VA: 0x180270CF0 Slot: 17
	public override bool Contains(object key) { }
	// RVA: 0x270D20 Offset: 0x26F520 VA: 0x180270D20 Slot: 18
	public override bool ContainsKey(object key) { }
	// RVA: 0x270E10 Offset: 0x26F610 VA: 0x180270E10 Slot: 19
	public override void CopyTo(Array array, int arrayIndex) { }
	// RVA: 0x270FE0 Offset: 0x26F7E0 VA: 0x180270FE0 Slot: 16
	public override object Clone() { }
	// RVA: 0x271300 Offset: 0x26FB00 VA: 0x180271300 Slot: 10
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x271300 Offset: 0x26FB00 VA: 0x180271300 Slot: 22
	public override IDictionaryEnumerator GetEnumerator() { }
	// RVA: 0x271330 Offset: 0x26FB30 VA: 0x180271330 Slot: 25
	public override ICollection get_Keys() { }
	// RVA: 0x271500 Offset: 0x26FD00 VA: 0x180271500 Slot: 26
	public override void Remove(object key) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 30
	public override void OnDeserialization(object sender) { }
}

// Namespace: 
[Serializable]
private class Hashtable.HashtableEnumerator : IDictionaryEnumerator, IEnumerator, ICloneable // TypeDefIndex: 1030
{
	// Fields
	private Hashtable hashtable; // 0x10
	private int bucket; // 0x18
	private int version; // 0x1C
	private bool current; // 0x20
	private int getObjectRetType; // 0x24
	private object currentKey; // 0x28
	private object currentValue; // 0x30

	// Properties
	public virtual object Key { get; }
	public virtual DictionaryEntry Entry { get; }
	public virtual object Current { get; }
	public virtual object Value { get; }

	// Methods
	// RVA: 0x26F9A0 Offset: 0x26E1A0 VA: 0x18026F9A0
	internal void .ctor(Hashtable hashtable, int getObjRetType) { }
	// RVA: 0x2569A0 Offset: 0x2551A0 VA: 0x1802569A0 Slot: 9
	public object Clone() { }
	// RVA: 0x26F9E0 Offset: 0x26E1E0 VA: 0x18026F9E0 Slot: 10
	public virtual object get_Key() { }
	// RVA: 0x26FAA0 Offset: 0x26E2A0 VA: 0x18026FAA0 Slot: 11
	public virtual bool MoveNext() { }
	// RVA: 0x26FC30 Offset: 0x26E430 VA: 0x18026FC30 Slot: 12
	public virtual DictionaryEntry get_Entry() { }
	// RVA: 0x26FD00 Offset: 0x26E500 VA: 0x18026FD00 Slot: 13
	public virtual object get_Current() { }
	// RVA: 0x26FE10 Offset: 0x26E610 VA: 0x18026FE10 Slot: 14
	public virtual object get_Value() { }
}

// Namespace: System.Collections
internal static class HashHelpers // TypeDefIndex: 1031
{
	// Fields
	public static readonly int[] primes; // 0x0
	private static ConditionalWeakTable<object, SerializationInfo> s_SerializationInfoTable; // 0x8

	// Properties
	internal static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable { get; }

	// Methods
	// RVA: 0x76FEE0 Offset: 0x76E6E0 VA: 0x18076FEE0
	internal static ConditionalWeakTable<object, SerializationInfo> get_SerializationInfoTable() { }
	// RVA: 0x770010 Offset: 0x76E810 VA: 0x180770010
	public static bool IsPrime(int candidate) { }
	// RVA: 0x7700F0 Offset: 0x76E8F0 VA: 0x1807700F0
	public static int GetPrime(int min) { }
	// RVA: 0x7702D0 Offset: 0x76EAD0 VA: 0x1807702D0
	public static int ExpandPrime(int oldSize) { }
	// RVA: 0x770390 Offset: 0x76EB90 VA: 0x180770390
	private static void .cctor() { }
}

// Namespace: System.Collections
public interface ICollection : IEnumerable // TypeDefIndex: 1032
{
	// Properties
	public abstract int Count { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void CopyTo(Array array, int index) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_Count() { }
}

// Namespace: System.Collections
public interface IComparer // TypeDefIndex: 1033
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract int Compare(object x, object y) { }
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public interface IDictionary : ICollection, IEnumerable // TypeDefIndex: 1034
{
	// Properties
	public abstract object Item { get; set; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_Item(object key) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_Item(object key, object value) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract bool Contains(object key) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract IDictionaryEnumerator GetEnumerator() { }
}

// Namespace: System.Collections
public interface IDictionaryEnumerator : IEnumerator // TypeDefIndex: 1035
{
	// Properties
	public abstract object Key { get; }
	public abstract object Value { get; }
	public abstract DictionaryEntry Entry { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract object get_Key() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract object get_Value() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract DictionaryEntry get_Entry() { }
}

// Namespace: System.Collections
[GuidAttribute] // RVA: 0xD9F90 Offset: 0xD9390 VA: 0x1800D9F90
public interface IEnumerable // TypeDefIndex: 1036
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IEnumerator GetEnumerator() { }
}

// Namespace: System.Collections
[GuidAttribute] // RVA: 0xD9FC0 Offset: 0xD93C0 VA: 0x1800D9FC0
public interface IEnumerator // TypeDefIndex: 1037
{
	// Properties
	public abstract object Current { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool MoveNext() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract object get_Current() { }
}

// Namespace: System.Collections
public interface IEqualityComparer // TypeDefIndex: 1038
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(object x, object y) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetHashCode(object obj) { }
}

// Namespace: System.Collections
[ObsoleteAttribute] // RVA: 0xD9FF0 Offset: 0xD93F0 VA: 0x1800D9FF0
public interface IHashCodeProvider // TypeDefIndex: 1039
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract int GetHashCode(object obj) { }
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public interface IList : ICollection, IEnumerable // TypeDefIndex: 1040
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract int Add(object value) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool Contains(object value) { }
}

// Namespace: System.Collections
public interface IStructuralComparable // TypeDefIndex: 1041
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract int CompareTo(object other, IComparer comparer) { }
}

// Namespace: System.Collections
public interface IStructuralEquatable // TypeDefIndex: 1042
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(object other, IEqualityComparer comparer) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetHashCode(IEqualityComparer comparer) { }
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
internal class ListDictionaryInternal : IDictionary, ICollection, IEnumerable // TypeDefIndex: 1043
{
	// Fields
	private ListDictionaryInternal.DictionaryNode head; // 0x10
	private int version; // 0x18
	private int count; // 0x1C

	// Properties
	public object Item { get; set; }
	public int Count { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x333430 Offset: 0x331C30 VA: 0x180333430 Slot: 4
	public object get_Item(object key) { }
	// RVA: 0x333540 Offset: 0x331D40 VA: 0x180333540 Slot: 5
	public void set_Item(object key, object value) { }
	// RVA: 0x202970 Offset: 0x201170 VA: 0x180202970 Slot: 9
	public int get_Count() { }
	// RVA: 0x333790 Offset: 0x331F90 VA: 0x180333790 Slot: 6
	public bool Contains(object key) { }
	// RVA: 0x3338A0 Offset: 0x3320A0 VA: 0x1803338A0 Slot: 8
	public void CopyTo(Array array, int index) { }
	// RVA: 0x333AA0 Offset: 0x3322A0 VA: 0x180333AA0 Slot: 7
	public IDictionaryEnumerator GetEnumerator() { }
	// RVA: 0x333B40 Offset: 0x332340 VA: 0x180333B40 Slot: 10
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
private class ListDictionaryInternal.NodeEnumerator : IDictionaryEnumerator, IEnumerator // TypeDefIndex: 1044
{
	// Fields
	private ListDictionaryInternal list; // 0x10
	private ListDictionaryInternal.DictionaryNode current; // 0x18
	private int version; // 0x20
	private bool start; // 0x24

	// Properties
	public object Current { get; }
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }

	// Methods
	// RVA: 0x271B60 Offset: 0x270360 VA: 0x180271B60
	public void .ctor(ListDictionaryInternal list) { }
	// RVA: 0x271B90 Offset: 0x270390 VA: 0x180271B90 Slot: 8
	public object get_Current() { }
	// RVA: 0x271CD0 Offset: 0x2704D0 VA: 0x180271CD0 Slot: 6
	public DictionaryEntry get_Entry() { }
	// RVA: 0x271DA0 Offset: 0x2705A0 VA: 0x180271DA0 Slot: 4
	public object get_Key() { }
	// RVA: 0x271E60 Offset: 0x270660 VA: 0x180271E60 Slot: 5
	public object get_Value() { }
	// RVA: 0x271F20 Offset: 0x270720 VA: 0x180271F20 Slot: 7
	public bool MoveNext() { }
}

// Namespace: 
[Serializable]
private class ListDictionaryInternal.DictionaryNode // TypeDefIndex: 1045
{
	// Fields
	public object key; // 0x10
	public object value; // 0x18
	public ListDictionaryInternal.DictionaryNode next; // 0x20

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Collections
[Serializable]
public class Queue : ICollection, IEnumerable, ICloneable // TypeDefIndex: 1046
{
	// Fields
	private object[] _array; // 0x10
	private int _head; // 0x18
	private int _tail; // 0x1C
	private int _size; // 0x20
	private int _growFactor; // 0x24
	private int _version; // 0x28

	// Properties
	public virtual int Count { get; }

	// Methods
	// RVA: 0x31D5D0 Offset: 0x31BDD0 VA: 0x18031D5D0
	public void .ctor() { }
	// RVA: 0x31D5F0 Offset: 0x31BDF0 VA: 0x18031D5F0
	public void .ctor(int capacity) { }
	// RVA: 0x31D600 Offset: 0x31BE00 VA: 0x18031D600
	public void .ctor(int capacity, float growFactor) { }
	// RVA: 0x31D7F0 Offset: 0x31BFF0 VA: 0x18031D7F0
	public void .ctor(ICollection col) { }
	// RVA: 0x197B20 Offset: 0x196320 VA: 0x180197B20 Slot: 8
	public virtual int get_Count() { }
	// RVA: 0x31DA10 Offset: 0x31C210 VA: 0x18031DA10 Slot: 9
	public virtual object Clone() { }
	// RVA: 0x31DB40 Offset: 0x31C340 VA: 0x18031DB40 Slot: 10
	public virtual void CopyTo(Array array, int index) { }
	// RVA: 0x31DD70 Offset: 0x31C570 VA: 0x18031DD70 Slot: 11
	public virtual void Enqueue(object obj) { }
	// RVA: 0x31DF50 Offset: 0x31C750 VA: 0x18031DF50 Slot: 12
	public virtual IEnumerator GetEnumerator() { }
	// RVA: 0x31E000 Offset: 0x31C800 VA: 0x18031E000 Slot: 13
	public virtual object Dequeue() { }
	// RVA: 0x31E120 Offset: 0x31C920 VA: 0x18031E120 Slot: 14
	public virtual object Peek() { }
	// RVA: 0x31E220 Offset: 0x31CA20 VA: 0x18031E220
	internal object GetElement(int i) { }
	// RVA: 0x31E260 Offset: 0x31CA60 VA: 0x18031E260
	private void SetCapacity(int capacity) { }
}

// Namespace: 
[Serializable]
private class Queue.QueueEnumerator : IEnumerator, ICloneable // TypeDefIndex: 1047
{
	// Fields
	private Queue _q; // 0x10
	private int _index; // 0x18
	private int _version; // 0x1C
	private object currentElement; // 0x20

	// Properties
	public virtual object Current { get; }

	// Methods
	// RVA: 0x2742B0 Offset: 0x272AB0 VA: 0x1802742B0
	internal void .ctor(Queue q) { }
	// RVA: 0x2569A0 Offset: 0x2551A0 VA: 0x1802569A0 Slot: 6
	public object Clone() { }
	// RVA: 0x2742F0 Offset: 0x272AF0 VA: 0x1802742F0 Slot: 7
	public virtual bool MoveNext() { }
	// RVA: 0x274430 Offset: 0x272C30 VA: 0x180274430 Slot: 8
	public virtual object get_Current() { }
}

// Namespace: System.Collections
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
public class SortedList : IDictionary, ICollection, IEnumerable, ICloneable // TypeDefIndex: 1048
{
	// Fields
	private object[] keys; // 0x10
	private object[] values; // 0x18
	private int _size; // 0x20
	private int version; // 0x24
	private IComparer comparer; // 0x28
	private SortedList.KeyList keyList; // 0x30
	private SortedList.ValueList valueList; // 0x38
	private object _syncRoot; // 0x40
	private const int _defaultCapacity = 16; // 0x0
	private static object[] emptyArray; // 0x0

	// Properties
	public virtual int Capacity { get; set; }
	public virtual int Count { get; }
	public virtual object Item { get; set; }

	// Methods
	// RVA: 0x1E6B00 Offset: 0x1E5300 VA: 0x1801E6B00
	public void .ctor() { }
	// RVA: 0x1E6B10 Offset: 0x1E5310 VA: 0x1801E6B10
	private void Init() { }
	// RVA: 0x1E6CE0 Offset: 0x1E54E0 VA: 0x1801E6CE0
	public void .ctor(int initialCapacity) { }
	// RVA: 0x1E6E30 Offset: 0x1E5630 VA: 0x1801E6E30
	public void .ctor(IComparer comparer) { }
	// RVA: 0x1E6E60 Offset: 0x1E5660 VA: 0x1801E6E60
	public void .ctor(IComparer comparer, int capacity) { }
	// RVA: 0x1E6EB0 Offset: 0x1E56B0 VA: 0x1801E6EB0 Slot: 12
	public virtual void Add(object key, object value) { }
	// RVA: 0x1E7080 Offset: 0x1E5880 VA: 0x1801E7080 Slot: 13
	public virtual int get_Capacity() { }
	// RVA: 0x1E70A0 Offset: 0x1E58A0 VA: 0x1801E70A0 Slot: 14
	public virtual void set_Capacity(int value) { }
	// RVA: 0x197B20 Offset: 0x196320 VA: 0x180197B20 Slot: 15
	public virtual int get_Count() { }
	// RVA: 0x1E7260 Offset: 0x1E5A60 VA: 0x1801E7260 Slot: 16
	public virtual object Clone() { }
	// RVA: 0x1E7480 Offset: 0x1E5C80 VA: 0x1801E7480 Slot: 17
	public virtual bool Contains(object key) { }
	// RVA: 0x1E74A0 Offset: 0x1E5CA0 VA: 0x1801E74A0 Slot: 18
	public virtual void CopyTo(Array array, int arrayIndex) { }
	// RVA: 0x1E7740 Offset: 0x1E5F40 VA: 0x1801E7740
	private void EnsureCapacity(int min) { }
	// RVA: 0x1E7790 Offset: 0x1E5F90 VA: 0x1801E7790 Slot: 19
	public virtual object GetByIndex(int index) { }
	// RVA: 0x1E7890 Offset: 0x1E6090 VA: 0x1801E7890 Slot: 10
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x1E7940 Offset: 0x1E6140 VA: 0x1801E7940 Slot: 20
	public virtual IDictionaryEnumerator GetEnumerator() { }
	// RVA: 0x1E79F0 Offset: 0x1E61F0 VA: 0x1801E79F0 Slot: 21
	public virtual object GetKey(int index) { }
	// RVA: 0x1E7AF0 Offset: 0x1E62F0 VA: 0x1801E7AF0 Slot: 22
	public virtual object get_Item(object key) { }
	// RVA: 0x1E7B50 Offset: 0x1E6350 VA: 0x1801E7B50 Slot: 23
	public virtual void set_Item(object key, object value) { }
	// RVA: 0x1E7CD0 Offset: 0x1E64D0 VA: 0x1801E7CD0 Slot: 24
	public virtual int IndexOfKey(object key) { }
	// RVA: 0x1E7DD0 Offset: 0x1E65D0 VA: 0x1801E7DD0
	private void Insert(int index, object key, object value) { }
	// RVA: 0x1E7F50 Offset: 0x1E6750 VA: 0x1801E7F50 Slot: 25
	public virtual void RemoveAt(int index) { }
	// RVA: 0x1E80E0 Offset: 0x1E68E0 VA: 0x1801E80E0
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private class SortedList.SortedListEnumerator : IDictionaryEnumerator, IEnumerator, ICloneable // TypeDefIndex: 1049
{
	// Fields
	private SortedList sortedList; // 0x10
	private object key; // 0x18
	private object value; // 0x20
	private int index; // 0x28
	private int startIndex; // 0x2C
	private int endIndex; // 0x30
	private int version; // 0x34
	private bool current; // 0x38
	private int getObjectRetType; // 0x3C

	// Properties
	public virtual object Key { get; }
	public virtual DictionaryEntry Entry { get; }
	public virtual object Current { get; }
	public virtual object Value { get; }

	// Methods
	// RVA: 0x275810 Offset: 0x274010 VA: 0x180275810
	internal void .ctor(SortedList sortedList, int index, int count, int getObjRetType) { }
	// RVA: 0x2569A0 Offset: 0x2551A0 VA: 0x1802569A0 Slot: 9
	public object Clone() { }
	// RVA: 0x275850 Offset: 0x274050 VA: 0x180275850 Slot: 10
	public virtual object get_Key() { }
	// RVA: 0x275960 Offset: 0x274160 VA: 0x180275960 Slot: 11
	public virtual bool MoveNext() { }
	// RVA: 0x275AB0 Offset: 0x2742B0 VA: 0x180275AB0 Slot: 12
	public virtual DictionaryEntry get_Entry() { }
	// RVA: 0x275BD0 Offset: 0x2743D0 VA: 0x180275BD0 Slot: 13
	public virtual object get_Current() { }
	// RVA: 0x275CE0 Offset: 0x2744E0 VA: 0x180275CE0 Slot: 14
	public virtual object get_Value() { }
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
private class SortedList.KeyList // TypeDefIndex: 1050
{
	// Fields
	private SortedList sortedList; // 0x10
}

// Namespace: 
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
private class SortedList.ValueList // TypeDefIndex: 1051
{
	// Fields
	private SortedList sortedList; // 0x10
}

// Namespace: System.Collections
[Serializable]
public class Stack : ICollection, IEnumerable, ICloneable // TypeDefIndex: 1052
{
	// Fields
	private object[] _array; // 0x10
	private int _size; // 0x18
	private int _version; // 0x1C

	// Properties
	public virtual int Count { get; }

	// Methods
	// RVA: 0x1E8EA0 Offset: 0x1E76A0 VA: 0x1801E8EA0
	public void .ctor() { }
	// RVA: 0x1E8F30 Offset: 0x1E7730 VA: 0x1801E8F30
	public void .ctor(int initialCapacity) { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 8
	public virtual int get_Count() { }
	// RVA: 0x1E9020 Offset: 0x1E7820 VA: 0x1801E9020 Slot: 9
	public virtual void Clear() { }
	// RVA: 0x1E9050 Offset: 0x1E7850 VA: 0x1801E9050 Slot: 10
	public virtual object Clone() { }
	// RVA: 0x1E91E0 Offset: 0x1E79E0 VA: 0x1801E91E0 Slot: 11
	public virtual void CopyTo(Array array, int index) { }
	// RVA: 0x1E94E0 Offset: 0x1E7CE0 VA: 0x1801E94E0 Slot: 12
	public virtual IEnumerator GetEnumerator() { }
	// RVA: 0x1E9580 Offset: 0x1E7D80 VA: 0x1801E9580 Slot: 13
	public virtual object Peek() { }
	// RVA: 0x1E9670 Offset: 0x1E7E70 VA: 0x1801E9670 Slot: 14
	public virtual object Pop() { }
	// RVA: 0x1E9770 Offset: 0x1E7F70 VA: 0x1801E9770 Slot: 15
	public virtual void Push(object obj) { }
}

// Namespace: 
[Serializable]
private class Stack.StackEnumerator : IEnumerator, ICloneable // TypeDefIndex: 1053
{
	// Fields
	private Stack _stack; // 0x10
	private int _index; // 0x18
	private int _version; // 0x1C
	private object currentElement; // 0x20

	// Properties
	public virtual object Current { get; }

	// Methods
	// RVA: 0x275DF0 Offset: 0x2745F0 VA: 0x180275DF0
	internal void .ctor(Stack stack) { }
	// RVA: 0x2569A0 Offset: 0x2551A0 VA: 0x1802569A0 Slot: 6
	public object Clone() { }
	// RVA: 0x275E20 Offset: 0x274620 VA: 0x180275E20 Slot: 7
	public virtual bool MoveNext() { }
	// RVA: 0x275FB0 Offset: 0x2747B0 VA: 0x180275FB0 Slot: 8
	public virtual object get_Current() { }
}

// Namespace: System.Collections.ObjectModel
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
public class ReadOnlyCollection<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T> // TypeDefIndex: 1054
{
	// Fields
	private IList<T> list; // 0x0
	private object _syncRoot; // 0x0

	// Properties
	public int Count { get; }
	public T Item { get; }
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private T System.Collections.Generic.IList<T>.Item { get; set; }

	// Methods
	// RVA: 0x7B4F40 Offset: 0x7B3740 VA: 0x1807B4F40
	public void .ctor(IList<T> list) { }
	// RVA: 0x7B4F70 Offset: 0x7B3770 VA: 0x1807B4F70 Slot: 23
	public int get_Count() { }
	// RVA: 0x7B78D0 Offset: 0x7B60D0 VA: 0x1807B78D0 Slot: 22
	public T get_Item(int index) { }
	// RVA: 0x7BB2B0 Offset: 0x7B9AB0 VA: 0x1807BB2B0 Slot: 13
	public bool Contains(T value) { }
	// RVA: 0x7B5180 Offset: 0x7B3980 VA: 0x1807B5180 Slot: 14
	public void CopyTo(T[] array, int index) { }
	// RVA: 0x7B51F0 Offset: 0x7B39F0 VA: 0x1807B51F0 Slot: 16
	public IEnumerator<T> GetEnumerator() { }
	// RVA: 0x7BB320 Offset: 0x7B9B20 VA: 0x1807BB320 Slot: 6
	public int IndexOf(T value) { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 10
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	// RVA: 0x7B78D0 Offset: 0x7B60D0 VA: 0x1807B78D0 Slot: 4
	private T System.Collections.Generic.IList<T>.get_Item(int index) { }
	// RVA: 0x7B5330 Offset: 0x7B3B30 VA: 0x1807B5330 Slot: 5
	private void System.Collections.Generic.IList<T>.set_Item(int index, T value) { }
	// RVA: 0x7B5330 Offset: 0x7B3B30 VA: 0x1807B5330 Slot: 11
	private void System.Collections.Generic.ICollection<T>.Add(T value) { }
	// RVA: 0x7B5330 Offset: 0x7B3B30 VA: 0x1807B5330 Slot: 12
	private void System.Collections.Generic.ICollection<T>.Clear() { }
	// RVA: 0x7B5330 Offset: 0x7B3B30 VA: 0x1807B5330 Slot: 7
	private void System.Collections.Generic.IList<T>.Insert(int index, T value) { }
	// RVA: 0x7B5330 Offset: 0x7B3B30 VA: 0x1807B5330 Slot: 15
	private bool System.Collections.Generic.ICollection<T>.Remove(T value) { }
	// RVA: 0x7B5330 Offset: 0x7B3B30 VA: 0x1807B5330 Slot: 8
	private void System.Collections.Generic.IList<T>.RemoveAt(int index) { }
	// RVA: 0x802710 Offset: 0x800F10 VA: 0x180802710 Slot: 17
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x8027A0 Offset: 0x800FA0 VA: 0x1808027A0 Slot: 20
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	// RVA: 0x7B5330 Offset: 0x7B3B30 VA: 0x1807B5330 Slot: 18
	private int System.Collections.IList.Add(object value) { }
	// RVA: 0x7B85D0 Offset: 0x7B6DD0 VA: 0x1807B85D0
	private static bool IsCompatibleObject(object value) { }
	// RVA: 0x7BB850 Offset: 0x7BA050 VA: 0x1807BB850 Slot: 19
	private bool System.Collections.IList.Contains(object value) { }
}

// Namespace: System.Collections.Concurrent
internal sealed class CDSCollectionETWBCLProvider : EventSource // TypeDefIndex: 1055
{
	// Fields
	public static CDSCollectionETWBCLProvider Log; // 0xA15984

	// Methods
	// RVA: 0x249080 Offset: 0x247880 VA: 0x180249080
	private void .ctor() { }
	// RVA: 0x249110 Offset: 0x247910 VA: 0x180249110
	public void ConcurrentDictionary_AcquiringAllLocks(int numOfBuckets) { }
	// RVA: 0x249170 Offset: 0x247970 VA: 0x180249170
	private static void .cctor() { }
}

// Namespace: System.Collections.Concurrent
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
public class ConcurrentDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IDictionary, ICollection, IReadOnlyCollection<KeyValuePair<TKey, TValue>> // TypeDefIndex: 1056
{
	// Fields
	private ConcurrentDictionary.Tables<TKey, TValue> _tables; // 0x0
	private IEqualityComparer<TKey> _comparer; // 0x0
	private readonly bool _growLockArray; // 0x0
	private int _budget; // 0x0
	private const int DefaultCapacity = 31; // 0x0
	private const int MaxLockNumber = 1024; // 0x0
	private static readonly bool s_isValueWriteAtomic; // 0x0

	// Properties
	public TKey Item { set; }
	public int Count { get; }
	public ICollection<TKey> Keys { get; }
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
	private object System.Collections.IDictionary.Item { get; set; }
	private static int DefaultConcurrencyLevel { get; }

	// Methods
	// RVA: 0x795FA0 Offset: 0x7947A0 VA: 0x180795FA0
	private static bool IsValueWriteAtomic() { }
	// RVA: 0x796100 Offset: 0x794900 VA: 0x180796100
	public void .ctor() { }
	// RVA: 0x7961F0 Offset: 0x7949F0 VA: 0x1807961F0
	public void .ctor(int concurrencyLevel, int capacity) { }
	// RVA: 0x796230 Offset: 0x794A30 VA: 0x180796230
	internal void .ctor(int concurrencyLevel, int capacity, bool growLockArray, IEqualityComparer<TKey> comparer) { }
	// RVA: 0x796540 Offset: 0x794D40 VA: 0x180796540
	public bool TryAdd(TKey key, TValue value) { }
	// RVA: 0x7966A0 Offset: 0x794EA0 VA: 0x1807966A0 Slot: 21
	public bool ContainsKey(TKey key) { }
	// RVA: 0x7967A0 Offset: 0x794FA0 VA: 0x1807967A0
	public bool TryRemove(TKey key, out TValue value) { }
	// RVA: 0x7968B0 Offset: 0x7950B0 VA: 0x1807968B0
	private bool TryRemoveInternal(TKey key, out TValue value, bool matchValue, TValue oldValue) { }
	// RVA: 0x796E80 Offset: 0x795680 VA: 0x180796E80 Slot: 22
	public bool TryGetValue(TKey key, out TValue value) { }
	// RVA: 0x796FC0 Offset: 0x7957C0 VA: 0x180796FC0
	private bool TryGetValueInternal(TKey key, int hashcode, out TValue value) { }
	// RVA: 0x797180 Offset: 0x795980 VA: 0x180797180 Slot: 8
	public void Clear() { }
	// RVA: 0x797430 Offset: 0x795C30 VA: 0x180797430 Slot: 10
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
	// RVA: 0x797700 Offset: 0x795F00 VA: 0x180797700
	private void CopyToPairs(KeyValuePair<TKey, TValue>[] array, int index) { }
	// RVA: 0x797700 Offset: 0x795F00 VA: 0x180797700
	private void CopyToEntries(DictionaryEntry[] array, int index) { }
	// RVA: 0x7977D0 Offset: 0x795FD0 VA: 0x1807977D0
	private void CopyToObjects(object[] array, int index) { }
	// RVA: 0x797940 Offset: 0x796140 VA: 0x180797940 Slot: 12
	public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() { }
	// RVA: 0x7979D0 Offset: 0x7961D0 VA: 0x1807979D0
	private bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, out TValue resultingValue) { }
	// RVA: 0x798240 Offset: 0x796A40 VA: 0x180798240 Slot: 23
	public void set_Item(TKey key, TValue value) { }
	// RVA: 0x7983A0 Offset: 0x796BA0 VA: 0x1807983A0
	private static void ThrowKeyNullException() { }
	// RVA: 0x798400 Offset: 0x796C00 VA: 0x180798400 Slot: 20
	public int get_Count() { }
	// RVA: 0x798520 Offset: 0x796D20 VA: 0x180798520
	private int GetCountInternal() { }
	// RVA: 0x7985B0 Offset: 0x796DB0 VA: 0x1807985B0
	public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory) { }
	// RVA: 0x798800 Offset: 0x797000 VA: 0x180798800 Slot: 4
	private void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value) { }
	// RVA: 0x7988F0 Offset: 0x7970F0 VA: 0x1807988F0 Slot: 24
	public ICollection<TKey> get_Keys() { }
	// RVA: 0x798920 Offset: 0x797120 VA: 0x180798920 Slot: 7
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair) { }
	// RVA: 0x7989A0 Offset: 0x7971A0 VA: 0x1807989A0 Slot: 9
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 6
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly() { }
	// RVA: 0x798A40 Offset: 0x797240 VA: 0x180798A40 Slot: 11
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair) { }
	// RVA: 0x798B50 Offset: 0x797350 VA: 0x180798B50 Slot: 13
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x798B80 Offset: 0x797380 VA: 0x180798B80 Slot: 16
	private bool System.Collections.IDictionary.Contains(object key) { }
	// RVA: 0x798CF0 Offset: 0x7974F0 VA: 0x180798CF0 Slot: 17
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { }
	// RVA: 0x798D70 Offset: 0x797570 VA: 0x180798D70 Slot: 14
	private object System.Collections.IDictionary.get_Item(object key) { }
	// RVA: 0x798EF0 Offset: 0x7976F0 VA: 0x180798EF0 Slot: 15
	private void System.Collections.IDictionary.set_Item(object key, object value) { }
	// RVA: 0x7991C0 Offset: 0x7979C0 VA: 0x1807991C0 Slot: 18
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	// RVA: 0x799590 Offset: 0x797D90 VA: 0x180799590
	private void GrowTable(ConcurrentDictionary.Tables<TKey, TValue> tables) { }
	// RVA: 0x799E10 Offset: 0x798610 VA: 0x180799E10
	private static int GetBucket(int hashcode, int bucketCount) { }
	// RVA: 0x799E20 Offset: 0x798620 VA: 0x180799E20
	private static void GetBucketAndLockNo(int hashcode, out int bucketNo, out int lockNo, int bucketCount, int lockCount) { }
	// RVA: 0x799E40 Offset: 0x798640 VA: 0x180799E40
	private static int get_DefaultConcurrencyLevel() { }
	// RVA: 0x799E50 Offset: 0x798650 VA: 0x180799E50
	private void AcquireAllLocks(ref int locksAcquired) { }
	// RVA: 0x79A000 Offset: 0x798800 VA: 0x18079A000
	private void AcquireLocks(int fromInclusive, int toExclusive, ref int locksAcquired) { }
	// RVA: 0x79A140 Offset: 0x798940 VA: 0x18079A140
	private void ReleaseLocks(int fromInclusive, int toExclusive) { }
	// RVA: 0x79A1E0 Offset: 0x7989E0 VA: 0x18079A1E0
	private ReadOnlyCollection<TKey> GetKeys() { }
	// RVA: 0x79A4F0 Offset: 0x798CF0 VA: 0x18079A4F0
	private static void .cctor() { }
}

// Namespace: 
private sealed class ConcurrentDictionary.Tables<TKey, TValue> // TypeDefIndex: 1057
{
	// Fields
	internal readonly ConcurrentDictionary.Node<TKey, TValue>[] _buckets; // 0x0
	internal readonly object[] _locks; // 0x0
	internal int[] _countPerLock; // 0x0

	// Methods
	// RVA: 0x7C1080 Offset: 0x7BF880 VA: 0x1807C1080
	internal void .ctor(ConcurrentDictionary.Node<TKey, TValue>[] buckets, object[] locks, int[] countPerLock) { }
}

// Namespace: 
[Serializable]
private sealed class ConcurrentDictionary.Node<TKey, TValue> // TypeDefIndex: 1058
{
	// Fields
	internal readonly TKey _key; // 0x0
	internal TValue _value; // 0x0
	internal ConcurrentDictionary.Node<TKey, TValue> _next; // 0x0
	internal readonly int _hashcode; // 0x0

	// Methods
	// RVA: 0x7AAA80 Offset: 0x7A9280 VA: 0x1807AAA80
	internal void .ctor(TKey key, TValue value, int hashcode, ConcurrentDictionary.Node<TKey, TValue> next) { }
}

// Namespace: 
[Serializable]
private sealed class ConcurrentDictionary.DictionaryEnumerator<TKey, TValue> : IDictionaryEnumerator, IEnumerator // TypeDefIndex: 1059
{
	// Fields
	private IEnumerator<KeyValuePair<TKey, TValue>> _enumerator; // 0x0

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Methods
	// RVA: 0x7A13C0 Offset: 0x79FBC0 VA: 0x1807A13C0
	internal void .ctor(ConcurrentDictionary<TKey, TValue> dictionary) { }
	// RVA: 0x7A1400 Offset: 0x79FC00 VA: 0x1807A1400 Slot: 6
	public DictionaryEntry get_Entry() { }
	// RVA: 0x7A1590 Offset: 0x79FD90 VA: 0x1807A1590 Slot: 4
	public object get_Key() { }
	// RVA: 0x7A1640 Offset: 0x79FE40 VA: 0x1807A1640 Slot: 5
	public object get_Value() { }
	// RVA: 0x7A1700 Offset: 0x79FF00 VA: 0x1807A1700 Slot: 8
	public object get_Current() { }
	// RVA: 0x7A17C0 Offset: 0x79FFC0 VA: 0x1807A17C0 Slot: 7
	public bool MoveNext() { }
}

// Namespace: 
private sealed class ConcurrentDictionary.<GetEnumerator>d__32<TKey, TValue> : IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, IEnumerator // TypeDefIndex: 1060
{
	// Fields
	private int <>1__state; // 0x0
	private KeyValuePair<TKey, TValue> <>2__current; // 0x0
	public ConcurrentDictionary<TKey, TValue> <>4__this; // 0x0
	private ConcurrentDictionary.Node<TKey, TValue>[] <buckets>5__1; // 0x0
	private ConcurrentDictionary.Node<TKey, TValue> <current>5__2; // 0x0
	private int <i>5__3; // 0x0

	// Properties
	private KeyValuePair<TKey, TValue> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C7A90 Offset: 0x7C6290 VA: 0x1807C7A90
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x7C82B0 Offset: 0x7C6AB0 VA: 0x1807C82B0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x72ACF0 Offset: 0x7294F0 VA: 0x18072ACF0 Slot: 4
	private KeyValuePair<TKey, TValue> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x72AD10 Offset: 0x729510 VA: 0x18072AD10 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: System.Collections.Concurrent
[Serializable]
public class ConcurrentQueue<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T> // TypeDefIndex: 1061
{
	// Fields
	private const int InitialSegmentLength = 32; // 0x0
	private const int MaxSegmentLength = 1048576; // 0x0
	private object _crossSegmentLock; // 0x0
	private ConcurrentQueue.Segment<T> _tail; // 0x0
	private ConcurrentQueue.Segment<T> _head; // 0x0

	// Properties
	public int Count { get; }

	// Methods
	// RVA: 0x79E1D0 Offset: 0x79C9D0 VA: 0x18079E1D0
	public void .ctor() { }
	// RVA: 0x79E2D0 Offset: 0x79CAD0 VA: 0x18079E2D0 Slot: 6
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	// RVA: 0x79E430 Offset: 0x79CC30 VA: 0x18079E430 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x79E480 Offset: 0x79CC80 VA: 0x18079E480 Slot: 9
	public T[] ToArray() { }
	// RVA: 0x79E780 Offset: 0x79CF80 VA: 0x18079E780 Slot: 8
	public int get_Count() { }
	// RVA: 0x79EAF0 Offset: 0x79D2F0 VA: 0x18079EAF0
	private static int GetCount(ConcurrentQueue.Segment<T> s, int head, int tail) { }
	// RVA: 0x79EBD0 Offset: 0x79D3D0 VA: 0x18079EBD0
	private static long GetCount(ConcurrentQueue.Segment<T> head, int headHead, ConcurrentQueue.Segment<T> tail, int tailTail) { }
	// RVA: 0x79EDA0 Offset: 0x79D5A0 VA: 0x18079EDA0 Slot: 10
	public void CopyTo(T[] array, int index) { }
	// RVA: 0x79F0A0 Offset: 0x79D8A0 VA: 0x18079F0A0 Slot: 4
	public IEnumerator<T> GetEnumerator() { }
	// RVA: 0x79F140 Offset: 0x79D940 VA: 0x18079F140
	private void SnapForObservation(out ConcurrentQueue.Segment<T> head, out int headHead, out ConcurrentQueue.Segment<T> tail, out int tailTail) { }
	// RVA: 0x79F380 Offset: 0x79DB80 VA: 0x18079F380
	private T GetItemWhenAvailable(ConcurrentQueue.Segment<T> segment, int i) { }
	// RVA: 0x79F770 Offset: 0x79DF70 VA: 0x18079F770
	private IEnumerator<T> Enumerate(ConcurrentQueue.Segment<T> head, int headHead, ConcurrentQueue.Segment<T> tail, int tailTail) { }
	// RVA: 0x79F820 Offset: 0x79E020 VA: 0x18079F820
	public void Enqueue(T item) { }
	// RVA: 0x79F8A0 Offset: 0x79E0A0 VA: 0x18079F8A0
	private void EnqueueSlow(T item) { }
	// RVA: 0x79FBD0 Offset: 0x79E3D0 VA: 0x18079FBD0
	public bool TryDequeue(out T result) { }
	// RVA: 0x79FC60 Offset: 0x79E460 VA: 0x18079FC60
	private bool TryDequeueSlow(out T item) { }
}

// Namespace: 
private sealed class ConcurrentQueue.Segment<T> // TypeDefIndex: 1062
{
	// Fields
	internal readonly ConcurrentQueue.Segment.Slot<T>[] _slots; // 0x0
	internal readonly int _slotsMask; // 0x0
	internal PaddedHeadAndTail _headAndTail; // 0x0
	internal bool _preservedForObservation; // 0x0
	internal bool _frozenForEnqueues; // 0x0
	internal ConcurrentQueue.Segment<T> _nextSegment; // 0x0

	// Properties
	internal int Capacity { get; }
	internal int FreezeOffset { get; }

	// Methods
	// RVA: 0x7BED20 Offset: 0x7BD520 VA: 0x1807BED20
	public void .ctor(int boundedLength) { }
	// RVA: 0x1E7080 Offset: 0x1E5880 VA: 0x1801E7080
	internal int get_Capacity() { }
	// RVA: 0x7BEDE0 Offset: 0x7BD5E0 VA: 0x1807BEDE0
	internal int get_FreezeOffset() { }
	// RVA: 0x7BEE00 Offset: 0x7BD600 VA: 0x1807BEE00
	internal void EnsureFrozenForEnqueues() { }
	// RVA: 0x7BEF30 Offset: 0x7BD730 VA: 0x1807BEF30
	public bool TryDequeue(out T item) { }
	// RVA: 0x7BF160 Offset: 0x7BD960 VA: 0x1807BF160
	public bool TryEnqueue(T item) { }
}

// Namespace: 
internal struct ConcurrentQueue.Segment.Slot<T> // TypeDefIndex: 1063
{
	// Fields
	public T Item; // 0x0
	public int SequenceNumber; // 0x0
}

// Namespace: 
private sealed class ConcurrentQueue.<Enumerate>d__27<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 1064
{
	// Fields
	private int <>1__state; // 0x0
	private T <>2__current; // 0x0
	public ConcurrentQueue.Segment<T> head; // 0x0
	public ConcurrentQueue.Segment<T> tail; // 0x0
	public int tailTail; // 0x0
	public int headHead; // 0x0
	public ConcurrentQueue<T> <>4__this; // 0x0
	private int <i>5__1; // 0x0
	private int <headTail>5__2; // 0x0
	private int <i>5__3; // 0x0
	private int <i>5__4; // 0x0
	private ConcurrentQueue.Segment<T> <s>5__5; // 0x0
	private int <i>5__6; // 0x0
	private int <sTail>5__7; // 0x0
	private int <i>5__8; // 0x0

	// Properties
	private T System.Collections.Generic.IEnumerator<T>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C7A90 Offset: 0x7C6290 VA: 0x1807C7A90
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x7C7AB0 Offset: 0x7C62B0 VA: 0x1807C7AB0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private T System.Collections.Generic.IEnumerator<T>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: System.Collections.Concurrent
internal struct PaddedHeadAndTail // TypeDefIndex: 1065
{
	// Fields
	public int Head; // 0x80
	public int Tail; // 0x100
}

// Namespace: System.Collections.Generic
public static class KeyValuePair // TypeDefIndex: 1066
{
	// Methods
	// RVA: 0x330430 Offset: 0x32EC30 VA: 0x180330430
	internal static string PairToString(object key, object value) { }
}

// Namespace: System.Collections.Generic
[Serializable]
public struct KeyValuePair<TKey, TValue> // TypeDefIndex: 1067
{
	// Fields
	private TKey key; // 0x0
	private TValue value; // 0x0

	// Properties
	public TKey Key { get; }
	public TValue Value { get; }

	// Methods
	// RVA: 0x12D100 Offset: 0x12C500 VA: 0x18012D100
	public void .ctor(TKey key, TValue value) { }
	// RVA: 0x86B0 Offset: 0x7AB0 VA: 0x1800086B0
	public TKey get_Key() { }
	// RVA: 0x26430 Offset: 0x25830 VA: 0x180026430
	public TValue get_Value() { }
	// RVA: 0x12D110 Offset: 0x12C510 VA: 0x18012D110 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Collections.Generic
internal static class IntrospectiveSortUtilities // TypeDefIndex: 1068
{
	// Methods
	// RVA: 0x329860 Offset: 0x328060 VA: 0x180329860
	internal static int FloorLog2(int n) { }
	// RVA: 0x329880 Offset: 0x328080 VA: 0x180329880
	internal static void ThrowOrIgnoreBadComparer(object comparer) { }
}

// Namespace: System.Collections.Generic
internal class ArraySortHelper<T> // TypeDefIndex: 1069
{
	// Methods
	// RVA: 0x7CE900 Offset: 0x7CD100 VA: 0x1807CE900
	public static void Sort(T[] keys, int index, int length, IComparer<T> comparer) { }
	// RVA: 0x7CEBD0 Offset: 0x7CD3D0 VA: 0x1807CEBD0
	public static int BinarySearch(T[] array, int index, int length, T value, IComparer<T> comparer) { }
	// RVA: 0x7CED60 Offset: 0x7CD560 VA: 0x1807CED60
	internal static void Sort(T[] keys, int index, int length, Comparison<T> comparer) { }
	// RVA: 0x60E900 Offset: 0x60D100 VA: 0x18060E900
	internal static int InternalBinarySearch(T[] array, int index, int length, T value, IComparer<T> comparer) { }
	// RVA: 0x60EA20 Offset: 0x60D220 VA: 0x18060EA20
	private static void SwapIfGreater(T[] keys, Comparison<T> comparer, int a, int b) { }
	// RVA: 0x60EBA0 Offset: 0x60D3A0 VA: 0x18060EBA0
	private static void Swap(T[] a, int i, int j) { }
	// RVA: 0x60CDC0 Offset: 0x60B5C0 VA: 0x18060CDC0
	internal static void IntrospectiveSort(T[] keys, int left, int length, Comparison<T> comparer) { }
	// RVA: 0x60CEB0 Offset: 0x60B6B0 VA: 0x18060CEB0
	private static void IntroSort(T[] keys, int lo, int hi, int depthLimit, Comparison<T> comparer) { }
	// RVA: 0x60EC20 Offset: 0x60D420 VA: 0x18060EC20
	private static int PickPivotAndPartition(T[] keys, int lo, int hi, Comparison<T> comparer) { }
	// RVA: 0x60D670 Offset: 0x60BE70 VA: 0x18060D670
	private static void Heapsort(T[] keys, int lo, int hi, Comparison<T> comparer) { }
	// RVA: 0x60EFF0 Offset: 0x60D7F0 VA: 0x18060EFF0
	private static void DownHeap(T[] keys, int i, int n, int lo, Comparison<T> comparer) { }
	// RVA: 0x60F280 Offset: 0x60DA80 VA: 0x18060F280
	private static void InsertionSort(T[] keys, int lo, int hi, Comparison<T> comparer) { }
}

// Namespace: System.Collections.Generic
internal class ArraySortHelper<TKey, TValue> // TypeDefIndex: 1070
{
	// Fields
	private static ArraySortHelper<TKey, TValue> s_defaultArraySortHelper; // 0x0

	// Properties
	public static ArraySortHelper<TKey, TValue> Default { get; }

	// Methods
	// RVA: 0x612A50 Offset: 0x611250 VA: 0x180612A50
	public static ArraySortHelper<TKey, TValue> get_Default() { }
	// RVA: 0x612B00 Offset: 0x611300 VA: 0x180612B00
	private static ArraySortHelper<TKey, TValue> CreateArraySortHelper() { }
	// RVA: 0x612C30 Offset: 0x611430 VA: 0x180612C30
	public void Sort(TKey[] keys, TValue[] values, int index, int length, IComparer<TKey> comparer) { }
	// RVA: 0x612D80 Offset: 0x611580 VA: 0x180612D80
	private static void SwapIfGreaterWithItems(TKey[] keys, TValue[] values, IComparer<TKey> comparer, int a, int b) { }
	// RVA: 0x612F60 Offset: 0x611760 VA: 0x180612F60
	private static void Swap(TKey[] keys, TValue[] values, int i, int j) { }
	// RVA: 0x613050 Offset: 0x611850 VA: 0x180613050
	internal static void IntrospectiveSort(TKey[] keys, TValue[] values, int left, int length, IComparer<TKey> comparer) { }
	// RVA: 0x613140 Offset: 0x611940 VA: 0x180613140
	private static void IntroSort(TKey[] keys, TValue[] values, int lo, int hi, int depthLimit, IComparer<TKey> comparer) { }
	// RVA: 0x6134F0 Offset: 0x611CF0 VA: 0x1806134F0
	private static int PickPivotAndPartition(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer) { }
	// RVA: 0x6138E0 Offset: 0x6120E0 VA: 0x1806138E0
	private static void Heapsort(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer) { }
	// RVA: 0x613AB0 Offset: 0x6122B0 VA: 0x180613AB0
	private static void DownHeap(TKey[] keys, TValue[] values, int i, int n, int lo, IComparer<TKey> comparer) { }
	// RVA: 0x613DE0 Offset: 0x6125E0 VA: 0x180613DE0
	private static void InsertionSort(TKey[] keys, TValue[] values, int lo, int hi, IComparer<TKey> comparer) { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
internal enum InsertionBehavior // TypeDefIndex: 1071
{
	// Fields
	public byte value__; // 0x0
	public const InsertionBehavior None = 0; // 0x0
	public const InsertionBehavior OverwriteExisting = 1; // 0x0
	public const InsertionBehavior ThrowOnExisting = 2; // 0x0
}

// Namespace: System.Collections.Generic
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
public class Dictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IDictionary, ICollection, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, ISerializable, IDeserializationCallback // TypeDefIndex: 1072
{
	// Fields
	private int[] buckets; // 0x0
	private Dictionary.Entry<TKey, TValue>[] entries; // 0x0
	private int count; // 0x0
	private int version; // 0x0
	private int freeList; // 0x0
	private int freeCount; // 0x0
	private IEqualityComparer<TKey> comparer; // 0x0
	private Dictionary.KeyCollection<TKey, TValue> keys; // 0x0
	private Dictionary.ValueCollection<TKey, TValue> values; // 0x0
	private object _syncRoot; // 0x0
	private const string VersionName = "Version"; // 0x0
	private const string HashSizeName = "HashSize"; // 0x0
	private const string KeyValuePairsName = "KeyValuePairs"; // 0x0
	private const string ComparerName = "Comparer"; // 0x0

	// Properties
	public int Count { get; }
	public Dictionary.KeyCollection<TKey, TValue> Keys { get; }
	public Dictionary.ValueCollection<TKey, TValue> Values { get; }
	public TValue Item { get; set; }
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
	private object System.Collections.IDictionary.Item { get; set; }

	// Methods
	// RVA: 0x7A1C70 Offset: 0x7A0470 VA: 0x1807A1C70
	public void .ctor() { }
	// RVA: 0x7A1CA0 Offset: 0x7A04A0 VA: 0x1807A1CA0
	public void .ctor(int capacity) { }
	// RVA: 0x7A1CD0 Offset: 0x7A04D0 VA: 0x1807A1CD0
	public void .ctor(IEqualityComparer<TKey> comparer) { }
	// RVA: 0x7A1D00 Offset: 0x7A0500 VA: 0x1807A1D00
	public void .ctor(int capacity, IEqualityComparer<TKey> comparer) { }
	// RVA: 0x7A1E40 Offset: 0x7A0640 VA: 0x1807A1E40
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x7A1F10 Offset: 0x7A0710 VA: 0x1807A1F10 Slot: 20
	public int get_Count() { }
	// RVA: 0x7A1F20 Offset: 0x7A0720 VA: 0x1807A1F20
	public Dictionary.KeyCollection<TKey, TValue> get_Keys() { }
	// RVA: 0x7A1FA0 Offset: 0x7A07A0 VA: 0x1807A1FA0
	public Dictionary.ValueCollection<TKey, TValue> get_Values() { }
	// RVA: 0x7A2020 Offset: 0x7A0820 VA: 0x1807A2020 Slot: 23
	public TValue get_Item(TKey key) { }
	// RVA: 0x7A2140 Offset: 0x7A0940 VA: 0x1807A2140 Slot: 24
	public void set_Item(TKey key, TValue value) { }
	// RVA: 0x7A2180 Offset: 0x7A0980 VA: 0x1807A2180 Slot: 4
	public void Add(TKey key, TValue value) { }
	// RVA: 0x7A21C0 Offset: 0x7A09C0 VA: 0x1807A21C0 Slot: 7
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair) { }
	// RVA: 0x7A2210 Offset: 0x7A0A10 VA: 0x1807A2210 Slot: 9
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair) { }
	// RVA: 0x7A2310 Offset: 0x7A0B10 VA: 0x1807A2310 Slot: 11
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair) { }
	// RVA: 0x7A2440 Offset: 0x7A0C40 VA: 0x1807A2440 Slot: 8
	public void Clear() { }
	// RVA: 0x7A24E0 Offset: 0x7A0CE0 VA: 0x1807A24E0 Slot: 25
	public bool ContainsKey(TKey key) { }
	// RVA: 0x7A2520 Offset: 0x7A0D20 VA: 0x1807A2520
	public bool ContainsValue(TValue value) { }
	// RVA: 0x7A2600 Offset: 0x7A0E00 VA: 0x1807A2600
	private void CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
	// RVA: 0x7A2830 Offset: 0x7A1030 VA: 0x1807A2830
	public Dictionary.Enumerator<TKey, TValue> GetEnumerator() { }
	// RVA: 0x7A2870 Offset: 0x7A1070 VA: 0x1807A2870 Slot: 12
	private IEnumerator<KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator() { }
	// RVA: 0x7A2910 Offset: 0x7A1110 VA: 0x1807A2910 Slot: 26
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x7A2CF0 Offset: 0x7A14F0 VA: 0x1807A2CF0
	private int FindEntry(TKey key) { }
	// RVA: 0x7A2F70 Offset: 0x7A1770 VA: 0x1807A2F70
	private void Initialize(int capacity) { }
	// RVA: 0x7A30D0 Offset: 0x7A18D0 VA: 0x1807A30D0
	private bool TryInsert(TKey key, TValue value, InsertionBehavior behavior) { }
	// RVA: 0x7A3740 Offset: 0x7A1F40 VA: 0x1807A3740 Slot: 27
	public virtual void OnDeserialization(object sender) { }
	// RVA: 0x7A3BC0 Offset: 0x7A23C0 VA: 0x1807A3BC0
	private void Resize() { }
	// RVA: 0x7A3C90 Offset: 0x7A2490 VA: 0x1807A3C90
	private void Resize(int newSize, bool forceNewHashCodes) { }
	// RVA: 0x7A3F30 Offset: 0x7A2730 VA: 0x1807A3F30 Slot: 28
	public bool Remove(TKey key) { }
	// RVA: 0x7A4360 Offset: 0x7A2B60 VA: 0x1807A4360 Slot: 29
	public bool TryGetValue(TKey key, out TValue value) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 6
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly() { }
	// RVA: 0x7A4400 Offset: 0x7A2C00 VA: 0x1807A4400 Slot: 10
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index) { }
	// RVA: 0x7A4430 Offset: 0x7A2C30 VA: 0x1807A4430 Slot: 18
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	// RVA: 0x7A2870 Offset: 0x7A1070 VA: 0x1807A2870 Slot: 13
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x7A4A00 Offset: 0x7A3200 VA: 0x1807A4A00 Slot: 14
	private object System.Collections.IDictionary.get_Item(object key) { }
	// RVA: 0x7A4B40 Offset: 0x7A3340 VA: 0x1807A4B40 Slot: 15
	private void System.Collections.IDictionary.set_Item(object key, object value) { }
	// RVA: 0x7A4E50 Offset: 0x7A3650 VA: 0x1807A4E50
	private static bool IsCompatibleKey(object key) { }
	// RVA: 0x7A4F40 Offset: 0x7A3740 VA: 0x1807A4F40 Slot: 16
	private bool System.Collections.IDictionary.Contains(object key) { }
	// RVA: 0x7A5020 Offset: 0x7A3820 VA: 0x1807A5020 Slot: 17
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { }
}

// Namespace: 
private struct Dictionary.Entry<TKey, TValue> // TypeDefIndex: 1073
{
	// Fields
	public int hashCode; // 0x0
	public int next; // 0x0
	public TKey key; // 0x0
	public TValue value; // 0x0
}

// Namespace: 
[Serializable]
public struct Dictionary.Enumerator<TKey, TValue> : IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, IEnumerator, IDictionaryEnumerator // TypeDefIndex: 1074
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0x0
	private int version; // 0x0
	private int index; // 0x0
	private KeyValuePair<TKey, TValue> current; // 0x0
	private int getEnumeratorRetType; // 0x0

	// Properties
	public KeyValuePair<TKey, TValue> Current { get; }
	private object System.Collections.IEnumerator.Current { get; }
	private DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { get; }
	private object System.Collections.IDictionaryEnumerator.Key { get; }
	private object System.Collections.IDictionaryEnumerator.Value { get; }

	// Methods
	// RVA: 0x121390 Offset: 0x120790 VA: 0x180121390
	internal void .ctor(Dictionary<TKey, TValue> dictionary, int getEnumeratorRetType) { }
	// RVA: 0x1213D0 Offset: 0x1207D0 VA: 0x1801213D0 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x1059D0 Offset: 0x104DD0 VA: 0x1801059D0 Slot: 4
	public KeyValuePair<TKey, TValue> get_Current() { }
	// RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80 Slot: 5
	public void Dispose() { }
	// RVA: 0x1213E0 Offset: 0x1207E0 VA: 0x1801213E0 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	// RVA: 0x1213F0 Offset: 0x1207F0 VA: 0x1801213F0 Slot: 10
	private DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry() { }
	// RVA: 0x121580 Offset: 0x120980 VA: 0x180121580 Slot: 8
	private object System.Collections.IDictionaryEnumerator.get_Key() { }
	// RVA: 0x121690 Offset: 0x120A90 VA: 0x180121690 Slot: 9
	private object System.Collections.IDictionaryEnumerator.get_Value() { }
}

// Namespace: 
[Serializable]
public sealed class Dictionary.KeyCollection<TKey, TValue> : ICollection<TKey>, IEnumerable<TKey>, IEnumerable, ICollection, IReadOnlyCollection<TKey> // TypeDefIndex: 1075
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0x0

	// Properties
	public int Count { get; }
	private bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get; }

	// Methods
	// RVA: 0x72AE50 Offset: 0x729650 VA: 0x18072AE50
	public void .ctor(Dictionary<TKey, TValue> dictionary) { }
	// RVA: 0x72AF10 Offset: 0x729710 VA: 0x18072AF10
	public Dictionary.KeyCollection.Enumerator<TKey, TValue> GetEnumerator() { }
	// RVA: 0x72AF50 Offset: 0x729750 VA: 0x18072AF50 Slot: 9
	public void CopyTo(TKey[] array, int index) { }
	// RVA: 0x72B170 Offset: 0x729970 VA: 0x18072B170 Slot: 15
	public int get_Count() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 5
	private bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly() { }
	// RVA: 0x72B1A0 Offset: 0x7299A0 VA: 0x18072B1A0 Slot: 6
	private void System.Collections.Generic.ICollection<TKey>.Add(TKey item) { }
	// RVA: 0x72B200 Offset: 0x729A00 VA: 0x18072B200 Slot: 7
	private void System.Collections.Generic.ICollection<TKey>.Clear() { }
	// RVA: 0x72B260 Offset: 0x729A60 VA: 0x18072B260 Slot: 8
	private bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item) { }
	// RVA: 0x72B2A0 Offset: 0x729AA0 VA: 0x18072B2A0 Slot: 10
	private bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item) { }
	// RVA: 0x72B300 Offset: 0x729B00 VA: 0x18072B300 Slot: 11
	private IEnumerator<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator() { }
	// RVA: 0x72B300 Offset: 0x729B00 VA: 0x18072B300 Slot: 12
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x72B380 Offset: 0x729B80 VA: 0x18072B380 Slot: 13
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
}

// Namespace: 
[Serializable]
public struct Dictionary.KeyCollection.Enumerator<TKey, TValue> : IEnumerator<TKey>, IDisposable, IEnumerator // TypeDefIndex: 1076
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0x0
	private int index; // 0x0
	private int version; // 0x0
	private TKey currentKey; // 0x0

	// Properties
	public TKey Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x1217A0 Offset: 0x120BA0 VA: 0x1801217A0
	internal void .ctor(Dictionary<TKey, TValue> dictionary) { }
	// RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80 Slot: 5
	public void Dispose() { }
	// RVA: 0x1217D0 Offset: 0x120BD0 VA: 0x1801217D0 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x86C0 Offset: 0x7AC0 VA: 0x1800086C0 Slot: 4
	public TKey get_Current() { }
	// RVA: 0x121900 Offset: 0x120D00 VA: 0x180121900 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
[Serializable]
public sealed class Dictionary.ValueCollection<TKey, TValue> : ICollection<TValue>, IEnumerable<TValue>, IEnumerable, ICollection, IReadOnlyCollection<TValue> // TypeDefIndex: 1077
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0x0

	// Properties
	public int Count { get; }
	private bool System.Collections.Generic.ICollection<TValue>.IsReadOnly { get; }

	// Methods
	// RVA: 0x80CC60 Offset: 0x80B460 VA: 0x18080CC60
	public void .ctor(Dictionary<TKey, TValue> dictionary) { }
	// RVA: 0x72B880 Offset: 0x72A080 VA: 0x18072B880
	public Dictionary.ValueCollection.Enumerator<TKey, TValue> GetEnumerator() { }
	// RVA: 0x80CD20 Offset: 0x80B520 VA: 0x18080CD20 Slot: 9
	public void CopyTo(TValue[] array, int index) { }
	// RVA: 0x72B170 Offset: 0x729970 VA: 0x18072B170 Slot: 15
	public int get_Count() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 5
	private bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly() { }
	// RVA: 0x80CF50 Offset: 0x80B750 VA: 0x18080CF50 Slot: 6
	private void System.Collections.Generic.ICollection<TValue>.Add(TValue item) { }
	// RVA: 0x80CFB0 Offset: 0x80B7B0 VA: 0x18080CFB0 Slot: 10
	private bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item) { }
	// RVA: 0x80D010 Offset: 0x80B810 VA: 0x18080D010 Slot: 7
	private void System.Collections.Generic.ICollection<TValue>.Clear() { }
	// RVA: 0x80D070 Offset: 0x80B870 VA: 0x18080D070 Slot: 8
	private bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item) { }
	// RVA: 0x72BC20 Offset: 0x72A420 VA: 0x18072BC20 Slot: 11
	private IEnumerator<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator() { }
	// RVA: 0x72BC20 Offset: 0x72A420 VA: 0x18072BC20 Slot: 12
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x80D0B0 Offset: 0x80B8B0 VA: 0x18080D0B0 Slot: 13
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
}

// Namespace: 
[Serializable]
public struct Dictionary.ValueCollection.Enumerator<TKey, TValue> : IEnumerator<TValue>, IDisposable, IEnumerator // TypeDefIndex: 1078
{
	// Fields
	private Dictionary<TKey, TValue> dictionary; // 0x0
	private int index; // 0x0
	private int version; // 0x0
	private TValue currentValue; // 0x0

	// Properties
	public TValue Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x121A10 Offset: 0x120E10 VA: 0x180121A10
	internal void .ctor(Dictionary<TKey, TValue> dictionary) { }
	// RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80 Slot: 5
	public void Dispose() { }
	// RVA: 0x121A40 Offset: 0x120E40 VA: 0x180121A40 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x26430 Offset: 0x25830 VA: 0x180026430 Slot: 4
	public TValue get_Current() { }
	// RVA: 0x121A50 Offset: 0x120E50 VA: 0x180121A50 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: System.Collections.Generic
internal class DictionaryHashHelpers // TypeDefIndex: 1079
{
	// Fields
	private static readonly ConditionalWeakTable<object, SerializationInfo> <SerializationInfoTable>k__BackingField; // 0xAC150

	// Methods
	// RVA: 0x472FB0 Offset: 0x4717B0 VA: 0x180472FB0
	private static void .cctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class NonRandomizedStringEqualityComparer : EqualityComparer<string> // TypeDefIndex: 1080
{
	// Methods
	// RVA: 0x7460F0 Offset: 0x7448F0 VA: 0x1807460F0 Slot: 8
	public sealed override bool Equals(string x, string y) { }
	// RVA: 0x746180 Offset: 0x744980 VA: 0x180746180 Slot: 9
	public sealed override int GetHashCode(string obj) { }
	// RVA: 0x7461D0 Offset: 0x7449D0 VA: 0x1807461D0
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
internal sealed class ObjectEqualityComparer : IEqualityComparer // TypeDefIndex: 1081
{
	// Fields
	internal static readonly ObjectEqualityComparer Default; // 0xAC1B3

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x329550 Offset: 0x327D50 VA: 0x180329550 Slot: 5
	private int System.Collections.IEqualityComparer.GetHashCode(object obj) { }
	// RVA: 0x756A80 Offset: 0x755280 VA: 0x180756A80 Slot: 4
	private bool System.Collections.IEqualityComparer.Equals(object x, object y) { }
	// RVA: 0x756AC0 Offset: 0x7552C0 VA: 0x180756AC0
	private static void .cctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
public abstract class Comparer<T> : IComparer, IComparer<T> // TypeDefIndex: 1082
{
	// Fields
	private static Comparer<T> defaultComparer; // 0x0

	// Properties
	public static Comparer<T> Default { get; }

	// Methods
	// RVA: 0x616BD0 Offset: 0x6153D0 VA: 0x180616BD0
	public static Comparer<T> get_Default() { }
	// RVA: 0x616CD0 Offset: 0x6154D0 VA: 0x180616CD0
	private static Comparer<T> CreateComparer() { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract int Compare(T x, T y) { }
	// RVA: 0x617270 Offset: 0x615A70 VA: 0x180617270 Slot: 4
	private int System.Collections.IComparer.Compare(object x, object y) { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	protected void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal class GenericComparer<T> : Comparer<T> // TypeDefIndex: 1083
{
	// Methods
	// RVA: 0x7F2F70 Offset: 0x7F1770 VA: 0x1807F2F70 Slot: 6
	public override int Compare(T x, T y) { }
	// RVA: 0x7F2F80 Offset: 0x7F1780 VA: 0x1807F2F80 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x725470 Offset: 0x723C70 VA: 0x180725470 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x7F2FD0 Offset: 0x7F17D0 VA: 0x1807F2FD0
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal class NullableComparer<T> : Comparer<Nullable<T>> // TypeDefIndex: 1084
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 6
	public override int Compare(Nullable<T> x, Nullable<T> y) { }
	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	// RVA: -1 Offset: -1
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal class ObjectComparer<T> : Comparer<T> // TypeDefIndex: 1085
{
	// Methods
	// RVA: 0x7ABB70 Offset: 0x7AA370 VA: 0x1807ABB70 Slot: 6
	public override int Compare(T x, T y) { }
	// RVA: 0x7ABCB0 Offset: 0x7AA4B0 VA: 0x1807ABCB0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x725470 Offset: 0x723C70 VA: 0x180725470 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x72ACC0 Offset: 0x7294C0 VA: 0x18072ACC0
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
public abstract class EqualityComparer<T> : IEqualityComparer, IEqualityComparer<T> // TypeDefIndex: 1086
{
	// Fields
	private static EqualityComparer<T> defaultComparer; // 0x0

	// Properties
	public static EqualityComparer<T> Default { get; }

	// Methods
	// RVA: 0x616BD0 Offset: 0x6153D0 VA: 0x180616BD0
	public static EqualityComparer<T> get_Default() { }
	// RVA: 0x732830 Offset: 0x731030 VA: 0x180732830
	private static EqualityComparer<T> CreateComparer() { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool Equals(T x, T y) { }
	// RVA: -1 Offset: -1 Slot: 9
	public abstract int GetHashCode(T obj) { }
	// RVA: 0x733380 Offset: 0x731B80 VA: 0x180733380 Slot: 10
	internal virtual int IndexOf(T[] array, T value, int startIndex, int count) { }
	// RVA: 0x733430 Offset: 0x731C30 VA: 0x180733430 Slot: 11
	internal virtual int LastIndexOf(T[] array, T value, int startIndex, int count) { }
	// RVA: 0x7334E0 Offset: 0x731CE0 VA: 0x1807334E0 Slot: 5
	private int System.Collections.IEqualityComparer.GetHashCode(object obj) { }
	// RVA: 0x7335D0 Offset: 0x731DD0 VA: 0x1807335D0 Slot: 4
	private bool System.Collections.IEqualityComparer.Equals(object x, object y) { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	protected void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal class GenericEqualityComparer<T> : EqualityComparer<T> // TypeDefIndex: 1087
{
	// Methods
	// RVA: 0x7F3260 Offset: 0x7F1A60 VA: 0x1807F3260 Slot: 8
	public override bool Equals(T x, T y) { }
	// RVA: 0x7B0610 Offset: 0x7AEE10 VA: 0x1807B0610 Slot: 9
	public override int GetHashCode(T obj) { }
	// RVA: 0x7F3270 Offset: 0x7F1A70 VA: 0x1807F3270 Slot: 10
	internal override int IndexOf(T[] array, T value, int startIndex, int count) { }
	// RVA: 0x245020 Offset: 0x243820 VA: 0x180245020 Slot: 11
	internal override int LastIndexOf(T[] array, T value, int startIndex, int count) { }
	// RVA: 0x7F2F80 Offset: 0x7F1780 VA: 0x1807F2F80 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x725470 Offset: 0x723C70 VA: 0x180725470 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x7F2FD0 Offset: 0x7F17D0 VA: 0x1807F2FD0
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal class NullableEqualityComparer<T> : EqualityComparer<Nullable<T>> // TypeDefIndex: 1088
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 8
	public override bool Equals(Nullable<T> x, Nullable<T> y) { }
	// RVA: -1 Offset: -1 Slot: 9
	public override int GetHashCode(Nullable<T> obj) { }
	// RVA: -1 Offset: -1 Slot: 10
	internal override int IndexOf(Nullable<T>[] array, Nullable<T> value, int startIndex, int count) { }
	// RVA: -1 Offset: -1 Slot: 11
	internal override int LastIndexOf(Nullable<T>[] array, Nullable<T> value, int startIndex, int count) { }
	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	// RVA: -1 Offset: -1
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal class ObjectEqualityComparer<T> : EqualityComparer<T> // TypeDefIndex: 1089
{
	// Methods
	// RVA: 0x7AF5D0 Offset: 0x7ADDD0 VA: 0x1807AF5D0 Slot: 8
	public override bool Equals(T x, T y) { }
	// RVA: 0x7AF680 Offset: 0x7ADE80 VA: 0x1807AF680 Slot: 9
	public override int GetHashCode(T obj) { }
	// RVA: 0x7AF6E0 Offset: 0x7ADEE0 VA: 0x1807AF6E0 Slot: 10
	internal override int IndexOf(T[] array, T value, int startIndex, int count) { }
	// RVA: 0x7AF850 Offset: 0x7AE050 VA: 0x1807AF850 Slot: 11
	internal override int LastIndexOf(T[] array, T value, int startIndex, int count) { }
	// RVA: 0x7ABCB0 Offset: 0x7AA4B0 VA: 0x1807ABCB0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x725470 Offset: 0x723C70 VA: 0x180725470 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x72ACC0 Offset: 0x7294C0 VA: 0x18072ACC0
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal class ByteEqualityComparer : EqualityComparer<byte> // TypeDefIndex: 1090
{
	// Methods
	// RVA: 0x244D80 Offset: 0x243580 VA: 0x180244D80 Slot: 8
	public override bool Equals(byte x, byte y) { }
	// RVA: 0x244D90 Offset: 0x243590 VA: 0x180244D90 Slot: 9
	public override int GetHashCode(byte b) { }
	// RVA: 0x244DA0 Offset: 0x2435A0 VA: 0x180244DA0 Slot: 10
	internal override int IndexOf(byte[] array, byte value, int startIndex, int count) { }
	// RVA: 0x245020 Offset: 0x243820 VA: 0x180245020 Slot: 11
	internal override int LastIndexOf(byte[] array, byte value, int startIndex, int count) { }
	// RVA: 0x245080 Offset: 0x243880 VA: 0x180245080 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x245130 Offset: 0x243930 VA: 0x180245130 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x245180 Offset: 0x243980 VA: 0x180245180
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal class EnumEqualityComparer<T> : EqualityComparer<T>, ISerializable // TypeDefIndex: 1091
{
	// Methods
	// RVA: 0x725200 Offset: 0x723A00 VA: 0x180725200 Slot: 8
	public override bool Equals(T x, T y) { }
	// RVA: 0x725260 Offset: 0x723A60 VA: 0x180725260 Slot: 9
	public override int GetHashCode(T obj) { }
	// RVA: 0x725280 Offset: 0x723A80 VA: 0x180725280
	public void .ctor() { }
	// RVA: 0x7252B0 Offset: 0x723AB0 VA: 0x1807252B0
	protected void .ctor(SerializationInfo information, StreamingContext context) { }
	// RVA: 0x7252E0 Offset: 0x723AE0 VA: 0x1807252E0 Slot: 12
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x725420 Offset: 0x723C20 VA: 0x180725420 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x725470 Offset: 0x723C70 VA: 0x180725470 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class SByteEnumEqualityComparer<T> : EnumEqualityComparer<T>, ISerializable // TypeDefIndex: 1092
{
	// Methods
	// RVA: -1 Offset: -1
	public void .ctor() { }
	// RVA: -1 Offset: -1
	public void .ctor(SerializationInfo information, StreamingContext context) { }
	// RVA: -1 Offset: -1 Slot: 9
	public override int GetHashCode(T obj) { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class ShortEnumEqualityComparer<T> : EnumEqualityComparer<T>, ISerializable // TypeDefIndex: 1093
{
	// Methods
	// RVA: -1 Offset: -1
	public void .ctor() { }
	// RVA: -1 Offset: -1
	public void .ctor(SerializationInfo information, StreamingContext context) { }
	// RVA: -1 Offset: -1 Slot: 9
	public override int GetHashCode(T obj) { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class LongEnumEqualityComparer<T> : EqualityComparer<T>, ISerializable // TypeDefIndex: 1094
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 8
	public override bool Equals(T x, T y) { }
	// RVA: -1 Offset: -1 Slot: 9
	public override int GetHashCode(T obj) { }
	// RVA: -1 Offset: -1 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: -1 Offset: -1 Slot: 2
	public override int GetHashCode() { }
	// RVA: -1 Offset: -1
	public void .ctor() { }
	// RVA: -1 Offset: -1
	public void .ctor(SerializationInfo information, StreamingContext context) { }
	// RVA: -1 Offset: -1 Slot: 12
	public void GetObjectData(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class InternalStringComparer : EqualityComparer<string> // TypeDefIndex: 1095
{
	// Methods
	// RVA: 0x329550 Offset: 0x327D50 VA: 0x180329550 Slot: 9
	public override int GetHashCode(string obj) { }
	// RVA: 0x329570 Offset: 0x327D70 VA: 0x180329570 Slot: 8
	public override bool Equals(string x, string y) { }
	// RVA: 0x3295A0 Offset: 0x327DA0 VA: 0x1803295A0 Slot: 10
	internal override int IndexOf(string[] array, string value, int startIndex, int count) { }
	// RVA: 0x329680 Offset: 0x327E80 VA: 0x180329680
	public void .ctor() { }
}

// Namespace: System.Collections.Generic
public interface ICollection<T> : IEnumerable<T>, IEnumerable // TypeDefIndex: 1096
{
	// Properties
	public abstract int Count { get; }
	public abstract bool IsReadOnly { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_Count() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_IsReadOnly() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Add(T item) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Clear() { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool Contains(T item) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract void CopyTo(T[] array, int arrayIndex) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool Remove(T item) { }
}

// Namespace: System.Collections.Generic
public interface IComparer<T> // TypeDefIndex: 1097
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract int Compare(T x, T y) { }
}

// Namespace: System.Collections.Generic
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable // TypeDefIndex: 1098
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Add(TKey key, TValue value) { }
}

// Namespace: System.Collections.Generic
public interface IEnumerable<T> : IEnumerable // TypeDefIndex: 1099
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IEnumerator<T> GetEnumerator() { }
}

// Namespace: System.Collections.Generic
public interface IEnumerator<T> : IDisposable, IEnumerator // TypeDefIndex: 1100
{
	// Properties
	public abstract T Current { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract T get_Current() { }
}

// Namespace: System.Collections.Generic
public interface IEqualityComparer<T> // TypeDefIndex: 1101
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool Equals(T x, T y) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract int GetHashCode(T obj) { }
}

// Namespace: System.Collections.Generic
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public interface IList<T> : ICollection<T>, IEnumerable<T>, IEnumerable // TypeDefIndex: 1102
{
	// Properties
	public abstract T Item { get; set; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract T get_Item(int index) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_Item(int index, T value) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract int IndexOf(T item) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Insert(int index, T item) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void RemoveAt(int index) { }
}

// Namespace: System.Collections.Generic
public interface IReadOnlyCollection<T> : IEnumerable<T>, IEnumerable // TypeDefIndex: 1103
{
	// Properties
	public abstract int Count { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract int get_Count() { }
}

// Namespace: System.Collections.Generic
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public interface IReadOnlyList<T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable // TypeDefIndex: 1104
{
	// Properties
	public abstract T Item { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract T get_Item(int index) { }
}

// Namespace: System.Collections.Generic
[Serializable]
public class KeyNotFoundException : SystemException, ISerializable // TypeDefIndex: 1105
{
	// Methods
	// RVA: 0x3303A0 Offset: 0x32EBA0 VA: 0x1803303A0
	public void .ctor() { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Collections.Generic
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
public class List<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T> // TypeDefIndex: 1106
{
	// Fields
	private const int _defaultCapacity = 4; // 0x0
	private T[] _items; // 0x0
	private int _size; // 0x0
	private int _version; // 0x0
	private object _syncRoot; // 0x0
	private static readonly T[] _emptyArray; // 0x0

	// Properties
	public int Capacity { get; set; }
	public int Count { get; }
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	public T Item { get; set; }

	// Methods
	// RVA: 0x7812B0 Offset: 0x77FAB0 VA: 0x1807812B0
	public void .ctor() { }
	// RVA: 0x781390 Offset: 0x77FB90 VA: 0x180781390
	public void .ctor(int capacity) { }
	// RVA: 0x7814C0 Offset: 0x77FCC0 VA: 0x1807814C0
	public void .ctor(IEnumerable<T> collection) { }
	// RVA: 0x1E7080 Offset: 0x1E5880 VA: 0x1801E7080
	public int get_Capacity() { }
	// RVA: 0x781920 Offset: 0x780120 VA: 0x180781920
	public void set_Capacity(int value) { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 23
	public int get_Count() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 10
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	// RVA: 0x781A90 Offset: 0x780290 VA: 0x180781A90 Slot: 22
	public T get_Item(int index) { }
	// RVA: 0x781AC0 Offset: 0x7802C0 VA: 0x180781AC0 Slot: 5
	public void set_Item(int index, T value) { }
	// RVA: 0x781B10 Offset: 0x780310 VA: 0x180781B10
	private static bool IsCompatibleObject(object value) { }
	// RVA: 0x85F1E0 Offset: 0x85D9E0 VA: 0x18085F1E0 Slot: 11
	public void Add(T item) { }
	// RVA: 0x781C70 Offset: 0x780470 VA: 0x180781C70 Slot: 18
	private int System.Collections.IList.Add(object item) { }
	// RVA: 0x781DF0 Offset: 0x7805F0 VA: 0x180781DF0
	public void AddRange(IEnumerable<T> collection) { }
	// RVA: 0x781E20 Offset: 0x780620 VA: 0x180781E20
	public ReadOnlyCollection<T> AsReadOnly() { }
	// RVA: 0x781E90 Offset: 0x780690 VA: 0x180781E90 Slot: 12
	public void Clear() { }
	// RVA: 0x781ED0 Offset: 0x7806D0 VA: 0x180781ED0 Slot: 13
	public bool Contains(T item) { }
	// RVA: 0x781F80 Offset: 0x780780 VA: 0x180781F80 Slot: 19
	private bool System.Collections.IList.Contains(object item) { }
	// RVA: 0x7820B0 Offset: 0x7808B0 VA: 0x1807820B0
	public void CopyTo(T[] array) { }
	// RVA: 0x7820E0 Offset: 0x7808E0 VA: 0x1807820E0 Slot: 20
	private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
	// RVA: 0x7821D0 Offset: 0x7809D0 VA: 0x1807821D0
	public void CopyTo(int index, T[] array, int arrayIndex, int count) { }
	// RVA: 0x782210 Offset: 0x780A10 VA: 0x180782210 Slot: 14
	public void CopyTo(T[] array, int arrayIndex) { }
	// RVA: 0x782240 Offset: 0x780A40 VA: 0x180782240
	private void EnsureCapacity(int min) { }
	// RVA: 0x7822B0 Offset: 0x780AB0 VA: 0x1807822B0
	public bool Exists(Predicate<T> match) { }
	// RVA: 0x7822F0 Offset: 0x780AF0 VA: 0x1807822F0
	public T Find(Predicate<T> match) { }
	// RVA: 0x7823D0 Offset: 0x780BD0 VA: 0x1807823D0
	public int FindIndex(Predicate<T> match) { }
	// RVA: 0x782400 Offset: 0x780C00 VA: 0x180782400
	public int FindIndex(int startIndex, int count, Predicate<T> match) { }
	// RVA: 0x782500 Offset: 0x780D00 VA: 0x180782500
	public List.Enumerator<T> GetEnumerator() { }
	// RVA: 0x782530 Offset: 0x780D30 VA: 0x180782530 Slot: 16
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// RVA: 0x782530 Offset: 0x780D30 VA: 0x180782530 Slot: 17
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x7825C0 Offset: 0x780DC0 VA: 0x1807825C0 Slot: 6
	public int IndexOf(T item) { }
	// RVA: 0x7825F0 Offset: 0x780DF0 VA: 0x1807825F0 Slot: 7
	public void Insert(int index, T item) { }
	// RVA: 0x7826C0 Offset: 0x780EC0 VA: 0x1807826C0
	public void InsertRange(int index, IEnumerable<T> collection) { }
	// RVA: 0x782A00 Offset: 0x781200 VA: 0x180782A00 Slot: 15
	public bool Remove(T item) { }
	// RVA: 0x782A70 Offset: 0x781270 VA: 0x180782A70
	public int RemoveAll(Predicate<T> match) { }
	// RVA: 0x782C30 Offset: 0x781430 VA: 0x180782C30 Slot: 8
	public void RemoveAt(int index) { }
	// RVA: 0x782CB0 Offset: 0x7814B0 VA: 0x180782CB0
	public void RemoveRange(int index, int count) { }
	// RVA: 0x782D60 Offset: 0x781560 VA: 0x180782D60
	public void Reverse() { }
	// RVA: 0x782DA0 Offset: 0x7815A0 VA: 0x180782DA0
	public void Reverse(int index, int count) { }
	// RVA: 0x782E10 Offset: 0x781610 VA: 0x180782E10
	public void Sort(IComparer<T> comparer) { }
	// RVA: 0x782E50 Offset: 0x781650 VA: 0x180782E50
	public void Sort(int index, int count, IComparer<T> comparer) { }
	// RVA: 0x782ED0 Offset: 0x7816D0 VA: 0x180782ED0
	public void Sort(Comparison<T> comparison) { }
	// RVA: 0x782F20 Offset: 0x781720 VA: 0x180782F20
	public T[] ToArray() { }
	// RVA: 0x782FA0 Offset: 0x7817A0 VA: 0x180782FA0
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
public struct List.Enumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 1107
{
	// Fields
	private List<T> list; // 0x0
	private int index; // 0x0
	private int version; // 0x0
	private T current; // 0x0

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x1055F0 Offset: 0x1049F0 VA: 0x1801055F0
	internal void .ctor(List<T> list) { }
	// RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80 Slot: 5
	public void Dispose() { }
	// RVA: 0x105620 Offset: 0x104A20 VA: 0x180105620 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x1056D0 Offset: 0x104AD0 VA: 0x1801056D0
	private bool MoveNextRare() { }
	// RVA: 0x2100 Offset: 0x1500 VA: 0x180002100 Slot: 4
	public T get_Current() { }
	// RVA: 0x105710 Offset: 0x104B10 VA: 0x180105710 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0xDA020 Offset: 0xD9420 VA: 0x1800DA020
[Serializable]
public sealed class DebuggerStepThroughAttribute : Attribute // TypeDefIndex: 1108
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0xDA040 Offset: 0xD9440 VA: 0x1800DA040
[Serializable]
public sealed class DebuggerHiddenAttribute : Attribute // TypeDefIndex: 1109
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Diagnostics
[AttributeUsageAttribute] // RVA: 0xDA060 Offset: 0xD9460 VA: 0x1800DA060
[Serializable]
public sealed class DebuggerNonUserCodeAttribute : Attribute // TypeDefIndex: 1110
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Diagnostics
public sealed class Debugger // TypeDefIndex: 1111
{
	// Fields
	public static readonly string DefaultCategory; // 0xA17960

	// Properties
	public static bool IsAttached { get; }

	// Methods
	// RVA: 0x50E4A0 Offset: 0x50CCA0 VA: 0x18050E4A0
	public static bool get_IsAttached() { }
	// RVA: 0x50E530 Offset: 0x50CD30 VA: 0x18050E530
	private static bool IsAttached_internal() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public static void NotifyOfCrossThreadDependency() { }
	// RVA: 0x50E550 Offset: 0x50CD50 VA: 0x18050E550
	private static void .cctor() { }
}

// Namespace: System.Diagnostics
[Serializable]
public class StackFrame // TypeDefIndex: 1112
{
	// Fields
	public const int OFFSET_UNKNOWN = -1; // 0x0
	private int ilOffset; // 0x10
	private int nativeOffset; // 0x14
	private long methodAddress; // 0x18
	private uint methodIndex; // 0x20
	private MethodBase methodBase; // 0x28
	private string fileName; // 0x30
	private int lineNumber; // 0x38
	private int columnNumber; // 0x3C
	private string internalMethodName; // 0x40

	// Methods
	// RVA: 0x1EA610 Offset: 0x1E8E10 VA: 0x1801EA610
	private static bool get_frame_info(int skip, bool needFileInfo, out MethodBase method, out int iloffset, out int native_offset, out string file, out int line, out int column) { }
	// RVA: 0x1EA790 Offset: 0x1E8F90 VA: 0x1801EA790
	public void .ctor() { }
	// RVA: 0x1EA7F0 Offset: 0x1E8FF0 VA: 0x1801EA7F0
	public void .ctor(int skipFrames, bool fNeedFileInfo) { }
	// RVA: 0x197B80 Offset: 0x196380 VA: 0x180197B80 Slot: 4
	public virtual int GetFileLineNumber() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0 Slot: 5
	public virtual string GetFileName() { }
	// RVA: 0x1EA860 Offset: 0x1E9060 VA: 0x1801EA860
	internal string GetSecureFileName() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900 Slot: 6
	public virtual MethodBase GetMethod() { }
	// RVA: 0x1EA910 Offset: 0x1E9110 VA: 0x1801EA910 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Diagnostics
[Serializable]
public class StackTrace // TypeDefIndex: 1113
{
	// Fields
	public const int METHODS_TO_SKIP = 0; // 0x0
	private StackFrame[] frames; // 0x10
	private readonly StackTrace[] captured_traces; // 0x18
	private bool debug_info; // 0x20
	private static bool isAotidSet; // 0x0
	private static string aotid; // 0x8

	// Properties
	public virtual int FrameCount { get; }

	// Methods
	// RVA: 0x1EAC50 Offset: 0x1E9450 VA: 0x1801EAC50
	public void .ctor() { }
	// RVA: 0x1EAC60 Offset: 0x1E9460 VA: 0x1801EAC60
	public void .ctor(bool fNeedFileInfo) { }
	// RVA: 0x1EAC70 Offset: 0x1E9470 VA: 0x1801EAC70
	public void .ctor(int skipFrames, bool fNeedFileInfo) { }
	// RVA: 0x1EAC80 Offset: 0x1E9480 VA: 0x1801EAC80
	private void init_frames(int skipFrames, bool fNeedFileInfo) { }
	// RVA: 0x1EAEF0 Offset: 0x1E96F0 VA: 0x1801EAEF0
	private static StackFrame[] get_trace(Exception e, int skipFrames, bool fNeedFileInfo) { }
	// RVA: 0x1EAFD0 Offset: 0x1E97D0 VA: 0x1801EAFD0
	public void .ctor(Exception e, bool fNeedFileInfo) { }
	// RVA: 0x1EAFF0 Offset: 0x1E97F0 VA: 0x1801EAFF0
	public void .ctor(Exception e, int skipFrames, bool fNeedFileInfo) { }
	// RVA: 0x1EB1A0 Offset: 0x1E99A0 VA: 0x1801EB1A0 Slot: 4
	public virtual int get_FrameCount() { }
	// RVA: 0x1EB1B0 Offset: 0x1E99B0 VA: 0x1801EB1B0 Slot: 5
	public virtual StackFrame GetFrame(int index) { }
	// RVA: 0x1EB220 Offset: 0x1E9A20 VA: 0x1801EB220
	private static string GetAotId() { }
	// RVA: 0x1EB330 Offset: 0x1E9B30 VA: 0x1801EB330
	private bool AddFrames(StringBuilder sb) { }
	// RVA: 0x1EB780 Offset: 0x1E9F80 VA: 0x1801EB780
	internal void GetFullNameForStackTrace(StringBuilder sb, MethodBase mi) { }
	// RVA: 0x1EBBF0 Offset: 0x1EA3F0 VA: 0x1801EBBF0 Slot: 3
	public override string ToString() { }
	// RVA: 0x1EBD50 Offset: 0x1EA550 VA: 0x1801EBD50
	internal string ToString(StackTrace.TraceFormat traceFormat) { }
}

// Namespace: 
internal enum StackTrace.TraceFormat // TypeDefIndex: 1114
{
	// Fields
	public int value__; // 0x0
	public const StackTrace.TraceFormat Normal = 0; // 0x0
	public const StackTrace.TraceFormat TrailingNewLine = 1; // 0x0
	public const StackTrace.TraceFormat NoResourceLookup = 2; // 0x0
}

// Namespace: System.Diagnostics.Contracts
public static class Contract // TypeDefIndex: 1115
{
	// Methods
	// RVA: 0x52F680 Offset: 0x52DE80 VA: 0x18052F680
	public static bool ForAll(IEnumerable<T> collection, Predicate<T> predicate) { }
}

// Namespace: System.Diagnostics.Tracing
public class EventSource : IDisposable // TypeDefIndex: 1116
{
	// Fields
	private bool m_eventSourceEnabled; // 0x10
	[ThreadStaticAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static byte m_EventSourceExceptionRecurenceCount; // 0x80000000
	private static readonly byte[] namespaceBytes; // 0x0
	private static readonly Guid AspNetEventSourceGuid; // 0x8

	// Methods
	// RVA: 0x4906C0 Offset: 0x48EEC0 VA: 0x1804906C0 Slot: 3
	public override string ToString() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 4
	public void Dispose() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x490720 Offset: 0x48EF20 VA: 0x180490720
	private static void .cctor() { }
}

// Namespace: 
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 1117
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 0588059ACBD52F7EA2835882F977A9CF72EB9775 /*Metadata offset 0x1500B8*/; // 0x0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=84 0A1ADB22C1D3E1F4B2448EE3F27DF9DE63329C4C /*Metadata offset 0x150100*/; // 0x48
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=240 121EC59E23F7559B28D338D562528F6299C2DE22 /*Metadata offset 0x150154*/; // 0x9C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=24 1730F09044E91DB8371B849EFF5E6D17BDE4AED0 /*Metadata offset 0x150244*/; // 0x18C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 1FE6CE411858B3D864679DE2139FB081F08BFACD /*Metadata offset 0x15025C*/; // 0x1A4
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 25420D0055076FA8D3E4DD96BC53AE24DE6E619F /*Metadata offset 0x15026C*/; // 0x1B4
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1208 25CF935D2AE9EDF05DD75BCD47FF84D9255D6F6E /*Metadata offset 0x150294*/; // 0x1DC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=42 29C1A61550F0E3260E1953D4FAD71C256218EF40 /*Metadata offset 0x15074C*/; // 0x694
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 2B33BEC8C30DFDC49DAFE20D3BDE19487850D717 /*Metadata offset 0x150776*/; // 0x6BE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=36 2BA840FF6020B8FF623DBCB7188248CF853FAF4F /*Metadata offset 0x150782*/; // 0x6CA
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 2C840AFA48C27B9C05593E468C1232CA1CC74AFD /*Metadata offset 0x1507A6*/; // 0x6EE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 2D1DA5BB407F0C11C3B5116196C0C6374D932B20 /*Metadata offset 0x1507EE*/; // 0x736
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 2F71D2DA12F3CD0A6A112F5A5A75B4FDC6FE8547 /*Metadata offset 0x1507FE*/; // 0x746
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 34476C29F6F81C989CFCA42F7C06E84C66236834 /*Metadata offset 0x150846*/; // 0x78E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2382 35EED060772F2748D13B745DAEC8CD7BD3B87604 /*Metadata offset 0x15088E*/; // 0x7D6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=38 375F9AE9769A3D1DA789E9ACFE81F3A1BB14F0D3 /*Metadata offset 0x1511DC*/; // 0x1124
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1450 379C06C9E702D31469C29033F0DD63931EB349F5 /*Metadata offset 0x151202*/; // 0x114A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=10 399BD13E240F33F808CA7940293D6EC4E6FD5A00 /*Metadata offset 0x1517AC*/; // 0x16F4
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 39C9CE73C7B0619D409EF28344F687C1B5C130FE /*Metadata offset 0x1517B6*/; // 0x16FE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=320 3C53AFB51FEC23491684C7BEDBC6D4E0F409F851 /*Metadata offset 0x1517FE*/; // 0x1746
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 3E823444D2DFECF0F90B436B88F02A533CB376F1 /*Metadata offset 0x15193E*/; // 0x1886
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 3FE6C283BCF384FD2C8789880DFF59664E2AB4A1 /*Metadata offset 0x15194A*/; // 0x1892
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1665 40981BAA39513E58B28DCF0103CC04DE2A0A0444 /*Metadata offset 0x151992*/; // 0x18DA
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 40E7C49413D261F3F38AD3A870C0AC69C8BDA048 /*Metadata offset 0x152013*/; // 0x1F5B
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 421EC7E82F2967DF6CA8C3605514DC6F29EE5845 /*Metadata offset 0x15203B*/; // 0x1F83
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=256 433175D38B13FFE177FDD661A309F1B528B3F6E2 /*Metadata offset 0x152083*/; // 0x1FCB
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 4858DB4AA76D3933F1CA9E6712D4FDB16903F628 /*Metadata offset 0x152183*/; // 0x20CB
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 4F7A8890F332B22B8DE0BD29D36FA7364748D76A /*Metadata offset 0x1521CB*/; // 0x2113
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 536422B321459B242ADED7240B7447E904E083E3 /*Metadata offset 0x1521F3*/; // 0x213B
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1080 5382CEF491F422BFE0D6FC46EFAFF9EF9D4C89F3 /*Metadata offset 0x15223B*/; // 0x2183
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=3 57218C316B6921E2CD61027A2387EDC31A2D9471 /*Metadata offset 0x152673*/; // 0x25BB
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 57F320D62696EC99727E0FE2045A05F1289CC0C6 /*Metadata offset 0x152676*/; // 0x25BE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=212 594A33A00BC4F785DFD43E3C6C44FBA1242CCAF3 /*Metadata offset 0x15269E*/; // 0x25E6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=36 5BBDF8058D4235C33F2E8DCF76004031B6187A2F /*Metadata offset 0x152772*/; // 0x26BA
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=288 5BCD21C341BE6DDF8FFFAE1A23ABA24DCBB612BF /*Metadata offset 0x152796*/; // 0x26DE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 5BFE2819B4778217C56416C7585FF0E56EBACD89 /*Metadata offset 0x1528B6*/; // 0x27FE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=128 609C0E8D8DA86A09D6013D301C86BA8782C16B8C /*Metadata offset 0x1528FE*/; // 0x2846
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 65E32B4E150FD8D24B93B0D42A17F1DAD146162B /*Metadata offset 0x15297E*/; // 0x28C6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=52 6770974FEF1E98B9C1864370E2B5B786EB0EA39E /*Metadata offset 0x1529A6*/; // 0x28EE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 67EEAD805D708D9AA4E14BF747E44CED801744F3 /*Metadata offset 0x1529DA*/; // 0x2922
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 6C71197D228427B2864C69B357FEF73D8C9D59DF /*Metadata offset 0x152A22*/; // 0x296A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 6CEE45445AFD150B047A5866FFA76AA651CDB7B7 /*Metadata offset 0x152A9A*/; // 0x29E2
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=76 6FC754859E4EC74E447048364B216D825C6F8FE7 /*Metadata offset 0x152AAA*/; // 0x29F2
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 704939CD172085D1295FCE3F1D92431D685D7AA2 /*Metadata offset 0x152AF6*/; // 0x2A3E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=24 7088AAE49F0627B72729078DE6E3182DDCF8ED99 /*Metadata offset 0x152B1E*/; // 0x2A66
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 7341C933A70EAE383CC50C4B945ADB8E08F06737 /*Metadata offset 0x152B36*/; // 0x2A7E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 7FE820C9CF0F0B90445A71F1D262D22E4F0C4C68 /*Metadata offset 0x152B7E*/; // 0x2AC6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=21252 811A927B7DADD378BE60BBDE794B9277AA9B50EC /*Metadata offset 0x152BA6*/; // 0x2AEE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=36 81917F1E21F3C22B9F916994547A614FB03E968E /*Metadata offset 0x157EAA*/; // 0x7DF2
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 823566DA642D6EA356E15585921F2A4CA23D6760 /*Metadata offset 0x157ECE*/; // 0x7E16
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 82C2A59850B2E85BCE1A45A479537A384DF6098D /*Metadata offset 0x157EF6*/; // 0x7E3E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=44 82C383F8E6E4D3D87AEBB986A5D0077E8AD157C4 /*Metadata offset 0x157F02*/; // 0x7E4A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 871B9CF85DB352BAADF12BAE8F19857683E385AC /*Metadata offset 0x157F2E*/; // 0x7E76
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 89A040451C8CC5C8FB268BE44BDD74964C104155 /*Metadata offset 0x157F56*/; // 0x7E9E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 8CAA092E783257106251246FF5C97F88D28517A6 /*Metadata offset 0x157F66*/; // 0x7EAE
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2100 8D231DD55FE1AD7631BBD0905A17D5EB616C2154 /*Metadata offset 0x157F8E*/; // 0x7ED6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 8E10AC2F34545DFBBF3FCBC06055D797A8C99991 /*Metadata offset 0x1587C2*/; // 0x870A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 93A63E90605400F34B49F0EB3361D23C89164BDA /*Metadata offset 0x1587EA*/; // 0x8732
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 94841DD2F330CCB1089BF413E4FA9B04505152E2 /*Metadata offset 0x1587F6*/; // 0x873E
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 95264589E48F94B7857CFF398FB72A537E13EEE2 /*Metadata offset 0x15883E*/; // 0x8786
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 95C48758CAE1715783472FB073AB158AB8A0AB2A /*Metadata offset 0x15884A*/; // 0x8792
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 973417296623D8DC6961B09664E54039E44CA5D8 /*Metadata offset 0x158892*/; // 0x87DA
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 A0074C15377C0C870B055927403EA9FA7A349D12 /*Metadata offset 0x1588DA*/; // 0x8822
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=130 A1319B706116AB2C6D44483F60A7D0ACEA543396 /*Metadata offset 0x158902*/; // 0x884A
	internal static readonly long A13AA52274D951A18029131A8DDECF76B569A15D = -44474084896931794; // 0x88D0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=212 A5444763673307F6828C748D4B9708CFC02B0959 /*Metadata offset 0x15898C*/; // 0x88D8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 A6732F8E7FC23766AB329B492D6BF82E3B33233F /*Metadata offset 0x158A60*/; // 0x89AC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=174 A705A106D95282BD15E13EEA6B0AF583FF786D83 /*Metadata offset 0x158AA8*/; // 0x89F4
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1018 A8A491E4CED49AE0027560476C10D933CE70C8DF /*Metadata offset 0x158B56*/; // 0x8AA2
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 AC791C4F39504D1184B73478943D0636258DA7B1 /*Metadata offset 0x158F50*/; // 0x8E9C
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=52 AFCD4E1211233E99373A3367B23105A3D624B1F2 /*Metadata offset 0x158F98*/; // 0x8EE4
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 B472ED77CB3B2A66D49D179F1EE2081B70A6AB61 /*Metadata offset 0x158FCC*/; // 0x8F18
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=256 B53A2C6DF21FC88B17AEFC40EB895B8D63210CDF /*Metadata offset 0x158FF4*/; // 0x8F40
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=998 B881DA88BE0B68D8A6B6B6893822586B8B2CFC45 /*Metadata offset 0x1590F4*/; // 0x9040
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=162 B8864ACB9DD69E3D42151513C840AAE270BF21C8 /*Metadata offset 0x1594DA*/; // 0x9426
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=360 B8F87834C3597B2EEF22BA6D3A392CC925636401 /*Metadata offset 0x15957C*/; // 0x94C8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 B9B670F134A59FB1107AF01A9FE8F8E3980B3093 /*Metadata offset 0x1596E4*/; // 0x9630
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 BEBC9ECC660A13EFC359BA3383411F698CFF25DB /*Metadata offset 0x15972C*/; // 0x9678
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 BEE1CFE5DFAA408E14CE4AF4DCD824FA2E42DCB7 /*Metadata offset 0x159774*/; // 0x96C0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=6 BF5EB60806ECB74EE484105DD9D6F463BF994867 /*Metadata offset 0x15979C*/; // 0x96E8
	internal static readonly long C1A1100642BA9685B30A84D97348484E14AA1865 = 23362753784184900; // 0x96F0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 C6F364A0AD934EFED8909446C215752E565D77C1 /*Metadata offset 0x1597AA*/; // 0x96F8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=174 CE5835130F5277F63D716FC9115526B0AC68FFAD /*Metadata offset 0x1597BA*/; // 0x9708
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=6 CE93C35B755802BC4B3D180716B048FC61701EF7 /*Metadata offset 0x159868*/; // 0x97B6
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=32 D117188BE8D4609C0D531C51B0BB911A4219DEBE /*Metadata offset 0x15986E*/; // 0x97BC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=44 D78D08081C7A5AD6FBA7A8DC86BCD6D7A577C636 /*Metadata offset 0x15988E*/; // 0x97DC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=76 DA19DB47B583EFCF7825D2E39D661D2354F28219 /*Metadata offset 0x1598BA*/; // 0x9808
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=52 DD3AEFEADB1CD615F3017763F1568179FEE640B0 /*Metadata offset 0x159906*/; // 0x9854
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=36 E1827270A5FE1C85F5352A66FD87BA747213D006 /*Metadata offset 0x15993A*/; // 0x9888
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 E45BAB43F7D5D038672B3E3431F92E34A7AF2571 /*Metadata offset 0x15995E*/; // 0x98AC
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=52 E92B39D8233061927D9ACDE54665E68E7535635A /*Metadata offset 0x159986*/; // 0x98D4
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 EA9506959484C55CFE0C139C624DF6060E285866 /*Metadata offset 0x1599BA*/; // 0x9908
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=262 EB5E9A80A40096AB74D2E226650C7258D7BC5E9D /*Metadata offset 0x1599C6*/; // 0x9914
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=64 EBF68F411848D603D059DFDEA2321C5A5EA78044 /*Metadata offset 0x159ACC*/; // 0x9A1A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 EC89C317EA2BF49A70EFF5E89C691E34733D7C37 /*Metadata offset 0x159B0C*/; // 0x9A5A
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 F06E829E62F3AFBC045D064E10A4F5DF7C969612 /*Metadata offset 0x159B54*/; // 0x9AA2
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=11614 F073AA332018FDA0D572E99448FFF1D6422BD520 /*Metadata offset 0x159B7C*/; // 0x9ACA
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 F34B0E10653402E8F788F8BC3F7CD7090928A429 /*Metadata offset 0x15C8DA*/; // 0xC828
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 F37E34BEADB04F34FCC31078A59F49856CA83D5B /*Metadata offset 0x15C952*/; // 0xC8A0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=94 F512A9ABF88066AAEB92684F95CC05D8101B462B /*Metadata offset 0x15C99A*/; // 0xC8E8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 F8FAABB821300AA500C2CEC6091B3782A7FB44A4 /*Metadata offset 0x15C9F8*/; // 0xC946
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2350 FCBD2781A933F0828ED4AAF88FD8B08D76DDD49B /*Metadata offset 0x15CA04*/; // 0xC952

	// Methods
	// RVA: 0x2C7B70 Offset: 0x2C6370 VA: 0x1802C7B70
	internal static uint ComputeStringHash(string s) { }
}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=3 // TypeDefIndex: 1118
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=6 // TypeDefIndex: 1119
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=10 // TypeDefIndex: 1120
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 // TypeDefIndex: 1121
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=16 // TypeDefIndex: 1122
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=24 // TypeDefIndex: 1123
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=32 // TypeDefIndex: 1124
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=36 // TypeDefIndex: 1125
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=38 // TypeDefIndex: 1126
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=40 // TypeDefIndex: 1127
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=42 // TypeDefIndex: 1128
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=44 // TypeDefIndex: 1129
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=52 // TypeDefIndex: 1130
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=64 // TypeDefIndex: 1131
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=72 // TypeDefIndex: 1132
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=76 // TypeDefIndex: 1133
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=84 // TypeDefIndex: 1134
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=94 // TypeDefIndex: 1135
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=120 // TypeDefIndex: 1136
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=128 // TypeDefIndex: 1137
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=130 // TypeDefIndex: 1138
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=162 // TypeDefIndex: 1139
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=174 // TypeDefIndex: 1140
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=212 // TypeDefIndex: 1141
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=240 // TypeDefIndex: 1142
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=256 // TypeDefIndex: 1143
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=262 // TypeDefIndex: 1144
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=288 // TypeDefIndex: 1145
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=320 // TypeDefIndex: 1146
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=360 // TypeDefIndex: 1147
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=998 // TypeDefIndex: 1148
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1018 // TypeDefIndex: 1149
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1080 // TypeDefIndex: 1150
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1208 // TypeDefIndex: 1151
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1450 // TypeDefIndex: 1152
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=1665 // TypeDefIndex: 1153
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2100 // TypeDefIndex: 1154
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2350 // TypeDefIndex: 1155
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=2382 // TypeDefIndex: 1156
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=11614 // TypeDefIndex: 1157
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=21252 // TypeDefIndex: 1158
{}

// Namespace: Unity
internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1159
{
	// Methods
	// RVA: 0x494070 Offset: 0x492870 VA: 0x180494070
	public static void ThrowNotSupportedException() { }
}

// Namespace: System
internal class __Il2CppComObject // TypeDefIndex: 1160
{
	// Methods
	// RVA: 0x26ADF0 Offset: 0x2695F0 VA: 0x18026ADF0 Slot: 1
	protected override void Finalize() { }
}

// Namespace: System
internal sealed class __Il2CppComDelegate : __Il2CppComObject // TypeDefIndex: 1161
{
	// Methods
	// RVA: 0x26ADF0 Offset: 0x2695F0 VA: 0x18026ADF0 Slot: 1
	protected override void Finalize() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1162
{}

// Namespace: 
internal static class SR // TypeDefIndex: 1163
{
	// Methods
	// RVA: 0x58F920 Offset: 0x58E120 VA: 0x18058F920
	internal static string GetString(string name, object[] args) { }
	// RVA: 0x58F9D0 Offset: 0x58E1D0 VA: 0x18058F9D0
	internal static string GetString(CultureInfo culture, string name, object[] args) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	internal static string GetString(string name) { }
}

// Namespace: System
internal static class IriHelper // TypeDefIndex: 1164
{
	// Methods
	// RVA: 0x4583D0 Offset: 0x456BD0 VA: 0x1804583D0
	internal static bool CheckIriUnicodeRange(char unicode, bool isQuery) { }
	// RVA: 0x458440 Offset: 0x456C40 VA: 0x180458440
	internal static bool CheckIriUnicodeRange(char highSurr, char lowSurr, ref bool surrogatePair, bool isQuery) { }
	// RVA: 0x458CC0 Offset: 0x4574C0 VA: 0x180458CC0
	internal static bool CheckIsReserved(char ch, UriComponents component) { }
	// RVA: 0x458E30 Offset: 0x457630 VA: 0x180458E30
	internal static string EscapeUnescapeIri(char* pInput, int start, int end, UriComponents component) { }
}

// Namespace: System
[Serializable]
public class Uri : ISerializable // TypeDefIndex: 1165
{
	// Fields
	public static readonly string UriSchemeFile; // 0x0
	public static readonly string UriSchemeFtp; // 0x8
	public static readonly string UriSchemeGopher; // 0x10
	public static readonly string UriSchemeHttp; // 0x18
	public static readonly string UriSchemeHttps; // 0x20
	internal static readonly string UriSchemeWs; // 0x28
	internal static readonly string UriSchemeWss; // 0x30
	public static readonly string UriSchemeMailto; // 0x38
	public static readonly string UriSchemeNews; // 0x40
	public static readonly string UriSchemeNntp; // 0x48
	public static readonly string UriSchemeNetTcp; // 0x50
	public static readonly string UriSchemeNetPipe; // 0x58
	public static readonly string SchemeDelimiter; // 0x60
	private string m_String; // 0x10
	private string m_originalUnicodeString; // 0x18
	private UriParser m_Syntax; // 0x20
	private string m_DnsSafeHost; // 0x28
	private Uri.Flags m_Flags; // 0x30
	private Uri.UriInfo m_Info; // 0x38
	private bool m_iriParsing; // 0x40
	private static bool s_ConfigInitialized; // 0x68
	private static bool s_ConfigInitializing; // 0x69
	private static UriIdnScope s_IdnScope; // 0x6C
	private static bool s_IriParsing; // 0x70
	private static bool useDotNetRelativeOrAbsolute; // 0x71
	internal static readonly bool IsWindowsFileSystem; // 0x72
	private static object s_initLock; // 0x78
	internal static readonly char[] HexLowerChars; // 0x80
	private static readonly char[] _WSchars; // 0x88

	// Properties
	private bool IsImplicitFile { get; }
	private bool IsUncOrDosPath { get; }
	private bool IsDosPath { get; }
	private bool IsUncPath { get; }
	private Uri.Flags HostType { get; }
	private bool IsNotAbsoluteUri { get; }
	private bool AllowIdn { get; }
	internal bool UserDrivenParsing { get; }
	private ushort SecuredPathIndex { get; }
	public string AbsolutePath { get; }
	private string PrivateAbsolutePath { get; }
	public string AbsoluteUri { get; }
	public bool IsFile { get; }
	public bool IsLoopback { get; }
	public string PathAndQuery { get; }
	public bool IsUnc { get; }
	private static object InitializeLock { get; }
	public int Port { get; }
	public string Fragment { get; }
	public string Scheme { get; }
	private bool OriginalStringSwitched { get; }
	public string OriginalString { get; }
	public string DnsSafeHost { get; }
	public bool IsAbsoluteUri { get; }
	public bool UserEscaped { get; }

	// Methods
	// RVA: 0x59B7E0 Offset: 0x599FE0 VA: 0x18059B7E0
	private bool get_IsImplicitFile() { }
	// RVA: 0x59B7F0 Offset: 0x599FF0 VA: 0x18059B7F0
	private bool get_IsUncOrDosPath() { }
	// RVA: 0x59B800 Offset: 0x59A000 VA: 0x18059B800
	private bool get_IsDosPath() { }
	// RVA: 0x59B810 Offset: 0x59A010 VA: 0x18059B810
	private bool get_IsUncPath() { }
	// RVA: 0x59B820 Offset: 0x59A020 VA: 0x18059B820
	private Uri.Flags get_HostType() { }
	// RVA: 0x59B830 Offset: 0x59A030 VA: 0x18059B830
	private bool get_IsNotAbsoluteUri() { }
	// RVA: 0x59B840 Offset: 0x59A040 VA: 0x18059B840
	internal static bool IriParsingStatic(UriParser syntax) { }
	// RVA: 0x59B910 Offset: 0x59A110 VA: 0x18059B910
	private bool get_AllowIdn() { }
	// RVA: 0x59BA30 Offset: 0x59A230 VA: 0x18059BA30
	private bool AllowIdnStatic(UriParser syntax, Uri.Flags flags) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640
	private bool IsIntranet(string schemeHost) { }
	// RVA: 0x59BB80 Offset: 0x59A380 VA: 0x18059BB80
	internal bool get_UserDrivenParsing() { }
	// RVA: 0x59BB90 Offset: 0x59A390 VA: 0x18059BB90
	private void SetUserDrivenParsing() { }
	// RVA: 0x59BBB0 Offset: 0x59A3B0 VA: 0x18059BBB0
	private ushort get_SecuredPathIndex() { }
	// RVA: 0x59BC10 Offset: 0x59A410 VA: 0x18059BC10
	private bool NotAny(Uri.Flags flags) { }
	// RVA: 0x59BC20 Offset: 0x59A420 VA: 0x18059BC20
	private bool InFact(Uri.Flags flags) { }
	// RVA: 0x59BC30 Offset: 0x59A430 VA: 0x18059BC30
	private static bool StaticNotAny(Uri.Flags allFlags, Uri.Flags checkFlags) { }
	// RVA: 0x59BC40 Offset: 0x59A440 VA: 0x18059BC40
	private static bool StaticInFact(Uri.Flags allFlags, Uri.Flags checkFlags) { }
	// RVA: 0x59BC50 Offset: 0x59A450 VA: 0x18059BC50
	private Uri.UriInfo EnsureUriInfo() { }
	// RVA: 0x59BC80 Offset: 0x59A480 VA: 0x18059BC80
	private void EnsureParseRemaining() { }
	// RVA: 0x59BCA0 Offset: 0x59A4A0 VA: 0x18059BCA0
	private void EnsureHostString(bool allowDnsOptimization) { }
	// RVA: 0x59BD00 Offset: 0x59A500 VA: 0x18059BD00
	public void .ctor(string uriString) { }
	// RVA: 0x59BEA0 Offset: 0x59A6A0 VA: 0x18059BEA0
	public void .ctor(string uriString, UriKind uriKind) { }
	// RVA: 0x59BF80 Offset: 0x59A780 VA: 0x18059BF80
	public void .ctor(Uri baseUri, string relativeUri) { }
	// RVA: 0x59C090 Offset: 0x59A890 VA: 0x18059C090
	private void CreateUri(Uri baseUri, string relativeUri, bool dontEscape) { }
	// RVA: 0x59C360 Offset: 0x59AB60 VA: 0x18059C360
	public void .ctor(Uri baseUri, Uri relativeUri) { }
	// RVA: 0x59C5C0 Offset: 0x59ADC0 VA: 0x18059C5C0
	private static ParsingError GetCombinedString(Uri baseUri, string relativeStr, bool dontEscape, ref string result) { }
	// RVA: 0x59C810 Offset: 0x59B010 VA: 0x18059C810
	private static UriFormatException GetException(ParsingError err) { }
	// RVA: 0x59C970 Offset: 0x59B170 VA: 0x18059C970
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// RVA: 0x59CC30 Offset: 0x59B430 VA: 0x18059CC30 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// RVA: 0x59CC30 Offset: 0x59B430 VA: 0x18059CC30
	protected void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// RVA: 0x59CD40 Offset: 0x59B540 VA: 0x18059CD40
	public string get_AbsolutePath() { }
	// RVA: 0x59CF10 Offset: 0x59B710 VA: 0x18059CF10
	private string get_PrivateAbsolutePath() { }
	// RVA: 0x59CFF0 Offset: 0x59B7F0 VA: 0x18059CFF0
	public string get_AbsoluteUri() { }
	// RVA: 0x59D120 Offset: 0x59B920 VA: 0x18059D120
	public bool get_IsFile() { }
	// RVA: 0x59D220 Offset: 0x59BA20 VA: 0x18059D220
	public bool get_IsLoopback() { }
	// RVA: 0x59D320 Offset: 0x59BB20 VA: 0x18059D320
	public string get_PathAndQuery() { }
	// RVA: 0x59D440 Offset: 0x59BC40 VA: 0x18059D440
	public bool get_IsUnc() { }
	// RVA: 0x59D510 Offset: 0x59BD10 VA: 0x18059D510
	private static bool StaticIsFile(UriParser syntax) { }
	// RVA: 0x59D530 Offset: 0x59BD30 VA: 0x18059D530
	private static object get_InitializeLock() { }
	// RVA: 0x59D650 Offset: 0x59BE50 VA: 0x18059D650
	private static void InitializeUriConfig() { }
	// RVA: 0x59DA30 Offset: 0x59C230 VA: 0x18059DA30
	public int get_Port() { }
	// RVA: 0x59DB70 Offset: 0x59C370 VA: 0x18059DB70
	public string get_Fragment() { }
	// RVA: 0x59DCA0 Offset: 0x59C4A0 VA: 0x18059DCA0
	public string get_Scheme() { }
	// RVA: 0x59DD60 Offset: 0x59C560 VA: 0x18059DD60
	private bool get_OriginalStringSwitched() { }
	// RVA: 0x59DDD0 Offset: 0x59C5D0 VA: 0x18059DDD0
	public string get_OriginalString() { }
	// RVA: 0x59DE30 Offset: 0x59C630 VA: 0x18059DE30
	public string get_DnsSafeHost() { }
	// RVA: 0x59E170 Offset: 0x59C970 VA: 0x18059E170
	public bool get_IsAbsoluteUri() { }
	// RVA: 0x59E180 Offset: 0x59C980 VA: 0x18059E180
	public bool get_UserEscaped() { }
	// RVA: 0x59E190 Offset: 0x59C990 VA: 0x18059E190
	internal static bool IsGenDelim(char ch) { }
	// RVA: 0x59E1C0 Offset: 0x59C9C0 VA: 0x18059E1C0
	public static bool IsHexDigit(char character) { }
	// RVA: 0x59E1F0 Offset: 0x59C9F0 VA: 0x18059E1F0
	public static int FromHex(char digit) { }
	// RVA: 0x59E2D0 Offset: 0x59CAD0 VA: 0x18059E2D0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x59E450 Offset: 0x59CC50 VA: 0x18059E450 Slot: 3
	public override string ToString() { }
	// RVA: 0x59E510 Offset: 0x59CD10 VA: 0x18059E510
	public static bool op_Equality(Uri uri1, Uri uri2) { }
	// RVA: 0x59E540 Offset: 0x59CD40 VA: 0x18059E540
	public static bool op_Inequality(Uri uri1, Uri uri2) { }
	// RVA: 0x59E590 Offset: 0x59CD90 VA: 0x18059E590 Slot: 0
	public override bool Equals(object comparand) { }
	// RVA: 0x59ED30 Offset: 0x59D530 VA: 0x18059ED30
	private static ParsingError ParseScheme(string uriString, ref Uri.Flags flags, ref UriParser syntax) { }
	// RVA: 0x59EE40 Offset: 0x59D640 VA: 0x18059EE40
	internal UriFormatException ParseMinimal() { }
	// RVA: 0x59EF00 Offset: 0x59D700 VA: 0x18059EF00
	private ParsingError PrivateParseMinimal() { }
	// RVA: 0x59F6F0 Offset: 0x59DEF0 VA: 0x18059F6F0
	private void PrivateParseMinimalIri(string newHost, ushort idx) { }
	// RVA: 0x59F7F0 Offset: 0x59DFF0 VA: 0x18059F7F0
	private void CreateUriInfo(Uri.Flags cF) { }
	// RVA: 0x59FE90 Offset: 0x59E690 VA: 0x18059FE90
	private void CreateHostString() { }
	// RVA: 0x5A04D0 Offset: 0x59ECD0 VA: 0x1805A04D0
	private static string CreateHostStringHelper(string str, ushort idx, ushort end, ref Uri.Flags flags, ref string scopeId) { }
	// RVA: 0x5A06F0 Offset: 0x59EEF0 VA: 0x1805A06F0
	private void GetHostViaCustomSyntax() { }
	// RVA: 0x5A0BC0 Offset: 0x59F3C0 VA: 0x1805A0BC0
	internal string GetParts(UriComponents uriParts, UriFormat formatAs) { }
	// RVA: 0x5A0BD0 Offset: 0x59F3D0 VA: 0x1805A0BD0
	private string GetEscapedParts(UriComponents uriParts) { }
	// RVA: 0x5A0CF0 Offset: 0x59F4F0 VA: 0x1805A0CF0
	private string GetUnescapedParts(UriComponents uriParts, UriFormat formatAs) { }
	// RVA: 0x5A0DE0 Offset: 0x59F5E0 VA: 0x1805A0DE0
	private string ReCreateParts(UriComponents parts, ushort nonCanonical, UriFormat formatAs) { }
	// RVA: 0x5A2310 Offset: 0x5A0B10 VA: 0x1805A2310
	private string GetUriPartsFromUserString(UriComponents uriParts) { }
	// RVA: 0x5A2B30 Offset: 0x5A1330 VA: 0x1805A2B30
	private void ParseRemaining() { }
	// RVA: 0x5A3930 Offset: 0x5A2130 VA: 0x1805A3930
	private static ushort ParseSchemeCheckImplicitFile(char* uriString, ushort length, ref ParsingError err, ref Uri.Flags flags, ref UriParser syntax) { }
	// RVA: 0x5A3DF0 Offset: 0x5A25F0 VA: 0x1805A3DF0
	private static bool CheckKnownSchemes(long* lptr, ushort nChars, ref UriParser syntax) { }
	// RVA: 0x5A43E0 Offset: 0x5A2BE0 VA: 0x1805A43E0
	private static ParsingError CheckSchemeSyntax(char* ptr, ushort length, ref UriParser syntax) { }
	// RVA: 0x5A4530 Offset: 0x5A2D30 VA: 0x1805A4530
	private ushort CheckAuthorityHelper(char* pString, ushort idx, ushort length, ref ParsingError err, ref Uri.Flags flags, UriParser syntax, ref string newHost) { }
	// RVA: 0x5A5970 Offset: 0x5A4170 VA: 0x1805A5970
	private void CheckAuthorityHelperHandleDnsIri(char* pString, ushort start, int end, int startInput, bool iriParsing, bool hasUnicode, UriParser syntax, string userInfoString, ref Uri.Flags flags, ref bool justNormalized, ref string newHost, ref ParsingError err) { }
	// RVA: 0x5A5DA0 Offset: 0x5A45A0 VA: 0x1805A5DA0
	private void CheckAuthorityHelperHandleAnyHostIri(char* pString, int startInput, int end, bool iriParsing, bool hasUnicode, UriParser syntax, ref Uri.Flags flags, ref string newHost, ref ParsingError err) { }
	// RVA: 0x5A6090 Offset: 0x5A4890 VA: 0x1805A6090
	private void FindEndOfComponent(string input, ref ushort idx, ushort end, char delim) { }
	// RVA: 0x5A6110 Offset: 0x5A4910 VA: 0x1805A6110
	private void FindEndOfComponent(char* str, ref ushort idx, ushort end, char delim) { }
	// RVA: 0x5A6180 Offset: 0x5A4980 VA: 0x1805A6180
	private Uri.Check CheckCanonical(char* str, ref ushort idx, ushort end, char delim) { }
	// RVA: 0x5A65F0 Offset: 0x5A4DF0 VA: 0x1805A65F0
	private char[] GetCanonicalPath(char[] dest, ref int pos, UriFormat formatAs) { }
	// RVA: 0x5A6DD0 Offset: 0x5A55D0 VA: 0x1805A6DD0
	private static void UnescapeOnly(char* pch, int start, ref int end, char ch1, char ch2, char ch3) { }
	// RVA: 0x5A7020 Offset: 0x5A5820 VA: 0x1805A7020
	private static char[] Compress(char[] dest, ushort start, ref int destLength, UriParser syntax) { }
	// RVA: 0x5A7510 Offset: 0x5A5D10 VA: 0x1805A7510
	internal static int CalculateCaseInsensitiveHashCode(string text) { }
	// RVA: 0x5A75D0 Offset: 0x5A5DD0 VA: 0x1805A75D0
	private static string CombineUri(Uri basePart, string relativePart, UriFormat uriFormat) { }
	// RVA: 0x5A8370 Offset: 0x5A6B70 VA: 0x1805A8370
	private static bool IsLWS(char ch) { }
	// RVA: 0x5A83A0 Offset: 0x5A6BA0 VA: 0x1805A83A0
	private static bool IsAsciiLetter(char character) { }
	// RVA: 0x5A83C0 Offset: 0x5A6BC0 VA: 0x1805A83C0
	internal static bool IsAsciiLetterOrDigit(char character) { }
	// RVA: 0x5A8480 Offset: 0x5A6C80 VA: 0x1805A8480
	internal static bool IsBidiControlCharacter(char ch) { }
	// RVA: 0x5A84C0 Offset: 0x5A6CC0 VA: 0x1805A84C0
	internal static string StripBidiControlCharacter(char* strToClean, int start, int length) { }
	// RVA: 0x5A8650 Offset: 0x5A6E50 VA: 0x1805A8650
	private void CreateThis(string uri, bool dontEscape, UriKind uriKind) { }
	// RVA: 0x5A8830 Offset: 0x5A7030 VA: 0x1805A8830
	private void InitializeUri(ParsingError err, UriKind uriKind, out UriFormatException e) { }
	// RVA: 0x5A8F80 Offset: 0x5A7780 VA: 0x1805A8F80
	private bool CheckForConfigLoad(string data) { }
	// RVA: 0x5A9020 Offset: 0x5A7820 VA: 0x1805A9020
	private bool CheckForUnicode(string data) { }
	// RVA: 0x5A9200 Offset: 0x5A7A00 VA: 0x1805A9200
	private bool CheckForEscapedUnreserved(string data) { }
	// RVA: 0x5A9420 Offset: 0x5A7C20 VA: 0x1805A9420
	public static bool TryCreate(string uriString, UriKind uriKind, out Uri result) { }
	// RVA: 0x5A9520 Offset: 0x5A7D20 VA: 0x1805A9520
	public string GetComponents(UriComponents components, UriFormat format) { }
	// RVA: 0x5A96F0 Offset: 0x5A7EF0 VA: 0x1805A96F0
	public static string UnescapeDataString(string stringToUnescape) { }
	// RVA: 0x5A9920 Offset: 0x5A8120 VA: 0x1805A9920
	internal string EscapeUnescapeIri(string input, int start, int end, UriComponents component) { }
	// RVA: 0x5A9950 Offset: 0x5A8150 VA: 0x1805A9950
	private void .ctor(Uri.Flags flags, UriParser uriParser, string uri) { }
	// RVA: 0x5A9960 Offset: 0x5A8160 VA: 0x1805A9960
	internal static Uri CreateHelper(string uriString, bool dontEscape, UriKind uriKind, ref UriFormatException e) { }
	// RVA: 0x5A9C60 Offset: 0x5A8460 VA: 0x1805A9C60
	internal static Uri ResolveHelper(Uri baseUri, Uri relativeUri, ref string newUriString, ref bool userEscaped, out UriFormatException e) { }
	// RVA: 0x5AA160 Offset: 0x5A8960 VA: 0x1805AA160
	private string GetRelativeSerializationString(UriFormat format) { }
	// RVA: 0x5AA460 Offset: 0x5A8C60 VA: 0x1805AA460
	internal string GetComponentsHelper(UriComponents uriComponents, UriFormat uriFormat) { }
	// RVA: 0x5AA860 Offset: 0x5A9060 VA: 0x1805AA860
	private void CreateThisFromUri(Uri otherUri) { }
	// RVA: 0x5AA9F0 Offset: 0x5A91F0 VA: 0x1805AA9F0
	private static void .cctor() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
private enum Uri.Flags // TypeDefIndex: 1166
{
	// Fields
	public ulong value__; // 0x0
	public const Uri.Flags Zero = 0; // 0x0
	public const Uri.Flags SchemeNotCanonical = 1; // 0x0
	public const Uri.Flags UserNotCanonical = 2; // 0x0
	public const Uri.Flags HostNotCanonical = 4; // 0x0
	public const Uri.Flags PortNotCanonical = 8; // 0x0
	public const Uri.Flags PathNotCanonical = 16; // 0x0
	public const Uri.Flags QueryNotCanonical = 32; // 0x0
	public const Uri.Flags FragmentNotCanonical = 64; // 0x0
	public const Uri.Flags CannotDisplayCanonical = 127; // 0x0
	public const Uri.Flags E_UserNotCanonical = 128; // 0x0
	public const Uri.Flags E_HostNotCanonical = 256; // 0x0
	public const Uri.Flags E_PortNotCanonical = 512; // 0x0
	public const Uri.Flags E_PathNotCanonical = 1024; // 0x0
	public const Uri.Flags E_QueryNotCanonical = 2048; // 0x0
	public const Uri.Flags E_FragmentNotCanonical = 4096; // 0x0
	public const Uri.Flags E_CannotDisplayCanonical = 8064; // 0x0
	public const Uri.Flags ShouldBeCompressed = 8192; // 0x0
	public const Uri.Flags FirstSlashAbsent = 16384; // 0x0
	public const Uri.Flags BackslashInPath = 32768; // 0x0
	public const Uri.Flags IndexMask = 65535; // 0x0
	public const Uri.Flags HostTypeMask = 458752; // 0x0
	public const Uri.Flags HostNotParsed = 0; // 0x0
	public const Uri.Flags IPv6HostType = 65536; // 0x0
	public const Uri.Flags IPv4HostType = 131072; // 0x0
	public const Uri.Flags DnsHostType = 196608; // 0x0
	public const Uri.Flags UncHostType = 262144; // 0x0
	public const Uri.Flags BasicHostType = 327680; // 0x0
	public const Uri.Flags UnusedHostType = 393216; // 0x0
	public const Uri.Flags UnknownHostType = 458752; // 0x0
	public const Uri.Flags UserEscaped = 524288; // 0x0
	public const Uri.Flags AuthorityFound = 1048576; // 0x0
	public const Uri.Flags HasUserInfo = 2097152; // 0x0
	public const Uri.Flags LoopbackHost = 4194304; // 0x0
	public const Uri.Flags NotDefaultPort = 8388608; // 0x0
	public const Uri.Flags UserDrivenParsing = 16777216; // 0x0
	public const Uri.Flags CanonicalDnsHost = 33554432; // 0x0
	public const Uri.Flags ErrorOrParsingRecursion = 67108864; // 0x0
	public const Uri.Flags DosPath = 134217728; // 0x0
	public const Uri.Flags UncPath = 268435456; // 0x0
	public const Uri.Flags ImplicitFile = 536870912; // 0x0
	public const Uri.Flags MinimalUriInfoSet = 1073741824; // 0x0
	public const Uri.Flags AllUriInfoSet = 2147483648; // 0x0
	public const Uri.Flags IdnHost = 4294967296; // 0x0
	public const Uri.Flags HasUnicode = 8589934592; // 0x0
	public const Uri.Flags HostUnicodeNormalized = 17179869184; // 0x0
	public const Uri.Flags RestUnicodeNormalized = 34359738368; // 0x0
	public const Uri.Flags UnicodeHost = 68719476736; // 0x0
	public const Uri.Flags IntranetUri = 137438953472; // 0x0
	public const Uri.Flags UseOrigUncdStrOffset = 274877906944; // 0x0
	public const Uri.Flags UserIriCanonical = 549755813888; // 0x0
	public const Uri.Flags PathIriCanonical = 1099511627776; // 0x0
	public const Uri.Flags QueryIriCanonical = 2199023255552; // 0x0
	public const Uri.Flags FragmentIriCanonical = 4398046511104; // 0x0
	public const Uri.Flags IriCanonical = 8246337208320; // 0x0
	public const Uri.Flags CompressedSlashes = 17592186044416; // 0x0
}

// Namespace: 
private class Uri.UriInfo // TypeDefIndex: 1167
{
	// Fields
	public string Host; // 0x10
	public string ScopeId; // 0x18
	public string String; // 0x20
	public Uri.Offset Offset; // 0x28
	public string DnsSafeHost; // 0x38
	public Uri.MoreInfo MoreInfo; // 0x40

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private struct Uri.Offset // TypeDefIndex: 1168
{
	// Fields
	public ushort Scheme; // 0x0
	public ushort User; // 0x2
	public ushort Host; // 0x4
	public ushort PortValue; // 0x6
	public ushort Path; // 0x8
	public ushort Query; // 0xA
	public ushort Fragment; // 0xC
	public ushort End; // 0xE
}

// Namespace: 
private class Uri.MoreInfo // TypeDefIndex: 1169
{
	// Fields
	public string Path; // 0x10
	public string Fragment; // 0x18
	public string AbsoluteUri; // 0x20
	public int Hash; // 0x28
	public string RemoteUrl; // 0x30

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
private enum Uri.Check // TypeDefIndex: 1170
{
	// Fields
	public int value__; // 0x0
	public const Uri.Check None = 0; // 0x0
	public const Uri.Check EscapedCanonical = 1; // 0x0
	public const Uri.Check DisplayCanonical = 2; // 0x0
	public const Uri.Check DotSlashAttn = 4; // 0x0
	public const Uri.Check DotSlashEscaped = 128; // 0x0
	public const Uri.Check BackslashInPath = 16; // 0x0
	public const Uri.Check ReservedFound = 32; // 0x0
	public const Uri.Check NotIriCanonical = 64; // 0x0
	public const Uri.Check FoundNonAscii = 8; // 0x0
}

// Namespace: System
[Serializable]
public class UriFormatException : FormatException, ISerializable // TypeDefIndex: 1171
{
	// Methods
	// RVA: 0x402920 Offset: 0x401120 VA: 0x180402920
	public void .ctor() { }
	// RVA: 0x402900 Offset: 0x401100 VA: 0x180402900
	public void .ctor(string textString) { }
	// RVA: 0x1D4330 Offset: 0x1D2B30 VA: 0x1801D4330
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// RVA: 0x642220 Offset: 0x640A20 VA: 0x180642220 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
}

// Namespace: System
public enum UriKind // TypeDefIndex: 1172
{
	// Fields
	public int value__; // 0x0
	public const UriKind RelativeOrAbsolute = 0; // 0x0
	public const UriKind Absolute = 1; // 0x0
	public const UriKind Relative = 2; // 0x0
}

// Namespace: System
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum UriComponents // TypeDefIndex: 1173
{
	// Fields
	public int value__; // 0x0
	public const UriComponents Scheme = 1; // 0x0
	public const UriComponents UserInfo = 2; // 0x0
	public const UriComponents Host = 4; // 0x0
	public const UriComponents Port = 8; // 0x0
	public const UriComponents Path = 16; // 0x0
	public const UriComponents Query = 32; // 0x0
	public const UriComponents Fragment = 64; // 0x0
	public const UriComponents StrongPort = 128; // 0x0
	public const UriComponents NormalizedHost = 256; // 0x0
	public const UriComponents KeepDelimiter = 1073741824; // 0x0
	public const UriComponents SerializationInfoString = -2147483648; // 0x0
	public const UriComponents AbsoluteUri = 127; // 0x0
	public const UriComponents HostAndPort = 132; // 0x0
	public const UriComponents StrongAuthority = 134; // 0x0
	public const UriComponents SchemeAndServer = 13; // 0x0
	public const UriComponents HttpRequestUrl = 61; // 0x0
	public const UriComponents PathAndQuery = 48; // 0x0
}

// Namespace: System
public enum UriFormat // TypeDefIndex: 1174
{
	// Fields
	public int value__; // 0x0
	public const UriFormat UriEscaped = 1; // 0x0
	public const UriFormat Unescaped = 2; // 0x0
	public const UriFormat SafeUnescaped = 3; // 0x0
}

// Namespace: System
public enum UriIdnScope // TypeDefIndex: 1175
{
	// Fields
	public int value__; // 0x0
	public const UriIdnScope None = 0; // 0x0
	public const UriIdnScope AllExceptIntranet = 1; // 0x0
	public const UriIdnScope All = 2; // 0x0
}

// Namespace: System
internal enum ParsingError // TypeDefIndex: 1176
{
	// Fields
	public int value__; // 0x0
	public const ParsingError None = 0; // 0x0
	public const ParsingError BadFormat = 1; // 0x0
	public const ParsingError BadScheme = 2; // 0x0
	public const ParsingError BadAuthority = 3; // 0x0
	public const ParsingError EmptyUriString = 4; // 0x0
	public const ParsingError LastRelativeUriOkErrIndex = 4; // 0x0
	public const ParsingError SchemeLimit = 5; // 0x0
	public const ParsingError SizeLimit = 6; // 0x0
	public const ParsingError MustRootedPath = 7; // 0x0
	public const ParsingError BadHostName = 8; // 0x0
	public const ParsingError NonEmptyHost = 9; // 0x0
	public const ParsingError BadPort = 10; // 0x0
	public const ParsingError BadAuthorityTerminator = 11; // 0x0
	public const ParsingError CannotCreateRelative = 12; // 0x0
}

// Namespace: System
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum UnescapeMode // TypeDefIndex: 1177
{
	// Fields
	public int value__; // 0x0
	public const UnescapeMode CopyOnly = 0; // 0x0
	public const UnescapeMode Escape = 1; // 0x0
	public const UnescapeMode Unescape = 2; // 0x0
	public const UnescapeMode EscapeUnescape = 3; // 0x0
	public const UnescapeMode V1ToStringFlag = 4; // 0x0
	public const UnescapeMode UnescapeAll = 8; // 0x0
	public const UnescapeMode UnescapeAllOrThrow = 24; // 0x0
}

// Namespace: System
internal static class UriHelper // TypeDefIndex: 1178
{
	// Fields
	private static readonly char[] HexUpperChars; // 0xAC1C0

	// Methods
	// RVA: 0x642240 Offset: 0x640A40 VA: 0x180642240
	internal static char[] EscapeString(string input, int start, int end, char[] dest, ref int destPos, bool isUriString, char force1, char force2, char rsvd) { }
	// RVA: 0x6429D0 Offset: 0x6411D0 VA: 0x1806429D0
	private static char[] EnsureDestinationSize(char* pStr, char[] dest, int currentInputPos, short charsToAdd, short minReallocateChars, ref int destPos, int prevInputPos) { }
	// RVA: 0x642B30 Offset: 0x641330 VA: 0x180642B30
	internal static char[] UnescapeString(string input, int start, int end, char[] dest, ref int destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery) { }
	// RVA: 0x642C50 Offset: 0x641450 VA: 0x180642C50
	internal static char[] UnescapeString(char* pStr, int start, int end, char[] dest, ref int destPosition, char rsvd1, char rsvd2, char rsvd3, UnescapeMode unescapeMode, UriParser syntax, bool isQuery) { }
	// RVA: 0x643680 Offset: 0x641E80 VA: 0x180643680
	internal static void MatchUTF8Sequence(char* pDest, char[] dest, ref int destOffset, char[] unescapedChars, int charCount, byte[] bytes, int byteCount, bool isQuery, bool iriParsing) { }
	// RVA: 0x643C10 Offset: 0x642410 VA: 0x180643C10
	internal static void EscapeAsciiChar(char ch, char[] to, ref int pos) { }
	// RVA: 0x643DC0 Offset: 0x6425C0 VA: 0x180643DC0
	internal static char EscapedAscii(char digit, char next) { }
	// RVA: 0x643E60 Offset: 0x642660 VA: 0x180643E60
	internal static bool IsNotSafeForUnescape(char ch) { }
	// RVA: 0x643EB0 Offset: 0x6426B0 VA: 0x180643EB0
	private static bool IsReservedUnreservedOrHash(char c) { }
	// RVA: 0x643FF0 Offset: 0x6427F0 VA: 0x180643FF0
	internal static bool IsUnreserved(char c) { }
	// RVA: 0x644100 Offset: 0x642900 VA: 0x180644100
	internal static bool Is3986Unreserved(char c) { }
	// RVA: 0x6441E0 Offset: 0x6429E0 VA: 0x1806441E0
	private static void .cctor() { }
}

// Namespace: System
public abstract class UriParser // TypeDefIndex: 1179
{
	// Fields
	private static readonly Dictionary<string, UriParser> m_Table; // 0x0
	private static Dictionary<string, UriParser> m_TempTable; // 0x8
	private UriSyntaxFlags m_Flags; // 0x10
	private UriSyntaxFlags m_UpdatableFlags; // 0x14
	private bool m_UpdatableFlagsUsed; // 0x18
	private int m_Port; // 0x1C
	private string m_Scheme; // 0x20
	internal static UriParser HttpUri; // 0x10
	internal static UriParser HttpsUri; // 0x18
	internal static UriParser WsUri; // 0x20
	internal static UriParser WssUri; // 0x28
	internal static UriParser FtpUri; // 0x30
	internal static UriParser FileUri; // 0x38
	internal static UriParser GopherUri; // 0x40
	internal static UriParser NntpUri; // 0x48
	internal static UriParser NewsUri; // 0x50
	internal static UriParser MailToUri; // 0x58
	internal static UriParser UuidUri; // 0x60
	internal static UriParser TelnetUri; // 0x68
	internal static UriParser LdapUri; // 0x70
	internal static UriParser NetTcpUri; // 0x78
	internal static UriParser NetPipeUri; // 0x80
	internal static UriParser VsMacrosUri; // 0x88
	private static readonly UriParser.UriQuirksVersion s_QuirksVersion; // 0x90
	private static readonly UriSyntaxFlags HttpSyntaxFlags; // 0x94
	private static readonly UriSyntaxFlags FileSyntaxFlags; // 0x98

	// Properties
	internal static bool ShouldUseLegacyV2Quirks { get; }
	internal bool IsSimple { get; }

	// Methods
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630 Slot: 4
	protected virtual UriParser OnNewUri() { }
	// RVA: 0x644280 Offset: 0x642A80 VA: 0x180644280 Slot: 5
	protected virtual void InitializeAndValidate(Uri uri, out UriFormatException parsingError) { }
	// RVA: 0x644360 Offset: 0x642B60 VA: 0x180644360 Slot: 6
	protected virtual string Resolve(Uri baseUri, Uri relativeUri, out UriFormatException parsingError) { }
	// RVA: 0x644580 Offset: 0x642D80 VA: 0x180644580 Slot: 7
	protected virtual string GetComponents(Uri uri, UriComponents components, UriFormat format) { }
	// RVA: 0x6447D0 Offset: 0x642FD0 VA: 0x1806447D0
	internal static bool get_ShouldUseLegacyV2Quirks() { }
	// RVA: 0x644870 Offset: 0x643070 VA: 0x180644870
	private static void .cctor() { }
	// RVA: 0x6453E0 Offset: 0x643BE0 VA: 0x1806453E0
	internal bool NotAny(UriSyntaxFlags flags) { }
	// RVA: 0x645420 Offset: 0x643C20 VA: 0x180645420
	internal bool InFact(UriSyntaxFlags flags) { }
	// RVA: 0x645460 Offset: 0x643C60 VA: 0x180645460
	internal bool IsAllSet(UriSyntaxFlags flags) { }
	// RVA: 0x6454A0 Offset: 0x643CA0 VA: 0x1806454A0
	private bool IsFullMatch(UriSyntaxFlags flags, UriSyntaxFlags expected) { }
	// RVA: 0x6454E0 Offset: 0x643CE0 VA: 0x1806454E0
	internal void .ctor(UriSyntaxFlags flags) { }
	// RVA: 0x645570 Offset: 0x643D70 VA: 0x180645570
	internal static UriParser FindOrFetchAsUnknownV1Syntax(string lwrCaseScheme) { }
	// RVA: 0x645A20 Offset: 0x644220 VA: 0x180645A20
	internal bool get_IsSimple() { }
	// RVA: 0x645A30 Offset: 0x644230 VA: 0x180645A30
	internal UriParser InternalOnNewUri() { }
	// RVA: 0x645A80 Offset: 0x644280 VA: 0x180645A80
	internal void InternalValidate(Uri thisUri, out UriFormatException parsingError) { }
	// RVA: 0x645AA0 Offset: 0x6442A0 VA: 0x180645AA0
	internal string InternalResolve(Uri thisBaseUri, Uri uriLink, out UriFormatException parsingError) { }
	// RVA: 0x645AC0 Offset: 0x6442C0 VA: 0x180645AC0
	internal string InternalGetComponents(Uri thisUri, UriComponents uriComponents, UriFormat uriFormat) { }
}

// Namespace: 
private enum UriParser.UriQuirksVersion // TypeDefIndex: 1180
{
	// Fields
	public int value__; // 0x0
	public const UriParser.UriQuirksVersion V2 = 2; // 0x0
	public const UriParser.UriQuirksVersion V3 = 3; // 0x0
}

// Namespace: 
private class UriParser.BuiltInUriParser : UriParser // TypeDefIndex: 1181
{
	// Methods
	// RVA: 0x649970 Offset: 0x648170 VA: 0x180649970
	internal void .ctor(string lwrCaseScheme, int defaultPort, UriSyntaxFlags syntaxFlags) { }
}

// Namespace: System
internal class DomainNameHelper // TypeDefIndex: 1182
{
	// Methods
	// RVA: 0x452220 Offset: 0x450A20 VA: 0x180452220
	internal static string ParseCanonicalName(string str, int start, int end, ref bool loopback) { }
	// RVA: 0x4524A0 Offset: 0x450CA0 VA: 0x1804524A0
	internal static bool IsValid(char* name, ushort pos, ref int returnedEnd, ref bool notCanonical, bool notImplicitFile) { }
	// RVA: 0x452620 Offset: 0x450E20 VA: 0x180452620
	internal static bool IsValidByIri(char* name, ushort pos, ref int returnedEnd, ref bool notCanonical, bool notImplicitFile) { }
	// RVA: 0x4527F0 Offset: 0x450FF0 VA: 0x1804527F0
	internal static string IdnEquivalent(char* hostname, int start, int end, ref bool allAscii, ref bool atLeastOneValidIdn) { }
	// RVA: 0x452A60 Offset: 0x451260 VA: 0x180452A60
	internal static string IdnEquivalent(char* hostname, int start, int end, ref bool allAscii, ref string bidiStrippedHost) { }
	// RVA: 0x452C00 Offset: 0x451400 VA: 0x180452C00
	private static bool IsIdnAce(string input, int index) { }
	// RVA: 0x452C80 Offset: 0x451480 VA: 0x180452C80
	private static bool IsIdnAce(char* input, int index) { }
	// RVA: 0x452CB0 Offset: 0x4514B0 VA: 0x180452CB0
	internal static string UnicodeEquivalent(string idnHost, char* hostname, int start, int end) { }
	// RVA: 0x452DA0 Offset: 0x4515A0 VA: 0x180452DA0
	internal static string UnicodeEquivalent(char* hostname, int start, int end, ref bool allAscii, ref bool atLeastOneValidIdn) { }
	// RVA: 0x4532E0 Offset: 0x451AE0 VA: 0x1804532E0
	private static bool IsASCIILetterOrDigit(char character, ref bool notCanonical) { }
	// RVA: 0x453310 Offset: 0x451B10 VA: 0x180453310
	private static bool IsValidDomainLabelCharacter(char character, ref bool notCanonical) { }
}

// Namespace: System
internal static class IPv4AddressHelper // TypeDefIndex: 1183
{
	// Methods
	// RVA: 0x455E50 Offset: 0x454650 VA: 0x180455E50
	internal static string ParseCanonicalName(string str, int start, int end, ref bool isLoopback) { }
	// RVA: 0x456200 Offset: 0x454A00 VA: 0x180456200
	internal static int ParseHostNumber(string str, int start, int end) { }
	// RVA: 0x4562D0 Offset: 0x454AD0 VA: 0x1804562D0
	internal static bool IsValid(char* name, int start, ref int end, bool allowIPv6, bool notImplicitFile, bool unknownScheme) { }
	// RVA: 0x456470 Offset: 0x454C70 VA: 0x180456470
	internal static bool IsValidCanonical(char* name, int start, ref int end, bool allowIPv6, bool notImplicitFile) { }
	// RVA: 0x4565D0 Offset: 0x454DD0 VA: 0x1804565D0
	internal static long ParseNonCanonical(char* name, int start, ref int end, bool notImplicitFile) { }
	// RVA: 0x4569B0 Offset: 0x4551B0 VA: 0x1804569B0
	private static bool Parse(string name, byte* numbers, int start, int end) { }
	// RVA: 0x456A20 Offset: 0x455220 VA: 0x180456A20
	private static bool ParseCanonical(string name, byte* numbers, int start, int end) { }
}

// Namespace: System
internal static class IPv6AddressHelper // TypeDefIndex: 1184
{
	// Methods
	// RVA: 0x457100 Offset: 0x455900 VA: 0x180457100
	internal static string ParseCanonicalName(string str, int start, ref bool isLoopback, ref string scopeId) { }
	// RVA: 0x4571F0 Offset: 0x4559F0 VA: 0x1804571F0
	internal static string CreateCanonicalName(ushort* numbers) { }
	// RVA: 0x457AB0 Offset: 0x4562B0 VA: 0x180457AB0
	private static KeyValuePair<int, int> FindCompressionRange(ushort* numbers) { }
	// RVA: 0x457B80 Offset: 0x456380 VA: 0x180457B80
	private static bool ShouldHaveIpv4Embedded(ushort* numbers) { }
	// RVA: 0x457BF0 Offset: 0x4563F0 VA: 0x180457BF0
	private static bool InternalIsValid(char* name, int start, ref int end, bool validateStrictAddress) { }
	// RVA: 0x457F30 Offset: 0x456730 VA: 0x180457F30
	internal static bool IsValid(char* name, int start, ref int end) { }
	// RVA: 0x457F50 Offset: 0x456750 VA: 0x180457F50
	internal static bool IsValidStrict(char* name, int start, ref int end) { }
	// RVA: 0x457F70 Offset: 0x456770 VA: 0x180457F70
	internal static bool Parse(string address, ushort* numbers, int start, ref string scopeId) { }
}

// Namespace: System
internal class UncNameHelper // TypeDefIndex: 1185
{
	// Methods
	// RVA: 0x59B540 Offset: 0x599D40 VA: 0x18059B540
	internal static string ParseCanonicalName(string str, int start, int end, ref bool loopback) { }
	// RVA: 0x59B550 Offset: 0x599D50 VA: 0x18059B550
	internal static bool IsValid(char* name, ushort start, ref int returnedEnd, bool notImplicitFile) { }
}

// Namespace: System
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum UriSyntaxFlags // TypeDefIndex: 1186
{
	// Fields
	public int value__; // 0x0
	public const UriSyntaxFlags None = 0; // 0x0
	public const UriSyntaxFlags MustHaveAuthority = 1; // 0x0
	public const UriSyntaxFlags OptionalAuthority = 2; // 0x0
	public const UriSyntaxFlags MayHaveUserInfo = 4; // 0x0
	public const UriSyntaxFlags MayHavePort = 8; // 0x0
	public const UriSyntaxFlags MayHavePath = 16; // 0x0
	public const UriSyntaxFlags MayHaveQuery = 32; // 0x0
	public const UriSyntaxFlags MayHaveFragment = 64; // 0x0
	public const UriSyntaxFlags AllowEmptyHost = 128; // 0x0
	public const UriSyntaxFlags AllowUncHost = 256; // 0x0
	public const UriSyntaxFlags AllowDnsHost = 512; // 0x0
	public const UriSyntaxFlags AllowIPv4Host = 1024; // 0x0
	public const UriSyntaxFlags AllowIPv6Host = 2048; // 0x0
	public const UriSyntaxFlags AllowAnInternetHost = 3584; // 0x0
	public const UriSyntaxFlags AllowAnyOtherHost = 4096; // 0x0
	public const UriSyntaxFlags FileLikeUri = 8192; // 0x0
	public const UriSyntaxFlags MailToLikeUri = 16384; // 0x0
	public const UriSyntaxFlags V1_UnknownUri = 65536; // 0x0
	public const UriSyntaxFlags SimpleUserSyntax = 131072; // 0x0
	public const UriSyntaxFlags BuiltInSyntax = 262144; // 0x0
	public const UriSyntaxFlags ParserSchemeOnly = 524288; // 0x0
	public const UriSyntaxFlags AllowDOSPath = 1048576; // 0x0
	public const UriSyntaxFlags PathIsRooted = 2097152; // 0x0
	public const UriSyntaxFlags ConvertPathSlashes = 4194304; // 0x0
	public const UriSyntaxFlags CompressPath = 8388608; // 0x0
	public const UriSyntaxFlags CanonicalizeAsFilePath = 16777216; // 0x0
	public const UriSyntaxFlags UnEscapeDotsAndSlashes = 33554432; // 0x0
	public const UriSyntaxFlags AllowIdn = 67108864; // 0x0
	public const UriSyntaxFlags AllowIriParsing = 268435456; // 0x0
}

// Namespace: System
internal enum IOOperation // TypeDefIndex: 1187
{
	// Fields
	public int value__; // 0x0
	public const IOOperation Read = 1; // 0x0
	public const IOOperation Write = 2; // 0x0
}

// Namespace: System
internal sealed class IOAsyncCallback : MulticastDelegate // TypeDefIndex: 1188
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E1A0 Offset: 0x44C9A0 VA: 0x18044E1A0 Slot: 12
	public virtual void Invoke(IOAsyncResult ioares) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(IOAsyncResult ioares, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: System
internal abstract class IOAsyncResult : IAsyncResult // TypeDefIndex: 1189
{
	// Fields
	private AsyncCallback async_callback; // 0x10
	private object async_state; // 0x18
	private ManualResetEvent wait_handle; // 0x20
	private bool completed_synchronously; // 0x28
	private bool completed; // 0x29

	// Properties
	public WaitHandle AsyncWaitHandle { get; }
	protected bool IsCompleted { set; }

	// Methods
	// RVA: 0x453870 Offset: 0x452070 VA: 0x180453870 Slot: 4
	public WaitHandle get_AsyncWaitHandle() { }
	// RVA: 0x453A80 Offset: 0x452280 VA: 0x180453A80
	protected void set_IsCompleted(bool value) { }
}

// Namespace: System
internal class IOSelectorJob : IThreadPoolWorkItem // TypeDefIndex: 1190
{
	// Fields
	private IOOperation operation; // 0x10
	private IOAsyncCallback callback; // 0x18
	private IOAsyncResult state; // 0x20

	// Methods
	// RVA: 0x453C50 Offset: 0x452450 VA: 0x180453C50
	public void .ctor(IOOperation operation, IOAsyncCallback callback, IOAsyncResult state) { }
	// RVA: 0x453C60 Offset: 0x452460 VA: 0x180453C60 Slot: 4
	private void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.Threading.IThreadPoolWorkItem.MarkAborted(ThreadAbortException tae) { }
}

// Namespace: System
internal static class IOSelector // TypeDefIndex: 1191
{
	// Methods
	// RVA: 0x453BA0 Offset: 0x4523A0 VA: 0x180453BA0
	public static void Add(IntPtr handle, IOSelectorJob job) { }
}

// Namespace: System.Threading
[Serializable]
public class BarrierPostPhaseException : Exception // TypeDefIndex: 1192
{
	// Methods
	// RVA: 0x450FE0 Offset: 0x44F7E0 VA: 0x180450FE0
	public void .ctor() { }
	// RVA: 0x4510A0 Offset: 0x44F8A0 VA: 0x1804510A0
	public void .ctor(Exception innerException) { }
	// RVA: 0x451170 Offset: 0x44F970 VA: 0x180451170
	public void .ctor(string message) { }
	// RVA: 0x451240 Offset: 0x44FA40 VA: 0x180451240
	public void .ctor(string message, Exception innerException) { }
	// RVA: 0x451310 Offset: 0x44FB10 VA: 0x180451310
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: System.Threading
public class Barrier : IDisposable // TypeDefIndex: 1193
{
	// Fields
	private int m_currentTotalCount; // 0x10
	private const int CURRENT_MASK = 2147418112; // 0x0
	private const int TOTAL_MASK = 32767; // 0x0
	private const int SENSE_MASK = -2147483648; // 0x0
	private const int MAX_PARTICIPANTS = 32767; // 0x0
	private long m_currentPhase; // 0x18
	private bool m_disposed; // 0x20
	private ManualResetEventSlim m_oddEvent; // 0x28
	private ManualResetEventSlim m_evenEvent; // 0x30
	private ExecutionContext m_ownerThreadContext; // 0x38
	private static ContextCallback s_invokePostPhaseAction; // 0x0
	private Action<Barrier> m_postPhaseAction; // 0x40
	private Exception m_exception; // 0x48
	private int m_actionCallerID; // 0x50

	// Properties
	public long CurrentPhaseNumber { get; set; }

	// Methods
	// RVA: 0x44F9C0 Offset: 0x44E1C0 VA: 0x18044F9C0
	public long get_CurrentPhaseNumber() { }
	// RVA: 0x44F9D0 Offset: 0x44E1D0 VA: 0x18044F9D0
	internal void set_CurrentPhaseNumber(long value) { }
	// RVA: 0x44F9E0 Offset: 0x44E1E0 VA: 0x18044F9E0
	public void .ctor(int participantCount) { }
	// RVA: 0x44F9F0 Offset: 0x44E1F0 VA: 0x18044F9F0
	public void .ctor(int participantCount, Action<Barrier> postPhaseAction) { }
	// RVA: 0x44FC10 Offset: 0x44E410 VA: 0x18044FC10
	private void GetCurrentTotal(int currentTotal, out int current, out int total, out bool sense) { }
	// RVA: 0x44FC40 Offset: 0x44E440 VA: 0x18044FC40
	private bool SetCurrentTotal(int currentTotal, int current, int total, bool sense) { }
	// RVA: 0x44FC80 Offset: 0x44E480 VA: 0x18044FC80
	public void SignalAndWait(CancellationToken cancellationToken) { }
	// RVA: 0x44FC90 Offset: 0x44E490 VA: 0x18044FC90
	public bool SignalAndWait(int millisecondsTimeout, CancellationToken cancellationToken) { }
	// RVA: 0x450440 Offset: 0x44EC40 VA: 0x180450440
	private void FinishPhase(bool observedSense) { }
	// RVA: 0x4506F0 Offset: 0x44EEF0 VA: 0x1804506F0
	private static void InvokePostPhaseAction(object obj) { }
	// RVA: 0x4507D0 Offset: 0x44EFD0 VA: 0x1804507D0
	private void SetResetEvents(bool observedSense) { }
	// RVA: 0x4508C0 Offset: 0x44F0C0 VA: 0x1804508C0
	private void WaitCurrentPhase(ManualResetEventSlim currentPhaseEvent, long observedPhase) { }
	// RVA: 0x450C20 Offset: 0x44F420 VA: 0x180450C20
	private bool DiscontinuousWait(ManualResetEventSlim currentPhaseEvent, int totalTimeout, CancellationToken token, long observedPhase) { }
	// RVA: 0x450DA0 Offset: 0x44F5A0 VA: 0x180450DA0 Slot: 4
	public void Dispose() { }
	// RVA: 0x450EC0 Offset: 0x44F6C0 VA: 0x180450EC0 Slot: 5
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x450F20 Offset: 0x44F720 VA: 0x180450F20
	private void ThrowIfDisposed() { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Regex : ISerializable // TypeDefIndex: 1194
{
	// Fields
	protected internal string pattern; // 0x10
	protected internal RegexRunnerFactory factory; // 0x18
	protected internal RegexOptions roptions; // 0x20
	private static readonly TimeSpan MaximumMatchTimeout; // 0x0
	public static readonly TimeSpan InfiniteMatchTimeout; // 0x8
	[OptionalFieldAttribute] // RVA: 0xD9A30 Offset: 0xD8E30 VA: 0x1800D9A30
	protected internal TimeSpan internalMatchTimeout; // 0x28
	internal static readonly TimeSpan FallbackDefaultMatchTimeout; // 0x10
	internal static readonly TimeSpan DefaultMatchTimeout; // 0x18
	protected internal Hashtable caps; // 0x30
	protected internal Hashtable capnames; // 0x38
	protected internal string[] capslist; // 0x40
	protected internal int capsize; // 0x48
	internal ExclusiveReference runnerref; // 0x50
	internal SharedReference replref; // 0x58
	internal RegexCode code; // 0x60
	internal bool refsInitialized; // 0x68
	internal static LinkedList<CachedCodeEntry> livecode; // 0x20
	internal static int cacheSize; // 0x28

	// Properties
	public bool RightToLeft { get; }

	// Methods
	// RVA: 0x45A740 Offset: 0x458F40 VA: 0x18045A740
	protected void .ctor() { }
	// RVA: 0x45A7E0 Offset: 0x458FE0 VA: 0x18045A7E0
	public void .ctor(string pattern) { }
	// RVA: 0x45A8B0 Offset: 0x4590B0 VA: 0x18045A8B0
	public void .ctor(string pattern, RegexOptions options) { }
	// RVA: 0x45A990 Offset: 0x459190 VA: 0x18045A990
	private void .ctor(string pattern, RegexOptions options, TimeSpan matchTimeout, bool useCache) { }
	// RVA: 0x45B120 Offset: 0x459920 VA: 0x18045B120
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x45B2E0 Offset: 0x459AE0 VA: 0x18045B2E0 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context) { }
	// RVA: 0x45B3C0 Offset: 0x459BC0 VA: 0x18045B3C0
	protected internal static void ValidateMatchTimeout(TimeSpan matchTimeout) { }
	// RVA: 0x45B550 Offset: 0x459D50 VA: 0x18045B550
	private static TimeSpan InitDefaultMatchTimeout() { }
	// RVA: 0x45B900 Offset: 0x45A100 VA: 0x18045B900
	public bool get_RightToLeft() { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 3
	public override string ToString() { }
	// RVA: 0x45B910 Offset: 0x45A110 VA: 0x18045B910
	public static bool IsMatch(string input, string pattern) { }
	// RVA: 0x45BA70 Offset: 0x45A270 VA: 0x18045BA70
	public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout) { }
	// RVA: 0x45BB50 Offset: 0x45A350 VA: 0x18045BB50
	public bool IsMatch(string input) { }
	// RVA: 0x45BCB0 Offset: 0x45A4B0 VA: 0x18045BCB0
	public bool IsMatch(string input, int startat) { }
	// RVA: 0x45BDA0 Offset: 0x45A5A0 VA: 0x18045BDA0
	protected void InitializeReferences() { }
	// RVA: 0x45BF10 Offset: 0x45A710 VA: 0x18045BF10
	internal Match Run(bool quick, int prevlen, string input, int beginning, int length, int startat) { }
	// RVA: 0x45C400 Offset: 0x45AC00 VA: 0x18045C400
	private static CachedCodeEntry LookupCachedAndUpdate(string key) { }
	// RVA: 0x45C850 Offset: 0x45B050 VA: 0x18045C850
	private CachedCodeEntry CacheCode(string key) { }
	// RVA: 0x45B900 Offset: 0x45A100 VA: 0x18045B900
	protected bool UseOptionR() { }
	// RVA: 0x45CF50 Offset: 0x45B750 VA: 0x18045CF50
	internal bool UseOptionInvariant() { }
	// RVA: 0x45CF60 Offset: 0x45B760 VA: 0x18045CF60
	private static void .cctor() { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class CachedCodeEntry // TypeDefIndex: 1195
{
	// Fields
	internal string _key; // 0x10
	internal RegexCode _code; // 0x18
	internal Hashtable _caps; // 0x20
	internal Hashtable _capnames; // 0x28
	internal string[] _capslist; // 0x30
	internal int _capsize; // 0x38
	internal RegexRunnerFactory _factory; // 0x40
	internal ExclusiveReference _runnerref; // 0x48
	internal SharedReference _replref; // 0x50

	// Methods
	// RVA: 0x4513D0 Offset: 0x44FBD0 VA: 0x1804513D0
	internal void .ctor(string key, Hashtable capnames, string[] capslist, RegexCode code, Hashtable caps, int capsize, ExclusiveReference runner, SharedReference repl) { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class ExclusiveReference // TypeDefIndex: 1196
{
	// Fields
	private RegexRunner _ref; // 0x10
	private object _obj; // 0x18
	private int _locked; // 0x20

	// Methods
	// RVA: 0x453550 Offset: 0x451D50 VA: 0x180453550
	internal object Get() { }
	// RVA: 0x453580 Offset: 0x451D80 VA: 0x180453580
	internal void Release(object obj) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class SharedReference // TypeDefIndex: 1197
{
	// Fields
	private WeakReference _ref; // 0x10

	// Methods
	// RVA: 0x5907F0 Offset: 0x58EFF0 VA: 0x1805907F0
	public void .ctor() { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class RegexBoyerMoore // TypeDefIndex: 1198
{
	// Fields
	internal int[] _positive; // 0x10
	internal int[] _negativeASCII; // 0x18
	internal int[][] _negativeUnicode; // 0x20
	internal string _pattern; // 0x28
	internal int _lowASCII; // 0x30
	internal int _highASCII; // 0x34
	internal bool _rightToLeft; // 0x38
	internal bool _caseInsensitive; // 0x39
	internal CultureInfo _culture; // 0x40

	// Methods
	// RVA: 0x45D0C0 Offset: 0x45B8C0 VA: 0x18045D0C0
	internal void .ctor(string pattern, bool caseInsensitive, bool rightToLeft, CultureInfo culture) { }
	// RVA: 0x45D660 Offset: 0x45BE60 VA: 0x18045D660
	private bool MatchPattern(string text, int index) { }
	// RVA: 0x45D7A0 Offset: 0x45BFA0 VA: 0x18045D7A0
	internal bool IsMatch(string text, int index, int beglimit, int endlimit) { }
	// RVA: 0x45D820 Offset: 0x45C020 VA: 0x18045D820
	internal int Scan(string text, int index, int beglimit, int endlimit) { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Capture // TypeDefIndex: 1199
{
	// Fields
	internal string _text; // 0x10
	internal int _index; // 0x18
	internal int _length; // 0x1C

	// Properties
	public string Value { get; }

	// Methods
	// RVA: 0x451410 Offset: 0x44FC10 VA: 0x180451410
	internal void .ctor(string text, int i, int l) { }
	// RVA: 0x451420 Offset: 0x44FC20 VA: 0x180451420
	public string get_Value() { }
	// RVA: 0x451420 Offset: 0x44FC20 VA: 0x180451420 Slot: 3
	public override string ToString() { }
	// RVA: 0x451450 Offset: 0x44FC50 VA: 0x180451450
	internal void .ctor() { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class RegexCharClass // TypeDefIndex: 1200
{
	// Fields
	private List<RegexCharClass.SingleRange> _rangelist; // 0x10
	private StringBuilder _categories; // 0x18
	private bool _canonical; // 0x20
	private bool _negate; // 0x21
	private RegexCharClass _subtractor; // 0x28
	private static readonly string InternalRegexIgnoreCase; // 0x0
	private static readonly string Space; // 0x8
	private static readonly string NotSpace; // 0x10
	private static readonly string Word; // 0x18
	private static readonly string NotWord; // 0x20
	internal static readonly string SpaceClass; // 0x28
	internal static readonly string NotSpaceClass; // 0x30
	internal static readonly string WordClass; // 0x38
	internal static readonly string NotWordClass; // 0x40
	internal static readonly string DigitClass; // 0x48
	internal static readonly string NotDigitClass; // 0x50
	private static Dictionary<string, string> _definedCategories; // 0x58
	private static readonly string[,] _propTable; // 0x60
	private static readonly RegexCharClass.LowerCaseMapping[] _lcTable; // 0x68

	// Properties
	internal bool CanMerge { get; }

	// Methods
	// RVA: 0x45DCB0 Offset: 0x45C4B0 VA: 0x18045DCB0
	private static void .cctor() { }
	// RVA: 0x4629E0 Offset: 0x4611E0 VA: 0x1804629E0
	internal void .ctor() { }
	// RVA: 0x462AE0 Offset: 0x4612E0 VA: 0x180462AE0
	private void .ctor(bool negate, List<RegexCharClass.SingleRange> ranges, StringBuilder categories, RegexCharClass subtraction) { }
	// RVA: 0x462B00 Offset: 0x461300 VA: 0x180462B00
	internal bool get_CanMerge() { }
	// RVA: 0x462B20 Offset: 0x461320 VA: 0x180462B20
	internal void AddChar(char c) { }
	// RVA: 0x462B30 Offset: 0x461330 VA: 0x180462B30
	internal void AddCharClass(RegexCharClass cc) { }
	// RVA: 0x462D20 Offset: 0x461520 VA: 0x180462D20
	private void AddSet(string set) { }
	// RVA: 0x462FB0 Offset: 0x4617B0 VA: 0x180462FB0
	internal void AddRange(char first, char last) { }
	// RVA: 0x4630B0 Offset: 0x4618B0 VA: 0x1804630B0
	internal void AddCategoryFromName(string categoryName, bool invert, bool caseInsensitive, string pattern) { }
	// RVA: 0x463360 Offset: 0x461B60 VA: 0x180463360
	private void AddCategory(string category) { }
	// RVA: 0x463380 Offset: 0x461B80 VA: 0x180463380
	internal void AddLowercase(CultureInfo culture) { }
	// RVA: 0x463500 Offset: 0x461D00 VA: 0x180463500
	private void AddLowercaseRange(char chMin, char chMax, CultureInfo culture) { }
	// RVA: 0x463810 Offset: 0x462010 VA: 0x180463810
	internal void AddWord(bool ecma, bool negate) { }
	// RVA: 0x463970 Offset: 0x462170 VA: 0x180463970
	internal void AddSpace(bool ecma, bool negate) { }
	// RVA: 0x463AD0 Offset: 0x4622D0 VA: 0x180463AD0
	internal void AddDigit(bool ecma, bool negate, string pattern) { }
	// RVA: 0x463BB0 Offset: 0x4623B0 VA: 0x180463BB0
	internal static char SingletonChar(string set) { }
	// RVA: 0x463BD0 Offset: 0x4623D0 VA: 0x180463BD0
	internal static bool IsMergeable(string charClass) { }
	// RVA: 0x463D00 Offset: 0x462500 VA: 0x180463D00
	internal static bool IsEmpty(string charClass) { }
	// RVA: 0x463E30 Offset: 0x462630 VA: 0x180463E30
	internal static bool IsSingleton(string set) { }
	// RVA: 0x463FB0 Offset: 0x4627B0 VA: 0x180463FB0
	internal static bool IsSingletonInverse(string set) { }
	// RVA: 0x464130 Offset: 0x462930 VA: 0x180464130
	private static bool IsSubtraction(string charClass) { }
	// RVA: 0x464190 Offset: 0x462990 VA: 0x180464190
	internal static bool IsNegated(string set) { }
	// RVA: 0x4641C0 Offset: 0x4629C0 VA: 0x1804641C0
	internal static bool IsECMAWordChar(char ch) { }
	// RVA: 0x464260 Offset: 0x462A60 VA: 0x180464260
	internal static bool IsWordChar(char ch) { }
	// RVA: 0x464330 Offset: 0x462B30 VA: 0x180464330
	internal static bool CharInClass(char ch, string set) { }
	// RVA: 0x4643E0 Offset: 0x462BE0 VA: 0x1804643E0
	internal static bool CharInClassRecursive(char ch, string set, int start) { }
	// RVA: 0x464640 Offset: 0x462E40 VA: 0x180464640
	private static bool CharInClassInternal(char ch, string set, int start, int mySetLength, int myCategoryLength) { }
	// RVA: 0x464780 Offset: 0x462F80 VA: 0x180464780
	private static bool CharInCategory(char ch, string set, int start, int mySetLength, int myCategoryLength) { }
	// RVA: 0x464960 Offset: 0x463160 VA: 0x180464960
	private static bool CharInCategoryGroup(char ch, UnicodeCategory chcategory, string category, ref int i) { }
	// RVA: 0x464A30 Offset: 0x463230 VA: 0x180464A30
	private static string NegateCategory(string category) { }
	// RVA: 0x464B70 Offset: 0x463370 VA: 0x180464B70
	internal static RegexCharClass Parse(string charClass) { }
	// RVA: 0x464C10 Offset: 0x463410 VA: 0x180464C10
	private static RegexCharClass ParseRecursive(string charClass, int start) { }
	// RVA: 0x1E7080 Offset: 0x1E5880 VA: 0x1801E7080
	private int RangeCount() { }
	// RVA: 0x464E50 Offset: 0x463650 VA: 0x180464E50
	internal string ToStringClass() { }
	// RVA: 0x465120 Offset: 0x463920 VA: 0x180465120
	private RegexCharClass.SingleRange GetRangeAt(int i) { }
	// RVA: 0x4651C0 Offset: 0x4639C0 VA: 0x1804651C0
	private void Canonicalize() { }
	// RVA: 0x465470 Offset: 0x463C70 VA: 0x180465470
	private static string SetFromProperty(string capname, bool invert, string pattern) { }
}

// Namespace: 
private struct RegexCharClass.LowerCaseMapping // TypeDefIndex: 1201
{
	// Fields
	internal char _chMin; // 0x0
	internal char _chMax; // 0x2
	internal int _lcOp; // 0x4
	internal int _data; // 0x8

	// Methods
	// RVA: 0x23870 Offset: 0x22C70 VA: 0x180023870
	internal void .ctor(char chMin, char chMax, int lcOp, int data) { }
}

// Namespace: 
private sealed class RegexCharClass.SingleRangeComparer : IComparer<RegexCharClass.SingleRange> // TypeDefIndex: 1202
{
	// Methods
	// RVA: 0x647430 Offset: 0x645C30 VA: 0x180647430 Slot: 4
	public int Compare(RegexCharClass.SingleRange x, RegexCharClass.SingleRange y) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private sealed class RegexCharClass.SingleRange // TypeDefIndex: 1203
{
	// Fields
	internal char _first; // 0x10
	internal char _last; // 0x12

	// Methods
	// RVA: 0x647420 Offset: 0x645C20 VA: 0x180647420
	internal void .ctor(char first, char last) { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class RegexCode // TypeDefIndex: 1204
{
	// Fields
	internal int[] _codes; // 0x10
	internal string[] _strings; // 0x18
	internal int _trackcount; // 0x20
	internal Hashtable _caps; // 0x28
	internal int _capsize; // 0x30
	internal RegexPrefix _fcPrefix; // 0x38
	internal RegexBoyerMoore _bmPrefix; // 0x40
	internal int _anchors; // 0x48
	internal bool _rightToLeft; // 0x4C

	// Methods
	// RVA: 0x465800 Offset: 0x464000 VA: 0x180465800
	internal void .ctor(int[] codes, List<string> stringlist, int trackcount, Hashtable caps, int capsize, RegexBoyerMoore bmPrefix, RegexPrefix fcPrefix, int anchors, bool rightToLeft) { }
	// RVA: 0x465930 Offset: 0x464130 VA: 0x180465930
	internal static bool OpcodeBacktracks(int Op) { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class RegexFCD // TypeDefIndex: 1205
{
	// Fields
	private int[] _intStack; // 0x10
	private int _intDepth; // 0x18
	private RegexFC[] _fcStack; // 0x20
	private int _fcDepth; // 0x28
	private bool _skipAllChildren; // 0x2C
	private bool _skipchild; // 0x2D
	private bool _failed; // 0x2E

	// Methods
	// RVA: 0x465CF0 Offset: 0x4644F0 VA: 0x180465CF0
	internal static RegexPrefix FirstChars(RegexTree t) { }
	// RVA: 0x465EF0 Offset: 0x4646F0 VA: 0x180465EF0
	internal static RegexPrefix Prefix(RegexTree tree) { }
	// RVA: 0x466150 Offset: 0x464950 VA: 0x180466150
	internal static int Anchors(RegexTree tree) { }
	// RVA: 0x466310 Offset: 0x464B10 VA: 0x180466310
	private static int AnchorFromType(int type) { }
	// RVA: 0x466390 Offset: 0x464B90 VA: 0x180466390
	private void .ctor() { }
	// RVA: 0x466430 Offset: 0x464C30 VA: 0x180466430
	private void PushInt(int I) { }
	// RVA: 0x466530 Offset: 0x464D30 VA: 0x180466530
	private bool IntIsEmpty() { }
	// RVA: 0x466540 Offset: 0x464D40 VA: 0x180466540
	private int PopInt() { }
	// RVA: 0x466580 Offset: 0x464D80 VA: 0x180466580
	private void PushFC(RegexFC fc) { }
	// RVA: 0x4666C0 Offset: 0x464EC0 VA: 0x1804666C0
	private bool FCIsEmpty() { }
	// RVA: 0x4666D0 Offset: 0x464ED0 VA: 0x1804666D0
	private RegexFC PopFC() { }
	// RVA: 0x466720 Offset: 0x464F20 VA: 0x180466720
	private RegexFC TopFC() { }
	// RVA: 0x466760 Offset: 0x464F60 VA: 0x180466760
	private RegexFC RegexFCFromRegexTree(RegexTree tree) { }
	// RVA: 0x466A20 Offset: 0x465220 VA: 0x180466A20
	private void SkipChild() { }
	// RVA: 0x466A30 Offset: 0x465230 VA: 0x180466A30
	private void CalculateFC(int NodeType, RegexNode node, int CurIndex) { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class RegexFC // TypeDefIndex: 1206
{
	// Fields
	internal RegexCharClass _cc; // 0x10
	internal bool _nullable; // 0x18
	internal bool _caseInsensitive; // 0x19

	// Methods
	// RVA: 0x465990 Offset: 0x464190 VA: 0x180465990
	internal void .ctor(bool nullable) { }
	// RVA: 0x465A30 Offset: 0x464230 VA: 0x180465A30
	internal void .ctor(char ch, bool not, bool nullable, bool caseInsensitive) { }
	// RVA: 0x465B50 Offset: 0x464350 VA: 0x180465B50
	internal void .ctor(string charClass, bool nullable, bool caseInsensitive) { }
	// RVA: 0x465C20 Offset: 0x464420 VA: 0x180465C20
	internal bool AddFC(RegexFC fc, bool concatenate) { }
	// RVA: 0x465CB0 Offset: 0x4644B0 VA: 0x180465CB0
	internal string GetFirstChars(CultureInfo culture) { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class RegexPrefix // TypeDefIndex: 1207
{
	// Fields
	internal string _prefix; // 0x10
	internal bool _caseInsensitive; // 0x18
	internal static RegexPrefix _empty; // 0x0

	// Methods
	// RVA: 0x311110 Offset: 0x30F910 VA: 0x180311110
	internal void .ctor(string prefix, bool ci) { }
	// RVA: 0x58C6C0 Offset: 0x58AEC0 VA: 0x18058C6C0
	private static void .cctor() { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Group : Capture // TypeDefIndex: 1208
{
	// Fields
	internal static Group _emptygroup; // 0x0
	internal int[] _caps; // 0x20
	internal int _capcount; // 0x28
	[OptionalFieldAttribute] // RVA: 0xD9880 Offset: 0xD8C80 VA: 0x1800D9880
	internal string _name; // 0x30

	// Methods
	// RVA: 0x4536C0 Offset: 0x451EC0 VA: 0x1804536C0
	internal void .ctor(string text, int[] caps, int capcount, string name) { }
	// RVA: 0x453750 Offset: 0x451F50 VA: 0x180453750
	private static void .cctor() { }
	// RVA: 0x453840 Offset: 0x452040 VA: 0x180453840
	internal void .ctor() { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class RegexInterpreter : RegexRunner // TypeDefIndex: 1209
{
	// Fields
	internal int runoperator; // 0x80
	internal int[] runcodes; // 0x88
	internal int runcodepos; // 0x90
	internal string[] runstrings; // 0x98
	internal RegexCode runcode; // 0xA0
	internal RegexPrefix runfcPrefix; // 0xA8
	internal RegexBoyerMoore runbmPrefix; // 0xB0
	internal int runanchors; // 0xB8
	internal bool runrtl; // 0xBC
	internal bool runci; // 0xBD
	internal CultureInfo runculture; // 0xC0

	// Methods
	// RVA: 0x467020 Offset: 0x465820 VA: 0x180467020
	internal void .ctor(RegexCode code, CultureInfo culture) { }
	// RVA: 0x467080 Offset: 0x465880 VA: 0x180467080 Slot: 6
	protected override void InitTrackCount() { }
	// RVA: 0x4670B0 Offset: 0x4658B0 VA: 0x1804670B0
	private void Advance() { }
	// RVA: 0x4670C0 Offset: 0x4658C0 VA: 0x1804670C0
	private void Advance(int i) { }
	// RVA: 0x467140 Offset: 0x465940 VA: 0x180467140
	private void Goto(int newpos) { }
	// RVA: 0x4671D0 Offset: 0x4659D0 VA: 0x1804671D0
	private void Trackto(int newpos) { }
	// RVA: 0x4671F0 Offset: 0x4659F0 VA: 0x1804671F0
	private int Trackpos() { }
	// RVA: 0x467210 Offset: 0x465A10 VA: 0x180467210
	private void TrackPush() { }
	// RVA: 0x467260 Offset: 0x465A60 VA: 0x180467260
	private void TrackPush(int I1) { }
	// RVA: 0x4672E0 Offset: 0x465AE0 VA: 0x1804672E0
	private void TrackPush(int I1, int I2) { }
	// RVA: 0x467390 Offset: 0x465B90 VA: 0x180467390
	private void TrackPush(int I1, int I2, int I3) { }
	// RVA: 0x467480 Offset: 0x465C80 VA: 0x180467480
	private void TrackPush2(int I1) { }
	// RVA: 0x467500 Offset: 0x465D00 VA: 0x180467500
	private void TrackPush2(int I1, int I2) { }
	// RVA: 0x4675C0 Offset: 0x465DC0 VA: 0x1804675C0
	private void Backtrack() { }
	// RVA: 0x4676B0 Offset: 0x465EB0 VA: 0x1804676B0
	private void SetOperator(int op) { }
	// RVA: 0x4676E0 Offset: 0x465EE0 VA: 0x1804676E0
	private void TrackPop() { }
	// RVA: 0x4676F0 Offset: 0x465EF0 VA: 0x1804676F0
	private void TrackPop(int framesize) { }
	// RVA: 0x467700 Offset: 0x465F00 VA: 0x180467700
	private int TrackPeek() { }
	// RVA: 0x467740 Offset: 0x465F40 VA: 0x180467740
	private int TrackPeek(int i) { }
	// RVA: 0x467780 Offset: 0x465F80 VA: 0x180467780
	private void StackPush(int I1) { }
	// RVA: 0x4677D0 Offset: 0x465FD0 VA: 0x1804677D0
	private void StackPush(int I1, int I2) { }
	// RVA: 0x467850 Offset: 0x466050 VA: 0x180467850
	private void StackPop() { }
	// RVA: 0x467860 Offset: 0x466060 VA: 0x180467860
	private void StackPop(int framesize) { }
	// RVA: 0x467870 Offset: 0x466070 VA: 0x180467870
	private int StackPeek() { }
	// RVA: 0x4678B0 Offset: 0x4660B0 VA: 0x1804678B0
	private int StackPeek(int i) { }
	// RVA: 0x4678F0 Offset: 0x4660F0 VA: 0x1804678F0
	private int Operand(int i) { }
	// RVA: 0x467940 Offset: 0x466140 VA: 0x180467940
	private int Leftchars() { }
	// RVA: 0x467950 Offset: 0x466150 VA: 0x180467950
	private int Rightchars() { }
	// RVA: 0x467960 Offset: 0x466160 VA: 0x180467960
	private int Bump() { }
	// RVA: 0x467980 Offset: 0x466180 VA: 0x180467980
	private int Forwardchars() { }
	// RVA: 0x4679A0 Offset: 0x4661A0 VA: 0x1804679A0
	private char Forwardcharnext() { }
	// RVA: 0x467A80 Offset: 0x466280 VA: 0x180467A80
	private bool Stringmatch(string str) { }
	// RVA: 0x467C40 Offset: 0x466440 VA: 0x180467C40
	private bool Refmatch(int index, int len) { }
	// RVA: 0x467E20 Offset: 0x466620 VA: 0x180467E20
	private void Backwardnext() { }
	// RVA: 0x467E40 Offset: 0x466640 VA: 0x180467E40
	private char CharAt(int j) { }
	// RVA: 0x467E60 Offset: 0x466660 VA: 0x180467E60 Slot: 5
	protected override bool FindFirstChar() { }
	// RVA: 0x468210 Offset: 0x466A10 VA: 0x180468210 Slot: 4
	protected override void Go() { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class Match : Group // TypeDefIndex: 1210
{
	// Fields
	internal static Match _empty; // 0x0
	internal Regex _regex; // 0x38
	internal int _textbeg; // 0x40
	internal int _textpos; // 0x44
	internal int _textend; // 0x48
	internal int _textstart; // 0x4C
	internal int[][] _matches; // 0x50
	internal int[] _matchcount; // 0x58
	internal bool _balancing; // 0x60

	// Methods
	// RVA: 0x459870 Offset: 0x458070 VA: 0x180459870
	internal void .ctor(Regex regex, int capcount, string text, int begpos, int len, int startpos) { }
	// RVA: 0x459A00 Offset: 0x458200 VA: 0x180459A00 Slot: 4
	internal virtual void Reset(Regex regex, string text, int textbeg, int textend, int textstart) { }
	// RVA: 0x459A80 Offset: 0x458280 VA: 0x180459A80 Slot: 5
	internal virtual void AddMatch(int cap, int start, int len) { }
	// RVA: 0x459E50 Offset: 0x458650 VA: 0x180459E50 Slot: 6
	internal virtual void BalanceMatch(int cap) { }
	// RVA: 0x459FB0 Offset: 0x4587B0 VA: 0x180459FB0 Slot: 7
	internal virtual void RemoveMatch(int cap) { }
	// RVA: 0x459FF0 Offset: 0x4587F0 VA: 0x180459FF0 Slot: 8
	internal virtual bool IsMatched(int cap) { }
	// RVA: 0x45A090 Offset: 0x458890 VA: 0x18045A090 Slot: 9
	internal virtual int MatchIndex(int cap) { }
	// RVA: 0x45A150 Offset: 0x458950 VA: 0x18045A150 Slot: 10
	internal virtual int MatchLength(int cap) { }
	// RVA: 0x45A210 Offset: 0x458A10 VA: 0x18045A210 Slot: 11
	internal virtual void Tidy(int textpos) { }
	// RVA: 0x45A450 Offset: 0x458C50 VA: 0x18045A450
	private static void .cctor() { }
	// RVA: 0x45A520 Offset: 0x458D20 VA: 0x18045A520
	internal void .ctor() { }
}

// Namespace: System.Text.RegularExpressions
internal class MatchSparse : Match // TypeDefIndex: 1211
{
	// Fields
	internal Hashtable _caps; // 0x68

	// Methods
	// RVA: 0x45A550 Offset: 0x458D50 VA: 0x18045A550
	internal void .ctor(Regex regex, Hashtable caps, int capcount, string text, int begpos, int len, int startpos) { }
}

// Namespace: System.Text.RegularExpressions
[Serializable]
public class RegexMatchTimeoutException : TimeoutException, ISerializable // TypeDefIndex: 1212
{
	// Fields
	private string regexInput; // 0x88
	private string regexPattern; // 0x90
	private TimeSpan matchTimeout; // 0x98

	// Methods
	// RVA: 0x46A710 Offset: 0x468F10 VA: 0x18046A710
	public void .ctor(string regexInput, string regexPattern, TimeSpan matchTimeout) { }
	// RVA: 0x46A800 Offset: 0x469000 VA: 0x18046A800
	public void .ctor() { }
	// RVA: 0x46A9A0 Offset: 0x4691A0 VA: 0x18046A9A0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x46AAD0 Offset: 0x4692D0 VA: 0x18046AAD0 Slot: 4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context) { }
	// RVA: 0x46ABD0 Offset: 0x4693D0 VA: 0x18046ABD0
	private void Init() { }
	// RVA: 0x46AC80 Offset: 0x469480 VA: 0x18046AC80
	private void Init(string input, string pattern, TimeSpan timeout) { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class RegexNode // TypeDefIndex: 1213
{
	// Fields
	internal int _type; // 0x10
	internal List<RegexNode> _children; // 0x18
	internal string _str; // 0x20
	internal char _ch; // 0x28
	internal int _m; // 0x2C
	internal int _n; // 0x30
	internal RegexOptions _options; // 0x34
	internal RegexNode _next; // 0x38

	// Methods
	// RVA: 0x46ACA0 Offset: 0x4694A0 VA: 0x18046ACA0
	internal void .ctor(int type, RegexOptions options) { }
	// RVA: 0x46ACB0 Offset: 0x4694B0 VA: 0x18046ACB0
	internal void .ctor(int type, RegexOptions options, char ch) { }
	// RVA: 0x46ACC0 Offset: 0x4694C0 VA: 0x18046ACC0
	internal void .ctor(int type, RegexOptions options, string str) { }
	// RVA: 0x46ACD0 Offset: 0x4694D0 VA: 0x18046ACD0
	internal void .ctor(int type, RegexOptions options, int m) { }
	// RVA: 0x46ACE0 Offset: 0x4694E0 VA: 0x18046ACE0
	internal void .ctor(int type, RegexOptions options, int m, int n) { }
	// RVA: 0x46AD00 Offset: 0x469500 VA: 0x18046AD00
	internal bool UseOptionR() { }
	// RVA: 0x46AD10 Offset: 0x469510 VA: 0x18046AD10
	internal RegexNode ReverseLeft() { }
	// RVA: 0x46ADE0 Offset: 0x4695E0 VA: 0x18046ADE0
	internal void MakeRep(int type, int min, int max) { }
	// RVA: 0x46ADF0 Offset: 0x4695F0 VA: 0x18046ADF0
	internal RegexNode Reduce() { }
	// RVA: 0x46AEA0 Offset: 0x4696A0 VA: 0x18046AEA0
	internal RegexNode StripEnation(int emptyType) { }
	// RVA: 0x46AF70 Offset: 0x469770 VA: 0x18046AF70
	internal RegexNode ReduceGroup() { }
	// RVA: 0x46B040 Offset: 0x469840 VA: 0x18046B040
	internal RegexNode ReduceRep() { }
	// RVA: 0x46B1E0 Offset: 0x4699E0 VA: 0x18046B1E0
	internal RegexNode ReduceSet() { }
	// RVA: 0x46B5A0 Offset: 0x469DA0 VA: 0x18046B5A0
	internal RegexNode ReduceAlternation() { }
	// RVA: 0x46BA10 Offset: 0x46A210 VA: 0x18046BA10
	internal RegexNode ReduceConcatenation() { }
	// RVA: 0x46BD90 Offset: 0x46A590 VA: 0x18046BD90
	internal RegexNode MakeQuantifier(bool lazy, int min, int max) { }
	// RVA: 0x46BEC0 Offset: 0x46A6C0 VA: 0x18046BEC0
	internal void AddChild(RegexNode newChild) { }
	// RVA: 0x46C070 Offset: 0x46A870 VA: 0x18046C070
	internal RegexNode Child(int i) { }
	// RVA: 0x46C110 Offset: 0x46A910 VA: 0x18046C110
	internal int ChildCount() { }
}

// Namespace: System.Text.RegularExpressions
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum RegexOptions // TypeDefIndex: 1214
{
	// Fields
	public int value__; // 0x0
	public const RegexOptions None = 0; // 0x0
	public const RegexOptions IgnoreCase = 1; // 0x0
	public const RegexOptions Multiline = 2; // 0x0
	public const RegexOptions ExplicitCapture = 4; // 0x0
	public const RegexOptions Compiled = 8; // 0x0
	public const RegexOptions Singleline = 16; // 0x0
	public const RegexOptions IgnorePatternWhitespace = 32; // 0x0
	public const RegexOptions RightToLeft = 64; // 0x0
	public const RegexOptions ECMAScript = 256; // 0x0
	public const RegexOptions CultureInvariant = 512; // 0x0
}

// Namespace: System.Text.RegularExpressions
internal sealed class RegexParser // TypeDefIndex: 1215
{
	// Fields
	internal RegexNode _stack; // 0x10
	internal RegexNode _group; // 0x18
	internal RegexNode _alternation; // 0x20
	internal RegexNode _concatenation; // 0x28
	internal RegexNode _unit; // 0x30
	internal string _pattern; // 0x38
	internal int _currentPos; // 0x40
	internal CultureInfo _culture; // 0x48
	internal int _autocap; // 0x50
	internal int _capcount; // 0x54
	internal int _captop; // 0x58
	internal int _capsize; // 0x5C
	internal Hashtable _caps; // 0x60
	internal Hashtable _capnames; // 0x68
	internal int[] _capnumlist; // 0x70
	internal List<string> _capnamelist; // 0x78
	internal RegexOptions _options; // 0x80
	internal List<RegexOptions> _optionsStack; // 0x88
	internal bool _ignoreNextParen; // 0x90
	internal static readonly byte[] _category; // 0x0

	// Methods
	// RVA: 0x46C120 Offset: 0x46A920 VA: 0x18046C120
	internal static RegexTree Parse(string re, RegexOptions op) { }
	// RVA: 0x46C560 Offset: 0x46AD60 VA: 0x18046C560
	private void .ctor(CultureInfo culture) { }
	// RVA: 0x46C6F0 Offset: 0x46AEF0 VA: 0x18046C6F0
	internal void SetPattern(string Re) { }
	// RVA: 0x46C7B0 Offset: 0x46AFB0 VA: 0x18046C7B0
	internal void Reset(RegexOptions topopts) { }
	// RVA: 0x46C8E0 Offset: 0x46B0E0 VA: 0x18046C8E0
	internal RegexNode ScanRegex() { }
	// RVA: 0x46D150 Offset: 0x46B950 VA: 0x18046D150
	internal RegexCharClass ScanCharClass(bool caseInsensitive) { }
	// RVA: 0x46D160 Offset: 0x46B960 VA: 0x18046D160
	internal RegexCharClass ScanCharClass(bool caseInsensitive, bool scanOnly) { }
	// RVA: 0x46DA10 Offset: 0x46C210 VA: 0x18046DA10
	internal RegexNode ScanGroupOpen() { }
	// RVA: 0x46E690 Offset: 0x46CE90 VA: 0x18046E690
	internal void ScanBlank() { }
	// RVA: 0x46EAB0 Offset: 0x46D2B0 VA: 0x18046EAB0
	internal RegexNode ScanBackslash() { }
	// RVA: 0x46EFD0 Offset: 0x46D7D0 VA: 0x18046EFD0
	internal RegexNode ScanBasicBackslash() { }
	// RVA: 0x46F650 Offset: 0x46DE50 VA: 0x18046F650
	internal string ScanCapname() { }
	// RVA: 0x46F750 Offset: 0x46DF50 VA: 0x18046F750
	internal char ScanOctal() { }
	// RVA: 0x46F7E0 Offset: 0x46DFE0 VA: 0x18046F7E0
	internal int ScanDecimal() { }
	// RVA: 0x46F8F0 Offset: 0x46E0F0 VA: 0x18046F8F0
	internal char ScanHex(int c) { }
	// RVA: 0x46FA40 Offset: 0x46E240 VA: 0x18046FA40
	internal static int HexDigit(char ch) { }
	// RVA: 0x46FA70 Offset: 0x46E270 VA: 0x18046FA70
	internal char ScanControl() { }
	// RVA: 0x46FB80 Offset: 0x46E380 VA: 0x18046FB80
	internal bool IsOnlyTopOption(RegexOptions option) { }
	// RVA: 0x46FBA0 Offset: 0x46E3A0 VA: 0x18046FBA0
	internal void ScanOptions() { }
	// RVA: 0x46FCF0 Offset: 0x46E4F0 VA: 0x18046FCF0
	internal char ScanCharEscape() { }
	// RVA: 0x470140 Offset: 0x46E940 VA: 0x180470140
	internal string ParseProperty() { }
	// RVA: 0x470340 Offset: 0x46EB40 VA: 0x180470340
	internal int TypeFromCode(char ch) { }
	// RVA: 0x4703C0 Offset: 0x46EBC0 VA: 0x1804703C0
	internal static RegexOptions OptionFromCode(char ch) { }
	// RVA: 0x470460 Offset: 0x46EC60 VA: 0x180470460
	internal void CountCaptures() { }
	// RVA: 0x470820 Offset: 0x46F020 VA: 0x180470820
	internal void NoteCaptureSlot(int i, int pos) { }
	// RVA: 0x470960 Offset: 0x46F160 VA: 0x180470960
	internal void NoteCaptureName(string name, int pos) { }
	// RVA: 0x470AC0 Offset: 0x46F2C0 VA: 0x180470AC0
	internal void AssignNameSlots() { }
	// RVA: 0x471280 Offset: 0x46FA80 VA: 0x180471280
	internal int CaptureSlotFromName(string capname) { }
	// RVA: 0x471340 Offset: 0x46FB40 VA: 0x180471340
	internal bool IsCaptureSlot(int i) { }
	// RVA: 0x471420 Offset: 0x46FC20 VA: 0x180471420
	internal bool IsCaptureName(string capname) { }
	// RVA: 0x471440 Offset: 0x46FC40 VA: 0x180471440
	internal bool UseOptionN() { }
	// RVA: 0x471450 Offset: 0x46FC50 VA: 0x180471450
	internal bool UseOptionI() { }
	// RVA: 0x471460 Offset: 0x46FC60 VA: 0x180471460
	internal bool UseOptionM() { }
	// RVA: 0x471470 Offset: 0x46FC70 VA: 0x180471470
	internal bool UseOptionS() { }
	// RVA: 0x471480 Offset: 0x46FC80 VA: 0x180471480
	internal bool UseOptionX() { }
	// RVA: 0x471490 Offset: 0x46FC90 VA: 0x180471490
	internal bool UseOptionE() { }
	// RVA: 0x4714A0 Offset: 0x46FCA0 VA: 0x1804714A0
	internal static bool IsSpecial(char ch) { }
	// RVA: 0x471570 Offset: 0x46FD70 VA: 0x180471570
	internal static bool IsStopperX(char ch) { }
	// RVA: 0x471640 Offset: 0x46FE40 VA: 0x180471640
	internal static bool IsQuantifier(char ch) { }
	// RVA: 0x471710 Offset: 0x46FF10 VA: 0x180471710
	internal bool IsTrueQuantifier() { }
	// RVA: 0x4718D0 Offset: 0x4700D0 VA: 0x1804718D0
	internal static bool IsSpace(char ch) { }
	// RVA: 0x4719A0 Offset: 0x4701A0 VA: 0x1804719A0
	internal void AddConcatenate(int pos, int cch, bool isReplacement) { }
	// RVA: 0x471BD0 Offset: 0x4703D0 VA: 0x180471BD0
	internal void PushGroup() { }
	// RVA: 0x471C20 Offset: 0x470420 VA: 0x180471C20
	internal void PopGroup() { }
	// RVA: 0x471D20 Offset: 0x470520 VA: 0x180471D20
	internal bool EmptyStack() { }
	// RVA: 0x471D30 Offset: 0x470530 VA: 0x180471D30
	internal void StartGroup(RegexNode openGroup) { }
	// RVA: 0x471DF0 Offset: 0x4705F0 VA: 0x180471DF0
	internal void AddAlternate() { }
	// RVA: 0x471ED0 Offset: 0x4706D0 VA: 0x180471ED0
	internal void AddConcatenate() { }
	// RVA: 0x471F10 Offset: 0x470710 VA: 0x180471F10
	internal void AddConcatenate(bool lazy, int min, int max) { }
	// RVA: 0x472080 Offset: 0x470880 VA: 0x180472080
	internal void AddUnitOne(char ch) { }
	// RVA: 0x472160 Offset: 0x470960 VA: 0x180472160
	internal void AddUnitNotone(char ch) { }
	// RVA: 0x472240 Offset: 0x470A40 VA: 0x180472240
	internal void AddUnitSet(string cc) { }
	// RVA: 0x4722F0 Offset: 0x470AF0 VA: 0x1804722F0
	internal void AddUnitType(int type) { }
	// RVA: 0x472390 Offset: 0x470B90 VA: 0x180472390
	internal void AddGroup() { }
	// RVA: 0x472500 Offset: 0x470D00 VA: 0x180472500
	internal void PushOptions() { }
	// RVA: 0x4725F0 Offset: 0x470DF0 VA: 0x1804725F0
	internal void PopOptions() { }
	// RVA: 0x4726A0 Offset: 0x470EA0 VA: 0x1804726A0
	internal bool EmptyOptionsStack() { }
	// RVA: 0x4726D0 Offset: 0x470ED0 VA: 0x1804726D0
	internal void PopKeepOptions() { }
	// RVA: 0x472760 Offset: 0x470F60 VA: 0x180472760
	internal ArgumentException MakeException(string message) { }
	// RVA: 0x4728E0 Offset: 0x4710E0 VA: 0x1804728E0
	internal char MoveRightGetChar() { }
	// RVA: 0x472910 Offset: 0x471110 VA: 0x180472910
	internal void MoveRight() { }
	// RVA: 0x472920 Offset: 0x471120 VA: 0x180472920
	internal void MoveRight(int i) { }
	// RVA: 0x472930 Offset: 0x471130 VA: 0x180472930
	internal void MoveLeft() { }
	// RVA: 0x472940 Offset: 0x471140 VA: 0x180472940
	internal char CharAt(int i) { }
	// RVA: 0x472960 Offset: 0x471160 VA: 0x180472960
	internal char RightChar() { }
	// RVA: 0x472990 Offset: 0x471190 VA: 0x180472990
	internal char RightChar(int i) { }
	// RVA: 0x4729C0 Offset: 0x4711C0 VA: 0x1804729C0
	internal int CharsRight() { }
	// RVA: 0x4729E0 Offset: 0x4711E0 VA: 0x1804729E0
	private static void .cctor() { }
}

// Namespace: System.Text.RegularExpressions
public abstract class RegexRunner // TypeDefIndex: 1216
{
	// Fields
	protected internal int runtextbeg; // 0x10
	protected internal int runtextend; // 0x14
	protected internal int runtextstart; // 0x18
	protected internal string runtext; // 0x20
	protected internal int runtextpos; // 0x28
	protected internal int[] runtrack; // 0x30
	protected internal int runtrackpos; // 0x38
	protected internal int[] runstack; // 0x40
	protected internal int runstackpos; // 0x48
	protected internal int[] runcrawl; // 0x50
	protected internal int runcrawlpos; // 0x58
	protected internal int runtrackcount; // 0x5C
	protected internal Match runmatch; // 0x60
	protected internal Regex runregex; // 0x68
	private int timeout; // 0x70
	private bool ignoreTimeout; // 0x74
	private int timeoutOccursAt; // 0x78
	private int timeoutChecksToSkip; // 0x7C

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected internal void .ctor() { }
	// RVA: 0x58C760 Offset: 0x58AF60 VA: 0x18058C760
	protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout) { }
	// RVA: 0x58CB00 Offset: 0x58B300 VA: 0x18058CB00
	private void StartTimeoutWatch() { }
	// RVA: 0x58CB60 Offset: 0x58B360 VA: 0x18058CB60
	protected void CheckTimeout() { }
	// RVA: 0x58CCE0 Offset: 0x58B4E0 VA: 0x18058CCE0
	private void DoCheckTimeout() { }
	// RVA: -1 Offset: -1 Slot: 4
	protected abstract void Go() { }
	// RVA: -1 Offset: -1 Slot: 5
	protected abstract bool FindFirstChar() { }
	// RVA: -1 Offset: -1 Slot: 6
	protected abstract void InitTrackCount() { }
	// RVA: 0x58CE40 Offset: 0x58B640 VA: 0x18058CE40
	private void InitMatch() { }
	// RVA: 0x58D120 Offset: 0x58B920 VA: 0x18058D120
	private Match TidyMatch(bool quick) { }
	// RVA: 0x58D170 Offset: 0x58B970 VA: 0x18058D170
	protected void EnsureStorage() { }
	// RVA: 0x58D320 Offset: 0x58BB20 VA: 0x18058D320
	protected bool IsBoundary(int index, int startpos, int endpos) { }
	// RVA: 0x58D450 Offset: 0x58BC50 VA: 0x18058D450
	protected bool IsECMABoundary(int index, int startpos, int endpos) { }
	// RVA: 0x58D580 Offset: 0x58BD80 VA: 0x18058D580
	protected void DoubleTrack() { }
	// RVA: 0x58D660 Offset: 0x58BE60 VA: 0x18058D660
	protected void DoubleStack() { }
	// RVA: 0x58D740 Offset: 0x58BF40 VA: 0x18058D740
	protected void DoubleCrawl() { }
	// RVA: 0x58D820 Offset: 0x58C020 VA: 0x18058D820
	protected void Crawl(int i) { }
	// RVA: 0x58D940 Offset: 0x58C140 VA: 0x18058D940
	protected int Popcrawl() { }
	// RVA: 0x58D980 Offset: 0x58C180 VA: 0x18058D980
	protected int Crawlpos() { }
	// RVA: 0x58D9A0 Offset: 0x58C1A0 VA: 0x18058D9A0
	protected void Capture(int capnum, int start, int end) { }
	// RVA: 0x58DA30 Offset: 0x58C230 VA: 0x18058DA30
	protected void TransferCapture(int capnum, int uncapnum, int start, int end) { }
	// RVA: 0x58DB50 Offset: 0x58C350 VA: 0x18058DB50
	protected void Uncapture() { }
	// RVA: 0x58DBB0 Offset: 0x58C3B0 VA: 0x18058DBB0
	protected bool IsMatched(int cap) { }
	// RVA: 0x58DBE0 Offset: 0x58C3E0 VA: 0x18058DBE0
	protected int MatchIndex(int cap) { }
	// RVA: 0x58DC10 Offset: 0x58C410 VA: 0x18058DC10
	protected int MatchLength(int cap) { }
}

// Namespace: System.Text.RegularExpressions
public abstract class RegexRunnerFactory // TypeDefIndex: 1217
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	protected internal abstract RegexRunner CreateInstance() { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class RegexTree // TypeDefIndex: 1218
{
	// Fields
	internal RegexNode _root; // 0x10
	internal Hashtable _caps; // 0x18
	internal int[] _capnumlist; // 0x20
	internal Hashtable _capnames; // 0x28
	internal string[] _capslist; // 0x30
	internal RegexOptions _options; // 0x38
	internal int _captop; // 0x3C

	// Methods
	// RVA: 0x58DC40 Offset: 0x58C440 VA: 0x18058DC40
	internal void .ctor(RegexNode root, Hashtable caps, int[] capnumlist, int captop, Hashtable capnames, string[] capslist, RegexOptions opts) { }
}

// Namespace: System.Text.RegularExpressions
internal sealed class RegexWriter // TypeDefIndex: 1219
{
	// Fields
	internal int[] _intStack; // 0x10
	internal int _depth; // 0x18
	internal int[] _emitted; // 0x20
	internal int _curpos; // 0x28
	internal Dictionary<string, int> _stringhash; // 0x30
	internal List<string> _stringtable; // 0x38
	internal bool _counting; // 0x40
	internal int _count; // 0x44
	internal int _trackcount; // 0x48
	internal Hashtable _caps; // 0x50

	// Methods
	// RVA: 0x58DC70 Offset: 0x58C470 VA: 0x18058DC70
	internal static RegexCode Write(RegexTree t) { }
	// RVA: 0x58DDF0 Offset: 0x58C5F0 VA: 0x18058DDF0
	private void .ctor() { }
	// RVA: 0x58DEF0 Offset: 0x58C6F0 VA: 0x18058DEF0
	internal void PushInt(int I) { }
	// RVA: 0x466530 Offset: 0x464D30 VA: 0x180466530
	internal bool EmptyStack() { }
	// RVA: 0x466540 Offset: 0x464D40 VA: 0x180466540
	internal int PopInt() { }
	// RVA: 0x58DFF0 Offset: 0x58C7F0 VA: 0x18058DFF0
	internal void PatchJump(int Offset, int jumpDest) { }
	// RVA: 0x58E030 Offset: 0x58C830 VA: 0x18058E030
	internal void Emit(int op) { }
	// RVA: 0x58E0E0 Offset: 0x58C8E0 VA: 0x18058E0E0
	internal void Emit(int op, int opd1) { }
	// RVA: 0x58E1C0 Offset: 0x58C9C0 VA: 0x18058E1C0
	internal void Emit(int op, int opd1, int opd2) { }
	// RVA: 0x58E2E0 Offset: 0x58CAE0 VA: 0x18058E2E0
	internal int StringCode(string str) { }
	// RVA: 0x58E510 Offset: 0x58CD10 VA: 0x18058E510
	internal ArgumentException MakeException(string message) { }
	// RVA: 0x58E5B0 Offset: 0x58CDB0 VA: 0x18058E5B0
	internal int MapCapnum(int capnum) { }
	// RVA: 0x58E6B0 Offset: 0x58CEB0 VA: 0x18058E6B0
	internal RegexCode RegexCodeFromRegexTree(RegexTree tree) { }
	// RVA: 0x58EF10 Offset: 0x58D710 VA: 0x18058EF10
	internal void EmitFragment(int nodetype, RegexNode node, int CurIndex) { }
}

// Namespace: System.Diagnostics
public class Stopwatch // TypeDefIndex: 1220
{
	// Fields
	public static readonly long Frequency; // 0x0
	public static readonly bool IsHighResolution; // 0x8
	private long elapsed; // 0x10
	private long started; // 0x18
	private bool is_running; // 0x20

	// Properties
	public TimeSpan Elapsed { get; }
	public long ElapsedMilliseconds { get; }
	public long ElapsedTicks { get; }

	// Methods
	// RVA: 0x4A05D0 Offset: 0x49EDD0 VA: 0x1804A05D0
	public static long GetTimestamp() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x599CA0 Offset: 0x5984A0 VA: 0x180599CA0
	public TimeSpan get_Elapsed() { }
	// RVA: 0x599E00 Offset: 0x598600 VA: 0x180599E00
	public long get_ElapsedMilliseconds() { }
	// RVA: 0x599F60 Offset: 0x598760 VA: 0x180599F60
	public long get_ElapsedTicks() { }
	// RVA: 0x59A010 Offset: 0x598810 VA: 0x18059A010
	public void Reset() { }
	// RVA: 0x59A020 Offset: 0x598820 VA: 0x18059A020
	public void Start() { }
	// RVA: 0x59A0C0 Offset: 0x5988C0 VA: 0x18059A0C0
	public void Stop() { }
	// RVA: 0x59A180 Offset: 0x598980 VA: 0x18059A180
	private static void .cctor() { }
}

// Namespace: System.ComponentModel
[Serializable]
public class Win32Exception : ExternalException, ISerializable // TypeDefIndex: 1221
{
	// Fields
	private readonly int nativeErrorCode; // 0x88
	private static bool s_ErrorMessagesInitialized; // 0x0
	private static Dictionary<int, string> s_ErrorMessage; // 0x8

	// Methods
	// RVA: 0x645C00 Offset: 0x644400 VA: 0x180645C00
	public void .ctor() { }
	// RVA: 0x645CE0 Offset: 0x6444E0 VA: 0x180645CE0
	public void .ctor(int error) { }
	// RVA: 0x645DA0 Offset: 0x6445A0 VA: 0x180645DA0
	public void .ctor(int error, string message) { }
	// RVA: 0x645DE0 Offset: 0x6445E0 VA: 0x180645DE0
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x645EA0 Offset: 0x6446A0 VA: 0x180645EA0 Slot: 10
	public override void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x645F90 Offset: 0x644790 VA: 0x180645F90
	internal static string GetErrorMessage(int error) { }
	// RVA: 0x646150 Offset: 0x644950 VA: 0x180646150
	private static void InitializeErrorMessages() { }
	// RVA: 0x6463C0 Offset: 0x644BC0 VA: 0x1806463C0
	public static void InitializeErrorMessages1() { }
	// RVA: 0x647330 Offset: 0x645B30 VA: 0x180647330
	private static void .cctor() { }
}

// Namespace: System.Net
[Serializable]
public abstract class EndPoint // TypeDefIndex: 1222
{
	// Properties
	public virtual AddressFamily AddressFamily { get; }

	// Methods
	// RVA: 0x453350 Offset: 0x451B50 VA: 0x180453350 Slot: 4
	public virtual AddressFamily get_AddressFamily() { }
	// RVA: 0x453390 Offset: 0x451B90 VA: 0x180453390 Slot: 5
	public virtual SocketAddress Serialize() { }
	// RVA: 0x4533D0 Offset: 0x451BD0 VA: 0x1804533D0 Slot: 6
	public virtual EndPoint Create(SocketAddress socketAddress) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: System.Net
[Serializable]
public class IPAddress // TypeDefIndex: 1223
{
	// Fields
	public static readonly IPAddress Any; // 0x0
	public static readonly IPAddress Loopback; // 0x8
	public static readonly IPAddress Broadcast; // 0x10
	public static readonly IPAddress None; // 0x18
	internal const long LoopbackMask = 255; // 0x0
	internal long m_Address; // 0x10
	internal string m_ToString; // 0x18
	public static readonly IPAddress IPv6Any; // 0x20
	public static readonly IPAddress IPv6Loopback; // 0x28
	public static readonly IPAddress IPv6None; // 0x30
	private AddressFamily m_Family; // 0x20
	private ushort[] m_Numbers; // 0x28
	private long m_ScopeId; // 0x30
	private int m_HashCode; // 0x38
	internal const int IPv4AddressBytes = 4; // 0x0
	internal const int IPv6AddressBytes = 16; // 0x0
	internal const int NumberOfLabels = 8; // 0x0

	// Properties
	public long ScopeId { get; }
	internal bool IsBroadcast { get; }

	// Methods
	// RVA: 0x453C90 Offset: 0x452490 VA: 0x180453C90
	public void .ctor(long newAddress) { }
	// RVA: 0x453D60 Offset: 0x452560 VA: 0x180453D60
	public void .ctor(byte[] address, long scopeid) { }
	// RVA: 0x453F90 Offset: 0x452790 VA: 0x180453F90
	private void .ctor(ushort[] address, uint scopeid) { }
	// RVA: 0x454040 Offset: 0x452840 VA: 0x180454040
	internal void .ctor(int newAddress) { }
	// RVA: 0x4540E0 Offset: 0x4528E0 VA: 0x1804540E0
	public static bool TryParse(string ipString, out IPAddress address) { }
	// RVA: 0x454190 Offset: 0x452990 VA: 0x180454190
	public static IPAddress Parse(string ipString) { }
	// RVA: 0x454230 Offset: 0x452A30 VA: 0x180454230
	private static IPAddress InternalParse(string ipString, bool tryParse) { }
	// RVA: 0x454650 Offset: 0x452E50 VA: 0x180454650
	public byte[] GetAddressBytes() { }
	// RVA: 0x454840 Offset: 0x453040 VA: 0x180454840
	public long get_ScopeId() { }
	// RVA: 0x4548F0 Offset: 0x4530F0 VA: 0x1804548F0 Slot: 3
	public override string ToString() { }
	// RVA: 0x454B10 Offset: 0x453310 VA: 0x180454B10
	internal bool get_IsBroadcast() { }
	// RVA: 0x454BD0 Offset: 0x4533D0 VA: 0x180454BD0
	internal bool Equals(object comparandObj, bool compareScopeId) { }
	// RVA: 0x454D30 Offset: 0x453530 VA: 0x180454D30 Slot: 0
	public override bool Equals(object comparand) { }
	// RVA: 0x454EA0 Offset: 0x4536A0 VA: 0x180454EA0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x454FA0 Offset: 0x4537A0 VA: 0x180454FA0
	public IPAddress MapToIPv6() { }
	// RVA: 0x455100 Offset: 0x453900 VA: 0x180455100
	private static void .cctor() { }
}

// Namespace: System.Net
[Serializable]
public class IPEndPoint : EndPoint // TypeDefIndex: 1224
{
	// Fields
	public const int MinPort = 0; // 0x0
	public const int MaxPort = 65535; // 0x0
	private IPAddress m_Address; // 0x10
	private int m_Port; // 0x18
	internal const int AnyPort = 0; // 0x0
	internal static IPEndPoint Any; // 0x0
	internal static IPEndPoint IPv6Any; // 0x8

	// Properties
	public override AddressFamily AddressFamily { get; }

	// Methods
	// RVA: 0x455320 Offset: 0x453B20 VA: 0x180455320 Slot: 4
	public override AddressFamily get_AddressFamily() { }
	// RVA: 0x455340 Offset: 0x453B40 VA: 0x180455340
	public void .ctor(IPAddress address, int port) { }
	// RVA: 0x455460 Offset: 0x453C60 VA: 0x180455460 Slot: 3
	public override string ToString() { }
	// RVA: 0x455580 Offset: 0x453D80 VA: 0x180455580 Slot: 5
	public override SocketAddress Serialize() { }
	// RVA: 0x455680 Offset: 0x453E80 VA: 0x180455680 Slot: 6
	public override EndPoint Create(SocketAddress socketAddress) { }
	// RVA: 0x455AD0 Offset: 0x4542D0 VA: 0x180455AD0 Slot: 0
	public override bool Equals(object comparand) { }
	// RVA: 0x455CE0 Offset: 0x4544E0 VA: 0x180455CE0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x455D20 Offset: 0x454520 VA: 0x180455D20
	private static void .cctor() { }
}

// Namespace: System.Net
public class IPHostEntry // TypeDefIndex: 1225
{
	// Fields
	private string hostName; // 0x10
	private string[] aliases; // 0x18
	private IPAddress[] addressList; // 0x20
	internal bool isTrustedHost; // 0x28

	// Methods
	// RVA: 0x455E40 Offset: 0x454640 VA: 0x180455E40
	public void .ctor() { }
}

// Namespace: System.Net
internal static class NclUtilities // TypeDefIndex: 1226
{
	// Methods
	// RVA: 0x45A650 Offset: 0x458E50 VA: 0x18045A650
	internal static bool IsFatal(Exception exception) { }
}

// Namespace: System.Net
internal static class ValidationHelper // TypeDefIndex: 1227
{
	// Fields
	public static string[] EmptyArray; // 0x0
	internal static readonly char[] InvalidMethodChars; // 0x8
	internal static readonly char[] InvalidParamChars; // 0x10

	// Methods
	// RVA: 0x645AE0 Offset: 0x6442E0 VA: 0x180645AE0
	public static bool ValidateTcpPort(int port) { }
	// RVA: 0x645B00 Offset: 0x644300 VA: 0x180645B00
	private static void .cctor() { }
}

// Namespace: System.Net
internal static class ExceptionHelper // TypeDefIndex: 1228
{
	// Properties
	internal static NotImplementedException MethodNotImplementedException { get; }
	internal static NotImplementedException PropertyNotImplementedException { get; }

	// Methods
	// RVA: 0x453410 Offset: 0x451C10 VA: 0x180453410
	internal static NotImplementedException get_MethodNotImplementedException() { }
	// RVA: 0x4534B0 Offset: 0x451CB0 VA: 0x1804534B0
	internal static NotImplementedException get_PropertyNotImplementedException() { }
}

// Namespace: System.Net
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public class SocketAddress // TypeDefIndex: 1229
{
	// Fields
	internal int m_Size; // 0x10
	internal byte[] m_Buffer; // 0x18
	private bool m_changed; // 0x20
	private int m_hash; // 0x24

	// Properties
	public AddressFamily Family { get; }
	public byte Item { get; }

	// Methods
	// RVA: 0x597D30 Offset: 0x596530 VA: 0x180597D30
	public AddressFamily get_Family() { }
	// RVA: 0x597D90 Offset: 0x596590 VA: 0x180597D90
	public byte get_Item(int offset) { }
	// RVA: 0x597E60 Offset: 0x596660 VA: 0x180597E60
	public void .ctor(AddressFamily family, int size) { }
	// RVA: 0x597F80 Offset: 0x596780 VA: 0x180597F80
	internal void .ctor(IPAddress ipAddress) { }
	// RVA: 0x5983B0 Offset: 0x596BB0 VA: 0x1805983B0
	internal void .ctor(IPAddress ipaddress, int port) { }
	// RVA: 0x598430 Offset: 0x596C30 VA: 0x180598430
	internal IPAddress GetIPAddress() { }
	// RVA: 0x5986F0 Offset: 0x596EF0 VA: 0x1805986F0
	internal IPEndPoint GetIPEndPoint() { }
	// RVA: 0x5987F0 Offset: 0x596FF0 VA: 0x1805987F0 Slot: 0
	public override bool Equals(object comparand) { }
	// RVA: 0x598900 Offset: 0x597100 VA: 0x180598900 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x598A70 Offset: 0x597270 VA: 0x180598A70 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Net
internal static class Logging // TypeDefIndex: 1230
{
	// Fields
	internal static readonly bool On; // 0xAC1EB
}

// Namespace: System.Net
public static class Dns // TypeDefIndex: 1231
{
	// Methods
	// RVA: 0x451480 Offset: 0x44FC80 VA: 0x180451480
	private static bool GetHostByName_internal(string host, out string h_name, out string[] h_aliases, out string[] h_addr_list, int hint) { }
	// RVA: 0x451490 Offset: 0x44FC90 VA: 0x180451490
	private static bool GetHostByAddr_internal(string addr, out string h_name, out string[] h_aliases, out string[] h_addr_list, int hint) { }
	// RVA: 0x4514A0 Offset: 0x44FCA0 VA: 0x1804514A0
	private static void Error_11001(string hostName) { }
	// RVA: 0x451510 Offset: 0x44FD10 VA: 0x180451510
	private static IPHostEntry hostent_to_IPHostEntry(string originalHostName, string h_name, string[] h_aliases, string[] h_addrlist) { }
	// RVA: 0x4517A0 Offset: 0x44FFA0 VA: 0x1804517A0
	private static IPHostEntry GetHostByAddressFromString(string address, bool parse) { }
	// RVA: 0x4518F0 Offset: 0x4500F0 VA: 0x1804518F0
	public static IPHostEntry GetHostEntry(string hostNameOrAddress) { }
	// RVA: 0x451C10 Offset: 0x450410 VA: 0x180451C10
	public static IPHostEntry GetHostEntry(IPAddress address) { }
	// RVA: 0x451DD0 Offset: 0x4505D0 VA: 0x180451DD0
	public static IPAddress[] GetHostAddresses(string hostNameOrAddress) { }
	[ObsoleteAttribute] // RVA: 0xDA120 Offset: 0xD9520 VA: 0x1800DA120
	// RVA: 0x452100 Offset: 0x450900 VA: 0x180452100
	public static IPHostEntry GetHostByName(string hostName) { }
}

// Namespace: System.Net
internal struct IPv6AddressFormatter // TypeDefIndex: 1232
{
	// Fields
	private ushort[] address; // 0x0
	private long scopeId; // 0x8

	// Methods
	// RVA: 0x5CF0 Offset: 0x50F0 VA: 0x180005CF0
	public void .ctor(ushort[] addr, long scopeId) { }
	// RVA: 0x456AC0 Offset: 0x4552C0 VA: 0x180456AC0
	private static ushort SwapUShort(ushort number) { }
	// RVA: 0x17A00 Offset: 0x16E00 VA: 0x180017A00
	private uint AsIPv4Int() { }
	// RVA: 0x17A60 Offset: 0x16E60 VA: 0x180017A60
	private bool IsIPv4Compatible() { }
	// RVA: 0x17A70 Offset: 0x16E70 VA: 0x180017A70
	private bool IsIPv4Mapped() { }
	// RVA: 0x17A80 Offset: 0x16E80 VA: 0x180017A80 Slot: 3
	public override string ToString() { }
}

// Namespace: System.Net.Sockets
[Serializable]
public class SocketException : Win32Exception // TypeDefIndex: 1233
{
	// Fields
	private EndPoint m_EndPoint; // 0x90

	// Properties
	public override string Message { get; }

	// Methods
	// RVA: 0x5997A0 Offset: 0x597FA0 VA: 0x1805997A0
	private static int WSAGetLastError_internal() { }
	// RVA: 0x5997D0 Offset: 0x597FD0 VA: 0x1805997D0
	public void .ctor() { }
	// RVA: 0x599890 Offset: 0x598090 VA: 0x180599890
	internal void .ctor(int error, string message) { }
	// RVA: 0x599950 Offset: 0x598150 VA: 0x180599950
	public void .ctor(int errorCode) { }
	// RVA: 0x5999F0 Offset: 0x5981F0 VA: 0x1805999F0
	internal void .ctor(SocketError socketError) { }
	// RVA: 0x599A90 Offset: 0x598290 VA: 0x180599A90
	protected void .ctor(SerializationInfo serializationInfo, StreamingContext streamingContext) { }
	// RVA: 0x599BD0 Offset: 0x5983D0 VA: 0x180599BD0 Slot: 5
	public override string get_Message() { }
}

// Namespace: System.Net.Sockets
public enum AddressFamily // TypeDefIndex: 1234
{
	// Fields
	public int value__; // 0x0
	public const AddressFamily Unknown = -1; // 0x0
	public const AddressFamily Unspecified = 0; // 0x0
	public const AddressFamily Unix = 1; // 0x0
	public const AddressFamily InterNetwork = 2; // 0x0
	public const AddressFamily ImpLink = 3; // 0x0
	public const AddressFamily Pup = 4; // 0x0
	public const AddressFamily Chaos = 5; // 0x0
	public const AddressFamily NS = 6; // 0x0
	public const AddressFamily Ipx = 6; // 0x0
	public const AddressFamily Iso = 7; // 0x0
	public const AddressFamily Osi = 7; // 0x0
	public const AddressFamily Ecma = 8; // 0x0
	public const AddressFamily DataKit = 9; // 0x0
	public const AddressFamily Ccitt = 10; // 0x0
	public const AddressFamily Sna = 11; // 0x0
	public const AddressFamily DecNet = 12; // 0x0
	public const AddressFamily DataLink = 13; // 0x0
	public const AddressFamily Lat = 14; // 0x0
	public const AddressFamily HyperChannel = 15; // 0x0
	public const AddressFamily AppleTalk = 16; // 0x0
	public const AddressFamily NetBios = 17; // 0x0
	public const AddressFamily VoiceView = 18; // 0x0
	public const AddressFamily FireFox = 19; // 0x0
	public const AddressFamily Banyan = 21; // 0x0
	public const AddressFamily Atm = 22; // 0x0
	public const AddressFamily InterNetworkV6 = 23; // 0x0
	public const AddressFamily Cluster = 24; // 0x0
	public const AddressFamily Ieee12844 = 25; // 0x0
	public const AddressFamily Irda = 26; // 0x0
	public const AddressFamily NetworkDesigners = 28; // 0x0
	public const AddressFamily Max = 29; // 0x0
}

// Namespace: System.Net.Sockets
public enum IPProtectionLevel // TypeDefIndex: 1235
{
	// Fields
	public int value__; // 0x0
	public const IPProtectionLevel Unspecified = -1; // 0x0
	public const IPProtectionLevel Unrestricted = 10; // 0x0
	public const IPProtectionLevel EdgeRestricted = 20; // 0x0
	public const IPProtectionLevel Restricted = 30; // 0x0
}

// Namespace: System.Net.Sockets
public class LingerOption // TypeDefIndex: 1236
{
	// Fields
	private bool enabled; // 0x10
	private int lingerTime; // 0x14

	// Methods
	// RVA: 0x459860 Offset: 0x458060 VA: 0x180459860
	public void .ctor(bool enable, int seconds) { }
}

// Namespace: System.Net.Sockets
public class MulticastOption // TypeDefIndex: 1237
{}

// Namespace: System.Net.Sockets
public enum ProtocolType // TypeDefIndex: 1238
{
	// Fields
	public int value__; // 0x0
	public const ProtocolType IP = 0; // 0x0
	public const ProtocolType IPv6HopByHopOptions = 0; // 0x0
	public const ProtocolType Icmp = 1; // 0x0
	public const ProtocolType Igmp = 2; // 0x0
	public const ProtocolType Ggp = 3; // 0x0
	public const ProtocolType IPv4 = 4; // 0x0
	public const ProtocolType Tcp = 6; // 0x0
	public const ProtocolType Pup = 12; // 0x0
	public const ProtocolType Udp = 17; // 0x0
	public const ProtocolType Idp = 22; // 0x0
	public const ProtocolType IPv6 = 41; // 0x0
	public const ProtocolType IPv6RoutingHeader = 43; // 0x0
	public const ProtocolType IPv6FragmentHeader = 44; // 0x0
	public const ProtocolType IPSecEncapsulatingSecurityPayload = 50; // 0x0
	public const ProtocolType IPSecAuthenticationHeader = 51; // 0x0
	public const ProtocolType IcmpV6 = 58; // 0x0
	public const ProtocolType IPv6NoNextHeader = 59; // 0x0
	public const ProtocolType IPv6DestinationOptions = 60; // 0x0
	public const ProtocolType ND = 77; // 0x0
	public const ProtocolType Raw = 255; // 0x0
	public const ProtocolType Unspecified = 0; // 0x0
	public const ProtocolType Ipx = 1000; // 0x0
	public const ProtocolType Spx = 1256; // 0x0
	public const ProtocolType SpxII = 1257; // 0x0
	public const ProtocolType Unknown = -1; // 0x0
}

// Namespace: System.Net.Sockets
public enum SelectMode // TypeDefIndex: 1239
{
	// Fields
	public int value__; // 0x0
	public const SelectMode SelectRead = 0; // 0x0
	public const SelectMode SelectWrite = 1; // 0x0
	public const SelectMode SelectError = 2; // 0x0
}

// Namespace: System.Net.Sockets
public class Socket : IDisposable // TypeDefIndex: 1240
{
	// Fields
	private static object s_InternalSyncObject; // 0x0
	internal static bool s_SupportsIPv4; // 0x8
	internal static bool s_SupportsIPv6; // 0x9
	internal static bool s_OSSupportsIPv6; // 0xA
	internal static bool s_Initialized; // 0xB
	private static bool s_LoggingEnabled; // 0xC
	internal static bool s_PerfCountersEnabled; // 0xD
	internal const int DefaultCloseTimeout = -1; // 0x0
	private const int SOCKET_CLOSED_CODE = 10004; // 0x0
	private const string TIMEOUT_EXCEPTION_MSG = "A connection attempt failed because the connected party did not properly respondafter a period of time, or established connection failed because connected host has failed to respond"; // 0x0
	private bool is_closed; // 0x10
	private bool is_listening; // 0x11
	private bool useOverlappedIO; // 0x12
	private int linger_timeout; // 0x14
	private AddressFamily addressFamily; // 0x18
	private SocketType socketType; // 0x1C
	private ProtocolType protocolType; // 0x20
	internal SafeSocketHandle m_Handle; // 0x28
	internal EndPoint seed_endpoint; // 0x30
	internal SemaphoreSlim ReadSem; // 0x38
	internal SemaphoreSlim WriteSem; // 0x40
	internal bool is_blocking; // 0x48
	internal bool is_bound; // 0x49
	internal bool is_connected; // 0x4A
	private int m_IntCleanedUp; // 0x4C
	internal bool connect_in_progress; // 0x50
	internal readonly int ID; // 0x54
	private static AsyncCallback AcceptAsyncCallback; // 0x10
	private static IOAsyncCallback BeginAcceptCallback; // 0x18
	private static IOAsyncCallback BeginAcceptReceiveCallback; // 0x20
	private static AsyncCallback ConnectAsyncCallback; // 0x28
	private static IOAsyncCallback BeginConnectCallback; // 0x30
	private static AsyncCallback DisconnectAsyncCallback; // 0x38
	private static IOAsyncCallback BeginDisconnectCallback; // 0x40
	private static AsyncCallback ReceiveAsyncCallback; // 0x48
	private static IOAsyncCallback BeginReceiveCallback; // 0x50
	private static IOAsyncCallback BeginReceiveGenericCallback; // 0x58
	private static AsyncCallback ReceiveFromAsyncCallback; // 0x60
	private static IOAsyncCallback BeginReceiveFromCallback; // 0x68
	private static AsyncCallback SendAsyncCallback; // 0x70
	private static IOAsyncCallback BeginSendGenericCallback; // 0x78
	private static AsyncCallback SendToAsyncCallback; // 0x80

	// Properties
	[ObsoleteAttribute] // RVA: 0xDA150 Offset: 0xD9550 VA: 0x1800DA150
	public static bool SupportsIPv4 { get; }
	public static bool OSSupportsIPv4 { get; }
	[ObsoleteAttribute] // RVA: 0xDA180 Offset: 0xD9580 VA: 0x1800DA180
	public static bool SupportsIPv6 { get; }
	public static bool OSSupportsIPv6 { get; }
	public IntPtr Handle { get; }
	public bool DontFragment { set; }
	public bool DualMode { get; set; }
	private bool IsDualMode { get; }
	private static object InternalSyncObject { get; }
	internal bool CleanedUp { get; }
	public int Available { get; }
	public bool Blocking { set; }
	public bool NoDelay { set; }
	internal static int FamilyHint { get; }

	// Methods
	// RVA: 0x590890 Offset: 0x58F090 VA: 0x180590890
	public void .ctor(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType) { }
	// RVA: 0x590BB0 Offset: 0x58F3B0 VA: 0x180590BB0
	public static bool get_SupportsIPv4() { }
	// RVA: 0x590C50 Offset: 0x58F450 VA: 0x180590C50
	public static bool get_OSSupportsIPv4() { }
	// RVA: 0x590CF0 Offset: 0x58F4F0 VA: 0x180590CF0
	public static bool get_SupportsIPv6() { }
	// RVA: 0x590D90 Offset: 0x58F590 VA: 0x180590D90
	public static bool get_OSSupportsIPv6() { }
	// RVA: 0x590E30 Offset: 0x58F630 VA: 0x180590E30
	public IntPtr get_Handle() { }
	// RVA: 0x590E50 Offset: 0x58F650 VA: 0x180590E50
	public void set_DontFragment(bool value) { }
	// RVA: 0x590F30 Offset: 0x58F730 VA: 0x180590F30
	public bool get_DualMode() { }
	// RVA: 0x591030 Offset: 0x58F830 VA: 0x180591030
	public void set_DualMode(bool value) { }
	// RVA: 0x591110 Offset: 0x58F910 VA: 0x180591110
	private bool get_IsDualMode() { }
	// RVA: 0x591220 Offset: 0x58FA20 VA: 0x180591220
	public int Send(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags) { }
	// RVA: 0x591300 Offset: 0x58FB00 VA: 0x180591300
	public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags) { }
	// RVA: 0x591400 Offset: 0x58FC00 VA: 0x180591400
	public int Receive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags) { }
	// RVA: 0x5914E0 Offset: 0x58FCE0 VA: 0x1805914E0
	public int ReceiveFrom(byte[] buffer, int size, SocketFlags socketFlags, ref EndPoint remoteEP) { }
	// RVA: 0x591510 Offset: 0x58FD10 VA: 0x180591510
	public void SetIPProtectionLevel(IPProtectionLevel level) { }
	// RVA: 0x591650 Offset: 0x58FE50 VA: 0x180591650
	public int EndSend(IAsyncResult asyncResult) { }
	// RVA: 0x5917F0 Offset: 0x58FFF0 VA: 0x1805917F0
	public int EndReceive(IAsyncResult asyncResult) { }
	// RVA: 0x591990 Offset: 0x590190 VA: 0x180591990
	private static object get_InternalSyncObject() { }
	// RVA: 0x591AB0 Offset: 0x5902B0 VA: 0x180591AB0
	internal bool get_CleanedUp() { }
	// RVA: 0x591AC0 Offset: 0x5902C0 VA: 0x180591AC0
	internal static void InitializeSockets() { }
	// RVA: 0x591EF0 Offset: 0x5906F0 VA: 0x180591EF0 Slot: 4
	public void Dispose() { }
	// RVA: 0x591FA0 Offset: 0x5907A0 VA: 0x180591FA0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x592020 Offset: 0x590820 VA: 0x180592020
	internal void InternalShutdown(SocketShutdown how) { }
	// RVA: 0x5920F0 Offset: 0x5908F0 VA: 0x1805920F0
	internal void .ctor(AddressFamily family, SocketType type, ProtocolType proto, SafeSocketHandle safe_handle) { }
	// RVA: 0x592220 Offset: 0x590A20 VA: 0x180592220
	private void SocketDefaults() { }
	// RVA: 0x5924D0 Offset: 0x590CD0 VA: 0x1805924D0
	private IntPtr Socket_internal(AddressFamily family, SocketType type, ProtocolType proto, out int error) { }
	// RVA: 0x592650 Offset: 0x590E50 VA: 0x180592650
	public int get_Available() { }
	// RVA: 0x592740 Offset: 0x590F40 VA: 0x180592740
	private static int Available_internal(SafeSocketHandle safeHandle, out int error) { }
	// RVA: 0x5928A0 Offset: 0x5910A0 VA: 0x1805928A0
	private static int Available_internal(IntPtr socket, out int error) { }
	// RVA: 0x5928B0 Offset: 0x5910B0 VA: 0x1805928B0
	public void set_Blocking(bool value) { }
	// RVA: 0x5929B0 Offset: 0x5911B0 VA: 0x1805929B0
	private static void Blocking_internal(SafeSocketHandle safeHandle, bool block, out int error) { }
	// RVA: 0x592B10 Offset: 0x591310 VA: 0x180592B10
	internal static void Blocking_internal(IntPtr socket, bool block, out int error) { }
	// RVA: 0x592B20 Offset: 0x591320 VA: 0x180592B20
	public void set_NoDelay(bool value) { }
	// RVA: 0x592C00 Offset: 0x591400 VA: 0x180592C00
	private static bool Poll_internal(IntPtr socket, SelectMode mode, int timeout, out int error) { }
	// RVA: 0x592C10 Offset: 0x591410 VA: 0x180592C10
	public Socket Accept() { }
	// RVA: 0x592D90 Offset: 0x591590 VA: 0x180592D90
	internal void Accept(Socket acceptSocket) { }
	// RVA: 0x592EE0 Offset: 0x5916E0 VA: 0x180592EE0
	public Socket EndAccept(IAsyncResult asyncResult) { }
	// RVA: 0x592FD0 Offset: 0x5917D0 VA: 0x180592FD0
	public Socket EndAccept(out byte[] buffer, out int bytesTransferred, IAsyncResult asyncResult) { }
	// RVA: 0x5930F0 Offset: 0x5918F0 VA: 0x1805930F0
	private static SafeSocketHandle Accept_internal(SafeSocketHandle safeHandle, out int error, bool blocking) { }
	// RVA: 0x5932D0 Offset: 0x591AD0 VA: 0x1805932D0
	private static IntPtr Accept_internal(IntPtr sock, out int error, bool blocking) { }
	// RVA: 0x593370 Offset: 0x591B70 VA: 0x180593370
	public void Connect(IPAddress address, int port) { }
	// RVA: 0x593430 Offset: 0x591C30 VA: 0x180593430
	public void Connect(EndPoint remoteEP) { }
	// RVA: 0x593820 Offset: 0x592020 VA: 0x180593820
	private static void BeginMConnect(SocketAsyncResult sockares) { }
	// RVA: 0x593990 Offset: 0x592190 VA: 0x180593990
	private static void BeginSConnect(SocketAsyncResult sockares) { }
	// RVA: 0x593F20 Offset: 0x592720 VA: 0x180593F20
	public void EndConnect(IAsyncResult asyncResult) { }
	// RVA: 0x594010 Offset: 0x592810 VA: 0x180594010
	private static void Connect_internal(SafeSocketHandle safeHandle, SocketAddress sa, out int error, bool blocking) { }
	// RVA: 0x594160 Offset: 0x592960 VA: 0x180594160
	private static void Connect_internal(IntPtr sock, SocketAddress sa, out int error, bool blocking) { }
	// RVA: 0x594170 Offset: 0x592970 VA: 0x180594170
	public void Disconnect(bool reuseSocket) { }
	// RVA: 0x5942A0 Offset: 0x592AA0 VA: 0x1805942A0
	public void EndDisconnect(IAsyncResult asyncResult) { }
	// RVA: 0x594390 Offset: 0x592B90 VA: 0x180594390
	private static void Disconnect_internal(SafeSocketHandle safeHandle, bool reuse, out int error) { }
	// RVA: 0x5944F0 Offset: 0x592CF0 VA: 0x1805944F0
	private static void Disconnect_internal(IntPtr sock, bool reuse, out int error) { }
	// RVA: 0x594500 Offset: 0x592D00 VA: 0x180594500
	public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode) { }
	// RVA: 0x5946E0 Offset: 0x592EE0 VA: 0x1805946E0
	public int Receive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode) { }
	// RVA: 0x594B40 Offset: 0x593340 VA: 0x180594B40
	public int EndReceive(IAsyncResult asyncResult, out SocketError errorCode) { }
	// RVA: 0x594C70 Offset: 0x593470 VA: 0x180594C70
	private static int Receive_internal(SafeSocketHandle safeHandle, Socket.WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking) { }
	// RVA: 0x594E00 Offset: 0x593600 VA: 0x180594E00
	private static int Receive_internal(IntPtr sock, Socket.WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking) { }
	// RVA: 0x594E10 Offset: 0x593610 VA: 0x180594E10
	private static int Receive_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, out int error, bool blocking) { }
	// RVA: 0x594FA0 Offset: 0x5937A0 VA: 0x180594FA0
	private static int Receive_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, out int error, bool blocking) { }
	// RVA: 0x594FB0 Offset: 0x5937B0 VA: 0x180594FB0
	public int ReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socketFlags, ref EndPoint remoteEP) { }
	// RVA: 0x5951A0 Offset: 0x5939A0 VA: 0x1805951A0
	internal int ReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socketFlags, ref EndPoint remoteEP, out SocketError errorCode) { }
	// RVA: 0x595360 Offset: 0x593B60 VA: 0x180595360
	public int EndReceiveFrom(IAsyncResult asyncResult, ref EndPoint endPoint) { }
	// RVA: 0x5954A0 Offset: 0x593CA0 VA: 0x1805954A0
	private static int ReceiveFrom_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, ref SocketAddress sockaddr, out int error, bool blocking) { }
	// RVA: 0x595640 Offset: 0x593E40 VA: 0x180595640
	private static int ReceiveFrom_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, ref SocketAddress sockaddr, out int error, bool blocking) { }
	// RVA: 0x595650 Offset: 0x593E50 VA: 0x180595650
	public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode) { }
	// RVA: 0x595860 Offset: 0x594060 VA: 0x180595860
	public int Send(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode) { }
	// RVA: 0x595CF0 Offset: 0x5944F0 VA: 0x180595CF0
	public int EndSend(IAsyncResult asyncResult, out SocketError errorCode) { }
	// RVA: 0x595E20 Offset: 0x594620 VA: 0x180595E20
	private static int Send_internal(SafeSocketHandle safeHandle, Socket.WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking) { }
	// RVA: 0x595FB0 Offset: 0x5947B0 VA: 0x180595FB0
	private static int Send_internal(IntPtr sock, Socket.WSABUF* bufarray, int count, SocketFlags flags, out int error, bool blocking) { }
	// RVA: 0x595FC0 Offset: 0x5947C0 VA: 0x180595FC0
	private static int Send_internal(SafeSocketHandle safeHandle, byte* buffer, int count, SocketFlags flags, out int error, bool blocking) { }
	// RVA: 0x596150 Offset: 0x594950 VA: 0x180596150
	private static int Send_internal(IntPtr sock, byte* buffer, int count, SocketFlags flags, out int error, bool blocking) { }
	// RVA: 0x596160 Offset: 0x594960 VA: 0x180596160
	public int EndSendTo(IAsyncResult asyncResult) { }
	// RVA: 0x596250 Offset: 0x594A50 VA: 0x180596250
	public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName) { }
	// RVA: 0x596480 Offset: 0x594C80 VA: 0x180596480
	private static void GetSocketOption_obj_internal(SafeSocketHandle safeHandle, SocketOptionLevel level, SocketOptionName name, out object obj_val, out int error) { }
	// RVA: 0x596600 Offset: 0x594E00 VA: 0x180596600
	private static void GetSocketOption_obj_internal(IntPtr socket, SocketOptionLevel level, SocketOptionName name, out object obj_val, out int error) { }
	// RVA: 0x596610 Offset: 0x594E10 VA: 0x180596610
	public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue) { }
	// RVA: 0x596770 Offset: 0x594F70 VA: 0x180596770
	private static void SetSocketOption_internal(SafeSocketHandle safeHandle, SocketOptionLevel level, SocketOptionName name, object obj_val, byte[] byte_val, int int_val, out int error) { }
	// RVA: 0x596910 Offset: 0x595110 VA: 0x180596910
	private static void SetSocketOption_internal(IntPtr socket, SocketOptionLevel level, SocketOptionName name, object obj_val, byte[] byte_val, int int_val, out int error) { }
	// RVA: 0x596920 Offset: 0x595120 VA: 0x180596920
	public void Close() { }
	// RVA: 0x5969D0 Offset: 0x5951D0 VA: 0x1805969D0
	internal static void Close_internal(IntPtr socket, out int error) { }
	// RVA: 0x5969E0 Offset: 0x5951E0 VA: 0x1805969E0
	private static void Shutdown_internal(SafeSocketHandle safeHandle, SocketShutdown how, out int error) { }
	// RVA: 0x596B40 Offset: 0x595340 VA: 0x180596B40
	internal static void Shutdown_internal(IntPtr socket, SocketShutdown how, out int error) { }
	// RVA: 0x596B50 Offset: 0x595350 VA: 0x180596B50 Slot: 5
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x596D50 Offset: 0x595550 VA: 0x180596D50
	private void Linger(IntPtr handle) { }
	// RVA: 0x596EF0 Offset: 0x5956F0 VA: 0x180596EF0
	private void ThrowIfDisposedAndClosed() { }
	// RVA: 0x596FC0 Offset: 0x5957C0 VA: 0x180596FC0
	private void ThrowIfBufferNull(byte[] buffer) { }
	// RVA: 0x597060 Offset: 0x595860 VA: 0x180597060
	private void ThrowIfBufferOutOfRange(byte[] buffer, int offset, int size) { }
	// RVA: 0x5971F0 Offset: 0x5959F0 VA: 0x1805971F0
	private void ThrowIfUdp() { }
	// RVA: 0x597290 Offset: 0x595A90 VA: 0x180597290
	private SocketAsyncResult ValidateEndIAsyncResult(IAsyncResult ares, string methodName, string argName) { }
	// RVA: 0x5973F0 Offset: 0x595BF0 VA: 0x1805973F0
	private IPEndPoint RemapIPEndPoint(IPEndPoint input) { }
	// RVA: 0x597710 Offset: 0x595F10 VA: 0x180597710
	internal static void cancel_blocking_socket_operation(Thread thread) { }
	// RVA: 0x597730 Offset: 0x595F30 VA: 0x180597730
	internal static int get_FamilyHint() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20
	private static bool IsProtocolSupported_internal(NetworkInterfaceComponent networkInterface) { }
	// RVA: 0x597800 Offset: 0x596000 VA: 0x180597800
	private static bool IsProtocolSupported(NetworkInterfaceComponent networkInterface) { }
	// RVA: 0x597890 Offset: 0x596090 VA: 0x180597890
	private static void .cctor() { }
}

// Namespace: 
private struct Socket.WSABUF // TypeDefIndex: 1241
{
	// Fields
	public int len; // 0x0
	public IntPtr buf; // 0x8
}

// Namespace: 
[Serializable]
private sealed class Socket.<>c // TypeDefIndex: 1242
{
	// Fields
	public static readonly Socket.<>c <>9; // 0xA171D0

	// Methods
	// RVA: 0x647470 Offset: 0x645C70 VA: 0x180647470
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6474F0 Offset: 0x645CF0 VA: 0x1806474F0
	internal void <.cctor>b__310_0(IAsyncResult ares) { }
	// RVA: 0x6478A0 Offset: 0x6460A0 VA: 0x1806478A0
	internal void <.cctor>b__310_1(IOAsyncResult ares) { }
	// RVA: 0x6479D0 Offset: 0x6461D0 VA: 0x1806479D0
	internal void <.cctor>b__310_2(IOAsyncResult ares) { }
	// RVA: 0x647BA0 Offset: 0x6463A0 VA: 0x180647BA0
	internal void <.cctor>b__310_3(IAsyncResult ares) { }
	// RVA: 0x647EC0 Offset: 0x6466C0 VA: 0x180647EC0
	internal void <.cctor>b__310_4(IOAsyncResult ares) { }
	// RVA: 0x648160 Offset: 0x646960 VA: 0x180648160
	internal void <.cctor>b__310_5(IAsyncResult ares) { }
	// RVA: 0x648480 Offset: 0x646C80 VA: 0x180648480
	internal void <.cctor>b__310_6(IOAsyncResult ares) { }
	// RVA: 0x648680 Offset: 0x646E80 VA: 0x180648680
	internal void <.cctor>b__310_7(IAsyncResult ares) { }
	// RVA: 0x6488D0 Offset: 0x6470D0 VA: 0x1806488D0
	internal void <.cctor>b__310_8(IOAsyncResult ares) { }
	// RVA: 0x648AA0 Offset: 0x6472A0 VA: 0x180648AA0
	internal void <.cctor>b__310_9(IOAsyncResult ares) { }
	// RVA: 0x648C50 Offset: 0x647450 VA: 0x180648C50
	internal void <.cctor>b__310_10(IAsyncResult ares) { }
	// RVA: 0x648FB0 Offset: 0x6477B0 VA: 0x180648FB0
	internal void <.cctor>b__310_11(IOAsyncResult ares) { }
	// RVA: 0x649120 Offset: 0x647920 VA: 0x180649120
	internal void <.cctor>b__310_12(IAsyncResult ares) { }
	// RVA: 0x649370 Offset: 0x647B70 VA: 0x180649370
	internal void <.cctor>b__310_13(IOAsyncResult ares) { }
	// RVA: 0x649520 Offset: 0x647D20 VA: 0x180649520
	internal void <.cctor>b__310_14(IAsyncResult ares) { }
}

// Namespace: System.Net.Sockets
public enum SocketError // TypeDefIndex: 1243
{
	// Fields
	public int value__; // 0x0
	public const SocketError Success = 0; // 0x0
	public const SocketError SocketError = -1; // 0x0
	public const SocketError Interrupted = 10004; // 0x0
	public const SocketError AccessDenied = 10013; // 0x0
	public const SocketError Fault = 10014; // 0x0
	public const SocketError InvalidArgument = 10022; // 0x0
	public const SocketError TooManyOpenSockets = 10024; // 0x0
	public const SocketError WouldBlock = 10035; // 0x0
	public const SocketError InProgress = 10036; // 0x0
	public const SocketError AlreadyInProgress = 10037; // 0x0
	public const SocketError NotSocket = 10038; // 0x0
	public const SocketError DestinationAddressRequired = 10039; // 0x0
	public const SocketError MessageSize = 10040; // 0x0
	public const SocketError ProtocolType = 10041; // 0x0
	public const SocketError ProtocolOption = 10042; // 0x0
	public const SocketError ProtocolNotSupported = 10043; // 0x0
	public const SocketError SocketNotSupported = 10044; // 0x0
	public const SocketError OperationNotSupported = 10045; // 0x0
	public const SocketError ProtocolFamilyNotSupported = 10046; // 0x0
	public const SocketError AddressFamilyNotSupported = 10047; // 0x0
	public const SocketError AddressAlreadyInUse = 10048; // 0x0
	public const SocketError AddressNotAvailable = 10049; // 0x0
	public const SocketError NetworkDown = 10050; // 0x0
	public const SocketError NetworkUnreachable = 10051; // 0x0
	public const SocketError NetworkReset = 10052; // 0x0
	public const SocketError ConnectionAborted = 10053; // 0x0
	public const SocketError ConnectionReset = 10054; // 0x0
	public const SocketError NoBufferSpaceAvailable = 10055; // 0x0
	public const SocketError IsConnected = 10056; // 0x0
	public const SocketError NotConnected = 10057; // 0x0
	public const SocketError Shutdown = 10058; // 0x0
	public const SocketError TimedOut = 10060; // 0x0
	public const SocketError ConnectionRefused = 10061; // 0x0
	public const SocketError HostDown = 10064; // 0x0
	public const SocketError HostUnreachable = 10065; // 0x0
	public const SocketError ProcessLimit = 10067; // 0x0
	public const SocketError SystemNotReady = 10091; // 0x0
	public const SocketError VersionNotSupported = 10092; // 0x0
	public const SocketError NotInitialized = 10093; // 0x0
	public const SocketError Disconnecting = 10101; // 0x0
	public const SocketError TypeNotFound = 10109; // 0x0
	public const SocketError HostNotFound = 11001; // 0x0
	public const SocketError TryAgain = 11002; // 0x0
	public const SocketError NoRecovery = 11003; // 0x0
	public const SocketError NoData = 11004; // 0x0
	public const SocketError IOPending = 997; // 0x0
	public const SocketError OperationAborted = 995; // 0x0
}

// Namespace: System.Net.Sockets
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum SocketFlags // TypeDefIndex: 1244
{
	// Fields
	public int value__; // 0x0
	public const SocketFlags None = 0; // 0x0
	public const SocketFlags OutOfBand = 1; // 0x0
	public const SocketFlags Peek = 2; // 0x0
	public const SocketFlags DontRoute = 4; // 0x0
	public const SocketFlags MaxIOVectorLength = 16; // 0x0
	public const SocketFlags Truncated = 256; // 0x0
	public const SocketFlags ControlDataTruncated = 512; // 0x0
	public const SocketFlags Broadcast = 1024; // 0x0
	public const SocketFlags Multicast = 2048; // 0x0
	public const SocketFlags Partial = 32768; // 0x0
}

// Namespace: System.Net.Sockets
public enum SocketOptionLevel // TypeDefIndex: 1245
{
	// Fields
	public int value__; // 0x0
	public const SocketOptionLevel Socket = 65535; // 0x0
	public const SocketOptionLevel IP = 0; // 0x0
	public const SocketOptionLevel IPv6 = 41; // 0x0
	public const SocketOptionLevel Tcp = 6; // 0x0
	public const SocketOptionLevel Udp = 17; // 0x0
}

// Namespace: System.Net.Sockets
public enum SocketOptionName // TypeDefIndex: 1246
{
	// Fields
	public int value__; // 0x0
	public const SocketOptionName Debug = 1; // 0x0
	public const SocketOptionName AcceptConnection = 2; // 0x0
	public const SocketOptionName ReuseAddress = 4; // 0x0
	public const SocketOptionName KeepAlive = 8; // 0x0
	public const SocketOptionName DontRoute = 16; // 0x0
	public const SocketOptionName Broadcast = 32; // 0x0
	public const SocketOptionName UseLoopback = 64; // 0x0
	public const SocketOptionName Linger = 128; // 0x0
	public const SocketOptionName OutOfBandInline = 256; // 0x0
	public const SocketOptionName DontLinger = -129; // 0x0
	public const SocketOptionName ExclusiveAddressUse = -5; // 0x0
	public const SocketOptionName SendBuffer = 4097; // 0x0
	public const SocketOptionName ReceiveBuffer = 4098; // 0x0
	public const SocketOptionName SendLowWater = 4099; // 0x0
	public const SocketOptionName ReceiveLowWater = 4100; // 0x0
	public const SocketOptionName SendTimeout = 4101; // 0x0
	public const SocketOptionName ReceiveTimeout = 4102; // 0x0
	public const SocketOptionName Error = 4103; // 0x0
	public const SocketOptionName Type = 4104; // 0x0
	public const SocketOptionName ReuseUnicastPort = 12295; // 0x0
	public const SocketOptionName MaxConnections = 2147483647; // 0x0
	public const SocketOptionName IPOptions = 1; // 0x0
	public const SocketOptionName HeaderIncluded = 2; // 0x0
	public const SocketOptionName TypeOfService = 3; // 0x0
	public const SocketOptionName IpTimeToLive = 4; // 0x0
	public const SocketOptionName MulticastInterface = 9; // 0x0
	public const SocketOptionName MulticastTimeToLive = 10; // 0x0
	public const SocketOptionName MulticastLoopback = 11; // 0x0
	public const SocketOptionName AddMembership = 12; // 0x0
	public const SocketOptionName DropMembership = 13; // 0x0
	public const SocketOptionName DontFragment = 14; // 0x0
	public const SocketOptionName AddSourceMembership = 15; // 0x0
	public const SocketOptionName DropSourceMembership = 16; // 0x0
	public const SocketOptionName BlockSource = 17; // 0x0
	public const SocketOptionName UnblockSource = 18; // 0x0
	public const SocketOptionName PacketInformation = 19; // 0x0
	public const SocketOptionName HopLimit = 21; // 0x0
	public const SocketOptionName IPProtectionLevel = 23; // 0x0
	public const SocketOptionName IPv6Only = 27; // 0x0
	public const SocketOptionName NoDelay = 1; // 0x0
	public const SocketOptionName BsdUrgent = 2; // 0x0
	public const SocketOptionName Expedited = 2; // 0x0
	public const SocketOptionName NoChecksum = 1; // 0x0
	public const SocketOptionName ChecksumCoverage = 20; // 0x0
	public const SocketOptionName UpdateAcceptContext = 28683; // 0x0
	public const SocketOptionName UpdateConnectContext = 28688; // 0x0
}

// Namespace: System.Net.Sockets
public enum SocketShutdown // TypeDefIndex: 1247
{
	// Fields
	public int value__; // 0x0
	public const SocketShutdown Receive = 0; // 0x0
	public const SocketShutdown Send = 1; // 0x0
	public const SocketShutdown Both = 2; // 0x0
}

// Namespace: System.Net.Sockets
public enum SocketType // TypeDefIndex: 1248
{
	// Fields
	public int value__; // 0x0
	public const SocketType Stream = 1; // 0x0
	public const SocketType Dgram = 2; // 0x0
	public const SocketType Raw = 3; // 0x0
	public const SocketType Rdm = 4; // 0x0
	public const SocketType Seqpacket = 5; // 0x0
	public const SocketType Unknown = -1; // 0x0
}

// Namespace: System.Net.Sockets
public class UdpClient : IDisposable // TypeDefIndex: 1249
{
	// Fields
	private const int MaxUDPSize = 65536; // 0x0
	private Socket m_ClientSocket; // 0x10
	private bool m_Active; // 0x18
	private byte[] m_Buffer; // 0x20
	private AddressFamily m_Family; // 0x28
	private bool m_CleanedUp; // 0x2C
	private bool m_IsBroadcast; // 0x2D

	// Properties
	public int Available { get; }

	// Methods
	// RVA: 0x59A260 Offset: 0x598A60 VA: 0x18059A260
	public void .ctor() { }
	// RVA: 0x59A270 Offset: 0x598A70 VA: 0x18059A270
	public void .ctor(AddressFamily family) { }
	// RVA: 0x59A430 Offset: 0x598C30 VA: 0x18059A430
	public int get_Available() { }
	// RVA: 0x2DF750 Offset: 0x2DDF50 VA: 0x1802DF750
	public void Close() { }
	// RVA: 0x59A530 Offset: 0x598D30 VA: 0x18059A530
	private void FreeResources() { }
	// RVA: 0x2DF750 Offset: 0x2DDF50 VA: 0x1802DF750 Slot: 4
	public void Dispose() { }
	// RVA: 0x59A620 Offset: 0x598E20 VA: 0x18059A620 Slot: 5
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x59A7A0 Offset: 0x598FA0 VA: 0x18059A7A0
	public void Connect(string hostname, int port) { }
	// RVA: 0x59ACB0 Offset: 0x5994B0 VA: 0x18059ACB0
	public void Connect(IPEndPoint endPoint) { }
	// RVA: 0x59AEE0 Offset: 0x5996E0 VA: 0x18059AEE0
	private void CheckForBroadcast(IPAddress ipAddress) { }
	// RVA: 0x59AFF0 Offset: 0x5997F0 VA: 0x18059AFF0
	public int Send(byte[] dgram, int bytes) { }
	// RVA: 0x59B220 Offset: 0x599A20 VA: 0x18059B220
	public byte[] Receive(ref IPEndPoint remoteEP) { }
	// RVA: 0x59B490 Offset: 0x599C90 VA: 0x18059B490
	private void createClientSocket() { }
}

// Namespace: System.Net.Sockets
internal sealed class SafeSocketHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 1250
{
	// Fields
	private List<Thread> blocking_threads; // 0x20
	private Dictionary<Thread, StackTrace> threads_stacktraces; // 0x28
	private bool in_cleanup; // 0x30
	private const int SOCKET_CLOSED = 10004; // 0x0
	private const int ABORT_RETRIES = 10; // 0x0
	private static bool THROW_ON_ABORT_RETRIES; // 0x0

	// Methods
	// RVA: 0x58F9E0 Offset: 0x58E1E0 VA: 0x18058F9E0
	public void .ctor(IntPtr preexistingHandle, bool ownsHandle) { }
	// RVA: 0x58FAF0 Offset: 0x58E2F0 VA: 0x18058FAF0 Slot: 7
	protected override bool ReleaseHandle() { }
	// RVA: 0x58FFA0 Offset: 0x58E7A0 VA: 0x18058FFA0
	public void RegisterForBlockingSyscall() { }
	// RVA: 0x590320 Offset: 0x58EB20 VA: 0x180590320
	public void UnRegisterForBlockingSyscall() { }
	// RVA: 0x590610 Offset: 0x58EE10 VA: 0x180590610
	private static void .cctor() { }
}

// Namespace: System.Net.Sockets
public class SocketAsyncEventArgs : EventArgs // TypeDefIndex: 1251
{
	// Fields
	internal int in_progress; // 0x10
	internal EndPoint remote_ep; // 0x18
	internal Socket current_socket; // 0x20
	private Socket <AcceptSocket>k__BackingField; // 0x28
	private int <BytesTransferred>k__BackingField; // 0x30
	private SocketError <SocketError>k__BackingField; // 0x34
	private EventHandler<SocketAsyncEventArgs> Completed; // 0x38

	// Methods
	// RVA: 0x5991F0 Offset: 0x5979F0 VA: 0x1805991F0
	internal void Complete() { }
	// RVA: 0x599210 Offset: 0x597A10 VA: 0x180599210 Slot: 4
	protected virtual void OnCompleted(SocketAsyncEventArgs e) { }
}

// Namespace: System.Net.Sockets
internal sealed class SocketAsyncResult : IOAsyncResult // TypeDefIndex: 1252
{
	// Fields
	public Socket socket; // 0x30
	public SocketOperation operation; // 0x38
	private Exception DelayedException; // 0x40
	public EndPoint EndPoint; // 0x48
	public byte[] Buffer; // 0x50
	public int Offset; // 0x58
	public int Size; // 0x5C
	public SocketFlags SockFlags; // 0x60
	public Socket AcceptSocket; // 0x68
	public IPAddress[] Addresses; // 0x70
	public int Port; // 0x78
	public IList<ArraySegment<byte>> Buffers; // 0x80
	public bool ReuseSocket; // 0x88
	public int CurrentAddress; // 0x8C
	public Socket AcceptedSocket; // 0x90
	public int Total; // 0x98
	internal int error; // 0x9C
	public int EndCalled; // 0xA0

	// Properties
	public IntPtr Handle { get; }
	public SocketError ErrorCode { get; }

	// Methods
	// RVA: 0x5992A0 Offset: 0x597AA0 VA: 0x1805992A0
	public IntPtr get_Handle() { }
	// RVA: 0x599330 Offset: 0x597B30 VA: 0x180599330
	public SocketError get_ErrorCode() { }
	// RVA: 0x599400 Offset: 0x597C00 VA: 0x180599400
	public void CheckIfThrowDelayedException() { }
	// RVA: 0x599510 Offset: 0x597D10 VA: 0x180599510
	public void Complete() { }
	// RVA: 0x599730 Offset: 0x597F30 VA: 0x180599730
	public void Complete(bool synch) { }
	// RVA: 0x599740 Offset: 0x597F40 VA: 0x180599740
	public void Complete(int total) { }
	// RVA: 0x599750 Offset: 0x597F50 VA: 0x180599750
	public void Complete(Exception e, bool synch) { }
	// RVA: 0x599760 Offset: 0x597F60 VA: 0x180599760
	public void Complete(Exception e) { }
	// RVA: 0x599770 Offset: 0x597F70 VA: 0x180599770
	public void Complete(Socket s) { }
	// RVA: 0x599780 Offset: 0x597F80 VA: 0x180599780
	public void Complete(Socket s, int total) { }
}

// Namespace: 
[Serializable]
private sealed class SocketAsyncResult.<>c // TypeDefIndex: 1253
{
	// Fields
	public static readonly SocketAsyncResult.<>c <>9; // 0x0
	public static WaitCallback <>9__27_0; // 0x8

	// Methods
	// RVA: 0x649840 Offset: 0x648040 VA: 0x180649840
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6498C0 Offset: 0x6480C0 VA: 0x1806498C0
	internal void <Complete>b__27_0(object state) { }
}

// Namespace: System.Net.Sockets
internal enum SocketOperation // TypeDefIndex: 1254
{
	// Fields
	public int value__; // 0x0
	public const SocketOperation Accept = 0; // 0x0
	public const SocketOperation Connect = 1; // 0x0
	public const SocketOperation Receive = 2; // 0x0
	public const SocketOperation ReceiveFrom = 3; // 0x0
	public const SocketOperation Send = 4; // 0x0
	public const SocketOperation SendTo = 5; // 0x0
	public const SocketOperation RecvJustCallback = 6; // 0x0
	public const SocketOperation SendJustCallback = 7; // 0x0
	public const SocketOperation Disconnect = 8; // 0x0
	public const SocketOperation AcceptReceive = 9; // 0x0
	public const SocketOperation ReceiveGeneric = 10; // 0x0
	public const SocketOperation SendGeneric = 11; // 0x0
}

// Namespace: System.Net.NetworkInformation
public enum NetworkInterfaceComponent // TypeDefIndex: 1255
{
	// Fields
	public int value__; // 0x0
	public const NetworkInterfaceComponent IPv4 = 0; // 0x0
	public const NetworkInterfaceComponent IPv6 = 1; // 0x0
}

// Namespace: System.Net.Configuration
internal sealed class SettingsSectionInternal // TypeDefIndex: 1256
{
	// Fields
	private static readonly SettingsSectionInternal instance; // 0x0
	internal readonly bool HttpListenerUnescapeRequestUrl; // 0x10
	internal readonly IPProtectionLevel IPProtectionLevel; // 0x14

	// Methods
	// RVA: 0x590750 Offset: 0x58EF50 VA: 0x180590750
	public void .ctor() { }
	// RVA: 0x590760 Offset: 0x58EF60 VA: 0x180590760
	private static void .cctor() { }
}

// Namespace: System.Collections.Generic
[Serializable]
public class LinkedList<T> : ICollection<T>, IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1257
{
	// Fields
	internal LinkedListNode<T> head; // 0x0
	internal int count; // 0x0
	internal int version; // 0x0
	private SerializationInfo _siInfo; // 0x0

	// Properties
	public int Count { get; }
	public LinkedListNode<T> First { get; }
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }

	// Methods
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
	// RVA: 0x77F670 Offset: 0x77DE70 VA: 0x18077F670
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 15
	public int get_Count() { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public LinkedListNode<T> get_First() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 5
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	// RVA: 0x77F690 Offset: 0x77DE90 VA: 0x18077F690 Slot: 6
	private void System.Collections.Generic.ICollection<T>.Add(T value) { }
	// RVA: 0x77F6C0 Offset: 0x77DEC0 VA: 0x18077F6C0
	public LinkedListNode<T> AddFirst(T value) { }
	// RVA: 0x77F780 Offset: 0x77DF80 VA: 0x18077F780
	public void AddFirst(LinkedListNode<T> node) { }
	// RVA: 0x77F810 Offset: 0x77E010 VA: 0x18077F810
	public LinkedListNode<T> AddLast(T value) { }
	// RVA: 0x77F8D0 Offset: 0x77E0D0 VA: 0x18077F8D0 Slot: 7
	public void Clear() { }
	// RVA: 0x77F950 Offset: 0x77E150 VA: 0x18077F950 Slot: 8
	public bool Contains(T value) { }
	// RVA: 0x77F980 Offset: 0x77E180 VA: 0x18077F980 Slot: 9
	public void CopyTo(T[] array, int index) { }
	// RVA: 0x77FB80 Offset: 0x77E380 VA: 0x18077FB80
	public LinkedListNode<T> Find(T value) { }
	// RVA: 0x77FC30 Offset: 0x77E430 VA: 0x18077FC30
	public LinkedList.Enumerator<T> GetEnumerator() { }
	// RVA: 0x77FC70 Offset: 0x77E470 VA: 0x18077FC70 Slot: 11
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// RVA: 0x77FCF0 Offset: 0x77E4F0 VA: 0x18077FCF0 Slot: 10
	public bool Remove(T value) { }
	// RVA: 0x77FD60 Offset: 0x77E560 VA: 0x18077FD60
	public void Remove(LinkedListNode<T> node) { }
	// RVA: 0x77FDD0 Offset: 0x77E5D0 VA: 0x18077FDD0
	public void RemoveLast() { }
	// RVA: 0x77FEA0 Offset: 0x77E6A0 VA: 0x18077FEA0 Slot: 18
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x780120 Offset: 0x77E920 VA: 0x180780120 Slot: 19
	public virtual void OnDeserialization(object sender) { }
	// RVA: 0x780330 Offset: 0x77EB30 VA: 0x180780330
	private void InternalInsertNodeBefore(LinkedListNode<T> node, LinkedListNode<T> newNode) { }
	// RVA: 0x780370 Offset: 0x77EB70 VA: 0x180780370
	private void InternalInsertNodeToEmptyList(LinkedListNode<T> newNode) { }
	// RVA: 0x7803A0 Offset: 0x77EBA0 VA: 0x1807803A0
	internal void InternalRemoveNode(LinkedListNode<T> node) { }
	// RVA: 0x780420 Offset: 0x77EC20 VA: 0x180780420
	internal void ValidateNewNode(LinkedListNode<T> node) { }
	// RVA: 0x780500 Offset: 0x77ED00 VA: 0x180780500
	internal void ValidateNode(LinkedListNode<T> node) { }
	// RVA: 0x7805F0 Offset: 0x77EDF0 VA: 0x1807805F0 Slot: 13
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	// RVA: 0x77FC70 Offset: 0x77E470 VA: 0x18077FC70 Slot: 12
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
[Serializable]
public struct LinkedList.Enumerator<T> : IEnumerator<T>, IDisposable, IEnumerator, ISerializable, IDeserializationCallback // TypeDefIndex: 1258
{
	// Fields
	private LinkedList<T> _list; // 0x0
	private LinkedListNode<T> _node; // 0x0
	private int _version; // 0x0
	private T _current; // 0x0
	private int _index; // 0x0

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x120F50 Offset: 0x120350 VA: 0x180120F50
	internal void .ctor(LinkedList<T> list) { }
	// RVA: 0x120F80 Offset: 0x120380 VA: 0x180120F80
	private void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x23D0 Offset: 0x17D0 VA: 0x1800023D0 Slot: 4
	public T get_Current() { }
	// RVA: 0x120FA0 Offset: 0x1203A0 VA: 0x180120FA0 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
	// RVA: 0x121060 Offset: 0x120460 VA: 0x180121060 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80 Slot: 5
	public void Dispose() { }
	// RVA: 0x121160 Offset: 0x120560 VA: 0x180121160 Slot: 8
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x121180 Offset: 0x120580 VA: 0x180121180 Slot: 9
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) { }
}

// Namespace: System.Collections.Generic
public sealed class LinkedListNode<T> // TypeDefIndex: 1259
{
	// Fields
	internal LinkedList<T> list; // 0x0
	internal LinkedListNode<T> next; // 0x0
	internal LinkedListNode<T> prev; // 0x0
	internal T item; // 0x0

	// Properties
	public LinkedListNode<T> Next { get; }
	public T Value { get; }

	// Methods
	// RVA: 0x77F610 Offset: 0x77DE10 VA: 0x18077F610
	internal void .ctor(LinkedList<T> list, T value) { }
	// RVA: 0x77F630 Offset: 0x77DE30 VA: 0x18077F630
	public LinkedListNode<T> get_Next() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public T get_Value() { }
	// RVA: 0x77F660 Offset: 0x77DE60 VA: 0x18077F660
	internal void Invalidate() { }
}

// Namespace: System.Collections.Generic
[Serializable]
public class Queue<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T> // TypeDefIndex: 1260
{
	// Fields
	private T[] _array; // 0x0
	private int _head; // 0x0
	private int _tail; // 0x0
	private int _size; // 0x0
	private int _version; // 0x0
	private object _syncRoot; // 0x0
	private const int MinimumGrow = 4; // 0x0
	private const int GrowFactor = 200; // 0x0

	// Properties
	public int Count { get; }

	// Methods
	// RVA: 0x7812B0 Offset: 0x77FAB0 VA: 0x1807812B0
	public void .ctor() { }
	// RVA: 0x197B20 Offset: 0x196320 VA: 0x180197B20 Slot: 8
	public int get_Count() { }
	// RVA: 0x802030 Offset: 0x800830 VA: 0x180802030
	public void Clear() { }
	// RVA: 0x8020A0 Offset: 0x8008A0 VA: 0x1808020A0 Slot: 6
	private void System.Collections.ICollection.CopyTo(Array array, int index) { }
	// RVA: 0x802380 Offset: 0x800B80 VA: 0x180802380
	public void Enqueue(T item) { }
	// RVA: 0x802430 Offset: 0x800C30 VA: 0x180802430
	public Queue.Enumerator<T> GetEnumerator() { }
	// RVA: 0x802470 Offset: 0x800C70 VA: 0x180802470 Slot: 4
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// RVA: 0x802470 Offset: 0x800C70 VA: 0x180802470 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x802500 Offset: 0x800D00 VA: 0x180802500
	public T Dequeue() { }
	// RVA: 0x8025A0 Offset: 0x800DA0 VA: 0x1808025A0
	private void SetCapacity(int capacity) { }
	// RVA: 0x802680 Offset: 0x800E80 VA: 0x180802680
	private void MoveNext(ref int index) { }
	// RVA: 0x8026B0 Offset: 0x800EB0 VA: 0x1808026B0
	private void ThrowForEmptyQueue() { }
}

// Namespace: 
[Serializable]
public struct Queue.Enumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 1261
{
	// Fields
	private readonly Queue<T> _q; // 0x0
	private readonly int _version; // 0x0
	private int _index; // 0x0
	private T _currentElement; // 0x0

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x121190 Offset: 0x120590 VA: 0x180121190
	internal void .ctor(Queue<T> q) { }
	// RVA: 0x1211C0 Offset: 0x1205C0 VA: 0x1801211C0 Slot: 5
	public void Dispose() { }
	// RVA: 0x1211D0 Offset: 0x1205D0 VA: 0x1801211D0 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x1211E0 Offset: 0x1205E0 VA: 0x1801211E0 Slot: 4
	public T get_Current() { }
	// RVA: 0x121220 Offset: 0x120620 VA: 0x180121220
	private void ThrowEnumerationNotStartedOrEnded() { }
	// RVA: 0x121230 Offset: 0x120630 VA: 0x180121230 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: System.Collections.Generic
[Serializable]
public class Stack<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T> // TypeDefIndex: 1262
{
	// Fields
	private T[] _array; // 0x0
	private int _size; // 0x0
	private int _version; // 0x0

	// Properties
	public int Count { get; }

	// Methods
	// RVA: 0x7812B0 Offset: 0x77FAB0 VA: 0x1807812B0
	public void .ctor() { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 8
	public int get_Count() { }
	// RVA: 0x7BFD20 Offset: 0x7BE520 VA: 0x1807BFD20 Slot: 6
	private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex) { }
	// RVA: 0x7BFFC0 Offset: 0x7BE7C0 VA: 0x1807BFFC0 Slot: 4
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// RVA: 0x7BFFC0 Offset: 0x7BE7C0 VA: 0x1807BFFC0 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x7C0050 Offset: 0x7BE850 VA: 0x1807C0050
	public T Peek() { }
	// RVA: 0x7C00B0 Offset: 0x7BE8B0 VA: 0x1807C00B0
	public T Pop() { }
	// RVA: 0x7C0130 Offset: 0x7BE930 VA: 0x1807C0130
	public void Push(T item) { }
	// RVA: 0x7C01D0 Offset: 0x7BE9D0 VA: 0x1807C01D0
	private void ThrowForEmptyStack() { }
}

// Namespace: 
[Serializable]
public struct Stack.Enumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 1263
{
	// Fields
	private readonly Stack<T> _stack; // 0x0
	private readonly int _version; // 0x0
	private int _index; // 0x0
	private T _currentElement; // 0x0

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x121290 Offset: 0x120690 VA: 0x180121290
	internal void .ctor(Stack<T> stack) { }
	// RVA: 0x1212C0 Offset: 0x1206C0 VA: 0x1801212C0 Slot: 5
	public void Dispose() { }
	// RVA: 0x1212D0 Offset: 0x1206D0 VA: 0x1801212D0 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x1212E0 Offset: 0x1206E0 VA: 0x1801212E0 Slot: 4
	public T get_Current() { }
	// RVA: 0x121320 Offset: 0x120720 VA: 0x180121320
	private void ThrowEnumerationNotStartedOrEnded() { }
	// RVA: 0x121330 Offset: 0x120730 VA: 0x180121330 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 1264
{
	// Fields
	internal static readonly long 03F4297FCC30D0FD5E420E5D26E7FA711167C7EF = 2533317740920864; // 0x0
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=32 59F5BD34B6C013DEACC784F69C67E95150033A84 /*Metadata offset 0x15DA8B*/; // 0x8
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=44 8E0EF3D67A3EB1863224EE3CACB424BC2F8CFBA3 /*Metadata offset 0x15DAAB*/; // 0x28
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=32 C02C28AFEBE998F767E4AF43E3BE8F5E9FA11536 /*Metadata offset 0x15DAD7*/; // 0x54
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=128 CCEEADA43268372341F81AE0C9208C6856441C04 /*Metadata offset 0x15DAF7*/; // 0x74
	internal static readonly long E5BC1BAFADE1862DD6E0B9FB632BFAA6C3873A78 = 2533330625626144; // 0xF8
}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=32 // TypeDefIndex: 1265
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=44 // TypeDefIndex: 1266
{}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=128 // TypeDefIndex: 1267
{}

// Namespace: Unity
internal sealed class ThrowStub : ObjectDisposedException // TypeDefIndex: 1268
{
	// Methods
	// RVA: 0x59A210 Offset: 0x598A10 VA: 0x18059A210
	public static void ThrowNotSupportedException() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1269
{}

// Namespace: System.Linq
internal static class Error // TypeDefIndex: 1270
{
	// Methods
	// RVA: 0x68F1F0 Offset: 0x68D9F0 VA: 0x18068F1F0
	internal static Exception ArgumentNull(string s) { }
	// RVA: 0x68F290 Offset: 0x68DA90 VA: 0x18068F290
	internal static Exception ArgumentOutOfRange(string s) { }
	// RVA: 0x68F340 Offset: 0x68DB40 VA: 0x18068F340
	internal static Exception MoreThanOneMatch() { }
	// RVA: 0x68F3D0 Offset: 0x68DBD0 VA: 0x18068F3D0
	internal static Exception NoElements() { }
}

// Namespace: System.Linq
public static class Enumerable // TypeDefIndex: 1271
{
	// Methods
	// RVA: 0x532320 Offset: 0x530B20 VA: 0x180532320
	public static IEnumerable<TSource> Where(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	// RVA: 0x530F80 Offset: 0x52F780 VA: 0x180530F80
	public static IEnumerable<TResult> Select(IEnumerable<TSource> source, Func<TSource, TResult> selector) { }
	// RVA: 0x530220 Offset: 0x52EA20 VA: 0x180530220
	private static Func<TSource, bool> CombinePredicates(Func<TSource, bool> predicate1, Func<TSource, bool> predicate2) { }
	// RVA: 0x5302F0 Offset: 0x52EAF0 VA: 0x1805302F0
	private static Func<TSource, TResult> CombineSelectors(Func<TSource, TMiddle> selector1, Func<TMiddle, TResult> selector2) { }
	// RVA: 0x531910 Offset: 0x530110 VA: 0x180531910
	public static IEnumerable<TResult> SelectMany(IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector) { }
	// RVA: 0x5319F0 Offset: 0x5301F0 VA: 0x1805319F0
	private static IEnumerable<TResult> SelectManyIterator(IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector) { }
	// RVA: 0x530DC0 Offset: 0x52F5C0 VA: 0x180530DC0
	public static IOrderedEnumerable<TSource> OrderBy(IEnumerable<TSource> source, Func<TSource, TKey> keySelector) { }
	// RVA: 0x531D20 Offset: 0x530520 VA: 0x180531D20
	public static IOrderedEnumerable<TSource> ThenBy(IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector) { }
	// RVA: 0x532160 Offset: 0x530960 VA: 0x180532160
	public static TSource[] ToArray(IEnumerable<TSource> source) { }
	// RVA: 0x532240 Offset: 0x530A40 VA: 0x180532240
	public static List<TSource> ToList(IEnumerable<TSource> source) { }
	// RVA: 0x530920 Offset: 0x52F120 VA: 0x180530920
	public static TSource First(IEnumerable<TSource> source) { }
	// RVA: 0x530BA0 Offset: 0x52F3A0 VA: 0x180530BA0
	public static TSource FirstOrDefault(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	// RVA: 0x531A80 Offset: 0x530280 VA: 0x180531A80
	public static TSource SingleOrDefault(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	// RVA: 0x530E40 Offset: 0x52F640 VA: 0x180530E40
	public static IEnumerable<TResult> Repeat(TResult element, int count) { }
	// RVA: 0x530F00 Offset: 0x52F700 VA: 0x180530F00
	private static IEnumerable<TResult> RepeatIterator(TResult element, int count) { }
	// RVA: 0x52FE60 Offset: 0x52E660 VA: 0x18052FE60
	public static bool Any(IEnumerable<TSource> source) { }
	// RVA: 0x530000 Offset: 0x52E800 VA: 0x180530000
	public static bool Any(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	// RVA: 0x5306D0 Offset: 0x52EED0 VA: 0x1805306D0
	public static int Count(IEnumerable<TSource> source) { }
	// RVA: 0x5303C0 Offset: 0x52EBC0 VA: 0x1805303C0
	public static bool Contains(IEnumerable<TSource> source, TSource value) { }
	// RVA: 0x530470 Offset: 0x52EC70 VA: 0x180530470
	public static bool Contains(IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer) { }
}

// Namespace: 
private abstract class Enumerable.Iterator<TSource> : IEnumerable<TSource>, IEnumerable, IEnumerator<TSource>, IDisposable, IEnumerator // TypeDefIndex: 1272
{
	// Fields
	private int threadId; // 0x0
	internal int state; // 0x0
	internal TSource current; // 0x0

	// Properties
	public TSource Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x72AB90 Offset: 0x729390 VA: 0x18072AB90
	public void .ctor() { }
	// RVA: 0x72ABD0 Offset: 0x7293D0 VA: 0x18072ABD0 Slot: 6
	public TSource get_Current() { }
	// RVA: -1 Offset: -1 Slot: 10
	public abstract Enumerable.Iterator<TSource> Clone() { }
	// RVA: 0x72ABE0 Offset: 0x7293E0 VA: 0x18072ABE0 Slot: 11
	public virtual void Dispose() { }
	// RVA: 0x72ABF0 Offset: 0x7293F0 VA: 0x18072ABF0 Slot: 4
	public IEnumerator<TSource> GetEnumerator() { }
	// RVA: -1 Offset: -1 Slot: 12
	public abstract bool MoveNext() { }
	// RVA: -1 Offset: -1 Slot: 13
	public abstract IEnumerable<TResult> Select(Func<TSource, TResult> selector) { }
	// RVA: -1 Offset: -1 Slot: 14
	public abstract IEnumerable<TSource> Where(Func<TSource, bool> predicate) { }
	// RVA: 0x72AC70 Offset: 0x729470 VA: 0x18072AC70 Slot: 9
	private object System.Collections.IEnumerator.get_Current() { }
	// RVA: 0x72ACC0 Offset: 0x7294C0 VA: 0x18072ACC0 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
private class Enumerable.WhereEnumerableIterator<TSource> : Enumerable.Iterator<TSource> // TypeDefIndex: 1273
{
	// Fields
	private IEnumerable<TSource> source; // 0x0
	private Func<TSource, bool> predicate; // 0x0
	private IEnumerator<TSource> enumerator; // 0x0

	// Methods
	// RVA: 0x816450 Offset: 0x814C50 VA: 0x180816450
	public void .ctor(IEnumerable<TSource> source, Func<TSource, bool> predicate) { }
	// RVA: 0x8164A0 Offset: 0x814CA0 VA: 0x1808164A0 Slot: 10
	public override Enumerable.Iterator<TSource> Clone() { }
	// RVA: 0x816680 Offset: 0x814E80 VA: 0x180816680 Slot: 11
	public override void Dispose() { }
	// RVA: 0x816740 Offset: 0x814F40 VA: 0x180816740 Slot: 12
	public override bool MoveNext() { }
	// RVA: 0x433BB0 Offset: 0x4323B0 VA: 0x180433BB0 Slot: 13
	public override IEnumerable<TResult> Select(Func<TSource, TResult> selector) { }
	// RVA: 0x8168D0 Offset: 0x8150D0 VA: 0x1808168D0 Slot: 14
	public override IEnumerable<TSource> Where(Func<TSource, bool> predicate) { }
}

// Namespace: 
private class Enumerable.WhereArrayIterator<TSource> : Enumerable.Iterator<TSource> // TypeDefIndex: 1274
{
	// Fields
	private TSource[] source; // 0x0
	private Func<TSource, bool> predicate; // 0x0
	private int index; // 0x0

	// Methods
	// RVA: 0x816210 Offset: 0x814A10 VA: 0x180816210
	public void .ctor(TSource[] source, Func<TSource, bool> predicate) { }
	// RVA: 0x816260 Offset: 0x814A60 VA: 0x180816260 Slot: 10
	public override Enumerable.Iterator<TSource> Clone() { }
	// RVA: 0x8162E0 Offset: 0x814AE0 VA: 0x1808162E0 Slot: 12
	public override bool MoveNext() { }
	// RVA: 0x433BB0 Offset: 0x4323B0 VA: 0x180433BB0 Slot: 13
	public override IEnumerable<TResult> Select(Func<TSource, TResult> selector) { }
	// RVA: 0x8163B0 Offset: 0x814BB0 VA: 0x1808163B0 Slot: 14
	public override IEnumerable<TSource> Where(Func<TSource, bool> predicate) { }
}

// Namespace: 
private class Enumerable.WhereListIterator<TSource> : Enumerable.Iterator<TSource> // TypeDefIndex: 1275
{
	// Fields
	private List<TSource> source; // 0x0
	private Func<TSource, bool> predicate; // 0x0
	private List.Enumerator<TSource> enumerator; // 0x0

	// Methods
	// RVA: 0x816210 Offset: 0x814A10 VA: 0x180816210
	public void .ctor(List<TSource> source, Func<TSource, bool> predicate) { }
	// RVA: 0x816260 Offset: 0x814A60 VA: 0x180816260 Slot: 10
	public override Enumerable.Iterator<TSource> Clone() { }
	// RVA: 0x816F30 Offset: 0x815730 VA: 0x180816F30 Slot: 12
	public override bool MoveNext() { }
	// RVA: 0x433BB0 Offset: 0x4323B0 VA: 0x180433BB0 Slot: 13
	public override IEnumerable<TResult> Select(Func<TSource, TResult> selector) { }
	// RVA: 0x816C40 Offset: 0x815440 VA: 0x180816C40 Slot: 14
	public override IEnumerable<TSource> Where(Func<TSource, bool> predicate) { }
}

// Namespace: 
private class Enumerable.WhereSelectEnumerableIterator<TSource, TResult> : Enumerable.Iterator<TResult> // TypeDefIndex: 1276
{
	// Fields
	private IEnumerable<TSource> source; // 0x0
	private Func<TSource, bool> predicate; // 0x0
	private Func<TSource, TResult> selector; // 0x0
	private IEnumerator<TSource> enumerator; // 0x0

	// Methods
	// RVA: 0x817130 Offset: 0x815930 VA: 0x180817130
	public void .ctor(IEnumerable<TSource> source, Func<TSource, bool> predicate, Func<TSource, TResult> selector) { }
	// RVA: 0x8171A0 Offset: 0x8159A0 VA: 0x1808171A0 Slot: 10
	public override Enumerable.Iterator<TResult> Clone() { }
	// RVA: 0x817680 Offset: 0x815E80 VA: 0x180817680 Slot: 11
	public override void Dispose() { }
	// RVA: 0x817740 Offset: 0x815F40 VA: 0x180817740 Slot: 12
	public override bool MoveNext() { }
	// RVA: 0x433CD0 Offset: 0x4324D0 VA: 0x180433CD0 Slot: 13
	public override IEnumerable<TResult2> Select(Func<TResult, TResult2> selector) { }
	// RVA: 0x817900 Offset: 0x816100 VA: 0x180817900 Slot: 14
	public override IEnumerable<TResult> Where(Func<TResult, bool> predicate) { }
}

// Namespace: 
private class Enumerable.WhereSelectArrayIterator<TSource, TResult> : Enumerable.Iterator<TResult> // TypeDefIndex: 1277
{
	// Fields
	private TSource[] source; // 0x0
	private Func<TSource, bool> predicate; // 0x0
	private Func<TSource, TResult> selector; // 0x0
	private int index; // 0x0

	// Methods
	// RVA: 0x817130 Offset: 0x815930 VA: 0x180817130
	public void .ctor(TSource[] source, Func<TSource, bool> predicate, Func<TSource, TResult> selector) { }
	// RVA: 0x8171A0 Offset: 0x8159A0 VA: 0x1808171A0 Slot: 10
	public override Enumerable.Iterator<TResult> Clone() { }
	// RVA: 0x817240 Offset: 0x815A40 VA: 0x180817240 Slot: 12
	public override bool MoveNext() { }
	// RVA: 0x433CD0 Offset: 0x4324D0 VA: 0x180433CD0 Slot: 13
	public override IEnumerable<TResult2> Select(Func<TResult, TResult2> selector) { }
	// RVA: 0x817320 Offset: 0x815B20 VA: 0x180817320 Slot: 14
	public override IEnumerable<TResult> Where(Func<TResult, bool> predicate) { }
}

// Namespace: 
private class Enumerable.WhereSelectListIterator<TSource, TResult> : Enumerable.Iterator<TResult> // TypeDefIndex: 1278
{
	// Fields
	private List<TSource> source; // 0x0
	private Func<TSource, bool> predicate; // 0x0
	private Func<TSource, TResult> selector; // 0x0
	private List.Enumerator<TSource> enumerator; // 0x0

	// Methods
	// RVA: 0x817130 Offset: 0x815930 VA: 0x180817130
	public void .ctor(List<TSource> source, Func<TSource, bool> predicate, Func<TSource, TResult> selector) { }
	// RVA: 0x8171A0 Offset: 0x8159A0 VA: 0x1808171A0 Slot: 10
	public override Enumerable.Iterator<TResult> Clone() { }
	// RVA: 0x8181E0 Offset: 0x8169E0 VA: 0x1808181E0 Slot: 12
	public override bool MoveNext() { }
	// RVA: 0x433CD0 Offset: 0x4324D0 VA: 0x180433CD0 Slot: 13
	public override IEnumerable<TResult2> Select(Func<TResult, TResult2> selector) { }
	// RVA: 0x817900 Offset: 0x816100 VA: 0x180817900 Slot: 14
	public override IEnumerable<TResult> Where(Func<TResult, bool> predicate) { }
}

// Namespace: 
private sealed class Enumerable.<>c__DisplayClass6_0<TSource> // TypeDefIndex: 1279
{
	// Fields
	public Func<TSource, bool> predicate1; // 0x0
	public Func<TSource, bool> predicate2; // 0x0

	// Methods
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
	// RVA: 0x7C77B0 Offset: 0x7C5FB0 VA: 0x1807C77B0
	internal bool <CombinePredicates>b__0(TSource x) { }
}

// Namespace: 
private sealed class Enumerable.<>c__DisplayClass7_0<TSource, TMiddle, TResult> // TypeDefIndex: 1280
{
	// Fields
	public Func<TMiddle, TResult> selector2; // 0x0
	public Func<TSource, TMiddle> selector1; // 0x0

	// Methods
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
	// RVA: 0x7C7950 Offset: 0x7C6150 VA: 0x1807C7950
	internal TResult <CombineSelectors>b__0(TSource x) { }
}

// Namespace: 
private sealed class Enumerable.<SelectManyIterator>d__17<TSource, TResult> : IEnumerable<TResult>, IEnumerable, IEnumerator<TResult>, IDisposable, IEnumerator // TypeDefIndex: 1281
{
	// Fields
	private int <>1__state; // 0x0
	private TResult <>2__current; // 0x0
	private int <>l__initialThreadId; // 0x0
	private IEnumerable<TSource> source; // 0x0
	public IEnumerable<TSource> <>3__source; // 0x0
	private Func<TSource, IEnumerable<TResult>> selector; // 0x0
	public Func<TSource, IEnumerable<TResult>> <>3__selector; // 0x0
	private IEnumerator<TSource> <>7__wrap1; // 0x0
	private IEnumerator<TResult> <>7__wrap2; // 0x0

	// Properties
	private TResult System.Collections.Generic.IEnumerator<TResult>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C8470 Offset: 0x7C6C70 VA: 0x1807C8470
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C85D0 Offset: 0x7C6DD0 VA: 0x1807C85D0 Slot: 7
	private void System.IDisposable.Dispose() { }
	// RVA: 0x7C86A0 Offset: 0x7C6EA0 VA: 0x1807C86A0 Slot: 8
	private bool MoveNext() { }
	// RVA: 0x7C8970 Offset: 0x7C7170 VA: 0x1807C8970
	private void <>m__Finally1() { }
	// RVA: 0x7C8A00 Offset: 0x7C7200 VA: 0x1807C8A00
	private void <>m__Finally2() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 6
	private TResult System.Collections.Generic.IEnumerator<TResult>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 9
	private object System.Collections.IEnumerator.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C8A90 Offset: 0x7C7290 VA: 0x1807C8A90 Slot: 4
	private IEnumerator<TResult> System.Collections.Generic.IEnumerable<TResult>.GetEnumerator() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C8B60 Offset: 0x7C7360 VA: 0x1807C8B60 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
private sealed class Enumerable.<RepeatIterator>d__117<TResult> : IEnumerable<TResult>, IEnumerable, IEnumerator<TResult>, IDisposable, IEnumerator // TypeDefIndex: 1282
{
	// Fields
	private int <>1__state; // 0x0
	private TResult <>2__current; // 0x0
	private int <>l__initialThreadId; // 0x0
	private TResult element; // 0x0
	public TResult <>3__element; // 0x0
	private int <i>5__1; // 0x0
	private int count; // 0x0
	public int <>3__count; // 0x0

	// Properties
	private TResult System.Collections.Generic.IEnumerator<TResult>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C8470 Offset: 0x7C6C70 VA: 0x1807C8470
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	private void System.IDisposable.Dispose() { }
	// RVA: 0x7C84C0 Offset: 0x7C6CC0 VA: 0x1807C84C0 Slot: 8
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 6
	private TResult System.Collections.Generic.IEnumerator<TResult>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 9
	private object System.Collections.IEnumerator.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C8500 Offset: 0x7C6D00 VA: 0x1807C8500 Slot: 4
	private IEnumerator<TResult> System.Collections.Generic.IEnumerable<TResult>.GetEnumerator() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x72AE20 Offset: 0x729620 VA: 0x18072AE20 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: System.Linq
public interface IOrderedEnumerable<TElement> : IEnumerable<TElement>, IEnumerable // TypeDefIndex: 1283
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract IOrderedEnumerable<TElement> CreateOrderedEnumerable(Func<TElement, TKey> keySelector, IComparer<TKey> comparer, bool descending) { }
}

// Namespace: System.Linq
internal abstract class OrderedEnumerable<TElement> : IOrderedEnumerable<TElement>, IEnumerable<TElement>, IEnumerable // TypeDefIndex: 1284
{
	// Fields
	internal IEnumerable<TElement> source; // 0x0

	// Methods
	// RVA: 0x7FB020 Offset: 0x7F9820 VA: 0x1807FB020 Slot: 5
	public IEnumerator<TElement> GetEnumerator() { }
	// RVA: -1 Offset: -1 Slot: 7
	internal abstract EnumerableSorter<TElement> GetEnumerableSorter(EnumerableSorter<TElement> next) { }
	// RVA: 0x72ACC0 Offset: 0x7294C0 VA: 0x18072ACC0 Slot: 6
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x433B00 Offset: 0x432300 VA: 0x180433B00 Slot: 4
	private IOrderedEnumerable<TElement> System.Linq.IOrderedEnumerable<TElement>.CreateOrderedEnumerable(Func<TElement, TKey> keySelector, IComparer<TKey> comparer, bool descending) { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	protected void .ctor() { }
}

// Namespace: 
private sealed class OrderedEnumerable.<GetEnumerator>d__1<TElement> : IEnumerator<TElement>, IDisposable, IEnumerator // TypeDefIndex: 1285
{
	// Fields
	private int <>1__state; // 0x0
	private TElement <>2__current; // 0x0
	public OrderedEnumerable<TElement> <>4__this; // 0x0
	private Buffer<TElement> <buffer>5__1; // 0x0
	private int[] <map>5__2; // 0x0
	private int <i>5__3; // 0x0

	// Properties
	private TElement System.Collections.Generic.IEnumerator<TElement>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C7A90 Offset: 0x7C6290 VA: 0x1807C7A90
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x7C7DF0 Offset: 0x7C65F0 VA: 0x1807C7DF0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private TElement System.Collections.Generic.IEnumerator<TElement>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: System.Linq
internal class OrderedEnumerable<TElement, TKey> : OrderedEnumerable<TElement> // TypeDefIndex: 1286
{
	// Fields
	internal OrderedEnumerable<TElement> parent; // 0x0
	internal Func<TElement, TKey> keySelector; // 0x0
	internal IComparer<TKey> comparer; // 0x0
	internal bool descending; // 0x0

	// Methods
	// RVA: 0x7FB0A0 Offset: 0x7F98A0 VA: 0x1807FB0A0
	internal void .ctor(IEnumerable<TElement> source, Func<TElement, TKey> keySelector, IComparer<TKey> comparer, bool descending) { }
	// RVA: 0x7FB1E0 Offset: 0x7F99E0 VA: 0x1807FB1E0 Slot: 7
	internal override EnumerableSorter<TElement> GetEnumerableSorter(EnumerableSorter<TElement> next) { }
}

// Namespace: System.Linq
internal abstract class EnumerableSorter<TElement> // TypeDefIndex: 1287
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	internal abstract void ComputeKeys(TElement[] elements, int count) { }
	// RVA: -1 Offset: -1 Slot: 5
	internal abstract int CompareKeys(int index1, int index2) { }
	// RVA: 0x7254D0 Offset: 0x723CD0 VA: 0x1807254D0
	internal int[] Sort(TElement[] elements, int count) { }
	// RVA: 0x7255F0 Offset: 0x723DF0 VA: 0x1807255F0
	private void QuickSort(int[] map, int left, int right) { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	protected void .ctor() { }
}

// Namespace: System.Linq
internal class EnumerableSorter<TElement, TKey> : EnumerableSorter<TElement> // TypeDefIndex: 1288
{
	// Fields
	internal Func<TElement, TKey> keySelector; // 0x0
	internal IComparer<TKey> comparer; // 0x0
	internal bool descending; // 0x0
	internal EnumerableSorter<TElement> next; // 0x0
	internal TKey[] keys; // 0x0

	// Methods
	// RVA: 0x725810 Offset: 0x724010 VA: 0x180725810
	internal void .ctor(Func<TElement, TKey> keySelector, IComparer<TKey> comparer, bool descending, EnumerableSorter<TElement> next) { }
	// RVA: 0x725880 Offset: 0x724080 VA: 0x180725880 Slot: 4
	internal override void ComputeKeys(TElement[] elements, int count) { }
	// RVA: 0x725990 Offset: 0x724190 VA: 0x180725990 Slot: 5
	internal override int CompareKeys(int index1, int index2) { }
}

// Namespace: System.Linq
internal struct Buffer<TElement> // TypeDefIndex: 1289
{
	// Fields
	internal TElement[] items; // 0x0
	internal int count; // 0x0

	// Methods
	// RVA: 0x22720 Offset: 0x21B20 VA: 0x180022720
	internal void .ctor(IEnumerable<TElement> source) { }
	// RVA: 0x22730 Offset: 0x21B30 VA: 0x180022730
	internal TElement[] ToArray() { }
}

// Namespace: System.Collections.Generic
[Serializable]
public class HashSet<T> : ICollection<T>, IEnumerable<T>, IEnumerable, IReadOnlyCollection<T>, ISerializable, IDeserializationCallback // TypeDefIndex: 1290
{
	// Fields
	private const int Lower31BitMask = 2147483647; // 0x0
	private const int StackAllocThreshold = 100; // 0x0
	private const int ShrinkThreshold = 3; // 0x0
	private const string CapacityName = "Capacity"; // 0x0
	private const string ElementsName = "Elements"; // 0x0
	private const string ComparerName = "Comparer"; // 0x0
	private const string VersionName = "Version"; // 0x0
	private int[] _buckets; // 0x0
	private HashSet.Slot<T>[] _slots; // 0x0
	private int _count; // 0x0
	private int _lastIndex; // 0x0
	private int _freeList; // 0x0
	private IEqualityComparer<T> _comparer; // 0x0
	private int _version; // 0x0
	private SerializationInfo _siInfo; // 0x0

	// Properties
	public int Count { get; }
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }

	// Methods
	// RVA: 0x7F6FA0 Offset: 0x7F57A0 VA: 0x1807F6FA0
	public void .ctor() { }
	// RVA: 0x7F7000 Offset: 0x7F5800 VA: 0x1807F7000
	public void .ctor(IEqualityComparer<T> comparer) { }
	// RVA: 0x7F7050 Offset: 0x7F5850 VA: 0x1807F7050
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x727A50 Offset: 0x726250 VA: 0x180727A50 Slot: 6
	private void System.Collections.Generic.ICollection<T>.Add(T item) { }
	// RVA: 0x7F7070 Offset: 0x7F5870 VA: 0x1807F7070 Slot: 7
	public void Clear() { }
	// RVA: 0x7F92D0 Offset: 0x7F7AD0 VA: 0x1807F92D0 Slot: 8
	public bool Contains(T item) { }
	// RVA: 0x7F7230 Offset: 0x7F5A30 VA: 0x1807F7230 Slot: 9
	public void CopyTo(T[] array, int arrayIndex) { }
	// RVA: 0x7F9440 Offset: 0x7F7C40 VA: 0x1807F9440 Slot: 10
	public bool Remove(T item) { }
	// RVA: 0x197B20 Offset: 0x196320 VA: 0x180197B20 Slot: 13
	public int get_Count() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 5
	private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly() { }
	// RVA: 0x7F7530 Offset: 0x7F5D30 VA: 0x1807F7530
	public HashSet.Enumerator<T> GetEnumerator() { }
	// RVA: 0x7F7560 Offset: 0x7F5D60 VA: 0x1807F7560 Slot: 11
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// RVA: 0x7F7560 Offset: 0x7F5D60 VA: 0x1807F7560 Slot: 12
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x7F75E0 Offset: 0x7F5DE0 VA: 0x1807F75E0 Slot: 16
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context) { }
	// RVA: 0x7F79A0 Offset: 0x7F61A0 VA: 0x1807F79A0 Slot: 17
	public virtual void OnDeserialization(object sender) { }
	// RVA: 0x727A50 Offset: 0x726250 VA: 0x180727A50 Slot: 18
	public bool Add(T item) { }
	// RVA: 0x7F7CA0 Offset: 0x7F64A0 VA: 0x1807F7CA0
	public void CopyTo(T[] array) { }
	// RVA: 0x7F7CE0 Offset: 0x7F64E0 VA: 0x1807F7CE0
	public void CopyTo(T[] array, int arrayIndex, int count) { }
	// RVA: 0x7F7F30 Offset: 0x7F6730 VA: 0x1807F7F30
	private void Initialize(int capacity) { }
	// RVA: 0x7F8020 Offset: 0x7F6820 VA: 0x1807F8020
	private void IncreaseCapacity() { }
	// RVA: 0x7F8120 Offset: 0x7F6920 VA: 0x1807F8120
	private void SetCapacity(int newSize) { }
	// RVA: 0x7F82B0 Offset: 0x7F6AB0 VA: 0x1807F82B0
	private bool AddIfNotPresent(T value) { }
	// RVA: 0x7F85D0 Offset: 0x7F6DD0 VA: 0x1807F85D0
	private int InternalGetHashCode(T item) { }
}

// Namespace: 
internal struct HashSet.Slot<T> // TypeDefIndex: 1291
{
	// Fields
	internal int hashCode; // 0x0
	internal int next; // 0x0
	internal T value; // 0x0
}

// Namespace: 
[Serializable]
public struct HashSet.Enumerator<T> : IEnumerator<T>, IDisposable, IEnumerator // TypeDefIndex: 1292
{
	// Fields
	private HashSet<T> _set; // 0x0
	private int _index; // 0x0
	private int _version; // 0x0
	private T _current; // 0x0

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x1064E0 Offset: 0x1058E0 VA: 0x1801064E0
	internal void .ctor(HashSet<T> set) { }
	// RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80 Slot: 5
	public void Dispose() { }
	// RVA: 0x107910 Offset: 0x106D10 VA: 0x180107910 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x2100 Offset: 0x1500 VA: 0x180002100 Slot: 4
	public T get_Current() { }
	// RVA: 0x106630 Offset: 0x105A30 VA: 0x180106630 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1293
{}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xDB480 Offset: 0xDA880 VA: 0x1800DB480
internal class UnityEngineModuleAssembly : Attribute // TypeDefIndex: 1294
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
internal sealed class UnityString // TypeDefIndex: 1295
{
	// Methods
	// RVA: 0x68BED0 Offset: 0x68A6D0 VA: 0x18068BED0
	public static string Format(string fmt, object[] args) { }
}

// Namespace: UnityEngine.Scripting
[AttributeUsageAttribute] // RVA: 0xDB4A0 Offset: 0xDA8A0 VA: 0x1800DB4A0
internal class UsedByNativeCodeAttribute : Attribute // TypeDefIndex: 1296
{
	// Fields
	private string <Name>k__BackingField; // 0x10

	// Properties
	public string Name { set; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(string name) { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void set_Name(string value) { }
}

// Namespace: UnityEngine.Scripting
[AttributeUsageAttribute] // RVA: 0xDB4A0 Offset: 0xDA8A0 VA: 0x1800DB4A0
internal class RequiredByNativeCodeAttribute : Attribute // TypeDefIndex: 1297
{
	// Fields
	private string <Name>k__BackingField; // 0x10
	private bool <Optional>k__BackingField; // 0x18
	private bool <GenerateProxy>k__BackingField; // 0x19

	// Properties
	public string Name { set; }
	public bool Optional { set; }
	public bool GenerateProxy { set; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(string name) { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void set_Name(string value) { }
	// RVA: 0x2E9780 Offset: 0x2E7F80 VA: 0x1802E9780
	public void set_Optional(bool value) { }
	// RVA: 0x68BEC0 Offset: 0x68A6C0 VA: 0x18068BEC0
	public void set_GenerateProxy(bool value) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1298
{}

// Namespace: UnityEngineInternal
internal enum LightmapType // TypeDefIndex: 1299
{
	// Fields
	public int value__; // 0x0
	public const LightmapType NoLightmap = -1; // 0x0
	public const LightmapType StaticLightmap = 0; // 0x0
	public const LightmapType DynamicLightmap = 1; // 0x0
}

// Namespace: UnityEngineInternal
public struct MathfInternal // TypeDefIndex: 1300
{
	// Fields
	public static float FloatMinNormal; // 0x0
	public static float FloatMinDenormal; // 0x4
	public static bool IsFlushToZeroEnabled; // 0x8

	// Methods
	// RVA: 0x4DE9C0 Offset: 0x4DD1C0 VA: 0x1804DE9C0
	private static void .cctor() { }
}

// Namespace: UnityEngineInternal
public class GenericStack : Stack // TypeDefIndex: 1301
{
	// Methods
	// RVA: 0x546470 Offset: 0x544C70 VA: 0x180546470
	public void .ctor() { }
}

// Namespace: Unity.Profiling
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct ProfilerMarker // TypeDefIndex: 1302
{
	// Fields
	[NativeDisableUnsafePtrRestrictionAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal readonly IntPtr m_Ptr; // 0x0

	// Methods
	// RVA: 0x1E1E0 Offset: 0x1D5E0 VA: 0x18001E1E0
	public void .ctor(string name) { }
}

// Namespace: Unity.Profiling.LowLevel
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum MarkerFlags // TypeDefIndex: 1303
{
	// Fields
	public ushort value__; // 0x0
	public const MarkerFlags Default = 0; // 0x0
	public const MarkerFlags Script = 2; // 0x0
	public const MarkerFlags ScriptInvoke = 32; // 0x0
	public const MarkerFlags ScriptDeepProfiler = 64; // 0x0
	public const MarkerFlags AvailabilityEditor = 4; // 0x0
	public const MarkerFlags Warning = 16; // 0x0
	public const MarkerFlags Counter = 128; // 0x0
}

// Namespace: Unity.Profiling.LowLevel.Unsafe
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public static class ProfilerUnsafeUtility // TypeDefIndex: 1304
{
	// Methods
	// RVA: 0x4F3E60 Offset: 0x4F2660 VA: 0x1804F3E60
	public static IntPtr CreateMarker(string name, ushort categoryId, MarkerFlags flags, int metadataCount) { }
}

// Namespace: Unity.Jobs
public struct JobHandle // TypeDefIndex: 1305
{
	// Fields
	internal IntPtr jobGroup; // 0x0
	internal int version; // 0x8

	// Methods
	// RVA: 0x54A250 Offset: 0x548A50 VA: 0x18054A250
	public static void ScheduleBatchedJobs() { }
}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0xDC7B0 Offset: 0xDBBB0 VA: 0x1800DC7B0
[AttributeUsageAttribute] // RVA: 0xDC7B0 Offset: 0xDBBB0 VA: 0x1800DC7B0
public sealed class ReadOnlyAttribute : Attribute // TypeDefIndex: 1306
{}

// Namespace: Unity.Collections
[AttributeUsageAttribute] // RVA: 0xDC7D0 Offset: 0xDBBD0 VA: 0x1800DC7D0
[RequiredByNativeCodeAttribute] // RVA: 0xDC7D0 Offset: 0xDBBD0 VA: 0x1800DC7D0
public sealed class WriteOnlyAttribute : Attribute // TypeDefIndex: 1307
{}

// Namespace: Unity.Collections
[RequiredByNativeCodeAttribute] // RVA: 0xDC7F0 Offset: 0xDBBF0 VA: 0x1800DC7F0
[AttributeUsageAttribute] // RVA: 0xDC7F0 Offset: 0xDBBF0 VA: 0x1800DC7F0
public sealed class DeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 1308
{}

// Namespace: Unity.Collections
[AttributeUsageAttribute] // RVA: 0xD9DA0 Offset: 0xD91A0 VA: 0x1800D9DA0
[RequiredByNativeCodeAttribute] // RVA: 0xD9DA0 Offset: 0xD91A0 VA: 0x1800D9DA0
public sealed class NativeFixedLengthAttribute : Attribute // TypeDefIndex: 1309
{}

// Namespace: Unity.Collections
[AttributeUsageAttribute] // RVA: 0xD9DA0 Offset: 0xD91A0 VA: 0x1800D9DA0
[RequiredByNativeCodeAttribute] // RVA: 0xD9DA0 Offset: 0xD91A0 VA: 0x1800D9DA0
public sealed class NativeMatchesParallelForLengthAttribute : Attribute // TypeDefIndex: 1310
{}

// Namespace: Unity.Collections
[AttributeUsageAttribute] // RVA: 0xD9DA0 Offset: 0xD91A0 VA: 0x1800D9DA0
[RequiredByNativeCodeAttribute] // RVA: 0xD9DA0 Offset: 0xD91A0 VA: 0x1800D9DA0
public sealed class NativeDisableParallelForRestrictionAttribute : Attribute // TypeDefIndex: 1311
{}

// Namespace: Unity.Collections
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum Allocator // TypeDefIndex: 1312
{
	// Fields
	public int value__; // 0x0
	public const Allocator Invalid = 0; // 0x0
	public const Allocator None = 1; // 0x0
	public const Allocator Temp = 2; // 0x0
	public const Allocator TempJob = 3; // 0x0
	public const Allocator Persistent = 4; // 0x0
	public const Allocator AudioKernel = 5; // 0x0
}

// Namespace: Unity.Collections
public static class NativeLeakDetection // TypeDefIndex: 1313
{
	// Fields
	private static int s_NativeLeakDetectionMode; // 0xAC1F0

	// Methods
	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xDC810 Offset: 0xDBC10 VA: 0x1800DC810
	// RVA: 0x4E8A50 Offset: 0x4E7250 VA: 0x1804E8A50
	private static void Initialize() { }
}

// Namespace: Unity.Collections
[NativeContainerSupportsDeallocateOnJobCompletionAttribute] // RVA: 0xDC820 Offset: 0xDBC20 VA: 0x1800DC820
[NativeContainerSupportsMinMaxWriteRestrictionAttribute] // RVA: 0xDC820 Offset: 0xDBC20 VA: 0x1800DC820
[NativeContainerAttribute] // RVA: 0xDC820 Offset: 0xDBC20 VA: 0x1800DC820
[DefaultMemberAttribute] // RVA: 0xDC820 Offset: 0xDBC20 VA: 0x1800DC820
[NativeContainerSupportsDeferredConvertListToArray] // RVA: 0xDC820 Offset: 0xDBC20 VA: 0x1800DC820
public struct NativeArray<T> : IDisposable, IEnumerable<T>, IEnumerable, IEquatable<NativeArray<T>> // TypeDefIndex: 1314
{
	// Fields
	[NativeDisableUnsafePtrRestrictionAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal void* m_Buffer; // 0x0
	internal int m_Length; // 0x0
	internal Allocator m_AllocatorLabel; // 0x0

	// Properties
	public int Length { get; }
	public T Item { get; set; }

	// Methods
	// RVA: 0x1F40 Offset: 0x1340 VA: 0x180001F40
	public int get_Length() { }
	// RVA: 0x12E460 Offset: 0x12D860 VA: 0x18012E460
	public T get_Item(int index) { }
	// RVA: 0x12E490 Offset: 0x12D890 VA: 0x18012E490
	public void set_Item(int index, T value) { }
	// RVA: 0x12E4C0 Offset: 0x12D8C0 VA: 0x18012E4C0 Slot: 4
	public void Dispose() { }
	// RVA: 0x12E540 Offset: 0x12D940 VA: 0x18012E540
	public NativeArray.Enumerator<T> GetEnumerator() { }
	// RVA: 0x12E5A0 Offset: 0x12D9A0 VA: 0x18012E5A0 Slot: 5
	private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { }
	// RVA: 0x12E640 Offset: 0x12DA40 VA: 0x18012E640 Slot: 6
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x12E700 Offset: 0x12DB00 VA: 0x18012E700 Slot: 7
	public bool Equals(NativeArray<T> other) { }
	// RVA: 0x12E730 Offset: 0x12DB30 VA: 0x18012E730 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x12E840 Offset: 0x12DC40 VA: 0x18012E840 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: 
public struct NativeArray.Enumerator<T> : IEnumerator<T>, IEnumerator, IDisposable // TypeDefIndex: 1315
{
	// Fields
	private NativeArray<T> m_Array; // 0x0
	private int m_Index; // 0x0

	// Properties
	public T Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	// RVA: 0x1057A0 Offset: 0x104BA0 VA: 0x1801057A0
	public void .ctor(ref NativeArray<T> array) { }
	// RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80 Slot: 5
	public void Dispose() { }
	// RVA: 0x1057B0 Offset: 0x104BB0 VA: 0x1801057B0 Slot: 6
	public bool MoveNext() { }
	// RVA: 0x1057C0 Offset: 0x104BC0 VA: 0x1801057C0 Slot: 4
	public T get_Current() { }
	// RVA: 0x1057F0 Offset: 0x104BF0 VA: 0x1801057F0 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xDC850 Offset: 0xDBC50 VA: 0x1800DC850
[AttributeUsageAttribute] // RVA: 0xDC850 Offset: 0xDBC50 VA: 0x1800DC850
public sealed class NativeContainerAttribute : Attribute // TypeDefIndex: 1316
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xDC870 Offset: 0xDBC70 VA: 0x1800DC870
[RequiredByNativeCodeAttribute] // RVA: 0xDC870 Offset: 0xDBC70 VA: 0x1800DC870
public sealed class NativeContainerIsReadOnlyAttribute : Attribute // TypeDefIndex: 1317
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xDC870 Offset: 0xDBC70 VA: 0x1800DC870
[RequiredByNativeCodeAttribute] // RVA: 0xDC870 Offset: 0xDBC70 VA: 0x1800DC870
public sealed class NativeContainerIsAtomicWriteOnlyAttribute : Attribute // TypeDefIndex: 1318
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xDC870 Offset: 0xDBC70 VA: 0x1800DC870
[RequiredByNativeCodeAttribute] // RVA: 0xDC870 Offset: 0xDBC70 VA: 0x1800DC870
public sealed class NativeContainerSupportsMinMaxWriteRestrictionAttribute : Attribute // TypeDefIndex: 1319
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xDC870 Offset: 0xDBC70 VA: 0x1800DC870
[RequiredByNativeCodeAttribute] // RVA: 0xDC870 Offset: 0xDBC70 VA: 0x1800DC870
public sealed class NativeContainerSupportsDeallocateOnJobCompletionAttribute : Attribute // TypeDefIndex: 1320
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xDC870 Offset: 0xDBC70 VA: 0x1800DC870
[RequiredByNativeCodeAttribute] // RVA: 0xDC870 Offset: 0xDBC70 VA: 0x1800DC870
public sealed class NativeContainerSupportsDeferredConvertListToArray : Attribute // TypeDefIndex: 1321
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xDC7F0 Offset: 0xDBBF0 VA: 0x1800DC7F0
[AttributeUsageAttribute] // RVA: 0xDC7F0 Offset: 0xDBBF0 VA: 0x1800DC7F0
public sealed class NativeSetThreadIndexAttribute : Attribute // TypeDefIndex: 1322
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[ObsoleteAttribute] // RVA: 0xDC890 Offset: 0xDBC90 VA: 0x1800DC890
[RequiredByNativeCodeAttribute] // RVA: 0xDC890 Offset: 0xDBC90 VA: 0x1800DC890
[AttributeUsageAttribute] // RVA: 0xDC890 Offset: 0xDBC90 VA: 0x1800DC890
public sealed class NativeContainerNeedsThreadIndexAttribute : Attribute // TypeDefIndex: 1323
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[AttributeUsageAttribute] // RVA: 0xD9DA0 Offset: 0xD91A0 VA: 0x1800D9DA0
[RequiredByNativeCodeAttribute] // RVA: 0xD9DA0 Offset: 0xD91A0 VA: 0x1800D9DA0
public sealed class NativeDisableUnsafePtrRestrictionAttribute : Attribute // TypeDefIndex: 1324
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xDC7F0 Offset: 0xDBBF0 VA: 0x1800DC7F0
[AttributeUsageAttribute] // RVA: 0xDC7F0 Offset: 0xDBBF0 VA: 0x1800DC7F0
public sealed class NativeDisableContainerSafetyRestrictionAttribute : Attribute // TypeDefIndex: 1325
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
[RequiredByNativeCodeAttribute] // RVA: 0xDC7F0 Offset: 0xDBBF0 VA: 0x1800DC7F0
[AttributeUsageAttribute] // RVA: 0xDC7F0 Offset: 0xDBBF0 VA: 0x1800DC7F0
public sealed class NativeSetClassTypeToNullOnScheduleAttribute : Attribute // TypeDefIndex: 1326
{}

// Namespace: Unity.Collections.LowLevel.Unsafe
public static class NativeArrayUnsafeUtility // TypeDefIndex: 1327
{
	// Methods
	// RVA: 0x535E50 Offset: 0x534650 VA: 0x180535E50
	public static NativeArray<T> ConvertExistingDataToNativeArray(void* dataPointer, int length, Allocator allocator) { }
}

// Namespace: Unity.Collections.LowLevel.Unsafe
public static class UnsafeUtility // TypeDefIndex: 1328
{
	// Methods
	// RVA: 0x4467F0 Offset: 0x444FF0 VA: 0x1804467F0
	public static void Free(void* memory, Allocator allocator) { }
	// RVA: 0x446850 Offset: 0x445050 VA: 0x180446850
	public static void MemCpy(void* destination, void* source, long size) { }
	// RVA: 0x4468C0 Offset: 0x4450C0 VA: 0x1804468C0
	public static int SizeOf(Type type) { }
	// RVA: 0x446910 Offset: 0x445110 VA: 0x180446910
	public static bool IsBlittable(Type type) { }
	// RVA: 0x446960 Offset: 0x445160 VA: 0x180446960
	private static bool IsBlittableValueType(Type t) { }
	// RVA: 0x4469F0 Offset: 0x4451F0 VA: 0x1804469F0
	private static string GetReasonForTypeNonBlittableImpl(Type t, string name) { }
	// RVA: 0x446C70 Offset: 0x445470 VA: 0x180446C70
	internal static bool IsArrayBlittable(Array arr) { }
	// RVA: 0x446D30 Offset: 0x445530 VA: 0x180446D30
	internal static string GetReasonForArrayNonBlittable(Array arr) { }
	// RVA: 0x42B4A0 Offset: 0x429CA0 VA: 0x18042B4A0
	public static T ReadArrayElement(void* source, int index) { }
	// RVA: 0x42B570 Offset: 0x429D70 VA: 0x18042B570
	public static void WriteArrayElement(void* destination, int index, T value) { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	public static void* AddressOf(ref T output) { }
	// RVA: 0x42B560 Offset: 0x429D60 VA: 0x18042B560
	public static int SizeOf() { }
}

// Namespace: UnityEngine
public enum SendMessageOptions // TypeDefIndex: 1329
{
	// Fields
	public int value__; // 0x0
	public const SendMessageOptions RequireReceiver = 0; // 0x0
	public const SendMessageOptions DontRequireReceiver = 1; // 0x0
}

// Namespace: UnityEngine
public enum PrimitiveType // TypeDefIndex: 1330
{
	// Fields
	public int value__; // 0x0
	public const PrimitiveType Sphere = 0; // 0x0
	public const PrimitiveType Capsule = 1; // 0x0
	public const PrimitiveType Cylinder = 2; // 0x0
	public const PrimitiveType Cube = 3; // 0x0
	public const PrimitiveType Plane = 4; // 0x0
	public const PrimitiveType Quad = 5; // 0x0
}

// Namespace: UnityEngine
public enum Space // TypeDefIndex: 1331
{
	// Fields
	public int value__; // 0x0
	public const Space World = 0; // 0x0
	public const Space Self = 1; // 0x0
}

// Namespace: UnityEngine
public enum RuntimePlatform // TypeDefIndex: 1332
{
	// Fields
	public int value__; // 0x0
	public const RuntimePlatform OSXEditor = 0; // 0x0
	public const RuntimePlatform OSXPlayer = 1; // 0x0
	public const RuntimePlatform WindowsPlayer = 2; // 0x0
	[ObsoleteAttribute] // RVA: 0xDC8E0 Offset: 0xDBCE0 VA: 0x1800DC8E0
	public const RuntimePlatform OSXWebPlayer = 3; // 0x0
	[ObsoleteAttribute] // RVA: 0xDC910 Offset: 0xDBD10 VA: 0x1800DC910
	public const RuntimePlatform OSXDashboardPlayer = 4; // 0x0
	[ObsoleteAttribute] // RVA: 0xDC8E0 Offset: 0xDBCE0 VA: 0x1800DC8E0
	public const RuntimePlatform WindowsWebPlayer = 5; // 0x0
	public const RuntimePlatform WindowsEditor = 7; // 0x0
	public const RuntimePlatform IPhonePlayer = 8; // 0x0
	[ObsoleteAttribute] // RVA: 0xDC940 Offset: 0xDBD40 VA: 0x1800DC940
	public const RuntimePlatform XBOX360 = 10; // 0x0
	[ObsoleteAttribute] // RVA: 0xDC970 Offset: 0xDBD70 VA: 0x1800DC970
	public const RuntimePlatform PS3 = 9; // 0x0
	public const RuntimePlatform Android = 11; // 0x0
	[ObsoleteAttribute] // RVA: 0xDC9A0 Offset: 0xDBDA0 VA: 0x1800DC9A0
	public const RuntimePlatform NaCl = 12; // 0x0
	[ObsoleteAttribute] // RVA: 0xDC9D0 Offset: 0xDBDD0 VA: 0x1800DC9D0
	public const RuntimePlatform FlashPlayer = 15; // 0x0
	public const RuntimePlatform LinuxPlayer = 13; // 0x0
	public const RuntimePlatform LinuxEditor = 16; // 0x0
	public const RuntimePlatform WebGLPlayer = 17; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCA00 Offset: 0xDBE00 VA: 0x1800DCA00
	public const RuntimePlatform MetroPlayerX86 = 18; // 0x0
	public const RuntimePlatform WSAPlayerX86 = 18; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCA30 Offset: 0xDBE30 VA: 0x1800DCA30
	public const RuntimePlatform MetroPlayerX64 = 19; // 0x0
	public const RuntimePlatform WSAPlayerX64 = 19; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCA60 Offset: 0xDBE60 VA: 0x1800DCA60
	public const RuntimePlatform MetroPlayerARM = 20; // 0x0
	public const RuntimePlatform WSAPlayerARM = 20; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCA90 Offset: 0xDBE90 VA: 0x1800DCA90
	public const RuntimePlatform WP8Player = 21; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCAC0 Offset: 0xDBEC0 VA: 0x1800DCAC0
	public const RuntimePlatform BlackBerryPlayer = 22; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCAF0 Offset: 0xDBEF0 VA: 0x1800DCAF0
	public const RuntimePlatform TizenPlayer = 23; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCB20 Offset: 0xDBF20 VA: 0x1800DCB20
	public const RuntimePlatform PSP2 = 24; // 0x0
	public const RuntimePlatform PS4 = 25; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCB50 Offset: 0xDBF50 VA: 0x1800DCB50
	public const RuntimePlatform PSM = 26; // 0x0
	public const RuntimePlatform XboxOne = 27; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCB80 Offset: 0xDBF80 VA: 0x1800DCB80
	public const RuntimePlatform SamsungTVPlayer = 28; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCBB0 Offset: 0xDBFB0 VA: 0x1800DCBB0
	public const RuntimePlatform WiiU = 30; // 0x0
	public const RuntimePlatform tvOS = 31; // 0x0
	public const RuntimePlatform Switch = 32; // 0x0
	public const RuntimePlatform Lumin = 33; // 0x0
	public const RuntimePlatform Stadia = 34; // 0x0
}

// Namespace: UnityEngine
public enum LogType // TypeDefIndex: 1333
{
	// Fields
	public int value__; // 0x0
	public const LogType Error = 0; // 0x0
	public const LogType Assert = 1; // 0x0
	public const LogType Warning = 2; // 0x0
	public const LogType Log = 3; // 0x0
	public const LogType Exception = 4; // 0x0
}

// Namespace: UnityEngine
public enum LogOption // TypeDefIndex: 1334
{
	// Fields
	public int value__; // 0x0
	public const LogOption None = 0; // 0x0
	public const LogOption NoStacktrace = 1; // 0x0
}

// Namespace: UnityEngine
public struct SortingLayer // TypeDefIndex: 1335
{
	// Fields
	private int m_Id; // 0x0

	// Methods
	// RVA: 0x437CC0 Offset: 0x4364C0 VA: 0x180437CC0
	public static int GetLayerValueFromID(int id) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Keyframe // TypeDefIndex: 1336
{
	// Fields
	private float m_Time; // 0x0
	private float m_Value; // 0x4
	private float m_InTangent; // 0x8
	private float m_OutTangent; // 0xC
	private int m_WeightedMode; // 0x10
	private float m_InWeight; // 0x14
	private float m_OutWeight; // 0x18

	// Properties
	public float time { get; set; }
	public float inTangent { set; }
	public float outTangent { set; }

	// Methods
	// RVA: 0x20BA0 Offset: 0x1FFA0 VA: 0x180020BA0
	public void .ctor(float time, float value) { }
	// RVA: 0x20BC0 Offset: 0x1FFC0 VA: 0x180020BC0
	public void .ctor(float time, float value, float inTangent, float outTangent) { }
	// RVA: 0x1E790 Offset: 0x1DB90 VA: 0x18001E790
	public float get_time() { }
	// RVA: 0xE990 Offset: 0xDD90 VA: 0x18000E990
	public void set_time(float value) { }
	// RVA: 0x5D30 Offset: 0x5130 VA: 0x180005D30
	public void set_inTangent(float value) { }
	// RVA: 0x5D40 Offset: 0x5140 VA: 0x180005D40
	public void set_outTangent(float value) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDCBE0 Offset: 0xDBFE0 VA: 0x1800DCBE0
[DefaultMemberAttribute] // RVA: 0xDCBE0 Offset: 0xDBFE0 VA: 0x1800DCBE0
public class AnimationCurve : IEquatable<AnimationCurve> // TypeDefIndex: 1337
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties
	public Keyframe[] keys { get; set; }
	public Keyframe Item { get; }
	public int length { get; }

	// Methods
	// RVA: 0x5362D0 Offset: 0x534AD0 VA: 0x1805362D0
	private static void Internal_Destroy(IntPtr ptr) { }
	// RVA: 0x536320 Offset: 0x534B20 VA: 0x180536320
	private static IntPtr Internal_Create(Keyframe[] keys) { }
	// RVA: 0x536370 Offset: 0x534B70 VA: 0x180536370
	private bool Internal_Equals(IntPtr other) { }
	// RVA: 0x5363D0 Offset: 0x534BD0 VA: 0x1805363D0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x536490 Offset: 0x534C90 VA: 0x180536490
	public float Evaluate(float time) { }
	// RVA: 0x5364F0 Offset: 0x534CF0 VA: 0x1805364F0
	public Keyframe[] get_keys() { }
	// RVA: 0x536540 Offset: 0x534D40 VA: 0x180536540
	public void set_keys(Keyframe[] value) { }
	// RVA: 0x5365A0 Offset: 0x534DA0 VA: 0x1805365A0
	public int AddKey(Keyframe key) { }
	// RVA: 0x536610 Offset: 0x534E10 VA: 0x180536610
	private int AddKey_Internal(Keyframe key) { }
	// RVA: 0x536670 Offset: 0x534E70 VA: 0x180536670
	public Keyframe get_Item(int index) { }
	// RVA: 0x536720 Offset: 0x534F20 VA: 0x180536720
	public int get_length() { }
	// RVA: 0x536540 Offset: 0x534D40 VA: 0x180536540
	private void SetKeys(Keyframe[] keys) { }
	// RVA: 0x536770 Offset: 0x534F70 VA: 0x180536770
	private Keyframe GetKey(int index) { }
	// RVA: 0x5364F0 Offset: 0x534CF0 VA: 0x1805364F0
	private Keyframe[] GetKeys() { }
	// RVA: 0x5367F0 Offset: 0x534FF0 VA: 0x1805367F0
	public static AnimationCurve Linear(float timeStart, float valueStart, float timeEnd, float valueEnd) { }
	// RVA: 0x536A30 Offset: 0x535230 VA: 0x180536A30
	public static AnimationCurve EaseInOut(float timeStart, float valueStart, float timeEnd, float valueEnd) { }
	// RVA: 0x536C40 Offset: 0x535440 VA: 0x180536C40
	public void .ctor(Keyframe[] keys) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x536CA0 Offset: 0x5354A0 VA: 0x180536CA0
	public void .ctor() { }
	// RVA: 0x536D00 Offset: 0x535500 VA: 0x180536D00 Slot: 0
	public override bool Equals(object o) { }
	// RVA: 0x536EE0 Offset: 0x5356E0 VA: 0x180536EE0 Slot: 4
	public bool Equals(AnimationCurve other) { }
	// RVA: 0x440EE0 Offset: 0x43F6E0 VA: 0x180440EE0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x536FF0 Offset: 0x5357F0 VA: 0x180536FF0
	private int AddKey_Internal_Injected(ref Keyframe key) { }
	// RVA: 0x537050 Offset: 0x535850 VA: 0x180537050
	private void GetKey_Injected(int index, out Keyframe ret) { }
}

// Namespace: UnityEngine
public class Application // TypeDefIndex: 1338
{
	// Fields
	private static Application.LowMemoryCallback lowMemory; // 0x0
	private static Application.LogCallback s_LogCallbackHandler; // 0x8
	private static Application.LogCallback s_LogCallbackHandlerThreaded; // 0x10
	private static Action<bool> focusChanged; // 0x18
	private static Action<string> deepLinkActivated; // 0x20
	private static Func<bool> wantsToQuit; // 0x28
	private static Action quitting; // 0x30
	private static Action unloading; // 0x38

	// Properties
	public static bool isPlaying { get; }
	public static string unityVersion { get; }
	public static int targetFrameRate { set; }
	public static RuntimePlatform platform { get; }
	public static bool isEditor { get; }

	// Methods
	// RVA: 0x5370C0 Offset: 0x5358C0 VA: 0x1805370C0
	public static void Quit(int exitCode) { }
	// RVA: 0x537110 Offset: 0x535910 VA: 0x180537110
	public static void Quit() { }
	// RVA: 0x537160 Offset: 0x535960 VA: 0x180537160
	public static bool get_isPlaying() { }
	// RVA: 0x5371B0 Offset: 0x5359B0 VA: 0x1805371B0
	public static string get_unityVersion() { }
	// RVA: 0x537200 Offset: 0x535A00 VA: 0x180537200
	public static void set_targetFrameRate(int value) { }
	// RVA: 0x537250 Offset: 0x535A50 VA: 0x180537250
	private static void SetLogCallbackDefined(bool defined) { }
	// RVA: 0x5372A0 Offset: 0x535AA0 VA: 0x1805372A0
	public static RuntimePlatform get_platform() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5372F0 Offset: 0x535AF0 VA: 0x1805372F0
	internal static void CallLowMemory() { }
	// RVA: 0x537380 Offset: 0x535B80 VA: 0x180537380
	public static void add_logMessageReceived(Application.LogCallback value) { }
	// RVA: 0x537480 Offset: 0x535C80 VA: 0x180537480
	public static void remove_logMessageReceived(Application.LogCallback value) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x537540 Offset: 0x535D40 VA: 0x180537540
	private static void CallLogCallback(string logString, string stackTrace, LogType type, bool invokedOnMainThread) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x537640 Offset: 0x535E40 VA: 0x180537640
	private static bool Internal_ApplicationWantsToQuit() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5377B0 Offset: 0x535FB0 VA: 0x1805377B0
	private static void Internal_ApplicationQuit() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x537840 Offset: 0x536040 VA: 0x180537840
	private static void Internal_ApplicationUnload() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5378D0 Offset: 0x5360D0 VA: 0x1805378D0
	internal static void InvokeOnBeforeRender() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x537960 Offset: 0x536160 VA: 0x180537960
	internal static void InvokeFocusChanged(bool focus) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x537A00 Offset: 0x536200 VA: 0x180537A00
	internal static void InvokeDeepLinkActivated(string url) { }
	// RVA: 0x378D30 Offset: 0x377530 VA: 0x180378D30
	public static bool get_isEditor() { }
}

// Namespace: 
public sealed class Application.LowMemoryCallback : MulticastDelegate // TypeDefIndex: 1339
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class Application.LogCallback : MulticastDelegate // TypeDefIndex: 1340
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44D160 Offset: 0x44B960 VA: 0x18044D160 Slot: 12
	public virtual void Invoke(string condition, string stackTrace, LogType type) { }
	// RVA: 0x44D5D0 Offset: 0x44BDD0 VA: 0x18044D5D0 Slot: 13
	public virtual IAsyncResult BeginInvoke(string condition, string stackTrace, LogType type, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
internal class BootConfigData // TypeDefIndex: 1341
{
	// Fields
	private IntPtr m_Ptr; // 0x10

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x538F00 Offset: 0x537700 VA: 0x180538F00
	private static BootConfigData WrapBootConfigData(IntPtr nativeHandle) { }
	// RVA: 0x539020 Offset: 0x537820 VA: 0x180539020
	private void .ctor(IntPtr nativeHandle) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xDCC10 Offset: 0xDC010 VA: 0x1800DCC10
[RequireComponent] // RVA: 0xDCC10 Offset: 0xDC010 VA: 0x1800DCC10
public sealed class Camera : Behaviour // TypeDefIndex: 1342
{
	// Fields
	public static Camera.CameraCallback onPreCull; // 0x0
	public static Camera.CameraCallback onPreRender; // 0x8
	public static Camera.CameraCallback onPostRender; // 0x10

	// Properties
	public float nearClipPlane { get; set; }
	public float farClipPlane { get; set; }
	public float fieldOfView { get; set; }
	public RenderingPath actualRenderingPath { get; }
	public bool allowHDR { get; }
	public bool allowDynamicResolution { get; }
	public float orthographicSize { get; set; }
	public bool orthographic { get; set; }
	public float depth { get; }
	public float aspect { get; set; }
	public int cullingMask { get; set; }
	public int eventMask { get; }
	public CameraType cameraType { get; }
	public CameraClearFlags clearFlags { get; }
	public DepthTextureMode depthTextureMode { get; set; }
	public bool usePhysicalProperties { get; set; }
	public Vector2 sensorSize { get; }
	public Vector2 lensShift { get; set; }
	public Rect rect { get; }
	public Rect pixelRect { get; }
	public int pixelWidth { get; }
	public int pixelHeight { get; }
	public int scaledPixelWidth { get; }
	public int scaledPixelHeight { get; }
	public RenderTexture targetTexture { get; set; }
	public int targetDisplay { get; }
	public Matrix4x4 worldToCameraMatrix { get; }
	public Matrix4x4 projectionMatrix { get; set; }
	public Matrix4x4 nonJitteredProjectionMatrix { set; }
	public bool useJitteredProjectionMatrixForTransparentRendering { set; }
	public static Camera main { get; }
	public bool stereoEnabled { get; }
	public StereoTargetEyeMask stereoTargetEye { get; }
	public Camera.MonoOrStereoscopicEye stereoActiveEye { get; }
	public static int allCamerasCount { get; }

	// Methods
	// RVA: 0x53A380 Offset: 0x538B80 VA: 0x18053A380
	public float get_nearClipPlane() { }
	// RVA: 0x53A3D0 Offset: 0x538BD0 VA: 0x18053A3D0
	public void set_nearClipPlane(float value) { }
	// RVA: 0x53A430 Offset: 0x538C30 VA: 0x18053A430
	public float get_farClipPlane() { }
	// RVA: 0x53A480 Offset: 0x538C80 VA: 0x18053A480
	public void set_farClipPlane(float value) { }
	// RVA: 0x53A4E0 Offset: 0x538CE0 VA: 0x18053A4E0
	public float get_fieldOfView() { }
	// RVA: 0x53A530 Offset: 0x538D30 VA: 0x18053A530
	public void set_fieldOfView(float value) { }
	// RVA: 0x53A590 Offset: 0x538D90 VA: 0x18053A590
	public RenderingPath get_actualRenderingPath() { }
	// RVA: 0x53A5E0 Offset: 0x538DE0 VA: 0x18053A5E0
	public bool get_allowHDR() { }
	// RVA: 0x53A630 Offset: 0x538E30 VA: 0x18053A630
	public bool get_allowDynamicResolution() { }
	// RVA: 0x53A680 Offset: 0x538E80 VA: 0x18053A680
	public float get_orthographicSize() { }
	// RVA: 0x53A6D0 Offset: 0x538ED0 VA: 0x18053A6D0
	public void set_orthographicSize(float value) { }
	// RVA: 0x53A730 Offset: 0x538F30 VA: 0x18053A730
	public bool get_orthographic() { }
	// RVA: 0x53A780 Offset: 0x538F80 VA: 0x18053A780
	public void set_orthographic(bool value) { }
	// RVA: 0x53A7E0 Offset: 0x538FE0 VA: 0x18053A7E0
	public float get_depth() { }
	// RVA: 0x53A830 Offset: 0x539030 VA: 0x18053A830
	public float get_aspect() { }
	// RVA: 0x53A880 Offset: 0x539080 VA: 0x18053A880
	public void set_aspect(float value) { }
	// RVA: 0x53A8E0 Offset: 0x5390E0 VA: 0x18053A8E0
	public int get_cullingMask() { }
	// RVA: 0x53A930 Offset: 0x539130 VA: 0x18053A930
	public void set_cullingMask(int value) { }
	// RVA: 0x53A990 Offset: 0x539190 VA: 0x18053A990
	public int get_eventMask() { }
	// RVA: 0x53A9E0 Offset: 0x5391E0 VA: 0x18053A9E0
	public CameraType get_cameraType() { }
	// RVA: 0x53AA30 Offset: 0x539230 VA: 0x18053AA30
	public CameraClearFlags get_clearFlags() { }
	// RVA: 0x53AA80 Offset: 0x539280 VA: 0x18053AA80
	public DepthTextureMode get_depthTextureMode() { }
	// RVA: 0x53AAD0 Offset: 0x5392D0 VA: 0x18053AAD0
	public void set_depthTextureMode(DepthTextureMode value) { }
	// RVA: 0x53AB30 Offset: 0x539330 VA: 0x18053AB30
	public bool get_usePhysicalProperties() { }
	// RVA: 0x53AB80 Offset: 0x539380 VA: 0x18053AB80
	public void set_usePhysicalProperties(bool value) { }
	// RVA: 0x53ABE0 Offset: 0x5393E0 VA: 0x18053ABE0
	public Vector2 get_sensorSize() { }
	// RVA: 0x53AC50 Offset: 0x539450 VA: 0x18053AC50
	public Vector2 get_lensShift() { }
	// RVA: 0x53ACC0 Offset: 0x5394C0 VA: 0x18053ACC0
	public void set_lensShift(Vector2 value) { }
	// RVA: 0x53AD20 Offset: 0x539520 VA: 0x18053AD20
	public Rect get_rect() { }
	// RVA: 0x53AD90 Offset: 0x539590 VA: 0x18053AD90
	public Rect get_pixelRect() { }
	// RVA: 0x53AE00 Offset: 0x539600 VA: 0x18053AE00
	public int get_pixelWidth() { }
	// RVA: 0x53AE50 Offset: 0x539650 VA: 0x18053AE50
	public int get_pixelHeight() { }
	// RVA: 0x53AEA0 Offset: 0x5396A0 VA: 0x18053AEA0
	public int get_scaledPixelWidth() { }
	// RVA: 0x53AEF0 Offset: 0x5396F0 VA: 0x18053AEF0
	public int get_scaledPixelHeight() { }
	// RVA: 0x53AF40 Offset: 0x539740 VA: 0x18053AF40
	public RenderTexture get_targetTexture() { }
	// RVA: 0x53AF90 Offset: 0x539790 VA: 0x18053AF90
	public void set_targetTexture(RenderTexture value) { }
	// RVA: 0x53AFF0 Offset: 0x5397F0 VA: 0x18053AFF0
	public int get_targetDisplay() { }
	// RVA: 0x53B040 Offset: 0x539840 VA: 0x18053B040
	public Matrix4x4 get_worldToCameraMatrix() { }
	// RVA: 0x53B0C0 Offset: 0x5398C0 VA: 0x18053B0C0
	public Matrix4x4 get_projectionMatrix() { }
	// RVA: 0x53B140 Offset: 0x539940 VA: 0x18053B140
	public void set_projectionMatrix(Matrix4x4 value) { }
	// RVA: 0x53B1A0 Offset: 0x5399A0 VA: 0x18053B1A0
	public void set_nonJitteredProjectionMatrix(Matrix4x4 value) { }
	// RVA: 0x53B200 Offset: 0x539A00 VA: 0x18053B200
	public void set_useJitteredProjectionMatrixForTransparentRendering(bool value) { }
	// RVA: 0x53B260 Offset: 0x539A60 VA: 0x18053B260
	public void ResetProjectionMatrix() { }
	// RVA: 0x53B2B0 Offset: 0x539AB0 VA: 0x18053B2B0
	public Vector3 WorldToScreenPoint(Vector3 position, Camera.MonoOrStereoscopicEye eye) { }
	// RVA: 0x53B340 Offset: 0x539B40 VA: 0x18053B340
	public Vector3 ScreenToWorldPoint(Vector3 position, Camera.MonoOrStereoscopicEye eye) { }
	// RVA: 0x53B3D0 Offset: 0x539BD0 VA: 0x18053B3D0
	public Vector3 WorldToScreenPoint(Vector3 position) { }
	// RVA: 0x53B480 Offset: 0x539C80 VA: 0x18053B480
	public Vector3 ScreenToWorldPoint(Vector3 position) { }
	// RVA: 0x53B530 Offset: 0x539D30 VA: 0x18053B530
	public Vector3 ScreenToViewportPoint(Vector3 position) { }
	// RVA: 0x53B5B0 Offset: 0x539DB0 VA: 0x18053B5B0
	private Ray ScreenPointToRay(Vector2 pos, Camera.MonoOrStereoscopicEye eye) { }
	// RVA: 0x53B640 Offset: 0x539E40 VA: 0x18053B640
	public Ray ScreenPointToRay(Vector3 pos, Camera.MonoOrStereoscopicEye eye) { }
	// RVA: 0x53B7A0 Offset: 0x539FA0 VA: 0x18053B7A0
	public Ray ScreenPointToRay(Vector3 pos) { }
	// RVA: 0x53B8F0 Offset: 0x53A0F0 VA: 0x18053B8F0
	public static Camera get_main() { }
	// RVA: 0x53B940 Offset: 0x53A140 VA: 0x18053B940
	public bool get_stereoEnabled() { }
	// RVA: 0x53B990 Offset: 0x53A190 VA: 0x18053B990
	public StereoTargetEyeMask get_stereoTargetEye() { }
	// RVA: 0x53B9E0 Offset: 0x53A1E0 VA: 0x18053B9E0
	public Camera.MonoOrStereoscopicEye get_stereoActiveEye() { }
	// RVA: 0x53BA30 Offset: 0x53A230 VA: 0x18053BA30
	public Matrix4x4 GetStereoNonJitteredProjectionMatrix(Camera.StereoscopicEye eye) { }
	// RVA: 0x53BAC0 Offset: 0x53A2C0 VA: 0x18053BAC0
	public void CopyStereoDeviceProjectionMatrixToNonJittered(Camera.StereoscopicEye eye) { }
	// RVA: 0x53BB20 Offset: 0x53A320 VA: 0x18053BB20
	public void SetStereoProjectionMatrix(Camera.StereoscopicEye eye, Matrix4x4 matrix) { }
	// RVA: 0x53BB90 Offset: 0x53A390 VA: 0x18053BB90
	public void ResetStereoProjectionMatrices() { }
	// RVA: 0x53BBE0 Offset: 0x53A3E0 VA: 0x18053BBE0
	private static int GetAllCamerasCount() { }
	// RVA: 0x53BC30 Offset: 0x53A430 VA: 0x18053BC30
	private static int GetAllCamerasImpl([Out] Camera[] cam) { }
	// RVA: 0x53BBE0 Offset: 0x53A3E0 VA: 0x18053BBE0
	public static int get_allCamerasCount() { }
	// RVA: 0x53BC80 Offset: 0x53A480 VA: 0x18053BC80
	public static int GetAllCameras(Camera[] cameras) { }
	// RVA: 0x53BDE0 Offset: 0x53A5E0 VA: 0x18053BDE0
	public void Render() { }
	// RVA: 0x53BE30 Offset: 0x53A630 VA: 0x18053BE30
	private void AddCommandBufferImpl(CameraEvent evt, CommandBuffer buffer) { }
	// RVA: 0x53BEA0 Offset: 0x53A6A0 VA: 0x18053BEA0
	private void RemoveCommandBufferImpl(CameraEvent evt, CommandBuffer buffer) { }
	// RVA: 0x53BF10 Offset: 0x53A710 VA: 0x18053BF10
	public void AddCommandBuffer(CameraEvent evt, CommandBuffer buffer) { }
	// RVA: 0x53C080 Offset: 0x53A880 VA: 0x18053C080
	public void RemoveCommandBuffer(CameraEvent evt, CommandBuffer buffer) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x53C1F0 Offset: 0x53A9F0 VA: 0x18053C1F0
	private static void FireOnPreCull(Camera cam) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x53C280 Offset: 0x53AA80 VA: 0x18053C280
	private static void FireOnPreRender(Camera cam) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x53C310 Offset: 0x53AB10 VA: 0x18053C310
	private static void FireOnPostRender(Camera cam) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
	// RVA: 0x53C3A0 Offset: 0x53ABA0 VA: 0x18053C3A0
	private void get_sensorSize_Injected(out Vector2 ret) { }
	// RVA: 0x53C400 Offset: 0x53AC00 VA: 0x18053C400
	private void get_lensShift_Injected(out Vector2 ret) { }
	// RVA: 0x53C460 Offset: 0x53AC60 VA: 0x18053C460
	private void set_lensShift_Injected(ref Vector2 value) { }
	// RVA: 0x53C4C0 Offset: 0x53ACC0 VA: 0x18053C4C0
	private void get_rect_Injected(out Rect ret) { }
	// RVA: 0x53C520 Offset: 0x53AD20 VA: 0x18053C520
	private void get_pixelRect_Injected(out Rect ret) { }
	// RVA: 0x53C580 Offset: 0x53AD80 VA: 0x18053C580
	private void get_worldToCameraMatrix_Injected(out Matrix4x4 ret) { }
	// RVA: 0x53C5E0 Offset: 0x53ADE0 VA: 0x18053C5E0
	private void get_projectionMatrix_Injected(out Matrix4x4 ret) { }
	// RVA: 0x53C640 Offset: 0x53AE40 VA: 0x18053C640
	private void set_projectionMatrix_Injected(ref Matrix4x4 value) { }
	// RVA: 0x53C6A0 Offset: 0x53AEA0 VA: 0x18053C6A0
	private void set_nonJitteredProjectionMatrix_Injected(ref Matrix4x4 value) { }
	// RVA: 0x53C700 Offset: 0x53AF00 VA: 0x18053C700
	private void WorldToScreenPoint_Injected(ref Vector3 position, Camera.MonoOrStereoscopicEye eye, out Vector3 ret) { }
	// RVA: 0x53C780 Offset: 0x53AF80 VA: 0x18053C780
	private void ScreenToWorldPoint_Injected(ref Vector3 position, Camera.MonoOrStereoscopicEye eye, out Vector3 ret) { }
	// RVA: 0x53C800 Offset: 0x53B000 VA: 0x18053C800
	private void ScreenToViewportPoint_Injected(ref Vector3 position, out Vector3 ret) { }
	// RVA: 0x53C870 Offset: 0x53B070 VA: 0x18053C870
	private void ScreenPointToRay_Injected(ref Vector2 pos, Camera.MonoOrStereoscopicEye eye, out Ray ret) { }
	// RVA: 0x53C8F0 Offset: 0x53B0F0 VA: 0x18053C8F0
	private void GetStereoNonJitteredProjectionMatrix_Injected(Camera.StereoscopicEye eye, out Matrix4x4 ret) { }
	// RVA: 0x53C960 Offset: 0x53B160 VA: 0x18053C960
	private void SetStereoProjectionMatrix_Injected(Camera.StereoscopicEye eye, ref Matrix4x4 matrix) { }
}

// Namespace: 
public enum Camera.StereoscopicEye // TypeDefIndex: 1343
{
	// Fields
	public int value__; // 0x0
	public const Camera.StereoscopicEye Left = 0; // 0x0
	public const Camera.StereoscopicEye Right = 1; // 0x0
}

// Namespace: 
public enum Camera.MonoOrStereoscopicEye // TypeDefIndex: 1344
{
	// Fields
	public int value__; // 0x0
	public const Camera.MonoOrStereoscopicEye Left = 0; // 0x0
	public const Camera.MonoOrStereoscopicEye Right = 1; // 0x0
	public const Camera.MonoOrStereoscopicEye Mono = 2; // 0x0
}

// Namespace: 
public sealed class Camera.CameraCallback : MulticastDelegate // TypeDefIndex: 1345
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E1A0 Offset: 0x44C9A0 VA: 0x18044E1A0 Slot: 12
	public virtual void Invoke(Camera cam) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(Camera cam, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public struct BoundingSphere // TypeDefIndex: 1346
{
	// Fields
	public Vector3 position; // 0x0
	public float radius; // 0xC

	// Methods
	// RVA: 0x200D0 Offset: 0x1F4D0 VA: 0x1800200D0
	public void .ctor(Vector3 pos, float rad) { }
}

// Namespace: UnityEngine
public struct CullingGroupEvent // TypeDefIndex: 1347
{
	// Fields
	private int m_Index; // 0x0
	private byte m_PrevState; // 0x4
	private byte m_ThisState; // 0x5
}

// Namespace: UnityEngine
public class CullingGroup // TypeDefIndex: 1348
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private CullingGroup.StateChanged m_OnStateChanged; // 0x18

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x543320 Offset: 0x541B20 VA: 0x180543320
	private static void SendEvents(CullingGroup cullingGroup, IntPtr eventsPtr, int count) { }
}

// Namespace: 
public sealed class CullingGroup.StateChanged : MulticastDelegate // TypeDefIndex: 1349
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E580 Offset: 0x44CD80 VA: 0x18044E580 Slot: 12
	public virtual void Invoke(CullingGroupEvent sphere) { }
	// RVA: 0x44E880 Offset: 0x44D080 VA: 0x18044E880 Slot: 13
	public virtual IAsyncResult BeginInvoke(CullingGroupEvent sphere, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public sealed class ReflectionProbe : Behaviour // TypeDefIndex: 1350
{
	// Fields
	private static Action<ReflectionProbe, ReflectionProbe.ReflectionProbeEvent> reflectionProbeChanged; // 0x0
	private static Action<Cubemap> defaultReflectionSet; // 0x8

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4F9940 Offset: 0x4F8140 VA: 0x1804F9940
	private static void CallReflectionProbeEvent(ReflectionProbe probe, ReflectionProbe.ReflectionProbeEvent probeEvent) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4F99E0 Offset: 0x4F81E0 VA: 0x1804F99E0
	private static void CallSetDefaultReflection(Cubemap defaultReflectionCubemap) { }
}

// Namespace: 
public enum ReflectionProbe.ReflectionProbeEvent // TypeDefIndex: 1351
{
	// Fields
	public int value__; // 0x0
	public const ReflectionProbe.ReflectionProbeEvent ReflectionProbeAdded = 0; // 0x0
	public const ReflectionProbe.ReflectionProbeEvent ReflectionProbeRemoved = 1; // 0x0
}

// Namespace: UnityEngine
internal sealed class DebugLogHandler : ILogHandler // TypeDefIndex: 1352
{
	// Methods
	// RVA: 0x544810 Offset: 0x543010 VA: 0x180544810
	internal static void Internal_Log(LogType level, LogOption options, string msg, Object obj) { }
	// RVA: 0x544890 Offset: 0x543090 VA: 0x180544890
	internal static void Internal_LogException(Exception exception, Object obj) { }
	// RVA: 0x5448F0 Offset: 0x5430F0 VA: 0x1805448F0 Slot: 4
	public void LogFormat(LogType logType, Object context, string format, object[] args) { }
	// RVA: 0x544970 Offset: 0x543170 VA: 0x180544970 Slot: 5
	public void LogException(Exception exception, Object context) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
public class Debug // TypeDefIndex: 1353
{
	// Fields
	internal static ILogger s_Logger; // 0xAC238

	// Properties
	public static ILogger unityLogger { get; }

	// Methods
	// RVA: 0x5437D0 Offset: 0x541FD0 VA: 0x1805437D0
	public static ILogger get_unityLogger() { }
	// RVA: 0x543870 Offset: 0x542070 VA: 0x180543870
	public static void DrawLine(Vector3 start, Vector3 end, Color color, float duration, bool depthTest) { }
	// RVA: 0x543980 Offset: 0x542180 VA: 0x180543980
	public static void DrawRay(Vector3 start, Vector3 dir, Color color) { }
	// RVA: 0x543A80 Offset: 0x542280 VA: 0x180543A80
	public static void DrawRay(Vector3 start, Vector3 dir, Color color, float duration, bool depthTest) { }
	// RVA: 0x543CE0 Offset: 0x5424E0 VA: 0x180543CE0
	public static void Log(object message) { }
	// RVA: 0x543DA0 Offset: 0x5425A0 VA: 0x180543DA0
	public static void Log(object message, Object context) { }
	// RVA: 0x543E60 Offset: 0x542660 VA: 0x180543E60
	public static void LogError(object message) { }
	// RVA: 0x543F20 Offset: 0x542720 VA: 0x180543F20
	public static void LogError(object message, Object context) { }
	// RVA: 0x543FE0 Offset: 0x5427E0 VA: 0x180543FE0
	public static void LogErrorFormat(string format, object[] args) { }
	// RVA: 0x544110 Offset: 0x542910 VA: 0x180544110
	public static void LogErrorFormat(Object context, string format, object[] args) { }
	// RVA: 0x5441E0 Offset: 0x5429E0 VA: 0x1805441E0
	public static void LogException(Exception exception) { }
	// RVA: 0x544290 Offset: 0x542A90 VA: 0x180544290
	public static void LogException(Exception exception, Object context) { }
	// RVA: 0x544350 Offset: 0x542B50 VA: 0x180544350
	public static void LogWarning(object message) { }
	// RVA: 0x544410 Offset: 0x542C10 VA: 0x180544410
	public static void LogWarning(object message, Object context) { }
	// RVA: 0x5444D0 Offset: 0x542CD0 VA: 0x1805444D0
	public static void LogWarningFormat(Object context, string format, object[] args) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5445A0 Offset: 0x542DA0 VA: 0x1805445A0
	internal static bool CallOverridenDebugHandler(Exception exception, Object obj) { }
	// RVA: 0x5446E0 Offset: 0x542EE0 VA: 0x1805446E0
	private static void .cctor() { }
	// RVA: 0x544780 Offset: 0x542F80 VA: 0x180544780
	private static void DrawLine_Injected(ref Vector3 start, ref Vector3 end, ref Color color, float duration, bool depthTest) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xDCC90 Offset: 0xDC090 VA: 0x1800DCC90
[Serializable]
public struct ExposedReference<T> // TypeDefIndex: 1354
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public PropertyName exposedName; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public Object defaultValue; // 0x0

	// Methods
	// RVA: 0x132CF0 Offset: 0x1320F0 VA: 0x180132CF0
	public T Resolve(IExposedPropertyTable resolver) { }
}

// Namespace: UnityEngine
public interface IExposedPropertyTable // TypeDefIndex: 1355
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract Object GetReferenceValue(PropertyName id, out bool idValid) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDCCC0 Offset: 0xDC0C0 VA: 0x1800DCCC0
public struct Bounds : IEquatable<Bounds>, IFormattable // TypeDefIndex: 1356
{
	// Fields
	private Vector3 m_Center; // 0x0
	private Vector3 m_Extents; // 0xC

	// Properties
	public Vector3 center { get; set; }
	public Vector3 size { get; set; }
	public Vector3 extents { get; set; }
	public Vector3 min { get; set; }
	public Vector3 max { get; set; }

	// Methods
	// RVA: 0x200F0 Offset: 0x1F4F0 VA: 0x1800200F0
	public void .ctor(Vector3 center, Vector3 size) { }
	// RVA: 0x20130 Offset: 0x1F530 VA: 0x180020130 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x20140 Offset: 0x1F540 VA: 0x180020140 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x20150 Offset: 0x1F550 VA: 0x180020150 Slot: 4
	public bool Equals(Bounds other) { }
	// RVA: 0x1D670 Offset: 0x1CA70 VA: 0x18001D670
	public Vector3 get_center() { }
	// RVA: 0x1E600 Offset: 0x1DA00 VA: 0x18001E600
	public void set_center(Vector3 value) { }
	// RVA: 0x20180 Offset: 0x1F580 VA: 0x180020180
	public Vector3 get_size() { }
	// RVA: 0x201A0 Offset: 0x1F5A0 VA: 0x1800201A0
	public void set_size(Vector3 value) { }
	// RVA: 0x1E610 Offset: 0x1DA10 VA: 0x18001E610
	public Vector3 get_extents() { }
	// RVA: 0x201D0 Offset: 0x1F5D0 VA: 0x1800201D0
	public void set_extents(Vector3 value) { }
	// RVA: 0x201E0 Offset: 0x1F5E0 VA: 0x1800201E0
	public Vector3 get_min() { }
	// RVA: 0x20200 Offset: 0x1F600 VA: 0x180020200
	public void set_min(Vector3 value) { }
	// RVA: 0x20260 Offset: 0x1F660 VA: 0x180020260
	public Vector3 get_max() { }
	// RVA: 0x20280 Offset: 0x1F680 VA: 0x180020280
	public void set_max(Vector3 value) { }
	// RVA: 0x539830 Offset: 0x538030 VA: 0x180539830
	public static bool op_Equality(Bounds lhs, Bounds rhs) { }
	// RVA: 0x5399D0 Offset: 0x5381D0 VA: 0x1805399D0
	public static bool op_Inequality(Bounds lhs, Bounds rhs) { }
	// RVA: 0x202E0 Offset: 0x1F6E0 VA: 0x1800202E0
	public void SetMinMax(Vector3 min, Vector3 max) { }
	// RVA: 0x20320 Offset: 0x1F720 VA: 0x180020320
	public void Encapsulate(Vector3 point) { }
	// RVA: 0x20350 Offset: 0x1F750 VA: 0x180020350
	public void Encapsulate(Bounds bounds) { }
	// RVA: 0x20380 Offset: 0x1F780 VA: 0x180020380 Slot: 3
	public override string ToString() { }
	// RVA: 0x20440 Offset: 0x1F840 VA: 0x180020440 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x20450 Offset: 0x1F850 VA: 0x180020450
	public bool Contains(Vector3 point) { }
	// RVA: 0x204C0 Offset: 0x1F8C0 VA: 0x1800204C0
	public float SqrDistance(Vector3 point) { }
	// RVA: 0x53A200 Offset: 0x538A00 VA: 0x18053A200
	private static bool Contains_Injected(ref Bounds _unity_self, ref Vector3 point) { }
	// RVA: 0x53A260 Offset: 0x538A60 VA: 0x18053A260
	private static float SqrDistance_Injected(ref Bounds _unity_self, ref Vector3 point) { }
}

// Namespace: UnityEngine
public sealed class GeometryUtility // TypeDefIndex: 1357
{
	// Methods
	// RVA: 0x546480 Offset: 0x544C80 VA: 0x180546480
	public static void CalculateFrustumPlanes(Camera camera, Plane[] planes) { }
	// RVA: 0x5467B0 Offset: 0x544FB0 VA: 0x1805467B0
	public static void CalculateFrustumPlanes(Matrix4x4 worldToProjectionMatrix, Plane[] planes) { }
	// RVA: 0x546920 Offset: 0x545120 VA: 0x180546920
	private static void Internal_ExtractPlanes([Out] Plane[] planes, Matrix4x4 worldToProjectionMatrix) { }
	// RVA: 0x546980 Offset: 0x545180 VA: 0x180546980
	private static void Internal_ExtractPlanes_Injected([Out] Plane[] planes, ref Matrix4x4 worldToProjectionMatrix) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Plane : IFormattable // TypeDefIndex: 1358
{
	// Fields
	internal const int size = 16; // 0x0
	private Vector3 m_Normal; // 0x0
	private float m_Distance; // 0xC

	// Properties
	public Vector3 normal { get; }
	public float distance { get; }

	// Methods
	// RVA: 0x1D670 Offset: 0x1CA70 VA: 0x18001D670
	public Vector3 get_normal() { }
	// RVA: 0x1D690 Offset: 0x1CA90 VA: 0x18001D690
	public float get_distance() { }
	// RVA: 0x1D6A0 Offset: 0x1CAA0 VA: 0x18001D6A0
	public void .ctor(Vector3 inNormal, Vector3 inPoint) { }
	// RVA: 0x1D6E0 Offset: 0x1CAE0 VA: 0x18001D6E0
	public bool Raycast(Ray ray, out float enter) { }
	// RVA: 0x1D710 Offset: 0x1CB10 VA: 0x18001D710 Slot: 3
	public override string ToString() { }
	// RVA: 0x1D7D0 Offset: 0x1CBD0 VA: 0x18001D7D0 Slot: 4
	public string ToString(string format, IFormatProvider formatProvider) { }
}

// Namespace: UnityEngine
public struct Ray : IFormattable // TypeDefIndex: 1359
{
	// Fields
	private Vector3 m_Origin; // 0x0
	private Vector3 m_Direction; // 0xC

	// Properties
	public Vector3 origin { get; set; }
	public Vector3 direction { get; }

	// Methods
	// RVA: 0x1E520 Offset: 0x1D920 VA: 0x18001E520
	public void .ctor(Vector3 origin, Vector3 direction) { }
	// RVA: 0x1D670 Offset: 0x1CA70 VA: 0x18001D670
	public Vector3 get_origin() { }
	// RVA: 0x1E600 Offset: 0x1DA00 VA: 0x18001E600
	public void set_origin(Vector3 value) { }
	// RVA: 0x1E610 Offset: 0x1DA10 VA: 0x18001E610
	public Vector3 get_direction() { }
	// RVA: 0x1E630 Offset: 0x1DA30 VA: 0x18001E630
	public Vector3 GetPoint(float distance) { }
	// RVA: 0x1E650 Offset: 0x1DA50 VA: 0x18001E650 Slot: 3
	public override string ToString() { }
	// RVA: 0x1E710 Offset: 0x1DB10 VA: 0x18001E710 Slot: 4
	public string ToString(string format, IFormatProvider formatProvider) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDCCC0 Offset: 0xDC0C0 VA: 0x1800DCCC0
public struct Rect : IEquatable<Rect>, IFormattable // TypeDefIndex: 1360
{
	// Fields
	private float m_XMin; // 0x0
	private float m_YMin; // 0x4
	private float m_Width; // 0x8
	private float m_Height; // 0xC

	// Properties
	public static Rect zero { get; }
	public float x { get; set; }
	public float y { get; set; }
	public Vector2 position { get; set; }
	public Vector2 center { get; set; }
	public Vector2 min { get; }
	public Vector2 max { get; set; }
	public float width { get; set; }
	public float height { get; set; }
	public Vector2 size { get; }
	public float xMin { get; set; }
	public float yMin { get; set; }
	public float xMax { get; set; }
	public float yMax { get; set; }

	// Methods
	// RVA: 0x4EC0 Offset: 0x42C0 VA: 0x180004EC0
	public void .ctor(float x, float y, float width, float height) { }
	// RVA: 0x1E720 Offset: 0x1DB20 VA: 0x18001E720
	public void .ctor(Vector2 position, Vector2 size) { }
	// RVA: 0x1E760 Offset: 0x1DB60 VA: 0x18001E760
	public void .ctor(Rect source) { }
	// RVA: 0x4F6BF0 Offset: 0x4F53F0 VA: 0x1804F6BF0
	public static Rect get_zero() { }
	// RVA: 0x4EC0 Offset: 0x42C0 VA: 0x180004EC0
	public void Set(float x, float y, float width, float height) { }
	// RVA: 0x1E790 Offset: 0x1DB90 VA: 0x18001E790
	public float get_x() { }
	// RVA: 0xE990 Offset: 0xDD90 VA: 0x18000E990
	public void set_x(float value) { }
	// RVA: 0x1E7A0 Offset: 0x1DBA0 VA: 0x18001E7A0
	public float get_y() { }
	// RVA: 0x1E7B0 Offset: 0x1DBB0 VA: 0x18001E7B0
	public void set_y(float value) { }
	// RVA: 0x1E7C0 Offset: 0x1DBC0 VA: 0x18001E7C0
	public Vector2 get_position() { }
	// RVA: 0x1E7E0 Offset: 0x1DBE0 VA: 0x18001E7E0
	public void set_position(Vector2 value) { }
	// RVA: 0x1E800 Offset: 0x1DC00 VA: 0x18001E800
	public Vector2 get_center() { }
	// RVA: 0x1E830 Offset: 0x1DC30 VA: 0x18001E830
	public void set_center(Vector2 value) { }
	// RVA: 0x1E870 Offset: 0x1DC70 VA: 0x18001E870
	public Vector2 get_min() { }
	// RVA: 0x1E890 Offset: 0x1DC90 VA: 0x18001E890
	public Vector2 get_max() { }
	// RVA: 0x1E8B0 Offset: 0x1DCB0 VA: 0x18001E8B0
	public void set_max(Vector2 value) { }
	// RVA: 0x1E8E0 Offset: 0x1DCE0 VA: 0x18001E8E0
	public float get_width() { }
	// RVA: 0x5D30 Offset: 0x5130 VA: 0x180005D30
	public void set_width(float value) { }
	// RVA: 0x1D690 Offset: 0x1CA90 VA: 0x18001D690
	public float get_height() { }
	// RVA: 0x5D40 Offset: 0x5140 VA: 0x180005D40
	public void set_height(float value) { }
	// RVA: 0x1E8F0 Offset: 0x1DCF0 VA: 0x18001E8F0
	public Vector2 get_size() { }
	// RVA: 0x1E790 Offset: 0x1DB90 VA: 0x18001E790
	public float get_xMin() { }
	// RVA: 0x1E910 Offset: 0x1DD10 VA: 0x18001E910
	public void set_xMin(float value) { }
	// RVA: 0x1E7A0 Offset: 0x1DBA0 VA: 0x18001E7A0
	public float get_yMin() { }
	// RVA: 0x1E930 Offset: 0x1DD30 VA: 0x18001E930
	public void set_yMin(float value) { }
	// RVA: 0x1E950 Offset: 0x1DD50 VA: 0x18001E950
	public float get_xMax() { }
	// RVA: 0x1E960 Offset: 0x1DD60 VA: 0x18001E960
	public void set_xMax(float value) { }
	// RVA: 0x1E970 Offset: 0x1DD70 VA: 0x18001E970
	public float get_yMax() { }
	// RVA: 0x1E980 Offset: 0x1DD80 VA: 0x18001E980
	public void set_yMax(float value) { }
	// RVA: 0x1E990 Offset: 0x1DD90 VA: 0x18001E990
	public bool Contains(Vector2 point) { }
	// RVA: 0x1E9D0 Offset: 0x1DDD0 VA: 0x18001E9D0
	public bool Contains(Vector3 point) { }
	// RVA: 0x4F6C50 Offset: 0x4F5450 VA: 0x1804F6C50
	private static Rect OrderMinMax(Rect rect) { }
	// RVA: 0x1EA20 Offset: 0x1DE20 VA: 0x18001EA20
	public bool Overlaps(Rect other) { }
	// RVA: 0x1EA80 Offset: 0x1DE80 VA: 0x18001EA80
	public bool Overlaps(Rect other, bool allowInverse) { }
	// RVA: 0x4F6E00 Offset: 0x4F5600 VA: 0x1804F6E00
	public static bool op_Inequality(Rect lhs, Rect rhs) { }
	// RVA: 0x4F6E60 Offset: 0x4F5660 VA: 0x1804F6E60
	public static bool op_Equality(Rect lhs, Rect rhs) { }
	// RVA: 0x1EAA0 Offset: 0x1DEA0 VA: 0x18001EAA0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1EAB0 Offset: 0x1DEB0 VA: 0x18001EAB0 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x1EAC0 Offset: 0x1DEC0 VA: 0x18001EAC0 Slot: 4
	public bool Equals(Rect other) { }
	// RVA: 0x1EAE0 Offset: 0x1DEE0 VA: 0x18001EAE0 Slot: 3
	public override string ToString() { }
	// RVA: 0x1EAF0 Offset: 0x1DEF0 VA: 0x18001EAF0 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct RectInt : IEquatable<RectInt>, IFormattable // TypeDefIndex: 1361
{
	// Fields
	private int m_XMin; // 0x0
	private int m_YMin; // 0x4
	private int m_Width; // 0x8
	private int m_Height; // 0xC

	// Properties
	public int x { get; }
	public int y { get; }
	public int width { get; }
	public int height { get; }

	// Methods
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060
	public int get_x() { }
	// RVA: 0x16070 Offset: 0x15470 VA: 0x180016070
	public int get_y() { }
	// RVA: 0x16080 Offset: 0x15480 VA: 0x180016080
	public int get_width() { }
	// RVA: 0x1EB00 Offset: 0x1DF00 VA: 0x18001EB00
	public int get_height() { }
	// RVA: 0x1EB10 Offset: 0x1DF10 VA: 0x18001EB10 Slot: 3
	public override string ToString() { }
	// RVA: 0x1EBD0 Offset: 0x1DFD0 VA: 0x18001EBD0 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x1EBE0 Offset: 0x1DFE0 VA: 0x18001EBE0 Slot: 4
	public bool Equals(RectInt other) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public class RectOffset : IFormattable // TypeDefIndex: 1362
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private readonly object m_SourceStyle; // 0x18

	// Properties
	public int left { get; }
	public int right { get; }
	public int top { get; }
	public int bottom { get; }
	public int horizontal { get; }
	public int vertical { get; }

	// Methods
	// RVA: 0x4F76F0 Offset: 0x4F5EF0 VA: 0x1804F76F0
	public void .ctor() { }
	// RVA: 0x4F7740 Offset: 0x4F5F40 VA: 0x1804F7740
	internal void .ctor(object sourceStyle, IntPtr source) { }
	// RVA: 0x4F7750 Offset: 0x4F5F50 VA: 0x1804F7750 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x4F7870 Offset: 0x4F6070 VA: 0x1804F7870 Slot: 3
	public override string ToString() { }
	// RVA: 0x4F7930 Offset: 0x4F6130 VA: 0x1804F7930 Slot: 4
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x4F7CB0 Offset: 0x4F64B0 VA: 0x1804F7CB0
	private void Destroy() { }
	// RVA: 0x4F7D80 Offset: 0x4F6580 VA: 0x1804F7D80
	private static IntPtr InternalCreate() { }
	// RVA: 0x4F7DD0 Offset: 0x4F65D0 VA: 0x1804F7DD0
	private static void InternalDestroy(IntPtr ptr) { }
	// RVA: 0x4F7E20 Offset: 0x4F6620 VA: 0x1804F7E20
	public int get_left() { }
	// RVA: 0x4F7E70 Offset: 0x4F6670 VA: 0x1804F7E70
	public int get_right() { }
	// RVA: 0x4F7EC0 Offset: 0x4F66C0 VA: 0x1804F7EC0
	public int get_top() { }
	// RVA: 0x4F7F10 Offset: 0x4F6710 VA: 0x1804F7F10
	public int get_bottom() { }
	// RVA: 0x4F7F60 Offset: 0x4F6760 VA: 0x1804F7F60
	public int get_horizontal() { }
	// RVA: 0x4F7FB0 Offset: 0x4F67B0 VA: 0x1804F7FB0
	public int get_vertical() { }
	// RVA: 0x4F8000 Offset: 0x4F6800 VA: 0x1804F8000
	public Rect Remove(Rect rect) { }
	// RVA: 0x4F8080 Offset: 0x4F6880 VA: 0x1804F8080
	private void Remove_Injected(ref Rect rect, out Rect ret) { }
}

// Namespace: UnityEngine
public sealed class LightingSettings : Object // TypeDefIndex: 1363
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void LightingSettingsDontStripMe() { }
}

// Namespace: UnityEngine
public sealed class Gizmos // TypeDefIndex: 1364
{
	// Properties
	public static Color color { set; }
	public static Matrix4x4 matrix { set; }

	// Methods
	// RVA: 0x5469E0 Offset: 0x5451E0 VA: 0x1805469E0
	public static void DrawLine(Vector3 from, Vector3 to) { }
	// RVA: 0x546A40 Offset: 0x545240 VA: 0x180546A40
	public static void DrawWireSphere(Vector3 center, float radius) { }
	// RVA: 0x546AA0 Offset: 0x5452A0 VA: 0x180546AA0
	public static void DrawSphere(Vector3 center, float radius) { }
	// RVA: 0x546B00 Offset: 0x545300 VA: 0x180546B00
	public static void DrawWireCube(Vector3 center, Vector3 size) { }
	// RVA: 0x546B60 Offset: 0x545360 VA: 0x180546B60
	public static void DrawCube(Vector3 center, Vector3 size) { }
	// RVA: 0x546BC0 Offset: 0x5453C0 VA: 0x180546BC0
	public static void DrawMesh(Mesh mesh, int submeshIndex, Vector3 position, Quaternion rotation, Vector3 scale) { }
	// RVA: 0x546C50 Offset: 0x545450 VA: 0x180546C50
	public static void DrawWireMesh(Mesh mesh, int submeshIndex, Vector3 position, Quaternion rotation, Vector3 scale) { }
	// RVA: 0x546CE0 Offset: 0x5454E0 VA: 0x180546CE0
	public static void set_color(Color value) { }
	// RVA: 0x546D30 Offset: 0x545530 VA: 0x180546D30
	public static void set_matrix(Matrix4x4 value) { }
	// RVA: 0x546D80 Offset: 0x545580 VA: 0x180546D80
	public static void DrawRay(Vector3 from, Vector3 direction) { }
	// RVA: 0x546EE0 Offset: 0x5456E0 VA: 0x180546EE0
	public static void DrawMesh(Mesh mesh) { }
	// RVA: 0x547050 Offset: 0x545850 VA: 0x180547050
	public static void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Vector3 scale) { }
	// RVA: 0x5470F0 Offset: 0x5458F0 VA: 0x1805470F0
	public static void DrawWireMesh(Mesh mesh, Vector3 position, Quaternion rotation, Vector3 scale) { }
	// RVA: 0x547190 Offset: 0x545990 VA: 0x180547190
	private static void DrawLine_Injected(ref Vector3 from, ref Vector3 to) { }
	// RVA: 0x5471F0 Offset: 0x5459F0 VA: 0x1805471F0
	private static void DrawWireSphere_Injected(ref Vector3 center, float radius) { }
	// RVA: 0x547250 Offset: 0x545A50 VA: 0x180547250
	private static void DrawSphere_Injected(ref Vector3 center, float radius) { }
	// RVA: 0x5472B0 Offset: 0x545AB0 VA: 0x1805472B0
	private static void DrawWireCube_Injected(ref Vector3 center, ref Vector3 size) { }
	// RVA: 0x547310 Offset: 0x545B10 VA: 0x180547310
	private static void DrawCube_Injected(ref Vector3 center, ref Vector3 size) { }
	// RVA: 0x547370 Offset: 0x545B70 VA: 0x180547370
	private static void DrawMesh_Injected(Mesh mesh, int submeshIndex, ref Vector3 position, ref Quaternion rotation, ref Vector3 scale) { }
	// RVA: 0x5473F0 Offset: 0x545BF0 VA: 0x1805473F0
	private static void DrawWireMesh_Injected(Mesh mesh, int submeshIndex, ref Vector3 position, ref Quaternion rotation, ref Vector3 scale) { }
	// RVA: 0x547470 Offset: 0x545C70 VA: 0x180547470
	private static void set_color_Injected(ref Color value) { }
	// RVA: 0x5474C0 Offset: 0x545CC0 VA: 0x1805474C0
	private static void set_matrix_Injected(ref Matrix4x4 value) { }
}

// Namespace: UnityEngine
internal static class BeforeRenderHelper // TypeDefIndex: 1365
{
	// Fields
	private static List<BeforeRenderHelper.OrderBlock> s_OrderBlocks; // 0xA16A90

	// Methods
	// RVA: 0x538B40 Offset: 0x537340 VA: 0x180538B40
	public static void Invoke() { }
	// RVA: 0x538D40 Offset: 0x537540 VA: 0x180538D40
	private static void .cctor() { }
}

// Namespace: 
private struct BeforeRenderHelper.OrderBlock // TypeDefIndex: 1366
{
	// Fields
	internal int order; // 0x0
	internal UnityAction callback; // 0x8
}

// Namespace: UnityEngine
public sealed class BillboardAsset : Object // TypeDefIndex: 1367
{}

// Namespace: UnityEngine
public sealed class BillboardRenderer : Renderer // TypeDefIndex: 1368
{}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class Display // TypeDefIndex: 1369
{
	// Fields
	internal IntPtr nativeDisplay; // 0x10
	public static Display[] displays; // 0x0
	private static Display _mainDisplay; // 0x8
	private static Display.DisplaysUpdatedDelegate onDisplaysUpdated; // 0x10

	// Properties
	public int renderingWidth { get; }
	public int renderingHeight { get; }
	public int systemWidth { get; }
	public int systemHeight { get; }
	public RenderBuffer colorBuffer { get; }
	public static Display main { get; }

	// Methods
	// RVA: 0x258740 Offset: 0x256F40 VA: 0x180258740
	internal void .ctor() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	internal void .ctor(IntPtr nativeDisplay) { }
	// RVA: 0x544AE0 Offset: 0x5432E0 VA: 0x180544AE0
	public int get_renderingWidth() { }
	// RVA: 0x544BD0 Offset: 0x5433D0 VA: 0x180544BD0
	public int get_renderingHeight() { }
	// RVA: 0x544CC0 Offset: 0x5434C0 VA: 0x180544CC0
	public int get_systemWidth() { }
	// RVA: 0x544DB0 Offset: 0x5435B0 VA: 0x180544DB0
	public int get_systemHeight() { }
	// RVA: 0x544EA0 Offset: 0x5436A0 VA: 0x180544EA0
	public RenderBuffer get_colorBuffer() { }
	// RVA: 0x544FA0 Offset: 0x5437A0 VA: 0x180544FA0
	public static Vector3 RelativeMouseAt(Vector3 inputMouseCoordinates) { }
	// RVA: 0x5450E0 Offset: 0x5438E0 VA: 0x1805450E0
	public static Display get_main() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x545180 Offset: 0x543980 VA: 0x180545180
	private static void RecreateDisplayList(IntPtr[] nativeDisplay) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x545380 Offset: 0x543B80 VA: 0x180545380
	private static void FireDisplaysUpdated() { }
	// RVA: 0x545460 Offset: 0x543C60 VA: 0x180545460
	private static void GetSystemExtImpl(IntPtr nativeDisplay, out int w, out int h) { }
	// RVA: 0x5454D0 Offset: 0x543CD0 VA: 0x1805454D0
	private static void GetRenderingExtImpl(IntPtr nativeDisplay, out int w, out int h) { }
	// RVA: 0x545540 Offset: 0x543D40 VA: 0x180545540
	private static void GetRenderingBuffersImpl(IntPtr nativeDisplay, out RenderBuffer color, out RenderBuffer depth) { }
	// RVA: 0x5455B0 Offset: 0x543DB0 VA: 0x1805455B0
	private static int RelativeMouseAtImpl(int x, int y, out int rx, out int ry) { }
	// RVA: 0x545630 Offset: 0x543E30 VA: 0x180545630
	private static void .cctor() { }
}

// Namespace: 
public sealed class Display.DisplaysUpdatedDelegate : MulticastDelegate // TypeDefIndex: 1370
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public enum FullScreenMode // TypeDefIndex: 1371
{
	// Fields
	public int value__; // 0x0
	public const FullScreenMode ExclusiveFullScreen = 0; // 0x0
	public const FullScreenMode FullScreenWindow = 1; // 0x0
	public const FullScreenMode MaximizedWindow = 2; // 0x0
	public const FullScreenMode Windowed = 3; // 0x0
}

// Namespace: UnityEngine
public sealed class Screen // TypeDefIndex: 1372
{
	// Properties
	public static int width { get; }
	public static int height { get; }
	public static float dpi { get; }
	public static Resolution currentResolution { get; }
	public static bool fullScreen { get; set; }
	public static Resolution[] resolutions { get; }

	// Methods
	// RVA: 0x436540 Offset: 0x434D40 VA: 0x180436540
	public static int get_width() { }
	// RVA: 0x436590 Offset: 0x434D90 VA: 0x180436590
	public static int get_height() { }
	// RVA: 0x4365E0 Offset: 0x434DE0 VA: 0x1804365E0
	public static float get_dpi() { }
	// RVA: 0x436630 Offset: 0x434E30 VA: 0x180436630
	public static Resolution get_currentResolution() { }
	// RVA: 0x436690 Offset: 0x434E90 VA: 0x180436690
	public static bool get_fullScreen() { }
	// RVA: 0x4366E0 Offset: 0x434EE0 VA: 0x1804366E0
	public static void set_fullScreen(bool value) { }
	// RVA: 0x436730 Offset: 0x434F30 VA: 0x180436730
	public static void SetResolution(int width, int height, FullScreenMode fullscreenMode, int preferredRefreshRate) { }
	// RVA: 0x4367B0 Offset: 0x434FB0 VA: 0x1804367B0
	public static void SetResolution(int width, int height, bool fullscreen, int preferredRefreshRate) { }
	// RVA: 0x436840 Offset: 0x435040 VA: 0x180436840
	public static void SetResolution(int width, int height, bool fullscreen) { }
	// RVA: 0x4368C0 Offset: 0x4350C0 VA: 0x1804368C0
	public static Resolution[] get_resolutions() { }
	// RVA: 0x436910 Offset: 0x435110 VA: 0x180436910
	private static void get_currentResolution_Injected(out Resolution ret) { }
}

// Namespace: UnityEngine
public struct RenderBuffer // TypeDefIndex: 1373
{
	// Fields
	internal int m_RenderTextureInstanceID; // 0x0
	internal IntPtr m_BufferPtr; // 0x8
}

// Namespace: UnityEngine
public enum ComputeBufferMode // TypeDefIndex: 1374
{
	// Fields
	public int value__; // 0x0
	public const ComputeBufferMode Immutable = 0; // 0x0
	public const ComputeBufferMode Dynamic = 1; // 0x0
	public const ComputeBufferMode Circular = 2; // 0x0
	public const ComputeBufferMode StreamOut = 3; // 0x0
	public const ComputeBufferMode SubUpdates = 4; // 0x0
}

// Namespace: UnityEngine
public class Graphics // TypeDefIndex: 1375
{
	// Fields
	internal static readonly int kMaxDrawMeshInstanceCount; // 0xAC240

	// Methods
	// RVA: 0x547B50 Offset: 0x546350 VA: 0x180547B50
	private static int Internal_GetMaxDrawMeshInstanceCount() { }
	// RVA: 0x547BA0 Offset: 0x5463A0 VA: 0x180547BA0
	internal static void Internal_DrawTexture(ref Internal_DrawTextureArguments args) { }
	// RVA: 0x547BF0 Offset: 0x5463F0 VA: 0x180547BF0
	private static void Internal_DrawMesh(Mesh mesh, int submeshIndex, Matrix4x4 matrix, Material material, int layer, Camera camera, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, Transform probeAnchor, LightProbeUsage lightProbeUsage, LightProbeProxyVolume lightProbeProxyVolume) { }
	// RVA: 0x547D50 Offset: 0x546550 VA: 0x180547D50
	private static void Internal_DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera, LightProbeUsage lightProbeUsage, LightProbeProxyVolume lightProbeProxyVolume) { }
	// RVA: 0x547DF0 Offset: 0x5465F0 VA: 0x180547DF0
	private static void Internal_DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera, LightProbeUsage lightProbeUsage, LightProbeProxyVolume lightProbeProxyVolume) { }
	// RVA: 0x547F60 Offset: 0x546760 VA: 0x180547F60
	private static void Blit2(Texture source, RenderTexture dest) { }
	// RVA: 0x547FC0 Offset: 0x5467C0 VA: 0x180547FC0
	public static void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int layer, Camera camera, int submeshIndex, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, Transform probeAnchor, LightProbeUsage lightProbeUsage, LightProbeProxyVolume lightProbeProxyVolume) { }
	// RVA: 0x548260 Offset: 0x546A60 VA: 0x180548260
	public static void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera, LightProbeUsage lightProbeUsage, LightProbeProxyVolume lightProbeProxyVolume) { }
	// RVA: 0x5487B0 Offset: 0x546FB0 VA: 0x1805487B0
	public static void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera, LightProbeUsage lightProbeUsage, LightProbeProxyVolume lightProbeProxyVolume) { }
	// RVA: 0x548C30 Offset: 0x547430 VA: 0x180548C30
	public static void Blit(Texture source, RenderTexture dest) { }
	// RVA: 0x548D10 Offset: 0x547510 VA: 0x180548D10
	public static void DrawMesh(Mesh mesh, Vector3 position, Quaternion rotation, Material material, int layer) { }
	// RVA: 0x548F90 Offset: 0x547790 VA: 0x180548F90
	public static void DrawMeshInstanced(Mesh mesh, int submeshIndex, Material material, Matrix4x4[] matrices, int count, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera, LightProbeUsage lightProbeUsage) { }
	// RVA: 0x5490C0 Offset: 0x5478C0 VA: 0x1805490C0
	public static void DrawMeshInstancedIndirect(Mesh mesh, int submeshIndex, Material material, Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset = 0, MaterialPropertyBlock properties, ShadowCastingMode castShadows = 1, bool receiveShadows = True, int layer = 0, Camera camera, LightProbeUsage lightProbeUsage = 1) { }
	// RVA: 0x549210 Offset: 0x547A10 VA: 0x180549210
	private static void .cctor() { }
	// RVA: 0x5492C0 Offset: 0x547AC0 VA: 0x1805492C0
	private static void Internal_DrawMesh_Injected(Mesh mesh, int submeshIndex, ref Matrix4x4 matrix, Material material, int layer, Camera camera, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, Transform probeAnchor, LightProbeUsage lightProbeUsage, LightProbeProxyVolume lightProbeProxyVolume) { }
	// RVA: 0x549360 Offset: 0x547B60 VA: 0x180549360
	private static void Internal_DrawMeshInstancedIndirect_Injected(Mesh mesh, int submeshIndex, Material material, ref Bounds bounds, ComputeBuffer bufferWithArgs, int argsOffset, MaterialPropertyBlock properties, ShadowCastingMode castShadows, bool receiveShadows, int layer, Camera camera, LightProbeUsage lightProbeUsage, LightProbeProxyVolume lightProbeProxyVolume) { }
}

// Namespace: UnityEngine
public sealed class GL // TypeDefIndex: 1376
{
	// Methods
	// RVA: 0x545780 Offset: 0x543F80 VA: 0x180545780
	public static Matrix4x4 GetGPUProjectionMatrix(Matrix4x4 proj, bool renderIntoTexture) { }
	// RVA: 0x545810 Offset: 0x544010 VA: 0x180545810
	private static void GetGPUProjectionMatrix_Injected(ref Matrix4x4 proj, bool renderIntoTexture, out Matrix4x4 ret) { }
}

// Namespace: UnityEngine
public static class ScalableBufferManager // TypeDefIndex: 1377
{
	// Properties
	public static float widthScaleFactor { get; }
	public static float heightScaleFactor { get; }

	// Methods
	// RVA: 0x4351A0 Offset: 0x4339A0 VA: 0x1804351A0
	public static float get_widthScaleFactor() { }
	// RVA: 0x4351F0 Offset: 0x4339F0 VA: 0x1804351F0
	public static float get_heightScaleFactor() { }
}

// Namespace: UnityEngine
public sealed class LightmapSettings : Object // TypeDefIndex: 1378
{}

// Namespace: UnityEngine
public sealed class LightProbes : Object // TypeDefIndex: 1379
{
	// Methods
	// RVA: 0x54AC60 Offset: 0x549460 VA: 0x18054AC60
	public static void CalculateInterpolatedLightAndOcclusionProbes(Vector3[] positions, SphericalHarmonicsL2[] lightProbes, Vector4[] occlusionProbes) { }
	// RVA: 0x54AE40 Offset: 0x549640 VA: 0x18054AE40
	internal static void CalculateInterpolatedLightAndOcclusionProbes_Internal(Vector3[] positions, int positionsCount, SphericalHarmonicsL2[] lightProbes, Vector4[] occlusionProbes) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Resolution // TypeDefIndex: 1380
{
	// Fields
	private int m_Width; // 0x0
	private int m_Height; // 0x4
	private int m_RefreshRate; // 0x8

	// Properties
	public int width { get; set; }
	public int height { get; set; }
	public int refreshRate { get; set; }

	// Methods
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060
	public int get_width() { }
	// RVA: 0x1ED0 Offset: 0x12D0 VA: 0x180001ED0
	public void set_width(int value) { }
	// RVA: 0x16070 Offset: 0x15470 VA: 0x180016070
	public int get_height() { }
	// RVA: 0x1EF0 Offset: 0x12F0 VA: 0x180001EF0
	public void set_height(int value) { }
	// RVA: 0x16080 Offset: 0x15480 VA: 0x180016080
	public int get_refreshRate() { }
	// RVA: 0x1F00 Offset: 0x1300 VA: 0x180001F00
	public void set_refreshRate(int value) { }
	// RVA: 0x16090 Offset: 0x15490 VA: 0x180016090 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
internal struct Internal_DrawTextureArguments // TypeDefIndex: 1381
{
	// Fields
	public Rect screenRect; // 0x0
	public Rect sourceRect; // 0x10
	public int leftBorder; // 0x20
	public int rightBorder; // 0x24
	public int topBorder; // 0x28
	public int bottomBorder; // 0x2C
	public Color leftBorderColor; // 0x30
	public Color rightBorderColor; // 0x40
	public Color topBorderColor; // 0x50
	public Color bottomBorderColor; // 0x60
	public Color color; // 0x70
	public Vector4 borderWidths; // 0x80
	public Vector4 cornerRadiuses; // 0x90
	public bool smoothCorners; // 0xA0
	public int pass; // 0xA4
	public Texture texture; // 0xA8
	public Material mat; // 0xB0
}

// Namespace: UnityEngine
public sealed class QualitySettings : Object // TypeDefIndex: 1382
{
	// Properties
	set; }
	public static ColorSpace activeColorSpace { get; }

	// Methods
	// RVA: 0x4F3EF0 Offset: 0x4F26F0 VA: 0x1804F3EF0
	public static void set_vSyncCount(int value) { }
	// RVA: 0x4F3F40 Offset: 0x4F2740 VA: 0x1804F3F40
	public static ColorSpace get_activeColorSpace() { }
}

// Namespace: UnityEngine
public sealed class TrailRenderer : Renderer // TypeDefIndex: 1383
{
	// Properties
	set; }

	// Methods
	// RVA: 0x440EF0 Offset: 0x43F6F0 VA: 0x180440EF0
	public void set_emitting(bool value) { }
}

// Namespace: UnityEngine
public sealed class MaterialPropertyBlock // TypeDefIndex: 1384
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	// RVA: 0x54F640 Offset: 0x54DE40 VA: 0x18054F640
	private void SetFloatImpl(int name, float value) { }
	// RVA: 0x54F6B0 Offset: 0x54DEB0 VA: 0x18054F6B0
	private void SetVectorImpl(int name, Vector4 value) { }
	// RVA: 0x54F720 Offset: 0x54DF20 VA: 0x18054F720
	private void SetColorImpl(int name, Color value) { }
	// RVA: 0x54F790 Offset: 0x54DF90 VA: 0x18054F790
	private void SetMatrixImpl(int name, Matrix4x4 value) { }
	// RVA: 0x54F800 Offset: 0x54E000 VA: 0x18054F800
	private void SetTextureImpl(int name, Texture value) { }
	// RVA: 0x54F870 Offset: 0x54E070 VA: 0x18054F870
	private void SetBufferImpl(int name, ComputeBuffer value) { }
	// RVA: 0x54F8E0 Offset: 0x54E0E0 VA: 0x18054F8E0
	private void SetFloatArrayImpl(int name, float[] values, int count) { }
	// RVA: 0x54F960 Offset: 0x54E160 VA: 0x18054F960
	private void SetVectorArrayImpl(int name, Vector4[] values, int count) { }
	// RVA: 0x54F9E0 Offset: 0x54E1E0 VA: 0x18054F9E0
	internal static void Internal_CopySHCoefficientArraysFrom(MaterialPropertyBlock properties, SphericalHarmonicsL2[] lightProbes, int sourceStart, int destStart, int count) { }
	// RVA: 0x54FA70 Offset: 0x54E270 VA: 0x18054FA70
	internal static void Internal_CopyProbeOcclusionArrayFrom(MaterialPropertyBlock properties, Vector4[] occlusionProbes, int sourceStart, int destStart, int count) { }
	// RVA: 0x54FB00 Offset: 0x54E300 VA: 0x18054FB00
	private static IntPtr CreateImpl() { }
	// RVA: 0x54FB50 Offset: 0x54E350 VA: 0x18054FB50
	private static void DestroyImpl(IntPtr mpb) { }
	// RVA: 0x54FBA0 Offset: 0x54E3A0 VA: 0x18054FBA0
	private void Clear(bool keepMemory) { }
	// RVA: 0x54FC00 Offset: 0x54E400 VA: 0x18054FC00
	public void Clear() { }
	// RVA: 0x54FC60 Offset: 0x54E460 VA: 0x18054FC60
	private void SetFloatArray(int name, float[] values, int count) { }
	// RVA: 0x54FDF0 Offset: 0x54E5F0 VA: 0x18054FDF0
	private void SetVectorArray(int name, Vector4[] values, int count) { }
	// RVA: 0x54FF80 Offset: 0x54E780 VA: 0x18054FF80
	public void .ctor() { }
	// RVA: 0x54FFD0 Offset: 0x54E7D0 VA: 0x18054FFD0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x550110 Offset: 0x54E910 VA: 0x180550110
	private void Dispose() { }
	// RVA: 0x550200 Offset: 0x54EA00 VA: 0x180550200
	public void SetFloat(string name, float value) { }
	// RVA: 0x54F640 Offset: 0x54DE40 VA: 0x18054F640
	public void SetFloat(int nameID, float value) { }
	// RVA: 0x5502B0 Offset: 0x54EAB0 VA: 0x1805502B0
	public void SetVector(int nameID, Vector4 value) { }
	// RVA: 0x550320 Offset: 0x54EB20 VA: 0x180550320
	public void SetColor(int nameID, Color value) { }
	// RVA: 0x550390 Offset: 0x54EB90 VA: 0x180550390
	public void SetMatrix(int nameID, Matrix4x4 value) { }
	// RVA: 0x550420 Offset: 0x54EC20 VA: 0x180550420
	public void SetBuffer(string name, ComputeBuffer value) { }
	// RVA: 0x54F870 Offset: 0x54E070 VA: 0x18054F870
	public void SetBuffer(int nameID, ComputeBuffer value) { }
	// RVA: 0x5504D0 Offset: 0x54ECD0 VA: 0x1805504D0
	public void SetTexture(string name, Texture value) { }
	// RVA: 0x54F800 Offset: 0x54E000 VA: 0x18054F800
	public void SetTexture(int nameID, Texture value) { }
	// RVA: 0x550580 Offset: 0x54ED80 VA: 0x180550580
	public void SetFloatArray(string name, float[] values) { }
	// RVA: 0x550720 Offset: 0x54EF20 VA: 0x180550720
	public void SetVectorArray(string name, Vector4[] values) { }
	// RVA: 0x5508C0 Offset: 0x54F0C0 VA: 0x1805508C0
	public void CopySHCoefficientArraysFrom(SphericalHarmonicsL2[] lightProbes) { }
	// RVA: 0x5509A0 Offset: 0x54F1A0 VA: 0x1805509A0
	public void CopySHCoefficientArraysFrom(SphericalHarmonicsL2[] lightProbes, int sourceStart, int destStart, int count) { }
	// RVA: 0x550BD0 Offset: 0x54F3D0 VA: 0x180550BD0
	public void CopyProbeOcclusionArrayFrom(Vector4[] occlusionProbes) { }
	// RVA: 0x550CB0 Offset: 0x54F4B0 VA: 0x180550CB0
	public void CopyProbeOcclusionArrayFrom(Vector4[] occlusionProbes, int sourceStart, int destStart, int count) { }
	// RVA: 0x550EE0 Offset: 0x54F6E0 VA: 0x180550EE0
	private void SetVectorImpl_Injected(int name, ref Vector4 value) { }
	// RVA: 0x550F50 Offset: 0x54F750 VA: 0x180550F50
	private void SetColorImpl_Injected(int name, ref Color value) { }
	// RVA: 0x550FC0 Offset: 0x54F7C0 VA: 0x180550FC0
	private void SetMatrixImpl_Injected(int name, ref Matrix4x4 value) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xDCCD0 Offset: 0xDC0D0 VA: 0x1800DCCD0
[UsedByNativeCodeAttribute] // RVA: 0xDCCD0 Offset: 0xDC0D0 VA: 0x1800DCCD0
public class Renderer : Component // TypeDefIndex: 1385
{
	// Properties
	public Bounds bounds { get; }
	public bool enabled { get; set; }
	public ShadowCastingMode shadowCastingMode { get; set; }
	public bool receiveShadows { get; set; }
	public MotionVectorGenerationMode motionVectorGenerationMode { set; }
	public LightProbeUsage lightProbeUsage { get; set; }
	public ReflectionProbeUsage reflectionProbeUsage { set; }
	public int sortingLayerID { get; set; }
	public int sortingOrder { get; set; }
	public int lightmapIndex { get; set; }
	public Vector4 lightmapScaleOffset { get; }
	public Material material { get; set; }
	public Material sharedMaterial { get; set; }
	public Material[] sharedMaterials { get; }

	// Methods
	// RVA: 0x4344F0 Offset: 0x432CF0 VA: 0x1804344F0
	public Bounds get_bounds() { }
	// RVA: 0x434560 Offset: 0x432D60 VA: 0x180434560
	private Material GetMaterial() { }
	// RVA: 0x4345B0 Offset: 0x432DB0 VA: 0x1804345B0
	private Material GetSharedMaterial() { }
	// RVA: 0x434600 Offset: 0x432E00 VA: 0x180434600
	private void SetMaterial(Material m) { }
	// RVA: 0x434660 Offset: 0x432E60 VA: 0x180434660
	public bool get_enabled() { }
	// RVA: 0x4346B0 Offset: 0x432EB0 VA: 0x1804346B0
	public void set_enabled(bool value) { }
	// RVA: 0x434710 Offset: 0x432F10 VA: 0x180434710
	public ShadowCastingMode get_shadowCastingMode() { }
	// RVA: 0x434760 Offset: 0x432F60 VA: 0x180434760
	public void set_shadowCastingMode(ShadowCastingMode value) { }
	// RVA: 0x4347C0 Offset: 0x432FC0 VA: 0x1804347C0
	public bool get_receiveShadows() { }
	// RVA: 0x434810 Offset: 0x433010 VA: 0x180434810
	public void set_receiveShadows(bool value) { }
	// RVA: 0x434870 Offset: 0x433070 VA: 0x180434870
	public void set_motionVectorGenerationMode(MotionVectorGenerationMode value) { }
	// RVA: 0x4348D0 Offset: 0x4330D0 VA: 0x1804348D0
	public LightProbeUsage get_lightProbeUsage() { }
	// RVA: 0x434920 Offset: 0x433120 VA: 0x180434920
	public void set_lightProbeUsage(LightProbeUsage value) { }
	// RVA: 0x434980 Offset: 0x433180 VA: 0x180434980
	public void set_reflectionProbeUsage(ReflectionProbeUsage value) { }
	// RVA: 0x4349E0 Offset: 0x4331E0 VA: 0x1804349E0
	public int get_sortingLayerID() { }
	// RVA: 0x434A30 Offset: 0x433230 VA: 0x180434A30
	public void set_sortingLayerID(int value) { }
	// RVA: 0x434A90 Offset: 0x433290 VA: 0x180434A90
	public int get_sortingOrder() { }
	// RVA: 0x434AE0 Offset: 0x4332E0 VA: 0x180434AE0
	public void set_sortingOrder(int value) { }
	// RVA: 0x434B40 Offset: 0x433340 VA: 0x180434B40
	private int GetLightmapIndex(LightmapType lt) { }
	// RVA: 0x434BA0 Offset: 0x4333A0 VA: 0x180434BA0
	private void SetLightmapIndex(int index, LightmapType lt) { }
	// RVA: 0x434C10 Offset: 0x433410 VA: 0x180434C10
	private Vector4 GetLightmapST(LightmapType lt) { }
	// RVA: 0x434C90 Offset: 0x433490 VA: 0x180434C90
	public int get_lightmapIndex() { }
	// RVA: 0x434CF0 Offset: 0x4334F0 VA: 0x180434CF0
	public void set_lightmapIndex(int value) { }
	// RVA: 0x434D50 Offset: 0x433550 VA: 0x180434D50
	public Vector4 get_lightmapScaleOffset() { }
	// RVA: 0x434DD0 Offset: 0x4335D0 VA: 0x180434DD0
	private Material[] GetSharedMaterialArray() { }
	// RVA: 0x434560 Offset: 0x432D60 VA: 0x180434560
	public Material get_material() { }
	// RVA: 0x434600 Offset: 0x432E00 VA: 0x180434600
	public void set_material(Material value) { }
	// RVA: 0x4345B0 Offset: 0x432DB0 VA: 0x1804345B0
	public Material get_sharedMaterial() { }
	// RVA: 0x434600 Offset: 0x432E00 VA: 0x180434600
	public void set_sharedMaterial(Material value) { }
	// RVA: 0x434DD0 Offset: 0x4335D0 VA: 0x180434DD0
	public Material[] get_sharedMaterials() { }
	// RVA: 0x434E20 Offset: 0x433620 VA: 0x180434E20
	private void get_bounds_Injected(out Bounds ret) { }
	// RVA: 0x434E80 Offset: 0x433680 VA: 0x180434E80
	private void GetLightmapST_Injected(LightmapType lt, out Vector4 ret) { }
}

// Namespace: UnityEngine
public sealed class RenderSettings : Object // TypeDefIndex: 1386
{
	// Properties
	public static bool fog { get; }
	public static float fogStartDistance { get; }
	public static float fogEndDistance { get; }
	public static Color fogColor { get; }
	public static float fogDensity { get; }

	// Methods
	// RVA: 0x4FA9F0 Offset: 0x4F91F0 VA: 0x1804FA9F0
	public static bool get_fog() { }
	// RVA: 0x4FAA40 Offset: 0x4F9240 VA: 0x1804FAA40
	public static float get_fogStartDistance() { }
	// RVA: 0x4FAA90 Offset: 0x4F9290 VA: 0x1804FAA90
	public static float get_fogEndDistance() { }
	// RVA: 0x4FAAE0 Offset: 0x4F92E0 VA: 0x1804FAAE0
	public static Color get_fogColor() { }
	// RVA: 0x4FAB40 Offset: 0x4F9340 VA: 0x1804FAB40
	public static float get_fogDensity() { }
	// RVA: 0x4FAB90 Offset: 0x4F9390 VA: 0x1804FAB90
	private static void get_fogColor_Injected(out Color ret) { }
}

// Namespace: UnityEngine
public sealed class Shader : Object // TypeDefIndex: 1387
{
	// Properties
	public bool isSupported { get; }

	// Methods
	// RVA: 0x437870 Offset: 0x436070 VA: 0x180437870
	public static Shader Find(string name) { }
	// RVA: 0x4378C0 Offset: 0x4360C0 VA: 0x1804378C0
	public bool get_isSupported() { }
	// RVA: 0x437910 Offset: 0x436110 VA: 0x180437910
	public static int PropertyToID(string name) { }
	// RVA: 0x437960 Offset: 0x436160 VA: 0x180437960
	private static void SetGlobalFloatImpl(int name, float value) { }
	// RVA: 0x4379C0 Offset: 0x4361C0 VA: 0x1804379C0
	private static void SetGlobalVectorImpl(int name, Vector4 value) { }
	// RVA: 0x437A20 Offset: 0x436220 VA: 0x180437A20
	private static void SetGlobalTextureImpl(int name, Texture value) { }
	// RVA: 0x437960 Offset: 0x436160 VA: 0x180437960
	public static void SetGlobalFloat(int nameID, float value) { }
	// RVA: 0x437A80 Offset: 0x436280 VA: 0x180437A80
	public static void SetGlobalVector(string name, Vector4 value) { }
	// RVA: 0x437B30 Offset: 0x436330 VA: 0x180437B30
	public static void SetGlobalTexture(string name, Texture value) { }
	// RVA: 0x437BD0 Offset: 0x4363D0 VA: 0x180437BD0
	private void .ctor() { }
	// RVA: 0x437C60 Offset: 0x436460 VA: 0x180437C60
	private static void SetGlobalVectorImpl_Injected(int name, ref Vector4 value) { }
}

// Namespace: UnityEngine
public class Material : Object // TypeDefIndex: 1388
{
	// Properties
	public Shader shader { get; }
	public Color color { set; }
	public Texture mainTexture { get; }
	public int renderQueue { set; }
	public bool doubleSidedGI { set; }
	public bool enableInstancing { get; set; }
	public int passCount { get; }
	public string[] shaderKeywords { get; set; }

	// Methods
	// RVA: 0x54DBE0 Offset: 0x54C3E0 VA: 0x18054DBE0
	private static void CreateWithShader(Material self, Shader shader) { }
	// RVA: 0x54DC40 Offset: 0x54C440 VA: 0x18054DC40
	private static void CreateWithMaterial(Material self, Material source) { }
	// RVA: 0x54DCA0 Offset: 0x54C4A0 VA: 0x18054DCA0
	private static void CreateWithString(Material self) { }
	// RVA: 0x54DCF0 Offset: 0x54C4F0 VA: 0x18054DCF0
	public void .ctor(Shader shader) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x54DDD0 Offset: 0x54C5D0 VA: 0x18054DDD0
	public void .ctor(Material source) { }
	[ObsoleteAttribute] // RVA: 0xDCD50 Offset: 0xDC150 VA: 0x1800DCD50
	// RVA: 0x54DEB0 Offset: 0x54C6B0 VA: 0x18054DEB0
	public void .ctor(string contents) { }
	// RVA: 0x54DF80 Offset: 0x54C780 VA: 0x18054DF80
	public Shader get_shader() { }
	// RVA: 0x54DFD0 Offset: 0x54C7D0 VA: 0x18054DFD0
	public void set_color(Color value) { }
	// RVA: 0x54E180 Offset: 0x54C980 VA: 0x18054E180
	public Texture get_mainTexture() { }
	// RVA: 0x54E2A0 Offset: 0x54CAA0 VA: 0x18054E2A0
	private int GetFirstPropertyNameIdByAttribute(ShaderPropertyFlags attributeFlag) { }
	// RVA: 0x54E300 Offset: 0x54CB00 VA: 0x18054E300
	public bool HasProperty(int nameID) { }
	// RVA: 0x54E360 Offset: 0x54CB60 VA: 0x18054E360
	public bool HasProperty(string name) { }
	// RVA: 0x54E400 Offset: 0x54CC00 VA: 0x18054E400
	public void set_renderQueue(int value) { }
	// RVA: 0x54E460 Offset: 0x54CC60 VA: 0x18054E460
	public void EnableKeyword(string keyword) { }
	// RVA: 0x54E4C0 Offset: 0x54CCC0 VA: 0x18054E4C0
	public void DisableKeyword(string keyword) { }
	// RVA: 0x54E520 Offset: 0x54CD20 VA: 0x18054E520
	public void set_doubleSidedGI(bool value) { }
	// RVA: 0x54E580 Offset: 0x54CD80 VA: 0x18054E580
	public bool get_enableInstancing() { }
	// RVA: 0x54E5D0 Offset: 0x54CDD0 VA: 0x18054E5D0
	public void set_enableInstancing(bool value) { }
	// RVA: 0x54E630 Offset: 0x54CE30 VA: 0x18054E630
	public int get_passCount() { }
	// RVA: 0x54E680 Offset: 0x54CE80 VA: 0x18054E680
	public void SetShaderPassEnabled(string passName, bool enabled) { }
	// RVA: 0x54E6F0 Offset: 0x54CEF0 VA: 0x18054E6F0
	public void SetOverrideTag(string tag, string val) { }
	// RVA: 0x54E760 Offset: 0x54CF60 VA: 0x18054E760
	private string GetTagImpl(string tag, bool currentSubShaderOnly, string defaultValue) { }
	// RVA: 0x54E7E0 Offset: 0x54CFE0 VA: 0x18054E7E0
	public string GetTag(string tag, bool searchFallbacks, string defaultValue) { }
	// RVA: 0x54E870 Offset: 0x54D070 VA: 0x18054E870
	public void CopyPropertiesFromMaterial(Material mat) { }
	// RVA: 0x54E8D0 Offset: 0x54D0D0 VA: 0x18054E8D0
	private string[] GetShaderKeywords() { }
	// RVA: 0x54E920 Offset: 0x54D120 VA: 0x18054E920
	private void SetShaderKeywords(string[] names) { }
	// RVA: 0x54E8D0 Offset: 0x54D0D0 VA: 0x18054E8D0
	public string[] get_shaderKeywords() { }
	// RVA: 0x54E920 Offset: 0x54D120 VA: 0x18054E920
	public void set_shaderKeywords(string[] value) { }
	// RVA: 0x54E980 Offset: 0x54D180 VA: 0x18054E980
	private void SetFloatImpl(int name, float value) { }
	// RVA: 0x54E9F0 Offset: 0x54D1F0 VA: 0x18054E9F0
	private void SetColorImpl(int name, Color value) { }
	// RVA: 0x54EA60 Offset: 0x54D260 VA: 0x18054EA60
	private void SetMatrixImpl(int name, Matrix4x4 value) { }
	// RVA: 0x54EAD0 Offset: 0x54D2D0 VA: 0x18054EAD0
	private void SetTextureImpl(int name, Texture value) { }
	// RVA: 0x54EB40 Offset: 0x54D340 VA: 0x18054EB40
	private float GetFloatImpl(int name) { }
	// RVA: 0x54EBA0 Offset: 0x54D3A0 VA: 0x18054EBA0
	private Color GetColorImpl(int name) { }
	// RVA: 0x54EC20 Offset: 0x54D420 VA: 0x18054EC20
	private Texture GetTextureImpl(int name) { }
	// RVA: 0x54EC80 Offset: 0x54D480 VA: 0x18054EC80
	private void SetTextureOffsetImpl(int name, Vector2 offset) { }
	// RVA: 0x54ECF0 Offset: 0x54D4F0 VA: 0x18054ECF0
	public void SetFloat(string name, float value) { }
	// RVA: 0x54E980 Offset: 0x54D180 VA: 0x18054E980
	public void SetFloat(int nameID, float value) { }
	// RVA: 0x54EDA0 Offset: 0x54D5A0 VA: 0x18054EDA0
	public void SetInt(string name, int value) { }
	// RVA: 0x54EE60 Offset: 0x54D660 VA: 0x18054EE60
	public void SetColor(string name, Color value) { }
	// RVA: 0x54EF20 Offset: 0x54D720 VA: 0x18054EF20
	public void SetColor(int nameID, Color value) { }
	// RVA: 0x54EF90 Offset: 0x54D790 VA: 0x18054EF90
	public void SetVector(int nameID, Vector4 value) { }
	// RVA: 0x54F020 Offset: 0x54D820 VA: 0x18054F020
	public void SetMatrix(int nameID, Matrix4x4 value) { }
	// RVA: 0x54F0B0 Offset: 0x54D8B0 VA: 0x18054F0B0
	public void SetTexture(string name, Texture value) { }
	// RVA: 0x54EAD0 Offset: 0x54D2D0 VA: 0x18054EAD0
	public void SetTexture(int nameID, Texture value) { }
	// RVA: 0x54F160 Offset: 0x54D960 VA: 0x18054F160
	public float GetFloat(string name) { }
	// RVA: 0x54EB40 Offset: 0x54D340 VA: 0x18054EB40
	public float GetFloat(int nameID) { }
	// RVA: 0x54F200 Offset: 0x54DA00 VA: 0x18054F200
	public Color GetColor(int nameID) { }
	// RVA: 0x54F290 Offset: 0x54DA90 VA: 0x18054F290
	public Vector4 GetVector(int nameID) { }
	// RVA: 0x54F320 Offset: 0x54DB20 VA: 0x18054F320
	public Texture GetTexture(string name) { }
	// RVA: 0x54EC20 Offset: 0x54D420 VA: 0x18054EC20
	public Texture GetTexture(int nameID) { }
	// RVA: 0x54F3C0 Offset: 0x54DBC0 VA: 0x18054F3C0
	public void SetTextureOffset(string name, Vector2 value) { }
	// RVA: 0x54F480 Offset: 0x54DC80 VA: 0x18054F480
	private void SetColorImpl_Injected(int name, ref Color value) { }
	// RVA: 0x54F4F0 Offset: 0x54DCF0 VA: 0x18054F4F0
	private void SetMatrixImpl_Injected(int name, ref Matrix4x4 value) { }
	// RVA: 0x54F560 Offset: 0x54DD60 VA: 0x18054F560
	private void GetColorImpl_Injected(int name, out Color ret) { }
	// RVA: 0x54F5D0 Offset: 0x54DDD0 VA: 0x18054F5D0
	private void SetTextureOffsetImpl_Injected(int name, ref Vector2 offset) { }
}

// Namespace: UnityEngine
public struct LightBakingOutput // TypeDefIndex: 1389
{
	// Fields
	public int probeOcclusionLightIndex; // 0x0
	public int occlusionMaskChannel; // 0x4
	public LightmapBakeType lightmapBakeType; // 0x8
	public MixedLightingMode mixedLightingMode; // 0xC
	public bool isBaked; // 0x10
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xDCD80 Offset: 0xDC180 VA: 0x1800DCD80
[RequireComponent] // RVA: 0xDCD80 Offset: 0xDC180 VA: 0x1800DCD80
public sealed class Light : Behaviour // TypeDefIndex: 1390
{
	// Fields
	private int m_BakedIndex; // 0x18

	// Properties
	public LightType type { get; }
	public float spotAngle { get; }
	public Color color { get; }
	public float intensity { get; set; }
	public float bounceIntensity { get; }
	public float range { get; }
	public LightBakingOutput bakingOutput { get; }
	public LightShadows shadows { get; }
	public float cookieSize { get; }
	public Texture cookie { get; }

	// Methods
	// RVA: 0x54A6C0 Offset: 0x548EC0 VA: 0x18054A6C0
	public LightType get_type() { }
	// RVA: 0x54A710 Offset: 0x548F10 VA: 0x18054A710
	public float get_spotAngle() { }
	// RVA: 0x54A760 Offset: 0x548F60 VA: 0x18054A760
	public Color get_color() { }
	// RVA: 0x54A7D0 Offset: 0x548FD0 VA: 0x18054A7D0
	public float get_intensity() { }
	// RVA: 0x54A820 Offset: 0x549020 VA: 0x18054A820
	public void set_intensity(float value) { }
	// RVA: 0x54A880 Offset: 0x549080 VA: 0x18054A880
	public float get_bounceIntensity() { }
	// RVA: 0x54A8D0 Offset: 0x5490D0 VA: 0x18054A8D0
	public float get_range() { }
	// RVA: 0x54A920 Offset: 0x549120 VA: 0x18054A920
	public LightBakingOutput get_bakingOutput() { }
	// RVA: 0x54A990 Offset: 0x549190 VA: 0x18054A990
	public LightShadows get_shadows() { }
	// RVA: 0x54A9E0 Offset: 0x5491E0 VA: 0x18054A9E0
	public float get_cookieSize() { }
	// RVA: 0x54AA30 Offset: 0x549230 VA: 0x18054AA30
	public Texture get_cookie() { }
	// RVA: 0x54AA80 Offset: 0x549280 VA: 0x18054AA80
	private void get_color_Injected(out Color ret) { }
	// RVA: 0x54AAE0 Offset: 0x5492E0 VA: 0x18054AAE0
	private void get_bakingOutput_Injected(out LightBakingOutput ret) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xDCE20 Offset: 0xDC220 VA: 0x1800DCE20
public sealed class MeshFilter : Component // TypeDefIndex: 1391
{
	// Properties
	public Mesh sharedMesh { get; set; }
	public Mesh mesh { get; set; }

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void DontStripMeshFilter() { }
	// RVA: 0x4E7B50 Offset: 0x4E6350 VA: 0x1804E7B50
	public Mesh get_sharedMesh() { }
	// RVA: 0x4E7BA0 Offset: 0x4E63A0 VA: 0x1804E7BA0
	public void set_sharedMesh(Mesh value) { }
	// RVA: 0x4E7C00 Offset: 0x4E6400 VA: 0x1804E7C00
	public Mesh get_mesh() { }
	// RVA: 0x4E7C50 Offset: 0x4E6450 VA: 0x1804E7C50
	public void set_mesh(Mesh value) { }
}

// Namespace: UnityEngine
public enum RenderingPath // TypeDefIndex: 1392
{
	// Fields
	public int value__; // 0x0
	public const RenderingPath UsePlayerSettings = -1; // 0x0
	public const RenderingPath VertexLit = 0; // 0x0
	public const RenderingPath Forward = 1; // 0x0
	public const RenderingPath DeferredLighting = 2; // 0x0
	public const RenderingPath DeferredShading = 3; // 0x0
}

// Namespace: UnityEngine
public enum StereoTargetEyeMask // TypeDefIndex: 1393
{
	// Fields
	public int value__; // 0x0
	public const StereoTargetEyeMask None = 0; // 0x0
	public const StereoTargetEyeMask Left = 1; // 0x0
	public const StereoTargetEyeMask Right = 2; // 0x0
	public const StereoTargetEyeMask Both = 3; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum CameraType // TypeDefIndex: 1394
{
	// Fields
	public int value__; // 0x0
	public const CameraType Game = 1; // 0x0
	public const CameraType SceneView = 2; // 0x0
	public const CameraType Preview = 4; // 0x0
	public const CameraType VR = 8; // 0x0
	public const CameraType Reflection = 16; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum ComputeBufferType // TypeDefIndex: 1395
{
	// Fields
	public int value__; // 0x0
	public const ComputeBufferType Default = 0; // 0x0
	public const ComputeBufferType Raw = 1; // 0x0
	public const ComputeBufferType Append = 2; // 0x0
	public const ComputeBufferType Counter = 4; // 0x0
	public const ComputeBufferType Constant = 8; // 0x0
	public const ComputeBufferType Structured = 16; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCEA0 Offset: 0xDC2A0 VA: 0x1800DCEA0
	public const ComputeBufferType DrawIndirect = 256; // 0x0
	public const ComputeBufferType IndirectArguments = 256; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCED0 Offset: 0xDC2D0 VA: 0x1800DCED0
	public const ComputeBufferType GPUMemory = 512; // 0x0
}

// Namespace: UnityEngine
public enum LightType // TypeDefIndex: 1396
{
	// Fields
	public int value__; // 0x0
	public const LightType Spot = 0; // 0x0
	public const LightType Directional = 1; // 0x0
	public const LightType Point = 2; // 0x0
	public const LightType Area = 3; // 0x0
	public const LightType Rectangle = 3; // 0x0
	public const LightType Disc = 4; // 0x0
}

// Namespace: UnityEngine
public enum LightShadows // TypeDefIndex: 1397
{
	// Fields
	public int value__; // 0x0
	public const LightShadows None = 0; // 0x0
	public const LightShadows Hard = 1; // 0x0
	public const LightShadows Soft = 2; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum LightmapBakeType // TypeDefIndex: 1398
{
	// Fields
	public int value__; // 0x0
	public const LightmapBakeType Realtime = 4; // 0x0
	public const LightmapBakeType Baked = 2; // 0x0
	public const LightmapBakeType Mixed = 1; // 0x0
}

// Namespace: UnityEngine
public enum MixedLightingMode // TypeDefIndex: 1399
{
	// Fields
	public int value__; // 0x0
	public const MixedLightingMode IndirectOnly = 0; // 0x0
	public const MixedLightingMode Shadowmask = 2; // 0x0
	public const MixedLightingMode Subtractive = 1; // 0x0
}

// Namespace: UnityEngine
public enum CameraClearFlags // TypeDefIndex: 1400
{
	// Fields
	public int value__; // 0x0
	public const CameraClearFlags Skybox = 1; // 0x0
	public const CameraClearFlags Color = 2; // 0x0
	public const CameraClearFlags SolidColor = 2; // 0x0
	public const CameraClearFlags Depth = 3; // 0x0
	public const CameraClearFlags Nothing = 4; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum DepthTextureMode // TypeDefIndex: 1401
{
	// Fields
	public int value__; // 0x0
	public const DepthTextureMode None = 0; // 0x0
	public const DepthTextureMode Depth = 1; // 0x0
	public const DepthTextureMode DepthNormals = 2; // 0x0
	public const DepthTextureMode MotionVectors = 4; // 0x0
}

// Namespace: UnityEngine
public enum MeshTopology // TypeDefIndex: 1402
{
	// Fields
	public int value__; // 0x0
	public const MeshTopology Triangles = 0; // 0x0
	public const MeshTopology Quads = 2; // 0x0
	public const MeshTopology Lines = 3; // 0x0
	public const MeshTopology LineStrip = 4; // 0x0
	public const MeshTopology Points = 5; // 0x0
}

// Namespace: UnityEngine
public enum ColorSpace // TypeDefIndex: 1403
{
	// Fields
	public int value__; // 0x0
	public const ColorSpace Uninitialized = -1; // 0x0
	public const ColorSpace Gamma = 0; // 0x0
	public const ColorSpace Linear = 1; // 0x0
}

// Namespace: UnityEngine
public enum FilterMode // TypeDefIndex: 1404
{
	// Fields
	public int value__; // 0x0
	public const FilterMode Point = 0; // 0x0
	public const FilterMode Bilinear = 1; // 0x0
	public const FilterMode Trilinear = 2; // 0x0
}

// Namespace: UnityEngine
public enum TextureWrapMode // TypeDefIndex: 1405
{
	// Fields
	public int value__; // 0x0
	public const TextureWrapMode Repeat = 0; // 0x0
	public const TextureWrapMode Clamp = 1; // 0x0
	public const TextureWrapMode Mirror = 2; // 0x0
	public const TextureWrapMode MirrorOnce = 3; // 0x0
}

// Namespace: UnityEngine
public enum TextureFormat // TypeDefIndex: 1406
{
	// Fields
	public int value__; // 0x0
	public const TextureFormat Alpha8 = 1; // 0x0
	public const TextureFormat ARGB4444 = 2; // 0x0
	public const TextureFormat RGB24 = 3; // 0x0
	public const TextureFormat RGBA32 = 4; // 0x0
	public const TextureFormat ARGB32 = 5; // 0x0
	public const TextureFormat RGB565 = 7; // 0x0
	public const TextureFormat R16 = 9; // 0x0
	public const TextureFormat DXT1 = 10; // 0x0
	public const TextureFormat DXT5 = 12; // 0x0
	public const TextureFormat RGBA4444 = 13; // 0x0
	public const TextureFormat BGRA32 = 14; // 0x0
	public const TextureFormat RHalf = 15; // 0x0
	public const TextureFormat RGHalf = 16; // 0x0
	public const TextureFormat RGBAHalf = 17; // 0x0
	public const TextureFormat RFloat = 18; // 0x0
	public const TextureFormat RGFloat = 19; // 0x0
	public const TextureFormat RGBAFloat = 20; // 0x0
	public const TextureFormat YUY2 = 21; // 0x0
	public const TextureFormat RGB9e5Float = 22; // 0x0
	public const TextureFormat BC4 = 26; // 0x0
	public const TextureFormat BC5 = 27; // 0x0
	public const TextureFormat BC6H = 24; // 0x0
	public const TextureFormat BC7 = 25; // 0x0
	public const TextureFormat DXT1Crunched = 28; // 0x0
	public const TextureFormat DXT5Crunched = 29; // 0x0
	public const TextureFormat PVRTC_RGB2 = 30; // 0x0
	public const TextureFormat PVRTC_RGBA2 = 31; // 0x0
	public const TextureFormat PVRTC_RGB4 = 32; // 0x0
	public const TextureFormat PVRTC_RGBA4 = 33; // 0x0
	public const TextureFormat ETC_RGB4 = 34; // 0x0
	public const TextureFormat EAC_R = 41; // 0x0
	public const TextureFormat EAC_R_SIGNED = 42; // 0x0
	public const TextureFormat EAC_RG = 43; // 0x0
	public const TextureFormat EAC_RG_SIGNED = 44; // 0x0
	public const TextureFormat ETC2_RGB = 45; // 0x0
	public const TextureFormat ETC2_RGBA1 = 46; // 0x0
	public const TextureFormat ETC2_RGBA8 = 47; // 0x0
	public const TextureFormat ASTC_4x4 = 48; // 0x0
	public const TextureFormat ASTC_5x5 = 49; // 0x0
	public const TextureFormat ASTC_6x6 = 50; // 0x0
	public const TextureFormat ASTC_8x8 = 51; // 0x0
	public const TextureFormat ASTC_10x10 = 52; // 0x0
	public const TextureFormat ASTC_12x12 = 53; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCF00 Offset: 0xDC300 VA: 0x1800DCF00
	public const TextureFormat ETC_RGB4_3DS = 60; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCF00 Offset: 0xDC300 VA: 0x1800DCF00
	public const TextureFormat ETC_RGBA8_3DS = 61; // 0x0
	public const TextureFormat RG16 = 62; // 0x0
	public const TextureFormat R8 = 63; // 0x0
	public const TextureFormat ETC_RGB4Crunched = 64; // 0x0
	public const TextureFormat ETC2_RGBA8Crunched = 65; // 0x0
	public const TextureFormat ASTC_HDR_4x4 = 66; // 0x0
	public const TextureFormat ASTC_HDR_5x5 = 67; // 0x0
	public const TextureFormat ASTC_HDR_6x6 = 68; // 0x0
	public const TextureFormat ASTC_HDR_8x8 = 69; // 0x0
	public const TextureFormat ASTC_HDR_10x10 = 70; // 0x0
	public const TextureFormat ASTC_HDR_12x12 = 71; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCF30 Offset: 0xDC330 VA: 0x1800DCF30
	public const TextureFormat ASTC_RGB_4x4 = 48; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCF60 Offset: 0xDC360 VA: 0x1800DCF60
	public const TextureFormat ASTC_RGB_5x5 = 49; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCF90 Offset: 0xDC390 VA: 0x1800DCF90
	public const TextureFormat ASTC_RGB_6x6 = 50; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCFC0 Offset: 0xDC3C0 VA: 0x1800DCFC0
	public const TextureFormat ASTC_RGB_8x8 = 51; // 0x0
	[ObsoleteAttribute] // RVA: 0xDCFF0 Offset: 0xDC3F0 VA: 0x1800DCFF0
	public const TextureFormat ASTC_RGB_10x10 = 52; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD020 Offset: 0xDC420 VA: 0x1800DD020
	public const TextureFormat ASTC_RGB_12x12 = 53; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD050 Offset: 0xDC450 VA: 0x1800DD050
	public const TextureFormat ASTC_RGBA_4x4 = 54; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD080 Offset: 0xDC480 VA: 0x1800DD080
	public const TextureFormat ASTC_RGBA_5x5 = 55; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD0B0 Offset: 0xDC4B0 VA: 0x1800DD0B0
	public const TextureFormat ASTC_RGBA_6x6 = 56; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD0E0 Offset: 0xDC4E0 VA: 0x1800DD0E0
	public const TextureFormat ASTC_RGBA_8x8 = 57; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD110 Offset: 0xDC510 VA: 0x1800DD110
	public const TextureFormat ASTC_RGBA_10x10 = 58; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD140 Offset: 0xDC540 VA: 0x1800DD140
	public const TextureFormat ASTC_RGBA_12x12 = 59; // 0x0
}

// Namespace: UnityEngine
public enum CubemapFace // TypeDefIndex: 1407
{
	// Fields
	public int value__; // 0x0
	public const CubemapFace Unknown = -1; // 0x0
	public const CubemapFace PositiveX = 0; // 0x0
	public const CubemapFace NegativeX = 1; // 0x0
	public const CubemapFace PositiveY = 2; // 0x0
	public const CubemapFace NegativeY = 3; // 0x0
	public const CubemapFace PositiveZ = 4; // 0x0
	public const CubemapFace NegativeZ = 5; // 0x0
}

// Namespace: UnityEngine
public enum RenderTextureFormat // TypeDefIndex: 1408
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureFormat ARGB32 = 0; // 0x0
	public const RenderTextureFormat Depth = 1; // 0x0
	public const RenderTextureFormat ARGBHalf = 2; // 0x0
	public const RenderTextureFormat Shadowmap = 3; // 0x0
	public const RenderTextureFormat RGB565 = 4; // 0x0
	public const RenderTextureFormat ARGB4444 = 5; // 0x0
	public const RenderTextureFormat ARGB1555 = 6; // 0x0
	public const RenderTextureFormat Default = 7; // 0x0
	public const RenderTextureFormat ARGB2101010 = 8; // 0x0
	public const RenderTextureFormat DefaultHDR = 9; // 0x0
	public const RenderTextureFormat ARGB64 = 10; // 0x0
	public const RenderTextureFormat ARGBFloat = 11; // 0x0
	public const RenderTextureFormat RGFloat = 12; // 0x0
	public const RenderTextureFormat RGHalf = 13; // 0x0
	public const RenderTextureFormat RFloat = 14; // 0x0
	public const RenderTextureFormat RHalf = 15; // 0x0
	public const RenderTextureFormat R8 = 16; // 0x0
	public const RenderTextureFormat ARGBInt = 17; // 0x0
	public const RenderTextureFormat RGInt = 18; // 0x0
	public const RenderTextureFormat RInt = 19; // 0x0
	public const RenderTextureFormat BGRA32 = 20; // 0x0
	public const RenderTextureFormat RGB111110Float = 22; // 0x0
	public const RenderTextureFormat RG32 = 23; // 0x0
	public const RenderTextureFormat RGBAUShort = 24; // 0x0
	public const RenderTextureFormat RG16 = 25; // 0x0
	public const RenderTextureFormat BGRA10101010_XR = 26; // 0x0
	public const RenderTextureFormat BGR101010_XR = 27; // 0x0
	public const RenderTextureFormat R16 = 28; // 0x0
}

// Namespace: UnityEngine
public enum VRTextureUsage // TypeDefIndex: 1409
{
	// Fields
	public int value__; // 0x0
	public const VRTextureUsage None = 0; // 0x0
	public const VRTextureUsage OneEye = 1; // 0x0
	public const VRTextureUsage TwoEyes = 2; // 0x0
	public const VRTextureUsage DeviceSpecific = 3; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum RenderTextureCreationFlags // TypeDefIndex: 1410
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureCreationFlags MipMap = 1; // 0x0
	public const RenderTextureCreationFlags AutoGenerateMips = 2; // 0x0
	public const RenderTextureCreationFlags SRGB = 4; // 0x0
	public const RenderTextureCreationFlags EyeTexture = 8; // 0x0
	public const RenderTextureCreationFlags EnableRandomWrite = 16; // 0x0
	public const RenderTextureCreationFlags CreatedFromScript = 32; // 0x0
	public const RenderTextureCreationFlags AllowVerticalFlip = 128; // 0x0
	public const RenderTextureCreationFlags NoResolvedColorSurface = 256; // 0x0
	public const RenderTextureCreationFlags DynamicallyScalable = 1024; // 0x0
	public const RenderTextureCreationFlags BindMS = 2048; // 0x0
}

// Namespace: UnityEngine
public enum RenderTextureReadWrite // TypeDefIndex: 1411
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureReadWrite Default = 0; // 0x0
	public const RenderTextureReadWrite Linear = 1; // 0x0
	public const RenderTextureReadWrite sRGB = 2; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum RenderTextureMemoryless // TypeDefIndex: 1412
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureMemoryless None = 0; // 0x0
	public const RenderTextureMemoryless Color = 1; // 0x0
	public const RenderTextureMemoryless Depth = 2; // 0x0
	public const RenderTextureMemoryless MSAA = 4; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum LightmapsMode // TypeDefIndex: 1413
{
	// Fields
	public int value__; // 0x0
	public const LightmapsMode NonDirectional = 0; // 0x0
	public const LightmapsMode CombinedDirectional = 1; // 0x0
}

// Namespace: UnityEngine
public sealed class LightProbeProxyVolume : Behaviour // TypeDefIndex: 1414
{}

// Namespace: UnityEngine
public enum MotionVectorGenerationMode // TypeDefIndex: 1415
{
	// Fields
	public int value__; // 0x0
	public const MotionVectorGenerationMode Camera = 0; // 0x0
	public const MotionVectorGenerationMode Object = 1; // 0x0
	public const MotionVectorGenerationMode ForceNoMotion = 2; // 0x0
}

// Namespace: UnityEngine
public class SkinnedMeshRenderer : Renderer // TypeDefIndex: 1416
{}

// Namespace: UnityEngine
public class MeshRenderer : Renderer // TypeDefIndex: 1417
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void DontStripMeshRenderer() { }
}

// Namespace: UnityEngine
public enum LODFadeMode // TypeDefIndex: 1418
{
	// Fields
	public int value__; // 0x0
	public const LODFadeMode None = 0; // 0x0
	public const LODFadeMode CrossFade = 1; // 0x0
	public const LODFadeMode SpeedTree = 2; // 0x0
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct LOD // TypeDefIndex: 1419
{
	// Fields
	public float screenRelativeTransitionHeight; // 0x0
	public float fadeTransitionWidth; // 0x4
	public Renderer[] renderers; // 0x8

	// Methods
	// RVA: 0x20C10 Offset: 0x20010 VA: 0x180020C10
	public void .ctor(float screenRelativeTransitionHeight, Renderer[] renderers) { }
}

// Namespace: UnityEngine
public class LODGroup : Component // TypeDefIndex: 1420
{
	// Properties
	set; }
	public float size { get; set; }
	public LODFadeMode fadeMode { get; }
	public bool enabled { set; }

	// Methods
	// RVA: 0x54A2A0 Offset: 0x548AA0 VA: 0x18054A2A0
	public void set_localReferencePoint(Vector3 value) { }
	// RVA: 0x54A300 Offset: 0x548B00 VA: 0x18054A300
	public float get_size() { }
	// RVA: 0x54A350 Offset: 0x548B50 VA: 0x18054A350
	public void set_size(float value) { }
	// RVA: 0x54A3B0 Offset: 0x548BB0 VA: 0x18054A3B0
	public LODFadeMode get_fadeMode() { }
	// RVA: 0x54A400 Offset: 0x548C00 VA: 0x18054A400
	public void set_enabled(bool value) { }
	// RVA: 0x54A460 Offset: 0x548C60 VA: 0x18054A460
	public LOD[] GetLODs() { }
	// RVA: 0x54A4B0 Offset: 0x548CB0 VA: 0x18054A4B0
	public void SetLODs(LOD[] lods) { }
	// RVA: 0x54A510 Offset: 0x548D10 VA: 0x18054A510
	private void set_localReferencePoint_Injected(ref Vector3 value) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class Mesh : Object // TypeDefIndex: 1421
{
	// Properties
	public bool isReadable { get; }
	internal bool canAccess { get; }
	public int vertexCount { get; }
	public int subMeshCount { get; }
	public Bounds bounds { get; set; }
	public Vector3[] vertices { get; set; }
	public Vector3[] normals { get; set; }
	public Vector4[] tangents { get; set; }
	public Vector2[] uv { get; set; }
	public Vector2[] uv2 { get; set; }
	public Vector2[] uv3 { get; set; }
	public Vector2[] uv4 { get; set; }
	public Color[] colors { set; }
	public Color32[] colors32 { get; set; }
	public int[] triangles { get; set; }

	// Methods
	// RVA: 0x4E2750 Offset: 0x4E0F50 VA: 0x1804E2750
	private static void Internal_Create(Mesh mono) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4E27A0 Offset: 0x4E0FA0 VA: 0x1804E27A0
	public void .ctor() { }
	// RVA: 0x4E2870 Offset: 0x4E1070 VA: 0x1804E2870
	private uint GetIndexStartImpl(int submesh) { }
	// RVA: 0x4E28D0 Offset: 0x4E10D0 VA: 0x1804E28D0
	private uint GetIndexCountImpl(int submesh) { }
	// RVA: 0x4E2930 Offset: 0x4E1130 VA: 0x1804E2930
	private uint GetBaseVertexImpl(int submesh) { }
	// RVA: 0x4E2990 Offset: 0x4E1190 VA: 0x1804E2990
	private int[] GetTrianglesImpl(int submesh, bool applyBaseVertex) { }
	// RVA: 0x4E2A00 Offset: 0x4E1200 VA: 0x1804E2A00
	private int[] GetIndicesImpl(int submesh, bool applyBaseVertex) { }
	// RVA: 0x4E2A70 Offset: 0x4E1270 VA: 0x1804E2A70
	private void SetIndicesImpl(int submesh, MeshTopology topology, IndexFormat indicesFormat, Array indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex) { }
	// RVA: 0x4E2B00 Offset: 0x4E1300 VA: 0x1804E2B00
	private void PrintErrorCantAccessChannel(VertexAttribute ch) { }
	// RVA: 0x4E2B60 Offset: 0x4E1360 VA: 0x1804E2B60
	public bool HasVertexAttribute(VertexAttribute attr) { }
	// RVA: 0x4E2BC0 Offset: 0x4E13C0 VA: 0x1804E2BC0
	private void SetArrayForChannelImpl(VertexAttribute channel, VertexAttributeFormat format, int dim, Array values, int arraySize, int valuesStart, int valuesCount, MeshUpdateFlags flags) { }
	// RVA: 0x4E2C40 Offset: 0x4E1440 VA: 0x1804E2C40
	private Array GetAllocArrayFromChannelImpl(VertexAttribute channel, VertexAttributeFormat format, int dim) { }
	// RVA: 0x4E2CC0 Offset: 0x4E14C0 VA: 0x1804E2CC0
	public bool get_isReadable() { }
	// RVA: 0x4E2D10 Offset: 0x4E1510 VA: 0x1804E2D10
	internal bool get_canAccess() { }
	// RVA: 0x4E2D60 Offset: 0x4E1560 VA: 0x1804E2D60
	public int get_vertexCount() { }
	// RVA: 0x4E2DB0 Offset: 0x4E15B0 VA: 0x1804E2DB0
	public int get_subMeshCount() { }
	// RVA: 0x4E2E00 Offset: 0x4E1600 VA: 0x1804E2E00
	public Bounds get_bounds() { }
	// RVA: 0x4E2E70 Offset: 0x4E1670 VA: 0x1804E2E70
	public void set_bounds(Bounds value) { }
	// RVA: 0x4E2ED0 Offset: 0x4E16D0 VA: 0x1804E2ED0
	private void ClearImpl(bool keepVertexLayout) { }
	// RVA: 0x4E2F30 Offset: 0x4E1730 VA: 0x1804E2F30
	private void RecalculateBoundsImpl(MeshUpdateFlags flags) { }
	// RVA: 0x4E2F90 Offset: 0x4E1790 VA: 0x1804E2F90
	private void RecalculateTangentsImpl(MeshUpdateFlags flags) { }
	// RVA: 0x4E2FF0 Offset: 0x4E17F0 VA: 0x1804E2FF0
	private void MarkDynamicImpl() { }
	// RVA: 0x4E3040 Offset: 0x4E1840 VA: 0x1804E3040
	private void UploadMeshDataImpl(bool markNoLongerReadable) { }
	// RVA: 0x4E30A0 Offset: 0x4E18A0 VA: 0x1804E30A0
	internal static VertexAttribute GetUVChannel(int uvIndex) { }
	// RVA: 0x4E3150 Offset: 0x4E1950 VA: 0x1804E3150
	internal static int DefaultDimensionForChannel(VertexAttribute channel) { }
	// RVA: 0x534BE0 Offset: 0x5333E0 VA: 0x180534BE0
	private T[] GetAllocArrayFromChannel(VertexAttribute channel, VertexAttributeFormat format, int dim) { }
	// RVA: 0x534B80 Offset: 0x533380 VA: 0x180534B80
	private T[] GetAllocArrayFromChannel(VertexAttribute channel) { }
	// RVA: 0x4E3230 Offset: 0x4E1A30 VA: 0x1804E3230
	private void SetSizedArrayForChannel(VertexAttribute channel, VertexAttributeFormat format, int dim, Array values, int valuesArrayLength, int valuesStart, int valuesCount, MeshUpdateFlags flags) { }
	// RVA: 0x534E40 Offset: 0x533640 VA: 0x180534E40
	private void SetArrayForChannel(VertexAttribute channel, VertexAttributeFormat format, int dim, T[] values, MeshUpdateFlags flags = 0) { }
	// RVA: 0x534DA0 Offset: 0x5335A0 VA: 0x180534DA0
	private void SetArrayForChannel(VertexAttribute channel, T[] values, MeshUpdateFlags flags = 0) { }
	// RVA: 0x534FF0 Offset: 0x5337F0 VA: 0x180534FF0
	private void SetListForChannel(VertexAttribute channel, VertexAttributeFormat format, int dim, List<T> values, int start, int length, MeshUpdateFlags flags) { }
	// RVA: 0x534EF0 Offset: 0x5336F0 VA: 0x180534EF0
	private void SetListForChannel(VertexAttribute channel, List<T> values, int start, int length, MeshUpdateFlags flags) { }
	// RVA: 0x4E3580 Offset: 0x4E1D80 VA: 0x1804E3580
	public Vector3[] get_vertices() { }
	// RVA: 0x4E3680 Offset: 0x4E1E80 VA: 0x1804E3680
	public void set_vertices(Vector3[] value) { }
	// RVA: 0x4E37B0 Offset: 0x4E1FB0 VA: 0x1804E37B0
	public Vector3[] get_normals() { }
	// RVA: 0x4E38C0 Offset: 0x4E20C0 VA: 0x1804E38C0
	public void set_normals(Vector3[] value) { }
	// RVA: 0x4E39F0 Offset: 0x4E21F0 VA: 0x1804E39F0
	public Vector4[] get_tangents() { }
	// RVA: 0x4E3B00 Offset: 0x4E2300 VA: 0x1804E3B00
	public void set_tangents(Vector4[] value) { }
	// RVA: 0x4E3C30 Offset: 0x4E2430 VA: 0x1804E3C30
	public Vector2[] get_uv() { }
	// RVA: 0x4E3D40 Offset: 0x4E2540 VA: 0x1804E3D40
	public void set_uv(Vector2[] value) { }
	// RVA: 0x4E3E70 Offset: 0x4E2670 VA: 0x1804E3E70
	public Vector2[] get_uv2() { }
	// RVA: 0x4E3F80 Offset: 0x4E2780 VA: 0x1804E3F80
	public void set_uv2(Vector2[] value) { }
	// RVA: 0x4E40B0 Offset: 0x4E28B0 VA: 0x1804E40B0
	public Vector2[] get_uv3() { }
	// RVA: 0x4E41C0 Offset: 0x4E29C0 VA: 0x1804E41C0
	public void set_uv3(Vector2[] value) { }
	// RVA: 0x4E42F0 Offset: 0x4E2AF0 VA: 0x1804E42F0
	public Vector2[] get_uv4() { }
	// RVA: 0x4E4400 Offset: 0x4E2C00 VA: 0x1804E4400
	public void set_uv4(Vector2[] value) { }
	// RVA: 0x4E4530 Offset: 0x4E2D30 VA: 0x1804E4530
	public void set_colors(Color[] value) { }
	// RVA: 0x4E4660 Offset: 0x4E2E60 VA: 0x1804E4660
	public Color32[] get_colors32() { }
	// RVA: 0x4E46F0 Offset: 0x4E2EF0 VA: 0x1804E46F0
	public void set_colors32(Color32[] value) { }
	// RVA: 0x4E47C0 Offset: 0x4E2FC0 VA: 0x1804E47C0
	public void SetVertices(List<Vector3> inVertices) { }
	// RVA: 0x4E48E0 Offset: 0x4E30E0 VA: 0x1804E48E0
	public void SetVertices(List<Vector3> inVertices, int start, int length) { }
	// RVA: 0x4E4990 Offset: 0x4E3190 VA: 0x1804E4990
	public void SetVertices(List<Vector3> inVertices, int start, int length, MeshUpdateFlags flags) { }
	// RVA: 0x4E4A40 Offset: 0x4E3240 VA: 0x1804E4A40
	public void SetNormals(List<Vector3> inNormals) { }
	// RVA: 0x4E4B60 Offset: 0x4E3360 VA: 0x1804E4B60
	public void SetNormals(List<Vector3> inNormals, int start, int length) { }
	// RVA: 0x4E4C20 Offset: 0x4E3420 VA: 0x1804E4C20
	public void SetNormals(List<Vector3> inNormals, int start, int length, MeshUpdateFlags flags) { }
	// RVA: 0x4E4CD0 Offset: 0x4E34D0 VA: 0x1804E4CD0
	public void SetTangents(List<Vector4> inTangents) { }
	// RVA: 0x4E4ED0 Offset: 0x4E36D0 VA: 0x1804E4ED0
	public void SetTangents(List<Vector4> inTangents, int start, int length) { }
	// RVA: 0x4E5060 Offset: 0x4E3860 VA: 0x1804E5060
	public void SetTangents(List<Vector4> inTangents, int start, int length, MeshUpdateFlags flags) { }
	// RVA: 0x4E5200 Offset: 0x4E3A00 VA: 0x1804E5200
	public void SetColors(List<Color32> inColors) { }
	// RVA: 0x4E53A0 Offset: 0x4E3BA0 VA: 0x1804E53A0
	public void SetColors(List<Color32> inColors, int start, int length) { }
	// RVA: 0x4E54E0 Offset: 0x4E3CE0 VA: 0x1804E54E0
	public void SetColors(List<Color32> inColors, int start, int length, MeshUpdateFlags flags) { }
	// RVA: 0x5350F0 Offset: 0x5338F0 VA: 0x1805350F0
	private void SetUvsImpl(int uvIndex, int dim, List<T> uvs, int start, int length, MeshUpdateFlags flags) { }
	// RVA: 0x4E5620 Offset: 0x4E3E20 VA: 0x1804E5620
	public void SetUVs(int channel, List<Vector2> uvs) { }
	// RVA: 0x4E5810 Offset: 0x4E4010 VA: 0x1804E5810
	public void SetUVs(int channel, List<Vector2> uvs, int start, int length) { }
	// RVA: 0x4E5990 Offset: 0x4E4190 VA: 0x1804E5990
	public void SetUVs(int channel, List<Vector2> uvs, int start, int length, MeshUpdateFlags flags) { }
	// RVA: 0x4E5B10 Offset: 0x4E4310 VA: 0x1804E5B10
	private void PrintErrorCantAccessIndices() { }
	// RVA: 0x4E5C00 Offset: 0x4E4400 VA: 0x1804E5C00
	private bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles) { }
	// RVA: 0x4E5DD0 Offset: 0x4E45D0 VA: 0x1804E5DD0
	private bool CheckCanAccessSubmeshTriangles(int submesh) { }
	// RVA: 0x4E5DE0 Offset: 0x4E45E0 VA: 0x1804E5DE0
	private bool CheckCanAccessSubmeshIndices(int submesh) { }
	// RVA: 0x4E5DF0 Offset: 0x4E45F0 VA: 0x1804E5DF0
	public int[] get_triangles() { }
	// RVA: 0x4E5F10 Offset: 0x4E4710 VA: 0x1804E5F10
	public void set_triangles(int[] value) { }
	// RVA: 0x4E5FF0 Offset: 0x4E47F0 VA: 0x1804E5FF0
	public int[] GetTriangles(int submesh) { }
	// RVA: 0x4E60B0 Offset: 0x4E48B0 VA: 0x1804E60B0
	public int[] GetTriangles(int submesh, bool applyBaseVertex) { }
	// RVA: 0x4E6180 Offset: 0x4E4980 VA: 0x1804E6180
	public int[] GetIndices(int submesh) { }
	// RVA: 0x4E6270 Offset: 0x4E4A70 VA: 0x1804E6270
	public int[] GetIndices(int submesh, bool applyBaseVertex) { }
	// RVA: 0x4E6370 Offset: 0x4E4B70 VA: 0x1804E6370
	public uint GetIndexStart(int submesh) { }
	// RVA: 0x4E64B0 Offset: 0x4E4CB0 VA: 0x1804E64B0
	public uint GetIndexCount(int submesh) { }
	// RVA: 0x4E65F0 Offset: 0x4E4DF0 VA: 0x1804E65F0
	public uint GetBaseVertex(int submesh) { }
	// RVA: 0x4E6730 Offset: 0x4E4F30 VA: 0x1804E6730
	private void CheckIndicesArrayRange(int valuesLength, int start, int length) { }
	// RVA: 0x4E6940 Offset: 0x4E5140 VA: 0x1804E6940
	private void SetTrianglesImpl(int submesh, IndexFormat indicesFormat, Array triangles, int trianglesArrayLength, int start, int length, bool calculateBounds, int baseVertex) { }
	// RVA: 0x4E6A20 Offset: 0x4E5220 VA: 0x1804E6A20
	public void SetTriangles(int[] triangles, int submesh) { }
	// RVA: 0x4E6AD0 Offset: 0x4E52D0 VA: 0x1804E6AD0
	public void SetTriangles(int[] triangles, int submesh, bool calculateBounds, int baseVertex) { }
	// RVA: 0x4E6B90 Offset: 0x4E5390 VA: 0x1804E6B90
	public void SetTriangles(int[] triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds = True, int baseVertex = 0) { }
	// RVA: 0x4E6C40 Offset: 0x4E5440 VA: 0x1804E6C40
	public void SetTriangles(List<int> triangles, int submesh) { }
	// RVA: 0x4E6C60 Offset: 0x4E5460 VA: 0x1804E6C60
	public void SetTriangles(List<int> triangles, int submesh, bool calculateBounds, int baseVertex) { }
	// RVA: 0x4E6E30 Offset: 0x4E5630 VA: 0x1804E6E30
	public void SetTriangles(List<int> triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds = True, int baseVertex = 0) { }
	// RVA: 0x4E6F90 Offset: 0x4E5790 VA: 0x1804E6F90
	public void SetIndices(int[] indices, MeshTopology topology, int submesh, bool calculateBounds) { }
	// RVA: 0x4E70A0 Offset: 0x4E58A0 VA: 0x1804E70A0
	public void SetIndices(int[] indices, MeshTopology topology, int submesh, bool calculateBounds, int baseVertex) { }
	// RVA: 0x4E71C0 Offset: 0x4E59C0 VA: 0x1804E71C0
	public void SetIndices(int[] indices, int indicesStart, int indicesLength, MeshTopology topology, int submesh, bool calculateBounds = True, int baseVertex = 0) { }
	// RVA: 0x4E72C0 Offset: 0x4E5AC0 VA: 0x1804E72C0
	public void Clear() { }
	// RVA: 0x4E7320 Offset: 0x4E5B20 VA: 0x1804E7320
	public void RecalculateBounds() { }
	// RVA: 0x4E74A0 Offset: 0x4E5CA0 VA: 0x1804E74A0
	public void RecalculateTangents() { }
	// RVA: 0x4E7620 Offset: 0x4E5E20 VA: 0x1804E7620
	public void RecalculateBounds(MeshUpdateFlags flags) { }
	// RVA: 0x4E77B0 Offset: 0x4E5FB0 VA: 0x1804E77B0
	public void RecalculateTangents(MeshUpdateFlags flags) { }
	// RVA: 0x4E7940 Offset: 0x4E6140 VA: 0x1804E7940
	public void MarkDynamic() { }
	// RVA: 0x4E79E0 Offset: 0x4E61E0 VA: 0x1804E79E0
	public void UploadMeshData(bool markNoLongerReadable) { }
	// RVA: 0x4E7A90 Offset: 0x4E6290 VA: 0x1804E7A90
	private void get_bounds_Injected(out Bounds ret) { }
	// RVA: 0x4E7AF0 Offset: 0x4E62F0 VA: 0x1804E7AF0
	private void set_bounds_Injected(ref Bounds value) { }
}

// Namespace: 
public struct Mesh.MeshData // TypeDefIndex: 1422
{
	// Fields
	[NativeDisableUnsafePtrRestrictionAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal IntPtr m_Ptr; // 0x0
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class Texture : Object // TypeDefIndex: 1423
{
	// Fields
	public static readonly int GenerateAllMips; // 0xAC268

	// Properties
	public int mipmapCount { get; }
	public virtual int width { get; set; }
	public virtual int height { get; set; }
	public virtual TextureDimension dimension { get; set; }
	public virtual bool isReadable { get; }
	public TextureWrapMode wrapMode { get; set; }
	public FilterMode filterMode { set; }
	public int anisoLevel { set; }
	public Vector2 texelSize { get; }
	internal ColorSpace activeTextureColorSpace { get; }

	// Methods
	// RVA: 0x43C290 Offset: 0x43AA90 VA: 0x18043C290
	protected void .ctor() { }
	// RVA: 0x43C320 Offset: 0x43AB20 VA: 0x18043C320
	public int get_mipmapCount() { }
	// RVA: 0x43C370 Offset: 0x43AB70 VA: 0x18043C370
	private int GetDataWidth() { }
	// RVA: 0x43C3C0 Offset: 0x43ABC0 VA: 0x18043C3C0
	private int GetDataHeight() { }
	// RVA: 0x43C410 Offset: 0x43AC10 VA: 0x18043C410
	private TextureDimension GetDimension() { }
	// RVA: 0x43C370 Offset: 0x43AB70 VA: 0x18043C370 Slot: 4
	public virtual int get_width() { }
	// RVA: 0x43C460 Offset: 0x43AC60 VA: 0x18043C460 Slot: 5
	public virtual void set_width(int value) { }
	// RVA: 0x43C3C0 Offset: 0x43ABC0 VA: 0x18043C3C0 Slot: 6
	public virtual int get_height() { }
	// RVA: 0x43C4B0 Offset: 0x43ACB0 VA: 0x18043C4B0 Slot: 7
	public virtual void set_height(int value) { }
	// RVA: 0x43C410 Offset: 0x43AC10 VA: 0x18043C410 Slot: 8
	public virtual TextureDimension get_dimension() { }
	// RVA: 0x43C500 Offset: 0x43AD00 VA: 0x18043C500 Slot: 9
	public virtual void set_dimension(TextureDimension value) { }
	// RVA: 0x43C550 Offset: 0x43AD50 VA: 0x18043C550 Slot: 10
	public virtual bool get_isReadable() { }
	// RVA: 0x43C5A0 Offset: 0x43ADA0 VA: 0x18043C5A0
	public TextureWrapMode get_wrapMode() { }
	// RVA: 0x43C5F0 Offset: 0x43ADF0 VA: 0x18043C5F0
	public void set_wrapMode(TextureWrapMode value) { }
	// RVA: 0x43C650 Offset: 0x43AE50 VA: 0x18043C650
	public void set_filterMode(FilterMode value) { }
	// RVA: 0x43C6B0 Offset: 0x43AEB0 VA: 0x18043C6B0
	public void set_anisoLevel(int value) { }
	// RVA: 0x43C710 Offset: 0x43AF10 VA: 0x18043C710
	public Vector2 get_texelSize() { }
	// RVA: 0x43C780 Offset: 0x43AF80 VA: 0x18043C780
	private int Internal_GetActiveTextureColorSpace() { }
	// RVA: 0x43C7D0 Offset: 0x43AFD0 VA: 0x18043C7D0
	internal ColorSpace get_activeTextureColorSpace() { }
	// RVA: 0x43C830 Offset: 0x43B030 VA: 0x18043C830
	internal bool ValidateFormat(TextureFormat format) { }
	// RVA: 0x43CA60 Offset: 0x43B260 VA: 0x18043CA60
	internal bool ValidateFormat(GraphicsFormat format, FormatUsage usage) { }
	// RVA: 0x43CC30 Offset: 0x43B430 VA: 0x18043CC30
	internal UnityException CreateNonReadableException(Texture t) { }
	// RVA: 0x43CD20 Offset: 0x43B520 VA: 0x18043CD20
	private static void .cctor() { }
	// RVA: 0x43CDA0 Offset: 0x43B5A0 VA: 0x18043CDA0
	private void get_texelSize_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class Texture2D : Texture // TypeDefIndex: 1424
{
	// Properties
	public TextureFormat format { get; }
	public static Texture2D whiteTexture { get; }
	public override bool isReadable { get; }

	// Methods
	// RVA: 0x43CE00 Offset: 0x43B600 VA: 0x18043CE00
	public TextureFormat get_format() { }
	// RVA: 0x43CE50 Offset: 0x43B650 VA: 0x18043CE50
	public static Texture2D get_whiteTexture() { }
	// RVA: 0x43CEA0 Offset: 0x43B6A0 VA: 0x18043CEA0
	private static bool Internal_CreateImpl(Texture2D mono, int w, int h, int mipCount, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex) { }
	// RVA: 0x43CF20 Offset: 0x43B720 VA: 0x18043CF20
	private static void Internal_Create(Texture2D mono, int w, int h, int mipCount, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex) { }
	// RVA: 0x43D060 Offset: 0x43B860 VA: 0x18043D060 Slot: 10
	public override bool get_isReadable() { }
	// RVA: 0x43D0B0 Offset: 0x43B8B0 VA: 0x18043D0B0
	private void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable) { }
	// RVA: 0x43D130 Offset: 0x43B930 VA: 0x18043D130
	private bool ResizeImpl(int width, int height) { }
	// RVA: 0x43D1A0 Offset: 0x43B9A0 VA: 0x18043D1A0
	private void SetPixelImpl(int image, int x, int y, Color color) { }
	// RVA: 0x43D230 Offset: 0x43BA30 VA: 0x18043D230
	private Color GetPixelBilinearImpl(int image, float u, float v) { }
	// RVA: 0x43D2C0 Offset: 0x43BAC0 VA: 0x18043D2C0
	private bool ResizeWithFormatImpl(int width, int height, GraphicsFormat format, bool hasMipMap) { }
	// RVA: 0x43D350 Offset: 0x43BB50 VA: 0x18043D350
	private void ReadPixelsImpl(Rect source, int destX, int destY, bool recalculateMipMaps) { }
	// RVA: 0x43D3E0 Offset: 0x43BBE0 VA: 0x18043D3E0
	private void SetPixelsImpl(int x, int y, int w, int h, Color[] pixel, int miplevel, int frame) { }
	// RVA: 0x43D460 Offset: 0x43BC60 VA: 0x18043D460
	public Color[] GetPixels(int x, int y, int blockWidth, int blockHeight, int miplevel) { }
	// RVA: 0x43D4E0 Offset: 0x43BCE0 VA: 0x18043D4E0
	internal void .ctor(int width, int height, GraphicsFormat format, TextureCreationFlags flags, int mipCount, IntPtr nativeTex) { }
	// RVA: 0x43D5F0 Offset: 0x43BDF0 VA: 0x18043D5F0
	public void .ctor(int width, int height, GraphicsFormat format, TextureCreationFlags flags) { }
	// RVA: 0x43D770 Offset: 0x43BF70 VA: 0x18043D770
	internal void .ctor(int width, int height, TextureFormat textureFormat, int mipCount, bool linear, IntPtr nativeTex) { }
	// RVA: 0x43D900 Offset: 0x43C100 VA: 0x18043D900
	public void .ctor(int width, int height, TextureFormat textureFormat, bool mipChain, bool linear) { }
	// RVA: 0x43D9E0 Offset: 0x43C1E0 VA: 0x18043D9E0
	public void .ctor(int width, int height, TextureFormat textureFormat, bool mipChain) { }
	// RVA: 0x43DAC0 Offset: 0x43C2C0 VA: 0x18043DAC0
	public void .ctor(int width, int height) { }
	// RVA: 0x43DBB0 Offset: 0x43C3B0 VA: 0x18043DBB0
	public void SetPixel(int x, int y, Color color) { }
	// RVA: 0x43DCD0 Offset: 0x43C4D0 VA: 0x18043DCD0
	public void SetPixels(int x, int y, int blockWidth, int blockHeight, Color[] colors, int miplevel) { }
	// RVA: 0x43DDF0 Offset: 0x43C5F0 VA: 0x18043DDF0
	public void SetPixels(Color[] colors) { }
	// RVA: 0x43DF40 Offset: 0x43C740 VA: 0x18043DF40
	public Color GetPixelBilinear(float u, float v) { }
	// RVA: 0x43E080 Offset: 0x43C880 VA: 0x18043E080
	public void Apply(bool updateMipmaps, bool makeNoLongerReadable) { }
	// RVA: 0x43E180 Offset: 0x43C980 VA: 0x18043E180
	public void Apply() { }
	// RVA: 0x43E190 Offset: 0x43C990 VA: 0x18043E190
	public bool Resize(int width, int height) { }
	// RVA: 0x43E290 Offset: 0x43CA90 VA: 0x18043E290
	public bool Resize(int width, int height, TextureFormat format, bool hasMipMap) { }
	// RVA: 0x43E3C0 Offset: 0x43CBC0 VA: 0x18043E3C0
	public void ReadPixels(Rect source, int destX, int destY, bool recalculateMipMaps) { }
	// RVA: 0x43E4F0 Offset: 0x43CCF0 VA: 0x18043E4F0
	public void ReadPixels(Rect source, int destX, int destY) { }
	// RVA: 0x43E610 Offset: 0x43CE10 VA: 0x18043E610
	public Color[] GetPixels(int miplevel) { }
	// RVA: 0x43E6E0 Offset: 0x43CEE0 VA: 0x18043E6E0
	public Color[] GetPixels() { }
	// RVA: 0x43E6F0 Offset: 0x43CEF0 VA: 0x18043E6F0
	private void SetPixelImpl_Injected(int image, int x, int y, ref Color color) { }
	// RVA: 0x43E770 Offset: 0x43CF70 VA: 0x18043E770
	private void GetPixelBilinearImpl_Injected(int image, float u, float v, out Color ret) { }
	// RVA: 0x43E7F0 Offset: 0x43CFF0 VA: 0x18043E7F0
	private void ReadPixelsImpl_Injected(ref Rect source, int destX, int destY, bool recalculateMipMaps) { }
}

// Namespace: UnityEngine
public sealed class Cubemap : Texture // TypeDefIndex: 1425
{
	// Properties
	public override bool isReadable { get; }

	// Methods
	// RVA: 0x5421F0 Offset: 0x5409F0 VA: 0x1805421F0
	private static bool Internal_CreateImpl(Cubemap mono, int ext, int mipCount, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex) { }
	// RVA: 0x542270 Offset: 0x540A70 VA: 0x180542270
	private static void Internal_Create(Cubemap mono, int ext, int mipCount, GraphicsFormat format, TextureCreationFlags flags, IntPtr nativeTex) { }
	// RVA: 0x5423A0 Offset: 0x540BA0 VA: 0x1805423A0 Slot: 10
	public override bool get_isReadable() { }
	// RVA: 0x5423F0 Offset: 0x540BF0 VA: 0x1805423F0
	public void .ctor(int width, DefaultFormat format, TextureCreationFlags flags) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x542560 Offset: 0x540D60 VA: 0x180542560
	public void .ctor(int width, GraphicsFormat format, TextureCreationFlags flags) { }
	// RVA: 0x542680 Offset: 0x540E80 VA: 0x180542680
	public void .ctor(int width, TextureFormat format, int mipCount) { }
	// RVA: 0x542730 Offset: 0x540F30 VA: 0x180542730
	public void .ctor(int width, GraphicsFormat format, TextureCreationFlags flags, int mipCount) { }
	// RVA: 0x542830 Offset: 0x541030 VA: 0x180542830
	internal void .ctor(int width, TextureFormat textureFormat, int mipCount, IntPtr nativeTex) { }
	// RVA: 0x5429B0 Offset: 0x5411B0 VA: 0x1805429B0
	internal void .ctor(int width, TextureFormat textureFormat, bool mipChain, IntPtr nativeTex) { }
	// RVA: 0x5429F0 Offset: 0x5411F0 VA: 0x1805429F0
	public void .ctor(int width, TextureFormat textureFormat, bool mipChain) { }
}

// Namespace: UnityEngine
public sealed class Texture3D : Texture // TypeDefIndex: 1426
{
	// Properties
	public int depth { get; }
	public override bool isReadable { get; }

	// Methods
	// RVA: 0x43F1A0 Offset: 0x43D9A0 VA: 0x18043F1A0
	public int get_depth() { }
	// RVA: 0x43F1F0 Offset: 0x43D9F0 VA: 0x18043F1F0 Slot: 10
	public override bool get_isReadable() { }
	// RVA: 0x43F240 Offset: 0x43DA40 VA: 0x18043F240
	private static bool Internal_CreateImpl(Texture3D mono, int w, int h, int d, int mipCount, GraphicsFormat format, TextureCreationFlags flags) { }
	// RVA: 0x43F2C0 Offset: 0x43DAC0 VA: 0x18043F2C0
	private static void Internal_Create(Texture3D mono, int w, int h, int d, int mipCount, GraphicsFormat format, TextureCreationFlags flags) { }
	// RVA: 0x43F400 Offset: 0x43DC00 VA: 0x18043F400
	public void .ctor(int width, int height, int depth, DefaultFormat format, TextureCreationFlags flags) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x43F5E0 Offset: 0x43DDE0 VA: 0x18043F5E0
	public void .ctor(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags) { }
	// RVA: 0x43F770 Offset: 0x43DF70 VA: 0x18043F770
	public void .ctor(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags, int mipCount) { }
	// RVA: 0x43F880 Offset: 0x43E080 VA: 0x18043F880
	public void .ctor(int width, int height, int depth, TextureFormat textureFormat, int mipCount) { }
	// RVA: 0x43FA00 Offset: 0x43E200 VA: 0x18043FA00
	public void .ctor(int width, int height, int depth, TextureFormat textureFormat, bool mipChain) { }
}

// Namespace: UnityEngine
public sealed class Texture2DArray : Texture // TypeDefIndex: 1427
{
	// Properties
	public static int allSlices { get; }
	public override bool isReadable { get; }

	// Methods
	// RVA: 0x43E880 Offset: 0x43D080 VA: 0x18043E880
	public static int get_allSlices() { }
	// RVA: 0x43E8D0 Offset: 0x43D0D0 VA: 0x18043E8D0 Slot: 10
	public override bool get_isReadable() { }
	// RVA: 0x43E920 Offset: 0x43D120 VA: 0x18043E920
	private static bool Internal_CreateImpl(Texture2DArray mono, int w, int h, int d, int mipCount, GraphicsFormat format, TextureCreationFlags flags) { }
	// RVA: 0x43E9A0 Offset: 0x43D1A0 VA: 0x18043E9A0
	private static void Internal_Create(Texture2DArray mono, int w, int h, int d, int mipCount, GraphicsFormat format, TextureCreationFlags flags) { }
	// RVA: 0x43EAE0 Offset: 0x43D2E0 VA: 0x18043EAE0
	public void .ctor(int width, int height, int depth, DefaultFormat format, TextureCreationFlags flags) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x43ECC0 Offset: 0x43D4C0 VA: 0x18043ECC0
	public void .ctor(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags) { }
	// RVA: 0x43EE50 Offset: 0x43D650 VA: 0x18043EE50
	public void .ctor(int width, int height, int depth, GraphicsFormat format, TextureCreationFlags flags, int mipCount) { }
	// RVA: 0x43EF60 Offset: 0x43D760 VA: 0x18043EF60
	public void .ctor(int width, int height, int depth, TextureFormat textureFormat, int mipCount, bool linear) { }
	// RVA: 0x43F100 Offset: 0x43D900 VA: 0x18043F100
	public void .ctor(int width, int height, int depth, TextureFormat textureFormat, bool mipChain, bool linear) { }
	// RVA: 0x43F150 Offset: 0x43D950 VA: 0x18043F150
	public void .ctor(int width, int height, int depth, TextureFormat textureFormat, bool mipChain) { }
}

// Namespace: UnityEngine
public sealed class CubemapArray : Texture // TypeDefIndex: 1428
{
	// Properties
	public override bool isReadable { get; }

	// Methods
	// RVA: 0x542AC0 Offset: 0x5412C0 VA: 0x180542AC0 Slot: 10
	public override bool get_isReadable() { }
	// RVA: 0x542B10 Offset: 0x541310 VA: 0x180542B10
	private static bool Internal_CreateImpl(CubemapArray mono, int ext, int count, int mipCount, GraphicsFormat format, TextureCreationFlags flags) { }
	// RVA: 0x542B90 Offset: 0x541390 VA: 0x180542B90
	private static void Internal_Create(CubemapArray mono, int ext, int count, int mipCount, GraphicsFormat format, TextureCreationFlags flags) { }
	// RVA: 0x542CC0 Offset: 0x5414C0 VA: 0x180542CC0
	public void .ctor(int width, int cubemapCount, DefaultFormat format, TextureCreationFlags flags) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x542E90 Offset: 0x541690 VA: 0x180542E90
	public void .ctor(int width, int cubemapCount, GraphicsFormat format, TextureCreationFlags flags) { }
	// RVA: 0x543010 Offset: 0x541810 VA: 0x180543010
	public void .ctor(int width, int cubemapCount, GraphicsFormat format, TextureCreationFlags flags, int mipCount) { }
	// RVA: 0x543110 Offset: 0x541910 VA: 0x180543110
	public void .ctor(int width, int cubemapCount, TextureFormat textureFormat, int mipCount, bool linear) { }
	// RVA: 0x543290 Offset: 0x541A90 VA: 0x180543290
	public void .ctor(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain, bool linear) { }
	// RVA: 0x5432E0 Offset: 0x541AE0 VA: 0x1805432E0
	public void .ctor(int width, int cubemapCount, TextureFormat textureFormat, bool mipChain) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class RenderTexture : Texture // TypeDefIndex: 1429
{
	// Properties
	public override int width { get; set; }
	public override int height { get; set; }
	public override TextureDimension dimension { get; set; }
	public GraphicsFormat graphicsFormat { get; set; }
	public bool useMipMap { set; }
	public RenderTextureFormat format { get; }
	public bool autoGenerateMips { set; }
	public int volumeDepth { get; set; }
	public bool enableRandomWrite { get; set; }
	public bool useDynamicScale { get; set; }
	public static RenderTexture active { set; }
	public RenderBuffer colorBuffer { get; }
	public int depth { set; }
	public RenderTextureDescriptor descriptor { get; set; }

	// Methods
	// RVA: 0x4FB480 Offset: 0x4F9C80 VA: 0x1804FB480 Slot: 4
	public override int get_width() { }
	// RVA: 0x4FB4D0 Offset: 0x4F9CD0 VA: 0x1804FB4D0 Slot: 5
	public override void set_width(int value) { }
	// RVA: 0x4FB530 Offset: 0x4F9D30 VA: 0x1804FB530 Slot: 6
	public override int get_height() { }
	// RVA: 0x4FB580 Offset: 0x4F9D80 VA: 0x1804FB580 Slot: 7
	public override void set_height(int value) { }
	// RVA: 0x4FB5E0 Offset: 0x4F9DE0 VA: 0x1804FB5E0 Slot: 8
	public override TextureDimension get_dimension() { }
	// RVA: 0x4FB630 Offset: 0x4F9E30 VA: 0x1804FB630 Slot: 9
	public override void set_dimension(TextureDimension value) { }
	// RVA: 0x4FB690 Offset: 0x4F9E90 VA: 0x1804FB690
	public GraphicsFormat get_graphicsFormat() { }
	// RVA: 0x4FB6E0 Offset: 0x4F9EE0 VA: 0x1804FB6E0
	public void set_graphicsFormat(GraphicsFormat value) { }
	// RVA: 0x4FB740 Offset: 0x4F9F40 VA: 0x1804FB740
	public void set_useMipMap(bool value) { }
	// RVA: 0x4FB7A0 Offset: 0x4F9FA0 VA: 0x1804FB7A0
	public RenderTextureFormat get_format() { }
	// RVA: 0x4FB830 Offset: 0x4FA030 VA: 0x1804FB830
	public void set_autoGenerateMips(bool value) { }
	// RVA: 0x4FB890 Offset: 0x4FA090 VA: 0x1804FB890
	public int get_volumeDepth() { }
	// RVA: 0x4FB8E0 Offset: 0x4FA0E0 VA: 0x1804FB8E0
	public void set_volumeDepth(int value) { }
	// RVA: 0x4FB940 Offset: 0x4FA140 VA: 0x1804FB940
	public bool get_enableRandomWrite() { }
	// RVA: 0x4FB990 Offset: 0x4FA190 VA: 0x1804FB990
	public void set_enableRandomWrite(bool value) { }
	// RVA: 0x4FB9F0 Offset: 0x4FA1F0 VA: 0x1804FB9F0
	public bool get_useDynamicScale() { }
	// RVA: 0x4FBA40 Offset: 0x4FA240 VA: 0x1804FBA40
	public void set_useDynamicScale(bool value) { }
	// RVA: 0x4FBAA0 Offset: 0x4FA2A0 VA: 0x1804FBAA0
	private static void SetActive(RenderTexture rt) { }
	// RVA: 0x4FBAA0 Offset: 0x4FA2A0 VA: 0x1804FBAA0
	public static void set_active(RenderTexture value) { }
	// RVA: 0x4FBAF0 Offset: 0x4FA2F0 VA: 0x1804FBAF0
	private RenderBuffer GetColorBuffer() { }
	// RVA: 0x4FBB60 Offset: 0x4FA360 VA: 0x1804FBB60
	public RenderBuffer get_colorBuffer() { }
	// RVA: 0x4FBBE0 Offset: 0x4FA3E0 VA: 0x1804FBBE0
	public bool Create() { }
	// RVA: 0x4FBC30 Offset: 0x4FA430 VA: 0x1804FBC30
	public void Release() { }
	// RVA: 0x4FBC80 Offset: 0x4FA480 VA: 0x1804FBC80
	public bool IsCreated() { }
	// RVA: 0x4FBCD0 Offset: 0x4FA4D0 VA: 0x1804FBCD0
	internal void SetSRGBReadWrite(bool srgb) { }
	// RVA: 0x4FBD30 Offset: 0x4FA530 VA: 0x1804FBD30
	private static void Internal_Create(RenderTexture rt) { }
	// RVA: 0x4FBD80 Offset: 0x4FA580 VA: 0x1804FBD80
	private void SetRenderTextureDescriptor(RenderTextureDescriptor desc) { }
	// RVA: 0x4FBDE0 Offset: 0x4FA5E0 VA: 0x1804FBDE0
	private RenderTextureDescriptor GetDescriptor() { }
	// RVA: 0x4FBE60 Offset: 0x4FA660 VA: 0x1804FBE60
	private static RenderTexture GetTemporary_Internal(RenderTextureDescriptor desc) { }
	// RVA: 0x4FBEB0 Offset: 0x4FA6B0 VA: 0x1804FBEB0
	public static void ReleaseTemporary(RenderTexture temp) { }
	// RVA: 0x4FBF00 Offset: 0x4FA700 VA: 0x1804FBF00
	public void set_depth(int value) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4FBF60 Offset: 0x4FA760 VA: 0x1804FBF60
	protected internal void .ctor() { }
	// RVA: 0x4FBFF0 Offset: 0x4FA7F0 VA: 0x1804FBFF0
	public void .ctor(RenderTextureDescriptor desc) { }
	// RVA: 0x4FC170 Offset: 0x4FA970 VA: 0x1804FC170
	public void .ctor(RenderTexture textureToCopy) { }
	// RVA: 0x4FC380 Offset: 0x4FAB80 VA: 0x1804FC380
	public void .ctor(int width, int height, int depth, DefaultFormat format) { }
	// RVA: 0x4FC420 Offset: 0x4FAC20 VA: 0x1804FC420
	public void .ctor(int width, int height, int depth, GraphicsFormat format) { }
	// RVA: 0x4FC6A0 Offset: 0x4FAEA0 VA: 0x1804FC6A0
	public void .ctor(int width, int height, int depth, GraphicsFormat format, int mipCount) { }
	// RVA: 0x4FCA60 Offset: 0x4FB260 VA: 0x1804FCA60
	public void .ctor(int width, int height, int depth, RenderTextureFormat format, RenderTextureReadWrite readWrite) { }
	// RVA: 0x4FCAC0 Offset: 0x4FB2C0 VA: 0x1804FCAC0
	public void .ctor(int width, int height, int depth, RenderTextureFormat format) { }
	// RVA: 0x4FCB20 Offset: 0x4FB320 VA: 0x1804FCB20
	public void .ctor(int width, int height, int depth) { }
	// RVA: 0x4FCB80 Offset: 0x4FB380 VA: 0x1804FCB80
	public void .ctor(int width, int height, int depth, RenderTextureFormat format, int mipCount) { }
	// RVA: 0x4FCBF0 Offset: 0x4FB3F0 VA: 0x1804FCBF0
	public RenderTextureDescriptor get_descriptor() { }
	// RVA: 0x4FCCA0 Offset: 0x4FB4A0 VA: 0x1804FCCA0
	public void set_descriptor(RenderTextureDescriptor value) { }
	// RVA: 0x4FCD50 Offset: 0x4FB550 VA: 0x1804FCD50
	private static void ValidateRenderTextureDesc(RenderTextureDescriptor desc) { }
	// RVA: 0x4FD000 Offset: 0x4FB800 VA: 0x1804FD000
	internal static GraphicsFormat GetCompatibleFormat(RenderTextureFormat renderTextureFormat, RenderTextureReadWrite readWrite) { }
	// RVA: 0x4FD1D0 Offset: 0x4FB9D0 VA: 0x1804FD1D0
	public static RenderTexture GetTemporary(RenderTextureDescriptor desc) { }
	// RVA: 0x4FD280 Offset: 0x4FBA80 VA: 0x1804FD280
	private void GetColorBuffer_Injected(out RenderBuffer ret) { }
	// RVA: 0x4FD2E0 Offset: 0x4FBAE0 VA: 0x1804FD2E0
	private void SetRenderTextureDescriptor_Injected(ref RenderTextureDescriptor desc) { }
	// RVA: 0x4FD340 Offset: 0x4FBB40 VA: 0x1804FD340
	private void GetDescriptor_Injected(out RenderTextureDescriptor ret) { }
	// RVA: 0x4FD3A0 Offset: 0x4FBBA0 VA: 0x1804FD3A0
	private static RenderTexture GetTemporary_Internal_Injected(ref RenderTextureDescriptor desc) { }
}

// Namespace: UnityEngine
public struct RenderTextureDescriptor // TypeDefIndex: 1430
{
	// Fields
	private int <width>k__BackingField; // 0x0
	private int <height>k__BackingField; // 0x4
	private int <msaaSamples>k__BackingField; // 0x8
	private int <volumeDepth>k__BackingField; // 0xC
	private int <mipCount>k__BackingField; // 0x10
	private GraphicsFormat _graphicsFormat; // 0x14
	private GraphicsFormat <stencilFormat>k__BackingField; // 0x18
	private int _depthBufferBits; // 0x1C
	private static int[] depthFormatBits; // 0x0
	private TextureDimension <dimension>k__BackingField; // 0x20
	private ShadowSamplingMode <shadowSamplingMode>k__BackingField; // 0x24
	private VRTextureUsage <vrUsage>k__BackingField; // 0x28
	private RenderTextureCreationFlags _flags; // 0x2C
	private RenderTextureMemoryless <memoryless>k__BackingField; // 0x30

	// Properties
	public int width { get; set; }
	public int height { get; set; }
	public int msaaSamples { get; set; }
	public int volumeDepth { get; set; }
	public int mipCount { set; }
	public GraphicsFormat graphicsFormat { get; set; }
	public RenderTextureFormat colorFormat { get; set; }
	public bool sRGB { get; set; }
	public int depthBufferBits { get; set; }
	public TextureDimension dimension { get; set; }
	public ShadowSamplingMode shadowSamplingMode { get; set; }
	public VRTextureUsage vrUsage { get; set; }
	public RenderTextureMemoryless memoryless { get; set; }
	public bool useMipMap { get; set; }
	public bool autoGenerateMips { get; set; }
	public bool enableRandomWrite { get; set; }
	internal bool createdFromScript { set; }
	public bool useDynamicScale { set; }

	// Methods
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10
	public int get_width() { }
	// RVA: 0x1ED0 Offset: 0x12D0 VA: 0x180001ED0
	public void set_width(int value) { }
	// RVA: 0x1EE0 Offset: 0x12E0 VA: 0x180001EE0
	public int get_height() { }
	// RVA: 0x1EF0 Offset: 0x12F0 VA: 0x180001EF0
	public void set_height(int value) { }
	// RVA: 0x1F40 Offset: 0x1340 VA: 0x180001F40
	public int get_msaaSamples() { }
	// RVA: 0x1F00 Offset: 0x1300 VA: 0x180001F00
	public void set_msaaSamples(int value) { }
	// RVA: 0x2320 Offset: 0x1720 VA: 0x180002320
	public int get_volumeDepth() { }
	// RVA: 0x2330 Offset: 0x1730 VA: 0x180002330
	public void set_volumeDepth(int value) { }
	// RVA: 0x2340 Offset: 0x1740 VA: 0x180002340
	public void set_mipCount(int value) { }
	// RVA: 0x15E10 Offset: 0x15210 VA: 0x180015E10
	public GraphicsFormat get_graphicsFormat() { }
	// RVA: 0x15E20 Offset: 0x15220 VA: 0x180015E20
	public void set_graphicsFormat(GraphicsFormat value) { }
	// RVA: 0x15E30 Offset: 0x15230 VA: 0x180015E30
	public RenderTextureFormat get_colorFormat() { }
	// RVA: 0x15E80 Offset: 0x15280 VA: 0x180015E80
	public void set_colorFormat(RenderTextureFormat value) { }
	// RVA: 0x15E90 Offset: 0x15290 VA: 0x180015E90
	public bool get_sRGB() { }
	// RVA: 0x15EE0 Offset: 0x152E0 VA: 0x180015EE0
	public void set_sRGB(bool value) { }
	// RVA: 0x15EF0 Offset: 0x152F0 VA: 0x180015EF0
	public int get_depthBufferBits() { }
	// RVA: 0x15F00 Offset: 0x15300 VA: 0x180015F00
	public void set_depthBufferBits(int value) { }
	// RVA: 0x64B0 Offset: 0x58B0 VA: 0x1800064B0
	public TextureDimension get_dimension() { }
	// RVA: 0xE9D0 Offset: 0xDDD0 VA: 0x18000E9D0
	public void set_dimension(TextureDimension value) { }
	// RVA: 0xE980 Offset: 0xDD80 VA: 0x18000E980
	public ShadowSamplingMode get_shadowSamplingMode() { }
	// RVA: 0x10190 Offset: 0xF590 VA: 0x180010190
	public void set_shadowSamplingMode(ShadowSamplingMode value) { }
	// RVA: 0x2120 Offset: 0x1520 VA: 0x180002120
	public VRTextureUsage get_vrUsage() { }
	// RVA: 0x2130 Offset: 0x1530 VA: 0x180002130
	public void set_vrUsage(VRTextureUsage value) { }
	// RVA: 0xD8C0 Offset: 0xCCC0 VA: 0x18000D8C0
	public RenderTextureMemoryless get_memoryless() { }
	// RVA: 0x15F20 Offset: 0x15320 VA: 0x180015F20
	public void set_memoryless(RenderTextureMemoryless value) { }
	// RVA: 0x15F30 Offset: 0x15330 VA: 0x180015F30
	public void .ctor(int width, int height) { }
	// RVA: 0x15F40 Offset: 0x15340 VA: 0x180015F40
	public void .ctor(int width, int height, RenderTextureFormat colorFormat, int depthBufferBits) { }
	// RVA: 0x15F50 Offset: 0x15350 VA: 0x180015F50
	public void .ctor(int width, int height, GraphicsFormat colorFormat, int depthBufferBits) { }
	// RVA: 0x15F60 Offset: 0x15360 VA: 0x180015F60
	public void .ctor(int width, int height, GraphicsFormat colorFormat, int depthBufferBits, int mipCount) { }
	// RVA: 0x15F70 Offset: 0x15370 VA: 0x180015F70
	private void SetOrClearRenderTextureCreationFlag(bool value, RenderTextureCreationFlags flag) { }
	// RVA: 0x15F90 Offset: 0x15390 VA: 0x180015F90
	public bool get_useMipMap() { }
	// RVA: 0x15FA0 Offset: 0x153A0 VA: 0x180015FA0
	public void set_useMipMap(bool value) { }
	// RVA: 0x15FC0 Offset: 0x153C0 VA: 0x180015FC0
	public bool get_autoGenerateMips() { }
	// RVA: 0x15FD0 Offset: 0x153D0 VA: 0x180015FD0
	public void set_autoGenerateMips(bool value) { }
	// RVA: 0x15FF0 Offset: 0x153F0 VA: 0x180015FF0
	public bool get_enableRandomWrite() { }
	// RVA: 0x16000 Offset: 0x15400 VA: 0x180016000
	public void set_enableRandomWrite(bool value) { }
	// RVA: 0x16020 Offset: 0x15420 VA: 0x180016020
	internal void set_createdFromScript(bool value) { }
	// RVA: 0x16040 Offset: 0x15440 VA: 0x180016040
	public void set_useDynamicScale(bool value) { }
	// RVA: 0x434420 Offset: 0x432C20 VA: 0x180434420
	private static void .cctor() { }
}

// Namespace: UnityEngine
public enum CursorLockMode // TypeDefIndex: 1431
{
	// Fields
	public int value__; // 0x0
	public const CursorLockMode None = 0; // 0x0
	public const CursorLockMode Locked = 1; // 0x0
	public const CursorLockMode Confined = 2; // 0x0
}

// Namespace: UnityEngine
public class Cursor // TypeDefIndex: 1432
{
	// Properties
	set; }
	public static CursorLockMode lockState { get; set; }

	// Methods
	// RVA: 0x543390 Offset: 0x541B90 VA: 0x180543390
	public static void set_visible(bool value) { }
	// RVA: 0x5433E0 Offset: 0x541BE0 VA: 0x1805433E0
	public static CursorLockMode get_lockState() { }
	// RVA: 0x543430 Offset: 0x541C30 VA: 0x180543430
	public static void set_lockState(CursorLockMode value) { }
}

// Namespace: UnityEngine
public enum KeyCode // TypeDefIndex: 1433
{
	// Fields
	public int value__; // 0x0
	public const KeyCode None = 0; // 0x0
	public const KeyCode Backspace = 8; // 0x0
	public const KeyCode Delete = 127; // 0x0
	public const KeyCode Tab = 9; // 0x0
	public const KeyCode Clear = 12; // 0x0
	public const KeyCode Return = 13; // 0x0
	public const KeyCode Pause = 19; // 0x0
	public const KeyCode Escape = 27; // 0x0
	public const KeyCode Space = 32; // 0x0
	public const KeyCode Keypad0 = 256; // 0x0
	public const KeyCode Keypad1 = 257; // 0x0
	public const KeyCode Keypad2 = 258; // 0x0
	public const KeyCode Keypad3 = 259; // 0x0
	public const KeyCode Keypad4 = 260; // 0x0
	public const KeyCode Keypad5 = 261; // 0x0
	public const KeyCode Keypad6 = 262; // 0x0
	public const KeyCode Keypad7 = 263; // 0x0
	public const KeyCode Keypad8 = 264; // 0x0
	public const KeyCode Keypad9 = 265; // 0x0
	public const KeyCode KeypadPeriod = 266; // 0x0
	public const KeyCode KeypadDivide = 267; // 0x0
	public const KeyCode KeypadMultiply = 268; // 0x0
	public const KeyCode KeypadMinus = 269; // 0x0
	public const KeyCode KeypadPlus = 270; // 0x0
	public const KeyCode KeypadEnter = 271; // 0x0
	public const KeyCode KeypadEquals = 272; // 0x0
	public const KeyCode UpArrow = 273; // 0x0
	public const KeyCode DownArrow = 274; // 0x0
	public const KeyCode RightArrow = 275; // 0x0
	public const KeyCode LeftArrow = 276; // 0x0
	public const KeyCode Insert = 277; // 0x0
	public const KeyCode Home = 278; // 0x0
	public const KeyCode End = 279; // 0x0
	public const KeyCode PageUp = 280; // 0x0
	public const KeyCode PageDown = 281; // 0x0
	public const KeyCode F1 = 282; // 0x0
	public const KeyCode F2 = 283; // 0x0
	public const KeyCode F3 = 284; // 0x0
	public const KeyCode F4 = 285; // 0x0
	public const KeyCode F5 = 286; // 0x0
	public const KeyCode F6 = 287; // 0x0
	public const KeyCode F7 = 288; // 0x0
	public const KeyCode F8 = 289; // 0x0
	public const KeyCode F9 = 290; // 0x0
	public const KeyCode F10 = 291; // 0x0
	public const KeyCode F11 = 292; // 0x0
	public const KeyCode F12 = 293; // 0x0
	public const KeyCode F13 = 294; // 0x0
	public const KeyCode F14 = 295; // 0x0
	public const KeyCode F15 = 296; // 0x0
	public const KeyCode Alpha0 = 48; // 0x0
	public const KeyCode Alpha1 = 49; // 0x0
	public const KeyCode Alpha2 = 50; // 0x0
	public const KeyCode Alpha3 = 51; // 0x0
	public const KeyCode Alpha4 = 52; // 0x0
	public const KeyCode Alpha5 = 53; // 0x0
	public const KeyCode Alpha6 = 54; // 0x0
	public const KeyCode Alpha7 = 55; // 0x0
	public const KeyCode Alpha8 = 56; // 0x0
	public const KeyCode Alpha9 = 57; // 0x0
	public const KeyCode Exclaim = 33; // 0x0
	public const KeyCode DoubleQuote = 34; // 0x0
	public const KeyCode Hash = 35; // 0x0
	public const KeyCode Dollar = 36; // 0x0
	public const KeyCode Percent = 37; // 0x0
	public const KeyCode Ampersand = 38; // 0x0
	public const KeyCode Quote = 39; // 0x0
	public const KeyCode LeftParen = 40; // 0x0
	public const KeyCode RightParen = 41; // 0x0
	public const KeyCode Asterisk = 42; // 0x0
	public const KeyCode Plus = 43; // 0x0
	public const KeyCode Comma = 44; // 0x0
	public const KeyCode Minus = 45; // 0x0
	public const KeyCode Period = 46; // 0x0
	public const KeyCode Slash = 47; // 0x0
	public const KeyCode Colon = 58; // 0x0
	public const KeyCode Semicolon = 59; // 0x0
	public const KeyCode Less = 60; // 0x0
	public const KeyCode Equals = 61; // 0x0
	public const KeyCode Greater = 62; // 0x0
	public const KeyCode Question = 63; // 0x0
	public const KeyCode At = 64; // 0x0
	public const KeyCode LeftBracket = 91; // 0x0
	public const KeyCode Backslash = 92; // 0x0
	public const KeyCode RightBracket = 93; // 0x0
	public const KeyCode Caret = 94; // 0x0
	public const KeyCode Underscore = 95; // 0x0
	public const KeyCode BackQuote = 96; // 0x0
	public const KeyCode A = 97; // 0x0
	public const KeyCode B = 98; // 0x0
	public const KeyCode C = 99; // 0x0
	public const KeyCode D = 100; // 0x0
	public const KeyCode E = 101; // 0x0
	public const KeyCode F = 102; // 0x0
	public const KeyCode G = 103; // 0x0
	public const KeyCode H = 104; // 0x0
	public const KeyCode I = 105; // 0x0
	public const KeyCode J = 106; // 0x0
	public const KeyCode K = 107; // 0x0
	public const KeyCode L = 108; // 0x0
	public const KeyCode M = 109; // 0x0
	public const KeyCode N = 110; // 0x0
	public const KeyCode O = 111; // 0x0
	public const KeyCode P = 112; // 0x0
	public const KeyCode Q = 113; // 0x0
	public const KeyCode R = 114; // 0x0
	public const KeyCode S = 115; // 0x0
	public const KeyCode T = 116; // 0x0
	public const KeyCode U = 117; // 0x0
	public const KeyCode V = 118; // 0x0
	public const KeyCode W = 119; // 0x0
	public const KeyCode X = 120; // 0x0
	public const KeyCode Y = 121; // 0x0
	public const KeyCode Z = 122; // 0x0
	public const KeyCode LeftCurlyBracket = 123; // 0x0
	public const KeyCode Pipe = 124; // 0x0
	public const KeyCode RightCurlyBracket = 125; // 0x0
	public const KeyCode Tilde = 126; // 0x0
	public const KeyCode Numlock = 300; // 0x0
	public const KeyCode CapsLock = 301; // 0x0
	public const KeyCode ScrollLock = 302; // 0x0
	public const KeyCode RightShift = 303; // 0x0
	public const KeyCode LeftShift = 304; // 0x0
	public const KeyCode RightControl = 305; // 0x0
	public const KeyCode LeftControl = 306; // 0x0
	public const KeyCode RightAlt = 307; // 0x0
	public const KeyCode LeftAlt = 308; // 0x0
	public const KeyCode LeftCommand = 310; // 0x0
	public const KeyCode LeftApple = 310; // 0x0
	public const KeyCode LeftWindows = 311; // 0x0
	public const KeyCode RightCommand = 309; // 0x0
	public const KeyCode RightApple = 309; // 0x0
	public const KeyCode RightWindows = 312; // 0x0
	public const KeyCode AltGr = 313; // 0x0
	public const KeyCode Help = 315; // 0x0
	public const KeyCode Print = 316; // 0x0
	public const KeyCode SysReq = 317; // 0x0
	public const KeyCode Break = 318; // 0x0
	public const KeyCode Menu = 319; // 0x0
	public const KeyCode Mouse0 = 323; // 0x0
	public const KeyCode Mouse1 = 324; // 0x0
	public const KeyCode Mouse2 = 325; // 0x0
	public const KeyCode Mouse3 = 326; // 0x0
	public const KeyCode Mouse4 = 327; // 0x0
	public const KeyCode Mouse5 = 328; // 0x0
	public const KeyCode Mouse6 = 329; // 0x0
	public const KeyCode JoystickButton0 = 330; // 0x0
	public const KeyCode JoystickButton1 = 331; // 0x0
	public const KeyCode JoystickButton2 = 332; // 0x0
	public const KeyCode JoystickButton3 = 333; // 0x0
	public const KeyCode JoystickButton4 = 334; // 0x0
	public const KeyCode JoystickButton5 = 335; // 0x0
	public const KeyCode JoystickButton6 = 336; // 0x0
	public const KeyCode JoystickButton7 = 337; // 0x0
	public const KeyCode JoystickButton8 = 338; // 0x0
	public const KeyCode JoystickButton9 = 339; // 0x0
	public const KeyCode JoystickButton10 = 340; // 0x0
	public const KeyCode JoystickButton11 = 341; // 0x0
	public const KeyCode JoystickButton12 = 342; // 0x0
	public const KeyCode JoystickButton13 = 343; // 0x0
	public const KeyCode JoystickButton14 = 344; // 0x0
	public const KeyCode JoystickButton15 = 345; // 0x0
	public const KeyCode JoystickButton16 = 346; // 0x0
	public const KeyCode JoystickButton17 = 347; // 0x0
	public const KeyCode JoystickButton18 = 348; // 0x0
	public const KeyCode JoystickButton19 = 349; // 0x0
	public const KeyCode Joystick1Button0 = 350; // 0x0
	public const KeyCode Joystick1Button1 = 351; // 0x0
	public const KeyCode Joystick1Button2 = 352; // 0x0
	public const KeyCode Joystick1Button3 = 353; // 0x0
	public const KeyCode Joystick1Button4 = 354; // 0x0
	public const KeyCode Joystick1Button5 = 355; // 0x0
	public const KeyCode Joystick1Button6 = 356; // 0x0
	public const KeyCode Joystick1Button7 = 357; // 0x0
	public const KeyCode Joystick1Button8 = 358; // 0x0
	public const KeyCode Joystick1Button9 = 359; // 0x0
	public const KeyCode Joystick1Button10 = 360; // 0x0
	public const KeyCode Joystick1Button11 = 361; // 0x0
	public const KeyCode Joystick1Button12 = 362; // 0x0
	public const KeyCode Joystick1Button13 = 363; // 0x0
	public const KeyCode Joystick1Button14 = 364; // 0x0
	public const KeyCode Joystick1Button15 = 365; // 0x0
	public const KeyCode Joystick1Button16 = 366; // 0x0
	public const KeyCode Joystick1Button17 = 367; // 0x0
	public const KeyCode Joystick1Button18 = 368; // 0x0
	public const KeyCode Joystick1Button19 = 369; // 0x0
	public const KeyCode Joystick2Button0 = 370; // 0x0
	public const KeyCode Joystick2Button1 = 371; // 0x0
	public const KeyCode Joystick2Button2 = 372; // 0x0
	public const KeyCode Joystick2Button3 = 373; // 0x0
	public const KeyCode Joystick2Button4 = 374; // 0x0
	public const KeyCode Joystick2Button5 = 375; // 0x0
	public const KeyCode Joystick2Button6 = 376; // 0x0
	public const KeyCode Joystick2Button7 = 377; // 0x0
	public const KeyCode Joystick2Button8 = 378; // 0x0
	public const KeyCode Joystick2Button9 = 379; // 0x0
	public const KeyCode Joystick2Button10 = 380; // 0x0
	public const KeyCode Joystick2Button11 = 381; // 0x0
	public const KeyCode Joystick2Button12 = 382; // 0x0
	public const KeyCode Joystick2Button13 = 383; // 0x0
	public const KeyCode Joystick2Button14 = 384; // 0x0
	public const KeyCode Joystick2Button15 = 385; // 0x0
	public const KeyCode Joystick2Button16 = 386; // 0x0
	public const KeyCode Joystick2Button17 = 387; // 0x0
	public const KeyCode Joystick2Button18 = 388; // 0x0
	public const KeyCode Joystick2Button19 = 389; // 0x0
	public const KeyCode Joystick3Button0 = 390; // 0x0
	public const KeyCode Joystick3Button1 = 391; // 0x0
	public const KeyCode Joystick3Button2 = 392; // 0x0
	public const KeyCode Joystick3Button3 = 393; // 0x0
	public const KeyCode Joystick3Button4 = 394; // 0x0
	public const KeyCode Joystick3Button5 = 395; // 0x0
	public const KeyCode Joystick3Button6 = 396; // 0x0
	public const KeyCode Joystick3Button7 = 397; // 0x0
	public const KeyCode Joystick3Button8 = 398; // 0x0
	public const KeyCode Joystick3Button9 = 399; // 0x0
	public const KeyCode Joystick3Button10 = 400; // 0x0
	public const KeyCode Joystick3Button11 = 401; // 0x0
	public const KeyCode Joystick3Button12 = 402; // 0x0
	public const KeyCode Joystick3Button13 = 403; // 0x0
	public const KeyCode Joystick3Button14 = 404; // 0x0
	public const KeyCode Joystick3Button15 = 405; // 0x0
	public const KeyCode Joystick3Button16 = 406; // 0x0
	public const KeyCode Joystick3Button17 = 407; // 0x0
	public const KeyCode Joystick3Button18 = 408; // 0x0
	public const KeyCode Joystick3Button19 = 409; // 0x0
	public const KeyCode Joystick4Button0 = 410; // 0x0
	public const KeyCode Joystick4Button1 = 411; // 0x0
	public const KeyCode Joystick4Button2 = 412; // 0x0
	public const KeyCode Joystick4Button3 = 413; // 0x0
	public const KeyCode Joystick4Button4 = 414; // 0x0
	public const KeyCode Joystick4Button5 = 415; // 0x0
	public const KeyCode Joystick4Button6 = 416; // 0x0
	public const KeyCode Joystick4Button7 = 417; // 0x0
	public const KeyCode Joystick4Button8 = 418; // 0x0
	public const KeyCode Joystick4Button9 = 419; // 0x0
	public const KeyCode Joystick4Button10 = 420; // 0x0
	public const KeyCode Joystick4Button11 = 421; // 0x0
	public const KeyCode Joystick4Button12 = 422; // 0x0
	public const KeyCode Joystick4Button13 = 423; // 0x0
	public const KeyCode Joystick4Button14 = 424; // 0x0
	public const KeyCode Joystick4Button15 = 425; // 0x0
	public const KeyCode Joystick4Button16 = 426; // 0x0
	public const KeyCode Joystick4Button17 = 427; // 0x0
	public const KeyCode Joystick4Button18 = 428; // 0x0
	public const KeyCode Joystick4Button19 = 429; // 0x0
	public const KeyCode Joystick5Button0 = 430; // 0x0
	public const KeyCode Joystick5Button1 = 431; // 0x0
	public const KeyCode Joystick5Button2 = 432; // 0x0
	public const KeyCode Joystick5Button3 = 433; // 0x0
	public const KeyCode Joystick5Button4 = 434; // 0x0
	public const KeyCode Joystick5Button5 = 435; // 0x0
	public const KeyCode Joystick5Button6 = 436; // 0x0
	public const KeyCode Joystick5Button7 = 437; // 0x0
	public const KeyCode Joystick5Button8 = 438; // 0x0
	public const KeyCode Joystick5Button9 = 439; // 0x0
	public const KeyCode Joystick5Button10 = 440; // 0x0
	public const KeyCode Joystick5Button11 = 441; // 0x0
	public const KeyCode Joystick5Button12 = 442; // 0x0
	public const KeyCode Joystick5Button13 = 443; // 0x0
	public const KeyCode Joystick5Button14 = 444; // 0x0
	public const KeyCode Joystick5Button15 = 445; // 0x0
	public const KeyCode Joystick5Button16 = 446; // 0x0
	public const KeyCode Joystick5Button17 = 447; // 0x0
	public const KeyCode Joystick5Button18 = 448; // 0x0
	public const KeyCode Joystick5Button19 = 449; // 0x0
	public const KeyCode Joystick6Button0 = 450; // 0x0
	public const KeyCode Joystick6Button1 = 451; // 0x0
	public const KeyCode Joystick6Button2 = 452; // 0x0
	public const KeyCode Joystick6Button3 = 453; // 0x0
	public const KeyCode Joystick6Button4 = 454; // 0x0
	public const KeyCode Joystick6Button5 = 455; // 0x0
	public const KeyCode Joystick6Button6 = 456; // 0x0
	public const KeyCode Joystick6Button7 = 457; // 0x0
	public const KeyCode Joystick6Button8 = 458; // 0x0
	public const KeyCode Joystick6Button9 = 459; // 0x0
	public const KeyCode Joystick6Button10 = 460; // 0x0
	public const KeyCode Joystick6Button11 = 461; // 0x0
	public const KeyCode Joystick6Button12 = 462; // 0x0
	public const KeyCode Joystick6Button13 = 463; // 0x0
	public const KeyCode Joystick6Button14 = 464; // 0x0
	public const KeyCode Joystick6Button15 = 465; // 0x0
	public const KeyCode Joystick6Button16 = 466; // 0x0
	public const KeyCode Joystick6Button17 = 467; // 0x0
	public const KeyCode Joystick6Button18 = 468; // 0x0
	public const KeyCode Joystick6Button19 = 469; // 0x0
	public const KeyCode Joystick7Button0 = 470; // 0x0
	public const KeyCode Joystick7Button1 = 471; // 0x0
	public const KeyCode Joystick7Button2 = 472; // 0x0
	public const KeyCode Joystick7Button3 = 473; // 0x0
	public const KeyCode Joystick7Button4 = 474; // 0x0
	public const KeyCode Joystick7Button5 = 475; // 0x0
	public const KeyCode Joystick7Button6 = 476; // 0x0
	public const KeyCode Joystick7Button7 = 477; // 0x0
	public const KeyCode Joystick7Button8 = 478; // 0x0
	public const KeyCode Joystick7Button9 = 479; // 0x0
	public const KeyCode Joystick7Button10 = 480; // 0x0
	public const KeyCode Joystick7Button11 = 481; // 0x0
	public const KeyCode Joystick7Button12 = 482; // 0x0
	public const KeyCode Joystick7Button13 = 483; // 0x0
	public const KeyCode Joystick7Button14 = 484; // 0x0
	public const KeyCode Joystick7Button15 = 485; // 0x0
	public const KeyCode Joystick7Button16 = 486; // 0x0
	public const KeyCode Joystick7Button17 = 487; // 0x0
	public const KeyCode Joystick7Button18 = 488; // 0x0
	public const KeyCode Joystick7Button19 = 489; // 0x0
	public const KeyCode Joystick8Button0 = 490; // 0x0
	public const KeyCode Joystick8Button1 = 491; // 0x0
	public const KeyCode Joystick8Button2 = 492; // 0x0
	public const KeyCode Joystick8Button3 = 493; // 0x0
	public const KeyCode Joystick8Button4 = 494; // 0x0
	public const KeyCode Joystick8Button5 = 495; // 0x0
	public const KeyCode Joystick8Button6 = 496; // 0x0
	public const KeyCode Joystick8Button7 = 497; // 0x0
	public const KeyCode Joystick8Button8 = 498; // 0x0
	public const KeyCode Joystick8Button9 = 499; // 0x0
	public const KeyCode Joystick8Button10 = 500; // 0x0
	public const KeyCode Joystick8Button11 = 501; // 0x0
	public const KeyCode Joystick8Button12 = 502; // 0x0
	public const KeyCode Joystick8Button13 = 503; // 0x0
	public const KeyCode Joystick8Button14 = 504; // 0x0
	public const KeyCode Joystick8Button15 = 505; // 0x0
	public const KeyCode Joystick8Button16 = 506; // 0x0
	public const KeyCode Joystick8Button17 = 507; // 0x0
	public const KeyCode Joystick8Button18 = 508; // 0x0
	public const KeyCode Joystick8Button19 = 509; // 0x0
}

// Namespace: UnityEngine
public interface ILogger : ILogHandler // TypeDefIndex: 1434
{
	// Properties
	public abstract ILogHandler logHandler { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract ILogHandler get_logHandler() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void Log(LogType logType, object message) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void Log(LogType logType, object message, Object context) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void LogFormat(LogType logType, string format, object[] args) { }
}

// Namespace: UnityEngine
public interface ILogHandler // TypeDefIndex: 1435
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void LogFormat(LogType logType, Object context, string format, object[] args) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void LogException(Exception exception, Object context) { }
}

// Namespace: UnityEngine
public class Logger : ILogger, ILogHandler // TypeDefIndex: 1436
{
	// Fields
	private ILogHandler <logHandler>k__BackingField; // 0x10
	private bool <logEnabled>k__BackingField; // 0x18
	private LogType <filterLogType>k__BackingField; // 0x1C

	// Properties
	public ILogHandler logHandler { get; set; }
	public bool logEnabled { get; set; }
	public LogType filterLogType { get; set; }

	// Methods
	// RVA: 0x54D150 Offset: 0x54B950 VA: 0x18054D150
	public void .ctor(ILogHandler logHandler) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 4
	public ILogHandler get_logHandler() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0 Slot: 10
	public void set_logHandler(ILogHandler value) { }
	// RVA: 0x28C960 Offset: 0x28B160 VA: 0x18028C960 Slot: 11
	public bool get_logEnabled() { }
	// RVA: 0x2E9780 Offset: 0x2E7F80 VA: 0x1802E9780 Slot: 12
	public void set_logEnabled(bool value) { }
	// RVA: 0x202970 Offset: 0x201170 VA: 0x180202970 Slot: 13
	public LogType get_filterLogType() { }
	// RVA: 0x20B400 Offset: 0x209C00 VA: 0x18020B400 Slot: 14
	public void set_filterLogType(LogType value) { }
	// RVA: 0x54D160 Offset: 0x54B960 VA: 0x18054D160 Slot: 15
	public bool IsLogTypeAllowed(LogType logType) { }
	// RVA: 0x54D180 Offset: 0x54B980 VA: 0x18054D180
	private static string GetString(object message) { }
	// RVA: 0x54D280 Offset: 0x54BA80 VA: 0x18054D280 Slot: 5
	public void Log(LogType logType, object message) { }
	// RVA: 0x54D3D0 Offset: 0x54BBD0 VA: 0x18054D3D0 Slot: 6
	public void Log(LogType logType, object message, Object context) { }
	// RVA: 0x54D520 Offset: 0x54BD20 VA: 0x18054D520 Slot: 7
	public void LogFormat(LogType logType, string format, object[] args) { }
	// RVA: 0x54D600 Offset: 0x54BE00 VA: 0x18054D600 Slot: 8
	public void LogFormat(LogType logType, Object context, string format, object[] args) { }
	// RVA: 0x54D6E0 Offset: 0x54BEE0 VA: 0x18054D6E0 Slot: 9
	public void LogException(Exception exception, Object context) { }
}

// Namespace: UnityEngine
internal class UnityLogWriter : TextWriter // TypeDefIndex: 1437
{
	// Methods
	// RVA: 0x445400 Offset: 0x443C00 VA: 0x180445400
	public static void WriteStringToUnityLog(string s) { }
	// RVA: 0x445460 Offset: 0x443C60 VA: 0x180445460
	private static void WriteStringToUnityLogImpl(string s) { }
	// RVA: 0x4454B0 Offset: 0x443CB0 VA: 0x1804454B0
	public static void Init() { }
	// RVA: 0x445700 Offset: 0x443F00 VA: 0x180445700 Slot: 10
	public override void Write(char value) { }
	// RVA: 0x445770 Offset: 0x443F70 VA: 0x180445770 Slot: 13
	public override void Write(string s) { }
	// RVA: 0x4457D0 Offset: 0x443FD0 VA: 0x1804457D0 Slot: 12
	public override void Write(char[] buffer, int index, int count) { }
	// RVA: 0x445830 Offset: 0x444030 VA: 0x180445830
	public void .ctor() { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xDD170 Offset: 0xDC570 VA: 0x1800DD170
[RequiredByNativeCodeAttribute] // RVA: 0xDD170 Offset: 0xDC570 VA: 0x1800DD170
public struct Color : IEquatable<Color>, IFormattable // TypeDefIndex: 1438
{
	// Fields
	public float r; // 0x0
	public float g; // 0x4
	public float b; // 0x8
	public float a; // 0xC

	// Properties
	public static Color red { get; }
	public static Color green { get; }
	public static Color blue { get; }
	public static Color white { get; }
	public static Color black { get; }
	public static Color yellow { get; }
	public static Color cyan { get; }
	public static Color magenta { get; }
	public static Color gray { get; }
	public static Color grey { get; }
	public static Color clear { get; }
	public Color linear { get; }
	public float maxColorComponent { get; }

	// Methods
	// RVA: 0x4EC0 Offset: 0x42C0 VA: 0x180004EC0
	public void .ctor(float r, float g, float b, float a) { }
	// RVA: 0x20680 Offset: 0x1FA80 VA: 0x180020680
	public void .ctor(float r, float g, float b) { }
	// RVA: 0x206A0 Offset: 0x1FAA0 VA: 0x1800206A0 Slot: 3
	public override string ToString() { }
	// RVA: 0x20760 Offset: 0x1FB60 VA: 0x180020760 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x20770 Offset: 0x1FB70 VA: 0x180020770 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x20780 Offset: 0x1FB80 VA: 0x180020780 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x1E410 Offset: 0x1D810 VA: 0x18001E410 Slot: 4
	public bool Equals(Color other) { }
	// RVA: 0x53CE00 Offset: 0x53B600 VA: 0x18053CE00
	public static Color op_Subtraction(Color a, Color b) { }
	// RVA: 0x53CE50 Offset: 0x53B650 VA: 0x18053CE50
	public static Color op_Multiply(Color a, Color b) { }
	// RVA: 0x44C280 Offset: 0x44AA80 VA: 0x18044C280
	public static Color op_Multiply(Color a, float b) { }
	// RVA: 0x53CEA0 Offset: 0x53B6A0 VA: 0x18053CEA0
	public static bool op_Equality(Color lhs, Color rhs) { }
	// RVA: 0x53CFA0 Offset: 0x53B7A0 VA: 0x18053CFA0
	public static bool op_Inequality(Color lhs, Color rhs) { }
	// RVA: 0x53CFD0 Offset: 0x53B7D0 VA: 0x18053CFD0
	public static Color Lerp(Color a, Color b, float t) { }
	// RVA: 0x20790 Offset: 0x1FB90 VA: 0x180020790
	internal Color RGBMultiplied(float multiplier) { }
	// RVA: 0x53D140 Offset: 0x53B940 VA: 0x18053D140
	public static Color get_red() { }
	// RVA: 0x53D160 Offset: 0x53B960 VA: 0x18053D160
	public static Color get_green() { }
	// RVA: 0x53D180 Offset: 0x53B980 VA: 0x18053D180
	public static Color get_blue() { }
	// RVA: 0x53D1A0 Offset: 0x53B9A0 VA: 0x18053D1A0
	public static Color get_white() { }
	// RVA: 0x53D1C0 Offset: 0x53B9C0 VA: 0x18053D1C0
	public static Color get_black() { }
	// RVA: 0x53D1E0 Offset: 0x53B9E0 VA: 0x18053D1E0
	public static Color get_yellow() { }
	// RVA: 0x53D200 Offset: 0x53BA00 VA: 0x18053D200
	public static Color get_cyan() { }
	// RVA: 0x53D220 Offset: 0x53BA20 VA: 0x18053D220
	public static Color get_magenta() { }
	// RVA: 0x53D240 Offset: 0x53BA40 VA: 0x18053D240
	public static Color get_gray() { }
	// RVA: 0x53D240 Offset: 0x53BA40 VA: 0x18053D240
	public static Color get_grey() { }
	// RVA: 0x4F6BF0 Offset: 0x4F53F0 VA: 0x1804F6BF0
	public static Color get_clear() { }
	// RVA: 0x207D0 Offset: 0x1FBD0 VA: 0x1800207D0
	public Color get_linear() { }
	// RVA: 0x207F0 Offset: 0x1FBF0 VA: 0x1800207F0
	public float get_maxColorComponent() { }
	// RVA: 0x53D4D0 Offset: 0x53BCD0 VA: 0x18053D4D0
	public static Vector4 op_Implicit(Color c) { }
	// RVA: 0x53D4D0 Offset: 0x53BCD0 VA: 0x18053D4D0
	public static Color op_Implicit(Vector4 v) { }
	// RVA: 0x53D510 Offset: 0x53BD10 VA: 0x18053D510
	public static void RGBToHSV(Color rgbColor, out float H, out float S, out float V) { }
	// RVA: 0x53D5D0 Offset: 0x53BDD0 VA: 0x18053D5D0
	private static void RGBToHSVHelper(float offset, float dominantcolor, float colorone, float colortwo, out float H, out float S, out float V) { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[UsedByNativeCodeAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public struct Color32 : IFormattable // TypeDefIndex: 1439
{
	// Fields
	private int rgba; // 0x0
	public byte r; // 0x0
	public byte g; // 0x1
	public byte b; // 0x2
	public byte a; // 0x3

	// Methods
	// RVA: 0x20800 Offset: 0x1FC00 VA: 0x180020800
	public void .ctor(byte r, byte g, byte b, byte a) { }
	// RVA: 0x53D6A0 Offset: 0x53BEA0 VA: 0x18053D6A0
	public static Color32 op_Implicit(Color c) { }
	// RVA: 0x53D850 Offset: 0x53C050 VA: 0x18053D850
	public static Color op_Implicit(Color32 c) { }
	// RVA: 0x20820 Offset: 0x1FC20 VA: 0x180020820 Slot: 3
	public override string ToString() { }
	// RVA: 0x208E0 Offset: 0x1FCE0 VA: 0x1800208E0 Slot: 4
	public string ToString(string format, IFormatProvider formatProvider) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct GradientColorKey // TypeDefIndex: 1440
{
	// Fields
	public Color color; // 0x0
	public float time; // 0x10

	// Methods
	// RVA: 0x20B70 Offset: 0x1FF70 VA: 0x180020B70
	public void .ctor(Color col, float time) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class Gradient : IEquatable<Gradient> // TypeDefIndex: 1441
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties
	public GradientColorKey[] colorKeys { set; }

	// Methods
	// RVA: 0x547510 Offset: 0x545D10 VA: 0x180547510
	private static IntPtr Init() { }
	// RVA: 0x547560 Offset: 0x545D60 VA: 0x180547560
	private void Cleanup() { }
	// RVA: 0x5475B0 Offset: 0x545DB0 VA: 0x1805475B0
	private bool Internal_Equals(IntPtr other) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x547610 Offset: 0x545E10 VA: 0x180547610
	public void .ctor() { }
	// RVA: 0x547660 Offset: 0x545E60 VA: 0x180547660 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x547710 Offset: 0x545F10 VA: 0x180547710
	public Color Evaluate(float time) { }
	// RVA: 0x547790 Offset: 0x545F90 VA: 0x180547790
	public void set_colorKeys(GradientColorKey[] value) { }
	// RVA: 0x5477F0 Offset: 0x545FF0 VA: 0x1805477F0 Slot: 0
	public override bool Equals(object o) { }
	// RVA: 0x5479D0 Offset: 0x5461D0 VA: 0x1805479D0 Slot: 4
	public bool Equals(Gradient other) { }
	// RVA: 0x440EE0 Offset: 0x43F6E0 VA: 0x180440EE0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x547AE0 Offset: 0x5462E0 VA: 0x180547AE0
	private void Evaluate_Injected(float time, out Color ret) { }
}

// Namespace: UnityEngine
[Serializable]
public struct FrustumPlanes // TypeDefIndex: 1442
{
	// Fields
	public float left; // 0x0
	public float right; // 0x4
	public float bottom; // 0x8
	public float top; // 0xC
	public float zNear; // 0x10
	public float zFar; // 0x14
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xDD170 Offset: 0xDC570 VA: 0x1800DD170
[RequiredByNativeCodeAttribute] // RVA: 0xDD170 Offset: 0xDC570 VA: 0x1800DD170
public struct Matrix4x4 : IEquatable<Matrix4x4>, IFormattable // TypeDefIndex: 1443
{
	// Fields
	public float m00; // 0x0
	public float m10; // 0x4
	public float m20; // 0x8
	public float m30; // 0xC
	public float m01; // 0x10
	public float m11; // 0x14
	public float m21; // 0x18
	public float m31; // 0x1C
	public float m02; // 0x20
	public float m12; // 0x24
	public float m22; // 0x28
	public float m32; // 0x2C
	public float m03; // 0x30
	public float m13; // 0x34
	public float m23; // 0x38
	public float m33; // 0x3C
	private static readonly Matrix4x4 zeroMatrix; // 0x0
	private static readonly Matrix4x4 identityMatrix; // 0x40

	// Properties
	public Vector3 lossyScale { get; }
	public FrustumPlanes decomposeProjection { get; }
	public Matrix4x4 inverse { get; }
	public float Item { get; set; }
	public float Item { get; set; }
	public static Matrix4x4 identity { get; }

	// Methods
	// RVA: 0x1CF40 Offset: 0x1C340 VA: 0x18001CF40
	private Vector3 GetLossyScale() { }
	// RVA: 0x1CF60 Offset: 0x1C360 VA: 0x18001CF60
	private FrustumPlanes DecomposeProjection() { }
	// RVA: 0x1CF80 Offset: 0x1C380 VA: 0x18001CF80
	public Vector3 get_lossyScale() { }
	// RVA: 0x1CFC0 Offset: 0x1C3C0 VA: 0x18001CFC0
	public FrustumPlanes get_decomposeProjection() { }
	// RVA: 0x4DECE0 Offset: 0x4DD4E0 VA: 0x1804DECE0
	public static Matrix4x4 TRS(Vector3 pos, Quaternion q, Vector3 s) { }
	// RVA: 0x4DEDF0 Offset: 0x4DD5F0 VA: 0x1804DEDF0
	public static Matrix4x4 Inverse(Matrix4x4 m) { }
	// RVA: 0x1D000 Offset: 0x1C400 VA: 0x18001D000
	public Matrix4x4 get_inverse() { }
	// RVA: 0x4DF100 Offset: 0x4DD900 VA: 0x1804DF100
	public static Matrix4x4 Ortho(float left, float right, float bottom, float top, float zNear, float zFar) { }
	// RVA: 0x4DF240 Offset: 0x4DDA40 VA: 0x1804DF240
	public static Matrix4x4 Perspective(float fov, float aspect, float zNear, float zFar) { }
	// RVA: 0x4DF360 Offset: 0x4DDB60 VA: 0x1804DF360
	public static Matrix4x4 Frustum(float left, float right, float bottom, float top, float zNear, float zFar) { }
	// RVA: 0x4DF4A0 Offset: 0x4DDCA0 VA: 0x1804DF4A0
	public static Matrix4x4 Frustum(FrustumPlanes fp) { }
	// RVA: 0x1D020 Offset: 0x1C420 VA: 0x18001D020
	public void .ctor(Vector4 column0, Vector4 column1, Vector4 column2, Vector4 column3) { }
	// RVA: 0x1D0D0 Offset: 0x1C4D0 VA: 0x18001D0D0
	public float get_Item(int row, int column) { }
	// RVA: 0x1D0E0 Offset: 0x1C4E0 VA: 0x18001D0E0
	public void set_Item(int row, int column, float value) { }
	// RVA: 0x1D0F0 Offset: 0x1C4F0 VA: 0x18001D0F0
	public float get_Item(int index) { }
	// RVA: 0x1D100 Offset: 0x1C500 VA: 0x18001D100
	public void set_Item(int index, float value) { }
	// RVA: 0x1D110 Offset: 0x1C510 VA: 0x18001D110 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1D120 Offset: 0x1C520 VA: 0x18001D120 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x1D130 Offset: 0x1C530 VA: 0x18001D130 Slot: 4
	public bool Equals(Matrix4x4 other) { }
	// RVA: 0x4E03E0 Offset: 0x4DEBE0 VA: 0x1804E03E0
	public static Matrix4x4 op_Multiply(Matrix4x4 lhs, Matrix4x4 rhs) { }
	// RVA: 0x4E0940 Offset: 0x4DF140 VA: 0x1804E0940
	public static bool op_Equality(Matrix4x4 lhs, Matrix4x4 rhs) { }
	// RVA: 0x1D170 Offset: 0x1C570 VA: 0x18001D170
	public Vector4 GetColumn(int index) { }
	// RVA: 0x1D190 Offset: 0x1C590 VA: 0x18001D190
	public void SetRow(int index, Vector4 row) { }
	// RVA: 0x1D200 Offset: 0x1C600 VA: 0x18001D200
	public Vector3 MultiplyPoint(Vector3 point) { }
	// RVA: 0x1D230 Offset: 0x1C630 VA: 0x18001D230
	public Vector3 MultiplyPoint3x4(Vector3 point) { }
	// RVA: 0x1D2F0 Offset: 0x1C6F0 VA: 0x18001D2F0
	public Vector3 MultiplyVector(Vector3 vector) { }
	// RVA: 0x4E11D0 Offset: 0x4DF9D0 VA: 0x1804E11D0
	public static Matrix4x4 Translate(Vector3 vector) { }
	// RVA: 0x4E1270 Offset: 0x4DFA70 VA: 0x1804E1270
	public static Matrix4x4 Rotate(Quaternion q) { }
	// RVA: 0x4E1450 Offset: 0x4DFC50 VA: 0x1804E1450
	public static Matrix4x4 get_identity() { }
	// RVA: 0x1D3A0 Offset: 0x1C7A0 VA: 0x18001D3A0 Slot: 3
	public override string ToString() { }
	// RVA: 0x1D460 Offset: 0x1C860 VA: 0x18001D460 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x4E1CF0 Offset: 0x4E04F0 VA: 0x1804E1CF0
	private static void .cctor() { }
	// RVA: 0x4E1E50 Offset: 0x4E0650 VA: 0x1804E1E50
	private static void GetLossyScale_Injected(ref Matrix4x4 _unity_self, out Vector3 ret) { }
	// RVA: 0x4E1EB0 Offset: 0x4E06B0 VA: 0x1804E1EB0
	private static void DecomposeProjection_Injected(ref Matrix4x4 _unity_self, out FrustumPlanes ret) { }
	// RVA: 0x4E1F10 Offset: 0x4E0710 VA: 0x1804E1F10
	private static void TRS_Injected(ref Vector3 pos, ref Quaternion q, ref Vector3 s, out Matrix4x4 ret) { }
	// RVA: 0x4E1F90 Offset: 0x4E0790 VA: 0x1804E1F90
	private static void Inverse_Injected(ref Matrix4x4 m, out Matrix4x4 ret) { }
	// RVA: 0x4E1FF0 Offset: 0x4E07F0 VA: 0x1804E1FF0
	private static void Ortho_Injected(float left, float right, float bottom, float top, float zNear, float zFar, out Matrix4x4 ret) { }
	// RVA: 0x4E2090 Offset: 0x4E0890 VA: 0x1804E2090
	private static void Perspective_Injected(float fov, float aspect, float zNear, float zFar, out Matrix4x4 ret) { }
	// RVA: 0x4E2130 Offset: 0x4E0930 VA: 0x1804E2130
	private static void Frustum_Injected(float left, float right, float bottom, float top, float zNear, float zFar, out Matrix4x4 ret) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDD1C0 Offset: 0xDC5C0 VA: 0x1800DD1C0
[DefaultMemberAttribute] // RVA: 0xDD1C0 Offset: 0xDC5C0 VA: 0x1800DD1C0
public struct Vector3 : IEquatable<Vector3>, IFormattable // TypeDefIndex: 1444
{
	// Fields
	public const float kEpsilon = 1E-05; // 0x0
	public const float kEpsilonNormalSqrt = 1E-15; // 0x0
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	private static readonly Vector3 zeroVector; // 0x0
	private static readonly Vector3 oneVector; // 0xC
	private static readonly Vector3 upVector; // 0x18
	private static readonly Vector3 downVector; // 0x24
	private static readonly Vector3 leftVector; // 0x30
	private static readonly Vector3 rightVector; // 0x3C
	private static readonly Vector3 forwardVector; // 0x48
	private static readonly Vector3 backVector; // 0x54
	private static readonly Vector3 positiveInfinityVector; // 0x60
	private static readonly Vector3 negativeInfinityVector; // 0x6C

	// Properties
	public float Item { get; set; }
	public Vector3 normalized { get; }
	public float magnitude { get; }
	public float sqrMagnitude { get; }
	public static Vector3 zero { get; }
	public static Vector3 one { get; }
	public static Vector3 forward { get; }
	public static Vector3 back { get; }
	public static Vector3 up { get; }
	public static Vector3 down { get; }
	public static Vector3 left { get; }
	public static Vector3 right { get; }

	// Methods
	// RVA: 0x4484E0 Offset: 0x446CE0 VA: 0x1804484E0
	public static Vector3 Slerp(Vector3 a, Vector3 b, float t) { }
	// RVA: 0x4485E0 Offset: 0x446DE0 VA: 0x1804485E0
	public static Vector3 Lerp(Vector3 a, Vector3 b, float t) { }
	// RVA: 0x448720 Offset: 0x446F20 VA: 0x180448720
	public static Vector3 MoveTowards(Vector3 current, Vector3 target, float maxDistanceDelta) { }
	// RVA: 0x448910 Offset: 0x447110 VA: 0x180448910
	public static Vector3 SmoothDamp(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime) { }
	// RVA: 0x448AA0 Offset: 0x4472A0 VA: 0x180448AA0
	public static Vector3 SmoothDamp(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float maxSpeed, float deltaTime) { }
	// RVA: 0x16CF0 Offset: 0x160F0 VA: 0x180016CF0
	public float get_Item(int index) { }
	// RVA: 0x16D00 Offset: 0x16100 VA: 0x180016D00
	public void set_Item(int index, float value) { }
	// RVA: 0x16D10 Offset: 0x16110 VA: 0x180016D10
	public void .ctor(float x, float y, float z) { }
	// RVA: 0x16D20 Offset: 0x16120 VA: 0x180016D20
	public void .ctor(float x, float y) { }
	// RVA: 0x4490B0 Offset: 0x4478B0 VA: 0x1804490B0
	public static Vector3 Cross(Vector3 lhs, Vector3 rhs) { }
	// RVA: 0x16D40 Offset: 0x16140 VA: 0x180016D40 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x16D50 Offset: 0x16150 VA: 0x180016D50 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x16D60 Offset: 0x16160 VA: 0x180016D60 Slot: 4
	public bool Equals(Vector3 other) { }
	// RVA: 0x4492D0 Offset: 0x447AD0 VA: 0x1804492D0
	public static Vector3 Normalize(Vector3 value) { }
	// RVA: 0x16DC0 Offset: 0x161C0 VA: 0x180016DC0
	public void Normalize() { }
	// RVA: 0x16DD0 Offset: 0x161D0 VA: 0x180016DD0
	public Vector3 get_normalized() { }
	// RVA: 0x449680 Offset: 0x447E80 VA: 0x180449680
	public static float Dot(Vector3 lhs, Vector3 rhs) { }
	// RVA: 0x4496C0 Offset: 0x447EC0 VA: 0x1804496C0
	public static Vector3 Project(Vector3 vector, Vector3 onNormal) { }
	// RVA: 0x4498E0 Offset: 0x4480E0 VA: 0x1804498E0
	public static Vector3 ProjectOnPlane(Vector3 vector, Vector3 planeNormal) { }
	// RVA: 0x449AE0 Offset: 0x4482E0 VA: 0x180449AE0
	public static float Angle(Vector3 from, Vector3 to) { }
	// RVA: 0x449CF0 Offset: 0x4484F0 VA: 0x180449CF0
	public static float SignedAngle(Vector3 from, Vector3 to, Vector3 axis) { }
	// RVA: 0x449ED0 Offset: 0x4486D0 VA: 0x180449ED0
	public static float Distance(Vector3 a, Vector3 b) { }
	// RVA: 0x449FF0 Offset: 0x4487F0 VA: 0x180449FF0
	public static Vector3 ClampMagnitude(Vector3 vector, float maxLength) { }
	// RVA: 0x44A150 Offset: 0x448950 VA: 0x18044A150
	public static float Magnitude(Vector3 vector) { }
	// RVA: 0x16DF0 Offset: 0x161F0 VA: 0x180016DF0
	public float get_magnitude() { }
	// RVA: 0x44A320 Offset: 0x448B20 VA: 0x18044A320
	public static float SqrMagnitude(Vector3 vector) { }
	// RVA: 0x16E00 Offset: 0x16200 VA: 0x180016E00
	public float get_sqrMagnitude() { }
	// RVA: 0x44A370 Offset: 0x448B70 VA: 0x18044A370
	public static Vector3 Min(Vector3 lhs, Vector3 rhs) { }
	// RVA: 0x44A470 Offset: 0x448C70 VA: 0x18044A470
	public static Vector3 Max(Vector3 lhs, Vector3 rhs) { }
	// RVA: 0x44A570 Offset: 0x448D70 VA: 0x18044A570
	public static Vector3 get_zero() { }
	// RVA: 0x44A620 Offset: 0x448E20 VA: 0x18044A620
	public static Vector3 get_one() { }
	// RVA: 0x44A6E0 Offset: 0x448EE0 VA: 0x18044A6E0
	public static Vector3 get_forward() { }
	// RVA: 0x44A7A0 Offset: 0x448FA0 VA: 0x18044A7A0
	public static Vector3 get_back() { }
	// RVA: 0x44A860 Offset: 0x449060 VA: 0x18044A860
	public static Vector3 get_up() { }
	// RVA: 0x44A920 Offset: 0x449120 VA: 0x18044A920
	public static Vector3 get_down() { }
	// RVA: 0x44A9E0 Offset: 0x4491E0 VA: 0x18044A9E0
	public static Vector3 get_left() { }
	// RVA: 0x44AAA0 Offset: 0x4492A0 VA: 0x18044AAA0
	public static Vector3 get_right() { }
	// RVA: 0x197C40 Offset: 0x196440 VA: 0x180197C40
	public static Vector3 op_Addition(Vector3 a, Vector3 b) { }
	// RVA: 0x197BF0 Offset: 0x1963F0 VA: 0x180197BF0
	public static Vector3 op_Subtraction(Vector3 a, Vector3 b) { }
	// RVA: 0x44AB60 Offset: 0x449360 VA: 0x18044AB60
	public static Vector3 op_UnaryNegation(Vector3 a) { }
	// RVA: 0x44ABB0 Offset: 0x4493B0 VA: 0x18044ABB0
	public static Vector3 op_Multiply(Vector3 a, float d) { }
	// RVA: 0x44ABF0 Offset: 0x4493F0 VA: 0x18044ABF0
	public static Vector3 op_Multiply(float d, Vector3 a) { }
	// RVA: 0x243430 Offset: 0x241C30 VA: 0x180243430
	public static Vector3 op_Division(Vector3 a, float d) { }
	// RVA: 0x44AC40 Offset: 0x449440 VA: 0x18044AC40
	public static bool op_Equality(Vector3 lhs, Vector3 rhs) { }
	// RVA: 0x44ACB0 Offset: 0x4494B0 VA: 0x18044ACB0
	public static bool op_Inequality(Vector3 lhs, Vector3 rhs) { }
	// RVA: 0x16E30 Offset: 0x16230 VA: 0x180016E30 Slot: 3
	public override string ToString() { }
	// RVA: 0x16EF0 Offset: 0x162F0 VA: 0x180016EF0
	public string ToString(string format) { }
	// RVA: 0x16F00 Offset: 0x16300 VA: 0x180016F00 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x44B0B0 Offset: 0x4498B0 VA: 0x18044B0B0
	private static void .cctor() { }
	// RVA: 0x44B2C0 Offset: 0x449AC0 VA: 0x18044B2C0
	private static void Slerp_Injected(ref Vector3 a, ref Vector3 b, float t, out Vector3 ret) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xDCBE0 Offset: 0xDBFE0 VA: 0x1800DCBE0
[DefaultMemberAttribute] // RVA: 0xDCBE0 Offset: 0xDBFE0 VA: 0x1800DCBE0
public struct Quaternion : IEquatable<Quaternion>, IFormattable // TypeDefIndex: 1445
{
	// Fields
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	public float w; // 0xC
	private static readonly Quaternion identityQuaternion; // 0x0
	public const float kEpsilon = 1E-06; // 0x0

	// Properties
	public static Quaternion identity { get; }
	public Vector3 eulerAngles { get; set; }
	public Quaternion normalized { get; }

	// Methods
	// RVA: 0x4F3F90 Offset: 0x4F2790 VA: 0x1804F3F90
	public static Quaternion FromToRotation(Vector3 fromDirection, Vector3 toDirection) { }
	// RVA: 0x4F4080 Offset: 0x4F2880 VA: 0x1804F4080
	public static Quaternion Inverse(Quaternion rotation) { }
	// RVA: 0x4F4160 Offset: 0x4F2960 VA: 0x1804F4160
	public static Quaternion Slerp(Quaternion a, Quaternion b, float t) { }
	// RVA: 0x4F4260 Offset: 0x4F2A60 VA: 0x1804F4260
	public static Quaternion SlerpUnclamped(Quaternion a, Quaternion b, float t) { }
	// RVA: 0x4F4360 Offset: 0x4F2B60 VA: 0x1804F4360
	public static Quaternion Lerp(Quaternion a, Quaternion b, float t) { }
	// RVA: 0x4F4460 Offset: 0x4F2C60 VA: 0x1804F4460
	private static Quaternion Internal_FromEulerRad(Vector3 euler) { }
	// RVA: 0x4F4540 Offset: 0x4F2D40 VA: 0x1804F4540
	private static Vector3 Internal_ToEulerRad(Quaternion rotation) { }
	// RVA: 0x4F4620 Offset: 0x4F2E20 VA: 0x1804F4620
	public static Quaternion AngleAxis(float angle, Vector3 axis) { }
	// RVA: 0x4F4710 Offset: 0x4F2F10 VA: 0x1804F4710
	public static Quaternion LookRotation(Vector3 forward, Vector3 upwards) { }
	// RVA: 0x4F4800 Offset: 0x4F3000 VA: 0x1804F4800
	public static Quaternion LookRotation(Vector3 forward) { }
	// RVA: 0x4EC0 Offset: 0x42C0 VA: 0x180004EC0
	public void .ctor(float x, float y, float z, float w) { }
	// RVA: 0x4F49F0 Offset: 0x4F31F0 VA: 0x1804F49F0
	public static Quaternion get_identity() { }
	// RVA: 0x4F4AA0 Offset: 0x4F32A0 VA: 0x1804F4AA0
	public static Quaternion op_Multiply(Quaternion lhs, Quaternion rhs) { }
	// RVA: 0x4F4C50 Offset: 0x4F3450 VA: 0x1804F4C50
	public static Vector3 op_Multiply(Quaternion rotation, Vector3 point) { }
	// RVA: 0x4F4E40 Offset: 0x4F3640 VA: 0x1804F4E40
	private static bool IsEqualUsingDot(float dot) { }
	// RVA: 0x4F4E50 Offset: 0x4F3650 VA: 0x1804F4E50
	public static bool op_Equality(Quaternion lhs, Quaternion rhs) { }
	// RVA: 0x4F4F50 Offset: 0x4F3750 VA: 0x1804F4F50
	public static bool op_Inequality(Quaternion lhs, Quaternion rhs) { }
	// RVA: 0x44BEE0 Offset: 0x44A6E0 VA: 0x18044BEE0
	public static float Dot(Quaternion a, Quaternion b) { }
	// RVA: 0x4F50D0 Offset: 0x4F38D0 VA: 0x1804F50D0
	public static float Angle(Quaternion a, Quaternion b) { }
	// RVA: 0x4F5230 Offset: 0x4F3A30 VA: 0x1804F5230
	private static Vector3 Internal_MakePositive(Vector3 euler) { }
	// RVA: 0x1E390 Offset: 0x1D790 VA: 0x18001E390
	public Vector3 get_eulerAngles() { }
	// RVA: 0x1E3B0 Offset: 0x1D7B0 VA: 0x18001E3B0
	public void set_eulerAngles(Vector3 value) { }
	// RVA: 0x4F5740 Offset: 0x4F3F40 VA: 0x1804F5740
	public static Quaternion Euler(float x, float y, float z) { }
	// RVA: 0x4F5940 Offset: 0x4F4140 VA: 0x1804F5940
	public static Quaternion Euler(Vector3 euler) { }
	// RVA: 0x4F5B40 Offset: 0x4F4340 VA: 0x1804F5B40
	public static Quaternion Normalize(Quaternion q) { }
	// RVA: 0x1E3E0 Offset: 0x1D7E0 VA: 0x18001E3E0
	public Quaternion get_normalized() { }
	// RVA: 0x17170 Offset: 0x16570 VA: 0x180017170 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1E400 Offset: 0x1D800 VA: 0x18001E400 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x1E410 Offset: 0x1D810 VA: 0x18001E410 Slot: 4
	public bool Equals(Quaternion other) { }
	// RVA: 0x1E430 Offset: 0x1D830 VA: 0x18001E430 Slot: 3
	public override string ToString() { }
	// RVA: 0x1E4F0 Offset: 0x1D8F0 VA: 0x18001E4F0
	public string ToString(string format) { }
	// RVA: 0x1E500 Offset: 0x1D900 VA: 0x18001E500 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x4F6300 Offset: 0x4F4B00 VA: 0x1804F6300
	private static void .cctor() { }
	// RVA: 0x4F6380 Offset: 0x4F4B80 VA: 0x1804F6380
	private static void FromToRotation_Injected(ref Vector3 fromDirection, ref Vector3 toDirection, out Quaternion ret) { }
	// RVA: 0x4F63F0 Offset: 0x4F4BF0 VA: 0x1804F63F0
	private static void Inverse_Injected(ref Quaternion rotation, out Quaternion ret) { }
	// RVA: 0x4F6450 Offset: 0x4F4C50 VA: 0x1804F6450
	private static void Slerp_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret) { }
	// RVA: 0x4F64D0 Offset: 0x4F4CD0 VA: 0x1804F64D0
	private static void SlerpUnclamped_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret) { }
	// RVA: 0x4F6550 Offset: 0x4F4D50 VA: 0x1804F6550
	private static void Lerp_Injected(ref Quaternion a, ref Quaternion b, float t, out Quaternion ret) { }
	// RVA: 0x4F65D0 Offset: 0x4F4DD0 VA: 0x1804F65D0
	private static void Internal_FromEulerRad_Injected(ref Vector3 euler, out Quaternion ret) { }
	// RVA: 0x4F6630 Offset: 0x4F4E30 VA: 0x1804F6630
	private static void Internal_ToEulerRad_Injected(ref Quaternion rotation, out Vector3 ret) { }
	// RVA: 0x4F6690 Offset: 0x4F4E90 VA: 0x1804F6690
	private static void AngleAxis_Injected(float angle, ref Vector3 axis, out Quaternion ret) { }
	// RVA: 0x4F6700 Offset: 0x4F4F00 VA: 0x1804F6700
	private static void LookRotation_Injected(ref Vector3 forward, ref Vector3 upwards, out Quaternion ret) { }
}

// Namespace: UnityEngine
public struct Mathf // TypeDefIndex: 1446
{
	// Fields
	public static readonly float Epsilon; // 0xA15940

	// Methods
	// RVA: 0x551030 Offset: 0x54F830 VA: 0x180551030
	public static int ClosestPowerOfTwo(int value) { }
	// RVA: 0x551080 Offset: 0x54F880 VA: 0x180551080
	public static int NextPowerOfTwo(int value) { }
	// RVA: 0x5510D0 Offset: 0x54F8D0 VA: 0x1805510D0
	public static float GammaToLinearSpace(float value) { }
	// RVA: 0x551130 Offset: 0x54F930 VA: 0x180551130
	public static float PerlinNoise(float x, float y) { }
	// RVA: 0x5511A0 Offset: 0x54F9A0 VA: 0x1805511A0
	public static float Sin(float f) { }
	// RVA: 0x551240 Offset: 0x54FA40 VA: 0x180551240
	public static float Cos(float f) { }
	// RVA: 0x5512E0 Offset: 0x54FAE0 VA: 0x1805512E0
	public static float Tan(float f) { }
	// RVA: 0x551380 Offset: 0x54FB80 VA: 0x180551380
	public static float Acos(float f) { }
	// RVA: 0x551420 Offset: 0x54FC20 VA: 0x180551420
	public static float Atan(float f) { }
	// RVA: 0x5514C0 Offset: 0x54FCC0 VA: 0x1805514C0
	public static float Atan2(float y, float x) { }
	// RVA: 0x551580 Offset: 0x54FD80 VA: 0x180551580
	public static float Sqrt(float f) { }
	// RVA: 0x551620 Offset: 0x54FE20 VA: 0x180551620
	public static float Abs(float f) { }
	// RVA: 0x5516C0 Offset: 0x54FEC0 VA: 0x1805516C0
	public static int Abs(int value) { }
	// RVA: 0x551750 Offset: 0x54FF50 VA: 0x180551750
	public static float Min(float a, float b) { }
	// RVA: 0x551760 Offset: 0x54FF60 VA: 0x180551760
	public static int Min(int a, int b) { }
	// RVA: 0x551770 Offset: 0x54FF70 VA: 0x180551770
	public static float Max(float a, float b) { }
	// RVA: 0x551780 Offset: 0x54FF80 VA: 0x180551780
	public static int Max(int a, int b) { }
	// RVA: 0x551790 Offset: 0x54FF90 VA: 0x180551790
	public static float Pow(float f, float p) { }
	// RVA: 0x551850 Offset: 0x550050 VA: 0x180551850
	public static float Exp(float power) { }
	// RVA: 0x5518F0 Offset: 0x5500F0 VA: 0x1805518F0
	public static float Log(float f, float p) { }
	// RVA: 0x551B50 Offset: 0x550350 VA: 0x180551B50
	public static float Log(float f) { }
	// RVA: 0x551BF0 Offset: 0x5503F0 VA: 0x180551BF0
	public static float Ceil(float f) { }
	// RVA: 0x551C90 Offset: 0x550490 VA: 0x180551C90
	public static float Floor(float f) { }
	// RVA: 0x551D30 Offset: 0x550530 VA: 0x180551D30
	public static float Round(float f) { }
	// RVA: 0x551DD0 Offset: 0x5505D0 VA: 0x180551DD0
	public static int CeilToInt(float f) { }
	// RVA: 0x551E70 Offset: 0x550670 VA: 0x180551E70
	public static int FloorToInt(float f) { }
	// RVA: 0x551F10 Offset: 0x550710 VA: 0x180551F10
	public static int RoundToInt(float f) { }
	// RVA: 0x551FB0 Offset: 0x5507B0 VA: 0x180551FB0
	public static float Sign(float f) { }
	// RVA: 0x551FD0 Offset: 0x5507D0 VA: 0x180551FD0
	public static float Clamp(float value, float min, float max) { }
	// RVA: 0x551FF0 Offset: 0x5507F0 VA: 0x180551FF0
	public static int Clamp(int value, int min, int max) { }
	// RVA: 0x552010 Offset: 0x550810 VA: 0x180552010
	public static float Clamp01(float value) { }
	// RVA: 0x552030 Offset: 0x550830 VA: 0x180552030
	public static float Lerp(float a, float b, float t) { }
	// RVA: 0x552110 Offset: 0x550910 VA: 0x180552110
	public static float LerpAngle(float a, float b, float t) { }
	// RVA: 0x552230 Offset: 0x550A30 VA: 0x180552230
	public static bool Approximately(float a, float b) { }
	// RVA: 0x552320 Offset: 0x550B20 VA: 0x180552320
	public static float SmoothDamp(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed, float deltaTime) { }
	// RVA: 0x552500 Offset: 0x550D00 VA: 0x180552500
	public static float Repeat(float t, float length) { }
	// RVA: 0x5525D0 Offset: 0x550DD0 VA: 0x1805525D0
	public static float InverseLerp(float a, float b, float value) { }
	// RVA: 0x5526C0 Offset: 0x550EC0 VA: 0x1805526C0
	private static void .cctor() { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xDD170 Offset: 0xDC570 VA: 0x1800DD170
[RequiredByNativeCodeAttribute] // RVA: 0xDD170 Offset: 0xDC570 VA: 0x1800DD170
public struct Vector2 : IEquatable<Vector2>, IFormattable // TypeDefIndex: 1447
{
	// Fields
	public float x; // 0x0
	public float y; // 0x4
	private static readonly Vector2 zeroVector; // 0x0
	private static readonly Vector2 oneVector; // 0x8
	private static readonly Vector2 upVector; // 0x10
	private static readonly Vector2 downVector; // 0x18
	private static readonly Vector2 leftVector; // 0x20
	private static readonly Vector2 rightVector; // 0x28
	private static readonly Vector2 positiveInfinityVector; // 0x30
	private static readonly Vector2 negativeInfinityVector; // 0x38
	public const float kEpsilon = 1E-05; // 0x0
	public const float kEpsilonNormalSqrt = 1E-15; // 0x0

	// Properties
	public float Item { get; set; }
	public Vector2 normalized { get; }
	public float magnitude { get; }
	public float sqrMagnitude { get; }
	public static Vector2 zero { get; }
	public static Vector2 one { get; }
	public static Vector2 up { get; }
	public static Vector2 right { get; }

	// Methods
	// RVA: 0x16910 Offset: 0x15D10 VA: 0x180016910
	public float get_Item(int index) { }
	// RVA: 0x16920 Offset: 0x15D20 VA: 0x180016920
	public void set_Item(int index, float value) { }
	// RVA: 0x16930 Offset: 0x15D30 VA: 0x180016930
	public void .ctor(float x, float y) { }
	// RVA: 0x446F50 Offset: 0x445750 VA: 0x180446F50
	public static Vector2 Lerp(Vector2 a, Vector2 b, float t) { }
	// RVA: 0x447040 Offset: 0x445840 VA: 0x180447040
	public static Vector2 Scale(Vector2 a, Vector2 b) { }
	// RVA: 0x16940 Offset: 0x15D40 VA: 0x180016940
	public void Normalize() { }
	// RVA: 0x16950 Offset: 0x15D50 VA: 0x180016950
	public Vector2 get_normalized() { }
	// RVA: 0x16980 Offset: 0x15D80 VA: 0x180016980 Slot: 3
	public override string ToString() { }
	// RVA: 0x16A40 Offset: 0x15E40 VA: 0x180016A40 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x16A50 Offset: 0x15E50 VA: 0x180016A50 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x16A90 Offset: 0x15E90 VA: 0x180016A90 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x16AA0 Offset: 0x15EA0 VA: 0x180016AA0 Slot: 4
	public bool Equals(Vector2 other) { }
	// RVA: 0x447420 Offset: 0x445C20 VA: 0x180447420
	public static float Dot(Vector2 lhs, Vector2 rhs) { }
	// RVA: 0x16AD0 Offset: 0x15ED0 VA: 0x180016AD0
	public float get_magnitude() { }
	// RVA: 0x16AE0 Offset: 0x15EE0 VA: 0x180016AE0
	public float get_sqrMagnitude() { }
	// RVA: 0x447510 Offset: 0x445D10 VA: 0x180447510
	public static float Angle(Vector2 from, Vector2 to) { }
	// RVA: 0x4476F0 Offset: 0x445EF0 VA: 0x1804476F0
	public static float SignedAngle(Vector2 from, Vector2 to) { }
	// RVA: 0x447820 Offset: 0x446020 VA: 0x180447820
	public static float Distance(Vector2 a, Vector2 b) { }
	// RVA: 0x447900 Offset: 0x446100 VA: 0x180447900
	public static Vector2 ClampMagnitude(Vector2 vector, float maxLength) { }
	// RVA: 0x447A40 Offset: 0x446240 VA: 0x180447A40
	public static float SqrMagnitude(Vector2 a) { }
	// RVA: 0x447A60 Offset: 0x446260 VA: 0x180447A60
	public static Vector2 Min(Vector2 lhs, Vector2 rhs) { }
	// RVA: 0x447B10 Offset: 0x446310 VA: 0x180447B10
	public static Vector2 op_Addition(Vector2 a, Vector2 b) { }
	// RVA: 0x447B50 Offset: 0x446350 VA: 0x180447B50
	public static Vector2 op_Subtraction(Vector2 a, Vector2 b) { }
	// RVA: 0x447040 Offset: 0x445840 VA: 0x180447040
	public static Vector2 op_Multiply(Vector2 a, Vector2 b) { }
	// RVA: 0x447B90 Offset: 0x446390 VA: 0x180447B90
	public static Vector2 op_Division(Vector2 a, Vector2 b) { }
	// RVA: 0x447BD0 Offset: 0x4463D0 VA: 0x180447BD0
	public static Vector2 op_UnaryNegation(Vector2 a) { }
	// RVA: 0x447C00 Offset: 0x446400 VA: 0x180447C00
	public static Vector2 op_Multiply(Vector2 a, float d) { }
	// RVA: 0x447C30 Offset: 0x446430 VA: 0x180447C30
	public static Vector2 op_Multiply(float d, Vector2 a) { }
	// RVA: 0x447C60 Offset: 0x446460 VA: 0x180447C60
	public static Vector2 op_Division(Vector2 a, float d) { }
	// RVA: 0x447C90 Offset: 0x446490 VA: 0x180447C90
	public static bool op_Equality(Vector2 lhs, Vector2 rhs) { }
	// RVA: 0x447CE0 Offset: 0x4464E0 VA: 0x180447CE0
	public static bool op_Inequality(Vector2 lhs, Vector2 rhs) { }
	// RVA: 0x447DA0 Offset: 0x4465A0 VA: 0x180447DA0
	public static Vector2 op_Implicit(Vector3 v) { }
	// RVA: 0x447DC0 Offset: 0x4465C0 VA: 0x180447DC0
	public static Vector3 op_Implicit(Vector2 v) { }
	// RVA: 0x447E00 Offset: 0x446600 VA: 0x180447E00
	public static Vector2 get_zero() { }
	// RVA: 0x447EB0 Offset: 0x4466B0 VA: 0x180447EB0
	public static Vector2 get_one() { }
	// RVA: 0x447F60 Offset: 0x446760 VA: 0x180447F60
	public static Vector2 get_up() { }
	// RVA: 0x448010 Offset: 0x446810 VA: 0x180448010
	public static Vector2 get_right() { }
	// RVA: 0x4480C0 Offset: 0x4468C0 VA: 0x1804480C0
	private static void .cctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xDCBE0 Offset: 0xDBFE0 VA: 0x1800DCBE0
[DefaultMemberAttribute] // RVA: 0xDCBE0 Offset: 0xDBFE0 VA: 0x1800DCBE0
public struct Vector2Int : IEquatable<Vector2Int>, IFormattable // TypeDefIndex: 1448
{
	// Fields
	private int m_X; // 0x0
	private int m_Y; // 0x4
	private static readonly Vector2Int s_Zero; // 0x0
	private static readonly Vector2Int s_One; // 0x8
	private static readonly Vector2Int s_Up; // 0x10
	private static readonly Vector2Int s_Down; // 0x18
	private static readonly Vector2Int s_Left; // 0x20
	private static readonly Vector2Int s_Right; // 0x28

	// Properties
	public int x { get; set; }
	public int y { get; set; }

	// Methods
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060
	public int get_x() { }
	// RVA: 0x1ED0 Offset: 0x12D0 VA: 0x180001ED0
	public void set_x(int value) { }
	// RVA: 0x16070 Offset: 0x15470 VA: 0x180016070
	public int get_y() { }
	// RVA: 0x1EF0 Offset: 0x12F0 VA: 0x180001EF0
	public void set_y(int value) { }
	// RVA: 0x16B00 Offset: 0x15F00 VA: 0x180016B00
	public void .ctor(int x, int y) { }
	// RVA: 0x4481F0 Offset: 0x4469F0 VA: 0x1804481F0
	public static Vector2 op_Implicit(Vector2Int v) { }
	// RVA: 0x16B10 Offset: 0x15F10 VA: 0x180016B10 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x16BF0 Offset: 0x15FF0 VA: 0x180016BF0 Slot: 4
	public bool Equals(Vector2Int other) { }
	// RVA: 0x16C10 Offset: 0x16010 VA: 0x180016C10 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x16C20 Offset: 0x16020 VA: 0x180016C20 Slot: 3
	public override string ToString() { }
	// RVA: 0x16CE0 Offset: 0x160E0 VA: 0x180016CE0 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x4483B0 Offset: 0x446BB0 VA: 0x1804483B0
	private static void .cctor() { }
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[UsedByNativeCodeAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public struct Vector3Int : IEquatable<Vector3Int>, IFormattable // TypeDefIndex: 1449
{
	// Fields
	private int m_X; // 0x0
	private int m_Y; // 0x4
	private int m_Z; // 0x8
	private static readonly Vector3Int s_Zero; // 0x0
	private static readonly Vector3Int s_One; // 0xC
	private static readonly Vector3Int s_Up; // 0x18
	private static readonly Vector3Int s_Down; // 0x24
	private static readonly Vector3Int s_Left; // 0x30
	private static readonly Vector3Int s_Right; // 0x3C

	// Properties
	public int x { get; }
	public int y { get; }
	public int z { get; }

	// Methods
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060
	public int get_x() { }
	// RVA: 0x16070 Offset: 0x15470 VA: 0x180016070
	public int get_y() { }
	// RVA: 0x16080 Offset: 0x15480 VA: 0x180016080
	public int get_z() { }
	// RVA: 0x16F10 Offset: 0x16310 VA: 0x180016F10
	public void .ctor(int x, int y, int z) { }
	// RVA: 0x44B340 Offset: 0x449B40 VA: 0x18044B340
	public static bool op_Equality(Vector3Int lhs, Vector3Int rhs) { }
	// RVA: 0x16F20 Offset: 0x16320 VA: 0x180016F20 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x17000 Offset: 0x16400 VA: 0x180017000 Slot: 4
	public bool Equals(Vector3Int other) { }
	// RVA: 0x17030 Offset: 0x16430 VA: 0x180017030 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x17060 Offset: 0x16460 VA: 0x180017060 Slot: 3
	public override string ToString() { }
	// RVA: 0x17120 Offset: 0x16520 VA: 0x180017120 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x44B570 Offset: 0x449D70 VA: 0x18044B570
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDD1C0 Offset: 0xDC5C0 VA: 0x1800DD1C0
[DefaultMemberAttribute] // RVA: 0xDD1C0 Offset: 0xDC5C0 VA: 0x1800DD1C0
public struct Vector4 : IEquatable<Vector4>, IFormattable // TypeDefIndex: 1450
{
	// Fields
	public const float kEpsilon = 1E-05; // 0x0
	public float x; // 0x0
	public float y; // 0x4
	public float z; // 0x8
	public float w; // 0xC
	private static readonly Vector4 zeroVector; // 0x0
	private static readonly Vector4 oneVector; // 0x10
	private static readonly Vector4 positiveInfinityVector; // 0x20
	private static readonly Vector4 negativeInfinityVector; // 0x30

	// Properties
	public float Item { get; set; }
	public Vector4 normalized { get; }
	public float sqrMagnitude { get; }
	public static Vector4 zero { get; }
	public static Vector4 one { get; }

	// Methods
	// RVA: 0x17130 Offset: 0x16530 VA: 0x180017130
	public float get_Item(int index) { }
	// RVA: 0x17140 Offset: 0x16540 VA: 0x180017140
	public void set_Item(int index, float value) { }
	// RVA: 0x4EC0 Offset: 0x42C0 VA: 0x180004EC0
	public void .ctor(float x, float y, float z, float w) { }
	// RVA: 0x17150 Offset: 0x16550 VA: 0x180017150
	public void .ctor(float x, float y, float z) { }
	// RVA: 0x44B8C0 Offset: 0x44A0C0 VA: 0x18044B8C0
	public static Vector4 Lerp(Vector4 a, Vector4 b, float t) { }
	// RVA: 0x17170 Offset: 0x16570 VA: 0x180017170 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x17180 Offset: 0x16580 VA: 0x180017180 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x17190 Offset: 0x16590 VA: 0x180017190 Slot: 4
	public bool Equals(Vector4 other) { }
	// RVA: 0x44BBB0 Offset: 0x44A3B0 VA: 0x18044BBB0
	public static Vector4 Normalize(Vector4 a) { }
	// RVA: 0x171E0 Offset: 0x165E0 VA: 0x1800171E0
	public Vector4 get_normalized() { }
	// RVA: 0x44BEE0 Offset: 0x44A6E0 VA: 0x18044BEE0
	public static float Dot(Vector4 a, Vector4 b) { }
	// RVA: 0x44BF30 Offset: 0x44A730 VA: 0x18044BF30
	public static float Magnitude(Vector4 a) { }
	// RVA: 0x17200 Offset: 0x16600 VA: 0x180017200
	public float get_sqrMagnitude() { }
	// RVA: 0x44C120 Offset: 0x44A920 VA: 0x18044C120
	public static Vector4 get_zero() { }
	// RVA: 0x44C1D0 Offset: 0x44A9D0 VA: 0x18044C1D0
	public static Vector4 get_one() { }
	// RVA: 0x44C280 Offset: 0x44AA80 VA: 0x18044C280
	public static Vector4 op_Multiply(Vector4 a, float d) { }
	// RVA: 0x44C2C0 Offset: 0x44AAC0 VA: 0x18044C2C0
	public static Vector4 op_Division(Vector4 a, float d) { }
	// RVA: 0x44C2E0 Offset: 0x44AAE0 VA: 0x18044C2E0
	public static bool op_Equality(Vector4 lhs, Vector4 rhs) { }
	// RVA: 0x44C340 Offset: 0x44AB40 VA: 0x18044C340
	public static bool op_Inequality(Vector4 lhs, Vector4 rhs) { }
	// RVA: 0x44C440 Offset: 0x44AC40 VA: 0x18044C440
	public static Vector4 op_Implicit(Vector3 v) { }
	// RVA: 0x44C490 Offset: 0x44AC90 VA: 0x18044C490
	public static Vector3 op_Implicit(Vector4 v) { }
	// RVA: 0x44C4C0 Offset: 0x44ACC0 VA: 0x18044C4C0
	public static Vector4 op_Implicit(Vector2 v) { }
	// RVA: 0x17210 Offset: 0x16610 VA: 0x180017210 Slot: 3
	public override string ToString() { }
	// RVA: 0x172D0 Offset: 0x166D0 VA: 0x1800172D0 Slot: 5
	public string ToString(string format, IFormatProvider formatProvider) { }
	// RVA: 0x44C7A0 Offset: 0x44AFA0 VA: 0x18044C7A0
	private static void .cctor() { }
}

// Namespace: UnityEngine
internal interface IPlayerEditorConnectionNative // TypeDefIndex: 1451
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Initialize() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void DisconnectAll() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void SendMessage(Guid messageId, byte[] data, int playerId) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool TrySendMessage(Guid messageId, byte[] data, int playerId) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Poll() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract void RegisterInternal(Guid messageId) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract void UnregisterInternal(Guid messageId) { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool IsConnected() { }
}

// Namespace: UnityEngine
internal class PlayerConnectionInternal : IPlayerEditorConnectionNative // TypeDefIndex: 1452
{
	// Methods
	// RVA: 0x4F28C0 Offset: 0x4F10C0 VA: 0x1804F28C0 Slot: 6
	private void UnityEngine.IPlayerEditorConnectionNative.SendMessage(Guid messageId, byte[] data, int playerId) { }
	// RVA: 0x4F2A30 Offset: 0x4F1230 VA: 0x1804F2A30 Slot: 7
	private bool UnityEngine.IPlayerEditorConnectionNative.TrySendMessage(Guid messageId, byte[] data, int playerId) { }
	// RVA: 0x4F2BA0 Offset: 0x4F13A0 VA: 0x1804F2BA0 Slot: 8
	private void UnityEngine.IPlayerEditorConnectionNative.Poll() { }
	// RVA: 0x4F2BF0 Offset: 0x4F13F0 VA: 0x1804F2BF0 Slot: 9
	private void UnityEngine.IPlayerEditorConnectionNative.RegisterInternal(Guid messageId) { }
	// RVA: 0x4F2CB0 Offset: 0x4F14B0 VA: 0x1804F2CB0 Slot: 10
	private void UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal(Guid messageId) { }
	// RVA: 0x4F2D70 Offset: 0x4F1570 VA: 0x1804F2D70 Slot: 4
	private void UnityEngine.IPlayerEditorConnectionNative.Initialize() { }
	// RVA: 0x4F2DC0 Offset: 0x4F15C0 VA: 0x1804F2DC0 Slot: 11
	private bool UnityEngine.IPlayerEditorConnectionNative.IsConnected() { }
	// RVA: 0x4F2E10 Offset: 0x4F1610 VA: 0x1804F2E10 Slot: 5
	private void UnityEngine.IPlayerEditorConnectionNative.DisconnectAll() { }
	// RVA: 0x4F2DC0 Offset: 0x4F15C0 VA: 0x1804F2DC0
	private static bool IsConnected() { }
	// RVA: 0x4F2D70 Offset: 0x4F1570 VA: 0x1804F2D70
	private static void Initialize() { }
	// RVA: 0x4F2E60 Offset: 0x4F1660 VA: 0x1804F2E60
	private static void RegisterInternal(string messageId) { }
	// RVA: 0x4F2EB0 Offset: 0x4F16B0 VA: 0x1804F2EB0
	private static void UnregisterInternal(string messageId) { }
	// RVA: 0x4F2F00 Offset: 0x4F1700 VA: 0x1804F2F00
	private static void SendMessage(string messageId, byte[] data, int playerId) { }
	// RVA: 0x4F2F70 Offset: 0x4F1770 VA: 0x1804F2F70
	private static bool TrySendMessage(string messageId, byte[] data, int playerId) { }
	// RVA: 0x4F2BA0 Offset: 0x4F13A0 VA: 0x1804F2BA0
	private static void PollInternal() { }
	// RVA: 0x4F2E10 Offset: 0x4F1610 VA: 0x1804F2E10
	private static void DisconnectAll() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
public class PlayerPrefsException : Exception // TypeDefIndex: 1453
{
	// Methods
	// RVA: 0x4F3DB0 Offset: 0x4F25B0 VA: 0x1804F3DB0
	public void .ctor(string error) { }
}

// Namespace: UnityEngine
public class PlayerPrefs // TypeDefIndex: 1454
{
	// Methods
	// RVA: 0x4F3780 Offset: 0x4F1F80 VA: 0x1804F3780
	private static bool TrySetInt(string key, int value) { }
	// RVA: 0x4F37E0 Offset: 0x4F1FE0 VA: 0x1804F37E0
	private static bool TrySetFloat(string key, float value) { }
	// RVA: 0x4F3840 Offset: 0x4F2040 VA: 0x1804F3840
	private static bool TrySetSetString(string key, string value) { }
	// RVA: 0x4F38A0 Offset: 0x4F20A0 VA: 0x1804F38A0
	public static void SetInt(string key, int value) { }
	// RVA: 0x4F3990 Offset: 0x4F2190 VA: 0x1804F3990
	public static int GetInt(string key, int defaultValue) { }
	// RVA: 0x4F39F0 Offset: 0x4F21F0 VA: 0x1804F39F0
	public static int GetInt(string key) { }
	// RVA: 0x4F3A50 Offset: 0x4F2250 VA: 0x1804F3A50
	public static void SetFloat(string key, float value) { }
	// RVA: 0x4F3B40 Offset: 0x4F2340 VA: 0x1804F3B40
	public static float GetFloat(string key, float defaultValue) { }
	// RVA: 0x4F3BA0 Offset: 0x4F23A0 VA: 0x1804F3BA0
	public static void SetString(string key, string value) { }
	// RVA: 0x4F3C90 Offset: 0x4F2490 VA: 0x1804F3C90
	public static string GetString(string key, string defaultValue) { }
	// RVA: 0x4F3CF0 Offset: 0x4F24F0 VA: 0x1804F3CF0
	public static string GetString(string key) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PropertyName : IEquatable<PropertyName> // TypeDefIndex: 1455
{
	// Fields
	internal int id; // 0x0

	// Methods
	// RVA: 0x4F3EE0 Offset: 0x4F26E0 VA: 0x1804F3EE0
	public static bool op_Equality(PropertyName lhs, PropertyName rhs) { }
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1E1F0 Offset: 0x1D5F0 VA: 0x18001E1F0 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x1E2B0 Offset: 0x1D6B0 VA: 0x18001E2B0 Slot: 4
	public bool Equals(PropertyName other) { }
	// RVA: 0x1E2C0 Offset: 0x1D6C0 VA: 0x18001E2C0 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine
public sealed class Random // TypeDefIndex: 1456
{
	// Properties
	public static float value { get; }
	public static Quaternion rotation { get; }

	// Methods
	// RVA: 0x4F6770 Offset: 0x4F4F70 VA: 0x1804F6770
	public static float Range(float min, float max) { }
	// RVA: 0x4F67E0 Offset: 0x4F4FE0 VA: 0x1804F67E0
	public static int Range(int min, int max) { }
	// RVA: 0x4F67E0 Offset: 0x4F4FE0 VA: 0x1804F67E0
	private static int RandomRangeInt(int min, int max) { }
	// RVA: 0x4F6840 Offset: 0x4F5040 VA: 0x1804F6840
	public static float get_value() { }
	// RVA: 0x4F6890 Offset: 0x4F5090 VA: 0x1804F6890
	public static Quaternion get_rotation() { }
	// RVA: 0x4F68F0 Offset: 0x4F50F0 VA: 0x1804F68F0
	private static void get_rotation_Injected(out Quaternion ret) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class ResourceRequest : AsyncOperation // TypeDefIndex: 1457
{
	// Fields
	internal string m_Path; // 0x20
	internal Type m_Type; // 0x28
}

// Namespace: UnityEngine
public sealed class Resources // TypeDefIndex: 1458
{
	// Methods
	// RVA: 0x4288B0 Offset: 0x4270B0 VA: 0x1804288B0
	internal static T[] ConvertObjects(Object[] rawObjects) { }
	// RVA: 0x428B70 Offset: 0x427370 VA: 0x180428B70
	public static T Load(string path) { }
	// RVA: 0x4350D0 Offset: 0x4338D0 VA: 0x1804350D0
	public static Object Load(string path, Type systemTypeInstance) { }
	// RVA: 0x435130 Offset: 0x433930 VA: 0x180435130
	public static Object GetBuiltinResource(Type type, string path) { }
	// RVA: 0x428A30 Offset: 0x427230 VA: 0x180428A30
	public static T GetBuiltinResource(string path) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class AsyncOperation : YieldInstruction // TypeDefIndex: 1459
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private Action<AsyncOperation> m_completeCallback; // 0x18

	// Properties
	public bool isDone { get; }
	public float progress { get; }
	public bool allowSceneActivation { set; }

	// Methods
	// RVA: 0x537AF0 Offset: 0x5362F0 VA: 0x180537AF0
	private static void InternalDestroy(IntPtr ptr) { }
	// RVA: 0x537B40 Offset: 0x536340 VA: 0x180537B40
	public bool get_isDone() { }
	// RVA: 0x537B90 Offset: 0x536390 VA: 0x180537B90
	public float get_progress() { }
	// RVA: 0x537BE0 Offset: 0x5363E0 VA: 0x180537BE0
	public void set_allowSceneActivation(bool value) { }
	// RVA: 0x537C40 Offset: 0x536440 VA: 0x180537C40 Slot: 1
	protected override void Finalize() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x537D00 Offset: 0x536500 VA: 0x180537D00
	internal void InvokeCompletionEvent() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
internal class AttributeHelperEngine // TypeDefIndex: 1460
{
	// Fields
	public static DisallowMultipleComponent[] _disallowMultipleComponentArray; // 0x0
	public static ExecuteInEditMode[] _executeInEditModeArray; // 0x8
	public static RequireComponent[] _requireComponentArray; // 0x10

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x537D90 Offset: 0x536590 VA: 0x180537D90
	private static Type GetParentTypeDisallowingMultipleInclusion(Type type) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x537EC0 Offset: 0x5366C0 VA: 0x180537EC0
	private static Type[] GetRequiredComponents(Type klass) { }
	// RVA: 0x538290 Offset: 0x536A90 VA: 0x180538290
	private static int GetExecuteMode(Type klass) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5383E0 Offset: 0x536BE0 VA: 0x1805383E0
	private static int CheckIsEditorScript(Type klass) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5384E0 Offset: 0x536CE0 VA: 0x1805384E0
	private static int GetDefaultExecutionOrderFor(Type klass) { }
	// RVA: 0x52D8F0 Offset: 0x52C0F0 VA: 0x18052D8F0
	private static T GetCustomAttributeOfType(Type klass) { }
	// RVA: 0x538680 Offset: 0x536E80 VA: 0x180538680
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDD200 Offset: 0xDC600 VA: 0x1800DD200
[AttributeUsageAttribute] // RVA: 0xDD200 Offset: 0xDC600 VA: 0x1800DD200
public sealed class DisallowMultipleComponent : Attribute // TypeDefIndex: 1461
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDD220 Offset: 0xDC620 VA: 0x1800DD220
[AttributeUsageAttribute] // RVA: 0xDD220 Offset: 0xDC620 VA: 0x1800DD220
public sealed class RequireComponent : Attribute // TypeDefIndex: 1462
{
	// Fields
	public Type m_Type0; // 0x10
	public Type m_Type1; // 0x18
	public Type m_Type2; // 0x20

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(Type requiredComponent) { }
	// RVA: 0x25B970 Offset: 0x25A170 VA: 0x18025B970
	public void .ctor(Type requiredComponent, Type requiredComponent2) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xDD240 Offset: 0xDC640 VA: 0x1800DD240
[RequiredByNativeCodeAttribute] // RVA: 0xDD240 Offset: 0xDC640 VA: 0x1800DD240
public sealed class ContextMenu : Attribute // TypeDefIndex: 1463
{
	// Fields
	public readonly string menuItem; // 0x10
	public readonly bool validate; // 0x18
	public readonly int priority; // 0x1C

	// Methods
	// RVA: 0x5420B0 Offset: 0x5408B0 VA: 0x1805420B0
	public void .ctor(string itemName) { }
	// RVA: 0x5420C0 Offset: 0x5408C0 VA: 0x1805420C0
	public void .ctor(string itemName, bool isValidateFunction) { }
	// RVA: 0x5420D0 Offset: 0x5408D0 VA: 0x1805420D0
	public void .ctor(string itemName, bool isValidateFunction, int priority) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class ExecuteInEditMode : Attribute // TypeDefIndex: 1464
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class ExecuteAlways : Attribute // TypeDefIndex: 1465
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xD9D50 Offset: 0xD9150 VA: 0x1800D9D50
[UsedByNativeCodeAttribute] // RVA: 0xD9D50 Offset: 0xD9150 VA: 0x1800D9D50
public class DefaultExecutionOrder : Attribute // TypeDefIndex: 1466
{
	// Fields
	private int m_Order; // 0x10

	// Properties
	public int order { get; }

	// Methods
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int order) { }
	// RVA: 0x440EE0 Offset: 0x43F6E0 VA: 0x180440EE0
	public int get_order() { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xDB480 Offset: 0xDA880 VA: 0x1800DB480
[RequiredByNativeCodeAttribute] // RVA: 0xDB480 Offset: 0xDA880 VA: 0x1800DB480
public class AssemblyIsEditorAssembly : Attribute // TypeDefIndex: 1467
{}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class Behaviour : Component // TypeDefIndex: 1468
{
	// Properties
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public bool enabled { get; set; }
	public bool isActiveAndEnabled { get; }

	// Methods
	// RVA: 0x22BFA0 Offset: 0x22A7A0 VA: 0x18022BFA0
	public bool get_enabled() { }
	// RVA: 0x538EA0 Offset: 0x5376A0 VA: 0x180538EA0
	public void set_enabled(bool value) { }
	// RVA: 0x4D7EE0 Offset: 0x4D66E0 VA: 0x1804D7EE0
	public bool get_isActiveAndEnabled() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: UnityEngine
internal struct CastHelper<T> // TypeDefIndex: 1469
{
	// Fields
	public T t; // 0x0
	public IntPtr onePointerFurtherThanT; // 0x0
}

// Namespace: UnityEngine
internal static class ClassLibraryInitializer // TypeDefIndex: 1470
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x53C9E0 Offset: 0x53B1E0 VA: 0x18053C9E0
	private static void Init() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class Component : Object // TypeDefIndex: 1471
{
	// Properties
	public Transform transform { get; }
	public GameObject gameObject { get; }
	public string tag { get; }

	// Methods
	// RVA: 0x1BF8A0 Offset: 0x1BE0A0 VA: 0x1801BF8A0
	public Transform get_transform() { }
	// RVA: 0x2950F0 Offset: 0x2938F0 VA: 0x1802950F0
	public GameObject get_gameObject() { }
	// RVA: 0x540900 Offset: 0x53F100 VA: 0x180540900
	public Component GetComponent(Type type) { }
	// RVA: 0x5409B0 Offset: 0x53F1B0 VA: 0x1805409B0
	internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue) { }
	// RVA: 0x52EF70 Offset: 0x52D770 VA: 0x18052EF70
	public T GetComponent() { }
	// RVA: 0x540A20 Offset: 0x53F220 VA: 0x180540A20
	public Component GetComponent(string type) { }
	// RVA: 0x540A80 Offset: 0x53F280 VA: 0x180540A80
	public Component GetComponentInChildren(Type t, bool includeInactive) { }
	// RVA: 0x52F080 Offset: 0x52D880 VA: 0x18052F080
	public T GetComponentInChildren() { }
	// RVA: 0x52F520 Offset: 0x52DD20 VA: 0x18052F520
	public T[] GetComponentsInChildren(bool includeInactive) { }
	// RVA: 0x52F5E0 Offset: 0x52DDE0 VA: 0x18052F5E0
	public void GetComponentsInChildren(bool includeInactive, List<T> result) { }
	// RVA: 0x52F4F0 Offset: 0x52DCF0 VA: 0x18052F4F0
	public T[] GetComponentsInChildren() { }
	// RVA: 0x52F5B0 Offset: 0x52DDB0 VA: 0x18052F5B0
	public void GetComponentsInChildren(List<T> results) { }
	// RVA: 0x540B10 Offset: 0x53F310 VA: 0x180540B10
	public Component GetComponentInParent(Type t) { }
	// RVA: 0x52F1F0 Offset: 0x52D9F0 VA: 0x18052F1F0
	public T GetComponentInParent() { }
	// RVA: 0x52F520 Offset: 0x52DD20 VA: 0x18052F520
	public T[] GetComponentsInParent(bool includeInactive) { }
	// RVA: 0x52F5E0 Offset: 0x52DDE0 VA: 0x18052F5E0
	public void GetComponentsInParent(bool includeInactive, List<T> results) { }
	// RVA: 0x52F4F0 Offset: 0x52DCF0 VA: 0x18052F4F0
	public T[] GetComponentsInParent() { }
	// RVA: 0x540BC0 Offset: 0x53F3C0 VA: 0x180540BC0
	private void GetComponentsForListInternal(Type searchType, object resultList) { }
	// RVA: 0x540C30 Offset: 0x53F430 VA: 0x180540C30
	public void GetComponents(Type type, List<Component> results) { }
	// RVA: 0x52F420 Offset: 0x52DC20 VA: 0x18052F420
	public void GetComponents(List<T> results) { }
	// RVA: 0x540C40 Offset: 0x53F440 VA: 0x180540C40
	public string get_tag() { }
	// RVA: 0x52F3A0 Offset: 0x52DBA0 VA: 0x18052F3A0
	public T[] GetComponents() { }
	// RVA: 0x540CE0 Offset: 0x53F4E0 VA: 0x180540CE0
	public bool CompareTag(string tag) { }
	// RVA: 0x540D90 Offset: 0x53F590 VA: 0x180540D90
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class Coroutine : YieldInstruction // TypeDefIndex: 1472
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x5420E0 Offset: 0x5408E0 VA: 0x1805420E0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x5421A0 Offset: 0x5409A0 VA: 0x1805421A0
	private static void ReleaseCoroutine(IntPtr ptr) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal class SetupCoroutine // TypeDefIndex: 1473
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x437640 Offset: 0x435E40 VA: 0x180437640
	public static void InvokeMoveNext(IEnumerator enumerator, IntPtr returnValueAddress) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x437710 Offset: 0x435F10 VA: 0x180437710
	public static object InvokeMember(object behaviour, string name, object variable) { }
}

// Namespace: UnityEngine
public abstract class CustomYieldInstruction : IEnumerator // TypeDefIndex: 1474
{
	// Properties
	public abstract bool keepWaiting { get; }
	public object Current { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_keepWaiting() { }
	// RVA: 0x543480 Offset: 0x541C80 VA: 0x180543480 Slot: 5
	public object get_Current() { }
	// RVA: 0x2BF580 Offset: 0x2BDD80 VA: 0x1802BF580 Slot: 4
	public bool MoveNext() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	public virtual void Reset() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDD260 Offset: 0xDC660 VA: 0x1800DD260
[AttributeUsageAttribute] // RVA: 0xDD260 Offset: 0xDC660 VA: 0x1800DD260
internal sealed class ExtensionOfNativeClassAttribute : Attribute // TypeDefIndex: 1475
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal class FailedToLoadScriptObject : Object // TypeDefIndex: 1476
{}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class GameObject : Object // TypeDefIndex: 1477
{
	// Properties
	public Transform transform { get; }
	public int layer { get; set; }
	public bool activeSelf { get; }
	public bool activeInHierarchy { get; }
	public bool isStatic { get; }
	public string tag { get; }
	public Scene scene { get; }
	public GameObject gameObject { get; }

	// Methods
	// RVA: 0x545880 Offset: 0x544080 VA: 0x180545880
	public static GameObject CreatePrimitive(PrimitiveType type) { }
	// RVA: 0x5338B0 Offset: 0x5320B0 VA: 0x1805338B0
	public T GetComponent() { }
	// RVA: 0x5458D0 Offset: 0x5440D0 VA: 0x1805458D0
	public Component GetComponent(Type type) { }
	// RVA: 0x545930 Offset: 0x544130 VA: 0x180545930
	internal void GetComponentFastPath(Type type, IntPtr oneFurtherThanResultValue) { }
	// RVA: 0x5459A0 Offset: 0x5441A0 VA: 0x1805459A0
	internal Component GetComponentByName(string type) { }
	// RVA: 0x5459A0 Offset: 0x5441A0 VA: 0x1805459A0
	public Component GetComponent(string type) { }
	// RVA: 0x545A00 Offset: 0x544200 VA: 0x180545A00
	public Component GetComponentInChildren(Type type, bool includeInactive) { }
	// RVA: 0x52F4F0 Offset: 0x52DCF0 VA: 0x18052F4F0
	public T GetComponentInChildren() { }
	// RVA: 0x5339C0 Offset: 0x5321C0 VA: 0x1805339C0
	public T GetComponentInChildren(bool includeInactive) { }
	// RVA: 0x545A70 Offset: 0x544270 VA: 0x180545A70
	public Component GetComponentInParent(Type type, bool includeInactive) { }
	// RVA: 0x545AE0 Offset: 0x5442E0 VA: 0x180545AE0
	public Component GetComponentInParent(Type type) { }
	// RVA: 0x545B50 Offset: 0x544350 VA: 0x180545B50
	private Array GetComponentsInternal(Type type, bool useSearchTypeAsArrayReturnType, bool recursive, bool includeInactive, bool reverse, object resultList) { }
	// RVA: 0x533AF0 Offset: 0x5322F0 VA: 0x180533AF0
	public T[] GetComponents() { }
	// RVA: 0x533C60 Offset: 0x532460 VA: 0x180533C60
	public void GetComponents(List<T> results) { }
	// RVA: 0x533D80 Offset: 0x532580 VA: 0x180533D80
	public T[] GetComponentsInChildren(bool includeInactive) { }
	// RVA: 0x533F00 Offset: 0x532700 VA: 0x180533F00
	public void GetComponentsInChildren(bool includeInactive, List<T> results) { }
	// RVA: 0x52F4F0 Offset: 0x52DCF0 VA: 0x18052F4F0
	public T[] GetComponentsInChildren() { }
	// RVA: 0x5341B0 Offset: 0x5329B0 VA: 0x1805341B0
	public void GetComponentsInParent(bool includeInactive, List<T> results) { }
	// RVA: 0x534030 Offset: 0x532830 VA: 0x180534030
	public T[] GetComponentsInParent(bool includeInactive) { }
	// RVA: 0x545BF0 Offset: 0x5443F0 VA: 0x180545BF0
	private Component Internal_AddComponentWithType(Type componentType) { }
	// RVA: 0x545BF0 Offset: 0x5443F0 VA: 0x180545BF0
	public Component AddComponent(Type componentType) { }
	// RVA: 0x533720 Offset: 0x531F20 VA: 0x180533720
	public T AddComponent() { }
	// RVA: 0x545C50 Offset: 0x544450 VA: 0x180545C50
	public Transform get_transform() { }
	// RVA: 0x545CA0 Offset: 0x5444A0 VA: 0x180545CA0
	public int get_layer() { }
	// RVA: 0x545CF0 Offset: 0x5444F0 VA: 0x180545CF0
	public void set_layer(int value) { }
	// RVA: 0x545D50 Offset: 0x544550 VA: 0x180545D50
	public void SetActive(bool value) { }
	// RVA: 0x545DB0 Offset: 0x5445B0 VA: 0x180545DB0
	public bool get_activeSelf() { }
	// RVA: 0x545E00 Offset: 0x544600 VA: 0x180545E00
	public bool get_activeInHierarchy() { }
	// RVA: 0x545E50 Offset: 0x544650 VA: 0x180545E50
	public bool get_isStatic() { }
	// RVA: 0x545EA0 Offset: 0x5446A0 VA: 0x180545EA0
	public string get_tag() { }
	// RVA: 0x545EF0 Offset: 0x5446F0 VA: 0x180545EF0
	public bool CompareTag(string tag) { }
	// RVA: 0x545F50 Offset: 0x544750 VA: 0x180545F50
	public void SendMessage(string methodName, object value, SendMessageOptions options) { }
	// RVA: 0x545FD0 Offset: 0x5447D0 VA: 0x180545FD0
	public void .ctor(string name) { }
	// RVA: 0x5460B0 Offset: 0x5448B0 VA: 0x1805460B0
	public void .ctor() { }
	// RVA: 0x546180 Offset: 0x544980 VA: 0x180546180
	public void .ctor(string name, Type[] components) { }
	// RVA: 0x5462F0 Offset: 0x544AF0 VA: 0x1805462F0
	private static void Internal_CreateGameObject(GameObject self, string name) { }
	// RVA: 0x546350 Offset: 0x544B50 VA: 0x180546350
	public static GameObject Find(string name) { }
	// RVA: 0x5463A0 Offset: 0x544BA0 VA: 0x1805463A0
	public Scene get_scene() { }
	// RVA: 0x546400 Offset: 0x544C00 VA: 0x180546400
	public GameObject get_gameObject() { }
	// RVA: 0x546410 Offset: 0x544C10 VA: 0x180546410
	private void get_scene_Injected(out Scene ret) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDCCC0 Offset: 0xDC0C0 VA: 0x1800DCCC0
public struct LayerMask // TypeDefIndex: 1478
{
	// Fields
	private int m_Mask; // 0x0

	// Properties
	public int value { get; }

	// Methods
	// RVA: 0x54A660 Offset: 0x548E60 VA: 0x18054A660
	public static int op_Implicit(LayerMask mask) { }
	// RVA: 0x54A660 Offset: 0x548E60 VA: 0x18054A660
	public static LayerMask op_Implicit(int intVal) { }
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060
	public int get_value() { }
	// RVA: 0x54A670 Offset: 0x548E70 VA: 0x18054A670
	public static string LayerToName(int layer) { }
}

// Namespace: UnityEngine
internal static class ManagedStreamHelpers // TypeDefIndex: 1479
{
	// Methods
	// RVA: 0x54D790 Offset: 0x54BF90 VA: 0x18054D790
	internal static void ValidateLoadFromStream(Stream stream) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x54D8E0 Offset: 0x54C0E0 VA: 0x18054D8E0
	internal static void ManagedStreamRead(byte[] buffer, int offset, int count, Stream stream, IntPtr returnValueAddress) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x54DA00 Offset: 0x54C200 VA: 0x18054DA00
	internal static void ManagedStreamSeek(long offset, uint origin, Stream stream, IntPtr returnValueAddress) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x54DB00 Offset: 0x54C300 VA: 0x18054DB00
	internal static void ManagedStreamLength(Stream stream, IntPtr returnValueAddress) { }
}

// Namespace: UnityEngine
[ExtensionOfNativeClassAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class MonoBehaviour : Behaviour // TypeDefIndex: 1480
{
	// Methods
	// RVA: 0x4E7CB0 Offset: 0x4E64B0 VA: 0x1804E7CB0
	public bool IsInvoking() { }
	// RVA: 0x4E7D00 Offset: 0x4E6500 VA: 0x1804E7D00
	public void CancelInvoke() { }
	// RVA: 0x4E7D50 Offset: 0x4E6550 VA: 0x1804E7D50
	public void Invoke(string methodName, float time) { }
	// RVA: 0x4E7D70 Offset: 0x4E6570 VA: 0x1804E7D70
	public void InvokeRepeating(string methodName, float time, float repeatRate) { }
	// RVA: 0x4E7E80 Offset: 0x4E6680 VA: 0x1804E7E80
	public void CancelInvoke(string methodName) { }
	// RVA: 0x4E7EE0 Offset: 0x4E66E0 VA: 0x1804E7EE0
	public bool IsInvoking(string methodName) { }
	// RVA: 0x4E7F40 Offset: 0x4E6740 VA: 0x1804E7F40
	public Coroutine StartCoroutine(string methodName) { }
	// RVA: 0x4E80C0 Offset: 0x4E68C0 VA: 0x1804E80C0
	public Coroutine StartCoroutine(string methodName, object value) { }
	// RVA: 0x4E8250 Offset: 0x4E6A50 VA: 0x1804E8250
	public Coroutine StartCoroutine(IEnumerator routine) { }
	[ObsoleteAttribute] // RVA: 0xDD280 Offset: 0xDC680 VA: 0x1800DD280
	// RVA: 0x4E83C0 Offset: 0x4E6BC0 VA: 0x1804E83C0
	public Coroutine StartCoroutine_Auto(IEnumerator routine) { }
	// RVA: 0x4E83D0 Offset: 0x4E6BD0 VA: 0x1804E83D0
	public void StopCoroutine(IEnumerator routine) { }
	// RVA: 0x4E8540 Offset: 0x4E6D40 VA: 0x1804E8540
	public void StopCoroutine(Coroutine routine) { }
	// RVA: 0x4E86B0 Offset: 0x4E6EB0 VA: 0x1804E86B0
	public void StopAllCoroutines() { }
	// RVA: 0x4E8700 Offset: 0x4E6F00 VA: 0x1804E8700
	public static void print(object message) { }
	// RVA: 0x4E7D00 Offset: 0x4E6500 VA: 0x1804E7D00
	private static void Internal_CancelInvokeAll(MonoBehaviour self) { }
	// RVA: 0x4E7CB0 Offset: 0x4E64B0 VA: 0x1804E7CB0
	private static bool Internal_IsInvokingAll(MonoBehaviour self) { }
	// RVA: 0x4E8790 Offset: 0x4E6F90 VA: 0x1804E8790
	private static void InvokeDelayed(MonoBehaviour self, string methodName, float time, float repeatRate) { }
	// RVA: 0x4E7E80 Offset: 0x4E6680 VA: 0x1804E7E80
	private static void CancelInvoke(MonoBehaviour self, string methodName) { }
	// RVA: 0x4E7EE0 Offset: 0x4E66E0 VA: 0x1804E7EE0
	private static bool IsInvoking(MonoBehaviour self, string methodName) { }
	// RVA: 0x4E8810 Offset: 0x4E7010 VA: 0x1804E8810
	private static bool IsObjectMonoBehaviour(Object obj) { }
	// RVA: 0x4E8860 Offset: 0x4E7060 VA: 0x1804E8860
	private Coroutine StartCoroutineManaged(string methodName, object value) { }
	// RVA: 0x4E88D0 Offset: 0x4E70D0 VA: 0x1804E88D0
	private Coroutine StartCoroutineManaged2(IEnumerator enumerator) { }
	// RVA: 0x4E8930 Offset: 0x4E7130 VA: 0x1804E8930
	private void StopCoroutineManaged(Coroutine routine) { }
	// RVA: 0x4E8990 Offset: 0x4E7190 VA: 0x1804E8990
	private void StopCoroutineFromEnumeratorManaged(IEnumerator routine) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: UnityEngine
internal sealed class NoAllocHelpers // TypeDefIndex: 1481
{
	// Methods
	// RVA: 0x4E8AD0 Offset: 0x4E72D0 VA: 0x1804E8AD0
	public static int SafeLength(Array values) { }
	// RVA: 0x4253B0 Offset: 0x423BB0 VA: 0x1804253B0
	public static int SafeLength(List<T> values) { }
	// RVA: 0x4E8AF0 Offset: 0x4E72F0 VA: 0x1804E8AF0
	public static Array ExtractArrayFromList(object list) { }
}

// Namespace: UnityEngine
public struct RangeInt // TypeDefIndex: 1482
{
	// Fields
	public int start; // 0x0
	public int length; // 0x4

	// Properties
	public int end { get; }

	// Methods
	// RVA: 0x1E510 Offset: 0x1D910 VA: 0x18001E510
	public int get_end() { }
	// RVA: 0x16B00 Offset: 0x15F00 VA: 0x180016B00
	public void .ctor(int start, int length) { }
}

// Namespace: UnityEngine
public enum RuntimeInitializeLoadType // TypeDefIndex: 1483
{
	// Fields
	public int value__; // 0x0
	public const RuntimeInitializeLoadType AfterSceneLoad = 0; // 0x0
	public const RuntimeInitializeLoadType BeforeSceneLoad = 1; // 0x0
	public const RuntimeInitializeLoadType AfterAssembliesLoaded = 2; // 0x0
	public const RuntimeInitializeLoadType BeforeSplashScreen = 3; // 0x0
	public const RuntimeInitializeLoadType SubsystemRegistration = 4; // 0x0
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDD2B0 Offset: 0xDC6B0 VA: 0x1800DD2B0
[AttributeUsageAttribute] // RVA: 0xDD2B0 Offset: 0xDC6B0 VA: 0x1800DD2B0
public class RuntimeInitializeOnLoadMethodAttribute : PreserveAttribute // TypeDefIndex: 1484
{
	// Fields
	private RuntimeInitializeLoadType m_LoadType; // 0x10

	// Properties
	private RuntimeInitializeLoadType loadType { set; }

	// Methods
	// RVA: 0x435190 Offset: 0x433990 VA: 0x180435190
	public void .ctor() { }
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(RuntimeInitializeLoadType loadType) { }
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	private void set_loadType(RuntimeInitializeLoadType value) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[ExtensionOfNativeClassAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class ScriptableObject : Object // TypeDefIndex: 1485
{
	// Methods
	// RVA: 0x436F80 Offset: 0x435780 VA: 0x180436F80
	public void .ctor() { }
	// RVA: 0x437050 Offset: 0x435850 VA: 0x180437050
	public static ScriptableObject CreateInstance(Type type) { }
	// RVA: 0x4293D0 Offset: 0x427BD0 VA: 0x1804293D0
	public static T CreateInstance() { }
	// RVA: 0x4370B0 Offset: 0x4358B0 VA: 0x1804370B0
	private static void CreateScriptableObject(ScriptableObject self) { }
	// RVA: 0x437100 Offset: 0x435900 VA: 0x180437100
	internal static ScriptableObject CreateScriptableObjectInstanceFromType(Type type, bool applyDefaultsAndReset) { }
}

// Namespace: UnityEngine
internal class ScriptingUtility // TypeDefIndex: 1486
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x437630 Offset: 0x435E30 VA: 0x180437630
	private static bool IsManagedCodeWorking() { }
}

// Namespace: 
private struct ScriptingUtility.TestClass // TypeDefIndex: 1487
{
	// Fields
	public int value; // 0x0
}

// Namespace: UnityEngine
public static class StackTraceUtility // TypeDefIndex: 1488
{
	// Fields
	private static string projectFolder; // 0xAC290

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x439670 Offset: 0x437E70 VA: 0x180439670
	internal static void SetProjectFolder(string folder) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x439780 Offset: 0x437F80 VA: 0x180439780
	public static string ExtractStackTrace() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x439830 Offset: 0x438030 VA: 0x180439830
	internal static void ExtractStringFromExceptionInternal(object exceptiono, out string message, out string stackTrace) { }
	// RVA: 0x439DB0 Offset: 0x4385B0 VA: 0x180439DB0
	internal static string ExtractFormattedStackTrace(StackTrace stackTrace) { }
	// RVA: 0x43A720 Offset: 0x438F20 VA: 0x18043A720
	private static void .cctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public class UnityException : Exception // TypeDefIndex: 1489
{
	// Methods
	// RVA: 0x4451E0 Offset: 0x4439E0 VA: 0x1804451E0
	public void .ctor() { }
	// RVA: 0x445290 Offset: 0x443A90 VA: 0x180445290
	public void .ctor(string message) { }
	// RVA: 0x445340 Offset: 0x443B40 VA: 0x180445340
	protected void .ctor(SerializationInfo info, StreamingContext context) { }
}

// Namespace: UnityEngine
public class TextAsset : Object // TypeDefIndex: 1490
{
	// Properties
	public byte[] bytes { get; }
	public string text { get; }

	// Methods
	// RVA: 0x43BEB0 Offset: 0x43A6B0 VA: 0x18043BEB0
	public byte[] get_bytes() { }
	// RVA: 0x43BF00 Offset: 0x43A700 VA: 0x18043BF00
	public string get_text() { }
	// RVA: 0x43BF00 Offset: 0x43A700 VA: 0x18043BF00 Slot: 3
	public override string ToString() { }
	// RVA: 0x43BF60 Offset: 0x43A760 VA: 0x18043BF60
	internal static string DecodeString(byte[] bytes) { }
}

// Namespace: 
private static class TextAsset.EncodingUtility // TypeDefIndex: 1491
{
	// Fields
	internal static readonly KeyValuePair<byte[], Encoding>[] encodingLookup; // 0x0
	internal static readonly Encoding targetEncoding; // 0x8

	// Methods
	// RVA: 0x669A20 Offset: 0x668220 VA: 0x180669A20
	private static void .cctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class TrackedReference // TypeDefIndex: 1492
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x440CC0 Offset: 0x43F4C0 VA: 0x180440CC0
	public static bool op_Equality(TrackedReference x, TrackedReference y) { }
	// RVA: 0x440D90 Offset: 0x43F590 VA: 0x180440D90 Slot: 0
	public override bool Equals(object o) { }
	// RVA: 0x440EE0 Offset: 0x43F6E0 VA: 0x180440EE0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine
internal sealed class UnhandledExceptionHandler // TypeDefIndex: 1493
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x443B60 Offset: 0x442360 VA: 0x180443B60
	private static void RegisterUECatcher() { }
}

// Namespace: 
[Serializable]
private sealed class UnhandledExceptionHandler.<>c // TypeDefIndex: 1494
{
	// Fields
	public static readonly UnhandledExceptionHandler.<>c <>9; // 0x0
	public static UnhandledExceptionEventHandler <>9__0_0; // 0x8

	// Methods
	// RVA: 0x669ED0 Offset: 0x6686D0 VA: 0x180669ED0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x669F50 Offset: 0x668750 VA: 0x180669F50
	internal void <RegisterUECatcher>b__0_0(object sender, UnhandledExceptionEventArgs e) { }
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum HideFlags // TypeDefIndex: 1495
{
	// Fields
	public int value__; // 0x0
	public const HideFlags None = 0; // 0x0
	public const HideFlags HideInHierarchy = 1; // 0x0
	public const HideFlags HideInInspector = 2; // 0x0
	public const HideFlags DontSaveInEditor = 4; // 0x0
	public const HideFlags NotEditable = 8; // 0x0
	public const HideFlags DontSaveInBuild = 16; // 0x0
	public const HideFlags DontUnloadUnusedAsset = 32; // 0x0
	public const HideFlags DontSave = 52; // 0x0
	public const HideFlags HideAndDontSave = 61; // 0x0
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDD2D0 Offset: 0xDC6D0 VA: 0x1800DD2D0
public class Object // TypeDefIndex: 1496
{
	// Fields
	private IntPtr m_CachedPtr; // 0x10
	internal static int OffsetOfInstanceIDInCPlusPlusObject; // 0x0
	private const string objectIsNullMessage = "The Object you want to instantiate is null."; // 0x0
	private const string cloneDestroyedMessage = "Instantiate failed because the clone was destroyed during creation. This can happen if DestroyImmediate is called in MonoBehaviour.Awake."; // 0x0

	// Properties
	public string name { get; set; }
	public HideFlags hideFlags { get; set; }

	// Methods
	// RVA: 0x4E8B40 Offset: 0x4E7340 VA: 0x1804E8B40
	public int GetInstanceID() { }
	// RVA: 0x4E8C90 Offset: 0x4E7490 VA: 0x1804E8C90 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x4E8CA0 Offset: 0x4E74A0 VA: 0x1804E8CA0 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x4E8E00 Offset: 0x4E7600 VA: 0x1804E8E00
	public static bool op_Implicit(Object exists) { }
	// RVA: 0x4E8F80 Offset: 0x4E7780 VA: 0x1804E8F80
	private static bool CompareBaseObjects(Object lhs, Object rhs) { }
	// RVA: 0x4E9110 Offset: 0x4E7910 VA: 0x1804E9110
	private static bool IsNativeObjectAlive(Object o) { }
	// RVA: 0x4E9190 Offset: 0x4E7990 VA: 0x1804E9190
	private IntPtr GetCachedPtr() { }
	// RVA: 0x4E91A0 Offset: 0x4E79A0 VA: 0x1804E91A0
	public string get_name() { }
	// RVA: 0x4E9270 Offset: 0x4E7A70 VA: 0x1804E9270
	public void set_name(string value) { }
	// RVA: 0x4E9350 Offset: 0x4E7B50 VA: 0x1804E9350
	public static Object Instantiate(Object original, Vector3 position, Quaternion rotation) { }
	// RVA: 0x4E9670 Offset: 0x4E7E70 VA: 0x1804E9670
	public static Object Instantiate(Object original, Vector3 position, Quaternion rotation, Transform parent) { }
	// RVA: 0x4E9970 Offset: 0x4E8170 VA: 0x1804E9970
	public static Object Instantiate(Object original) { }
	// RVA: 0x425500 Offset: 0x423D00 VA: 0x180425500
	public static T Instantiate(T original) { }
	// RVA: 0x425700 Offset: 0x423F00 VA: 0x180425700
	public static T Instantiate(T original, Vector3 position, Quaternion rotation) { }
	// RVA: 0x425830 Offset: 0x424030 VA: 0x180425830
	public static T Instantiate(T original, Vector3 position, Quaternion rotation, Transform parent) { }
	// RVA: 0x4E9B30 Offset: 0x4E8330 VA: 0x1804E9B30
	public static void Destroy(Object obj, float t) { }
	// RVA: 0x4E9B90 Offset: 0x4E8390 VA: 0x1804E9B90
	public static void Destroy(Object obj) { }
	// RVA: 0x4E9C60 Offset: 0x4E8460 VA: 0x1804E9C60
	public static void DestroyImmediate(Object obj, bool allowDestroyingAssets) { }
	// RVA: 0x4E9CC0 Offset: 0x4E84C0 VA: 0x1804E9CC0
	public static void DestroyImmediate(Object obj) { }
	// RVA: 0x4E9D90 Offset: 0x4E8590 VA: 0x1804E9D90
	public static Object[] FindObjectsOfType(Type type) { }
	// RVA: 0x4E9E60 Offset: 0x4E8660 VA: 0x1804E9E60
	public static Object[] FindObjectsOfType(Type type, bool includeInactive) { }
	// RVA: 0x4E9EC0 Offset: 0x4E86C0 VA: 0x1804E9EC0
	public static void DontDestroyOnLoad(Object target) { }
	// RVA: 0x4E9F10 Offset: 0x4E8710 VA: 0x1804E9F10
	public HideFlags get_hideFlags() { }
	// RVA: 0x4E9F60 Offset: 0x4E8760 VA: 0x1804E9F60
	public void set_hideFlags(HideFlags value) { }
	// RVA: 0x4253E0 Offset: 0x423BE0 VA: 0x1804253E0
	public static T[] FindObjectsOfType() { }
	// RVA: 0x4E9FC0 Offset: 0x4E87C0 VA: 0x1804E9FC0
	private static void CheckNullArgument(object arg, string message) { }
	// RVA: 0x4EA070 Offset: 0x4E8870 VA: 0x1804EA070 Slot: 3
	public override string ToString() { }
	// RVA: 0x4EA140 Offset: 0x4E8940 VA: 0x1804EA140
	public static bool op_Equality(Object x, Object y) { }
	// RVA: 0x4EA350 Offset: 0x4E8B50 VA: 0x1804EA350
	public static bool op_Inequality(Object x, Object y) { }
	// RVA: 0x4EA560 Offset: 0x4E8D60 VA: 0x1804EA560
	private static int GetOffsetOfInstanceIDInCPlusPlusObject() { }
	// RVA: 0x4EA5B0 Offset: 0x4E8DB0 VA: 0x1804EA5B0
	private static Object Internal_CloneSingle(Object data) { }
	// RVA: 0x4EA600 Offset: 0x4E8E00 VA: 0x1804EA600
	private static Object Internal_InstantiateSingle(Object data, Vector3 pos, Quaternion rot) { }
	// RVA: 0x4EA6F0 Offset: 0x4E8EF0 VA: 0x1804EA6F0
	private static Object Internal_InstantiateSingleWithParent(Object data, Transform parent, Vector3 pos, Quaternion rot) { }
	// RVA: 0x4EA7F0 Offset: 0x4E8FF0 VA: 0x1804EA7F0
	private static string ToString(Object obj) { }
	// RVA: 0x4EA840 Offset: 0x4E9040 VA: 0x1804EA840
	private static string GetName(Object obj) { }
	// RVA: 0x4EA890 Offset: 0x4E9090 VA: 0x1804EA890
	private static void SetName(Object obj, string name) { }
	// RVA: 0x4EA8F0 Offset: 0x4E90F0 VA: 0x1804EA8F0
	internal static Object FindObjectFromInstanceID(int instanceID) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x4EA940 Offset: 0x4E9140 VA: 0x1804EA940
	private static void .cctor() { }
	// RVA: 0x4EA9C0 Offset: 0x4E91C0 VA: 0x1804EA9C0
	private static Object Internal_InstantiateSingle_Injected(Object data, ref Vector3 pos, ref Quaternion rot) { }
	// RVA: 0x4EAA30 Offset: 0x4E9230 VA: 0x1804EAA30
	private static Object Internal_InstantiateSingleWithParent_Injected(Object data, Transform parent, ref Vector3 pos, ref Quaternion rot) { }
}

// Namespace: UnityEngine
internal sealed class UnitySynchronizationContext : SynchronizationContext // TypeDefIndex: 1497
{
	// Fields
	private readonly List<UnitySynchronizationContext.WorkRequest> m_AsyncWorkQueue; // 0x18
	private readonly List<UnitySynchronizationContext.WorkRequest> m_CurrentFrameWork; // 0x20
	private readonly int m_MainThreadID; // 0x28
	private int m_TrackedCount; // 0x2C

	// Methods
	// RVA: 0x445960 Offset: 0x444160 VA: 0x180445960
	private void .ctor(int mainThreadID) { }
	// RVA: 0x445AB0 Offset: 0x4442B0 VA: 0x180445AB0
	private void .ctor(List<UnitySynchronizationContext.WorkRequest> queue, int mainThreadID) { }
	// RVA: 0x445BB0 Offset: 0x4443B0 VA: 0x180445BB0 Slot: 4
	public override void Send(SendOrPostCallback callback, object state) { }
	// RVA: 0x445E40 Offset: 0x444640 VA: 0x180445E40 Slot: 5
	public override void Post(SendOrPostCallback callback, object state) { }
	// RVA: 0x445F90 Offset: 0x444790 VA: 0x180445F90 Slot: 6
	public override SynchronizationContext CreateCopy() { }
	// RVA: 0x4460F0 Offset: 0x4448F0 VA: 0x1804460F0
	private void Exec() { }
	// RVA: 0x446350 Offset: 0x444B50 VA: 0x180446350
	private bool HasPendingTasks() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x446400 Offset: 0x444C00 VA: 0x180446400
	private static void InitializeSynchronizationContext() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4465F0 Offset: 0x444DF0 VA: 0x1804465F0
	private static void ExecuteTasks() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4466B0 Offset: 0x444EB0 VA: 0x1804466B0
	private static bool ExecutePendingTasks(long millisecondsTimeout) { }
}

// Namespace: 
private struct UnitySynchronizationContext.WorkRequest // TypeDefIndex: 1498
{
	// Fields
	private readonly SendOrPostCallback m_DelagateCallback; // 0x0
	private readonly object m_DelagateState; // 0x8
	private readonly ManualResetEvent m_WaitHandle; // 0x10

	// Methods
	// RVA: 0x257C0 Offset: 0x24BC0 VA: 0x1800257C0
	public void .ctor(SendOrPostCallback callback, object state, ManualResetEvent waitHandle) { }
	// RVA: 0x257D0 Offset: 0x24BD0 VA: 0x1800257D0
	public void Invoke() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class WaitForEndOfFrame : YieldInstruction // TypeDefIndex: 1499
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class WaitForFixedUpdate : YieldInstruction // TypeDefIndex: 1500
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class WaitForSeconds : YieldInstruction // TypeDefIndex: 1501
{
	// Fields
	internal float m_Seconds; // 0x10

	// Methods
	// RVA: 0x2B3E10 Offset: 0x2B2610 VA: 0x1802B3E10
	public void .ctor(float seconds) { }
}

// Namespace: UnityEngine
public class WaitForSecondsRealtime : CustomYieldInstruction // TypeDefIndex: 1502
{
	// Fields
	private float <waitTime>k__BackingField; // 0x10
	private float m_WaitUntilTime; // 0x14

	// Properties
	public float waitTime { get; set; }
	public override bool keepWaiting { get; }

	// Methods
	// RVA: 0x34A110 Offset: 0x348910 VA: 0x18034A110
	public float get_waitTime() { }
	// RVA: 0x2B3E10 Offset: 0x2B2610 VA: 0x1802B3E10
	public void set_waitTime(float value) { }
	// RVA: 0x44D070 Offset: 0x44B870 VA: 0x18044D070 Slot: 6
	public override bool get_keepWaiting() { }
	// RVA: 0x44D140 Offset: 0x44B940 VA: 0x18044D140
	public void .ctor(float time) { }
	// RVA: 0x44D150 Offset: 0x44B950 VA: 0x18044D150 Slot: 7
	public override void Reset() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class YieldInstruction // TypeDefIndex: 1503
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class SerializeField : Attribute // TypeDefIndex: 1504
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDC7F0 Offset: 0xDBBF0 VA: 0x1800DC7F0
[AttributeUsageAttribute] // RVA: 0xDC7F0 Offset: 0xDBBF0 VA: 0x1800DC7F0
public sealed class SerializeReference : Attribute // TypeDefIndex: 1505
{}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xD9D50 Offset: 0xD9150 VA: 0x1800D9D50
[RequiredByNativeCodeAttribute] // RVA: 0xD9D50 Offset: 0xD9150 VA: 0x1800D9D50
public sealed class PreferBinarySerialization : Attribute // TypeDefIndex: 1506
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public interface ISerializationCallbackReceiver // TypeDefIndex: 1507
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnBeforeSerialize() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void OnAfterDeserialize() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class ComputeBuffer : IDisposable // TypeDefIndex: 1508
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties
	public int count { get; }

	// Methods
	// RVA: 0x540E20 Offset: 0x53F620 VA: 0x180540E20 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x540EA0 Offset: 0x53F6A0 VA: 0x180540EA0 Slot: 4
	public void Dispose() { }
	// RVA: 0x540F40 Offset: 0x53F740 VA: 0x180540F40
	private void Dispose(bool disposing) { }
	// RVA: 0x541040 Offset: 0x53F840 VA: 0x180541040
	private static IntPtr InitBuffer(int count, int stride, ComputeBufferType type, ComputeBufferMode usage) { }
	// RVA: 0x5410C0 Offset: 0x53F8C0 VA: 0x1805410C0
	private static void DestroyBuffer(ComputeBuffer buf) { }
	// RVA: 0x541110 Offset: 0x53F910 VA: 0x180541110
	public void .ctor(int count, int stride) { }
	// RVA: 0x541140 Offset: 0x53F940 VA: 0x180541140
	public void .ctor(int count, int stride, ComputeBufferType type) { }
	// RVA: 0x541170 Offset: 0x53F970 VA: 0x180541170
	internal void .ctor(int count, int stride, ComputeBufferType type, ComputeBufferMode usage, int stackDepth) { }
	// RVA: 0x5412D0 Offset: 0x53FAD0 VA: 0x1805412D0
	public void Release() { }
	// RVA: 0x5412E0 Offset: 0x53FAE0 VA: 0x1805412E0
	public int get_count() { }
	// RVA: 0x541330 Offset: 0x53FB30 VA: 0x180541330
	public void SetData(Array data) { }
	// RVA: 0x541500 Offset: 0x53FD00 VA: 0x180541500
	public void SetData(Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count) { }
	// RVA: 0x541780 Offset: 0x53FF80 VA: 0x180541780
	private void InternalSetData(Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count, int elemSize) { }
	// RVA: 0x541810 Offset: 0x540010 VA: 0x180541810
	public void GetData(Array data) { }
	// RVA: 0x5419F0 Offset: 0x5401F0 VA: 0x1805419F0
	private void InternalGetData(Array data, int managedBufferStartIndex, int computeBufferStartIndex, int count, int elemSize) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class ComputeShader : Object // TypeDefIndex: 1509
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x541A80 Offset: 0x540280 VA: 0x180541A80
	public int FindKernel(string name) { }
	// RVA: 0x541AE0 Offset: 0x5402E0 VA: 0x180541AE0
	public void SetFloat(int nameID, float val) { }
	// RVA: 0x541B50 Offset: 0x540350 VA: 0x180541B50
	public void SetInt(int nameID, int val) { }
	// RVA: 0x541BC0 Offset: 0x5403C0 VA: 0x180541BC0
	public void SetTexture(int kernelIndex, int nameID, Texture texture, int mipLevel) { }
	// RVA: 0x541C40 Offset: 0x540440 VA: 0x180541C40
	private void Internal_SetBuffer(int kernelIndex, int nameID, ComputeBuffer buffer) { }
	// RVA: 0x541C40 Offset: 0x540440 VA: 0x180541C40
	public void SetBuffer(int kernelIndex, int nameID, ComputeBuffer buffer) { }
	// RVA: 0x541CC0 Offset: 0x5404C0 VA: 0x180541CC0
	public void GetKernelThreadGroupSizes(int kernelIndex, out uint x, out uint y, out uint z) { }
	// RVA: 0x541D40 Offset: 0x540540 VA: 0x180541D40
	public void Dispatch(int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ) { }
	// RVA: 0x541DC0 Offset: 0x5405C0 VA: 0x180541DC0
	public void SetFloat(string name, float val) { }
	// RVA: 0x541E70 Offset: 0x540670 VA: 0x180541E70
	public void SetInt(string name, int val) { }
	// RVA: 0x541F20 Offset: 0x540720 VA: 0x180541F20
	public void SetTexture(int kernelIndex, string name, Texture texture) { }
	// RVA: 0x541FF0 Offset: 0x5407F0 VA: 0x180541FF0
	public void SetBuffer(int kernelIndex, string name, ComputeBuffer buffer) { }
}

// Namespace: UnityEngine
internal class LowerResBlitTexture : Object // TypeDefIndex: 1510
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void LowerResBlitTextureDontStripMe() { }
}

// Namespace: UnityEngine
internal class PreloadData : Object // TypeDefIndex: 1511
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void PreloadDataDontStripMe() { }
}

// Namespace: UnityEngine
public enum OperatingSystemFamily // TypeDefIndex: 1512
{
	// Fields
	public int value__; // 0x0
	public const OperatingSystemFamily Other = 0; // 0x0
	public const OperatingSystemFamily MacOSX = 1; // 0x0
	public const OperatingSystemFamily Windows = 2; // 0x0
	public const OperatingSystemFamily Linux = 3; // 0x0
}

// Namespace: UnityEngine
public sealed class SystemInfo // TypeDefIndex: 1513
{
	// Properties
	public static OperatingSystemFamily operatingSystemFamily { get; }
	public static int processorCount { get; }
	public static GraphicsDeviceType graphicsDeviceType { get; }
	public static bool graphicsUVStartsAtTop { get; }
	public static int graphicsShaderLevel { get; }
	public static bool supportsMotionVectors { get; }
	public static bool supports3DRenderTextures { get; }
	public static CopyTextureSupport copyTextureSupport { get; }
	public static bool supportsComputeShaders { get; }
	public static bool supportsInstancing { get; }
	public static int supportedRenderTargetCount { get; }
	public static bool usesReversedZBuffer { get; }
	public static bool usesLoadStoreActions { get; }

	// Methods
	// RVA: 0x43B570 Offset: 0x439D70 VA: 0x18043B570
	public static OperatingSystemFamily get_operatingSystemFamily() { }
	// RVA: 0x43B5C0 Offset: 0x439DC0 VA: 0x18043B5C0
	public static int get_processorCount() { }
	// RVA: 0x43B610 Offset: 0x439E10 VA: 0x18043B610
	public static GraphicsDeviceType get_graphicsDeviceType() { }
	// RVA: 0x43B660 Offset: 0x439E60 VA: 0x18043B660
	public static bool get_graphicsUVStartsAtTop() { }
	// RVA: 0x43B6B0 Offset: 0x439EB0 VA: 0x18043B6B0
	public static int get_graphicsShaderLevel() { }
	// RVA: 0x43B700 Offset: 0x439F00 VA: 0x18043B700
	public static bool get_supportsMotionVectors() { }
	// RVA: 0x43B750 Offset: 0x439F50 VA: 0x18043B750
	public static bool get_supports3DRenderTextures() { }
	// RVA: 0x43B7A0 Offset: 0x439FA0 VA: 0x18043B7A0
	public static CopyTextureSupport get_copyTextureSupport() { }
	// RVA: 0x43B7F0 Offset: 0x439FF0 VA: 0x18043B7F0
	public static bool get_supportsComputeShaders() { }
	// RVA: 0x43B840 Offset: 0x43A040 VA: 0x18043B840
	public static bool get_supportsInstancing() { }
	// RVA: 0x43B890 Offset: 0x43A090 VA: 0x18043B890
	public static int get_supportedRenderTargetCount() { }
	// RVA: 0x43B8E0 Offset: 0x43A0E0 VA: 0x18043B8E0
	public static bool get_usesReversedZBuffer() { }
	// RVA: 0x43B930 Offset: 0x43A130 VA: 0x18043B930
	private static bool IsValidEnumValue(Enum value) { }
	// RVA: 0x43BAB0 Offset: 0x43A2B0 VA: 0x18043BAB0
	public static bool SupportsRenderTextureFormat(RenderTextureFormat format) { }
	// RVA: 0x43BBB0 Offset: 0x43A3B0 VA: 0x18043BBB0
	public static bool SupportsTextureFormat(TextureFormat format) { }
	// RVA: 0x43BCB0 Offset: 0x43A4B0 VA: 0x18043BCB0
	public static bool get_usesLoadStoreActions() { }
	// RVA: 0x43B570 Offset: 0x439D70 VA: 0x18043B570
	private static OperatingSystemFamily GetOperatingSystemFamily() { }
	// RVA: 0x43B5C0 Offset: 0x439DC0 VA: 0x18043B5C0
	private static int GetProcessorCount() { }
	// RVA: 0x43B610 Offset: 0x439E10 VA: 0x18043B610
	private static GraphicsDeviceType GetGraphicsDeviceType() { }
	// RVA: 0x43B660 Offset: 0x439E60 VA: 0x18043B660
	private static bool GetGraphicsUVStartsAtTop() { }
	// RVA: 0x43B6B0 Offset: 0x439EB0 VA: 0x18043B6B0
	private static int GetGraphicsShaderLevel() { }
	// RVA: 0x43B700 Offset: 0x439F00 VA: 0x18043B700
	private static bool SupportsMotionVectors() { }
	// RVA: 0x43B750 Offset: 0x439F50 VA: 0x18043B750
	private static bool Supports3DRenderTextures() { }
	// RVA: 0x43B7A0 Offset: 0x439FA0 VA: 0x18043B7A0
	private static CopyTextureSupport GetCopyTextureSupport() { }
	// RVA: 0x43B7F0 Offset: 0x439FF0 VA: 0x18043B7F0
	private static bool SupportsComputeShaders() { }
	// RVA: 0x43B840 Offset: 0x43A040 VA: 0x18043B840
	private static bool SupportsInstancing() { }
	// RVA: 0x43B890 Offset: 0x43A090 VA: 0x18043B890
	private static int SupportedRenderTargetCount() { }
	// RVA: 0x43B8E0 Offset: 0x43A0E0 VA: 0x18043B8E0
	private static bool UsesReversedZBuffer() { }
	// RVA: 0x43BD00 Offset: 0x43A500 VA: 0x18043BD00
	private static bool HasRenderTextureNative(RenderTextureFormat format) { }
	// RVA: 0x43BD50 Offset: 0x43A550 VA: 0x18043BD50
	private static bool SupportsTextureFormatNative(TextureFormat format) { }
	// RVA: 0x43BDA0 Offset: 0x43A5A0 VA: 0x18043BDA0
	public static bool IsFormatSupported(GraphicsFormat format, FormatUsage usage) { }
	// RVA: 0x43BE00 Offset: 0x43A600 VA: 0x18043BE00
	public static GraphicsFormat GetCompatibleFormat(GraphicsFormat format, FormatUsage usage) { }
	// RVA: 0x43BE60 Offset: 0x43A660 VA: 0x18043BE60
	public static GraphicsFormat GetGraphicsFormat(DefaultFormat format) { }
	// RVA: 0x43BCB0 Offset: 0x43A4B0 VA: 0x18043BCB0
	private static bool UsesLoadStoreActions() { }
}

// Namespace: UnityEngine
internal class SystemClock // TypeDefIndex: 1514
{
	// Fields
	private static readonly DateTime s_Epoch; // 0xAC308

	// Properties
	public static DateTime now { get; }

	// Methods
	// RVA: 0x43B420 Offset: 0x439C20 VA: 0x18043B420
	public static DateTime get_now() { }
	// RVA: 0x43B4B0 Offset: 0x439CB0 VA: 0x18043B4B0
	private static void .cctor() { }
}

// Namespace: UnityEngine
public class Time // TypeDefIndex: 1515
{
	// Properties
	public static float time { get; }
	public static float timeSinceLevelLoad { get; }
	public static float deltaTime { get; }
	public static float unscaledTime { get; }
	public static float unscaledDeltaTime { get; }
	public static float fixedDeltaTime { get; set; }
	public static float maximumDeltaTime { get; }
	public static float timeScale { get; set; }
	public static int frameCount { get; }
	public static int renderedFrameCount { get; }
	public static float realtimeSinceStartup { get; }

	// Methods
	// RVA: 0x43FBA0 Offset: 0x43E3A0 VA: 0x18043FBA0
	public static float get_time() { }
	// RVA: 0x43FBF0 Offset: 0x43E3F0 VA: 0x18043FBF0
	public static float get_timeSinceLevelLoad() { }
	// RVA: 0x43FC40 Offset: 0x43E440 VA: 0x18043FC40
	public static float get_deltaTime() { }
	// RVA: 0x43FC90 Offset: 0x43E490 VA: 0x18043FC90
	public static float get_unscaledTime() { }
	// RVA: 0x43FCE0 Offset: 0x43E4E0 VA: 0x18043FCE0
	public static float get_unscaledDeltaTime() { }
	// RVA: 0x43FD30 Offset: 0x43E530 VA: 0x18043FD30
	public static float get_fixedDeltaTime() { }
	// RVA: 0x43FD80 Offset: 0x43E580 VA: 0x18043FD80
	public static void set_fixedDeltaTime(float value) { }
	// RVA: 0x43FDE0 Offset: 0x43E5E0 VA: 0x18043FDE0
	public static float get_maximumDeltaTime() { }
	// RVA: 0x43FE30 Offset: 0x43E630 VA: 0x18043FE30
	public static float get_timeScale() { }
	// RVA: 0x43FE80 Offset: 0x43E680 VA: 0x18043FE80
	public static void set_timeScale(float value) { }
	// RVA: 0x43FEE0 Offset: 0x43E6E0 VA: 0x18043FEE0
	public static int get_frameCount() { }
	// RVA: 0x43FF30 Offset: 0x43E730 VA: 0x18043FF30
	public static int get_renderedFrameCount() { }
	// RVA: 0x43FF80 Offset: 0x43E780 VA: 0x18043FF80
	public static float get_realtimeSinceStartup() { }
}

// Namespace: UnityEngine
internal struct TouchScreenKeyboard_InternalConstructorHelperArguments // TypeDefIndex: 1516
{
	// Fields
	public uint keyboardType; // 0x0
	public uint autocorrection; // 0x4
	public uint multiline; // 0x8
	public uint secure; // 0xC
	public uint alert; // 0x10
	public int characterLimit; // 0x14
}

// Namespace: UnityEngine
public class TouchScreenKeyboard // TypeDefIndex: 1517
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties
	public static bool isSupported { get; }
	public static bool isInPlaceEditingAllowed { get; }
	public string text { get; set; }
	public static bool hideInput { set; }
	public bool active { get; set; }
	public TouchScreenKeyboard.Status status { get; }
	public int characterLimit { set; }
	public bool canGetSelection { get; }
	public bool canSetSelection { get; }
	public RangeInt selection { get; set; }

	// Methods
	// RVA: 0x43FFD0 Offset: 0x43E7D0 VA: 0x18043FFD0
	private static void Internal_Destroy(IntPtr ptr) { }
	// RVA: 0x440020 Offset: 0x43E820 VA: 0x180440020
	private void Destroy() { }
	// RVA: 0x440110 Offset: 0x43E910 VA: 0x180440110 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x440250 Offset: 0x43EA50 VA: 0x180440250
	public void .ctor(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit) { }
	// RVA: 0x440460 Offset: 0x43EC60 VA: 0x180440460
	private static IntPtr TouchScreenKeyboard_InternalConstructorHelper(ref TouchScreenKeyboard_InternalConstructorHelperArguments arguments, string text, string textPlaceholder) { }
	// RVA: 0x4404D0 Offset: 0x43ECD0 VA: 0x1804404D0
	public static bool get_isSupported() { }
	// RVA: 0x378D30 Offset: 0x377530 VA: 0x180378D30
	public static bool get_isInPlaceEditingAllowed() { }
	// RVA: 0x440550 Offset: 0x43ED50 VA: 0x180440550
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, string textPlaceholder, int characterLimit) { }
	// RVA: 0x440650 Offset: 0x43EE50 VA: 0x180440650
	public static TouchScreenKeyboard Open(string text, TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure) { }
	// RVA: 0x440730 Offset: 0x43EF30 VA: 0x180440730
	public string get_text() { }
	// RVA: 0x440780 Offset: 0x43EF80 VA: 0x180440780
	public void set_text(string value) { }
	// RVA: 0x4407E0 Offset: 0x43EFE0 VA: 0x1804407E0
	public static void set_hideInput(bool value) { }
	// RVA: 0x440830 Offset: 0x43F030 VA: 0x180440830
	public bool get_active() { }
	// RVA: 0x440880 Offset: 0x43F080 VA: 0x180440880
	public void set_active(bool value) { }
	// RVA: 0x4408E0 Offset: 0x43F0E0 VA: 0x1804408E0
	public TouchScreenKeyboard.Status get_status() { }
	// RVA: 0x440930 Offset: 0x43F130 VA: 0x180440930
	public void set_characterLimit(int value) { }
	// RVA: 0x440990 Offset: 0x43F190 VA: 0x180440990
	public bool get_canGetSelection() { }
	// RVA: 0x4409E0 Offset: 0x43F1E0 VA: 0x1804409E0
	public bool get_canSetSelection() { }
	// RVA: 0x440A30 Offset: 0x43F230 VA: 0x180440A30
	public RangeInt get_selection() { }
	// RVA: 0x440A90 Offset: 0x43F290 VA: 0x180440A90
	public void set_selection(RangeInt value) { }
	// RVA: 0x440C00 Offset: 0x43F400 VA: 0x180440C00
	private static void GetSelection(out int start, out int length) { }
	// RVA: 0x440C60 Offset: 0x43F460 VA: 0x180440C60
	private static void SetSelection(int start, int length) { }
}

// Namespace: 
public enum TouchScreenKeyboard.Status // TypeDefIndex: 1518
{
	// Fields
	public int value__; // 0x0
	public const TouchScreenKeyboard.Status Visible = 0; // 0x0
	public const TouchScreenKeyboard.Status Done = 1; // 0x0
	public const TouchScreenKeyboard.Status Canceled = 2; // 0x0
	public const TouchScreenKeyboard.Status LostFocus = 3; // 0x0
}

// Namespace: UnityEngine
public enum TouchScreenKeyboardType // TypeDefIndex: 1519
{
	// Fields
	public int value__; // 0x0
	public const TouchScreenKeyboardType Default = 0; // 0x0
	public const TouchScreenKeyboardType ASCIICapable = 1; // 0x0
	public const TouchScreenKeyboardType NumbersAndPunctuation = 2; // 0x0
	public const TouchScreenKeyboardType URL = 3; // 0x0
	public const TouchScreenKeyboardType NumberPad = 4; // 0x0
	public const TouchScreenKeyboardType PhonePad = 5; // 0x0
	public const TouchScreenKeyboardType NamePhonePad = 6; // 0x0
	public const TouchScreenKeyboardType EmailAddress = 7; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD2E0 Offset: 0xDC6E0 VA: 0x1800DD2E0
	public const TouchScreenKeyboardType NintendoNetworkAccount = 8; // 0x0
	public const TouchScreenKeyboardType Social = 9; // 0x0
	public const TouchScreenKeyboardType Search = 10; // 0x0
	public const TouchScreenKeyboardType DecimalPad = 11; // 0x0
	public const TouchScreenKeyboardType OneTimeCode = 12; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum DrivenTransformProperties // TypeDefIndex: 1520
{
	// Fields
	public int value__; // 0x0
	public const DrivenTransformProperties None = 0; // 0x0
	public const DrivenTransformProperties All = -1; // 0x0
	public const DrivenTransformProperties AnchoredPositionX = 2; // 0x0
	public const DrivenTransformProperties AnchoredPositionY = 4; // 0x0
	public const DrivenTransformProperties AnchoredPositionZ = 8; // 0x0
	public const DrivenTransformProperties Rotation = 16; // 0x0
	public const DrivenTransformProperties ScaleX = 32; // 0x0
	public const DrivenTransformProperties ScaleY = 64; // 0x0
	public const DrivenTransformProperties ScaleZ = 128; // 0x0
	public const DrivenTransformProperties AnchorMinX = 256; // 0x0
	public const DrivenTransformProperties AnchorMinY = 512; // 0x0
	public const DrivenTransformProperties AnchorMaxX = 1024; // 0x0
	public const DrivenTransformProperties AnchorMaxY = 2048; // 0x0
	public const DrivenTransformProperties SizeDeltaX = 4096; // 0x0
	public const DrivenTransformProperties SizeDeltaY = 8192; // 0x0
	public const DrivenTransformProperties PivotX = 16384; // 0x0
	public const DrivenTransformProperties PivotY = 32768; // 0x0
	public const DrivenTransformProperties AnchoredPosition = 6; // 0x0
	public const DrivenTransformProperties AnchoredPosition3D = 14; // 0x0
	public const DrivenTransformProperties Scale = 224; // 0x0
	public const DrivenTransformProperties AnchorMin = 768; // 0x0
	public const DrivenTransformProperties AnchorMax = 3072; // 0x0
	public const DrivenTransformProperties Anchors = 3840; // 0x0
	public const DrivenTransformProperties SizeDelta = 12288; // 0x0
	public const DrivenTransformProperties Pivot = 49152; // 0x0
}

// Namespace: UnityEngine
public struct DrivenRectTransformTracker // TypeDefIndex: 1521
{
	// Methods
	// RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public void Add(Object driver, RectTransform rectTransform, DrivenTransformProperties drivenProperties) { }
	// RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public void Clear() { }
}

// Namespace: UnityEngine
public sealed class RectTransform : Transform // TypeDefIndex: 1522
{
	// Fields
	private static RectTransform.ReapplyDrivenProperties reapplyDrivenProperties; // 0xA16A90

	// Properties
	public Rect rect { get; }
	public Vector2 anchorMin { get; set; }
	public Vector2 anchorMax { get; set; }
	public Vector2 anchoredPosition { get; set; }
	public Vector2 sizeDelta { get; set; }
	public Vector2 pivot { get; set; }
	public Vector2 offsetMin { get; }
	public Vector2 offsetMax { get; }

	// Methods
	// RVA: 0x4F80F0 Offset: 0x4F68F0 VA: 0x1804F80F0
	public static void add_reapplyDrivenProperties(RectTransform.ReapplyDrivenProperties value) { }
	// RVA: 0x4F81F0 Offset: 0x4F69F0 VA: 0x1804F81F0
	public static void remove_reapplyDrivenProperties(RectTransform.ReapplyDrivenProperties value) { }
	// RVA: 0x4F82F0 Offset: 0x4F6AF0 VA: 0x1804F82F0
	public Rect get_rect() { }
	// RVA: 0x4F8360 Offset: 0x4F6B60 VA: 0x1804F8360
	public Vector2 get_anchorMin() { }
	// RVA: 0x4F83D0 Offset: 0x4F6BD0 VA: 0x1804F83D0
	public void set_anchorMin(Vector2 value) { }
	// RVA: 0x4F8430 Offset: 0x4F6C30 VA: 0x1804F8430
	public Vector2 get_anchorMax() { }
	// RVA: 0x4F84A0 Offset: 0x4F6CA0 VA: 0x1804F84A0
	public void set_anchorMax(Vector2 value) { }
	// RVA: 0x4F8500 Offset: 0x4F6D00 VA: 0x1804F8500
	public Vector2 get_anchoredPosition() { }
	// RVA: 0x4F8570 Offset: 0x4F6D70 VA: 0x1804F8570
	public void set_anchoredPosition(Vector2 value) { }
	// RVA: 0x4F85D0 Offset: 0x4F6DD0 VA: 0x1804F85D0
	public Vector2 get_sizeDelta() { }
	// RVA: 0x4F8640 Offset: 0x4F6E40 VA: 0x1804F8640
	public void set_sizeDelta(Vector2 value) { }
	// RVA: 0x4F86A0 Offset: 0x4F6EA0 VA: 0x1804F86A0
	public Vector2 get_pivot() { }
	// RVA: 0x4F8710 Offset: 0x4F6F10 VA: 0x1804F8710
	public void set_pivot(Vector2 value) { }
	// RVA: 0x4F8770 Offset: 0x4F6F70 VA: 0x1804F8770
	public Vector2 get_offsetMin() { }
	// RVA: 0x4F8920 Offset: 0x4F7120 VA: 0x1804F8920
	public Vector2 get_offsetMax() { }
	// RVA: 0x4F8AF0 Offset: 0x4F72F0 VA: 0x1804F8AF0
	public void ForceUpdateRectTransforms() { }
	// RVA: 0x4F8B40 Offset: 0x4F7340 VA: 0x1804F8B40
	public void GetLocalCorners(Vector3[] fourCornersArray) { }
	// RVA: 0x4F8D60 Offset: 0x4F7560 VA: 0x1804F8D60
	public void GetWorldCorners(Vector3[] fourCornersArray) { }
	// RVA: 0x4F90E0 Offset: 0x4F78E0 VA: 0x1804F90E0
	public void SetSizeWithCurrentAnchors(RectTransform.Axis axis, float size) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4F92E0 Offset: 0x4F7AE0 VA: 0x1804F92E0
	internal static void SendReapplyDrivenProperties(RectTransform driven) { }
	// RVA: 0x4F9370 Offset: 0x4F7B70 VA: 0x1804F9370
	private Vector2 GetParentSize() { }
	// RVA: 0x4F9520 Offset: 0x4F7D20 VA: 0x1804F9520
	private void get_rect_Injected(out Rect ret) { }
	// RVA: 0x4F9580 Offset: 0x4F7D80 VA: 0x1804F9580
	private void get_anchorMin_Injected(out Vector2 ret) { }
	// RVA: 0x4F95E0 Offset: 0x4F7DE0 VA: 0x1804F95E0
	private void set_anchorMin_Injected(ref Vector2 value) { }
	// RVA: 0x4F9640 Offset: 0x4F7E40 VA: 0x1804F9640
	private void get_anchorMax_Injected(out Vector2 ret) { }
	// RVA: 0x4F96A0 Offset: 0x4F7EA0 VA: 0x1804F96A0
	private void set_anchorMax_Injected(ref Vector2 value) { }
	// RVA: 0x4F9700 Offset: 0x4F7F00 VA: 0x1804F9700
	private void get_anchoredPosition_Injected(out Vector2 ret) { }
	// RVA: 0x4F9760 Offset: 0x4F7F60 VA: 0x1804F9760
	private void set_anchoredPosition_Injected(ref Vector2 value) { }
	// RVA: 0x4F97C0 Offset: 0x4F7FC0 VA: 0x1804F97C0
	private void get_sizeDelta_Injected(out Vector2 ret) { }
	// RVA: 0x4F9820 Offset: 0x4F8020 VA: 0x1804F9820
	private void set_sizeDelta_Injected(ref Vector2 value) { }
	// RVA: 0x4F9880 Offset: 0x4F8080 VA: 0x1804F9880
	private void get_pivot_Injected(out Vector2 ret) { }
	// RVA: 0x4F98E0 Offset: 0x4F80E0 VA: 0x1804F98E0
	private void set_pivot_Injected(ref Vector2 value) { }
}

// Namespace: 
public enum RectTransform.Axis // TypeDefIndex: 1523
{
	// Fields
	public int value__; // 0x0
	public const RectTransform.Axis Horizontal = 0; // 0x0
	public const RectTransform.Axis Vertical = 1; // 0x0
}

// Namespace: 
public sealed class RectTransform.ReapplyDrivenProperties : MulticastDelegate // TypeDefIndex: 1524
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E1A0 Offset: 0x44C9A0 VA: 0x18044E1A0 Slot: 12
	public virtual void Invoke(RectTransform driven) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(RectTransform driven, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class Transform : Component, IEnumerable // TypeDefIndex: 1525
{
	// Properties
	public Vector3 position { get; set; }
	public Vector3 localPosition { get; set; }
	public Vector3 eulerAngles { get; set; }
	public Vector3 right { get; }
	public Vector3 up { get; }
	public Vector3 forward { get; set; }
	public Quaternion rotation { get; set; }
	public Quaternion localRotation { get; set; }
	public Vector3 localScale { get; set; }
	public Transform parent { get; set; }
	internal Transform parentInternal { get; set; }
	public Matrix4x4 worldToLocalMatrix { get; }
	public Matrix4x4 localToWorldMatrix { get; }
	public Transform root { get; }
	public int childCount { get; }
	public Vector3 lossyScale { get; }
	public bool hasChanged { get; set; }

	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
	// RVA: 0x440F50 Offset: 0x43F750 VA: 0x180440F50
	public Vector3 get_position() { }
	// RVA: 0x440FC0 Offset: 0x43F7C0 VA: 0x180440FC0
	public void set_position(Vector3 value) { }
	// RVA: 0x441020 Offset: 0x43F820 VA: 0x180441020
	public Vector3 get_localPosition() { }
	// RVA: 0x441090 Offset: 0x43F890 VA: 0x180441090
	public void set_localPosition(Vector3 value) { }
	// RVA: 0x4410F0 Offset: 0x43F8F0 VA: 0x1804410F0
	public Vector3 get_eulerAngles() { }
	// RVA: 0x441190 Offset: 0x43F990 VA: 0x180441190
	public void set_eulerAngles(Vector3 value) { }
	// RVA: 0x4412A0 Offset: 0x43FAA0 VA: 0x1804412A0
	public Vector3 get_right() { }
	// RVA: 0x441410 Offset: 0x43FC10 VA: 0x180441410
	public Vector3 get_up() { }
	// RVA: 0x441580 Offset: 0x43FD80 VA: 0x180441580
	public Vector3 get_forward() { }
	// RVA: 0x4416F0 Offset: 0x43FEF0 VA: 0x1804416F0
	public void set_forward(Vector3 value) { }
	// RVA: 0x441800 Offset: 0x440000 VA: 0x180441800
	public Quaternion get_rotation() { }
	// RVA: 0x441870 Offset: 0x440070 VA: 0x180441870
	public void set_rotation(Quaternion value) { }
	// RVA: 0x4418D0 Offset: 0x4400D0 VA: 0x1804418D0
	public Quaternion get_localRotation() { }
	// RVA: 0x441940 Offset: 0x440140 VA: 0x180441940
	public void set_localRotation(Quaternion value) { }
	// RVA: 0x4419A0 Offset: 0x4401A0 VA: 0x1804419A0
	public Vector3 get_localScale() { }
	// RVA: 0x441A10 Offset: 0x440210 VA: 0x180441A10
	public void set_localScale(Vector3 value) { }
	// RVA: 0x441A70 Offset: 0x440270 VA: 0x180441A70
	public Transform get_parent() { }
	// RVA: 0x441AC0 Offset: 0x4402C0 VA: 0x180441AC0
	public void set_parent(Transform value) { }
	// RVA: 0x441A70 Offset: 0x440270 VA: 0x180441A70
	internal Transform get_parentInternal() { }
	// RVA: 0x441BD0 Offset: 0x4403D0 VA: 0x180441BD0
	internal void set_parentInternal(Transform value) { }
	// RVA: 0x441A70 Offset: 0x440270 VA: 0x180441A70
	private Transform GetParent() { }
	// RVA: 0x441BD0 Offset: 0x4403D0 VA: 0x180441BD0
	public void SetParent(Transform p) { }
	// RVA: 0x441C40 Offset: 0x440440 VA: 0x180441C40
	public void SetParent(Transform parent, bool worldPositionStays) { }
	// RVA: 0x441CB0 Offset: 0x4404B0 VA: 0x180441CB0
	public Matrix4x4 get_worldToLocalMatrix() { }
	// RVA: 0x441D30 Offset: 0x440530 VA: 0x180441D30
	public Matrix4x4 get_localToWorldMatrix() { }
	// RVA: 0x441DB0 Offset: 0x4405B0 VA: 0x180441DB0
	public void Translate(Vector3 translation, Space relativeTo) { }
	// RVA: 0x442080 Offset: 0x440880 VA: 0x180442080
	public void Translate(Vector3 translation) { }
	// RVA: 0x4420B0 Offset: 0x4408B0 VA: 0x1804420B0
	public void Rotate(Vector3 eulers, Space relativeTo) { }
	// RVA: 0x442470 Offset: 0x440C70 VA: 0x180442470
	public void Rotate(Vector3 eulers) { }
	// RVA: 0x4424A0 Offset: 0x440CA0 VA: 0x1804424A0
	public void Rotate(float xAngle, float yAngle, float zAngle, Space relativeTo) { }
	// RVA: 0x4424D0 Offset: 0x440CD0 VA: 0x1804424D0
	internal void RotateAroundInternal(Vector3 axis, float angle) { }
	// RVA: 0x442540 Offset: 0x440D40 VA: 0x180442540
	public void Rotate(Vector3 axis, float angle, Space relativeTo) { }
	// RVA: 0x442720 Offset: 0x440F20 VA: 0x180442720
	public void Rotate(Vector3 axis, float angle) { }
	// RVA: 0x442880 Offset: 0x441080 VA: 0x180442880
	public void LookAt(Transform target) { }
	// RVA: 0x442A30 Offset: 0x441230 VA: 0x180442A30
	public void LookAt(Vector3 worldPosition, Vector3 worldUp) { }
	// RVA: 0x442AB0 Offset: 0x4412B0 VA: 0x180442AB0
	public void LookAt(Vector3 worldPosition) { }
	// RVA: 0x442BC0 Offset: 0x4413C0 VA: 0x180442BC0
	private void Internal_LookAt(Vector3 worldPosition, Vector3 worldUp) { }
	// RVA: 0x442C30 Offset: 0x441430 VA: 0x180442C30
	public Vector3 TransformDirection(Vector3 direction) { }
	// RVA: 0x442CB0 Offset: 0x4414B0 VA: 0x180442CB0
	public Vector3 InverseTransformDirection(Vector3 direction) { }
	// RVA: 0x442D30 Offset: 0x441530 VA: 0x180442D30
	public Vector3 InverseTransformVector(Vector3 vector) { }
	// RVA: 0x442DB0 Offset: 0x4415B0 VA: 0x180442DB0
	public Vector3 TransformPoint(Vector3 position) { }
	// RVA: 0x442E30 Offset: 0x441630 VA: 0x180442E30
	public Vector3 InverseTransformPoint(Vector3 position) { }
	// RVA: 0x442EB0 Offset: 0x4416B0 VA: 0x180442EB0
	public Transform get_root() { }
	// RVA: 0x442EB0 Offset: 0x4416B0 VA: 0x180442EB0
	private Transform GetRoot() { }
	// RVA: 0x442F00 Offset: 0x441700 VA: 0x180442F00
	public int get_childCount() { }
	// RVA: 0x442F50 Offset: 0x441750 VA: 0x180442F50
	public void SetAsFirstSibling() { }
	// RVA: 0x442FA0 Offset: 0x4417A0 VA: 0x180442FA0
	private static Transform FindRelativeTransformWithPath(Transform transform, string path, bool isActiveOnly) { }
	// RVA: 0x443010 Offset: 0x441810 VA: 0x180443010
	public Transform Find(string n) { }
	// RVA: 0x443110 Offset: 0x441910 VA: 0x180443110
	public Vector3 get_lossyScale() { }
	// RVA: 0x443180 Offset: 0x441980 VA: 0x180443180
	public bool IsChildOf(Transform parent) { }
	// RVA: 0x4431E0 Offset: 0x4419E0 VA: 0x1804431E0
	public bool get_hasChanged() { }
	// RVA: 0x443230 Offset: 0x441A30 VA: 0x180443230
	public void set_hasChanged(bool value) { }
	// RVA: 0x443290 Offset: 0x441A90 VA: 0x180443290 Slot: 4
	public IEnumerator GetEnumerator() { }
	// RVA: 0x443310 Offset: 0x441B10 VA: 0x180443310
	public Transform GetChild(int index) { }
	// RVA: 0x443370 Offset: 0x441B70 VA: 0x180443370
	private void get_position_Injected(out Vector3 ret) { }
	// RVA: 0x4433D0 Offset: 0x441BD0 VA: 0x1804433D0
	private void set_position_Injected(ref Vector3 value) { }
	// RVA: 0x443430 Offset: 0x441C30 VA: 0x180443430
	private void get_localPosition_Injected(out Vector3 ret) { }
	// RVA: 0x443490 Offset: 0x441C90 VA: 0x180443490
	private void set_localPosition_Injected(ref Vector3 value) { }
	// RVA: 0x4434F0 Offset: 0x441CF0 VA: 0x1804434F0
	private void get_rotation_Injected(out Quaternion ret) { }
	// RVA: 0x443550 Offset: 0x441D50 VA: 0x180443550
	private void set_rotation_Injected(ref Quaternion value) { }
	// RVA: 0x4435B0 Offset: 0x441DB0 VA: 0x1804435B0
	private void get_localRotation_Injected(out Quaternion ret) { }
	// RVA: 0x443610 Offset: 0x441E10 VA: 0x180443610
	private void set_localRotation_Injected(ref Quaternion value) { }
	// RVA: 0x443670 Offset: 0x441E70 VA: 0x180443670
	private void get_localScale_Injected(out Vector3 ret) { }
	// RVA: 0x4436D0 Offset: 0x441ED0 VA: 0x1804436D0
	private void set_localScale_Injected(ref Vector3 value) { }
	// RVA: 0x443730 Offset: 0x441F30 VA: 0x180443730
	private void get_worldToLocalMatrix_Injected(out Matrix4x4 ret) { }
	// RVA: 0x443790 Offset: 0x441F90 VA: 0x180443790
	private void get_localToWorldMatrix_Injected(out Matrix4x4 ret) { }
	// RVA: 0x4437F0 Offset: 0x441FF0 VA: 0x1804437F0
	private void RotateAroundInternal_Injected(ref Vector3 axis, float angle) { }
	// RVA: 0x443860 Offset: 0x442060 VA: 0x180443860
	private void Internal_LookAt_Injected(ref Vector3 worldPosition, ref Vector3 worldUp) { }
	// RVA: 0x4438D0 Offset: 0x4420D0 VA: 0x1804438D0
	private void TransformDirection_Injected(ref Vector3 direction, out Vector3 ret) { }
	// RVA: 0x443940 Offset: 0x442140 VA: 0x180443940
	private void InverseTransformDirection_Injected(ref Vector3 direction, out Vector3 ret) { }
	// RVA: 0x4439B0 Offset: 0x4421B0 VA: 0x1804439B0
	private void InverseTransformVector_Injected(ref Vector3 vector, out Vector3 ret) { }
	// RVA: 0x443A20 Offset: 0x442220 VA: 0x180443A20
	private void TransformPoint_Injected(ref Vector3 position, out Vector3 ret) { }
	// RVA: 0x443A90 Offset: 0x442290 VA: 0x180443A90
	private void InverseTransformPoint_Injected(ref Vector3 position, out Vector3 ret) { }
	// RVA: 0x443B00 Offset: 0x442300 VA: 0x180443B00
	private void get_lossyScale_Injected(out Vector3 ret) { }
}

// Namespace: 
private class Transform.Enumerator : IEnumerator // TypeDefIndex: 1526
{
	// Fields
	private Transform outer; // 0x10
	private int currentIndex; // 0x18

	// Properties
	public object Current { get; }

	// Methods
	// RVA: 0x660930 Offset: 0x65F130 VA: 0x180660930
	internal void .ctor(Transform outer) { }
	// RVA: 0x669DE0 Offset: 0x6685E0 VA: 0x180669DE0 Slot: 5
	public object get_Current() { }
	// RVA: 0x669E50 Offset: 0x668650 VA: 0x180669E50 Slot: 4
	public bool MoveNext() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xDD310 Offset: 0xDC710 VA: 0x1800DD310
public sealed class SpriteRenderer : Renderer // TypeDefIndex: 1527
{}

// Namespace: UnityEngine
public enum SpritePackingMode // TypeDefIndex: 1528
{
	// Fields
	public int value__; // 0x0
	public const SpritePackingMode Tight = 0; // 0x0
	public const SpritePackingMode Rectangle = 1; // 0x0
}

// Namespace: UnityEngine
public sealed class Sprite : Object // TypeDefIndex: 1529
{
	// Properties
	public Bounds bounds { get; }
	public Rect rect { get; }
	public Vector4 border { get; }
	public Texture2D texture { get; }
	public float pixelsPerUnit { get; }
	public Texture2D associatedAlphaSplitTexture { get; }
	public Vector2 pivot { get; }
	public bool packed { get; }
	public SpritePackingMode packingMode { get; }
	public Rect textureRect { get; }
	public Vector2[] vertices { get; }
	public ushort[] triangles { get; }
	public Vector2[] uv { get; }

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4385B0 Offset: 0x436DB0 VA: 0x1804385B0
	private void .ctor() { }
	// RVA: 0x438640 Offset: 0x436E40 VA: 0x180438640
	internal int GetPackingMode() { }
	// RVA: 0x438690 Offset: 0x436E90 VA: 0x180438690
	internal int GetPacked() { }
	// RVA: 0x4386E0 Offset: 0x436EE0 VA: 0x1804386E0
	internal Rect GetTextureRect() { }
	// RVA: 0x438750 Offset: 0x436F50 VA: 0x180438750
	internal Vector4 GetInnerUVs() { }
	// RVA: 0x4387C0 Offset: 0x436FC0 VA: 0x1804387C0
	internal Vector4 GetOuterUVs() { }
	// RVA: 0x438830 Offset: 0x437030 VA: 0x180438830
	internal Vector4 GetPadding() { }
	// RVA: 0x4388A0 Offset: 0x4370A0 VA: 0x1804388A0
	public Bounds get_bounds() { }
	// RVA: 0x438910 Offset: 0x437110 VA: 0x180438910
	public Rect get_rect() { }
	// RVA: 0x438980 Offset: 0x437180 VA: 0x180438980
	public Vector4 get_border() { }
	// RVA: 0x4389F0 Offset: 0x4371F0 VA: 0x1804389F0
	public Texture2D get_texture() { }
	// RVA: 0x438A40 Offset: 0x437240 VA: 0x180438A40
	public float get_pixelsPerUnit() { }
	// RVA: 0x438A90 Offset: 0x437290 VA: 0x180438A90
	public Texture2D get_associatedAlphaSplitTexture() { }
	// RVA: 0x438AE0 Offset: 0x4372E0 VA: 0x180438AE0
	public Vector2 get_pivot() { }
	// RVA: 0x438B50 Offset: 0x437350 VA: 0x180438B50
	public bool get_packed() { }
	// RVA: 0x438640 Offset: 0x436E40 VA: 0x180438640
	public SpritePackingMode get_packingMode() { }
	// RVA: 0x438BB0 Offset: 0x4373B0 VA: 0x180438BB0
	public Rect get_textureRect() { }
	// RVA: 0x438CD0 Offset: 0x4374D0 VA: 0x180438CD0
	public Vector2[] get_vertices() { }
	// RVA: 0x438D20 Offset: 0x437520 VA: 0x180438D20
	public ushort[] get_triangles() { }
	// RVA: 0x438D70 Offset: 0x437570 VA: 0x180438D70
	public Vector2[] get_uv() { }
	// RVA: 0x438DC0 Offset: 0x4375C0 VA: 0x180438DC0
	private void GetTextureRect_Injected(out Rect ret) { }
	// RVA: 0x438E20 Offset: 0x437620 VA: 0x180438E20
	private void GetInnerUVs_Injected(out Vector4 ret) { }
	// RVA: 0x438E80 Offset: 0x437680 VA: 0x180438E80
	private void GetOuterUVs_Injected(out Vector4 ret) { }
	// RVA: 0x438EE0 Offset: 0x4376E0 VA: 0x180438EE0
	private void GetPadding_Injected(out Vector4 ret) { }
	// RVA: 0x438F40 Offset: 0x437740 VA: 0x180438F40
	private void get_bounds_Injected(out Bounds ret) { }
	// RVA: 0x438FA0 Offset: 0x4377A0 VA: 0x180438FA0
	private void get_rect_Injected(out Rect ret) { }
	// RVA: 0x439000 Offset: 0x437800 VA: 0x180439000
	private void get_border_Injected(out Vector4 ret) { }
	// RVA: 0x439060 Offset: 0x437860 VA: 0x180439060
	private void get_pivot_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine._Scripting.APIUpdating
internal class APIUpdaterRuntimeHelpers // TypeDefIndex: 1530
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x535E60 Offset: 0x534660 VA: 0x180535E60
	internal static bool GetMovedFromAttributeDataForType(Type sourceType, out string assembly, out string nsp, out string klass) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x535FD0 Offset: 0x5347D0 VA: 0x180535FD0
	internal static bool GetObsoleteTypeRedirection(Type sourceType, out string assemblyName, out string nsp, out string className) { }
}

// Namespace: UnityEngine.Sprites
public sealed class DataUtility // TypeDefIndex: 1531
{
	// Methods
	// RVA: 0x543490 Offset: 0x541C90 VA: 0x180543490
	public static Vector4 GetInnerUV(Sprite sprite) { }
	// RVA: 0x543520 Offset: 0x541D20 VA: 0x180543520
	public static Vector4 GetOuterUV(Sprite sprite) { }
	// RVA: 0x5435B0 Offset: 0x541DB0 VA: 0x1805435B0
	public static Vector4 GetPadding(Sprite sprite) { }
	// RVA: 0x543640 Offset: 0x541E40 VA: 0x180543640
	public static Vector2 GetMinSize(Sprite sprite) { }
}

// Namespace: UnityEngine.U2D
[MovedFromAttribute] // RVA: 0xDD390 Offset: 0xDC790 VA: 0x1800DD390
[RequiredByNativeCodeAttribute] // RVA: 0xDD390 Offset: 0xDC790 VA: 0x1800DD390
[Serializable]
public struct SpriteBone // TypeDefIndex: 1532
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_Name; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 m_Position; // 0x8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Quaternion m_Rotation; // 0x14
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_Length; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_ParentId; // 0x28
}

// Namespace: UnityEngine.U2D
public class SpriteAtlasManager // TypeDefIndex: 1533
{
	// Fields
	private static Action<string, Action<SpriteAtlas>> atlasRequested; // 0x0
	private static Action<SpriteAtlas> atlasRegistered; // 0x8

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x439120 Offset: 0x437920 VA: 0x180439120
	private static bool RequestAtlas(string tag) { }
	// RVA: 0x439250 Offset: 0x437A50 VA: 0x180439250
	public static void add_atlasRegistered(Action<SpriteAtlas> value) { }
	// RVA: 0x439390 Offset: 0x437B90 VA: 0x180439390
	public static void remove_atlasRegistered(Action<SpriteAtlas> value) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4394D0 Offset: 0x437CD0 VA: 0x1804394D0
	private static void PostRegisteredAtlas(SpriteAtlas spriteAtlas) { }
	// RVA: 0x439590 Offset: 0x437D90 VA: 0x180439590
	internal static void Register(SpriteAtlas spriteAtlas) { }
	// RVA: 0x4395E0 Offset: 0x437DE0 VA: 0x1804395E0
	private static void .cctor() { }
}

// Namespace: UnityEngine.U2D
public class SpriteAtlas : Object // TypeDefIndex: 1534
{
	// Methods
	// RVA: 0x4390C0 Offset: 0x4378C0 VA: 0x1804390C0
	public bool CanBindTo(Sprite sprite) { }
}

// Namespace: UnityEngine.Profiling.Experimental
public struct DebugScreenCapture // TypeDefIndex: 1535
{
	// Fields
	private NativeArray<byte> <rawImageDataReference>k__BackingField; // 0x0
	private TextureFormat <imageFormat>k__BackingField; // 0x10
	private int <width>k__BackingField; // 0x14
	private int <height>k__BackingField; // 0x18

	// Properties
	set; }
	public TextureFormat imageFormat { set; }
	public int width { set; }
	public int height { set; }

	// Methods
	// RVA: 0x1D7E0 Offset: 0x1CBE0 VA: 0x18001D7E0
	public void set_rawImageDataReference(NativeArray<byte> value) { }
	// RVA: 0x2340 Offset: 0x1740 VA: 0x180002340
	public void set_imageFormat(TextureFormat value) { }
	// RVA: 0xE9B0 Offset: 0xDDB0 VA: 0x18000E9B0
	public void set_width(int value) { }
	// RVA: 0x2040 Offset: 0x1440 VA: 0x180002040
	public void set_height(int value) { }
}

// Namespace: UnityEngine.Profiling.Memory.Experimental
public class MetaData // TypeDefIndex: 1536
{
	// Fields
	public string content; // 0x10
	public string platform; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.Profiling.Memory.Experimental
public sealed class MemoryProfiler // TypeDefIndex: 1537
{
	// Fields
	private static Action<string, bool> m_SnapshotFinished; // 0x0
	private static Action<string, bool, DebugScreenCapture> m_SaveScreenshotToDisk; // 0x8
	private static Action<MetaData> createMetaData; // 0x10

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4E21D0 Offset: 0x4E09D0 VA: 0x1804E21D0
	private static byte[] PrepareMetadata() { }
	// RVA: 0x4E2450 Offset: 0x4E0C50 VA: 0x1804E2450
	internal static int WriteIntToByteArray(byte[] array, int offset, int value) { }
	// RVA: 0x4E2500 Offset: 0x4E0D00 VA: 0x1804E2500
	internal static int WriteStringToByteArray(byte[] array, int offset, string value) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4E2570 Offset: 0x4E0D70 VA: 0x1804E2570
	private static void FinalizeSnapshot(string path, bool result) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4E2620 Offset: 0x4E0E20 VA: 0x1804E2620
	private static void SaveScreenshotToDisk(string path, bool result, IntPtr pixelsPtr, int pixelsCount, TextureFormat format, int width, int height) { }
}

// Namespace: UnityEngine.Windows.Speech
public static class PhraseRecognitionSystem // TypeDefIndex: 1538
{
	// Fields
	private static PhraseRecognitionSystem.ErrorDelegate OnError; // 0x0
	private static PhraseRecognitionSystem.StatusDelegate OnStatusChanged; // 0x8

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4EC860 Offset: 0x4EB060 VA: 0x1804EC860
	private static void PhraseRecognitionSystem_InvokeErrorEvent(SpeechError errorCode) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4EC8F0 Offset: 0x4EB0F0 VA: 0x1804EC8F0
	private static void PhraseRecognitionSystem_InvokeStatusChangedEvent(SpeechSystemStatus status) { }
}

// Namespace: 
public sealed class PhraseRecognitionSystem.ErrorDelegate : MulticastDelegate // TypeDefIndex: 1539
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E940 Offset: 0x44D140 VA: 0x18044E940 Slot: 12
	public virtual void Invoke(SpeechError errorCode) { }
	// RVA: 0x668870 Offset: 0x667070 VA: 0x180668870 Slot: 13
	public virtual IAsyncResult BeginInvoke(SpeechError errorCode, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class PhraseRecognitionSystem.StatusDelegate : MulticastDelegate // TypeDefIndex: 1540
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E940 Offset: 0x44D140 VA: 0x18044E940 Slot: 12
	public virtual void Invoke(SpeechSystemStatus status) { }
	// RVA: 0x668930 Offset: 0x667130 VA: 0x180668930 Slot: 13
	public virtual IAsyncResult BeginInvoke(SpeechSystemStatus status, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Windows.Speech
public abstract class PhraseRecognizer // TypeDefIndex: 1541
{
	// Fields
	protected IntPtr m_Recognizer; // 0x10
	private PhraseRecognizer.PhraseRecognizedDelegate OnPhraseRecognized; // 0x18

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4EC980 Offset: 0x4EB180 VA: 0x1804EC980
	private void InvokePhraseRecognizedEvent(string text, ConfidenceLevel confidence, SemanticMeaning[] semanticMeanings, long phraseStartFileTime, long phraseDurationTicks) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4ECC10 Offset: 0x4EB410 VA: 0x1804ECC10
	private static SemanticMeaning[] MarshalSemanticMeaning(IntPtr keys, IntPtr values, IntPtr valueSizes, int valueCount) { }
}

// Namespace: 
public sealed class PhraseRecognizer.PhraseRecognizedDelegate : MulticastDelegate // TypeDefIndex: 1542
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x6689F0 Offset: 0x6671F0 VA: 0x1806689F0 Slot: 12
	public virtual void Invoke(PhraseRecognizedEventArgs args) { }
	// RVA: 0x668E30 Offset: 0x667630 VA: 0x180668E30 Slot: 13
	public virtual IAsyncResult BeginInvoke(PhraseRecognizedEventArgs args, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Windows.Speech
public sealed class DictationRecognizer // TypeDefIndex: 1543
{
	// Fields
	private IntPtr m_Recognizer; // 0x10
	private DictationRecognizer.DictationHypothesisDelegate DictationHypothesis; // 0x18
	private DictationRecognizer.DictationResultDelegate DictationResult; // 0x20
	private DictationRecognizer.DictationCompletedDelegate DictationComplete; // 0x28
	private DictationRecognizer.DictationErrorHandler DictationError; // 0x30

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x544A60 Offset: 0x543260 VA: 0x180544A60
	private void DictationRecognizer_InvokeHypothesisGeneratedEvent(string keyword) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x544A80 Offset: 0x543280 VA: 0x180544A80
	private void DictationRecognizer_InvokeResultGeneratedEvent(string keyword, ConfidenceLevel minimumConfidence) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x544AA0 Offset: 0x5432A0 VA: 0x180544AA0
	private void DictationRecognizer_InvokeCompletedEvent(DictationCompletionCause cause) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x544AC0 Offset: 0x5432C0 VA: 0x180544AC0
	private void DictationRecognizer_InvokeErrorEvent(string error, int hresult) { }
}

// Namespace: 
public sealed class DictationRecognizer.DictationHypothesisDelegate : MulticastDelegate // TypeDefIndex: 1544
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(string text) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(string text, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class DictationRecognizer.DictationResultDelegate : MulticastDelegate // TypeDefIndex: 1545
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44EC20 Offset: 0x44D420 VA: 0x18044EC20 Slot: 12
	public virtual void Invoke(string text, ConfidenceLevel confidence) { }
	// RVA: 0x44F050 Offset: 0x44D850 VA: 0x18044F050 Slot: 13
	public virtual IAsyncResult BeginInvoke(string text, ConfidenceLevel confidence, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class DictationRecognizer.DictationCompletedDelegate : MulticastDelegate // TypeDefIndex: 1546
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E940 Offset: 0x44D140 VA: 0x18044E940 Slot: 12
	public virtual void Invoke(DictationCompletionCause cause) { }
	// RVA: 0x44EB60 Offset: 0x44D360 VA: 0x18044EB60 Slot: 13
	public virtual IAsyncResult BeginInvoke(DictationCompletionCause cause, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class DictationRecognizer.DictationErrorHandler : MulticastDelegate // TypeDefIndex: 1547
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44EC20 Offset: 0x44D420 VA: 0x18044EC20 Slot: 12
	public virtual void Invoke(string error, int hresult) { }
	// RVA: 0x44EF80 Offset: 0x44D780 VA: 0x18044EF80 Slot: 13
	public virtual IAsyncResult BeginInvoke(string error, int hresult, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Windows.Speech
public enum ConfidenceLevel // TypeDefIndex: 1548
{
	// Fields
	public int value__; // 0x0
	public const ConfidenceLevel High = 0; // 0x0
	public const ConfidenceLevel Medium = 1; // 0x0
	public const ConfidenceLevel Low = 2; // 0x0
	public const ConfidenceLevel Rejected = 3; // 0x0
}

// Namespace: UnityEngine.Windows.Speech
public enum SpeechSystemStatus // TypeDefIndex: 1549
{
	// Fields
	public int value__; // 0x0
	public const SpeechSystemStatus Stopped = 0; // 0x0
	public const SpeechSystemStatus Running = 1; // 0x0
	public const SpeechSystemStatus Failed = 2; // 0x0
}

// Namespace: UnityEngine.Windows.Speech
public enum SpeechError // TypeDefIndex: 1550
{
	// Fields
	public int value__; // 0x0
	public const SpeechError NoError = 0; // 0x0
	public const SpeechError TopicLanguageNotSupported = 1; // 0x0
	public const SpeechError GrammarLanguageMismatch = 2; // 0x0
	public const SpeechError GrammarCompilationFailure = 3; // 0x0
	public const SpeechError AudioQualityFailure = 4; // 0x0
	public const SpeechError PauseLimitExceeded = 5; // 0x0
	public const SpeechError TimeoutExceeded = 6; // 0x0
	public const SpeechError NetworkFailure = 7; // 0x0
	public const SpeechError MicrophoneUnavailable = 8; // 0x0
	public const SpeechError UnknownError = 9; // 0x0
}

// Namespace: UnityEngine.Windows.Speech
public enum DictationCompletionCause // TypeDefIndex: 1551
{
	// Fields
	public int value__; // 0x0
	public const DictationCompletionCause Complete = 0; // 0x0
	public const DictationCompletionCause AudioQualityFailure = 1; // 0x0
	public const DictationCompletionCause Canceled = 2; // 0x0
	public const DictationCompletionCause TimeoutExceeded = 3; // 0x0
	public const DictationCompletionCause PauseLimitExceeded = 4; // 0x0
	public const DictationCompletionCause NetworkFailure = 5; // 0x0
	public const DictationCompletionCause MicrophoneUnavailable = 6; // 0x0
	public const DictationCompletionCause UnknownError = 7; // 0x0
}

// Namespace: UnityEngine.Windows.Speech
public struct SemanticMeaning // TypeDefIndex: 1552
{
	// Fields
	public string key; // 0x0
	public string[] values; // 0x8
}

// Namespace: UnityEngine.Windows.Speech
public struct PhraseRecognizedEventArgs // TypeDefIndex: 1553
{
	// Fields
	public readonly ConfidenceLevel confidence; // 0x0
	public readonly SemanticMeaning[] semanticMeanings; // 0x8
	public readonly string text; // 0x10
	public readonly DateTime phraseStartTime; // 0x18
	public readonly TimeSpan phraseDuration; // 0x20

	// Methods
	// RVA: 0x1D650 Offset: 0x1CA50 VA: 0x18001D650
	internal void .ctor(string text, ConfidenceLevel confidence, SemanticMeaning[] semanticMeanings, DateTime phraseStartTime, TimeSpan phraseDuration) { }
}

// Namespace: UnityEngine.Windows.WebCam
[MovedFromAttribute] // RVA: 0xDD3E0 Offset: 0xDC7E0 VA: 0x1800DD3E0
public class PhotoCapture : IDisposable // TypeDefIndex: 1554
{
	// Fields
	internal IntPtr m_NativePtr; // 0x10
	private static readonly long HR_SUCCESS; // 0x0

	// Methods
	// RVA: 0x4EB9D0 Offset: 0x4EA1D0 VA: 0x1804EB9D0
	private static PhotoCapture.PhotoCaptureResult MakeCaptureResult(long hResult) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4EBAB0 Offset: 0x4EA2B0 VA: 0x1804EBAB0
	private static void InvokeOnCreatedResourceDelegate(PhotoCapture.OnCaptureResourceCreatedCallback callback, IntPtr nativePtr) { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	private void .ctor(IntPtr nativeCaptureObject) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4EBB70 Offset: 0x4EA370 VA: 0x1804EBB70
	private static void InvokeOnPhotoModeStartedDelegate(PhotoCapture.OnPhotoModeStartedCallback callback, long hResult) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4EBC40 Offset: 0x4EA440 VA: 0x1804EBC40
	private static void InvokeOnPhotoModeStoppedDelegate(PhotoCapture.OnPhotoModeStoppedCallback callback, long hResult) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4EBD10 Offset: 0x4EA510 VA: 0x1804EBD10
	private static void InvokeOnCapturedPhotoToDiskDelegate(PhotoCapture.OnCapturedToDiskCallback callback, long hResult) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4EBDE0 Offset: 0x4EA5E0 VA: 0x1804EBDE0
	private static void InvokeOnCapturedPhotoToMemoryDelegate(PhotoCapture.OnCapturedToMemoryCallback callback, long hResult, IntPtr photoCaptureFramePtr) { }
	// RVA: 0x4EBEE0 Offset: 0x4EA6E0 VA: 0x1804EBEE0 Slot: 4
	public void Dispose() { }
	// RVA: 0x4EBFD0 Offset: 0x4EA7D0 VA: 0x1804EBFD0
	private void Dispose_Internal() { }
	// RVA: 0x4EC020 Offset: 0x4EA820 VA: 0x1804EC020 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x4EC130 Offset: 0x4EA930 VA: 0x1804EC130
	private void DisposeThreaded_Internal() { }
	// RVA: 0x4EC180 Offset: 0x4EA980 VA: 0x1804EC180
	private static void .cctor() { }
}

// Namespace: 
public enum PhotoCapture.CaptureResultType // TypeDefIndex: 1555
{
	// Fields
	public int value__; // 0x0
	public const PhotoCapture.CaptureResultType Success = 0; // 0x0
	public const PhotoCapture.CaptureResultType UnknownError = 1; // 0x0
}

// Namespace: 
public struct PhotoCapture.PhotoCaptureResult // TypeDefIndex: 1556
{
	// Fields
	public PhotoCapture.CaptureResultType resultType; // 0x0
	public long hResult; // 0x8
}

// Namespace: 
public sealed class PhotoCapture.OnCaptureResourceCreatedCallback : MulticastDelegate // TypeDefIndex: 1557
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E1A0 Offset: 0x44C9A0 VA: 0x18044E1A0 Slot: 12
	public virtual void Invoke(PhotoCapture captureObject) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(PhotoCapture captureObject, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class PhotoCapture.OnPhotoModeStartedCallback : MulticastDelegate // TypeDefIndex: 1558
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x667F80 Offset: 0x666780 VA: 0x180667F80 Slot: 12
	public virtual void Invoke(PhotoCapture.PhotoCaptureResult result) { }
	// RVA: 0x6686D0 Offset: 0x666ED0 VA: 0x1806686D0 Slot: 13
	public virtual IAsyncResult BeginInvoke(PhotoCapture.PhotoCaptureResult result, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class PhotoCapture.OnPhotoModeStoppedCallback : MulticastDelegate // TypeDefIndex: 1559
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x667F80 Offset: 0x666780 VA: 0x180667F80 Slot: 12
	public virtual void Invoke(PhotoCapture.PhotoCaptureResult result) { }
	// RVA: 0x6687A0 Offset: 0x666FA0 VA: 0x1806687A0 Slot: 13
	public virtual IAsyncResult BeginInvoke(PhotoCapture.PhotoCaptureResult result, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class PhotoCapture.OnCapturedToDiskCallback : MulticastDelegate // TypeDefIndex: 1560
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x667F80 Offset: 0x666780 VA: 0x180667F80 Slot: 12
	public virtual void Invoke(PhotoCapture.PhotoCaptureResult result) { }
	// RVA: 0x6681E0 Offset: 0x6669E0 VA: 0x1806681E0 Slot: 13
	public virtual IAsyncResult BeginInvoke(PhotoCapture.PhotoCaptureResult result, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class PhotoCapture.OnCapturedToMemoryCallback : MulticastDelegate // TypeDefIndex: 1561
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x6682B0 Offset: 0x666AB0 VA: 0x1806682B0 Slot: 12
	public virtual void Invoke(PhotoCapture.PhotoCaptureResult result, PhotoCaptureFrame photoCaptureFrame) { }
	// RVA: 0x668600 Offset: 0x666E00 VA: 0x180668600 Slot: 13
	public virtual IAsyncResult BeginInvoke(PhotoCapture.PhotoCaptureResult result, PhotoCaptureFrame photoCaptureFrame, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Windows.WebCam
[MovedFromAttribute] // RVA: 0xDD3E0 Offset: 0xDC7E0 VA: 0x1800DD3E0
public sealed class PhotoCaptureFrame : IDisposable // TypeDefIndex: 1562
{
	// Fields
	private IntPtr m_NativePtr; // 0x10
	private int <dataLength>k__BackingField; // 0x18
	private bool <hasLocationData>k__BackingField; // 0x1C
	private CapturePixelFormat <pixelFormat>k__BackingField; // 0x20

	// Properties
	public int dataLength { get; set; }
	private bool hasLocationData { set; }
	private CapturePixelFormat pixelFormat { set; }

	// Methods
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0
	public int get_dataLength() { }
	// RVA: 0x1FECF0 Offset: 0x1FD4F0 VA: 0x1801FECF0
	private void set_dataLength(int value) { }
	// RVA: 0x4EC200 Offset: 0x4EAA00 VA: 0x1804EC200
	private void set_hasLocationData(bool value) { }
	// RVA: 0x2E4C50 Offset: 0x2E3450 VA: 0x1802E4C50
	private void set_pixelFormat(CapturePixelFormat value) { }
	// RVA: 0x4EC210 Offset: 0x4EAA10 VA: 0x1804EC210
	private int GetDataLength() { }
	// RVA: 0x4EC260 Offset: 0x4EAA60 VA: 0x1804EC260
	private bool GetHasLocationData() { }
	// RVA: 0x4EC2B0 Offset: 0x4EAAB0 VA: 0x1804EC2B0
	private CapturePixelFormat GetCapturePixelFormat() { }
	// RVA: 0x4EC300 Offset: 0x4EAB00 VA: 0x1804EC300
	internal void .ctor(IntPtr nativePtr) { }
	// RVA: 0x4EC540 Offset: 0x4EAD40 VA: 0x1804EC540
	private void Cleanup() { }
	// RVA: 0x4EC6F0 Offset: 0x4EAEF0 VA: 0x1804EC6F0
	private void Dispose_Internal() { }
	// RVA: 0x4EC740 Offset: 0x4EAF40 VA: 0x1804EC740 Slot: 4
	public void Dispose() { }
	// RVA: 0x4EC7E0 Offset: 0x4EAFE0 VA: 0x1804EC7E0 Slot: 1
	protected override void Finalize() { }
}

// Namespace: UnityEngine.Windows.WebCam
[MovedFromAttribute] // RVA: 0xDD3E0 Offset: 0xDC7E0 VA: 0x1800DD3E0
public class VideoCapture : IDisposable // TypeDefIndex: 1563
{
	// Fields
	internal IntPtr m_NativePtr; // 0x10
	private static readonly long HR_SUCCESS; // 0x0

	// Methods
	// RVA: 0x44C870 Offset: 0x44B070 VA: 0x18044C870
	private static VideoCapture.VideoCaptureResult MakeCaptureResult(long hResult) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x44C950 Offset: 0x44B150 VA: 0x18044C950
	private static void InvokeOnCreatedVideoCaptureResourceDelegate(VideoCapture.OnVideoCaptureResourceCreatedCallback callback, IntPtr nativePtr) { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	private void .ctor(IntPtr nativeCaptureObject) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x44CA10 Offset: 0x44B210 VA: 0x18044CA10
	private static void InvokeOnVideoModeStartedDelegate(VideoCapture.OnVideoModeStartedCallback callback, long hResult) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x44CAE0 Offset: 0x44B2E0 VA: 0x18044CAE0
	private static void InvokeOnVideoModeStoppedDelegate(VideoCapture.OnVideoModeStoppedCallback callback, long hResult) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x44CBB0 Offset: 0x44B3B0 VA: 0x18044CBB0
	private static void InvokeOnStartedRecordingVideoToDiskDelegate(VideoCapture.OnStartedRecordingVideoCallback callback, long hResult) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x44CC80 Offset: 0x44B480 VA: 0x18044CC80
	private static void InvokeOnStoppedRecordingVideoToDiskDelegate(VideoCapture.OnStoppedRecordingVideoCallback callback, long hResult) { }
	// RVA: 0x44CD50 Offset: 0x44B550 VA: 0x18044CD50 Slot: 4
	public void Dispose() { }
	// RVA: 0x44CE40 Offset: 0x44B640 VA: 0x18044CE40
	private void Dispose_Internal() { }
	// RVA: 0x44CE90 Offset: 0x44B690 VA: 0x18044CE90 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x44CFA0 Offset: 0x44B7A0 VA: 0x18044CFA0
	private void DisposeThreaded_Internal() { }
	// RVA: 0x44CFF0 Offset: 0x44B7F0 VA: 0x18044CFF0
	private static void .cctor() { }
}

// Namespace: 
public enum VideoCapture.CaptureResultType // TypeDefIndex: 1564
{
	// Fields
	public int value__; // 0x0
	public const VideoCapture.CaptureResultType Success = 0; // 0x0
	public const VideoCapture.CaptureResultType UnknownError = 1; // 0x0
}

// Namespace: 
public struct VideoCapture.VideoCaptureResult // TypeDefIndex: 1565
{
	// Fields
	public VideoCapture.CaptureResultType resultType; // 0x0
	public long hResult; // 0x8
}

// Namespace: 
public sealed class VideoCapture.OnVideoCaptureResourceCreatedCallback : MulticastDelegate // TypeDefIndex: 1566
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E1A0 Offset: 0x44C9A0 VA: 0x18044E1A0 Slot: 12
	public virtual void Invoke(VideoCapture captureObject) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(VideoCapture captureObject, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class VideoCapture.OnVideoModeStartedCallback : MulticastDelegate // TypeDefIndex: 1567
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x667F80 Offset: 0x666780 VA: 0x180667F80 Slot: 12
	public virtual void Invoke(VideoCapture.VideoCaptureResult result) { }
	// RVA: 0x66A2B0 Offset: 0x668AB0 VA: 0x18066A2B0 Slot: 13
	public virtual IAsyncResult BeginInvoke(VideoCapture.VideoCaptureResult result, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class VideoCapture.OnVideoModeStoppedCallback : MulticastDelegate // TypeDefIndex: 1568
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x667F80 Offset: 0x666780 VA: 0x180667F80 Slot: 12
	public virtual void Invoke(VideoCapture.VideoCaptureResult result) { }
	// RVA: 0x66A380 Offset: 0x668B80 VA: 0x18066A380 Slot: 13
	public virtual IAsyncResult BeginInvoke(VideoCapture.VideoCaptureResult result, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class VideoCapture.OnStartedRecordingVideoCallback : MulticastDelegate // TypeDefIndex: 1569
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x667F80 Offset: 0x666780 VA: 0x180667F80 Slot: 12
	public virtual void Invoke(VideoCapture.VideoCaptureResult result) { }
	// RVA: 0x66A110 Offset: 0x668910 VA: 0x18066A110 Slot: 13
	public virtual IAsyncResult BeginInvoke(VideoCapture.VideoCaptureResult result, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class VideoCapture.OnStoppedRecordingVideoCallback : MulticastDelegate // TypeDefIndex: 1570
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x667F80 Offset: 0x666780 VA: 0x180667F80 Slot: 12
	public virtual void Invoke(VideoCapture.VideoCaptureResult result) { }
	// RVA: 0x66A1E0 Offset: 0x6689E0 VA: 0x18066A1E0 Slot: 13
	public virtual IAsyncResult BeginInvoke(VideoCapture.VideoCaptureResult result, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Windows.WebCam
[MovedFromAttribute] // RVA: 0xDD3E0 Offset: 0xDC7E0 VA: 0x1800DD3E0
public enum CapturePixelFormat // TypeDefIndex: 1571
{
	// Fields
	public int value__; // 0x0
	public const CapturePixelFormat BGRA32 = 0; // 0x0
	public const CapturePixelFormat NV12 = 1; // 0x0
	public const CapturePixelFormat JPEG = 2; // 0x0
	public const CapturePixelFormat PNG = 3; // 0x0
}

// Namespace: UnityEngine.Events
[Serializable]
public enum PersistentListenerMode // TypeDefIndex: 1572
{
	// Fields
	public int value__; // 0x0
	public const PersistentListenerMode EventDefined = 0; // 0x0
	public const PersistentListenerMode Void = 1; // 0x0
	public const PersistentListenerMode Object = 2; // 0x0
	public const PersistentListenerMode Int = 3; // 0x0
	public const PersistentListenerMode Float = 4; // 0x0
	public const PersistentListenerMode String = 5; // 0x0
	public const PersistentListenerMode Bool = 6; // 0x0
}

// Namespace: UnityEngine.Events
internal class UnityEventTools // TypeDefIndex: 1573
{
	// Methods
	// RVA: 0x445010 Offset: 0x443810 VA: 0x180445010
	internal static string TidyAssemblyTypeName(string assemblyTypeName) { }
}

// Namespace: UnityEngine.Events
[Serializable]
internal class ArgumentCache : ISerializationCallbackReceiver // TypeDefIndex: 1574
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xDD430 Offset: 0xDC830 VA: 0x1800DD430
	[SerializeField] // RVA: 0xDD430 Offset: 0xDC830 VA: 0x1800DD430
	private Object m_ObjectArgument; // 0x10
	[FormerlySerializedAsAttribute] // RVA: 0xDD460 Offset: 0xDC860 VA: 0x1800DD460
	[SerializeField] // RVA: 0xDD460 Offset: 0xDC860 VA: 0x1800DD460
	private string m_ObjectArgumentAssemblyTypeName; // 0x18
	[SerializeField] // RVA: 0xDD490 Offset: 0xDC890 VA: 0x1800DD490
	[FormerlySerializedAsAttribute] // RVA: 0xDD490 Offset: 0xDC890 VA: 0x1800DD490
	private int m_IntArgument; // 0x20
	[SerializeField] // RVA: 0xDD4C0 Offset: 0xDC8C0 VA: 0x1800DD4C0
	[FormerlySerializedAsAttribute] // RVA: 0xDD4C0 Offset: 0xDC8C0 VA: 0x1800DD4C0
	private float m_FloatArgument; // 0x24
	[SerializeField] // RVA: 0xDD4F0 Offset: 0xDC8F0 VA: 0x1800DD4F0
	[FormerlySerializedAsAttribute] // RVA: 0xDD4F0 Offset: 0xDC8F0 VA: 0x1800DD4F0
	private string m_StringArgument; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_BoolArgument; // 0x30

	// Properties
	public Object unityObjectArgument { get; }
	public string unityObjectArgumentAssemblyTypeName { get; }
	public int intArgument { get; }
	public float floatArgument { get; }
	public string stringArgument { get; }
	public bool boolArgument { get; }

	// Methods
	// RVA: 0x4E9190 Offset: 0x4E7990 VA: 0x1804E9190
	public Object get_unityObjectArgument() { }
	// RVA: 0x537AA0 Offset: 0x5362A0 VA: 0x180537AA0
	public string get_unityObjectArgumentAssemblyTypeName() { }
	// RVA: 0x537AB0 Offset: 0x5362B0 VA: 0x180537AB0
	public int get_intArgument() { }
	// RVA: 0x537AC0 Offset: 0x5362C0 VA: 0x180537AC0
	public float get_floatArgument() { }
	// RVA: 0x537AD0 Offset: 0x5362D0 VA: 0x180537AD0
	public string get_stringArgument() { }
	// RVA: 0x537AE0 Offset: 0x5362E0 VA: 0x180537AE0
	public bool get_boolArgument() { }
	// RVA: 0x4EB6D0 Offset: 0x4E9ED0 VA: 0x1804EB6D0 Slot: 4
	public void OnBeforeSerialize() { }
	// RVA: 0x4EB6D0 Offset: 0x4E9ED0 VA: 0x1804EB6D0 Slot: 5
	public void OnAfterDeserialize() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.Events
internal abstract class BaseInvokableCall // TypeDefIndex: 1575
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
	// RVA: 0x538750 Offset: 0x536F50 VA: 0x180538750
	protected void .ctor(object target, MethodInfo function) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Invoke(object[] args) { }
	// RVA: 0x52DA20 Offset: 0x52C220 VA: 0x18052DA20
	protected static void ThrowOnInvalidArg(object arg) { }
	// RVA: 0x538860 Offset: 0x537060 VA: 0x180538860
	protected static bool AllowInvoke(Delegate delegate) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool Find(object targetObj, MethodInfo method) { }
}

// Namespace: UnityEngine.Events
internal class InvokableCall : BaseInvokableCall // TypeDefIndex: 1576
{
	// Fields
	private UnityAction Delegate; // 0x10

	// Methods
	// RVA: 0x549810 Offset: 0x548010 VA: 0x180549810
	private void add_Delegate(UnityAction value) { }
	// RVA: 0x5498F0 Offset: 0x5480F0 VA: 0x1805498F0
	private void remove_Delegate(UnityAction value) { }
	// RVA: 0x5499D0 Offset: 0x5481D0 VA: 0x1805499D0
	public void .ctor(object target, MethodInfo theFunction) { }
	// RVA: 0x549BE0 Offset: 0x5483E0 VA: 0x180549BE0
	public void .ctor(UnityAction action) { }
	// RVA: 0x549BF0 Offset: 0x5483F0 VA: 0x180549BF0 Slot: 4
	public override void Invoke(object[] args) { }
	// RVA: 0x549BF0 Offset: 0x5483F0 VA: 0x180549BF0
	public void Invoke() { }
	// RVA: 0x549C30 Offset: 0x548430 VA: 0x180549C30 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1> : BaseInvokableCall // TypeDefIndex: 1577
{
	// Fields
	private UnityAction<T1> Delegate; // 0x0

	// Methods
	// RVA: 0x7275C0 Offset: 0x725DC0 VA: 0x1807275C0
	protected void add_Delegate(UnityAction<T1> value) { }
	// RVA: 0x7276E0 Offset: 0x725EE0 VA: 0x1807276E0
	protected void remove_Delegate(UnityAction<T1> value) { }
	// RVA: 0x727800 Offset: 0x726000 VA: 0x180727800
	public void .ctor(object target, MethodInfo theFunction) { }
	// RVA: 0x727A50 Offset: 0x726250 VA: 0x180727A50
	public void .ctor(UnityAction<T1> action) { }
	// RVA: 0x727A80 Offset: 0x726280 VA: 0x180727A80 Slot: 4
	public override void Invoke(object[] args) { }
	// RVA: 0x727C00 Offset: 0x726400 VA: 0x180727C00 Slot: 6
	public virtual void Invoke(T1 args0) { }
	// RVA: 0x549C30 Offset: 0x548430 VA: 0x180549C30 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1, T2> : BaseInvokableCall // TypeDefIndex: 1578
{
	// Fields
	private UnityAction<T1, T2> Delegate; // 0x0

	// Methods
	// RVA: 0x729580 Offset: 0x727D80 VA: 0x180729580
	public void .ctor(object target, MethodInfo theFunction) { }
	// RVA: 0x7297C0 Offset: 0x727FC0 VA: 0x1807297C0 Slot: 4
	public override void Invoke(object[] args) { }
	// RVA: 0x729A00 Offset: 0x728200 VA: 0x180729A00
	public void Invoke(T1 args0, T2 args1) { }
	// RVA: 0x549C30 Offset: 0x548430 VA: 0x180549C30 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1, T2, T3> : BaseInvokableCall // TypeDefIndex: 1579
{
	// Fields
	private UnityAction<T1, T2, T3> Delegate; // 0x0

	// Methods
	// RVA: 0x729A70 Offset: 0x728270 VA: 0x180729A70
	public void .ctor(object target, MethodInfo theFunction) { }
	// RVA: 0x729CB0 Offset: 0x7284B0 VA: 0x180729CB0 Slot: 4
	public override void Invoke(object[] args) { }
	// RVA: 0x729F90 Offset: 0x728790 VA: 0x180729F90
	public void Invoke(T1 args0, T2 args1, T3 args2) { }
	// RVA: 0x549C30 Offset: 0x548430 VA: 0x180549C30 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
}

// Namespace: UnityEngine.Events
internal class InvokableCall<T1, T2, T3, T4> : BaseInvokableCall // TypeDefIndex: 1580
{
	// Fields
	private UnityAction<T1, T2, T3, T4> Delegate; // 0x0

	// Methods
	// RVA: 0x72A5B0 Offset: 0x728DB0 VA: 0x18072A5B0
	public void .ctor(object target, MethodInfo theFunction) { }
	// RVA: 0x72A7F0 Offset: 0x728FF0 VA: 0x18072A7F0 Slot: 4
	public override void Invoke(object[] args) { }
	// RVA: 0x549C30 Offset: 0x548430 VA: 0x180549C30 Slot: 5
	public override bool Find(object targetObj, MethodInfo method) { }
}

// Namespace: UnityEngine.Events
internal class CachedInvokableCall<T> : InvokableCall<T> // TypeDefIndex: 1581
{
	// Fields
	private readonly T m_Arg1; // 0x0

	// Methods
	// RVA: 0x6169D0 Offset: 0x6151D0 VA: 0x1806169D0
	public void .ctor(Object target, MethodInfo theFunction, T argument) { }
	// RVA: 0x616A20 Offset: 0x615220 VA: 0x180616A20 Slot: 4
	public override void Invoke(object[] args) { }
	// RVA: 0x616A20 Offset: 0x615220 VA: 0x180616A20 Slot: 6
	public override void Invoke(T arg0) { }
}

// Namespace: UnityEngine.Events
public enum UnityEventCallState // TypeDefIndex: 1582
{
	// Fields
	public int value__; // 0x0
	public const UnityEventCallState Off = 0; // 0x0
	public const UnityEventCallState EditorAndRuntime = 1; // 0x0
	public const UnityEventCallState RuntimeOnly = 2; // 0x0
}

// Namespace: UnityEngine.Events
[Serializable]
internal class PersistentCall : ISerializationCallbackReceiver // TypeDefIndex: 1583
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xDD520 Offset: 0xDC920 VA: 0x1800DD520
	[SerializeField] // RVA: 0xDD520 Offset: 0xDC920 VA: 0x1800DD520
	private Object m_Target; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_TargetAssemblyTypeName; // 0x18
	[SerializeField] // RVA: 0xDD550 Offset: 0xDC950 VA: 0x1800DD550
	[FormerlySerializedAsAttribute] // RVA: 0xDD550 Offset: 0xDC950 VA: 0x1800DD550
	private string m_MethodName; // 0x20
	[FormerlySerializedAsAttribute] // RVA: 0xDD580 Offset: 0xDC980 VA: 0x1800DD580
	[SerializeField] // RVA: 0xDD580 Offset: 0xDC980 VA: 0x1800DD580
	private PersistentListenerMode m_Mode; // 0x28
	[FormerlySerializedAsAttribute] // RVA: 0xDD5B0 Offset: 0xDC9B0 VA: 0x1800DD5B0
	[SerializeField] // RVA: 0xDD5B0 Offset: 0xDC9B0 VA: 0x1800DD5B0
	private ArgumentCache m_Arguments; // 0x30
	[SerializeField] // RVA: 0xDD5E0 Offset: 0xDC9E0 VA: 0x1800DD5E0
	[FormerlySerializedAsAttribute] // RVA: 0xDD5E0 Offset: 0xDC9E0 VA: 0x1800DD5E0
	[FormerlySerializedAsAttribute] // RVA: 0xDD5E0 Offset: 0xDC9E0 VA: 0x1800DD5E0
	private UnityEventCallState m_CallState; // 0x38

	// Properties
	public Object target { get; }
	public string targetAssemblyTypeName { get; }
	public string methodName { get; }
	public PersistentListenerMode mode { get; }
	public ArgumentCache arguments { get; }

	// Methods
	// RVA: 0x4E9190 Offset: 0x4E7990 VA: 0x1804E9190
	public Object get_target() { }
	// RVA: 0x4EAD00 Offset: 0x4E9500 VA: 0x1804EAD00
	public string get_targetAssemblyTypeName() { }
	// RVA: 0x4EAE00 Offset: 0x4E9600 VA: 0x1804EAE00
	public string get_methodName() { }
	// RVA: 0x4EAE10 Offset: 0x4E9610 VA: 0x1804EAE10
	public PersistentListenerMode get_mode() { }
	// RVA: 0x4EAE20 Offset: 0x4E9620 VA: 0x1804EAE20
	public ArgumentCache get_arguments() { }
	// RVA: 0x4EAE30 Offset: 0x4E9630 VA: 0x1804EAE30
	public bool IsValid() { }
	// RVA: 0x4EAE70 Offset: 0x4E9670 VA: 0x1804EAE70
	public BaseInvokableCall GetRuntimeCall(UnityEventBase theEvent) { }
	// RVA: 0x4EB130 Offset: 0x4E9930 VA: 0x1804EB130
	private static BaseInvokableCall GetObjectCall(Object target, MethodInfo method, ArgumentCache arguments) { }
	// RVA: 0x4EB6D0 Offset: 0x4E9ED0 VA: 0x1804EB6D0 Slot: 4
	public void OnBeforeSerialize() { }
	// RVA: 0x4EB6D0 Offset: 0x4E9ED0 VA: 0x1804EB6D0 Slot: 5
	public void OnAfterDeserialize() { }
	// RVA: 0x4EB6F0 Offset: 0x4E9EF0 VA: 0x1804EB6F0
	public void .ctor() { }
}

// Namespace: UnityEngine.Events
[Serializable]
internal class PersistentCallGroup // TypeDefIndex: 1584
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0xDD640 Offset: 0xDCA40 VA: 0x1800DD640
	[SerializeField] // RVA: 0xDD640 Offset: 0xDCA40 VA: 0x1800DD640
	private List<PersistentCall> m_Calls; // 0x10

	// Methods
	// RVA: 0x4EB780 Offset: 0x4E9F80 VA: 0x1804EB780
	public void .ctor() { }
	// RVA: 0x4EB820 Offset: 0x4EA020 VA: 0x1804EB820
	public void Initialize(InvokableCallList invokableList, UnityEventBase unityEventBase) { }
}

// Namespace: UnityEngine.Events
internal class InvokableCallList // TypeDefIndex: 1585
{
	// Fields
	private readonly List<BaseInvokableCall> m_PersistentCalls; // 0x10
	private readonly List<BaseInvokableCall> m_RuntimeCalls; // 0x18
	private readonly List<BaseInvokableCall> m_ExecutingCalls; // 0x20
	private bool m_NeedsUpdate; // 0x28

	// Methods
	// RVA: 0x549CA0 Offset: 0x5484A0 VA: 0x180549CA0
	public void AddPersistentInvokableCall(BaseInvokableCall call) { }
	// RVA: 0x549D40 Offset: 0x548540 VA: 0x180549D40
	public void AddListener(BaseInvokableCall call) { }
	// RVA: 0x549DE0 Offset: 0x5485E0 VA: 0x180549DE0
	public void RemoveListener(object targetObj, MethodInfo method) { }
	// RVA: 0x549FA0 Offset: 0x5487A0 VA: 0x180549FA0
	public void ClearPersistent() { }
	// RVA: 0x54A050 Offset: 0x548850 VA: 0x18054A050
	public List<BaseInvokableCall> PrepareInvoke() { }
	// RVA: 0x54A170 Offset: 0x548970 VA: 0x18054A170
	public void .ctor() { }
}

// Namespace: UnityEngine.Events
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public abstract class UnityEventBase : ISerializationCallbackReceiver // TypeDefIndex: 1586
{
	// Fields
	private InvokableCallList m_Calls; // 0x10
	[SerializeField] // RVA: 0xDD670 Offset: 0xDCA70 VA: 0x1800DD670
	[FormerlySerializedAsAttribute] // RVA: 0xDD670 Offset: 0xDCA70 VA: 0x1800DD670
	private PersistentCallGroup m_PersistentCalls; // 0x18
	private bool m_CallsDirty; // 0x20

	// Methods
	// RVA: 0x4441E0 Offset: 0x4429E0 VA: 0x1804441E0
	protected void .ctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 4
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }
	// RVA: 0x4443D0 Offset: 0x442BD0 VA: 0x1804443D0 Slot: 5
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
	// RVA: -1 Offset: -1 Slot: 6
	protected abstract MethodInfo FindMethod_Impl(string name, Type targetObjType) { }
	// RVA: -1 Offset: -1 Slot: 7
	internal abstract BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	// RVA: 0x4444A0 Offset: 0x442CA0 VA: 0x1804444A0
	internal MethodInfo FindMethod(PersistentCall call) { }
	// RVA: 0x4446A0 Offset: 0x442EA0 VA: 0x1804446A0
	internal MethodInfo FindMethod(string name, Type listenerType, PersistentListenerMode mode, Type argumentType) { }
	// RVA: 0x4443D0 Offset: 0x442BD0 VA: 0x1804443D0
	private void DirtyPersistentCalls() { }
	// RVA: 0x444AC0 Offset: 0x4432C0 VA: 0x180444AC0
	private void RebuildPersistentCallsIfNeeded() { }
	// RVA: 0x444B00 Offset: 0x443300 VA: 0x180444B00
	internal void AddCall(BaseInvokableCall call) { }
	// RVA: 0x444BA0 Offset: 0x4433A0 VA: 0x180444BA0
	protected void RemoveListener(object targetObj, MethodInfo method) { }
	// RVA: 0x444BC0 Offset: 0x4433C0 VA: 0x180444BC0
	internal List<BaseInvokableCall> PrepareInvoke() { }
	// RVA: 0x444D10 Offset: 0x443510 VA: 0x180444D10 Slot: 3
	public override string ToString() { }
	// RVA: 0x444DF0 Offset: 0x4435F0 VA: 0x180444DF0
	public static MethodInfo GetValidMethodInfo(Type objectType, string functionName, Type[] argumentTypes) { }
}

// Namespace: UnityEngine.Events
public sealed class UnityAction : MulticastDelegate // TypeDefIndex: 1587
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Events
[Serializable]
public class UnityEvent : UnityEventBase // TypeDefIndex: 1588
{
	// Fields
	private object[] m_InvokeArray; // 0x28

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x443D70 Offset: 0x442570 VA: 0x180443D70
	public void .ctor() { }
	// RVA: 0x443D80 Offset: 0x442580 VA: 0x180443D80
	public void AddListener(UnityAction call) { }
	// RVA: 0x443E30 Offset: 0x442630 VA: 0x180443E30 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, Type targetObjType) { }
	// RVA: 0x443ED0 Offset: 0x4426D0 VA: 0x180443ED0 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	// RVA: 0x443F70 Offset: 0x442770 VA: 0x180443F70
	private static BaseInvokableCall GetDelegate(UnityAction action) { }
	// RVA: 0x444010 Offset: 0x442810 VA: 0x180444010
	public void Invoke() { }
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0> : MulticastDelegate // TypeDefIndex: 1589
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x687BD0 Offset: 0x6863D0 VA: 0x180687BD0 Slot: 12
	public virtual void Invoke(T0 arg0) { }
	// RVA: 0x7C5580 Offset: 0x7C3D80 VA: 0x1807C5580 Slot: 13
	public virtual IAsyncResult BeginInvoke(T0 arg0, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Events
[Serializable]
public class UnityEvent<T0> : UnityEventBase // TypeDefIndex: 1590
{
	// Fields
	private object[] m_InvokeArray; // 0x0

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x443D70 Offset: 0x442570 VA: 0x180443D70
	public void .ctor() { }
	// RVA: 0x8099F0 Offset: 0x8081F0 VA: 0x1808099F0
	public void AddListener(UnityAction<T0> call) { }
	// RVA: 0x809A30 Offset: 0x808230 VA: 0x180809A30
	public void RemoveListener(UnityAction<T0> call) { }
	// RVA: 0x80B490 Offset: 0x809C90 VA: 0x18080B490 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, Type targetObjType) { }
	// RVA: 0x809BD0 Offset: 0x8083D0 VA: 0x180809BD0 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	// RVA: 0x809C50 Offset: 0x808450 VA: 0x180809C50
	private static BaseInvokableCall GetDelegate(UnityAction<T0> action) { }
	// RVA: 0x80B5D0 Offset: 0x809DD0 VA: 0x18080B5D0
	public void Invoke(T0 arg0) { }
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0, T1> : MulticastDelegate // TypeDefIndex: 1591
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x7C62B0 Offset: 0x7C4AB0 VA: 0x1807C62B0 Slot: 12
	public virtual void Invoke(T0 arg0, T1 arg1) { }
	// RVA: 0x7C65D0 Offset: 0x7C4DD0 VA: 0x1807C65D0 Slot: 13
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Events
[Serializable]
public class UnityEvent<T0, T1> : UnityEventBase // TypeDefIndex: 1592
{
	// Fields
	private object[] m_InvokeArray; // 0x0

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x443D70 Offset: 0x442570 VA: 0x180443D70
	public void .ctor() { }
	// RVA: 0x80B880 Offset: 0x80A080 VA: 0x18080B880 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, Type targetObjType) { }
	// RVA: 0x80BA30 Offset: 0x80A230 VA: 0x18080BA30 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	// RVA: 0x80BAB0 Offset: 0x80A2B0 VA: 0x18080BAB0
	public void Invoke(T0 arg0, T1 arg1) { }
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0, T1, T2> : MulticastDelegate // TypeDefIndex: 1593
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26EFE0 Offset: 0x26D7E0 VA: 0x18026EFE0 Slot: 12
	public virtual void Invoke(T0 arg0, T1 arg1, T2 arg2) { }
	// RVA: 0x809420 Offset: 0x807C20 VA: 0x180809420 Slot: 13
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Events
[Serializable]
public class UnityEvent<T0, T1, T2> : UnityEventBase // TypeDefIndex: 1594
{
	// Fields
	private object[] m_InvokeArray; // 0x0

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x443D70 Offset: 0x442570 VA: 0x180443D70
	public void .ctor() { }
	// RVA: 0x80BDD0 Offset: 0x80A5D0 VA: 0x18080BDD0 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, Type targetObjType) { }
	// RVA: 0x809BD0 Offset: 0x8083D0 VA: 0x180809BD0 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
	// RVA: 0x80BFE0 Offset: 0x80A7E0 VA: 0x18080BFE0
	public void Invoke(T0 arg0, T1 arg1, T2 arg2) { }
}

// Namespace: UnityEngine.Events
public sealed class UnityAction<T0, T1, T2, T3> : MulticastDelegate // TypeDefIndex: 1595
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x809500 Offset: 0x807D00 VA: 0x180809500 Slot: 12
	public virtual void Invoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3) { }
	// RVA: 0x8099A0 Offset: 0x8081A0 VA: 0x1808099A0 Slot: 13
	public virtual IAsyncResult BeginInvoke(T0 arg0, T1 arg1, T2 arg2, T3 arg3, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Events
[Serializable]
public class UnityEvent<T0, T1, T2, T3> : UnityEventBase // TypeDefIndex: 1596
{
	// Fields
	private object[] m_InvokeArray; // 0x0

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x443D70 Offset: 0x442570 VA: 0x180443D70
	public void .ctor() { }
	// RVA: 0x80C970 Offset: 0x80B170 VA: 0x18080C970 Slot: 6
	protected override MethodInfo FindMethod_Impl(string name, Type targetObjType) { }
	// RVA: 0x80CBE0 Offset: 0x80B3E0 VA: 0x18080CBE0 Slot: 7
	internal override BaseInvokableCall GetDelegate(object target, MethodInfo theFunction) { }
}

// Namespace: UnityEngine.Serialization
[AttributeUsageAttribute] // RVA: 0xDD6A0 Offset: 0xDCAA0 VA: 0x1800DD6A0
[RequiredByNativeCodeAttribute] // RVA: 0xDD6A0 Offset: 0xDCAA0 VA: 0x1800DD6A0
public class FormerlySerializedAsAttribute : Attribute // TypeDefIndex: 1597
{
	// Fields
	private string m_oldName; // 0x10

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(string oldName) { }
}

// Namespace: UnityEngine.Scripting
[AttributeUsageAttribute] // RVA: 0xDD6C0 Offset: 0xDCAC0 VA: 0x1800DD6C0
[RequiredByNativeCodeAttribute] // RVA: 0xDD6C0 Offset: 0xDCAC0 VA: 0x1800DD6C0
public class PreserveAttribute : Attribute // TypeDefIndex: 1598
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.Scripting.APIUpdating
internal struct MovedFromAttributeData // TypeDefIndex: 1599
{
	// Fields
	public string className; // 0x0
	public string nameSpace; // 0x8
	public string assembly; // 0x10
	public bool classHasChanged; // 0x18
	public bool nameSpaceHasChanged; // 0x19
	public bool assemblyHasChanged; // 0x1A
	public bool autoUdpateAPI; // 0x1B

	// Methods
	// RVA: 0x1D600 Offset: 0x1CA00 VA: 0x18001D600
	public void Set(bool autoUpdateAPI, string sourceNamespace, string sourceAssembly, string sourceClassName) { }
}

// Namespace: UnityEngine.Scripting.APIUpdating
[AttributeUsageAttribute] // RVA: 0xDD6E0 Offset: 0xDCAE0 VA: 0x1800DD6E0
public class MovedFromAttribute : Attribute // TypeDefIndex: 1600
{
	// Fields
	internal MovedFromAttributeData data; // 0x10

	// Methods
	// RVA: 0x4E89F0 Offset: 0x4E71F0 VA: 0x1804E89F0
	public void .ctor(bool autoUpdateAPI, string sourceNamespace, string sourceAssembly, string sourceClassName) { }
	// RVA: 0x4E8A20 Offset: 0x4E7220 VA: 0x1804E8A20
	public void .ctor(string sourceNamespace) { }
}

// Namespace: UnityEngine.SceneManagement
[Serializable]
public struct Scene // TypeDefIndex: 1601
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_Handle; // 0x0

	// Properties
	public int handle { get; }
	public string name { get; }
	public bool isLoaded { get; }
	public int buildIndex { get; }
	public int rootCount { get; }

	// Methods
	// RVA: 0x435240 Offset: 0x433A40 VA: 0x180435240
	private static bool IsValidInternal(int sceneHandle) { }
	// RVA: 0x435290 Offset: 0x433A90 VA: 0x180435290
	private static string GetNameInternal(int sceneHandle) { }
	// RVA: 0x4352E0 Offset: 0x433AE0 VA: 0x1804352E0
	private static bool GetIsLoadedInternal(int sceneHandle) { }
	// RVA: 0x435330 Offset: 0x433B30 VA: 0x180435330
	private static int GetBuildIndexInternal(int sceneHandle) { }
	// RVA: 0x435380 Offset: 0x433B80 VA: 0x180435380
	private static int GetRootCountInternal(int sceneHandle) { }
	// RVA: 0x4353D0 Offset: 0x433BD0 VA: 0x1804353D0
	private static void GetRootGameObjectsInternal(int sceneHandle, object resultRootList) { }
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060
	public int get_handle() { }
	// RVA: 0x160C0 Offset: 0x154C0 VA: 0x1800160C0
	public bool IsValid() { }
	// RVA: 0x16110 Offset: 0x15510 VA: 0x180016110
	public string get_name() { }
	// RVA: 0x16160 Offset: 0x15560 VA: 0x180016160
	public bool get_isLoaded() { }
	// RVA: 0x161B0 Offset: 0x155B0 VA: 0x1800161B0
	public int get_buildIndex() { }
	// RVA: 0x16200 Offset: 0x15600 VA: 0x180016200
	public int get_rootCount() { }
	// RVA: 0x16250 Offset: 0x15650 VA: 0x180016250
	public GameObject[] GetRootGameObjects() { }
	// RVA: 0x16260 Offset: 0x15660 VA: 0x180016260
	public void GetRootGameObjects(List<GameObject> rootGameObjects) { }
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x16270 Offset: 0x15670 VA: 0x180016270 Slot: 0
	public override bool Equals(object other) { }
}

// Namespace: UnityEngine.SceneManagement
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class SceneManager // TypeDefIndex: 1602
{
	// Fields
	private static UnityAction<Scene, LoadSceneMode> sceneLoaded; // 0x0
	private static UnityAction<Scene> sceneUnloaded; // 0x8
	private static UnityAction<Scene, Scene> activeSceneChanged; // 0x10

	// Properties
	public static int sceneCount { get; }

	// Methods
	// RVA: 0x435880 Offset: 0x434080 VA: 0x180435880
	public static int get_sceneCount() { }
	// RVA: 0x4358D0 Offset: 0x4340D0 VA: 0x1804358D0
	public static Scene GetActiveScene() { }
	// RVA: 0x435930 Offset: 0x434130 VA: 0x180435930
	public static Scene GetSceneByName(string name) { }
	// RVA: 0x435990 Offset: 0x434190 VA: 0x180435990
	public static Scene GetSceneAt(int index) { }
	// RVA: 0x4359F0 Offset: 0x4341F0 VA: 0x1804359F0
	private static AsyncOperation LoadSceneAsyncNameIndexInternal(string sceneName, int sceneBuildIndex, LoadSceneParameters parameters, bool mustCompleteNextFrame) { }
	// RVA: 0x435A70 Offset: 0x434270 VA: 0x180435A70
	private static AsyncOperation UnloadSceneNameIndexInternal(string sceneName, int sceneBuildIndex, bool immediately, UnloadSceneOptions options, out bool outSuccess) { }
	// RVA: 0x435B00 Offset: 0x434300 VA: 0x180435B00
	public static void add_sceneUnloaded(UnityAction<Scene> value) { }
	// RVA: 0x435C00 Offset: 0x434400 VA: 0x180435C00
	public static void remove_sceneUnloaded(UnityAction<Scene> value) { }
	// RVA: 0x435D00 Offset: 0x434500 VA: 0x180435D00
	public static void add_activeSceneChanged(UnityAction<Scene, Scene> value) { }
	// RVA: 0x435E00 Offset: 0x434600 VA: 0x180435E00
	public static void remove_activeSceneChanged(UnityAction<Scene, Scene> value) { }
	// RVA: 0x435F00 Offset: 0x434700 VA: 0x180435F00
	public static void LoadScene(string sceneName, LoadSceneMode mode) { }
	// RVA: 0x435F10 Offset: 0x434710 VA: 0x180435F10
	public static void LoadScene(string sceneName) { }
	// RVA: 0x435F20 Offset: 0x434720 VA: 0x180435F20
	public static Scene LoadScene(string sceneName, LoadSceneParameters parameters) { }
	// RVA: 0x436020 Offset: 0x434820 VA: 0x180436020
	public static AsyncOperation LoadSceneAsync(string sceneName, LoadSceneMode mode) { }
	// RVA: 0x4360A0 Offset: 0x4348A0 VA: 0x1804360A0
	public static AsyncOperation LoadSceneAsync(string sceneName) { }
	// RVA: 0x436110 Offset: 0x434910 VA: 0x180436110
	public static AsyncOperation LoadSceneAsync(string sceneName, LoadSceneParameters parameters) { }
	// RVA: 0x436170 Offset: 0x434970 VA: 0x180436170
	public static AsyncOperation UnloadSceneAsync(string sceneName) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4361E0 Offset: 0x4349E0 VA: 0x1804361E0
	private static void Internal_SceneLoaded(Scene scene, LoadSceneMode mode) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x436280 Offset: 0x434A80 VA: 0x180436280
	private static void Internal_SceneUnloaded(Scene scene) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x436310 Offset: 0x434B10 VA: 0x180436310
	private static void Internal_ActiveSceneChanged(Scene previousActiveScene, Scene newActiveScene) { }
	// RVA: 0x4363B0 Offset: 0x434BB0 VA: 0x1804363B0
	private static void GetActiveScene_Injected(out Scene ret) { }
	// RVA: 0x436400 Offset: 0x434C00 VA: 0x180436400
	private static void GetSceneByName_Injected(string name, out Scene ret) { }
	// RVA: 0x436460 Offset: 0x434C60 VA: 0x180436460
	private static void GetSceneAt_Injected(int index, out Scene ret) { }
	// RVA: 0x4364C0 Offset: 0x434CC0 VA: 0x1804364C0
	private static AsyncOperation LoadSceneAsyncNameIndexInternal_Injected(string sceneName, int sceneBuildIndex, ref LoadSceneParameters parameters, bool mustCompleteNextFrame) { }
}

// Namespace: UnityEngine.SceneManagement
public enum LoadSceneMode // TypeDefIndex: 1603
{
	// Fields
	public int value__; // 0x0
	public const LoadSceneMode Single = 0; // 0x0
	public const LoadSceneMode Additive = 1; // 0x0
}

// Namespace: UnityEngine.SceneManagement
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum LocalPhysicsMode // TypeDefIndex: 1604
{
	// Fields
	public int value__; // 0x0
	public const LocalPhysicsMode None = 0; // 0x0
	public const LocalPhysicsMode Physics2D = 1; // 0x0
	public const LocalPhysicsMode Physics3D = 2; // 0x0
}

// Namespace: UnityEngine.SceneManagement
[Serializable]
public struct LoadSceneParameters // TypeDefIndex: 1605
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private LoadSceneMode m_LoadSceneMode; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private LocalPhysicsMode m_LocalPhysicsMode; // 0x4

	// Methods
	// RVA: 0x210A0 Offset: 0x204A0 VA: 0x1800210A0
	public void .ctor(LoadSceneMode mode) { }
}

// Namespace: UnityEngine.SceneManagement
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum UnloadSceneOptions // TypeDefIndex: 1606
{
	// Fields
	public int value__; // 0x0
	public const UnloadSceneOptions None = 0; // 0x0
	public const UnloadSceneOptions UnloadAllEmbeddedSceneObjects = 1; // 0x0
}

// Namespace: UnityEngine.LowLevel
[RequiredByNativeCodeAttribute] // RVA: 0xDD700 Offset: 0xDCB00 VA: 0x1800DD700
[MovedFromAttribute] // RVA: 0xDD700 Offset: 0xDCB00 VA: 0x1800DD700
internal struct PlayerLoopSystemInternal // TypeDefIndex: 1607
{
	// Fields
	public Type type; // 0x0
	public PlayerLoopSystem.UpdateFunction updateDelegate; // 0x8
	public IntPtr updateFunction; // 0x10
	public IntPtr loopConditionFunction; // 0x18
	public int numSubSystems; // 0x20
}

// Namespace: UnityEngine.LowLevel
[MovedFromAttribute] // RVA: 0xDD750 Offset: 0xDCB50 VA: 0x1800DD750
public struct PlayerLoopSystem // TypeDefIndex: 1608
{
	// Fields
	public Type type; // 0x0
	public PlayerLoopSystem[] subSystemList; // 0x8
	public PlayerLoopSystem.UpdateFunction updateDelegate; // 0x10
	public IntPtr updateFunction; // 0x18
	public IntPtr loopConditionFunction; // 0x20
}

// Namespace: 
public sealed class PlayerLoopSystem.UpdateFunction : MulticastDelegate // TypeDefIndex: 1609
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.PlayerLoop
[MovedFromAttribute] // RVA: 0xDD7A0 Offset: 0xDCBA0 VA: 0x1800DD7A0
[RequiredByNativeCodeAttribute] // RVA: 0xDD7A0 Offset: 0xDCBA0 VA: 0x1800DD7A0
public struct Initialization // TypeDefIndex: 1610
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Initialization.PlayerUpdateTime // TypeDefIndex: 1611
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Initialization.DirectorSampleTime // TypeDefIndex: 1612
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Initialization.AsyncUploadTimeSlicedUpdate // TypeDefIndex: 1613
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Initialization.SynchronizeState // TypeDefIndex: 1614
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Initialization.SynchronizeInputs // TypeDefIndex: 1615
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Initialization.XREarlyUpdate // TypeDefIndex: 1616
{}

// Namespace: UnityEngine.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xDD7F0 Offset: 0xDCBF0 VA: 0x1800DD7F0
[MovedFromAttribute] // RVA: 0xDD7F0 Offset: 0xDCBF0 VA: 0x1800DD7F0
public struct EarlyUpdate // TypeDefIndex: 1617
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.PollPlayerConnection // TypeDefIndex: 1618
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.ProfilerStartFrame // TypeDefIndex: 1619
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.PollHtcsPlayerConnection // TypeDefIndex: 1620
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.GpuTimestamp // TypeDefIndex: 1621
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.AnalyticsCoreStatsUpdate // TypeDefIndex: 1622
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.UnityWebRequestUpdate // TypeDefIndex: 1623
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.UpdateStreamingManager // TypeDefIndex: 1624
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.ExecuteMainThreadJobs // TypeDefIndex: 1625
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.ProcessMouseInWindow // TypeDefIndex: 1626
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.ClearIntermediateRenderers // TypeDefIndex: 1627
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.ClearLines // TypeDefIndex: 1628
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.PresentBeforeUpdate // TypeDefIndex: 1629
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.ResetFrameStatsAfterPresent // TypeDefIndex: 1630
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.UpdateAsyncReadbackManager // TypeDefIndex: 1631
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.UpdateTextureStreamingManager // TypeDefIndex: 1632
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.UpdatePreloading // TypeDefIndex: 1633
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.RendererNotifyInvisible // TypeDefIndex: 1634
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.PlayerCleanupCachedData // TypeDefIndex: 1635
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.UpdateMainGameViewRect // TypeDefIndex: 1636
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.UpdateCanvasRectTransform // TypeDefIndex: 1637
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.UpdateInputManager // TypeDefIndex: 1638
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.ProcessRemoteInput // TypeDefIndex: 1639
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.XRUpdate // TypeDefIndex: 1640
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.ScriptRunDelayedStartupFrame // TypeDefIndex: 1641
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.UpdateKinect // TypeDefIndex: 1642
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.DeliverIosPlatformEvents // TypeDefIndex: 1643
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.DispatchEventQueueEvents // TypeDefIndex: 1644
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.PhysicsResetInterpolatedTransformPosition // TypeDefIndex: 1645
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.SpriteAtlasManagerUpdate // TypeDefIndex: 1646
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xDD840 Offset: 0xDCC40 VA: 0x1800DD840
[ObsoleteAttribute] // RVA: 0xDD840 Offset: 0xDCC40 VA: 0x1800DD840
public struct EarlyUpdate.TangoUpdate // TypeDefIndex: 1647
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.ARCoreUpdate // TypeDefIndex: 1648
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct EarlyUpdate.PerformanceAnalyticsUpdate // TypeDefIndex: 1649
{}

// Namespace: UnityEngine.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xDD7F0 Offset: 0xDCBF0 VA: 0x1800DD7F0
[MovedFromAttribute] // RVA: 0xDD7F0 Offset: 0xDCBF0 VA: 0x1800DD7F0
public struct FixedUpdate // TypeDefIndex: 1650
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.ClearLines // TypeDefIndex: 1651
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.DirectorFixedSampleTime // TypeDefIndex: 1652
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.AudioFixedUpdate // TypeDefIndex: 1653
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.ScriptRunBehaviourFixedUpdate // TypeDefIndex: 1654
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.DirectorFixedUpdate // TypeDefIndex: 1655
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.LegacyFixedAnimationUpdate // TypeDefIndex: 1656
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.XRFixedUpdate // TypeDefIndex: 1657
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.PhysicsFixedUpdate // TypeDefIndex: 1658
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.Physics2DFixedUpdate // TypeDefIndex: 1659
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.DirectorFixedUpdatePostPhysics // TypeDefIndex: 1660
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.ScriptRunDelayedFixedFrameRate // TypeDefIndex: 1661
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct FixedUpdate.NewInputFixedUpdate // TypeDefIndex: 1662
{}

// Namespace: UnityEngine.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xDD7F0 Offset: 0xDCBF0 VA: 0x1800DD7F0
[MovedFromAttribute] // RVA: 0xDD7F0 Offset: 0xDCBF0 VA: 0x1800DD7F0
public struct PreUpdate // TypeDefIndex: 1663
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreUpdate.PhysicsUpdate // TypeDefIndex: 1664
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreUpdate.Physics2DUpdate // TypeDefIndex: 1665
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreUpdate.CheckTexFieldInput // TypeDefIndex: 1666
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreUpdate.IMGUISendQueuedEvents // TypeDefIndex: 1667
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreUpdate.SendMouseEvents // TypeDefIndex: 1668
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreUpdate.AIUpdate // TypeDefIndex: 1669
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreUpdate.WindUpdate // TypeDefIndex: 1670
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreUpdate.UpdateVideo // TypeDefIndex: 1671
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreUpdate.NewInputUpdate // TypeDefIndex: 1672
{}

// Namespace: UnityEngine.PlayerLoop
[RequiredByNativeCodeAttribute] // RVA: 0xDD7F0 Offset: 0xDCBF0 VA: 0x1800DD7F0
[MovedFromAttribute] // RVA: 0xDD7F0 Offset: 0xDCBF0 VA: 0x1800DD7F0
public struct Update // TypeDefIndex: 1673
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Update.ScriptRunBehaviourUpdate // TypeDefIndex: 1674
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Update.DirectorUpdate // TypeDefIndex: 1675
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Update.ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 1676
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Update.ScriptRunDelayedTasks // TypeDefIndex: 1677
{}

// Namespace: UnityEngine.PlayerLoop
[MovedFromAttribute] // RVA: 0xDD7A0 Offset: 0xDCBA0 VA: 0x1800DD7A0
[RequiredByNativeCodeAttribute] // RVA: 0xDD7A0 Offset: 0xDCBA0 VA: 0x1800DD7A0
public struct PreLateUpdate // TypeDefIndex: 1678
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.AIUpdatePostScript // TypeDefIndex: 1679
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.DirectorUpdateAnimationBegin // TypeDefIndex: 1680
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.LegacyAnimationUpdate // TypeDefIndex: 1681
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.DirectorUpdateAnimationEnd // TypeDefIndex: 1682
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.DirectorDeferredEvaluate // TypeDefIndex: 1683
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.UpdateNetworkManager // TypeDefIndex: 1684
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.UpdateMasterServerInterface // TypeDefIndex: 1685
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.UNetUpdate // TypeDefIndex: 1686
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.EndGraphicsJobsAfterScriptUpdate // TypeDefIndex: 1687
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.ParticleSystemBeginUpdateAll // TypeDefIndex: 1688
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.ScriptRunBehaviourLateUpdate // TypeDefIndex: 1689
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PreLateUpdate.ConstraintManagerUpdate // TypeDefIndex: 1690
{}

// Namespace: UnityEngine.PlayerLoop
[MovedFromAttribute] // RVA: 0xDD7A0 Offset: 0xDCBA0 VA: 0x1800DD7A0
[RequiredByNativeCodeAttribute] // RVA: 0xDD7A0 Offset: 0xDCBA0 VA: 0x1800DD7A0
public struct PostLateUpdate // TypeDefIndex: 1691
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.PlayerSendFrameStarted // TypeDefIndex: 1692
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.UpdateRectTransform // TypeDefIndex: 1693
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.UpdateCanvasRectTransform // TypeDefIndex: 1694
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.PlayerUpdateCanvases // TypeDefIndex: 1695
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.UpdateAudio // TypeDefIndex: 1696
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.UpdateVideo // TypeDefIndex: 1697
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.DirectorLateUpdate // TypeDefIndex: 1698
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.ScriptRunDelayedDynamicFrameRate // TypeDefIndex: 1699
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.VFXUpdate // TypeDefIndex: 1700
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.ParticleSystemEndUpdateAll // TypeDefIndex: 1701
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.EndGraphicsJobsAfterScriptLateUpdate // TypeDefIndex: 1702
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.UpdateSubstance // TypeDefIndex: 1703
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.UpdateCustomRenderTextures // TypeDefIndex: 1704
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.UpdateAllRenderers // TypeDefIndex: 1705
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.EnlightenRuntimeUpdate // TypeDefIndex: 1706
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.UpdateAllSkinnedMeshes // TypeDefIndex: 1707
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.ProcessWebSendMessages // TypeDefIndex: 1708
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.SortingGroupsUpdate // TypeDefIndex: 1709
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.UpdateVideoTextures // TypeDefIndex: 1710
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.DirectorRenderImage // TypeDefIndex: 1711
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.PlayerEmitCanvasGeometry // TypeDefIndex: 1712
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.FinishFrameRendering // TypeDefIndex: 1713
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.BatchModeUpdate // TypeDefIndex: 1714
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.PlayerSendFrameComplete // TypeDefIndex: 1715
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.UpdateCaptureScreenshot // TypeDefIndex: 1716
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.PresentAfterDraw // TypeDefIndex: 1717
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.ClearImmediateRenderers // TypeDefIndex: 1718
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.XRPostPresent // TypeDefIndex: 1719
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.UpdateResolution // TypeDefIndex: 1720
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.InputEndFrame // TypeDefIndex: 1721
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.GUIClearEvents // TypeDefIndex: 1722
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.ShaderHandleErrors // TypeDefIndex: 1723
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.ResetInputAxis // TypeDefIndex: 1724
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.ThreadedLoadingDebug // TypeDefIndex: 1725
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.ProfilerSynchronizeStats // TypeDefIndex: 1726
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.MemoryFrameMaintenance // TypeDefIndex: 1727
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.ExecuteGameCenterCallbacks // TypeDefIndex: 1728
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.ProfilerEndFrame // TypeDefIndex: 1729
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.PlayerSendFramePostPresent // TypeDefIndex: 1730
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.PhysicsSkinnedClothBeginUpdate // TypeDefIndex: 1731
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.PhysicsSkinnedClothFinishUpdate // TypeDefIndex: 1732
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PostLateUpdate.TriggerEndOfFrameCallbacks // TypeDefIndex: 1733
{}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class MessageEventArgs // TypeDefIndex: 1734
{
	// Fields
	public int playerId; // 0x10
	public byte[] data; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
public class PlayerConnection : ScriptableObject // TypeDefIndex: 1735
{
	// Fields
	internal static IPlayerEditorConnectionNative connectionNative; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private PlayerEditorConnectionEvents m_PlayerEditorConnectionEvents; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<int> m_connectedPlayers; // 0x20
	private bool m_IsInitilized; // 0x28
	private static PlayerConnection s_Instance; // 0x8

	// Properties
	public static PlayerConnection instance { get; }
	public bool isConnected { get; }

	// Methods
	// RVA: 0x4F0FC0 Offset: 0x4EF7C0 VA: 0x1804F0FC0
	public static PlayerConnection get_instance() { }
	// RVA: 0x4F1160 Offset: 0x4EF960 VA: 0x1804F1160
	public bool get_isConnected() { }
	// RVA: 0x4F11F0 Offset: 0x4EF9F0 VA: 0x1804F11F0
	private static PlayerConnection CreateInstance() { }
	// RVA: 0x4F12F0 Offset: 0x4EFAF0 VA: 0x1804F12F0
	public void OnEnable() { }
	// RVA: 0x4F1390 Offset: 0x4EFB90 VA: 0x1804F1390
	private IPlayerEditorConnectionNative GetConnectionNativeApi() { }
	// RVA: 0x4F1420 Offset: 0x4EFC20 VA: 0x1804F1420 Slot: 4
	public void Register(Guid messageId, UnityAction<MessageEventArgs> callback) { }
	// RVA: 0x4F1630 Offset: 0x4EFE30 VA: 0x1804F1630 Slot: 5
	public void Unregister(Guid messageId, UnityAction<MessageEventArgs> callback) { }
	// RVA: 0x4F18D0 Offset: 0x4F00D0 VA: 0x1804F18D0 Slot: 6
	public void RegisterConnection(UnityAction<int> callback) { }
	// RVA: 0x4F1A80 Offset: 0x4F0280 VA: 0x1804F1A80 Slot: 7
	public void RegisterDisconnection(UnityAction<int> callback) { }
	// RVA: 0x4F1B40 Offset: 0x4F0340 VA: 0x1804F1B40 Slot: 8
	public void UnregisterConnection(UnityAction<int> callback) { }
	// RVA: 0x4F1C10 Offset: 0x4F0410 VA: 0x1804F1C10 Slot: 9
	public void UnregisterDisconnection(UnityAction<int> callback) { }
	// RVA: 0x4F1CE0 Offset: 0x4F04E0 VA: 0x1804F1CE0 Slot: 10
	public void Send(Guid messageId, byte[] data) { }
	// RVA: 0x4F1EA0 Offset: 0x4F06A0 VA: 0x1804F1EA0 Slot: 11
	public bool TrySend(Guid messageId, byte[] data) { }
	// RVA: 0x4F2060 Offset: 0x4F0860 VA: 0x1804F2060
	public bool BlockUntilRecvMsg(Guid messageId, int timeout) { }
	// RVA: 0x4F2380 Offset: 0x4F0B80 VA: 0x1804F2380 Slot: 12
	public void DisconnectAll() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4F2410 Offset: 0x4F0C10 VA: 0x1804F2410
	private static void MessageCallbackInternal(IntPtr data, ulong size, ulong guid, string messageId) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4F2580 Offset: 0x4F0D80 VA: 0x1804F2580
	private static void ConnectedCallbackInternal(int playerId) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4F2640 Offset: 0x4F0E40 VA: 0x1804F2640
	private static void DisconnectedCallback(int playerId) { }
	// RVA: 0x4F2750 Offset: 0x4F0F50 VA: 0x1804F2750
	public void .ctor() { }
}

// Namespace: 
private sealed class PlayerConnection.<>c__DisplayClass12_0 // TypeDefIndex: 1736
{
	// Fields
	public Guid messageId; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x669380 Offset: 0x667B80 VA: 0x180669380
	internal bool <Register>b__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
private sealed class PlayerConnection.<>c__DisplayClass13_0 // TypeDefIndex: 1737
{
	// Fields
	public Guid messageId; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x669470 Offset: 0x667C70 VA: 0x180669470
	internal bool <Unregister>b__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
private sealed class PlayerConnection.<>c__DisplayClass20_0 // TypeDefIndex: 1738
{
	// Fields
	public bool msgReceived; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x1FB8E0 Offset: 0x1FA0E0 VA: 0x1801FB8E0
	internal void <BlockUntilRecvMsg>b__0(MessageEventArgs args) { }
}

// Namespace: UnityEngine.Networking.PlayerConnection
[Serializable]
internal class PlayerEditorConnectionEvents // TypeDefIndex: 1739
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public List<PlayerEditorConnectionEvents.MessageTypeSubscribers> messageTypeSubscribers; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public PlayerEditorConnectionEvents.ConnectionChangeEvent connectionEvent; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public PlayerEditorConnectionEvents.ConnectionChangeEvent disconnectionEvent; // 0x20

	// Methods
	// RVA: 0x4F2FE0 Offset: 0x4F17E0 VA: 0x1804F2FE0
	public void InvokeMessageIdSubscribers(Guid messageId, byte[] data, int playerId) { }
	// RVA: 0x4F32D0 Offset: 0x4F1AD0 VA: 0x1804F32D0
	public UnityEvent<MessageEventArgs> AddAndCreate(Guid messageId) { }
	// RVA: 0x4F3510 Offset: 0x4F1D10 VA: 0x1804F3510
	public void UnregisterManagedCallback(Guid messageId, UnityAction<MessageEventArgs> callback) { }
	// RVA: 0x4F36B0 Offset: 0x4F1EB0 VA: 0x1804F36B0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.MessageEvent : UnityEvent<MessageEventArgs> // TypeDefIndex: 1740
{
	// Methods
	// RVA: 0x6698B0 Offset: 0x6680B0 VA: 0x1806698B0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.ConnectionChangeEvent : UnityEvent<int> // TypeDefIndex: 1741
{
	// Methods
	// RVA: 0x669830 Offset: 0x668030 VA: 0x180669830
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PlayerEditorConnectionEvents.MessageTypeSubscribers // TypeDefIndex: 1742
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_messageTypeId; // 0x10
	public int subscriberCount; // 0x18
	public PlayerEditorConnectionEvents.MessageEvent messageCallback; // 0x20

	// Properties
	public Guid MessageTypeId { get; set; }

	// Methods
	// RVA: 0x669930 Offset: 0x668130 VA: 0x180669930
	public Guid get_MessageTypeId() { }
	// RVA: 0x669970 Offset: 0x668170 VA: 0x180669970
	public void set_MessageTypeId(Guid value) { }
	// RVA: 0x669990 Offset: 0x668190 VA: 0x180669990
	public void .ctor() { }
}

// Namespace: 
private sealed class PlayerEditorConnectionEvents.<>c__DisplayClass6_0 // TypeDefIndex: 1743
{
	// Fields
	public Guid messageId; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x669560 Offset: 0x667D60 VA: 0x180669560
	internal bool <InvokeMessageIdSubscribers>b__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
private sealed class PlayerEditorConnectionEvents.<>c__DisplayClass7_0 // TypeDefIndex: 1744
{
	// Fields
	public Guid messageId; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x669650 Offset: 0x667E50 VA: 0x180669650
	internal bool <AddAndCreate>b__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: 
private sealed class PlayerEditorConnectionEvents.<>c__DisplayClass8_0 // TypeDefIndex: 1745
{
	// Fields
	public Guid messageId; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x669740 Offset: 0x667F40 VA: 0x180669740
	internal bool <UnregisterManagedCallback>b__0(PlayerEditorConnectionEvents.MessageTypeSubscribers x) { }
}

// Namespace: UnityEngine.Rendering
public enum IndexFormat // TypeDefIndex: 1746
{
	// Fields
	public int value__; // 0x0
	public const IndexFormat UInt16 = 0; // 0x0
	public const IndexFormat UInt32 = 1; // 0x0
}

// Namespace: UnityEngine.Rendering
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum MeshUpdateFlags // TypeDefIndex: 1747
{
	// Fields
	public int value__; // 0x0
	public const MeshUpdateFlags Default = 0; // 0x0
	public const MeshUpdateFlags DontValidateIndices = 1; // 0x0
	public const MeshUpdateFlags DontResetBoneBounds = 2; // 0x0
	public const MeshUpdateFlags DontNotifyMeshUsers = 4; // 0x0
	public const MeshUpdateFlags DontRecalculateBounds = 8; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum VertexAttributeFormat // TypeDefIndex: 1748
{
	// Fields
	public int value__; // 0x0
	public const VertexAttributeFormat Float32 = 0; // 0x0
	public const VertexAttributeFormat Float16 = 1; // 0x0
	public const VertexAttributeFormat UNorm8 = 2; // 0x0
	public const VertexAttributeFormat SNorm8 = 3; // 0x0
	public const VertexAttributeFormat UNorm16 = 4; // 0x0
	public const VertexAttributeFormat SNorm16 = 5; // 0x0
	public const VertexAttributeFormat UInt8 = 6; // 0x0
	public const VertexAttributeFormat SInt8 = 7; // 0x0
	public const VertexAttributeFormat UInt16 = 8; // 0x0
	public const VertexAttributeFormat SInt16 = 9; // 0x0
	public const VertexAttributeFormat UInt32 = 10; // 0x0
	public const VertexAttributeFormat SInt32 = 11; // 0x0
}

// Namespace: UnityEngine.Rendering
[MovedFromAttribute] // RVA: 0xDD870 Offset: 0xDCC70 VA: 0x1800DD870
public enum VertexAttribute // TypeDefIndex: 1749
{
	// Fields
	public int value__; // 0x0
	public const VertexAttribute Position = 0; // 0x0
	public const VertexAttribute Normal = 1; // 0x0
	public const VertexAttribute Tangent = 2; // 0x0
	public const VertexAttribute Color = 3; // 0x0
	public const VertexAttribute TexCoord0 = 4; // 0x0
	public const VertexAttribute TexCoord1 = 5; // 0x0
	public const VertexAttribute TexCoord2 = 6; // 0x0
	public const VertexAttribute TexCoord3 = 7; // 0x0
	public const VertexAttribute TexCoord4 = 8; // 0x0
	public const VertexAttribute TexCoord5 = 9; // 0x0
	public const VertexAttribute TexCoord6 = 10; // 0x0
	public const VertexAttribute TexCoord7 = 11; // 0x0
	public const VertexAttribute BlendWeight = 12; // 0x0
	public const VertexAttribute BlendIndices = 13; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum RenderBufferLoadAction // TypeDefIndex: 1750
{
	// Fields
	public int value__; // 0x0
	public const RenderBufferLoadAction Load = 0; // 0x0
	public const RenderBufferLoadAction Clear = 1; // 0x0
	public const RenderBufferLoadAction DontCare = 2; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum RenderBufferStoreAction // TypeDefIndex: 1751
{
	// Fields
	public int value__; // 0x0
	public const RenderBufferStoreAction Store = 0; // 0x0
	public const RenderBufferStoreAction Resolve = 1; // 0x0
	public const RenderBufferStoreAction StoreAndResolve = 2; // 0x0
	public const RenderBufferStoreAction DontCare = 3; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum CompareFunction // TypeDefIndex: 1752
{
	// Fields
	public int value__; // 0x0
	public const CompareFunction Disabled = 0; // 0x0
	public const CompareFunction Never = 1; // 0x0
	public const CompareFunction Less = 2; // 0x0
	public const CompareFunction Equal = 3; // 0x0
	public const CompareFunction LessEqual = 4; // 0x0
	public const CompareFunction Greater = 5; // 0x0
	public const CompareFunction NotEqual = 6; // 0x0
	public const CompareFunction GreaterEqual = 7; // 0x0
	public const CompareFunction Always = 8; // 0x0
}

// Namespace: UnityEngine.Rendering
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum ColorWriteMask // TypeDefIndex: 1753
{
	// Fields
	public int value__; // 0x0
	public const ColorWriteMask Alpha = 1; // 0x0
	public const ColorWriteMask Blue = 2; // 0x0
	public const ColorWriteMask Green = 4; // 0x0
	public const ColorWriteMask Red = 8; // 0x0
	public const ColorWriteMask All = 15; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum StencilOp // TypeDefIndex: 1754
{
	// Fields
	public int value__; // 0x0
	public const StencilOp Keep = 0; // 0x0
	public const StencilOp Zero = 1; // 0x0
	public const StencilOp Replace = 2; // 0x0
	public const StencilOp IncrementSaturate = 3; // 0x0
	public const StencilOp DecrementSaturate = 4; // 0x0
	public const StencilOp Invert = 5; // 0x0
	public const StencilOp IncrementWrap = 6; // 0x0
	public const StencilOp DecrementWrap = 7; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum CameraEvent // TypeDefIndex: 1755
{
	// Fields
	public int value__; // 0x0
	public const CameraEvent BeforeDepthTexture = 0; // 0x0
	public const CameraEvent AfterDepthTexture = 1; // 0x0
	public const CameraEvent BeforeDepthNormalsTexture = 2; // 0x0
	public const CameraEvent AfterDepthNormalsTexture = 3; // 0x0
	public const CameraEvent BeforeGBuffer = 4; // 0x0
	public const CameraEvent AfterGBuffer = 5; // 0x0
	public const CameraEvent BeforeLighting = 6; // 0x0
	public const CameraEvent AfterLighting = 7; // 0x0
	public const CameraEvent BeforeFinalPass = 8; // 0x0
	public const CameraEvent AfterFinalPass = 9; // 0x0
	public const CameraEvent BeforeForwardOpaque = 10; // 0x0
	public const CameraEvent AfterForwardOpaque = 11; // 0x0
	public const CameraEvent BeforeImageEffectsOpaque = 12; // 0x0
	public const CameraEvent AfterImageEffectsOpaque = 13; // 0x0
	public const CameraEvent BeforeSkybox = 14; // 0x0
	public const CameraEvent AfterSkybox = 15; // 0x0
	public const CameraEvent BeforeForwardAlpha = 16; // 0x0
	public const CameraEvent AfterForwardAlpha = 17; // 0x0
	public const CameraEvent BeforeImageEffects = 18; // 0x0
	public const CameraEvent AfterImageEffects = 19; // 0x0
	public const CameraEvent AfterEverything = 20; // 0x0
	public const CameraEvent BeforeReflections = 21; // 0x0
	public const CameraEvent AfterReflections = 22; // 0x0
	public const CameraEvent BeforeHaloAndLensFlares = 23; // 0x0
	public const CameraEvent AfterHaloAndLensFlares = 24; // 0x0
}

// Namespace: UnityEngine.Rendering
internal static class CameraEventUtils // TypeDefIndex: 1756
{
	// Methods
	// RVA: 0x53C9D0 Offset: 0x53B1D0 VA: 0x18053C9D0
	public static bool IsValid(CameraEvent value) { }
}

// Namespace: UnityEngine.Rendering
public enum BuiltinRenderTextureType // TypeDefIndex: 1757
{
	// Fields
	public int value__; // 0x0
	public const BuiltinRenderTextureType PropertyName = -4; // 0x0
	public const BuiltinRenderTextureType BufferPtr = -3; // 0x0
	public const BuiltinRenderTextureType RenderTexture = -2; // 0x0
	public const BuiltinRenderTextureType BindableTexture = -1; // 0x0
	public const BuiltinRenderTextureType None = 0; // 0x0
	public const BuiltinRenderTextureType CurrentActive = 1; // 0x0
	public const BuiltinRenderTextureType CameraTarget = 2; // 0x0
	public const BuiltinRenderTextureType Depth = 3; // 0x0
	public const BuiltinRenderTextureType DepthNormals = 4; // 0x0
	public const BuiltinRenderTextureType ResolvedDepth = 5; // 0x0
	public const BuiltinRenderTextureType PrepassNormalsSpec = 7; // 0x0
	public const BuiltinRenderTextureType PrepassLight = 8; // 0x0
	public const BuiltinRenderTextureType PrepassLightSpec = 9; // 0x0
	public const BuiltinRenderTextureType GBuffer0 = 10; // 0x0
	public const BuiltinRenderTextureType GBuffer1 = 11; // 0x0
	public const BuiltinRenderTextureType GBuffer2 = 12; // 0x0
	public const BuiltinRenderTextureType GBuffer3 = 13; // 0x0
	public const BuiltinRenderTextureType Reflections = 14; // 0x0
	public const BuiltinRenderTextureType MotionVectors = 15; // 0x0
	public const BuiltinRenderTextureType GBuffer4 = 16; // 0x0
	public const BuiltinRenderTextureType GBuffer5 = 17; // 0x0
	public const BuiltinRenderTextureType GBuffer6 = 18; // 0x0
	public const BuiltinRenderTextureType GBuffer7 = 19; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum ShadowCastingMode // TypeDefIndex: 1758
{
	// Fields
	public int value__; // 0x0
	public const ShadowCastingMode Off = 0; // 0x0
	public const ShadowCastingMode On = 1; // 0x0
	public const ShadowCastingMode TwoSided = 2; // 0x0
	public const ShadowCastingMode ShadowsOnly = 3; // 0x0
}

// Namespace: UnityEngine.Rendering
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum GraphicsDeviceType // TypeDefIndex: 1759
{
	// Fields
	public int value__; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD8C0 Offset: 0xDCCC0 VA: 0x1800DD8C0
	public const GraphicsDeviceType OpenGL2 = 0; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD8F0 Offset: 0xDCCF0 VA: 0x1800DD8F0
	public const GraphicsDeviceType Direct3D9 = 1; // 0x0
	public const GraphicsDeviceType Direct3D11 = 2; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD920 Offset: 0xDCD20 VA: 0x1800DD920
	public const GraphicsDeviceType PlayStation3 = 3; // 0x0
	public const GraphicsDeviceType Null = 4; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD950 Offset: 0xDCD50 VA: 0x1800DD950
	public const GraphicsDeviceType Xbox360 = 6; // 0x0
	public const GraphicsDeviceType OpenGLES2 = 8; // 0x0
	public const GraphicsDeviceType OpenGLES3 = 11; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD980 Offset: 0xDCD80 VA: 0x1800DD980
	public const GraphicsDeviceType PlayStationVita = 12; // 0x0
	public const GraphicsDeviceType PlayStation4 = 13; // 0x0
	public const GraphicsDeviceType XboxOne = 14; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD9B0 Offset: 0xDCDB0 VA: 0x1800DD9B0
	public const GraphicsDeviceType PlayStationMobile = 15; // 0x0
	public const GraphicsDeviceType Metal = 16; // 0x0
	public const GraphicsDeviceType OpenGLCore = 17; // 0x0
	public const GraphicsDeviceType Direct3D12 = 18; // 0x0
	[ObsoleteAttribute] // RVA: 0xDD9E0 Offset: 0xDCDE0 VA: 0x1800DD9E0
	public const GraphicsDeviceType N3DS = 19; // 0x0
	public const GraphicsDeviceType Vulkan = 21; // 0x0
	public const GraphicsDeviceType Switch = 22; // 0x0
	public const GraphicsDeviceType XboxOneD3D12 = 23; // 0x0
}

// Namespace: UnityEngine.Rendering
public struct RenderTargetIdentifier : IEquatable<RenderTargetIdentifier> // TypeDefIndex: 1760
{
	// Fields
	private BuiltinRenderTextureType m_Type; // 0x0
	private int m_NameID; // 0x4
	private int m_InstanceID; // 0x8
	private IntPtr m_BufferPointer; // 0x10
	private int m_MipLevel; // 0x18
	private CubemapFace m_CubeFace; // 0x1C
	private int m_DepthSlice; // 0x20

	// Methods
	// RVA: 0x1EE80 Offset: 0x1E280 VA: 0x18001EE80
	public void .ctor(BuiltinRenderTextureType type) { }
	// RVA: 0x1EE90 Offset: 0x1E290 VA: 0x18001EE90
	public void .ctor(int nameID) { }
	// RVA: 0x1EEA0 Offset: 0x1E2A0 VA: 0x18001EEA0
	public void .ctor(RenderTargetIdentifier renderTargetIdentifier, int mipLevel, CubemapFace cubeFace = -1, int depthSlice = 0) { }
	// RVA: 0x1EEE0 Offset: 0x1E2E0 VA: 0x18001EEE0
	public void .ctor(Texture tex) { }
	// RVA: 0x1EEF0 Offset: 0x1E2F0 VA: 0x18001EEF0
	public void .ctor(RenderBuffer buf, int mipLevel = 0, CubemapFace cubeFace = -1, int depthSlice = 0) { }
	// RVA: 0x4FAE80 Offset: 0x4F9680 VA: 0x1804FAE80
	public static RenderTargetIdentifier op_Implicit(BuiltinRenderTextureType type) { }
	// RVA: 0x4FAF60 Offset: 0x4F9760 VA: 0x1804FAF60
	public static RenderTargetIdentifier op_Implicit(int nameID) { }
	// RVA: 0x4FB040 Offset: 0x4F9840 VA: 0x1804FB040
	public static RenderTargetIdentifier op_Implicit(Texture tex) { }
	// RVA: 0x4FB0A0 Offset: 0x4F98A0 VA: 0x1804FB0A0
	public static RenderTargetIdentifier op_Implicit(RenderBuffer buf) { }
	// RVA: 0x1EF20 Offset: 0x1E320 VA: 0x18001EF20 Slot: 3
	public override string ToString() { }
	// RVA: 0x1EF30 Offset: 0x1E330 VA: 0x18001EF30 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x1EF40 Offset: 0x1E340 VA: 0x18001EF40 Slot: 4
	public bool Equals(RenderTargetIdentifier rhs) { }
	// RVA: 0x1EF80 Offset: 0x1E380 VA: 0x18001EF80 Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: UnityEngine.Rendering
public enum ReflectionProbeUsage // TypeDefIndex: 1761
{
	// Fields
	public int value__; // 0x0
	public const ReflectionProbeUsage Off = 0; // 0x0
	public const ReflectionProbeUsage BlendProbes = 1; // 0x0
	public const ReflectionProbeUsage BlendProbesAndSkybox = 2; // 0x0
	public const ReflectionProbeUsage Simple = 3; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum ShadowSamplingMode // TypeDefIndex: 1762
{
	// Fields
	public int value__; // 0x0
	public const ShadowSamplingMode CompareDepths = 0; // 0x0
	public const ShadowSamplingMode RawDepth = 1; // 0x0
	public const ShadowSamplingMode None = 2; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum LightProbeUsage // TypeDefIndex: 1763
{
	// Fields
	public int value__; // 0x0
	public const LightProbeUsage Off = 0; // 0x0
	public const LightProbeUsage BlendProbes = 1; // 0x0
	public const LightProbeUsage UseProxyVolume = 2; // 0x0
	public const LightProbeUsage CustomProvided = 4; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum TextureDimension // TypeDefIndex: 1764
{
	// Fields
	public int value__; // 0x0
	public const TextureDimension Unknown = -1; // 0x0
	public const TextureDimension None = 0; // 0x0
	public const TextureDimension Any = 1; // 0x0
	public const TextureDimension Tex2D = 2; // 0x0
	public const TextureDimension Tex3D = 3; // 0x0
	public const TextureDimension Cube = 4; // 0x0
	public const TextureDimension Tex2DArray = 5; // 0x0
	public const TextureDimension CubeArray = 6; // 0x0
}

// Namespace: UnityEngine.Rendering
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum CopyTextureSupport // TypeDefIndex: 1765
{
	// Fields
	public int value__; // 0x0
	public const CopyTextureSupport None = 0; // 0x0
	public const CopyTextureSupport Basic = 1; // 0x0
	public const CopyTextureSupport Copy3D = 2; // 0x0
	public const CopyTextureSupport DifferentTypes = 4; // 0x0
	public const CopyTextureSupport TextureToRT = 8; // 0x0
	public const CopyTextureSupport RTToTexture = 16; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum SinglePassStereoMode // TypeDefIndex: 1766
{
	// Fields
	public int value__; // 0x0
	public const SinglePassStereoMode None = 0; // 0x0
	public const SinglePassStereoMode SideBySide = 1; // 0x0
	public const SinglePassStereoMode Instancing = 2; // 0x0
	public const SinglePassStereoMode Multiview = 3; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum CommandBufferExecutionFlags // TypeDefIndex: 1767
{
	// Fields
	public int value__; // 0x0
	public const CommandBufferExecutionFlags None = 0; // 0x0
	public const CommandBufferExecutionFlags AsyncCompute = 2; // 0x0
}

// Namespace: UnityEngine.Rendering
public enum RenderTextureSubElement // TypeDefIndex: 1768
{
	// Fields
	public int value__; // 0x0
	public const RenderTextureSubElement Color = 0; // 0x0
	public const RenderTextureSubElement Depth = 1; // 0x0
	public const RenderTextureSubElement Stencil = 2; // 0x0
	public const RenderTextureSubElement Default = 3; // 0x0
}

// Namespace: UnityEngine.Rendering
public sealed class GraphicsSettings : Object // TypeDefIndex: 1769
{
	// Properties
	public static bool lightsUseLinearIntensity { get; }
	public static RenderPipelineAsset renderPipelineAsset { get; }
	private static ScriptableObject INTERNAL_defaultRenderPipeline { get; }
	public static RenderPipelineAsset defaultRenderPipeline { get; }

	// Methods
	// RVA: 0x549680 Offset: 0x547E80 VA: 0x180549680
	public static bool get_lightsUseLinearIntensity() { }
	// RVA: 0x5496D0 Offset: 0x547ED0 VA: 0x1805496D0
	public static RenderPipelineAsset get_renderPipelineAsset() { }
	// RVA: 0x5497C0 Offset: 0x547FC0 VA: 0x1805497C0
	private static ScriptableObject get_INTERNAL_defaultRenderPipeline() { }
	// RVA: 0x5496D0 Offset: 0x547ED0 VA: 0x1805496D0
	public static RenderPipelineAsset get_defaultRenderPipeline() { }
}

// Namespace: UnityEngine.Rendering
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class OnDemandRendering // TypeDefIndex: 1770
{
	// Fields
	private static int m_RenderFrameInterval; // 0xAC310

	// Properties
	public static int renderFrameInterval { get; }

	// Methods
	// RVA: 0x4EAAB0 Offset: 0x4E92B0 VA: 0x1804EAAB0
	public static int get_renderFrameInterval() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4EAB50 Offset: 0x4E9350 VA: 0x1804EAB50
	internal static void GetRenderFrameInterval(out int frameInterval) { }
	// RVA: 0x4EAC80 Offset: 0x4E9480 VA: 0x1804EAC80
	private static void .cctor() { }
}

// Namespace: UnityEngine.Rendering
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CommandBuffer : IDisposable // TypeDefIndex: 1771
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties
	public string name { set; }

	// Methods
	// RVA: 0x53DB40 Offset: 0x53C340 VA: 0x18053DB40
	private void Internal_SetSinglePassStereo(SinglePassStereoMode mode) { }
	// RVA: 0x53DBA0 Offset: 0x53C3A0 VA: 0x18053DBA0
	private static IntPtr InitBuffer() { }
	// RVA: 0x53DBF0 Offset: 0x53C3F0 VA: 0x18053DBF0
	private void ReleaseBuffer() { }
	// RVA: 0x53DC40 Offset: 0x53C440 VA: 0x18053DC40
	public void SetComputeVectorParam(ComputeShader computeShader, int nameID, Vector4 val) { }
	// RVA: 0x53DCC0 Offset: 0x53C4C0 VA: 0x18053DCC0
	private void Internal_SetComputeFloats(ComputeShader computeShader, int nameID, float[] values) { }
	// RVA: 0x53DD40 Offset: 0x53C540 VA: 0x18053DD40
	private void Internal_SetComputeTextureParam(ComputeShader computeShader, int kernelIndex, int nameID, ref RenderTargetIdentifier rt, int mipLevel, RenderTextureSubElement element) { }
	// RVA: 0x53DDD0 Offset: 0x53C5D0 VA: 0x18053DDD0
	private void Internal_SetComputeBufferParam(ComputeShader computeShader, int kernelIndex, int nameID, ComputeBuffer buffer) { }
	// RVA: 0x53DE60 Offset: 0x53C660 VA: 0x18053DE60
	private void Internal_DispatchCompute(ComputeShader computeShader, int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ) { }
	// RVA: 0x53DEF0 Offset: 0x53C6F0 VA: 0x18053DEF0
	public void set_name(string value) { }
	// RVA: 0x53DF50 Offset: 0x53C750 VA: 0x18053DF50
	public void Clear() { }
	// RVA: 0x53DFA0 Offset: 0x53C7A0 VA: 0x18053DFA0
	private void Internal_DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int submeshIndex, int shaderPass, MaterialPropertyBlock properties) { }
	// RVA: 0x53E040 Offset: 0x53C840 VA: 0x18053E040
	public void SetViewport(Rect pixelRect) { }
	// RVA: 0x53E0A0 Offset: 0x53C8A0 VA: 0x18053E0A0
	private void CopyTexture_Internal(ref RenderTargetIdentifier src, int srcElement, int srcMip, int srcX, int srcY, int srcWidth, int srcHeight, ref RenderTargetIdentifier dst, int dstElement, int dstMip, int dstX, int dstY, int mode) { }
	// RVA: 0x53E130 Offset: 0x53C930 VA: 0x18053E130
	private void Blit_Identifier(ref RenderTargetIdentifier source, ref RenderTargetIdentifier dest, Material mat, int pass, Vector2 scale, Vector2 offset, int sourceDepthSlice, int destDepthSlice) { }
	// RVA: 0x53E1F0 Offset: 0x53C9F0 VA: 0x18053E1F0
	public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, GraphicsFormat format, int antiAliasing, bool enableRandomWrite, RenderTextureMemoryless memorylessMode, bool useDynamicScale) { }
	// RVA: 0x53E290 Offset: 0x53CA90 VA: 0x18053E290
	public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, GraphicsFormat format, int antiAliasing, bool enableRandomWrite, RenderTextureMemoryless memorylessMode) { }
	// RVA: 0x53E330 Offset: 0x53CB30 VA: 0x18053E330
	public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, GraphicsFormat format, int antiAliasing) { }
	// RVA: 0x53E400 Offset: 0x53CC00 VA: 0x18053E400
	public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, GraphicsFormat format) { }
	// RVA: 0x53E4C0 Offset: 0x53CCC0 VA: 0x18053E4C0
	public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite, RenderTextureMemoryless memorylessMode, bool useDynamicScale) { }
	// RVA: 0x53E5B0 Offset: 0x53CDB0 VA: 0x18053E5B0
	public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite, RenderTextureMemoryless memorylessMode) { }
	// RVA: 0x53E620 Offset: 0x53CE20 VA: 0x18053E620
	public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format, RenderTextureReadWrite readWrite, int antiAliasing, bool enableRandomWrite) { }
	// RVA: 0x53E680 Offset: 0x53CE80 VA: 0x18053E680
	public void GetTemporaryRT(int nameID, int width, int height, int depthBuffer, FilterMode filter, RenderTextureFormat format) { }
	// RVA: 0x53E760 Offset: 0x53CF60 VA: 0x18053E760
	private void GetTemporaryRTWithDescriptor(int nameID, RenderTextureDescriptor desc, FilterMode filter) { }
	// RVA: 0x53E7E0 Offset: 0x53CFE0 VA: 0x18053E7E0
	public void GetTemporaryRT(int nameID, RenderTextureDescriptor desc, FilterMode filter) { }
	// RVA: 0x53E880 Offset: 0x53D080 VA: 0x18053E880
	public void ReleaseTemporaryRT(int nameID) { }
	// RVA: 0x53E8E0 Offset: 0x53D0E0 VA: 0x18053E8E0
	public void ClearRenderTarget(bool clearDepth, bool clearColor, Color backgroundColor, float depth) { }
	// RVA: 0x53E970 Offset: 0x53D170 VA: 0x18053E970
	public void ClearRenderTarget(bool clearDepth, bool clearColor, Color backgroundColor) { }
	// RVA: 0x53EA50 Offset: 0x53D250 VA: 0x18053EA50
	public void SetGlobalFloat(int nameID, float value) { }
	// RVA: 0x53EAC0 Offset: 0x53D2C0 VA: 0x18053EAC0
	public void SetGlobalVector(int nameID, Vector4 value) { }
	// RVA: 0x53EB30 Offset: 0x53D330 VA: 0x18053EB30
	public void EnableShaderKeyword(string keyword) { }
	// RVA: 0x53EB90 Offset: 0x53D390 VA: 0x18053EB90
	public void DisableShaderKeyword(string keyword) { }
	// RVA: 0x53EBF0 Offset: 0x53D3F0 VA: 0x18053EBF0
	private bool ValidateAgainstExecutionFlags(CommandBufferExecutionFlags requiredFlags, CommandBufferExecutionFlags invalidFlags) { }
	// RVA: 0x53EC60 Offset: 0x53D460 VA: 0x18053EC60
	private void SetGlobalTexture_Impl(int nameID, ref RenderTargetIdentifier rt, RenderTextureSubElement element) { }
	// RVA: 0x53ECE0 Offset: 0x53D4E0 VA: 0x18053ECE0
	public void BeginSample(string name) { }
	// RVA: 0x53ED40 Offset: 0x53D540 VA: 0x18053ED40
	public void EndSample(string name) { }
	// RVA: 0x53EDA0 Offset: 0x53D5A0 VA: 0x18053EDA0
	public void SetRenderTarget(RenderTargetIdentifier rt, RenderBufferLoadAction loadAction, RenderBufferStoreAction storeAction) { }
	// RVA: 0x53EF30 Offset: 0x53D730 VA: 0x18053EF30
	public void SetRenderTarget(RenderTargetIdentifier rt, int mipLevel, CubemapFace cubemapFace, int depthSlice) { }
	// RVA: 0x53F1C0 Offset: 0x53D9C0 VA: 0x18053F1C0
	public void SetRenderTarget(RenderTargetIdentifier[] colors, RenderTargetIdentifier depth) { }
	// RVA: 0x53F460 Offset: 0x53DC60 VA: 0x18053F460
	private void SetRenderTargetSingle_Internal(RenderTargetIdentifier rt, RenderBufferLoadAction colorLoadAction, RenderBufferStoreAction colorStoreAction, RenderBufferLoadAction depthLoadAction, RenderBufferStoreAction depthStoreAction) { }
	// RVA: 0x53F500 Offset: 0x53DD00 VA: 0x18053F500
	private void SetRenderTargetMulti_Internal(RenderTargetIdentifier[] colors, RenderTargetIdentifier depth, RenderBufferLoadAction[] colorLoadActions, RenderBufferStoreAction[] colorStoreActions, RenderBufferLoadAction depthLoadAction, RenderBufferStoreAction depthStoreAction) { }
	// RVA: 0x53F5A0 Offset: 0x53DDA0 VA: 0x18053F5A0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x53F620 Offset: 0x53DE20 VA: 0x18053F620 Slot: 4
	public void Dispose() { }
	// RVA: 0x53F6C0 Offset: 0x53DEC0 VA: 0x18053F6C0
	private void Dispose(bool disposing) { }
	// RVA: 0x53F780 Offset: 0x53DF80 VA: 0x18053F780
	public void .ctor() { }
	// RVA: 0x53F7D0 Offset: 0x53DFD0 VA: 0x18053F7D0
	public void SetComputeVectorParam(ComputeShader computeShader, string name, Vector4 val) { }
	// RVA: 0x53F8A0 Offset: 0x53E0A0 VA: 0x18053F8A0
	public void SetComputeFloatParams(ComputeShader computeShader, string name, float[] values) { }
	// RVA: 0x53F960 Offset: 0x53E160 VA: 0x18053F960
	public void SetComputeTextureParam(ComputeShader computeShader, int kernelIndex, string name, RenderTargetIdentifier rt) { }
	// RVA: 0x53FA40 Offset: 0x53E240 VA: 0x18053FA40
	public void SetComputeBufferParam(ComputeShader computeShader, int kernelIndex, string name, ComputeBuffer buffer) { }
	// RVA: 0x53DE60 Offset: 0x53C660 VA: 0x18053DE60
	public void DispatchCompute(ComputeShader computeShader, int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ) { }
	// RVA: 0x53FB10 Offset: 0x53E310 VA: 0x18053FB10
	public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int submeshIndex, int shaderPass, MaterialPropertyBlock properties) { }
	// RVA: 0x53FEE0 Offset: 0x53E6E0 VA: 0x18053FEE0
	public void DrawMesh(Mesh mesh, Matrix4x4 matrix, Material material, int submeshIndex, int shaderPass) { }
	// RVA: 0x53FF50 Offset: 0x53E750 VA: 0x18053FF50
	public void CopyTexture(RenderTargetIdentifier src, RenderTargetIdentifier dst) { }
	// RVA: 0x540020 Offset: 0x53E820 VA: 0x180540020
	public void CopyTexture(RenderTargetIdentifier src, int srcElement, int srcMip, RenderTargetIdentifier dst, int dstElement, int dstMip) { }
	// RVA: 0x540110 Offset: 0x53E910 VA: 0x180540110
	public void Blit(RenderTargetIdentifier source, RenderTargetIdentifier dest) { }
	// RVA: 0x540220 Offset: 0x53EA20 VA: 0x180540220
	public void Blit(RenderTargetIdentifier source, RenderTargetIdentifier dest, Material mat, int pass) { }
	// RVA: 0x540340 Offset: 0x53EB40 VA: 0x180540340
	public void SetGlobalTexture(string name, RenderTargetIdentifier value) { }
	// RVA: 0x540420 Offset: 0x53EC20 VA: 0x180540420
	public void SetGlobalTexture(int nameID, RenderTargetIdentifier value) { }
	// RVA: 0x540440 Offset: 0x53EC40 VA: 0x180540440
	public void SetGlobalTexture(int nameID, RenderTargetIdentifier value, RenderTextureSubElement element) { }
	// RVA: 0x53DB40 Offset: 0x53C340 VA: 0x18053DB40
	public void SetSinglePassStereo(SinglePassStereoMode mode) { }
	// RVA: 0x540460 Offset: 0x53EC60 VA: 0x180540460
	private void SetComputeVectorParam_Injected(ComputeShader computeShader, int nameID, ref Vector4 val) { }
	// RVA: 0x5404E0 Offset: 0x53ECE0 VA: 0x1805404E0
	private void Internal_DrawMesh_Injected(Mesh mesh, ref Matrix4x4 matrix, Material material, int submeshIndex, int shaderPass, MaterialPropertyBlock properties) { }
	// RVA: 0x540570 Offset: 0x53ED70 VA: 0x180540570
	private void SetViewport_Injected(ref Rect pixelRect) { }
	// RVA: 0x5405D0 Offset: 0x53EDD0 VA: 0x1805405D0
	private void Blit_Identifier_Injected(ref RenderTargetIdentifier source, ref RenderTargetIdentifier dest, Material mat, int pass, ref Vector2 scale, ref Vector2 offset, int sourceDepthSlice, int destDepthSlice) { }
	// RVA: 0x540660 Offset: 0x53EE60 VA: 0x180540660
	private void GetTemporaryRTWithDescriptor_Injected(int nameID, ref RenderTextureDescriptor desc, FilterMode filter) { }
	// RVA: 0x5406E0 Offset: 0x53EEE0 VA: 0x1805406E0
	private void ClearRenderTarget_Injected(bool clearDepth, bool clearColor, ref Color backgroundColor, float depth) { }
	// RVA: 0x540770 Offset: 0x53EF70 VA: 0x180540770
	private void SetGlobalVector_Injected(int nameID, ref Vector4 value) { }
	// RVA: 0x5407E0 Offset: 0x53EFE0 VA: 0x1805407E0
	private void SetRenderTargetSingle_Internal_Injected(ref RenderTargetIdentifier rt, RenderBufferLoadAction colorLoadAction, RenderBufferStoreAction colorStoreAction, RenderBufferLoadAction depthLoadAction, RenderBufferStoreAction depthStoreAction) { }
	// RVA: 0x540870 Offset: 0x53F070 VA: 0x180540870
	private void SetRenderTargetMulti_Internal_Injected(RenderTargetIdentifier[] colors, ref RenderTargetIdentifier depth, RenderBufferLoadAction[] colorLoadActions, RenderBufferStoreAction[] colorStoreActions, RenderBufferLoadAction depthLoadAction, RenderBufferStoreAction depthStoreAction) { }
}

// Namespace: UnityEngine.Rendering
[UsedByNativeCodeAttribute] // RVA: 0xDCBE0 Offset: 0xDBFE0 VA: 0x1800DCBE0
[DefaultMemberAttribute] // RVA: 0xDCBE0 Offset: 0xDBFE0 VA: 0x1800DCBE0
public struct SphericalHarmonicsL2 : IEquatable<SphericalHarmonicsL2> // TypeDefIndex: 1772
{
	// Fields
	private float shr0; // 0x0
	private float shr1; // 0x4
	private float shr2; // 0x8
	private float shr3; // 0xC
	private float shr4; // 0x10
	private float shr5; // 0x14
	private float shr6; // 0x18
	private float shr7; // 0x1C
	private float shr8; // 0x20
	private float shg0; // 0x24
	private float shg1; // 0x28
	private float shg2; // 0x2C
	private float shg3; // 0x30
	private float shg4; // 0x34
	private float shg5; // 0x38
	private float shg6; // 0x3C
	private float shg7; // 0x40
	private float shg8; // 0x44
	private float shb0; // 0x48
	private float shb1; // 0x4C
	private float shb2; // 0x50
	private float shb3; // 0x54
	private float shb4; // 0x58
	private float shb5; // 0x5C
	private float shb6; // 0x60
	private float shb7; // 0x64
	private float shb8; // 0x68

	// Methods
	// RVA: 0x16540 Offset: 0x15940 VA: 0x180016540 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x16550 Offset: 0x15950 VA: 0x180016550 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x16560 Offset: 0x15960 VA: 0x180016560 Slot: 4
	public bool Equals(SphericalHarmonicsL2 other) { }
	// RVA: 0x438220 Offset: 0x436A20 VA: 0x180438220
	public static bool op_Equality(SphericalHarmonicsL2 lhs, SphericalHarmonicsL2 rhs) { }
}

// Namespace: UnityEngine.Rendering
public struct BatchVisibility // TypeDefIndex: 1773
{
	// Fields
	public readonly int offset; // 0x0
	public readonly int instancesCount; // 0x4
	public int visibleCount; // 0x8
}

// Namespace: UnityEngine.Rendering
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct BatchCullingContext // TypeDefIndex: 1774
{
	// Fields
	public readonly NativeArray<Plane> cullingPlanes; // 0x0
	public NativeArray<BatchVisibility> batchVisibility; // 0x10
	public NativeArray<int> visibleIndices; // 0x20
	public readonly LODParameters lodParameters; // 0x30

	// Methods
	// RVA: 0x20000 Offset: 0x1F400 VA: 0x180020000
	public void .ctor(NativeArray<Plane> inCullingPlanes, NativeArray<BatchVisibility> inOutBatchVisibility, NativeArray<int> outVisibleIndices, LODParameters inLodParameters) { }
}

// Namespace: UnityEngine.Rendering
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal struct BatchRendererCullingOutput // TypeDefIndex: 1775
{
	// Fields
	public JobHandle cullingJobsFence; // 0x0
	public Plane* cullingPlanes; // 0x10
	public BatchVisibility* batchVisibility; // 0x18
	public int* visibleIndices; // 0x20
	public int cullingPlanesCount; // 0x28
	public int batchVisibilityCount; // 0x2C
	public int visibleIndicesCount; // 0x30
}

// Namespace: UnityEngine.Rendering
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class BatchRendererGroup // TypeDefIndex: 1776
{
	// Fields
	private IntPtr m_GroupHandle; // 0x10
	private BatchRendererGroup.OnPerformCulling m_PerformCulling; // 0x18

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x538950 Offset: 0x537150 VA: 0x180538950
	private static void InvokeOnPerformCulling(BatchRendererGroup group, ref BatchRendererCullingOutput context, ref LODParameters lodParameters) { }
}

// Namespace: 
public sealed class BatchRendererGroup.OnPerformCulling : MulticastDelegate // TypeDefIndex: 1777
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44D6A0 Offset: 0x44BEA0 VA: 0x18044D6A0 Slot: 12
	public virtual JobHandle Invoke(BatchRendererGroup rendererGroup, BatchCullingContext cullingContext) { }
	// RVA: 0x44E080 Offset: 0x44C880 VA: 0x18044E080 Slot: 13
	public virtual IAsyncResult BeginInvoke(BatchRendererGroup rendererGroup, BatchCullingContext cullingContext, AsyncCallback callback, object object) { }
	// RVA: 0x44E150 Offset: 0x44C950 VA: 0x18044E150 Slot: 14
	public virtual JobHandle EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Rendering
public struct LODParameters : IEquatable<LODParameters> // TypeDefIndex: 1778
{
	// Fields
	private int m_IsOrthographic; // 0x0
	private Vector3 m_CameraPosition; // 0x4
	private float m_FieldOfView; // 0x10
	private float m_OrthoSize; // 0x14
	private int m_CameraPixelHeight; // 0x18

	// Methods
	// RVA: 0x20C30 Offset: 0x20030 VA: 0x180020C30 Slot: 4
	public bool Equals(LODParameters other) { }
	// RVA: 0x20C70 Offset: 0x20070 VA: 0x180020C70 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x20D60 Offset: 0x20160 VA: 0x180020D60 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.Rendering
public abstract class RenderPipeline // TypeDefIndex: 1779
{
	// Fields
	private bool <disposed>k__BackingField; // 0x10

	// Properties
	public bool disposed { get; set; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	protected abstract void Render(ScriptableRenderContext context, Camera[] cameras) { }
	// RVA: 0x4F9A80 Offset: 0x4F8280 VA: 0x1804F9A80
	internal void InternalRender(ScriptableRenderContext context, Camera[] cameras) { }
	// RVA: 0x1E30F0 Offset: 0x1E18F0 VA: 0x1801E30F0
	public bool get_disposed() { }
	// RVA: 0x350D70 Offset: 0x34F570 VA: 0x180350D70
	private void set_disposed(bool value) { }
	// RVA: 0x4F9B70 Offset: 0x4F8370 VA: 0x1804F9B70
	internal void Dispose() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	protected virtual void Dispose(bool disposing) { }
}

// Namespace: UnityEngine.Rendering
public abstract class RenderPipelineAsset : ScriptableObject // TypeDefIndex: 1780
{
	// Properties
	public virtual string[] renderingLayerMaskNames { get; }
	public virtual Material defaultMaterial { get; }
	public virtual Shader autodeskInteractiveShader { get; }
	public virtual Shader autodeskInteractiveTransparentShader { get; }
	public virtual Shader autodeskInteractiveMaskedShader { get; }
	public virtual Shader terrainDetailLitShader { get; }
	public virtual Shader terrainDetailGrassShader { get; }
	public virtual Shader terrainDetailGrassBillboardShader { get; }
	public virtual Material defaultParticleMaterial { get; }
	public virtual Material defaultLineMaterial { get; }
	public virtual Material defaultTerrainMaterial { get; }
	public virtual Material defaultUIMaterial { get; }
	public virtual Material defaultUIOverdrawMaterial { get; }
	public virtual Material defaultUIETC1SupportedMaterial { get; }
	public virtual Material default2DMaterial { get; }
	public virtual Shader defaultShader { get; }
	public virtual Shader defaultSpeedTree7Shader { get; }
	public virtual Shader defaultSpeedTree8Shader { get; }

	// Methods
	// RVA: 0x4F9C20 Offset: 0x4F8420 VA: 0x1804F9C20
	internal RenderPipeline InternalCreatePipeline() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 4
	public virtual string[] get_renderingLayerMaskNames() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 5
	public virtual Material get_defaultMaterial() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 6
	public virtual Shader get_autodeskInteractiveShader() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 7
	public virtual Shader get_autodeskInteractiveTransparentShader() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 8
	public virtual Shader get_autodeskInteractiveMaskedShader() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 9
	public virtual Shader get_terrainDetailLitShader() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 10
	public virtual Shader get_terrainDetailGrassShader() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 11
	public virtual Shader get_terrainDetailGrassBillboardShader() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 12
	public virtual Material get_defaultParticleMaterial() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 13
	public virtual Material get_defaultLineMaterial() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 14
	public virtual Material get_defaultTerrainMaterial() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 15
	public virtual Material get_defaultUIMaterial() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 16
	public virtual Material get_defaultUIOverdrawMaterial() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 17
	public virtual Material get_defaultUIETC1SupportedMaterial() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 18
	public virtual Material get_default2DMaterial() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 19
	public virtual Shader get_defaultShader() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 20
	public virtual Shader get_defaultSpeedTree7Shader() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 21
	public virtual Shader get_defaultSpeedTree8Shader() { }
	// RVA: -1 Offset: -1 Slot: 22
	protected abstract RenderPipeline CreatePipeline() { }
	// RVA: 0x4F9DF0 Offset: 0x4F85F0 VA: 0x1804F9DF0 Slot: 23
	protected virtual void OnValidate() { }
	// RVA: 0x4F9E80 Offset: 0x4F8680 VA: 0x1804F9E80 Slot: 24
	protected virtual void OnDisable() { }
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	protected void .ctor() { }
}

// Namespace: UnityEngine.Rendering
public static class RenderPipelineManager // TypeDefIndex: 1781
{
	// Fields
	private static RenderPipelineAsset s_CurrentPipelineAsset; // 0x0
	private static Camera[] s_Cameras; // 0x8
	private static int s_CameraCapacity; // 0x10
	private static RenderPipeline <currentPipeline>k__BackingField; // 0x18

	// Properties
	public static RenderPipeline currentPipeline { get; set; }

	// Methods
	// RVA: 0x4F9F10 Offset: 0x4F8710 VA: 0x1804F9F10
	public static RenderPipeline get_currentPipeline() { }
	// RVA: 0x4F9FB0 Offset: 0x4F87B0 VA: 0x1804F9FB0
	private static void set_currentPipeline(RenderPipeline value) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4FA050 Offset: 0x4F8850 VA: 0x1804FA050
	internal static void CleanupRenderPipeline() { }
	// RVA: 0x4FA310 Offset: 0x4F8B10 VA: 0x1804FA310
	private static void GetCameras(ScriptableRenderContext context) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4FA550 Offset: 0x4F8D50 VA: 0x1804FA550
	private static void DoRenderLoop_Internal(RenderPipelineAsset pipe, IntPtr loopPtr) { }
	// RVA: 0x4FA770 Offset: 0x4F8F70 VA: 0x1804FA770
	private static void PrepareRenderPipeline(RenderPipelineAsset pipelineAsset) { }
	// RVA: 0x4FA950 Offset: 0x4F9150 VA: 0x1804FA950
	private static void .cctor() { }
}

// Namespace: UnityEngine.Rendering
public struct ScriptableRenderContext : IEquatable<ScriptableRenderContext> // TypeDefIndex: 1782
{
	// Fields
	private IntPtr m_Ptr; // 0x0

	// Methods
	// RVA: 0x16390 Offset: 0x15790 VA: 0x180016390
	private int GetNumberOfCameras_Internal() { }
	// RVA: 0x163E0 Offset: 0x157E0 VA: 0x1800163E0
	private Camera GetCamera_Internal(int index) { }
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	internal void .ctor(IntPtr ptr) { }
	// RVA: 0x16390 Offset: 0x15790 VA: 0x180016390
	internal int GetNumberOfCameras() { }
	// RVA: 0x163E0 Offset: 0x157E0 VA: 0x1800163E0
	internal Camera GetCamera(int index) { }
	// RVA: 0x16440 Offset: 0x15840 VA: 0x180016440 Slot: 4
	public bool Equals(ScriptableRenderContext other) { }
	// RVA: 0x16450 Offset: 0x15850 VA: 0x180016450 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x437200 Offset: 0x435A00 VA: 0x180437200
	private static int GetNumberOfCameras_Internal_Injected(ref ScriptableRenderContext _unity_self) { }
	// RVA: 0x437250 Offset: 0x435A50 VA: 0x180437250
	private static Camera GetCamera_Internal_Injected(ref ScriptableRenderContext _unity_self, int index) { }
}

// Namespace: UnityEngine.Rendering
public class SupportedRenderingFeatures // TypeDefIndex: 1783
{
	// Fields
	private static SupportedRenderingFeatures s_Active; // 0x0
	private SupportedRenderingFeatures.ReflectionProbeModes <reflectionProbeModes>k__BackingField; // 0x10
	private SupportedRenderingFeatures.LightmapMixedBakeModes <defaultMixedLightingModes>k__BackingField; // 0x14
	private SupportedRenderingFeatures.LightmapMixedBakeModes <mixedLightingModes>k__BackingField; // 0x18
	private LightmapBakeType <lightmapBakeTypes>k__BackingField; // 0x1C
	private LightmapsMode <lightmapsModes>k__BackingField; // 0x20
	private bool <enlighten>k__BackingField; // 0x24
	private bool <lightProbeProxyVolumes>k__BackingField; // 0x25
	private bool <motionVectors>k__BackingField; // 0x26
	private bool <receiveShadows>k__BackingField; // 0x27
	private bool <reflectionProbes>k__BackingField; // 0x28
	private bool <rendererPriority>k__BackingField; // 0x29
	private bool <terrainDetailUnsupported>k__BackingField; // 0x2A
	private bool <rendersUIOverlay>k__BackingField; // 0x2B
	private bool <overridesEnvironmentLighting>k__BackingField; // 0x2C
	private bool <overridesFog>k__BackingField; // 0x2D
	private bool <overridesOtherLightingSettings>k__BackingField; // 0x2E
	private bool <editableMaterialRenderQueue>k__BackingField; // 0x2F
	private bool <overridesLODBias>k__BackingField; // 0x30
	private bool <overridesMaximumLODLevel>k__BackingField; // 0x31
	private bool <rendererProbes>k__BackingField; // 0x32
	private bool <particleSystemInstancing>k__BackingField; // 0x33

	// Properties
	public static SupportedRenderingFeatures active { get; set; }
	public SupportedRenderingFeatures.LightmapMixedBakeModes defaultMixedLightingModes { get; }
	public SupportedRenderingFeatures.LightmapMixedBakeModes mixedLightingModes { get; }
	public LightmapBakeType lightmapBakeTypes { get; }
	public LightmapsMode lightmapsModes { get; }
	public bool enlighten { get; }
	public bool rendersUIOverlay { get; }

	// Methods
	// RVA: 0x43A7A0 Offset: 0x438FA0 VA: 0x18043A7A0
	public static SupportedRenderingFeatures get_active() { }
	// RVA: 0x43A900 Offset: 0x439100 VA: 0x18043A900
	public static void set_active(SupportedRenderingFeatures value) { }
	// RVA: 0x2E4C30 Offset: 0x2E3430 VA: 0x1802E4C30
	public SupportedRenderingFeatures.LightmapMixedBakeModes get_defaultMixedLightingModes() { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0
	public SupportedRenderingFeatures.LightmapMixedBakeModes get_mixedLightingModes() { }
	// RVA: 0x202970 Offset: 0x201170 VA: 0x180202970
	public LightmapBakeType get_lightmapBakeTypes() { }
	// RVA: 0x197B20 Offset: 0x196320 VA: 0x180197B20
	public LightmapsMode get_lightmapsModes() { }
	// RVA: 0x366650 Offset: 0x364E50 VA: 0x180366650
	public bool get_enlighten() { }
	// RVA: 0x43A9A0 Offset: 0x4391A0 VA: 0x18043A9A0
	public bool get_rendersUIOverlay() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x43A9B0 Offset: 0x4391B0 VA: 0x18043A9B0
	internal static void FallbackMixedLightingModeByRef(IntPtr fallbackModePtr) { }
	// RVA: 0x43AB80 Offset: 0x439380 VA: 0x18043AB80
	internal static bool IsMixedLightingModeSupported(MixedLightingMode mixedMode) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x43AC20 Offset: 0x439420 VA: 0x18043AC20
	internal static void IsMixedLightingModeSupportedByRef(MixedLightingMode mixedMode, IntPtr isSupportedPtr) { }
	// RVA: 0x43ADE0 Offset: 0x4395E0 VA: 0x18043ADE0
	internal static bool IsLightmapBakeTypeSupported(LightmapBakeType bakeType) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x43AFB0 Offset: 0x4397B0 VA: 0x18043AFB0
	internal static void IsLightmapBakeTypeSupportedByRef(LightmapBakeType bakeType, IntPtr isSupportedPtr) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x43B100 Offset: 0x439900 VA: 0x18043B100
	internal static void IsLightmapsModeSupportedByRef(LightmapsMode mode, IntPtr isSupportedPtr) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x43B1B0 Offset: 0x4399B0 VA: 0x18043B1B0
	internal static void IsLightmapperSupportedByRef(int lightmapper, IntPtr isSupportedPtr) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x43B270 Offset: 0x439A70 VA: 0x18043B270
	internal static void IsUIOverlayRenderedBySRP(IntPtr isSupportedPtr) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x43B310 Offset: 0x439B10 VA: 0x18043B310
	internal static void FallbackLightmapperByRef(IntPtr lightmapperPtr) { }
	// RVA: 0x43B320 Offset: 0x439B20 VA: 0x18043B320
	public void .ctor() { }
	// RVA: 0x43B360 Offset: 0x439B60 VA: 0x18043B360
	private static void .cctor() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum SupportedRenderingFeatures.ReflectionProbeModes // TypeDefIndex: 1784
{
	// Fields
	public int value__; // 0x0
	public const SupportedRenderingFeatures.ReflectionProbeModes None = 0; // 0x0
	public const SupportedRenderingFeatures.ReflectionProbeModes Rotation = 1; // 0x0
}

// Namespace: 
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum SupportedRenderingFeatures.LightmapMixedBakeModes // TypeDefIndex: 1785
{
	// Fields
	public int value__; // 0x0
	public const SupportedRenderingFeatures.LightmapMixedBakeModes None = 0; // 0x0
	public const SupportedRenderingFeatures.LightmapMixedBakeModes IndirectOnly = 1; // 0x0
	public const SupportedRenderingFeatures.LightmapMixedBakeModes Subtractive = 2; // 0x0
	public const SupportedRenderingFeatures.LightmapMixedBakeModes Shadowmask = 4; // 0x0
}

// Namespace: UnityEngine.Rendering
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum ShaderPropertyFlags // TypeDefIndex: 1786
{
	// Fields
	public int value__; // 0x0
	public const ShaderPropertyFlags None = 0; // 0x0
	public const ShaderPropertyFlags HideInInspector = 1; // 0x0
	public const ShaderPropertyFlags PerRendererData = 2; // 0x0
	public const ShaderPropertyFlags NoScaleOffset = 4; // 0x0
	public const ShaderPropertyFlags Normal = 8; // 0x0
	public const ShaderPropertyFlags HDR = 16; // 0x0
	public const ShaderPropertyFlags Gamma = 32; // 0x0
	public const ShaderPropertyFlags NonModifiableTextureData = 64; // 0x0
	public const ShaderPropertyFlags MainTexture = 128; // 0x0
	public const ShaderPropertyFlags MainColor = 256; // 0x0
}

// Namespace: UnityEngine.Playables
public struct FrameData // TypeDefIndex: 1787
{
	// Fields
	internal ulong m_FrameID; // 0x0
	internal double m_DeltaTime; // 0x8
	internal float m_Weight; // 0x10
	internal float m_EffectiveWeight; // 0x14
	internal double m_EffectiveParentDelay; // 0x18
	internal float m_EffectiveParentSpeed; // 0x20
	internal float m_EffectiveSpeed; // 0x24
	internal FrameData.Flags m_Flags; // 0x28
	internal PlayableOutput m_Output; // 0x30

	// Properties
	public float deltaTime { get; }
	public float effectiveSpeed { get; }
	public FrameData.EvaluationType evaluationType { get; }
	public bool timeLooped { get; }
	public PlayableOutput output { get; }

	// Methods
	// RVA: 0x20B10 Offset: 0x1FF10 VA: 0x180020B10
	private bool HasFlags(FrameData.Flags flag) { }
	// RVA: 0x20B20 Offset: 0x1FF20 VA: 0x180020B20
	public float get_deltaTime() { }
	// RVA: 0x20B30 Offset: 0x1FF30 VA: 0x180020B30
	public float get_effectiveSpeed() { }
	// RVA: 0x20B40 Offset: 0x1FF40 VA: 0x180020B40
	public FrameData.EvaluationType get_evaluationType() { }
	// RVA: 0x20B50 Offset: 0x1FF50 VA: 0x180020B50
	public bool get_timeLooped() { }
	// RVA: 0x20B60 Offset: 0x1FF60 VA: 0x180020B60
	public PlayableOutput get_output() { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum FrameData.Flags // TypeDefIndex: 1788
{
	// Fields
	public int value__; // 0x0
	public const FrameData.Flags Evaluate = 1; // 0x0
	public const FrameData.Flags SeekOccured = 2; // 0x0
	public const FrameData.Flags Loop = 4; // 0x0
	public const FrameData.Flags Hold = 8; // 0x0
	public const FrameData.Flags EffectivePlayStateDelayed = 16; // 0x0
	public const FrameData.Flags EffectivePlayStatePlaying = 32; // 0x0
}

// Namespace: 
public enum FrameData.EvaluationType // TypeDefIndex: 1789
{
	// Fields
	public int value__; // 0x0
	public const FrameData.EvaluationType Evaluate = 0; // 0x0
	public const FrameData.EvaluationType Playback = 1; // 0x0
}

// Namespace: UnityEngine.Playables
public interface INotification // TypeDefIndex: 1790
{}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public interface INotificationReceiver // TypeDefIndex: 1791
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnNotify(Playable origin, INotification notification, object context) { }
}

// Namespace: UnityEngine.Playables
public interface IPlayable // TypeDefIndex: 1792
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract PlayableHandle GetHandle() { }
}

// Namespace: UnityEngine.Playables
public interface IPlayableBehaviour // TypeDefIndex: 1793
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnGraphStart(Playable playable) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void OnGraphStop(Playable playable) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void OnPlayableCreate(Playable playable) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void OnPlayableDestroy(Playable playable) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void OnBehaviourPlay(Playable playable, FrameData info) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: -1 Offset: -1 Slot: 5
	public abstract void OnBehaviourPause(Playable playable, FrameData info) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: -1 Offset: -1 Slot: 6
	public abstract void PrepareFrame(Playable playable, FrameData info) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: -1 Offset: -1 Slot: 7
	public abstract void ProcessFrame(Playable playable, FrameData info, object playerData) { }
}

// Namespace: UnityEngine.Playables
public interface IPlayableOutput // TypeDefIndex: 1794
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract PlayableOutputHandle GetHandle() { }
}

// Namespace: UnityEngine.Playables
public enum DirectorWrapMode // TypeDefIndex: 1795
{
	// Fields
	public int value__; // 0x0
	public const DirectorWrapMode Hold = 0; // 0x0
	public const DirectorWrapMode Loop = 1; // 0x0
	public const DirectorWrapMode None = 2; // 0x0
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Playable : IPlayable, IEquatable<Playable> // TypeDefIndex: 1796
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly Playable m_NullPlayable; // 0x0

	// Properties
	public static Playable Null { get; }

	// Methods
	// RVA: 0x4ED290 Offset: 0x4EBA90 VA: 0x1804ED290
	public static Playable get_Null() { }
	// RVA: 0x4ED340 Offset: 0x4EBB40 VA: 0x1804ED340
	public static Playable Create(PlayableGraph graph, int inputCount = 0) { }
	// RVA: 0x1D7E0 Offset: 0x1CBE0 VA: 0x18001D7E0
	internal void .ctor(PlayableHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x1D7F0 Offset: 0x1CBF0 VA: 0x18001D7F0
	public Type GetPlayableType() { }
	// RVA: 0x1D810 Offset: 0x1CC10 VA: 0x18001D810 Slot: 5
	public bool Equals(Playable other) { }
	// RVA: 0x4ED590 Offset: 0x4EBD90 VA: 0x1804ED590
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
public interface IPlayableAsset // TypeDefIndex: 1797
{
	// Properties
	public abstract double duration { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract Playable CreatePlayable(PlayableGraph graph, GameObject owner) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract double get_duration() { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public abstract class PlayableAsset : ScriptableObject, IPlayableAsset // TypeDefIndex: 1798
{
	// Properties
	public virtual double duration { get; }
	public virtual IEnumerable<PlayableBinding> outputs { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 6
	public abstract Playable CreatePlayable(PlayableGraph graph, GameObject owner) { }
	// RVA: 0x4ED630 Offset: 0x4EBE30 VA: 0x1804ED630 Slot: 7
	public virtual double get_duration() { }
	// RVA: 0x4ED6D0 Offset: 0x4EBED0 VA: 0x1804ED6D0 Slot: 8
	public virtual IEnumerable<PlayableBinding> get_outputs() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4ED770 Offset: 0x4EBF70 VA: 0x1804ED770
	internal static void Internal_CreatePlayable(PlayableAsset asset, PlayableGraph graph, GameObject go, IntPtr ptr) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4ED8A0 Offset: 0x4EC0A0 VA: 0x1804ED8A0
	internal static void Internal_GetPlayableAssetDuration(PlayableAsset asset, IntPtr ptrToDouble) { }
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	protected void .ctor() { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public abstract class PlayableBehaviour : IPlayableBehaviour, ICloneable // TypeDefIndex: 1799
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 13
	public virtual void OnGraphStart(Playable playable) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 14
	public virtual void OnGraphStop(Playable playable) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 15
	public virtual void OnPlayableCreate(Playable playable) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 16
	public virtual void OnPlayableDestroy(Playable playable) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 17
	public virtual void OnBehaviourPlay(Playable playable, FrameData info) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 18
	public virtual void OnBehaviourPause(Playable playable, FrameData info) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 19
	public virtual void PrepareFrame(Playable playable, FrameData info) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 20
	public virtual void ProcessFrame(Playable playable, FrameData info, object playerData) { }
	// RVA: 0x4ED8D0 Offset: 0x4EC0D0 VA: 0x1804ED8D0 Slot: 21
	public virtual object Clone() { }
}

// Namespace: UnityEngine.Playables
public struct PlayableBinding // TypeDefIndex: 1800
{
	// Fields
	private string m_StreamName; // 0x0
	private Object m_SourceObject; // 0x8
	private Type m_SourceBindingType; // 0x10
	private PlayableBinding.CreateOutputMethod m_CreateOutputMethod; // 0x18
	public static readonly PlayableBinding[] None; // 0x0
	public static readonly double DefaultDuration; // 0x8

	// Properties
	public Object sourceObject { get; }

	// Methods
	// RVA: 0x1D850 Offset: 0x1CC50 VA: 0x18001D850
	public Object get_sourceObject() { }
	// RVA: 0x1D860 Offset: 0x1CC60 VA: 0x18001D860
	internal PlayableOutput CreateOutput(PlayableGraph graph) { }
	// RVA: 0x4EDA60 Offset: 0x4EC260 VA: 0x1804EDA60
	internal static PlayableBinding CreateInternal(string name, Object sourceObject, Type sourceType, PlayableBinding.CreateOutputMethod createFunction) { }
	// RVA: 0x4EDAA0 Offset: 0x4EC2A0 VA: 0x1804EDAA0
	private static void .cctor() { }
}

// Namespace: 
internal sealed class PlayableBinding.CreateOutputMethod : MulticastDelegate // TypeDefIndex: 1801
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x668F00 Offset: 0x667700 VA: 0x180668F00 Slot: 12
	public virtual PlayableOutput Invoke(PlayableGraph graph, string name) { }
	// RVA: 0x6692B0 Offset: 0x667AB0 VA: 0x1806692B0 Slot: 13
	public virtual IAsyncResult BeginInvoke(PlayableGraph graph, string name, AsyncCallback callback, object object) { }
	// RVA: 0x44E150 Offset: 0x44C950 VA: 0x18044E150 Slot: 14
	public virtual PlayableOutput EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Playables
public enum PlayableTraversalMode // TypeDefIndex: 1802
{
	// Fields
	public int value__; // 0x0
	public const PlayableTraversalMode Mix = 0; // 0x0
	public const PlayableTraversalMode Passthrough = 1; // 0x0
}

// Namespace: UnityEngine.Playables
public static class PlayableExtensions // TypeDefIndex: 1803
{
	// Methods
	// RVA: 0x426A80 Offset: 0x425280 VA: 0x180426A80
	public static bool IsValid(U playable) { }
	// RVA: 0x4268B0 Offset: 0x4250B0 VA: 0x1804268B0
	public static PlayState GetPlayState(U playable) { }
	// RVA: 0x426BD0 Offset: 0x4253D0 VA: 0x180426BD0
	public static void Play(U playable) { }
	// RVA: 0x426BB0 Offset: 0x4253B0 VA: 0x180426BB0
	public static void Pause(U playable) { }
	// RVA: 0x427340 Offset: 0x425B40 VA: 0x180427340
	public static void SetSpeed(U playable, double value) { }
	// RVA: 0x426C10 Offset: 0x425410 VA: 0x180426C10
	public static void SetDuration(U playable, double value) { }
	// RVA: 0x4266E0 Offset: 0x424EE0 VA: 0x1804266E0
	public static double GetDuration(U playable) { }
	// RVA: 0x427360 Offset: 0x425B60 VA: 0x180427360
	public static void SetTime(U playable, double value) { }
	// RVA: 0x4268F0 Offset: 0x4250F0 VA: 0x1804268F0
	public static double GetTime(U playable) { }
	// RVA: 0x426A40 Offset: 0x425240 VA: 0x180426A40
	public static bool IsDone(U playable) { }
	// RVA: 0x427200 Offset: 0x425A00 VA: 0x180427200
	public static void SetPropagateSetTime(U playable, bool value) { }
	// RVA: 0x426D50 Offset: 0x425550 VA: 0x180426D50
	public static void SetInputCount(U playable, int value) { }
	// RVA: 0x426850 Offset: 0x425050 VA: 0x180426850
	public static int GetInputCount(U playable) { }
	// RVA: 0x426810 Offset: 0x425010 VA: 0x180426810
	public static Playable GetInput(U playable, int inputPort) { }
	// RVA: 0x426EB0 Offset: 0x4256B0 VA: 0x180426EB0
	public static void SetInputWeight(U playable, int inputIndex, float weight) { }
	// RVA: 0x426FF0 Offset: 0x4257F0 VA: 0x180426FF0
	public static void SetInputWeight(U playable, V input, float weight) { }
	// RVA: 0x426870 Offset: 0x425070 VA: 0x180426870
	public static float GetInputWeight(U playable, int inputIndex) { }
	// RVA: 0x4274E0 Offset: 0x425CE0 VA: 0x1804274E0
	public static void SetTraversalMode(U playable, PlayableTraversalMode mode) { }
	// RVA: 0x426A20 Offset: 0x425220 VA: 0x180426A20
	internal static DirectorWrapMode GetTimeWrapMode(U playable) { }
	// RVA: 0x4273A0 Offset: 0x425BA0 VA: 0x1804273A0
	internal static void SetTimeWrapMode(U playable, DirectorWrapMode value) { }
}

// Namespace: UnityEngine.Playables
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PlayableGraph // TypeDefIndex: 1804
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x8

	// Methods
	// RVA: 0x15A50 Offset: 0x14E50 VA: 0x180015A50
	public bool Connect(U source, int sourceOutputPort, V destination, int destinationInputPort) { }
	// RVA: 0x1D890 Offset: 0x1CC90 VA: 0x18001D890
	public bool IsValid() { }
	// RVA: 0x1D8E0 Offset: 0x1CCE0 VA: 0x18001D8E0
	public IExposedPropertyTable GetResolver() { }
	// RVA: 0x1D930 Offset: 0x1CD30 VA: 0x18001D930
	public int GetPlayableCount() { }
	// RVA: 0x1D980 Offset: 0x1CD80 VA: 0x18001D980
	internal PlayableHandle CreatePlayableHandle() { }
	// RVA: 0x1D9A0 Offset: 0x1CDA0 VA: 0x18001D9A0
	internal bool CreateScriptOutputInternal(string name, out PlayableOutputHandle handle) { }
	// RVA: 0x1D9B0 Offset: 0x1CDB0 VA: 0x18001D9B0
	private bool ConnectInternal(PlayableHandle source, int sourceOutputPort, PlayableHandle destination, int destinationInputPort) { }
	// RVA: 0x4EDC20 Offset: 0x4EC420 VA: 0x1804EDC20
	private static bool IsValid_Injected(ref PlayableGraph _unity_self) { }
	// RVA: 0x4EDC70 Offset: 0x4EC470 VA: 0x1804EDC70
	private static IExposedPropertyTable GetResolver_Injected(ref PlayableGraph _unity_self) { }
	// RVA: 0x4EDCC0 Offset: 0x4EC4C0 VA: 0x1804EDCC0
	private static int GetPlayableCount_Injected(ref PlayableGraph _unity_self) { }
	// RVA: 0x4EDD10 Offset: 0x4EC510 VA: 0x1804EDD10
	private static void CreatePlayableHandle_Injected(ref PlayableGraph _unity_self, out PlayableHandle ret) { }
	// RVA: 0x4EDBB0 Offset: 0x4EC3B0 VA: 0x1804EDBB0
	private static bool CreateScriptOutputInternal_Injected(ref PlayableGraph _unity_self, string name, out PlayableOutputHandle handle) { }
	// RVA: 0x4EDD70 Offset: 0x4EC570 VA: 0x1804EDD70
	private static bool ConnectInternal_Injected(ref PlayableGraph _unity_self, ref PlayableHandle source, int sourceOutputPort, ref PlayableHandle destination, int destinationInputPort) { }
}

// Namespace: UnityEngine.Playables
public enum PlayState // TypeDefIndex: 1805
{
	// Fields
	public int value__; // 0x0
	public const PlayState Paused = 0; // 0x0
	public const PlayState Playing = 1; // 0x0
	[ObsoleteAttribute] // RVA: 0xDDA10 Offset: 0xDCE10 VA: 0x1800DDA10
	public const PlayState Delayed = 2; // 0x0
}

// Namespace: UnityEngine.Playables
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PlayableHandle : IEquatable<PlayableHandle> // TypeDefIndex: 1806
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x8
	private static readonly PlayableHandle m_Null; // 0x0

	// Properties
	public static PlayableHandle Null { get; }

	// Methods
	// RVA: 0x15AA0 Offset: 0x14EA0 VA: 0x180015AA0
	internal T GetObject() { }
	// RVA: 0x15B40 Offset: 0x14F40 VA: 0x180015B40
	internal bool IsPlayableOfType() { }
	// RVA: 0x4EDE00 Offset: 0x4EC600 VA: 0x1804EDE00
	public static PlayableHandle get_Null() { }
	// RVA: 0x1DA40 Offset: 0x1CE40 VA: 0x18001DA40
	internal Playable GetInput(int inputPort) { }
	// RVA: 0x1DA70 Offset: 0x1CE70 VA: 0x18001DA70
	internal bool SetInputWeight(int inputIndex, float weight) { }
	// RVA: 0x1DAD0 Offset: 0x1CED0 VA: 0x18001DAD0
	internal float GetInputWeight(int inputIndex) { }
	// RVA: 0x4EDEB0 Offset: 0x4EC6B0 VA: 0x1804EDEB0
	public static bool op_Equality(PlayableHandle x, PlayableHandle y) { }
	// RVA: 0x1DB20 Offset: 0x1CF20 VA: 0x18001DB20 Slot: 0
	public override bool Equals(object p) { }
	// RVA: 0x1DC00 Offset: 0x1D000 VA: 0x18001DC00 Slot: 4
	public bool Equals(PlayableHandle other) { }
	// RVA: 0x1DC20 Offset: 0x1D020 VA: 0x18001DC20 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x4EE070 Offset: 0x4EC870 VA: 0x1804EE070
	internal static bool CompareVersion(PlayableHandle lhs, PlayableHandle rhs) { }
	// RVA: 0x1DC30 Offset: 0x1D030 VA: 0x18001DC30
	internal bool CheckInputBounds(int inputIndex) { }
	// RVA: 0x1DC40 Offset: 0x1D040 VA: 0x18001DC40
	internal bool CheckInputBounds(int inputIndex, bool acceptAny) { }
	// RVA: 0x1DC50 Offset: 0x1D050 VA: 0x18001DC50
	internal bool IsValid() { }
	// RVA: 0x1DC60 Offset: 0x1D060 VA: 0x18001DC60
	internal Type GetPlayableType() { }
	// RVA: 0x1DC70 Offset: 0x1D070 VA: 0x18001DC70
	internal void SetScriptInstance(object scriptInstance) { }
	// RVA: 0x1DC80 Offset: 0x1D080 VA: 0x18001DC80
	internal PlayState GetPlayState() { }
	// RVA: 0x1DC90 Offset: 0x1D090 VA: 0x18001DC90
	internal void Play() { }
	// RVA: 0x1DCA0 Offset: 0x1D0A0 VA: 0x18001DCA0
	internal void Pause() { }
	// RVA: 0x1DCB0 Offset: 0x1D0B0 VA: 0x18001DCB0
	internal void SetSpeed(double value) { }
	// RVA: 0x1DCC0 Offset: 0x1D0C0 VA: 0x18001DCC0
	internal double GetTime() { }
	// RVA: 0x1DCD0 Offset: 0x1D0D0 VA: 0x18001DCD0
	internal void SetTime(double value) { }
	// RVA: 0x1DCE0 Offset: 0x1D0E0 VA: 0x18001DCE0
	internal bool IsDone() { }
	// RVA: 0x1DCF0 Offset: 0x1D0F0 VA: 0x18001DCF0
	internal double GetDuration() { }
	// RVA: 0x1DD00 Offset: 0x1D100 VA: 0x18001DD00
	internal void SetDuration(double value) { }
	// RVA: 0x1DD10 Offset: 0x1D110 VA: 0x18001DD10
	internal void SetPropagateSetTime(bool value) { }
	// RVA: 0x1DD20 Offset: 0x1D120 VA: 0x18001DD20
	internal int GetInputCount() { }
	// RVA: 0x1DD30 Offset: 0x1D130 VA: 0x18001DD30
	internal void SetInputCount(int value) { }
	// RVA: 0x1DD40 Offset: 0x1D140 VA: 0x18001DD40
	internal void SetInputWeight(PlayableHandle input, float weight) { }
	// RVA: 0x1DD60 Offset: 0x1D160 VA: 0x18001DD60
	internal void SetTraversalMode(PlayableTraversalMode mode) { }
	// RVA: 0x1DD70 Offset: 0x1D170 VA: 0x18001DD70
	internal DirectorWrapMode GetTimeWrapMode() { }
	// RVA: 0x1DD80 Offset: 0x1D180 VA: 0x18001DD80
	internal void SetTimeWrapMode(DirectorWrapMode mode) { }
	// RVA: 0x1DD90 Offset: 0x1D190 VA: 0x18001DD90
	private object GetScriptInstance() { }
	// RVA: 0x1DDA0 Offset: 0x1D1A0 VA: 0x18001DDA0
	private PlayableHandle GetInputHandle(int index) { }
	// RVA: 0x1DDC0 Offset: 0x1D1C0 VA: 0x18001DDC0
	private void SetInputWeightFromIndex(int index, float weight) { }
	// RVA: 0x1DDD0 Offset: 0x1D1D0 VA: 0x18001DDD0
	private float GetInputWeightFromIndex(int index) { }
	// RVA: 0x4EF660 Offset: 0x4EDE60 VA: 0x1804EF660
	private static void .cctor() { }
	// RVA: 0x4EF6E0 Offset: 0x4EDEE0 VA: 0x1804EF6E0
	private static bool IsValid_Injected(ref PlayableHandle _unity_self) { }
	// RVA: 0x4EF730 Offset: 0x4EDF30 VA: 0x1804EF730
	private static Type GetPlayableType_Injected(ref PlayableHandle _unity_self) { }
	// RVA: 0x4EF780 Offset: 0x4EDF80 VA: 0x1804EF780
	private static void SetScriptInstance_Injected(ref PlayableHandle _unity_self, object scriptInstance) { }
	// RVA: 0x4EF7E0 Offset: 0x4EDFE0 VA: 0x1804EF7E0
	private static PlayState GetPlayState_Injected(ref PlayableHandle _unity_self) { }
	// RVA: 0x4EF830 Offset: 0x4EE030 VA: 0x1804EF830
	private static void Play_Injected(ref PlayableHandle _unity_self) { }
	// RVA: 0x4EF880 Offset: 0x4EE080 VA: 0x1804EF880
	private static void Pause_Injected(ref PlayableHandle _unity_self) { }
	// RVA: 0x4EF8D0 Offset: 0x4EE0D0 VA: 0x1804EF8D0
	private static void SetSpeed_Injected(ref PlayableHandle _unity_self, double value) { }
	// RVA: 0x4EF930 Offset: 0x4EE130 VA: 0x1804EF930
	private static double GetTime_Injected(ref PlayableHandle _unity_self) { }
	// RVA: 0x4EF980 Offset: 0x4EE180 VA: 0x1804EF980
	private static void SetTime_Injected(ref PlayableHandle _unity_self, double value) { }
	// RVA: 0x4EF9E0 Offset: 0x4EE1E0 VA: 0x1804EF9E0
	private static bool IsDone_Injected(ref PlayableHandle _unity_self) { }
	// RVA: 0x4EFA30 Offset: 0x4EE230 VA: 0x1804EFA30
	private static double GetDuration_Injected(ref PlayableHandle _unity_self) { }
	// RVA: 0x4EFA80 Offset: 0x4EE280 VA: 0x1804EFA80
	private static void SetDuration_Injected(ref PlayableHandle _unity_self, double value) { }
	// RVA: 0x4EFAE0 Offset: 0x4EE2E0 VA: 0x1804EFAE0
	private static void SetPropagateSetTime_Injected(ref PlayableHandle _unity_self, bool value) { }
	// RVA: 0x4EFB40 Offset: 0x4EE340 VA: 0x1804EFB40
	private static int GetInputCount_Injected(ref PlayableHandle _unity_self) { }
	// RVA: 0x4EFB90 Offset: 0x4EE390 VA: 0x1804EFB90
	private static void SetInputCount_Injected(ref PlayableHandle _unity_self, int value) { }
	// RVA: 0x4EFBF0 Offset: 0x4EE3F0 VA: 0x1804EFBF0
	private static void SetInputWeight_Injected(ref PlayableHandle _unity_self, ref PlayableHandle input, float weight) { }
	// RVA: 0x4EFC60 Offset: 0x4EE460 VA: 0x1804EFC60
	private static void SetTraversalMode_Injected(ref PlayableHandle _unity_self, PlayableTraversalMode mode) { }
	// RVA: 0x4EFCC0 Offset: 0x4EE4C0 VA: 0x1804EFCC0
	private static DirectorWrapMode GetTimeWrapMode_Injected(ref PlayableHandle _unity_self) { }
	// RVA: 0x4EFD10 Offset: 0x4EE510 VA: 0x1804EFD10
	private static void SetTimeWrapMode_Injected(ref PlayableHandle _unity_self, DirectorWrapMode mode) { }
	// RVA: 0x4EFD70 Offset: 0x4EE570 VA: 0x1804EFD70
	private static object GetScriptInstance_Injected(ref PlayableHandle _unity_self) { }
	// RVA: 0x4EFDC0 Offset: 0x4EE5C0 VA: 0x1804EFDC0
	private static void GetInputHandle_Injected(ref PlayableHandle _unity_self, int index, out PlayableHandle ret) { }
	// RVA: 0x4EFE30 Offset: 0x4EE630 VA: 0x1804EFE30
	private static void SetInputWeightFromIndex_Injected(ref PlayableHandle _unity_self, int index, float weight) { }
	// RVA: 0x4EFEA0 Offset: 0x4EE6A0 VA: 0x1804EFEA0
	private static float GetInputWeightFromIndex_Injected(ref PlayableHandle _unity_self, int index) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PlayableOutput : IPlayableOutput, IEquatable<PlayableOutput> // TypeDefIndex: 1807
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0
	private static readonly PlayableOutput m_NullPlayableOutput; // 0x0

	// Properties
	public static PlayableOutput Null { get; }

	// Methods
	// RVA: 0x4EFF00 Offset: 0x4EE700 VA: 0x1804EFF00
	public static PlayableOutput get_Null() { }
	// RVA: 0x1D7E0 Offset: 0x1CBE0 VA: 0x18001D7E0
	internal void .ctor(PlayableOutputHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableOutputHandle GetHandle() { }
	// RVA: 0x15C00 Offset: 0x15000 VA: 0x180015C00
	public bool IsPlayableOutputOfType() { }
	// RVA: 0x1DDE0 Offset: 0x1D1E0 VA: 0x18001DDE0 Slot: 5
	public bool Equals(PlayableOutput other) { }
	// RVA: 0x4EFFB0 Offset: 0x4EE7B0 VA: 0x1804EFFB0
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
public static class PlayableOutputExtensions // TypeDefIndex: 1808
{
	// Methods
	// RVA: 0x427930 Offset: 0x426130 VA: 0x180427930
	public static void SetReferenceObject(U output, Object value) { }
	// RVA: 0x427A30 Offset: 0x426230 VA: 0x180427A30
	public static void SetUserData(U output, Object value) { }
	// RVA: 0x427810 Offset: 0x426010 VA: 0x180427810
	public static Playable GetSourcePlayable(U output) { }
	// RVA: 0x427950 Offset: 0x426150 VA: 0x180427950
	public static void SetSourcePlayable(U output, V value, int port) { }
	// RVA: 0x4277F0 Offset: 0x425FF0 VA: 0x1804277F0
	public static int GetSourceOutputPort(U output) { }
	// RVA: 0x427A50 Offset: 0x426250 VA: 0x180427A50
	public static void SetWeight(U output, float value) { }
	// RVA: 0x427900 Offset: 0x426100 VA: 0x180427900
	public static void PushNotification(U output, Playable origin, INotification notification, object context) { }
	// RVA: 0x4277D0 Offset: 0x425FD0 VA: 0x1804277D0
	public static void AddNotificationReceiver(U output, INotificationReceiver receiver) { }
}

// Namespace: UnityEngine.Playables
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct PlayableOutputHandle : IEquatable<PlayableOutputHandle> // TypeDefIndex: 1809
{
	// Fields
	internal IntPtr m_Handle; // 0x0
	internal uint m_Version; // 0x8
	private static readonly PlayableOutputHandle m_Null; // 0x0

	// Properties
	public static PlayableOutputHandle Null { get; }

	// Methods
	// RVA: 0x4F0050 Offset: 0x4EE850 VA: 0x1804F0050
	public static PlayableOutputHandle get_Null() { }
	// RVA: 0x15C50 Offset: 0x15050 VA: 0x180015C50
	internal bool IsPlayableOutputOfType() { }
	// RVA: 0x1DC20 Offset: 0x1D020 VA: 0x18001DC20 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x4F0100 Offset: 0x4EE900 VA: 0x1804F0100
	public static bool op_Equality(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }
	// RVA: 0x1DF30 Offset: 0x1D330 VA: 0x18001DF30 Slot: 0
	public override bool Equals(object p) { }
	// RVA: 0x1E010 Offset: 0x1D410 VA: 0x18001E010 Slot: 4
	public bool Equals(PlayableOutputHandle other) { }
	// RVA: 0x4EE070 Offset: 0x4EC870 VA: 0x1804EE070
	internal static bool CompareVersion(PlayableOutputHandle lhs, PlayableOutputHandle rhs) { }
	// RVA: 0x1E030 Offset: 0x1D430 VA: 0x18001E030
	internal bool IsValid() { }
	// RVA: 0x1E040 Offset: 0x1D440 VA: 0x18001E040
	internal Type GetPlayableOutputType() { }
	// RVA: 0x1E050 Offset: 0x1D450 VA: 0x18001E050
	internal void SetReferenceObject(Object target) { }
	// RVA: 0x1E060 Offset: 0x1D460 VA: 0x18001E060
	internal void SetUserData(Object target) { }
	// RVA: 0x1E070 Offset: 0x1D470 VA: 0x18001E070
	internal PlayableHandle GetSourcePlayable() { }
	// RVA: 0x1E090 Offset: 0x1D490 VA: 0x18001E090
	internal void SetSourcePlayable(PlayableHandle target, int port) { }
	// RVA: 0x1E0B0 Offset: 0x1D4B0 VA: 0x18001E0B0
	internal int GetSourceOutputPort() { }
	// RVA: 0x1E0C0 Offset: 0x1D4C0 VA: 0x18001E0C0
	internal void SetWeight(float weight) { }
	// RVA: 0x1E0D0 Offset: 0x1D4D0 VA: 0x18001E0D0
	internal void PushNotification(PlayableHandle origin, INotification notification, object context) { }
	// RVA: 0x1E0F0 Offset: 0x1D4F0 VA: 0x18001E0F0
	internal void AddNotificationReceiver(INotificationReceiver receiver) { }
	// RVA: 0x4F0B80 Offset: 0x4EF380 VA: 0x1804F0B80
	private static void .cctor() { }
	// RVA: 0x4F0C00 Offset: 0x4EF400 VA: 0x1804F0C00
	private static bool IsValid_Injected(ref PlayableOutputHandle _unity_self) { }
	// RVA: 0x4F0C50 Offset: 0x4EF450 VA: 0x1804F0C50
	private static Type GetPlayableOutputType_Injected(ref PlayableOutputHandle _unity_self) { }
	// RVA: 0x4F0CA0 Offset: 0x4EF4A0 VA: 0x1804F0CA0
	private static void SetReferenceObject_Injected(ref PlayableOutputHandle _unity_self, Object target) { }
	// RVA: 0x4F0D00 Offset: 0x4EF500 VA: 0x1804F0D00
	private static void SetUserData_Injected(ref PlayableOutputHandle _unity_self, Object target) { }
	// RVA: 0x4F0D60 Offset: 0x4EF560 VA: 0x1804F0D60
	private static void GetSourcePlayable_Injected(ref PlayableOutputHandle _unity_self, out PlayableHandle ret) { }
	// RVA: 0x4F0DC0 Offset: 0x4EF5C0 VA: 0x1804F0DC0
	private static void SetSourcePlayable_Injected(ref PlayableOutputHandle _unity_self, ref PlayableHandle target, int port) { }
	// RVA: 0x4F0E30 Offset: 0x4EF630 VA: 0x1804F0E30
	private static int GetSourceOutputPort_Injected(ref PlayableOutputHandle _unity_self) { }
	// RVA: 0x4F0E80 Offset: 0x4EF680 VA: 0x1804F0E80
	private static void SetWeight_Injected(ref PlayableOutputHandle _unity_self, float weight) { }
	// RVA: 0x4F0EE0 Offset: 0x4EF6E0 VA: 0x1804F0EE0
	private static void PushNotification_Injected(ref PlayableOutputHandle _unity_self, ref PlayableHandle origin, INotification notification, object context) { }
	// RVA: 0x4F0F60 Offset: 0x4EF760 VA: 0x1804F0F60
	private static void AddNotificationReceiver_Injected(ref PlayableOutputHandle _unity_self, INotificationReceiver receiver) { }
}

// Namespace: UnityEngine.Playables
public struct ScriptPlayable<T> : IPlayable, IEquatable<ScriptPlayable<T>> // TypeDefIndex: 1810
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly ScriptPlayable<T> m_NullPlayable; // 0x0

	// Properties
	public static ScriptPlayable<T> Null { get; }

	// Methods
	// RVA: 0x7BDA20 Offset: 0x7BC220 VA: 0x1807BDA20
	public static ScriptPlayable<T> get_Null() { }
	// RVA: 0x7BDB40 Offset: 0x7BC340 VA: 0x1807BDB40
	public static ScriptPlayable<T> Create(PlayableGraph graph, int inputCount = 0) { }
	// RVA: 0x7BDCF0 Offset: 0x7BC4F0 VA: 0x1807BDCF0
	private static PlayableHandle CreateHandle(PlayableGraph graph, T template, int inputCount) { }
	// RVA: 0x7BE0E0 Offset: 0x7BC8E0 VA: 0x1807BE0E0
	private static object CreateScriptInstance() { }
	// RVA: 0x7BE370 Offset: 0x7BCB70 VA: 0x1807BE370
	private static object CloneScriptInstance(IPlayableBehaviour source) { }
	// RVA: 0x7BE640 Offset: 0x7BCE40 VA: 0x1807BE640
	private static object CloneScriptInstanceFromEngineObject(Object source) { }
	// RVA: 0x7BE790 Offset: 0x7BCF90 VA: 0x1807BE790
	private static object CloneScriptInstanceFromIClonable(ICloneable source) { }
	// RVA: 0x12FAA0 Offset: 0x12EEA0 VA: 0x18012FAA0
	internal void .ctor(PlayableHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x12FAC0 Offset: 0x12EEC0 VA: 0x18012FAC0
	public T GetBehaviour() { }
	// RVA: 0x7BE9C0 Offset: 0x7BD1C0 VA: 0x1807BE9C0
	public static Playable op_Implicit(ScriptPlayable<T> playable) { }
	// RVA: 0x7BEA00 Offset: 0x7BD200 VA: 0x1807BEA00
	public static ScriptPlayable<T> op_Explicit(Playable playable) { }
	// RVA: 0x12FB00 Offset: 0x12EF00 VA: 0x18012FB00 Slot: 5
	public bool Equals(ScriptPlayable<T> other) { }
	// RVA: 0x7BEBF0 Offset: 0x7BD3F0 VA: 0x1807BEBF0
	private static void .cctor() { }
}

// Namespace: UnityEngine.Playables
public static class ScriptPlayableBinding // TypeDefIndex: 1811
{
	// Methods
	// RVA: 0x436960 Offset: 0x435160 VA: 0x180436960
	public static PlayableBinding Create(string name, Object key, Type type) { }
	// RVA: 0x436A70 Offset: 0x435270 VA: 0x180436A70
	private static PlayableOutput CreateScriptOutput(PlayableGraph graph, string name) { }
}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct ScriptPlayableOutput : IPlayableOutput // TypeDefIndex: 1812
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0

	// Properties
	public static ScriptPlayableOutput Null { get; }

	// Methods
	// RVA: 0x436AB0 Offset: 0x4352B0 VA: 0x180436AB0
	public static ScriptPlayableOutput Create(PlayableGraph graph, string name) { }
	// RVA: 0x16340 Offset: 0x15740 VA: 0x180016340
	internal void .ctor(PlayableOutputHandle handle) { }
	// RVA: 0x436E10 Offset: 0x435610 VA: 0x180436E10
	public static ScriptPlayableOutput get_Null() { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableOutputHandle GetHandle() { }
	// RVA: 0x436F70 Offset: 0x435770 VA: 0x180436F70
	public static PlayableOutput op_Implicit(ScriptPlayableOutput output) { }
}

// Namespace: UnityEngine.Experimental.U2D
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal struct SpriteIntermediateRendererInfo // TypeDefIndex: 1813
{
	// Fields
	public int SpriteID; // 0x0
	public int TextureID; // 0x4
	public int MaterialID; // 0x8
	public Color Color; // 0xC
	public Matrix4x4 Transform; // 0x1C
	public Bounds Bounds; // 0x5C
	public int Layer; // 0x74
	public int SortingLayer; // 0x78
	public int SortingOrder; // 0x7C
	public ulong SceneCullingMask; // 0x80
	public IntPtr IndexData; // 0x88
	public IntPtr VertexData; // 0x90
	public int IndexCount; // 0x98
	public int VertexCount; // 0x9C
	public int ShaderChannelMask; // 0xA0
}

// Namespace: UnityEngine.Experimental.U2D
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal class SpriteRendererGroup // TypeDefIndex: 1814
{}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public enum LightType // TypeDefIndex: 1815
{
	// Fields
	public byte value__; // 0x0
	public const LightType Directional = 0; // 0x0
	public const LightType Point = 1; // 0x0
	public const LightType Spot = 2; // 0x0
	public const LightType Rectangle = 3; // 0x0
	public const LightType Disc = 4; // 0x0
	public const LightType SpotPyramidShape = 5; // 0x0
	public const LightType SpotBoxShape = 6; // 0x0
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public enum LightMode // TypeDefIndex: 1816
{
	// Fields
	public byte value__; // 0x0
	public const LightMode Realtime = 0; // 0x0
	public const LightMode Mixed = 1; // 0x0
	public const LightMode Baked = 2; // 0x0
	public const LightMode Unknown = 3; // 0x0
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public enum FalloffType // TypeDefIndex: 1817
{
	// Fields
	public byte value__; // 0x0
	public const FalloffType InverseSquared = 0; // 0x0
	public const FalloffType InverseSquaredNoRangeAttenuation = 1; // 0x0
	public const FalloffType Linear = 2; // 0x0
	public const FalloffType Legacy = 3; // 0x0
	public const FalloffType Undefined = 4; // 0x0
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public enum AngularFalloffType // TypeDefIndex: 1818
{
	// Fields
	public byte value__; // 0x0
	public const AngularFalloffType LUT = 0; // 0x0
	public const AngularFalloffType AnalyticAndInnerAngle = 1; // 0x0
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public struct LinearColor // TypeDefIndex: 1819
{
	// Fields
	private float m_red; // 0x0
	private float m_green; // 0x4
	private float m_blue; // 0x8
	private float m_intensity; // 0xC

	// Properties
	public float red { get; set; }
	public float green { get; set; }
	public float blue { get; set; }

	// Methods
	// RVA: 0x1E790 Offset: 0x1DB90 VA: 0x18001E790
	public float get_red() { }
	// RVA: 0x21070 Offset: 0x20470 VA: 0x180021070
	public void set_red(float value) { }
	// RVA: 0x1E7A0 Offset: 0x1DBA0 VA: 0x18001E7A0
	public float get_green() { }
	// RVA: 0x21080 Offset: 0x20480 VA: 0x180021080
	public void set_green(float value) { }
	// RVA: 0x1E8E0 Offset: 0x1DCE0 VA: 0x18001E8E0
	public float get_blue() { }
	// RVA: 0x21090 Offset: 0x20490 VA: 0x180021090
	public void set_blue(float value) { }
	// RVA: 0x54CF90 Offset: 0x54B790 VA: 0x18054CF90
	public static LinearColor Convert(Color color, float intensity) { }
	// RVA: 0x4F6BF0 Offset: 0x4F53F0 VA: 0x1804F6BF0
	public static LinearColor Black() { }
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public struct DirectionalLight // TypeDefIndex: 1820
{
	// Fields
	public int instanceID; // 0x0
	public bool shadow; // 0x4
	public LightMode mode; // 0x5
	public Vector3 position; // 0x8
	public Quaternion orientation; // 0x14
	public LinearColor color; // 0x24
	public LinearColor indirectColor; // 0x34
	public float penumbraWidthRadian; // 0x44
	[ObsoleteAttribute] // RVA: 0xDDA40 Offset: 0xDCE40 VA: 0x1800DDA40
	public Vector3 direction; // 0x48
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public struct PointLight // TypeDefIndex: 1821
{
	// Fields
	public int instanceID; // 0x0
	public bool shadow; // 0x4
	public LightMode mode; // 0x5
	public Vector3 position; // 0x8
	public LinearColor color; // 0x14
	public LinearColor indirectColor; // 0x24
	public float range; // 0x34
	public float sphereRadius; // 0x38
	public FalloffType falloff; // 0x3C
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public struct SpotLight // TypeDefIndex: 1822
{
	// Fields
	public int instanceID; // 0x0
	public bool shadow; // 0x4
	public LightMode mode; // 0x5
	public Vector3 position; // 0x8
	public Quaternion orientation; // 0x14
	public LinearColor color; // 0x24
	public LinearColor indirectColor; // 0x34
	public float range; // 0x44
	public float sphereRadius; // 0x48
	public float coneAngle; // 0x4C
	public float innerConeAngle; // 0x50
	public FalloffType falloff; // 0x54
	public AngularFalloffType angularFalloff; // 0x55
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public struct RectangleLight // TypeDefIndex: 1823
{
	// Fields
	public int instanceID; // 0x0
	public bool shadow; // 0x4
	public LightMode mode; // 0x5
	public Vector3 position; // 0x8
	public Quaternion orientation; // 0x14
	public LinearColor color; // 0x24
	public LinearColor indirectColor; // 0x34
	public float range; // 0x44
	public float width; // 0x48
	public float height; // 0x4C
	public FalloffType falloff; // 0x50
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public struct DiscLight // TypeDefIndex: 1824
{
	// Fields
	public int instanceID; // 0x0
	public bool shadow; // 0x4
	public LightMode mode; // 0x5
	public Vector3 position; // 0x8
	public Quaternion orientation; // 0x14
	public LinearColor color; // 0x24
	public LinearColor indirectColor; // 0x34
	public float range; // 0x44
	public float radius; // 0x48
	public FalloffType falloff; // 0x4C
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public struct Cookie // TypeDefIndex: 1825
{
	// Fields
	public int instanceID; // 0x0
	public float scale; // 0x4
	public Vector2 sizes; // 0x8
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct LightDataGI // TypeDefIndex: 1826
{
	// Fields
	public int instanceID; // 0x0
	public int cookieID; // 0x4
	public float cookieScale; // 0x8
	public LinearColor color; // 0xC
	public LinearColor indirectColor; // 0x1C
	public Quaternion orientation; // 0x2C
	public Vector3 position; // 0x3C
	public float range; // 0x48
	public float coneAngle; // 0x4C
	public float innerConeAngle; // 0x50
	public float shape0; // 0x54
	public float shape1; // 0x58
	public LightType type; // 0x5C
	public LightMode mode; // 0x5D
	public byte shadow; // 0x5E
	public FalloffType falloff; // 0x5F

	// Methods
	// RVA: 0x20E70 Offset: 0x20270 VA: 0x180020E70
	public void Init(ref DirectionalLight light, ref Cookie cookie) { }
	// RVA: 0x20EF0 Offset: 0x202F0 VA: 0x180020EF0
	public void Init(ref PointLight light, ref Cookie cookie) { }
	// RVA: 0x20F00 Offset: 0x20300 VA: 0x180020F00
	public void Init(ref SpotLight light, ref Cookie cookie) { }
	// RVA: 0x20F80 Offset: 0x20380 VA: 0x180020F80
	public void Init(ref RectangleLight light, ref Cookie cookie) { }
	// RVA: 0x20FF0 Offset: 0x203F0 VA: 0x180020FF0
	public void Init(ref DiscLight light, ref Cookie cookie) { }
	// RVA: 0x21060 Offset: 0x20460 VA: 0x180021060
	public void InitNoBake(int lightInstanceID) { }
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public static class LightmapperUtils // TypeDefIndex: 1827
{
	// Methods
	// RVA: 0x54AEC0 Offset: 0x5496C0 VA: 0x18054AEC0
	public static LightMode Extract(LightmapBakeType baketype) { }
	// RVA: 0x54AEE0 Offset: 0x5496E0 VA: 0x18054AEE0
	public static LinearColor ExtractIndirect(Light l) { }
	// RVA: 0x54B020 Offset: 0x549820 VA: 0x18054B020
	public static float ExtractInnerCone(Light l) { }
	// RVA: 0x53D1A0 Offset: 0x53B9A0 VA: 0x18053D1A0
	private static Color ExtractColorTemperature(Light l) { }
	// RVA: 0x54B140 Offset: 0x549940 VA: 0x18054B140
	private static void ApplyColorTemperature(Color cct, ref LinearColor lightColor) { }
	// RVA: 0x54B1A0 Offset: 0x5499A0 VA: 0x18054B1A0
	public static void Extract(Light l, ref DirectionalLight dir) { }
	// RVA: 0x54B540 Offset: 0x549D40 VA: 0x18054B540
	public static void Extract(Light l, ref PointLight point) { }
	// RVA: 0x54B890 Offset: 0x54A090 VA: 0x18054B890
	public static void Extract(Light l, ref SpotLight spot) { }
	// RVA: 0x54BDD0 Offset: 0x54A5D0 VA: 0x18054BDD0
	public static void Extract(Light l, ref RectangleLight rect) { }
	// RVA: 0x54C1C0 Offset: 0x54A9C0 VA: 0x18054C1C0
	public static void Extract(Light l, ref DiscLight disc) { }
	// RVA: 0x54C5B0 Offset: 0x54ADB0 VA: 0x18054C5B0
	public static void Extract(Light l, out Cookie cookie) { }
}

// Namespace: UnityEngine.Experimental.GlobalIllumination
public static class Lightmapping // TypeDefIndex: 1828
{
	// Fields
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static readonly Lightmapping.RequestLightsDelegate s_DefaultDelegate; // 0x0
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private static Lightmapping.RequestLightsDelegate s_RequestLightsDelegate; // 0x8

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x54C8A0 Offset: 0x54B0A0 VA: 0x18054C8A0
	public static void SetDelegate(Lightmapping.RequestLightsDelegate del) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x54C980 Offset: 0x54B180 VA: 0x18054C980
	public static Lightmapping.RequestLightsDelegate GetDelegate() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x54CA20 Offset: 0x54B220 VA: 0x18054CA20
	public static void ResetDelegate() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x54CAC0 Offset: 0x54B2C0 VA: 0x18054CAC0
	internal static void RequestLights(Light[] lights, IntPtr outLightsPtr, int outLightsCount) { }
	// RVA: 0x54CBB0 Offset: 0x54B3B0 VA: 0x18054CBB0
	private static void .cctor() { }
}

// Namespace: 
public sealed class Lightmapping.RequestLightsDelegate : MulticastDelegate // TypeDefIndex: 1829
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x667950 Offset: 0x666150 VA: 0x180667950 Slot: 12
	public virtual void Invoke(Light[] requests, NativeArray<LightDataGI> lightsOutput) { }
	// RVA: 0x667EB0 Offset: 0x6666B0 VA: 0x180667EB0 Slot: 13
	public virtual IAsyncResult BeginInvoke(Light[] requests, NativeArray<LightDataGI> lightsOutput, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[Serializable]
private sealed class Lightmapping.<>c // TypeDefIndex: 1830
{
	// Fields
	public static readonly Lightmapping.<>c <>9; // 0xAC372

	// Methods
	// RVA: 0x44F120 Offset: 0x44D920 VA: 0x18044F120
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x44F1A0 Offset: 0x44D9A0 VA: 0x18044F1A0
	internal void <.cctor>b__7_0(Light[] requests, NativeArray<LightDataGI> lightsOutput) { }
}

// Namespace: UnityEngine.Experimental.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct CameraPlayable : IPlayable, IEquatable<CameraPlayable> // TypeDefIndex: 1831
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x20530 Offset: 0x1F930 VA: 0x180020530 Slot: 5
	public bool Equals(CameraPlayable other) { }
}

// Namespace: UnityEngine.Experimental.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct MaterialEffectPlayable : IPlayable, IEquatable<MaterialEffectPlayable> // TypeDefIndex: 1832
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x210B0 Offset: 0x204B0 VA: 0x1800210B0 Slot: 5
	public bool Equals(MaterialEffectPlayable other) { }
}

// Namespace: UnityEngine.Experimental.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct TextureMixerPlayable : IPlayable, IEquatable<TextureMixerPlayable> // TypeDefIndex: 1833
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x167C0 Offset: 0x15BC0 VA: 0x1800167C0 Slot: 5
	public bool Equals(TextureMixerPlayable other) { }
}

// Namespace: UnityEngine.Experimental.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct TexturePlayableOutput : IPlayableOutput // TypeDefIndex: 1834
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0

	// Methods
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableOutputHandle GetHandle() { }
}

// Namespace: UnityEngine.Experimental.Rendering
internal class BuiltinRuntimeReflectionSystem : IScriptableRuntimeReflectionSystem, IDisposable // TypeDefIndex: 1835
{
	// Methods
	// RVA: 0x53A2C0 Offset: 0x538AC0 VA: 0x18053A2C0 Slot: 4
	public bool TickRealtimeProbes() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	public void Dispose() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void Dispose(bool disposing) { }
	// RVA: 0x53A2C0 Offset: 0x538AC0 VA: 0x18053A2C0
	private static bool BuiltinUpdate() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x53A310 Offset: 0x538B10 VA: 0x18053A310
	private static BuiltinRuntimeReflectionSystem Internal_BuiltinRuntimeReflectionSystem_New() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.Experimental.Rendering
public interface IScriptableRuntimeReflectionSystem : IDisposable // TypeDefIndex: 1836
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool TickRealtimeProbes() { }
}

// Namespace: UnityEngine.Experimental.Rendering
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public static class ScriptableRuntimeReflectionSystemSettings // TypeDefIndex: 1837
{
	// Fields
	private static ScriptableRuntimeReflectionSystemWrapper s_Instance; // 0xA17960

	// Properties
	set; }
	private static ScriptableRuntimeReflectionSystemWrapper Internal_ScriptableRuntimeReflectionSystemSettings_instance { get; }

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x4372B0 Offset: 0x435AB0 VA: 0x1804372B0
	private static void set_Internal_ScriptableRuntimeReflectionSystemSettings_system(IScriptableRuntimeReflectionSystem value) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x437420 Offset: 0x435C20 VA: 0x180437420
	private static ScriptableRuntimeReflectionSystemWrapper get_Internal_ScriptableRuntimeReflectionSystemSettings_instance() { }
	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xDC810 Offset: 0xDBC10 VA: 0x1800DC810
	// RVA: 0x4374C0 Offset: 0x435CC0 VA: 0x1804374C0
	private static void ScriptingDirtyReflectionSystemInstance() { }
	// RVA: 0x437510 Offset: 0x435D10 VA: 0x180437510
	private static void .cctor() { }
}

// Namespace: UnityEngine.Experimental.Rendering
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal class ScriptableRuntimeReflectionSystemWrapper // TypeDefIndex: 1838
{
	// Fields
	private IScriptableRuntimeReflectionSystem <implementation>k__BackingField; // 0x10

	// Properties
	internal IScriptableRuntimeReflectionSystem implementation { get; set; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	internal IScriptableRuntimeReflectionSystem get_implementation() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	internal void set_implementation(IScriptableRuntimeReflectionSystem value) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x437590 Offset: 0x435D90 VA: 0x180437590
	private void Internal_ScriptableRuntimeReflectionSystemWrapper_TickRealtimeProbes(out bool result) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.Experimental.Rendering
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum TextureCreationFlags // TypeDefIndex: 1839
{
	// Fields
	public int value__; // 0x0
	public const TextureCreationFlags None = 0; // 0x0
	public const TextureCreationFlags MipChain = 1; // 0x0
	public const TextureCreationFlags Crunch = 64; // 0x0
}

// Namespace: UnityEngine.Experimental.Rendering
public enum FormatUsage // TypeDefIndex: 1840
{
	// Fields
	public int value__; // 0x0
	public const FormatUsage Sample = 0; // 0x0
	public const FormatUsage Linear = 1; // 0x0
	public const FormatUsage Sparse = 2; // 0x0
	public const FormatUsage Render = 4; // 0x0
	public const FormatUsage Blend = 5; // 0x0
	public const FormatUsage GetPixels = 6; // 0x0
	public const FormatUsage SetPixels = 7; // 0x0
	public const FormatUsage SetPixels32 = 8; // 0x0
	public const FormatUsage ReadPixels = 9; // 0x0
	public const FormatUsage LoadStore = 10; // 0x0
	public const FormatUsage MSAA2x = 11; // 0x0
	public const FormatUsage MSAA4x = 12; // 0x0
	public const FormatUsage MSAA8x = 13; // 0x0
	public const FormatUsage StencilSampling = 15; // 0x0
}

// Namespace: UnityEngine.Experimental.Rendering
public enum DefaultFormat // TypeDefIndex: 1841
{
	// Fields
	public int value__; // 0x0
	public const DefaultFormat LDR = 0; // 0x0
	public const DefaultFormat HDR = 1; // 0x0
}

// Namespace: UnityEngine.Experimental.Rendering
public enum GraphicsFormat // TypeDefIndex: 1842
{
	// Fields
	public int value__; // 0x0
	public const GraphicsFormat None = 0; // 0x0
	public const GraphicsFormat R8_SRGB = 1; // 0x0
	public const GraphicsFormat R8G8_SRGB = 2; // 0x0
	public const GraphicsFormat R8G8B8_SRGB = 3; // 0x0
	public const GraphicsFormat R8G8B8A8_SRGB = 4; // 0x0
	public const GraphicsFormat R8_UNorm = 5; // 0x0
	public const GraphicsFormat R8G8_UNorm = 6; // 0x0
	public const GraphicsFormat R8G8B8_UNorm = 7; // 0x0
	public const GraphicsFormat R8G8B8A8_UNorm = 8; // 0x0
	public const GraphicsFormat R8_SNorm = 9; // 0x0
	public const GraphicsFormat R8G8_SNorm = 10; // 0x0
	public const GraphicsFormat R8G8B8_SNorm = 11; // 0x0
	public const GraphicsFormat R8G8B8A8_SNorm = 12; // 0x0
	public const GraphicsFormat R8_UInt = 13; // 0x0
	public const GraphicsFormat R8G8_UInt = 14; // 0x0
	public const GraphicsFormat R8G8B8_UInt = 15; // 0x0
	public const GraphicsFormat R8G8B8A8_UInt = 16; // 0x0
	public const GraphicsFormat R8_SInt = 17; // 0x0
	public const GraphicsFormat R8G8_SInt = 18; // 0x0
	public const GraphicsFormat R8G8B8_SInt = 19; // 0x0
	public const GraphicsFormat R8G8B8A8_SInt = 20; // 0x0
	public const GraphicsFormat R16_UNorm = 21; // 0x0
	public const GraphicsFormat R16G16_UNorm = 22; // 0x0
	public const GraphicsFormat R16G16B16_UNorm = 23; // 0x0
	public const GraphicsFormat R16G16B16A16_UNorm = 24; // 0x0
	public const GraphicsFormat R16_SNorm = 25; // 0x0
	public const GraphicsFormat R16G16_SNorm = 26; // 0x0
	public const GraphicsFormat R16G16B16_SNorm = 27; // 0x0
	public const GraphicsFormat R16G16B16A16_SNorm = 28; // 0x0
	public const GraphicsFormat R16_UInt = 29; // 0x0
	public const GraphicsFormat R16G16_UInt = 30; // 0x0
	public const GraphicsFormat R16G16B16_UInt = 31; // 0x0
	public const GraphicsFormat R16G16B16A16_UInt = 32; // 0x0
	public const GraphicsFormat R16_SInt = 33; // 0x0
	public const GraphicsFormat R16G16_SInt = 34; // 0x0
	public const GraphicsFormat R16G16B16_SInt = 35; // 0x0
	public const GraphicsFormat R16G16B16A16_SInt = 36; // 0x0
	public const GraphicsFormat R32_UInt = 37; // 0x0
	public const GraphicsFormat R32G32_UInt = 38; // 0x0
	public const GraphicsFormat R32G32B32_UInt = 39; // 0x0
	public const GraphicsFormat R32G32B32A32_UInt = 40; // 0x0
	public const GraphicsFormat R32_SInt = 41; // 0x0
	public const GraphicsFormat R32G32_SInt = 42; // 0x0
	public const GraphicsFormat R32G32B32_SInt = 43; // 0x0
	public const GraphicsFormat R32G32B32A32_SInt = 44; // 0x0
	public const GraphicsFormat R16_SFloat = 45; // 0x0
	public const GraphicsFormat R16G16_SFloat = 46; // 0x0
	public const GraphicsFormat R16G16B16_SFloat = 47; // 0x0
	public const GraphicsFormat R16G16B16A16_SFloat = 48; // 0x0
	public const GraphicsFormat R32_SFloat = 49; // 0x0
	public const GraphicsFormat R32G32_SFloat = 50; // 0x0
	public const GraphicsFormat R32G32B32_SFloat = 51; // 0x0
	public const GraphicsFormat R32G32B32A32_SFloat = 52; // 0x0
	public const GraphicsFormat B8G8R8_SRGB = 56; // 0x0
	public const GraphicsFormat B8G8R8A8_SRGB = 57; // 0x0
	public const GraphicsFormat B8G8R8_UNorm = 58; // 0x0
	public const GraphicsFormat B8G8R8A8_UNorm = 59; // 0x0
	public const GraphicsFormat B8G8R8_SNorm = 60; // 0x0
	public const GraphicsFormat B8G8R8A8_SNorm = 61; // 0x0
	public const GraphicsFormat B8G8R8_UInt = 62; // 0x0
	public const GraphicsFormat B8G8R8A8_UInt = 63; // 0x0
	public const GraphicsFormat B8G8R8_SInt = 64; // 0x0
	public const GraphicsFormat B8G8R8A8_SInt = 65; // 0x0
	public const GraphicsFormat R4G4B4A4_UNormPack16 = 66; // 0x0
	public const GraphicsFormat B4G4R4A4_UNormPack16 = 67; // 0x0
	public const GraphicsFormat R5G6B5_UNormPack16 = 68; // 0x0
	public const GraphicsFormat B5G6R5_UNormPack16 = 69; // 0x0
	public const GraphicsFormat R5G5B5A1_UNormPack16 = 70; // 0x0
	public const GraphicsFormat B5G5R5A1_UNormPack16 = 71; // 0x0
	public const GraphicsFormat A1R5G5B5_UNormPack16 = 72; // 0x0
	public const GraphicsFormat E5B9G9R9_UFloatPack32 = 73; // 0x0
	public const GraphicsFormat B10G11R11_UFloatPack32 = 74; // 0x0
	public const GraphicsFormat A2B10G10R10_UNormPack32 = 75; // 0x0
	public const GraphicsFormat A2B10G10R10_UIntPack32 = 76; // 0x0
	public const GraphicsFormat A2B10G10R10_SIntPack32 = 77; // 0x0
	public const GraphicsFormat A2R10G10B10_UNormPack32 = 78; // 0x0
	public const GraphicsFormat A2R10G10B10_UIntPack32 = 79; // 0x0
	public const GraphicsFormat A2R10G10B10_SIntPack32 = 80; // 0x0
	public const GraphicsFormat A2R10G10B10_XRSRGBPack32 = 81; // 0x0
	public const GraphicsFormat A2R10G10B10_XRUNormPack32 = 82; // 0x0
	public const GraphicsFormat R10G10B10_XRSRGBPack32 = 83; // 0x0
	public const GraphicsFormat R10G10B10_XRUNormPack32 = 84; // 0x0
	public const GraphicsFormat A10R10G10B10_XRSRGBPack32 = 85; // 0x0
	public const GraphicsFormat A10R10G10B10_XRUNormPack32 = 86; // 0x0
	[ObsoleteAttribute] // RVA: 0xDDA70 Offset: 0xDCE70 VA: 0x1800DDA70
	public const GraphicsFormat RGB_DXT1_SRGB = 96; // 0x0
	public const GraphicsFormat RGBA_DXT1_SRGB = 96; // 0x0
	[ObsoleteAttribute] // RVA: 0xDDAA0 Offset: 0xDCEA0 VA: 0x1800DDAA0
	public const GraphicsFormat RGB_DXT1_UNorm = 97; // 0x0
	public const GraphicsFormat RGBA_DXT1_UNorm = 97; // 0x0
	public const GraphicsFormat RGBA_DXT3_SRGB = 98; // 0x0
	public const GraphicsFormat RGBA_DXT3_UNorm = 99; // 0x0
	public const GraphicsFormat RGBA_DXT5_SRGB = 100; // 0x0
	public const GraphicsFormat RGBA_DXT5_UNorm = 101; // 0x0
	public const GraphicsFormat R_BC4_UNorm = 102; // 0x0
	public const GraphicsFormat R_BC4_SNorm = 103; // 0x0
	public const GraphicsFormat RG_BC5_UNorm = 104; // 0x0
	public const GraphicsFormat RG_BC5_SNorm = 105; // 0x0
	public const GraphicsFormat RGB_BC6H_UFloat = 106; // 0x0
	public const GraphicsFormat RGB_BC6H_SFloat = 107; // 0x0
	public const GraphicsFormat RGBA_BC7_SRGB = 108; // 0x0
	public const GraphicsFormat RGBA_BC7_UNorm = 109; // 0x0
	public const GraphicsFormat RGB_PVRTC_2Bpp_SRGB = 110; // 0x0
	public const GraphicsFormat RGB_PVRTC_2Bpp_UNorm = 111; // 0x0
	public const GraphicsFormat RGB_PVRTC_4Bpp_SRGB = 112; // 0x0
	public const GraphicsFormat RGB_PVRTC_4Bpp_UNorm = 113; // 0x0
	public const GraphicsFormat RGBA_PVRTC_2Bpp_SRGB = 114; // 0x0
	public const GraphicsFormat RGBA_PVRTC_2Bpp_UNorm = 115; // 0x0
	public const GraphicsFormat RGBA_PVRTC_4Bpp_SRGB = 116; // 0x0
	public const GraphicsFormat RGBA_PVRTC_4Bpp_UNorm = 117; // 0x0
	public const GraphicsFormat RGB_ETC_UNorm = 118; // 0x0
	public const GraphicsFormat RGB_ETC2_SRGB = 119; // 0x0
	public const GraphicsFormat RGB_ETC2_UNorm = 120; // 0x0
	public const GraphicsFormat RGB_A1_ETC2_SRGB = 121; // 0x0
	public const GraphicsFormat RGB_A1_ETC2_UNorm = 122; // 0x0
	public const GraphicsFormat RGBA_ETC2_SRGB = 123; // 0x0
	public const GraphicsFormat RGBA_ETC2_UNorm = 124; // 0x0
	public const GraphicsFormat R_EAC_UNorm = 125; // 0x0
	public const GraphicsFormat R_EAC_SNorm = 126; // 0x0
	public const GraphicsFormat RG_EAC_UNorm = 127; // 0x0
	public const GraphicsFormat RG_EAC_SNorm = 128; // 0x0
	public const GraphicsFormat RGBA_ASTC4X4_SRGB = 129; // 0x0
	public const GraphicsFormat RGBA_ASTC4X4_UNorm = 130; // 0x0
	public const GraphicsFormat RGBA_ASTC5X5_SRGB = 131; // 0x0
	public const GraphicsFormat RGBA_ASTC5X5_UNorm = 132; // 0x0
	public const GraphicsFormat RGBA_ASTC6X6_SRGB = 133; // 0x0
	public const GraphicsFormat RGBA_ASTC6X6_UNorm = 134; // 0x0
	public const GraphicsFormat RGBA_ASTC8X8_SRGB = 135; // 0x0
	public const GraphicsFormat RGBA_ASTC8X8_UNorm = 136; // 0x0
	public const GraphicsFormat RGBA_ASTC10X10_SRGB = 137; // 0x0
	public const GraphicsFormat RGBA_ASTC10X10_UNorm = 138; // 0x0
	public const GraphicsFormat RGBA_ASTC12X12_SRGB = 139; // 0x0
	public const GraphicsFormat RGBA_ASTC12X12_UNorm = 140; // 0x0
}

// Namespace: UnityEngine.Experimental.Rendering
public class GraphicsFormatUtility // TypeDefIndex: 1843
{
	// Methods
	// RVA: 0x5493F0 Offset: 0x547BF0 VA: 0x1805493F0
	public static GraphicsFormat GetGraphicsFormat(TextureFormat format, bool isSRGB) { }
	// RVA: 0x5493F0 Offset: 0x547BF0 VA: 0x1805493F0
	private static GraphicsFormat GetGraphicsFormat_Native_TextureFormat(TextureFormat format, bool isSRGB) { }
	// RVA: 0x549450 Offset: 0x547C50 VA: 0x180549450
	public static GraphicsFormat GetGraphicsFormat(RenderTextureFormat format, bool isSRGB) { }
	// RVA: 0x549450 Offset: 0x547C50 VA: 0x180549450
	private static GraphicsFormat GetGraphicsFormat_Native_RenderTextureFormat(RenderTextureFormat format, bool isSRGB) { }
	// RVA: 0x5494B0 Offset: 0x547CB0 VA: 0x1805494B0
	public static GraphicsFormat GetGraphicsFormat(RenderTextureFormat format, RenderTextureReadWrite readWrite) { }
	// RVA: 0x549570 Offset: 0x547D70 VA: 0x180549570
	public static bool IsSRGBFormat(GraphicsFormat format) { }
	// RVA: 0x5495C0 Offset: 0x547DC0 VA: 0x1805495C0
	public static RenderTextureFormat GetRenderTextureFormat(GraphicsFormat format) { }
	// RVA: 0x549610 Offset: 0x547E10 VA: 0x180549610
	internal static bool IsCompressedTextureFormat(TextureFormat format) { }
	// RVA: 0x549660 Offset: 0x547E60 VA: 0x180549660
	public static bool IsCrunchFormat(TextureFormat format) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1844
{}

// Namespace: UnityEngine
public enum TouchPhase // TypeDefIndex: 1845
{
	// Fields
	public int value__; // 0x0
	public const TouchPhase Began = 0; // 0x0
	public const TouchPhase Moved = 1; // 0x0
	public const TouchPhase Stationary = 2; // 0x0
	public const TouchPhase Ended = 3; // 0x0
	public const TouchPhase Canceled = 4; // 0x0
}

// Namespace: UnityEngine
public enum IMECompositionMode // TypeDefIndex: 1846
{
	// Fields
	public int value__; // 0x0
	public const IMECompositionMode Auto = 0; // 0x0
	public const IMECompositionMode On = 1; // 0x0
	public const IMECompositionMode Off = 2; // 0x0
}

// Namespace: UnityEngine
public enum TouchType // TypeDefIndex: 1847
{
	// Fields
	public int value__; // 0x0
	public const TouchType Direct = 0; // 0x0
	public const TouchType Indirect = 1; // 0x0
	public const TouchType Stylus = 2; // 0x0
}

// Namespace: UnityEngine
public struct Touch // TypeDefIndex: 1848
{
	// Fields
	private int m_FingerId; // 0x0
	private Vector2 m_Position; // 0x4
	private Vector2 m_RawPosition; // 0xC
	private Vector2 m_PositionDelta; // 0x14
	private float m_TimeDelta; // 0x1C
	private int m_TapCount; // 0x20
	private TouchPhase m_Phase; // 0x24
	private TouchType m_Type; // 0x28
	private float m_Pressure; // 0x2C
	private float m_maximumPossiblePressure; // 0x30
	private float m_Radius; // 0x34
	private float m_RadiusVariance; // 0x38
	private float m_AltitudeAngle; // 0x3C
	private float m_AzimuthAngle; // 0x40

	// Properties
	public int fingerId { get; }
	public Vector2 position { get; }
	public Vector2 deltaPosition { get; }
	public TouchPhase phase { get; }
	public TouchType type { get; }

	// Methods
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060
	public int get_fingerId() { }
	// RVA: 0x27E10 Offset: 0x27210 VA: 0x180027E10
	public Vector2 get_position() { }
	// RVA: 0x27E30 Offset: 0x27230 VA: 0x180027E30
	public Vector2 get_deltaPosition() { }
	// RVA: 0x27E50 Offset: 0x27250 VA: 0x180027E50
	public TouchPhase get_phase() { }
	// RVA: 0x27E60 Offset: 0x27260 VA: 0x180027E60
	public TouchType get_type() { }
}

// Namespace: UnityEngine
internal class CameraRaycastHelper // TypeDefIndex: 1849
{
	// Methods
	// RVA: 0x682C20 Offset: 0x681420 VA: 0x180682C20
	internal static GameObject RaycastTry(Camera cam, Ray ray, float distance, int layerMask) { }
	// RVA: 0x682CA0 Offset: 0x6814A0 VA: 0x180682CA0
	internal static GameObject RaycastTry2D(Camera cam, Ray ray, float distance, int layerMask) { }
	// RVA: 0x682D20 Offset: 0x681520 VA: 0x180682D20
	private static GameObject RaycastTry_Injected(Camera cam, ref Ray ray, float distance, int layerMask) { }
	// RVA: 0x682DA0 Offset: 0x6815A0 VA: 0x180682DA0
	private static GameObject RaycastTry2D_Injected(Camera cam, ref Ray ray, float distance, int layerMask) { }
}

// Namespace: UnityEngine
public class Input // TypeDefIndex: 1850
{
	// Properties
	public static Vector3 mousePosition { get; }
	public static Vector2 mouseScrollDelta { get; }
	public static IMECompositionMode imeCompositionMode { get; set; }
	public static string compositionString { get; }
	public static Vector2 compositionCursorPos { get; set; }
	public static bool mousePresent { get; }
	public static int touchCount { get; }
	public static bool touchSupported { get; }
	public static Touch[] touches { get; }

	// Methods
	// RVA: 0x682E20 Offset: 0x681620 VA: 0x180682E20
	private static bool GetKeyInt(KeyCode key) { }
	// RVA: 0x682E70 Offset: 0x681670 VA: 0x180682E70
	private static bool GetKeyUpInt(KeyCode key) { }
	// RVA: 0x682EC0 Offset: 0x6816C0 VA: 0x180682EC0
	private static bool GetKeyDownInt(KeyCode key) { }
	// RVA: 0x682F10 Offset: 0x681710 VA: 0x180682F10
	public static float GetAxis(string axisName) { }
	// RVA: 0x682F60 Offset: 0x681760 VA: 0x180682F60
	public static float GetAxisRaw(string axisName) { }
	// RVA: 0x682FB0 Offset: 0x6817B0 VA: 0x180682FB0
	public static bool GetButton(string buttonName) { }
	// RVA: 0x683000 Offset: 0x681800 VA: 0x180683000
	public static bool GetButtonDown(string buttonName) { }
	// RVA: 0x683050 Offset: 0x681850 VA: 0x180683050
	public static bool GetButtonUp(string buttonName) { }
	// RVA: 0x6830A0 Offset: 0x6818A0 VA: 0x1806830A0
	public static bool GetMouseButton(int button) { }
	// RVA: 0x6830F0 Offset: 0x6818F0 VA: 0x1806830F0
	public static bool GetMouseButtonDown(int button) { }
	// RVA: 0x683140 Offset: 0x681940 VA: 0x180683140
	public static bool GetMouseButtonUp(int button) { }
	// RVA: 0x683190 Offset: 0x681990 VA: 0x180683190
	public static Touch GetTouch(int index) { }
	// RVA: 0x682E20 Offset: 0x681620 VA: 0x180682E20
	public static bool GetKey(KeyCode key) { }
	// RVA: 0x682E70 Offset: 0x681670 VA: 0x180682E70
	public static bool GetKeyUp(KeyCode key) { }
	// RVA: 0x682EC0 Offset: 0x6816C0 VA: 0x180682EC0
	public static bool GetKeyDown(KeyCode key) { }
	// RVA: 0x683210 Offset: 0x681A10 VA: 0x180683210
	public static Vector3 get_mousePosition() { }
	// RVA: 0x683270 Offset: 0x681A70 VA: 0x180683270
	public static Vector2 get_mouseScrollDelta() { }
	// RVA: 0x1FC470 Offset: 0x1FAC70 VA: 0x1801FC470
	public static IMECompositionMode get_imeCompositionMode() { }
	// RVA: 0x6832D0 Offset: 0x681AD0 VA: 0x1806832D0
	public static void set_imeCompositionMode(IMECompositionMode value) { }
	// RVA: 0x1FC420 Offset: 0x1FAC20 VA: 0x1801FC420
	public static string get_compositionString() { }
	// RVA: 0x683320 Offset: 0x681B20 VA: 0x180683320
	public static Vector2 get_compositionCursorPos() { }
	// RVA: 0x683380 Offset: 0x681B80 VA: 0x180683380
	public static void set_compositionCursorPos(Vector2 value) { }
	// RVA: 0x1FC5C0 Offset: 0x1FADC0 VA: 0x1801FC5C0
	public static bool get_mousePresent() { }
	// RVA: 0x1FC7C0 Offset: 0x1FAFC0 VA: 0x1801FC7C0
	public static int get_touchCount() { }
	// RVA: 0x1FC770 Offset: 0x1FAF70 VA: 0x1801FC770
	public static bool get_touchSupported() { }
	// RVA: 0x6833D0 Offset: 0x681BD0 VA: 0x1806833D0
	public static Touch[] get_touches() { }
	// RVA: 0x683580 Offset: 0x681D80 VA: 0x180683580
	private static void GetTouch_Injected(int index, out Touch ret) { }
	// RVA: 0x6835E0 Offset: 0x681DE0 VA: 0x1806835E0
	private static void get_mousePosition_Injected(out Vector3 ret) { }
	// RVA: 0x683630 Offset: 0x681E30 VA: 0x180683630
	private static void get_mouseScrollDelta_Injected(out Vector2 ret) { }
	// RVA: 0x683680 Offset: 0x681E80 VA: 0x180683680
	private static void get_compositionCursorPos_Injected(out Vector2 ret) { }
	// RVA: 0x6836D0 Offset: 0x681ED0 VA: 0x1806836D0
	private static void set_compositionCursorPos_Injected(ref Vector2 value) { }
}

// Namespace: UnityEngine
internal class SendMouseEvents // TypeDefIndex: 1851
{
	// Fields
	private static bool s_MouseUsed; // 0x0
	private static readonly SendMouseEvents.HitInfo[] m_LastHit; // 0x8
	private static readonly SendMouseEvents.HitInfo[] m_MouseDownHit; // 0x10
	private static readonly SendMouseEvents.HitInfo[] m_CurrentHit; // 0x18
	private static Camera[] m_Cameras; // 0x20

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x683720 Offset: 0x681F20 VA: 0x180683720
	private static void SetMouseMoved() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x6837C0 Offset: 0x681FC0 VA: 0x1806837C0
	private static void DoSendMouseEvents(int skipRTCameras) { }
	// RVA: 0x684480 Offset: 0x682C80 VA: 0x180684480
	private static void SendEvents(int i, SendMouseEvents.HitInfo hit) { }
	// RVA: 0x684B30 Offset: 0x683330 VA: 0x180684B30
	private static void .cctor() { }
}

// Namespace: 
private struct SendMouseEvents.HitInfo // TypeDefIndex: 1852
{
	// Fields
	public GameObject target; // 0x0
	public Camera camera; // 0x8

	// Methods
	// RVA: 0x27E90 Offset: 0x27290 VA: 0x180027E90
	public void SendMessage(string name) { }
	// RVA: 0x684C90 Offset: 0x683490 VA: 0x180684C90
	public static bool op_Implicit(SendMouseEvents.HitInfo exists) { }
	// RVA: 0x684D70 Offset: 0x683570 VA: 0x180684D70
	public static bool Compare(SendMouseEvents.HitInfo lhs, SendMouseEvents.HitInfo rhs) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1853
{}

// Namespace: UnityEngine
public enum RigidbodyConstraints // TypeDefIndex: 1854
{
	// Fields
	public int value__; // 0x0
	public const RigidbodyConstraints None = 0; // 0x0
	public const RigidbodyConstraints FreezePositionX = 2; // 0x0
	public const RigidbodyConstraints FreezePositionY = 4; // 0x0
	public const RigidbodyConstraints FreezePositionZ = 8; // 0x0
	public const RigidbodyConstraints FreezeRotationX = 16; // 0x0
	public const RigidbodyConstraints FreezeRotationY = 32; // 0x0
	public const RigidbodyConstraints FreezeRotationZ = 64; // 0x0
	public const RigidbodyConstraints FreezePosition = 14; // 0x0
	public const RigidbodyConstraints FreezeRotation = 112; // 0x0
	public const RigidbodyConstraints FreezeAll = 126; // 0x0
}

// Namespace: UnityEngine
public enum ForceMode // TypeDefIndex: 1855
{
	// Fields
	public int value__; // 0x0
	public const ForceMode Force = 0; // 0x0
	public const ForceMode Acceleration = 5; // 0x0
	public const ForceMode Impulse = 1; // 0x0
	public const ForceMode VelocityChange = 2; // 0x0
}

// Namespace: UnityEngine
public enum RigidbodyInterpolation // TypeDefIndex: 1856
{
	// Fields
	public int value__; // 0x0
	public const RigidbodyInterpolation None = 0; // 0x0
	public const RigidbodyInterpolation Interpolate = 1; // 0x0
	public const RigidbodyInterpolation Extrapolate = 2; // 0x0
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class ControllerColliderHit // TypeDefIndex: 1857
{
	// Fields
	internal CharacterController m_Controller; // 0x10
	internal Collider m_Collider; // 0x18
	internal Vector3 m_Point; // 0x20
	internal Vector3 m_Normal; // 0x2C
	internal Vector3 m_MoveDirection; // 0x38
	internal float m_MoveLength; // 0x44
	internal int m_Push; // 0x48
}

// Namespace: UnityEngine
public enum PhysicMaterialCombine // TypeDefIndex: 1858
{
	// Fields
	public int value__; // 0x0
	public const PhysicMaterialCombine Average = 0; // 0x0
	public const PhysicMaterialCombine Minimum = 2; // 0x0
	public const PhysicMaterialCombine Multiply = 1; // 0x0
	public const PhysicMaterialCombine Maximum = 3; // 0x0
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class Collision // TypeDefIndex: 1859
{
	// Fields
	internal Vector3 m_Impulse; // 0x10
	internal Vector3 m_RelativeVelocity; // 0x1C
	internal Rigidbody m_Rigidbody; // 0x28
	internal Collider m_Collider; // 0x30
	internal int m_ContactCount; // 0x38
	internal ContactPoint[] m_ReusedContacts; // 0x40
	internal ContactPoint[] m_LegacyContacts; // 0x48

	// Properties
	public Vector3 relativeVelocity { get; }
	public Collider collider { get; }
	public GameObject gameObject { get; }

	// Methods
	// RVA: 0x6614A0 Offset: 0x65FCA0 VA: 0x1806614A0
	private ContactPoint[] GetContacts_Internal() { }
	// RVA: 0x6614B0 Offset: 0x65FCB0 VA: 0x1806614B0
	public Vector3 get_relativeVelocity() { }
	// RVA: 0x4EAE20 Offset: 0x4E9620 VA: 0x1804EAE20
	public Collider get_collider() { }
	// RVA: 0x6614D0 Offset: 0x65FCD0 VA: 0x1806614D0
	public GameObject get_gameObject() { }
	// RVA: 0x661610 Offset: 0x65FE10 VA: 0x180661610
	public int GetContacts(ContactPoint[] contacts) { }
}

// Namespace: UnityEngine
public enum QueryTriggerInteraction // TypeDefIndex: 1860
{
	// Fields
	public int value__; // 0x0
	public const QueryTriggerInteraction UseGlobal = 0; // 0x0
	public const QueryTriggerInteraction Ignore = 1; // 0x0
	public const QueryTriggerInteraction Collide = 2; // 0x0
}

// Namespace: UnityEngine
public enum CollisionDetectionMode // TypeDefIndex: 1861
{
	// Fields
	public int value__; // 0x0
	public const CollisionDetectionMode Discrete = 0; // 0x0
	public const CollisionDetectionMode Continuous = 1; // 0x0
	public const CollisionDetectionMode ContinuousDynamic = 2; // 0x0
	public const CollisionDetectionMode ContinuousSpeculative = 3; // 0x0
}

// Namespace: UnityEngine
public class PhysicMaterial : Object // TypeDefIndex: 1862
{
	// Properties
	public float bounciness { set; }
	public float dynamicFriction { set; }
	public float staticFriction { set; }
	public PhysicMaterialCombine frictionCombine { set; }
	public PhysicMaterialCombine bounceCombine { set; }

	// Methods
	// RVA: 0x6618C0 Offset: 0x6600C0 VA: 0x1806618C0
	public void .ctor() { }
	// RVA: 0x6619A0 Offset: 0x6601A0 VA: 0x1806619A0
	public void .ctor(string name) { }
	// RVA: 0x661A80 Offset: 0x660280 VA: 0x180661A80
	private static void Internal_CreateDynamicsMaterial(PhysicMaterial mat, string name) { }
	// RVA: 0x661AE0 Offset: 0x6602E0 VA: 0x180661AE0
	public void set_bounciness(float value) { }
	// RVA: 0x661B40 Offset: 0x660340 VA: 0x180661B40
	public void set_dynamicFriction(float value) { }
	// RVA: 0x661BA0 Offset: 0x6603A0 VA: 0x180661BA0
	public void set_staticFriction(float value) { }
	// RVA: 0x661C00 Offset: 0x660400 VA: 0x180661C00
	public void set_frictionCombine(PhysicMaterialCombine value) { }
	// RVA: 0x661C60 Offset: 0x660460 VA: 0x180661C60
	public void set_bounceCombine(PhysicMaterialCombine value) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct RaycastHit // TypeDefIndex: 1863
{
	// Fields
	internal Vector3 m_Point; // 0x0
	internal Vector3 m_Normal; // 0xC
	internal uint m_FaceID; // 0x18
	internal float m_Distance; // 0x1C
	internal Vector2 m_UV; // 0x20
	internal int m_Collider; // 0x28

	// Properties
	public Collider collider { get; }
	public Vector3 point { get; }
	public Vector3 normal { get; }
	public float distance { get; set; }
	public Transform transform { get; }
	public Rigidbody rigidbody { get; }

	// Methods
	// RVA: 0x25670 Offset: 0x24A70 VA: 0x180025670
	public Collider get_collider() { }
	// RVA: 0x1D670 Offset: 0x1CA70 VA: 0x18001D670
	public Vector3 get_point() { }
	// RVA: 0x1E610 Offset: 0x1DA10 VA: 0x18001E610
	public Vector3 get_normal() { }
	// RVA: 0x25680 Offset: 0x24A80 VA: 0x180025680
	public float get_distance() { }
	// RVA: 0x2370 Offset: 0x1770 VA: 0x180002370
	public void set_distance(float value) { }
	// RVA: 0x25690 Offset: 0x24A90 VA: 0x180025690
	public Transform get_transform() { }
	// RVA: 0x256A0 Offset: 0x24AA0 VA: 0x1800256A0
	public Rigidbody get_rigidbody() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xE0050 Offset: 0xDF450 VA: 0x1800E0050
public class Rigidbody : Component // TypeDefIndex: 1864
{
	// Properties
	public Vector3 velocity { get; set; }
	public float mass { get; set; }
	public bool useGravity { get; set; }
	public bool isKinematic { get; set; }
	public bool freezeRotation { set; }
	public RigidbodyConstraints constraints { get; set; }
	public CollisionDetectionMode collisionDetectionMode { get; set; }
	public bool detectCollisions { set; }
	public Vector3 position { get; set; }
	public Quaternion rotation { get; set; }
	public RigidbodyInterpolation interpolation { get; set; }
	public float maxAngularVelocity { set; }

	// Methods
	// RVA: 0x666690 Offset: 0x664E90 VA: 0x180666690
	public Vector3 get_velocity() { }
	// RVA: 0x666700 Offset: 0x664F00 VA: 0x180666700
	public void set_velocity(Vector3 value) { }
	// RVA: 0x666760 Offset: 0x664F60 VA: 0x180666760
	public float get_mass() { }
	// RVA: 0x6667B0 Offset: 0x664FB0 VA: 0x1806667B0
	public void set_mass(float value) { }
	// RVA: 0x666810 Offset: 0x665010 VA: 0x180666810
	public bool get_useGravity() { }
	// RVA: 0x666860 Offset: 0x665060 VA: 0x180666860
	public void set_useGravity(bool value) { }
	// RVA: 0x6668C0 Offset: 0x6650C0 VA: 0x1806668C0
	public bool get_isKinematic() { }
	// RVA: 0x666910 Offset: 0x665110 VA: 0x180666910
	public void set_isKinematic(bool value) { }
	// RVA: 0x666970 Offset: 0x665170 VA: 0x180666970
	public void set_freezeRotation(bool value) { }
	// RVA: 0x6669D0 Offset: 0x6651D0 VA: 0x1806669D0
	public RigidbodyConstraints get_constraints() { }
	// RVA: 0x666A20 Offset: 0x665220 VA: 0x180666A20
	public void set_constraints(RigidbodyConstraints value) { }
	// RVA: 0x666A80 Offset: 0x665280 VA: 0x180666A80
	public CollisionDetectionMode get_collisionDetectionMode() { }
	// RVA: 0x666AD0 Offset: 0x6652D0 VA: 0x180666AD0
	public void set_collisionDetectionMode(CollisionDetectionMode value) { }
	// RVA: 0x666B30 Offset: 0x665330 VA: 0x180666B30
	public void set_detectCollisions(bool value) { }
	// RVA: 0x666B90 Offset: 0x665390 VA: 0x180666B90
	public Vector3 get_position() { }
	// RVA: 0x666C00 Offset: 0x665400 VA: 0x180666C00
	public void set_position(Vector3 value) { }
	// RVA: 0x666C60 Offset: 0x665460 VA: 0x180666C60
	public Quaternion get_rotation() { }
	// RVA: 0x666CD0 Offset: 0x6654D0 VA: 0x180666CD0
	public void set_rotation(Quaternion value) { }
	// RVA: 0x666D30 Offset: 0x665530 VA: 0x180666D30
	public RigidbodyInterpolation get_interpolation() { }
	// RVA: 0x666D80 Offset: 0x665580 VA: 0x180666D80
	public void set_interpolation(RigidbodyInterpolation value) { }
	// RVA: 0x666DE0 Offset: 0x6655E0 VA: 0x180666DE0
	public void set_maxAngularVelocity(float value) { }
	// RVA: 0x666E40 Offset: 0x665640 VA: 0x180666E40
	public void MovePosition(Vector3 position) { }
	// RVA: 0x666EA0 Offset: 0x6656A0 VA: 0x180666EA0
	public void MoveRotation(Quaternion rot) { }
	// RVA: 0x666F00 Offset: 0x665700 VA: 0x180666F00
	public Vector3 GetPointVelocity(Vector3 worldPoint) { }
	// RVA: 0x666F80 Offset: 0x665780 VA: 0x180666F80
	public void AddForce(Vector3 force, ForceMode mode) { }
	// RVA: 0x666FF0 Offset: 0x6657F0 VA: 0x180666FF0
	public void AddForce(Vector3 force) { }
	// RVA: 0x667060 Offset: 0x665860 VA: 0x180667060
	public void AddTorque(Vector3 torque, ForceMode mode) { }
	// RVA: 0x6670D0 Offset: 0x6658D0 VA: 0x1806670D0
	public void AddTorque(Vector3 torque) { }
	// RVA: 0x667140 Offset: 0x665940 VA: 0x180667140
	public void AddForceAtPosition(Vector3 force, Vector3 position, ForceMode mode) { }
	// RVA: 0x6671C0 Offset: 0x6659C0 VA: 0x1806671C0
	public void AddForceAtPosition(Vector3 force, Vector3 position) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
	// RVA: 0x667240 Offset: 0x665A40 VA: 0x180667240
	private void get_velocity_Injected(out Vector3 ret) { }
	// RVA: 0x6672A0 Offset: 0x665AA0 VA: 0x1806672A0
	private void set_velocity_Injected(ref Vector3 value) { }
	// RVA: 0x667300 Offset: 0x665B00 VA: 0x180667300
	private void get_position_Injected(out Vector3 ret) { }
	// RVA: 0x667360 Offset: 0x665B60 VA: 0x180667360
	private void set_position_Injected(ref Vector3 value) { }
	// RVA: 0x6673C0 Offset: 0x665BC0 VA: 0x1806673C0
	private void get_rotation_Injected(out Quaternion ret) { }
	// RVA: 0x667420 Offset: 0x665C20 VA: 0x180667420
	private void set_rotation_Injected(ref Quaternion value) { }
	// RVA: 0x667480 Offset: 0x665C80 VA: 0x180667480
	private void MovePosition_Injected(ref Vector3 position) { }
	// RVA: 0x6674E0 Offset: 0x665CE0 VA: 0x1806674E0
	private void MoveRotation_Injected(ref Quaternion rot) { }
	// RVA: 0x667540 Offset: 0x665D40 VA: 0x180667540
	private void GetPointVelocity_Injected(ref Vector3 worldPoint, out Vector3 ret) { }
	// RVA: 0x6675B0 Offset: 0x665DB0 VA: 0x1806675B0
	private void AddForce_Injected(ref Vector3 force, ForceMode mode) { }
	// RVA: 0x667620 Offset: 0x665E20 VA: 0x180667620
	private void AddTorque_Injected(ref Vector3 torque, ForceMode mode) { }
	// RVA: 0x667690 Offset: 0x665E90 VA: 0x180667690
	private void AddForceAtPosition_Injected(ref Vector3 force, ref Vector3 position, ForceMode mode) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xE00D0 Offset: 0xDF4D0 VA: 0x1800E00D0
[RequiredByNativeCodeAttribute] // RVA: 0xE00D0 Offset: 0xDF4D0 VA: 0x1800E00D0
public class Collider : Component // TypeDefIndex: 1865
{
	// Properties
	public bool enabled { get; set; }
	public Rigidbody attachedRigidbody { get; }
	public bool isTrigger { set; }
	public Bounds bounds { get; }
	public PhysicMaterial sharedMaterial { get; set; }

	// Methods
	// RVA: 0x660EB0 Offset: 0x65F6B0 VA: 0x180660EB0
	public bool get_enabled() { }
	// RVA: 0x660F00 Offset: 0x65F700 VA: 0x180660F00
	public void set_enabled(bool value) { }
	// RVA: 0x660F60 Offset: 0x65F760 VA: 0x180660F60
	public Rigidbody get_attachedRigidbody() { }
	// RVA: 0x660FB0 Offset: 0x65F7B0 VA: 0x180660FB0
	public void set_isTrigger(bool value) { }
	// RVA: 0x661010 Offset: 0x65F810 VA: 0x180661010
	public Vector3 ClosestPoint(Vector3 position) { }
	// RVA: 0x661090 Offset: 0x65F890 VA: 0x180661090
	public Bounds get_bounds() { }
	// RVA: 0x661100 Offset: 0x65F900 VA: 0x180661100
	public PhysicMaterial get_sharedMaterial() { }
	// RVA: 0x661150 Offset: 0x65F950 VA: 0x180661150
	public void set_sharedMaterial(PhysicMaterial value) { }
	// RVA: 0x6611B0 Offset: 0x65F9B0 VA: 0x1806611B0
	private RaycastHit Raycast(Ray ray, float maxDistance, ref bool hasHit) { }
	// RVA: 0x661250 Offset: 0x65FA50 VA: 0x180661250
	public bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
	// RVA: 0x661340 Offset: 0x65FB40 VA: 0x180661340
	private void ClosestPoint_Injected(ref Vector3 position, out Vector3 ret) { }
	// RVA: 0x6613B0 Offset: 0x65FBB0 VA: 0x1806613B0
	private void get_bounds_Injected(out Bounds ret) { }
	// RVA: 0x661410 Offset: 0x65FC10 VA: 0x180661410
	private void Raycast_Injected(ref Ray ray, float maxDistance, ref bool hasHit, out RaycastHit ret) { }
}

// Namespace: UnityEngine
public class CharacterController : Collider // TypeDefIndex: 1866
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class MeshCollider : Collider // TypeDefIndex: 1867
{
	// Properties
	public Mesh sharedMesh { get; set; }
	public bool convex { get; set; }

	// Methods
	// RVA: 0x661760 Offset: 0x65FF60 VA: 0x180661760
	public Mesh get_sharedMesh() { }
	// RVA: 0x6617B0 Offset: 0x65FFB0 VA: 0x1806617B0
	public void set_sharedMesh(Mesh value) { }
	// RVA: 0x661810 Offset: 0x660010 VA: 0x180661810
	public bool get_convex() { }
	// RVA: 0x661860 Offset: 0x660060 VA: 0x180661860
	public void set_convex(bool value) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CapsuleCollider : Collider // TypeDefIndex: 1868
{
	// Properties
	public Vector3 center { get; set; }
	public float radius { get; set; }
	public float height { get; set; }

	// Methods
	// RVA: 0x660BC0 Offset: 0x65F3C0 VA: 0x180660BC0
	public Vector3 get_center() { }
	// RVA: 0x660C30 Offset: 0x65F430 VA: 0x180660C30
	public void set_center(Vector3 value) { }
	// RVA: 0x660C90 Offset: 0x65F490 VA: 0x180660C90
	public float get_radius() { }
	// RVA: 0x660CE0 Offset: 0x65F4E0 VA: 0x180660CE0
	public void set_radius(float value) { }
	// RVA: 0x660D40 Offset: 0x65F540 VA: 0x180660D40
	public float get_height() { }
	// RVA: 0x660D90 Offset: 0x65F590 VA: 0x180660D90
	public void set_height(float value) { }
	// RVA: 0x660DF0 Offset: 0x65F5F0 VA: 0x180660DF0
	private void get_center_Injected(out Vector3 ret) { }
	// RVA: 0x660E50 Offset: 0x65F650 VA: 0x180660E50
	private void set_center_Injected(ref Vector3 value) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class BoxCollider : Collider // TypeDefIndex: 1869
{
	// Properties
	public Vector3 center { get; }
	public Vector3 size { get; }

	// Methods
	// RVA: 0x660A20 Offset: 0x65F220 VA: 0x180660A20
	public Vector3 get_center() { }
	// RVA: 0x660A90 Offset: 0x65F290 VA: 0x180660A90
	public Vector3 get_size() { }
	// RVA: 0x660B00 Offset: 0x65F300 VA: 0x180660B00
	private void get_center_Injected(out Vector3 ret) { }
	// RVA: 0x660B60 Offset: 0x65F360 VA: 0x180660B60
	private void get_size_Injected(out Vector3 ret) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class SphereCollider : Collider // TypeDefIndex: 1870
{
	// Properties
	public Vector3 center { get; set; }
	public float radius { get; set; }

	// Methods
	// RVA: 0x667710 Offset: 0x665F10 VA: 0x180667710
	public Vector3 get_center() { }
	// RVA: 0x667780 Offset: 0x665F80 VA: 0x180667780
	public void set_center(Vector3 value) { }
	// RVA: 0x6677E0 Offset: 0x665FE0 VA: 0x1806677E0
	public float get_radius() { }
	// RVA: 0x667830 Offset: 0x666030 VA: 0x180667830
	public void set_radius(float value) { }
	// RVA: 0x667890 Offset: 0x666090 VA: 0x180667890
	private void get_center_Injected(out Vector3 ret) { }
	// RVA: 0x6678F0 Offset: 0x6660F0 VA: 0x1806678F0
	private void set_center_Injected(ref Vector3 value) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct ContactPoint // TypeDefIndex: 1871
{
	// Fields
	internal Vector3 m_Point; // 0x0
	internal Vector3 m_Normal; // 0xC
	internal int m_ThisColliderInstanceID; // 0x18
	internal int m_OtherColliderInstanceID; // 0x1C
	internal float m_Separation; // 0x20

	// Properties
	public Vector3 point { get; }
	public Vector3 normal { get; }
	public Collider otherCollider { get; }

	// Methods
	// RVA: 0x1D670 Offset: 0x1CA70 VA: 0x18001D670
	public Vector3 get_point() { }
	// RVA: 0x1E610 Offset: 0x1DA10 VA: 0x18001E610
	public Vector3 get_normal() { }
	// RVA: 0x24DD0 Offset: 0x241D0 VA: 0x180024DD0
	public Collider get_otherCollider() { }
	// RVA: 0x661710 Offset: 0x65FF10 VA: 0x180661710
	private static Collider GetColliderByInstanceID(int instanceID) { }
}

// Namespace: UnityEngine
public struct PhysicsScene : IEquatable<PhysicsScene> // TypeDefIndex: 1872
{
	// Fields
	private int m_Handle; // 0x0

	// Methods
	// RVA: 0x24E40 Offset: 0x24240 VA: 0x180024E40 Slot: 3
	public override string ToString() { }
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x24F40 Offset: 0x24340 VA: 0x180024F40 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x1E2B0 Offset: 0x1D6B0 VA: 0x18001E2B0 Slot: 4
	public bool Equals(PhysicsScene other) { }
	// RVA: 0x25010 Offset: 0x24410 VA: 0x180025010
	public bool Raycast(Vector3 origin, Vector3 direction, float maxDistance = ∞, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }
	// RVA: 0x665030 Offset: 0x663830 VA: 0x180665030
	private static bool Internal_RaycastTest(PhysicsScene physicsScene, Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x25070 Offset: 0x24470 VA: 0x180025070
	public bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance = ∞, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }
	// RVA: 0x665330 Offset: 0x663B30 VA: 0x180665330
	private static bool Internal_Raycast(PhysicsScene physicsScene, Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x250E0 Offset: 0x244E0 VA: 0x1800250E0
	public int Raycast(Vector3 origin, Vector3 direction, RaycastHit[] raycastHits, float maxDistance = ∞, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }
	// RVA: 0x665590 Offset: 0x663D90 VA: 0x180665590
	private static int Internal_RaycastNonAlloc(PhysicsScene physicsScene, Ray ray, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x665620 Offset: 0x663E20 VA: 0x180665620
	private static int Internal_CapsuleCastNonAlloc(PhysicsScene physicsScene, Vector3 p0, Vector3 p1, float radius, Vector3 direction, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x25150 Offset: 0x24550 VA: 0x180025150
	public int CapsuleCast(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit[] results, float maxDistance = ∞, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }
	// RVA: 0x6656E0 Offset: 0x663EE0 VA: 0x1806656E0
	private static int OverlapCapsuleNonAlloc_Internal(PhysicsScene physicsScene, Vector3 point0, Vector3 point1, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x252A0 Offset: 0x246A0 VA: 0x1800252A0
	public int OverlapCapsule(Vector3 point0, Vector3 point1, float radius, Collider[] results, int layerMask = -1, QueryTriggerInteraction queryTriggerInteraction = 0) { }
	// RVA: 0x665780 Offset: 0x663F80 VA: 0x180665780
	private static bool Query_SphereCast(PhysicsScene physicsScene, Vector3 origin, float radius, Vector3 direction, float maxDistance, ref RaycastHit hitInfo, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x665830 Offset: 0x664030 VA: 0x180665830
	private static bool Internal_SphereCast(PhysicsScene physicsScene, Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x25360 Offset: 0x24760 VA: 0x180025360
	public bool SphereCast(Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance = ∞, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }
	// RVA: 0x665BE0 Offset: 0x6643E0 VA: 0x180665BE0
	private static int Internal_SphereCastNonAlloc(PhysicsScene physicsScene, Vector3 origin, float radius, Vector3 direction, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x253E0 Offset: 0x247E0 VA: 0x1800253E0
	public int SphereCast(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results, float maxDistance = ∞, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }
	// RVA: 0x665C90 Offset: 0x664490 VA: 0x180665C90
	private static int OverlapSphereNonAlloc_Internal(PhysicsScene physicsScene, Vector3 position, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x25500 Offset: 0x24900 VA: 0x180025500
	public int OverlapSphere(Vector3 position, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x665D20 Offset: 0x664520 VA: 0x180665D20
	private static int OverlapBoxNonAlloc_Internal(PhysicsScene physicsScene, Vector3 center, Vector3 halfExtents, Collider[] results, Quaternion orientation, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x255A0 Offset: 0x249A0 VA: 0x1800255A0
	public int OverlapBox(Vector3 center, Vector3 halfExtents, Collider[] results, Quaternion orientation, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = 0) { }
	// RVA: 0x665DC0 Offset: 0x6645C0 VA: 0x180665DC0
	private static bool Internal_RaycastTest_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x665E50 Offset: 0x664650 VA: 0x180665E50
	private static bool Internal_Raycast_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, ref RaycastHit hit, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x665EE0 Offset: 0x6646E0 VA: 0x180665EE0
	private static int Internal_RaycastNonAlloc_Injected(ref PhysicsScene physicsScene, ref Ray ray, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x665F70 Offset: 0x664770 VA: 0x180665F70
	private static int Internal_CapsuleCastNonAlloc_Injected(ref PhysicsScene physicsScene, ref Vector3 p0, ref Vector3 p1, float radius, ref Vector3 direction, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x666000 Offset: 0x664800 VA: 0x180666000
	private static int OverlapCapsuleNonAlloc_Internal_Injected(ref PhysicsScene physicsScene, ref Vector3 point0, ref Vector3 point1, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x666090 Offset: 0x664890 VA: 0x180666090
	private static bool Query_SphereCast_Injected(ref PhysicsScene physicsScene, ref Vector3 origin, float radius, ref Vector3 direction, float maxDistance, ref RaycastHit hitInfo, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x666120 Offset: 0x664920 VA: 0x180666120
	private static int Internal_SphereCastNonAlloc_Injected(ref PhysicsScene physicsScene, ref Vector3 origin, float radius, ref Vector3 direction, RaycastHit[] raycastHits, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x6661B0 Offset: 0x6649B0 VA: 0x1806661B0
	private static int OverlapSphereNonAlloc_Internal_Injected(ref PhysicsScene physicsScene, ref Vector3 position, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x666240 Offset: 0x664A40 VA: 0x180666240
	private static int OverlapBoxNonAlloc_Internal_Injected(ref PhysicsScene physicsScene, ref Vector3 center, ref Vector3 halfExtents, Collider[] results, ref Quaternion orientation, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
}

// Namespace: UnityEngine
public class Physics // TypeDefIndex: 1873
{
	// Properties
	public static Vector3 gravity { get; }
	public static bool queriesHitBackfaces { get; set; }
	public static PhysicsScene defaultPhysicsScene { get; }

	// Methods
	// RVA: 0x661CC0 Offset: 0x6604C0 VA: 0x180661CC0
	public static Vector3 get_gravity() { }
	// RVA: 0x661D20 Offset: 0x660520 VA: 0x180661D20
	public static bool get_queriesHitBackfaces() { }
	// RVA: 0x661D70 Offset: 0x660570 VA: 0x180661D70
	public static void set_queriesHitBackfaces(bool value) { }
	// RVA: 0x661DC0 Offset: 0x6605C0 VA: 0x180661DC0
	public static PhysicsScene get_defaultPhysicsScene() { }
	// RVA: 0x661E20 Offset: 0x660620 VA: 0x180661E20
	public static void IgnoreLayerCollision(int layer1, int layer2, bool ignore) { }
	// RVA: 0x661E90 Offset: 0x660690 VA: 0x180661E90
	public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x661F70 Offset: 0x660770 VA: 0x180661F70
	public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance, int layerMask) { }
	// RVA: 0x662050 Offset: 0x660850 VA: 0x180662050
	public static bool Raycast(Vector3 origin, Vector3 direction, float maxDistance) { }
	// RVA: 0x662120 Offset: 0x660920 VA: 0x180662120
	public static bool Raycast(Vector3 origin, Vector3 direction) { }
	// RVA: 0x6621F0 Offset: 0x6609F0 VA: 0x1806621F0
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x6622E0 Offset: 0x660AE0 VA: 0x1806622E0
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask) { }
	// RVA: 0x6623D0 Offset: 0x660BD0 VA: 0x1806623D0
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance) { }
	// RVA: 0x6624B0 Offset: 0x660CB0 VA: 0x1806624B0
	public static bool Raycast(Vector3 origin, Vector3 direction, out RaycastHit hitInfo) { }
	// RVA: 0x662590 Offset: 0x660D90 VA: 0x180662590
	public static bool Raycast(Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x662670 Offset: 0x660E70 VA: 0x180662670
	public static bool Raycast(Ray ray, float maxDistance, int layerMask) { }
	// RVA: 0x662740 Offset: 0x660F40 VA: 0x180662740
	public static bool Raycast(Ray ray, float maxDistance) { }
	// RVA: 0x662810 Offset: 0x661010 VA: 0x180662810
	public static bool Raycast(Ray ray) { }
	// RVA: 0x6628D0 Offset: 0x6610D0 VA: 0x1806628D0
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x6629B0 Offset: 0x6611B0 VA: 0x1806629B0
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance, int layerMask) { }
	// RVA: 0x662AA0 Offset: 0x6612A0 VA: 0x180662AA0
	public static bool Raycast(Ray ray, out RaycastHit hitInfo, float maxDistance) { }
	// RVA: 0x662B80 Offset: 0x661380 VA: 0x180662B80
	public static bool Raycast(Ray ray, out RaycastHit hitInfo) { }
	// RVA: 0x662C60 Offset: 0x661460 VA: 0x180662C60
	public static bool Linecast(Vector3 start, Vector3 end, out RaycastHit hitInfo, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x662E30 Offset: 0x661630 VA: 0x180662E30
	public static bool Linecast(Vector3 start, Vector3 end, out RaycastHit hitInfo) { }
	// RVA: 0x662FF0 Offset: 0x6617F0 VA: 0x180662FF0
	public static bool SphereCast(Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x6630F0 Offset: 0x6618F0 VA: 0x1806630F0
	public static bool SphereCast(Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance) { }
	// RVA: 0x6631F0 Offset: 0x6619F0 VA: 0x1806631F0
	private static RaycastHit[] Internal_RaycastAll(PhysicsScene physicsScene, Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x663280 Offset: 0x661A80 VA: 0x180663280
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x6634F0 Offset: 0x661CF0 VA: 0x1806634F0
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance, int layerMask) { }
	// RVA: 0x663540 Offset: 0x661D40 VA: 0x180663540
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction, float maxDistance) { }
	// RVA: 0x663590 Offset: 0x661D90 VA: 0x180663590
	public static RaycastHit[] RaycastAll(Vector3 origin, Vector3 direction) { }
	// RVA: 0x6635F0 Offset: 0x661DF0 VA: 0x1806635F0
	public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x663640 Offset: 0x661E40 VA: 0x180663640
	public static RaycastHit[] RaycastAll(Ray ray, float maxDistance, int layerMask) { }
	// RVA: 0x663690 Offset: 0x661E90 VA: 0x180663690
	public static RaycastHit[] RaycastAll(Ray ray, float maxDistance) { }
	// RVA: 0x6636E0 Offset: 0x661EE0 VA: 0x1806636E0
	public static RaycastHit[] RaycastAll(Ray ray) { }
	// RVA: 0x663740 Offset: 0x661F40 VA: 0x180663740
	public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x663820 Offset: 0x662020 VA: 0x180663820
	public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance, int layerMask) { }
	// RVA: 0x663900 Offset: 0x662100 VA: 0x180663900
	public static int RaycastNonAlloc(Ray ray, RaycastHit[] results, float maxDistance) { }
	// RVA: 0x6639E0 Offset: 0x6621E0 VA: 0x1806639E0
	public static int RaycastNonAlloc(Ray ray, RaycastHit[] results) { }
	// RVA: 0x663AC0 Offset: 0x6622C0 VA: 0x180663AC0
	public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x663BB0 Offset: 0x6623B0 VA: 0x180663BB0
	public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask) { }
	// RVA: 0x663CA0 Offset: 0x6624A0 VA: 0x180663CA0
	public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results, float maxDistance) { }
	// RVA: 0x663D80 Offset: 0x662580 VA: 0x180663D80
	public static int RaycastNonAlloc(Vector3 origin, Vector3 direction, RaycastHit[] results) { }
	// RVA: 0x663E60 Offset: 0x662660 VA: 0x180663E60
	public static void SyncTransforms() { }
	// RVA: 0x663EB0 Offset: 0x6626B0 VA: 0x180663EB0
	private static bool Query_ComputePenetration(Collider colliderA, Vector3 positionA, Quaternion rotationA, Collider colliderB, Vector3 positionB, Quaternion rotationB, ref Vector3 direction, ref float distance) { }
	// RVA: 0x663F60 Offset: 0x662760 VA: 0x180663F60
	public static bool ComputePenetration(Collider colliderA, Vector3 positionA, Quaternion rotationA, Collider colliderB, Vector3 positionB, Quaternion rotationB, out Vector3 direction, out float distance) { }
	// RVA: 0x664110 Offset: 0x662910 VA: 0x180664110
	public static int OverlapSphereNonAlloc(Vector3 position, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x664210 Offset: 0x662A10 VA: 0x180664210
	public static int CapsuleCastNonAlloc(Vector3 point1, Vector3 point2, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x6643B0 Offset: 0x662BB0 VA: 0x1806643B0
	public static int SphereCastNonAlloc(Vector3 origin, float radius, Vector3 direction, RaycastHit[] results, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x664520 Offset: 0x662D20 VA: 0x180664520
	private static bool CheckBox_Internal(PhysicsScene physicsScene, Vector3 center, Vector3 halfExtents, Quaternion orientation, int layermask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x6645B0 Offset: 0x662DB0 VA: 0x1806645B0
	public static bool CheckBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, int layermask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x6646D0 Offset: 0x662ED0 VA: 0x1806646D0
	public static bool CheckBox(Vector3 center, Vector3 halfExtents, Quaternion orientation, int layerMask) { }
	// RVA: 0x6647F0 Offset: 0x662FF0 VA: 0x1806647F0
	public static int OverlapBoxNonAlloc(Vector3 center, Vector3 halfExtents, Collider[] results, Quaternion orientation, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x664920 Offset: 0x663120 VA: 0x180664920
	public static int OverlapBoxNonAlloc(Vector3 center, Vector3 halfExtents, Collider[] results, Quaternion orientation, int mask) { }
	// RVA: 0x664A50 Offset: 0x663250 VA: 0x180664A50
	public static int OverlapCapsuleNonAlloc(Vector3 point0, Vector3 point1, float radius, Collider[] results, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x664B80 Offset: 0x663380 VA: 0x180664B80
	private static void get_gravity_Injected(out Vector3 ret) { }
	// RVA: 0x664BD0 Offset: 0x6633D0 VA: 0x180664BD0
	private static void get_defaultPhysicsScene_Injected(out PhysicsScene ret) { }
	// RVA: 0x664C20 Offset: 0x663420 VA: 0x180664C20
	private static RaycastHit[] Internal_RaycastAll_Injected(ref PhysicsScene physicsScene, ref Ray ray, float maxDistance, int mask, QueryTriggerInteraction queryTriggerInteraction) { }
	// RVA: 0x664CB0 Offset: 0x6634B0 VA: 0x180664CB0
	private static bool Query_ComputePenetration_Injected(Collider colliderA, ref Vector3 positionA, ref Quaternion rotationA, Collider colliderB, ref Vector3 positionB, ref Quaternion rotationB, ref Vector3 direction, ref float distance) { }
	// RVA: 0x664D40 Offset: 0x663540 VA: 0x180664D40
	private static bool CheckBox_Internal_Injected(ref PhysicsScene physicsScene, ref Vector3 center, ref Vector3 halfExtents, ref Quaternion orientation, int layermask, QueryTriggerInteraction queryTriggerInteraction) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1874
{}

// Namespace: UnityEngine
public interface ISubsystemDescriptor // TypeDefIndex: 1875
{}

// Namespace: UnityEngine
internal interface ISubsystemDescriptorImpl : ISubsystemDescriptor // TypeDefIndex: 1876
{
	// Properties
	set; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void set_ptr(IntPtr value) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xE1410 Offset: 0xE0810 VA: 0x1800E1410
public abstract class IntegratedSubsystemDescriptor : ISubsystemDescriptorImpl, ISubsystemDescriptor // TypeDefIndex: 1877
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties
	set; }

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0 Slot: 4
	private void UnityEngine.ISubsystemDescriptorImpl.set_ptr(IntPtr value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: UnityEngine
public abstract class SubsystemDescriptor : ISubsystemDescriptor // TypeDefIndex: 1878
{
	// Fields
	private string <id>k__BackingField; // 0x10

	// Properties
	public string id { get; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 4
	public string get_id() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xE1440 Offset: 0xE0840 VA: 0x1800E1440
public class IntegratedSubsystemDescriptor<TSubsystem> : IntegratedSubsystemDescriptor // TypeDefIndex: 1879
{
	// Methods
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
}

// Namespace: UnityEngine
internal static class Internal_SubsystemInstances // TypeDefIndex: 1880
{
	// Fields
	internal static List<ISubsystem> s_IntegratedSubsystemInstances; // 0x0
	internal static List<ISubsystem> s_StandaloneSubsystemInstances; // 0x8

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x688570 Offset: 0x686D70 VA: 0x180688570
	internal static void Internal_InitializeManagedInstance(IntPtr ptr, IntegratedSubsystem inst) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x688680 Offset: 0x686E80 VA: 0x180688680
	internal static void Internal_ClearManagedInstances() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x688910 Offset: 0x687110 VA: 0x180688910
	internal static void Internal_RemoveInstanceByPtr(IntPtr ptr) { }
	// RVA: 0x688BF0 Offset: 0x6873F0 VA: 0x180688BF0
	internal static IntegratedSubsystem Internal_GetInstanceByPtr(IntPtr ptr) { }
	// RVA: 0x688DE0 Offset: 0x6875E0 VA: 0x180688DE0
	private static void .cctor() { }
}

// Namespace: UnityEngine
internal static class Internal_SubsystemDescriptors // TypeDefIndex: 1881
{
	// Fields
	internal static List<ISubsystemDescriptorImpl> s_IntegratedSubsystemDescriptors; // 0x0
	internal static List<ISubsystemDescriptor> s_StandaloneSubsystemDescriptors; // 0x8

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x687F20 Offset: 0x686720 VA: 0x180687F20
	internal static bool Internal_AddDescriptor(SubsystemDescriptor descriptor) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x688180 Offset: 0x686980 VA: 0x180688180
	internal static void Internal_InitializeManagedDescriptor(IntPtr ptr, ISubsystemDescriptorImpl desc) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x688260 Offset: 0x686A60 VA: 0x180688260
	internal static void Internal_ClearManagedDescriptors() { }
	// RVA: 0x6884A0 Offset: 0x686CA0 VA: 0x1806884A0
	private static void .cctor() { }
}

// Namespace: UnityEngine
public static class SubsystemManager // TypeDefIndex: 1882
{
	// Fields
	private static Action reloadSubsytemsStarted; // 0x0
	private static Action reloadSubsytemsCompleted; // 0x8

	// Methods
	// RVA: 0x688EB0 Offset: 0x6876B0 VA: 0x180688EB0
	private static void .cctor() { }
	// RVA: 0x688F00 Offset: 0x687700 VA: 0x180688F00
	internal static void ReportSingleSubsystemAnalytics(string id) { }
	// RVA: 0x688EB0 Offset: 0x6876B0 VA: 0x180688EB0
	internal static void StaticConstructScriptingClassMap() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x688F50 Offset: 0x687750 VA: 0x180688F50
	private static void Internal_ReloadSubsystemsStarted() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x689030 Offset: 0x687830 VA: 0x180689030
	private static void Internal_ReloadSubsystemsCompleted() { }
}

// Namespace: UnityEngine
public interface ISubsystem // TypeDefIndex: 1883
{}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class IntegratedSubsystem : ISubsystem // TypeDefIndex: 1884
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	internal ISubsystemDescriptor m_subsystemDescriptor; // 0x18

	// Methods
	// RVA: 0x687EC0 Offset: 0x6866C0 VA: 0x180687EC0
	internal void SetHandle(IntegratedSubsystem inst) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xE1470 Offset: 0xE0870 VA: 0x1800E1470
public class IntegratedSubsystem<TSubsystemDescriptor> : IntegratedSubsystem // TypeDefIndex: 1885
{
	// Methods
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1886
{}

// Namespace: UnityEngine
public enum FontStyle // TypeDefIndex: 1887
{
	// Fields
	public int value__; // 0x0
	public const FontStyle Normal = 0; // 0x0
	public const FontStyle Bold = 1; // 0x0
	public const FontStyle Italic = 2; // 0x0
	public const FontStyle BoldAndItalic = 3; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum TextGenerationError // TypeDefIndex: 1888
{
	// Fields
	public int value__; // 0x0
	public const TextGenerationError None = 0; // 0x0
	public const TextGenerationError CustomSizeOnNonDynamicFont = 1; // 0x0
	public const TextGenerationError CustomStyleOnNonDynamicFont = 2; // 0x0
	public const TextGenerationError NoFont = 4; // 0x0
}

// Namespace: UnityEngine
public struct TextGenerationSettings // TypeDefIndex: 1889
{
	// Fields
	public Font font; // 0x0
	public Color color; // 0x8
	public int fontSize; // 0x18
	public float lineSpacing; // 0x1C
	public bool richText; // 0x20
	public float scaleFactor; // 0x24
	public FontStyle fontStyle; // 0x28
	public TextAnchor textAnchor; // 0x2C
	public bool alignByGeometry; // 0x30
	public bool resizeTextForBestFit; // 0x31
	public int resizeTextMinSize; // 0x34
	public int resizeTextMaxSize; // 0x38
	public bool updateBounds; // 0x3C
	public VerticalWrapMode verticalOverflow; // 0x40
	public HorizontalWrapMode horizontalOverflow; // 0x44
	public Vector2 generationExtents; // 0x48
	public Vector2 pivot; // 0x50
	public bool generateOutOfBounds; // 0x58

	// Methods
	// RVA: 0x27D60 Offset: 0x27160 VA: 0x180027D60
	private bool CompareColors(Color left, Color right) { }
	// RVA: 0x27D90 Offset: 0x27190 VA: 0x180027D90
	private bool CompareVector2(Vector2 left, Vector2 right) { }
	// RVA: 0x27DA0 Offset: 0x271A0 VA: 0x180027DA0
	public bool Equals(TextGenerationSettings other) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class TextGenerator : IDisposable // TypeDefIndex: 1890
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private string m_LastString; // 0x18
	private TextGenerationSettings m_LastSettings; // 0x20
	private bool m_HasGenerated; // 0x80
	private TextGenerationError m_LastValid; // 0x84
	private readonly List<UIVertex> m_Verts; // 0x88
	private readonly List<UICharInfo> m_Characters; // 0x90
	private readonly List<UILineInfo> m_Lines; // 0x98
	private bool m_CachedVerts; // 0xA0
	private bool m_CachedCharacters; // 0xA1
	private bool m_CachedLines; // 0xA2

	// Properties
	public int characterCountVisible { get; }
	public IList<UIVertex> verts { get; }
	public IList<UICharInfo> characters { get; }
	public IList<UILineInfo> lines { get; }
	public Rect rectExtents { get; }
	public int characterCount { get; }
	public int lineCount { get; }

	// Methods
	// RVA: 0x680E00 Offset: 0x67F600 VA: 0x180680E00
	public void .ctor() { }
	// RVA: 0x680E10 Offset: 0x67F610 VA: 0x180680E10
	public void .ctor(int initialCapacity) { }
	// RVA: 0x681150 Offset: 0x67F950 VA: 0x180681150 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x681230 Offset: 0x67FA30 VA: 0x180681230 Slot: 4
	private void System.IDisposable.Dispose() { }
	// RVA: 0x681300 Offset: 0x67FB00 VA: 0x180681300
	public int get_characterCountVisible() { }
	// RVA: 0x681360 Offset: 0x67FB60 VA: 0x180681360
	private TextGenerationSettings ValidatedSettings(TextGenerationSettings settings) { }
	// RVA: 0x681720 Offset: 0x67FF20 VA: 0x180681720
	public void Invalidate() { }
	// RVA: 0x681730 Offset: 0x67FF30 VA: 0x180681730
	public void GetCharacters(List<UICharInfo> characters) { }
	// RVA: 0x681790 Offset: 0x67FF90 VA: 0x180681790
	public void GetLines(List<UILineInfo> lines) { }
	// RVA: 0x6817F0 Offset: 0x67FFF0 VA: 0x1806817F0
	public void GetVertices(List<UIVertex> vertices) { }
	// RVA: 0x681850 Offset: 0x680050 VA: 0x180681850
	public float GetPreferredWidth(string str, TextGenerationSettings settings) { }
	// RVA: 0x681910 Offset: 0x680110 VA: 0x180681910
	public float GetPreferredHeight(string str, TextGenerationSettings settings) { }
	// RVA: 0x6819D0 Offset: 0x6801D0 VA: 0x1806819D0
	public bool PopulateWithErrors(string str, TextGenerationSettings settings, GameObject context) { }
	// RVA: 0x681C30 Offset: 0x680430 VA: 0x180681C30
	public bool Populate(string str, TextGenerationSettings settings) { }
	// RVA: 0x681C90 Offset: 0x680490 VA: 0x180681C90
	private TextGenerationError PopulateWithError(string str, TextGenerationSettings settings) { }
	// RVA: 0x681E10 Offset: 0x680610 VA: 0x180681E10
	private TextGenerationError PopulateAlways(string str, TextGenerationSettings settings) { }
	// RVA: 0x682180 Offset: 0x680980 VA: 0x180682180
	public IList<UIVertex> get_verts() { }
	// RVA: 0x682200 Offset: 0x680A00 VA: 0x180682200
	public IList<UICharInfo> get_characters() { }
	// RVA: 0x682280 Offset: 0x680A80 VA: 0x180682280
	public IList<UILineInfo> get_lines() { }
	// RVA: 0x682300 Offset: 0x680B00 VA: 0x180682300
	public Rect get_rectExtents() { }
	// RVA: 0x682370 Offset: 0x680B70 VA: 0x180682370
	public int get_characterCount() { }
	// RVA: 0x6823C0 Offset: 0x680BC0 VA: 0x1806823C0
	public int get_lineCount() { }
	// RVA: 0x682410 Offset: 0x680C10 VA: 0x180682410
	private static IntPtr Internal_Create() { }
	// RVA: 0x682460 Offset: 0x680C60 VA: 0x180682460
	private static void Internal_Destroy(IntPtr ptr) { }
	// RVA: 0x6824B0 Offset: 0x680CB0 VA: 0x1806824B0
	internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error) { }
	// RVA: 0x682650 Offset: 0x680E50 VA: 0x180682650
	internal bool Populate_Internal(string str, Font font, Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, VerticalWrapMode verticalOverFlow, HorizontalWrapMode horizontalOverflow, bool updateBounds, TextAnchor anchor, Vector2 extents, Vector2 pivot, bool generateOutOfBounds, bool alignByGeometry, out TextGenerationError error) { }
	// RVA: 0x6817F0 Offset: 0x67FFF0 VA: 0x1806817F0
	private void GetVerticesInternal(object vertices) { }
	// RVA: 0x681730 Offset: 0x67FF30 VA: 0x180681730
	private void GetCharactersInternal(object characters) { }
	// RVA: 0x681790 Offset: 0x67FF90 VA: 0x180681790
	private void GetLinesInternal(object lines) { }
	// RVA: 0x6828B0 Offset: 0x6810B0 VA: 0x1806828B0
	private void get_rectExtents_Injected(out Rect ret) { }
	// RVA: 0x682910 Offset: 0x681110 VA: 0x180682910
	private bool Populate_Internal_Injected(string str, Font font, ref Color color, int fontSize, float scaleFactor, float lineSpacing, FontStyle style, bool richText, bool resizeTextForBestFit, int resizeTextMinSize, int resizeTextMaxSize, int verticalOverFlow, int horizontalOverflow, bool updateBounds, TextAnchor anchor, float extentsX, float extentsY, float pivotX, float pivotY, bool generateOutOfBounds, bool alignByGeometry, out uint error) { }
}

// Namespace: UnityEngine
public enum TextAnchor // TypeDefIndex: 1891
{
	// Fields
	public int value__; // 0x0
	public const TextAnchor UpperLeft = 0; // 0x0
	public const TextAnchor UpperCenter = 1; // 0x0
	public const TextAnchor UpperRight = 2; // 0x0
	public const TextAnchor MiddleLeft = 3; // 0x0
	public const TextAnchor MiddleCenter = 4; // 0x0
	public const TextAnchor MiddleRight = 5; // 0x0
	public const TextAnchor LowerLeft = 6; // 0x0
	public const TextAnchor LowerCenter = 7; // 0x0
	public const TextAnchor LowerRight = 8; // 0x0
}

// Namespace: UnityEngine
public enum HorizontalWrapMode // TypeDefIndex: 1892
{
	// Fields
	public int value__; // 0x0
	public const HorizontalWrapMode Wrap = 0; // 0x0
	public const HorizontalWrapMode Overflow = 1; // 0x0
}

// Namespace: UnityEngine
public enum VerticalWrapMode // TypeDefIndex: 1893
{
	// Fields
	public int value__; // 0x0
	public const VerticalWrapMode Truncate = 0; // 0x0
	public const VerticalWrapMode Overflow = 1; // 0x0
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct UICharInfo // TypeDefIndex: 1894
{
	// Fields
	public Vector2 cursorPos; // 0x0
	public float charWidth; // 0x8
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct UILineInfo // TypeDefIndex: 1895
{
	// Fields
	public int startCharIdx; // 0x0
	public int height; // 0x4
	public float topY; // 0x8
	public float leading; // 0xC
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct UIVertex // TypeDefIndex: 1896
{
	// Fields
	public Vector3 position; // 0x0
	public Vector3 normal; // 0xC
	public Vector4 tangent; // 0x18
	public Color32 color; // 0x28
	public Vector2 uv0; // 0x2C
	public Vector2 uv1; // 0x34
	public Vector2 uv2; // 0x3C
	public Vector2 uv3; // 0x44
	private static readonly Color32 s_DefaultColor; // 0x0
	private static readonly Vector4 s_DefaultTangent; // 0x4
	public static UIVertex simpleVert; // 0x14

	// Methods
	// RVA: 0x6829F0 Offset: 0x6811F0 VA: 0x1806829F0
	private static void .cctor() { }
}

// Namespace: UnityEngine
public sealed class Font : Object // TypeDefIndex: 1897
{
	// Fields
	private static Action<Font> textureRebuilt; // 0x0
	private Font.FontTextureRebuildCallback m_FontTextureRebuildCallback; // 0x18

	// Properties
	public Material material { get; }
	public bool dynamic { get; }
	public int fontSize { get; }

	// Methods
	// RVA: 0x680270 Offset: 0x67EA70 VA: 0x180680270
	public static void add_textureRebuilt(Action<Font> value) { }
	// RVA: 0x680370 Offset: 0x67EB70 VA: 0x180680370
	public static void remove_textureRebuilt(Action<Font> value) { }
	// RVA: 0x680470 Offset: 0x67EC70 VA: 0x180680470
	public Material get_material() { }
	// RVA: 0x6804C0 Offset: 0x67ECC0 VA: 0x1806804C0
	public bool get_dynamic() { }
	// RVA: 0x680510 Offset: 0x67ED10 VA: 0x180680510
	public int get_fontSize() { }
	// RVA: 0x680560 Offset: 0x67ED60 VA: 0x180680560
	public void .ctor() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x680630 Offset: 0x67EE30 VA: 0x180680630
	internal static void InvokeTextureRebuilt_Internal(Font font) { }
	// RVA: 0x6806E0 Offset: 0x67EEE0 VA: 0x1806806E0
	public bool HasCharacter(char c) { }
	// RVA: 0x680740 Offset: 0x67EF40 VA: 0x180680740
	private bool HasCharacter(int c) { }
	// RVA: 0x6807A0 Offset: 0x67EFA0 VA: 0x1806807A0
	private static void Internal_CreateFont(Font self, string name) { }
}

// Namespace: 
public sealed class Font.FontTextureRebuildCallback : MulticastDelegate // TypeDefIndex: 1898
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1899
{}

// Namespace: UnityEngine
public sealed class AudioSettings // TypeDefIndex: 1900
{
	// Fields
	private static AudioSettings.AudioConfigurationChangeHandler OnAudioConfigurationChanged; // 0xAC380

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x687290 Offset: 0x685A90 VA: 0x180687290
	internal static void InvokeOnAudioConfigurationChanged(bool deviceWasChanged) { }
}

// Namespace: 
public sealed class AudioSettings.AudioConfigurationChangeHandler : MulticastDelegate // TypeDefIndex: 1901
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x687BD0 Offset: 0x6863D0 VA: 0x180687BD0 Slot: 12
	public virtual void Invoke(bool deviceWasChanged) { }
	// RVA: 0x687E00 Offset: 0x686600 VA: 0x180687E00 Slot: 13
	public virtual IAsyncResult BeginInvoke(bool deviceWasChanged, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public sealed class AudioClip : Object // TypeDefIndex: 1902
{
	// Fields
	private AudioClip.PCMReaderCallback m_PCMReaderCallback; // 0x18
	private AudioClip.PCMSetPositionCallback m_PCMSetPositionCallback; // 0x20

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x687000 Offset: 0x685800 VA: 0x180687000
	private void InvokePCMReaderCallback_Internal(float[] data) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x687020 Offset: 0x685820 VA: 0x180687020
	private void InvokePCMSetPositionCallback_Internal(int position) { }
}

// Namespace: 
public sealed class AudioClip.PCMReaderCallback : MulticastDelegate // TypeDefIndex: 1903
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E1A0 Offset: 0x44C9A0 VA: 0x18044E1A0 Slot: 12
	public virtual void Invoke(float[] data) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(float[] data, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class AudioClip.PCMSetPositionCallback : MulticastDelegate // TypeDefIndex: 1904
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E940 Offset: 0x44D140 VA: 0x18044E940 Slot: 12
	public virtual void Invoke(int position) { }
	// RVA: 0x687530 Offset: 0x685D30 VA: 0x180687530 Slot: 13
	public virtual IAsyncResult BeginInvoke(int position, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public class AudioBehaviour : Behaviour // TypeDefIndex: 1905
{}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xE3A90 Offset: 0xE2E90 VA: 0x1800E3A90
public sealed class AudioListener : AudioBehaviour // TypeDefIndex: 1906
{}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xE3B10 Offset: 0xE2F10 VA: 0x1800E3B10
public sealed class AudioSource : AudioBehaviour // TypeDefIndex: 1907
{
	// Properties
	public float volume { set; }
	public float pitch { get; set; }

	// Methods
	// RVA: 0x687320 Offset: 0x685B20 VA: 0x180687320
	private static float GetPitch(AudioSource source) { }
	// RVA: 0x687370 Offset: 0x685B70 VA: 0x180687370
	private static void SetPitch(AudioSource source, float pitch) { }
	// RVA: 0x6873D0 Offset: 0x685BD0 VA: 0x1806873D0
	private static void PlayHelper(AudioSource source, ulong delay) { }
	// RVA: 0x687430 Offset: 0x685C30 VA: 0x180687430
	public void set_volume(float value) { }
	// RVA: 0x687320 Offset: 0x685B20 VA: 0x180687320
	public float get_pitch() { }
	// RVA: 0x687370 Offset: 0x685B70 VA: 0x180687370
	public void set_pitch(float value) { }
	// RVA: 0x6873D0 Offset: 0x685BD0 VA: 0x1806873D0
	public void Play(ulong delay) { }
	// RVA: 0x687490 Offset: 0x685C90 VA: 0x180687490
	public void Pause() { }
	// RVA: 0x6874E0 Offset: 0x685CE0 VA: 0x1806874E0
	public void UnPause() { }
}

// Namespace: UnityEngine.Audio
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct AudioClipPlayable : IPlayable, IEquatable<AudioClipPlayable> // TypeDefIndex: 1908
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x283A0 Offset: 0x277A0 VA: 0x1800283A0 Slot: 5
	public bool Equals(AudioClipPlayable other) { }
}

// Namespace: UnityEngine.Audio
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct AudioMixerPlayable : IPlayable, IEquatable<AudioMixerPlayable> // TypeDefIndex: 1909
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x284F0 Offset: 0x278F0 VA: 0x1800284F0 Slot: 5
	public bool Equals(AudioMixerPlayable other) { }
}

// Namespace: UnityEngine.Audio
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct AudioPlayableOutput : IPlayableOutput // TypeDefIndex: 1910
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0

	// Methods
	// RVA: 0x28640 Offset: 0x27A40 VA: 0x180028640
	internal void .ctor(PlayableOutputHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableOutputHandle GetHandle() { }
	// RVA: 0x687110 Offset: 0x685910 VA: 0x180687110
	public static AudioPlayableOutput op_Explicit(PlayableOutput output) { }
	// RVA: 0x28660 Offset: 0x27A60 VA: 0x180028660
	public void SetEvaluateOnSeek(bool value) { }
	// RVA: 0x6871F0 Offset: 0x6859F0 VA: 0x1806871F0
	private static void InternalSetEvaluateOnSeek(ref PlayableOutputHandle output, bool value) { }
}

// Namespace: UnityEngine.Experimental.Audio
public class AudioSampleProvider // TypeDefIndex: 1911
{
	// Fields
	private AudioSampleProvider.SampleFramesHandler sampleFramesAvailable; // 0x10
	private AudioSampleProvider.SampleFramesHandler sampleFramesOverflow; // 0x18

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x687250 Offset: 0x685A50 VA: 0x180687250
	private void InvokeSampleFramesAvailable(int sampleFrameCount) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x687270 Offset: 0x685A70 VA: 0x180687270
	private void InvokeSampleFramesOverflow(int droppedSampleFrameCount) { }
}

// Namespace: 
public sealed class AudioSampleProvider.SampleFramesHandler : MulticastDelegate // TypeDefIndex: 1912
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x6875F0 Offset: 0x685DF0 VA: 0x1806875F0 Slot: 12
	public virtual void Invoke(AudioSampleProvider provider, uint sampleFrameCount) { }
	// RVA: 0x687B00 Offset: 0x686300 VA: 0x180687B00 Slot: 13
	public virtual IAsyncResult BeginInvoke(AudioSampleProvider provider, uint sampleFrameCount, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1913
{}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xE4E50 Offset: 0xE4250 VA: 0x1800E4E50
public class GridLayout : Behaviour // TypeDefIndex: 1914
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void DoNothing() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1915
{}

// Namespace: UnityEngine
public sealed class Event // TypeDefIndex: 1916
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private static Event s_Current; // 0x0
	private static Event s_MasterEvent; // 0x8

	// Properties
	public EventType rawType { get; }
	public Vector2 mousePosition { get; }
	public PointerType pointerType { get; }
	public EventModifiers modifiers { get; set; }
	public int clickCount { get; }
	public char character { get; set; }
	public KeyCode keyCode { get; set; }
	public int displayIndex { set; }
	public EventType type { get; set; }
	public string commandName { get; }
	public bool shift { get; }
	public bool control { get; }
	public bool alt { get; }
	public bool command { get; }
	public static Event current { get; }
	public bool isKey { get; }
	public bool isMouse { get; }
	internal bool isDirectManipulationDevice { get; }

	// Methods
	// RVA: 0x5E92D0 Offset: 0x5E7AD0 VA: 0x1805E92D0
	public EventType get_rawType() { }
	// RVA: 0x5E9320 Offset: 0x5E7B20 VA: 0x1805E9320
	public Vector2 get_mousePosition() { }
	// RVA: 0x5E9390 Offset: 0x5E7B90 VA: 0x1805E9390
	public PointerType get_pointerType() { }
	// RVA: 0x5E93E0 Offset: 0x5E7BE0 VA: 0x1805E93E0
	public EventModifiers get_modifiers() { }
	// RVA: 0x5E9430 Offset: 0x5E7C30 VA: 0x1805E9430
	public void set_modifiers(EventModifiers value) { }
	// RVA: 0x5E9490 Offset: 0x5E7C90 VA: 0x1805E9490
	public int get_clickCount() { }
	// RVA: 0x5E94E0 Offset: 0x5E7CE0 VA: 0x1805E94E0
	public char get_character() { }
	// RVA: 0x5E9530 Offset: 0x5E7D30 VA: 0x1805E9530
	public void set_character(char value) { }
	// RVA: 0x5E9590 Offset: 0x5E7D90 VA: 0x1805E9590
	public KeyCode get_keyCode() { }
	// RVA: 0x5E95E0 Offset: 0x5E7DE0 VA: 0x1805E95E0
	public void set_keyCode(KeyCode value) { }
	// RVA: 0x5E9640 Offset: 0x5E7E40 VA: 0x1805E9640
	public void set_displayIndex(int value) { }
	// RVA: 0x5E96A0 Offset: 0x5E7EA0 VA: 0x1805E96A0
	public EventType get_type() { }
	// RVA: 0x5E96F0 Offset: 0x5E7EF0 VA: 0x1805E96F0
	public void set_type(EventType value) { }
	// RVA: 0x5E9750 Offset: 0x5E7F50 VA: 0x1805E9750
	public string get_commandName() { }
	// RVA: 0x5E97A0 Offset: 0x5E7FA0 VA: 0x1805E97A0
	private void Internal_Use() { }
	// RVA: 0x5E97F0 Offset: 0x5E7FF0 VA: 0x1805E97F0
	private static IntPtr Internal_Create(int displayIndex) { }
	// RVA: 0x5E9840 Offset: 0x5E8040 VA: 0x1805E9840
	private static void Internal_Destroy(IntPtr ptr) { }
	// RVA: 0x5E9890 Offset: 0x5E8090 VA: 0x1805E9890
	public EventType GetTypeForControl(int controlID) { }
	// RVA: 0x5E98F0 Offset: 0x5E80F0 VA: 0x1805E98F0
	public static bool PopEvent(Event outEvent) { }
	// RVA: 0x5E9940 Offset: 0x5E8140 VA: 0x1805E9940
	private static void Internal_SetNativeEvent(IntPtr ptr) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5E9990 Offset: 0x5E8190 VA: 0x1805E9990
	internal static void Internal_MakeMasterEventCurrent(int displayIndex) { }
	// RVA: 0x5E9B50 Offset: 0x5E8350 VA: 0x1805E9B50
	public void .ctor() { }
	// RVA: 0x5E9BB0 Offset: 0x5E83B0 VA: 0x1805E9BB0
	public void .ctor(int displayIndex) { }
	// RVA: 0x5E9C10 Offset: 0x5E8410 VA: 0x1805E9C10 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x5E9D20 Offset: 0x5E8520 VA: 0x1805E9D20
	public bool get_shift() { }
	// RVA: 0x5E9D80 Offset: 0x5E8580 VA: 0x1805E9D80
	public bool get_control() { }
	// RVA: 0x5E9DE0 Offset: 0x5E85E0 VA: 0x1805E9DE0
	public bool get_alt() { }
	// RVA: 0x5E9E40 Offset: 0x5E8640 VA: 0x1805E9E40
	public bool get_command() { }
	// RVA: 0x5E9EA0 Offset: 0x5E86A0 VA: 0x1805E9EA0
	public static Event get_current() { }
	// RVA: 0x5E9F20 Offset: 0x5E8720 VA: 0x1805E9F20
	public bool get_isKey() { }
	// RVA: 0x5E9F90 Offset: 0x5E8790 VA: 0x1805E9F90
	public bool get_isMouse() { }
	// RVA: 0x5EA010 Offset: 0x5E8810 VA: 0x1805EA010
	internal bool get_isDirectManipulationDevice() { }
	// RVA: 0x5EA0C0 Offset: 0x5E88C0 VA: 0x1805EA0C0
	public static Event KeyboardEvent(string key) { }
	// RVA: 0x5EB6F0 Offset: 0x5E9EF0 VA: 0x1805EB6F0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x5EB850 Offset: 0x5EA050 VA: 0x1805EB850 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x5EBA40 Offset: 0x5EA240 VA: 0x1805EBA40 Slot: 3
	public override string ToString() { }
	// RVA: 0x5EC5B0 Offset: 0x5EADB0 VA: 0x1805EC5B0
	public void Use() { }
	// RVA: 0x5EC810 Offset: 0x5EB010 VA: 0x1805EC810
	private void get_mousePosition_Injected(out Vector2 ret) { }
}

// Namespace: UnityEngine
public enum EventType // TypeDefIndex: 1917
{
	// Fields
	public int value__; // 0x0
	public const EventType MouseDown = 0; // 0x0
	public const EventType MouseUp = 1; // 0x0
	public const EventType MouseMove = 2; // 0x0
	public const EventType MouseDrag = 3; // 0x0
	public const EventType KeyDown = 4; // 0x0
	public const EventType KeyUp = 5; // 0x0
	public const EventType ScrollWheel = 6; // 0x0
	public const EventType Repaint = 7; // 0x0
	public const EventType Layout = 8; // 0x0
	public const EventType DragUpdated = 9; // 0x0
	public const EventType DragPerform = 10; // 0x0
	public const EventType DragExited = 15; // 0x0
	public const EventType Ignore = 11; // 0x0
	public const EventType Used = 12; // 0x0
	public const EventType ValidateCommand = 13; // 0x0
	public const EventType ExecuteCommand = 14; // 0x0
	public const EventType ContextClick = 16; // 0x0
	public const EventType MouseEnterWindow = 20; // 0x0
	public const EventType MouseLeaveWindow = 21; // 0x0
	public const EventType TouchDown = 30; // 0x0
	public const EventType TouchUp = 31; // 0x0
	public const EventType TouchMove = 32; // 0x0
	public const EventType TouchEnter = 33; // 0x0
	public const EventType TouchLeave = 34; // 0x0
	public const EventType TouchStationary = 35; // 0x0
	[ObsoleteAttribute] // RVA: 0xE61C0 Offset: 0xE55C0 VA: 0x1800E61C0
	public const EventType mouseDown = 0; // 0x0
	[ObsoleteAttribute] // RVA: 0xE61F0 Offset: 0xE55F0 VA: 0x1800E61F0
	public const EventType mouseUp = 1; // 0x0
	[ObsoleteAttribute] // RVA: 0xE6220 Offset: 0xE5620 VA: 0x1800E6220
	public const EventType mouseMove = 2; // 0x0
	[ObsoleteAttribute] // RVA: 0xE6250 Offset: 0xE5650 VA: 0x1800E6250
	public const EventType mouseDrag = 3; // 0x0
	[ObsoleteAttribute] // RVA: 0xE6280 Offset: 0xE5680 VA: 0x1800E6280
	public const EventType keyDown = 4; // 0x0
	[ObsoleteAttribute] // RVA: 0xE62B0 Offset: 0xE56B0 VA: 0x1800E62B0
	public const EventType keyUp = 5; // 0x0
	[ObsoleteAttribute] // RVA: 0xE62E0 Offset: 0xE56E0 VA: 0x1800E62E0
	public const EventType scrollWheel = 6; // 0x0
	[ObsoleteAttribute] // RVA: 0xE6310 Offset: 0xE5710 VA: 0x1800E6310
	public const EventType repaint = 7; // 0x0
	[ObsoleteAttribute] // RVA: 0xE6340 Offset: 0xE5740 VA: 0x1800E6340
	public const EventType layout = 8; // 0x0
	[ObsoleteAttribute] // RVA: 0xE6370 Offset: 0xE5770 VA: 0x1800E6370
	public const EventType dragUpdated = 9; // 0x0
	[ObsoleteAttribute] // RVA: 0xE63A0 Offset: 0xE57A0 VA: 0x1800E63A0
	public const EventType dragPerform = 10; // 0x0
	[ObsoleteAttribute] // RVA: 0xE63D0 Offset: 0xE57D0 VA: 0x1800E63D0
	public const EventType ignore = 11; // 0x0
	[ObsoleteAttribute] // RVA: 0xE6400 Offset: 0xE5800 VA: 0x1800E6400
	public const EventType used = 12; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum EventModifiers // TypeDefIndex: 1918
{
	// Fields
	public int value__; // 0x0
	public const EventModifiers None = 0; // 0x0
	public const EventModifiers Shift = 1; // 0x0
	public const EventModifiers Control = 2; // 0x0
	public const EventModifiers Alt = 4; // 0x0
	public const EventModifiers Command = 8; // 0x0
	public const EventModifiers Numeric = 16; // 0x0
	public const EventModifiers CapsLock = 32; // 0x0
	public const EventModifiers FunctionKey = 64; // 0x0
}

// Namespace: UnityEngine
public enum PointerType // TypeDefIndex: 1919
{
	// Fields
	public int value__; // 0x0
	public const PointerType Mouse = 0; // 0x0
	public const PointerType Touch = 1; // 0x0
	public const PointerType Pen = 2; // 0x0
}

// Namespace: UnityEngine
public class GUI // TypeDefIndex: 1920
{
	// Fields
	private static int s_ScrollControlId; // 0x0
	private static int s_HotTextField; // 0x4
	private static readonly int s_BoxHash; // 0x8
	private static readonly int s_ButonHash; // 0xC
	private static readonly int s_RepeatButtonHash; // 0x10
	private static readonly int s_ToggleHash; // 0x14
	private static readonly int s_ButtonGridHash; // 0x18
	private static readonly int s_SliderHash; // 0x1C
	private static readonly int s_BeginGroupHash; // 0x20
	private static readonly int s_ScrollviewHash; // 0x24
	private static int <scrollTroughSide>k__BackingField; // 0x28
	private static DateTime <nextScrollStepTime>k__BackingField; // 0x30
	private static GUISkin s_Skin; // 0x38
	private static GenericStack <scrollViewStates>k__BackingField; // 0x40

	// Properties
	public static Color color { get; set; }
	public static bool changed { get; set; }
	internal static bool usePageScrollbars { get; }
	internal static Material blendMaterial { get; }
	internal static Material blitMaterial { get; }
	internal static Material roundedRectMaterial { get; }
	internal static Material roundedRectWithColorPerBorderMaterial { get; }
	internal static int scrollTroughSide { get; set; }
	internal static DateTime nextScrollStepTime { get; set; }
	public static GUISkin skin { get; set; }
	internal static GenericStack scrollViewStates { get; }

	// Methods
	// RVA: 0x5EC870 Offset: 0x5EB070 VA: 0x1805EC870
	public static Color get_color() { }
	// RVA: 0x5EC940 Offset: 0x5EB140 VA: 0x1805EC940
	public static void set_color(Color value) { }
	// RVA: 0x5ECA10 Offset: 0x5EB210 VA: 0x1805ECA10
	public static bool get_changed() { }
	// RVA: 0x5ECA60 Offset: 0x5EB260 VA: 0x1805ECA60
	public static void set_changed(bool value) { }
	// RVA: 0x5ECAB0 Offset: 0x5EB2B0 VA: 0x1805ECAB0
	internal static bool get_usePageScrollbars() { }
	// RVA: 0x5ECB00 Offset: 0x5EB300 VA: 0x1805ECB00
	internal static Material get_blendMaterial() { }
	// RVA: 0x5ECB50 Offset: 0x5EB350 VA: 0x1805ECB50
	internal static Material get_blitMaterial() { }
	// RVA: 0x5ECBA0 Offset: 0x5EB3A0 VA: 0x1805ECBA0
	internal static Material get_roundedRectMaterial() { }
	// RVA: 0x5ECBF0 Offset: 0x5EB3F0 VA: 0x1805ECBF0
	internal static Material get_roundedRectWithColorPerBorderMaterial() { }
	// RVA: 0x5ECC40 Offset: 0x5EB440 VA: 0x1805ECC40
	internal static void GrabMouseControl(int id) { }
	// RVA: 0x5ECC90 Offset: 0x5EB490 VA: 0x1805ECC90
	internal static bool HasMouseControl(int id) { }
	// RVA: 0x5ECCE0 Offset: 0x5EB4E0 VA: 0x1805ECCE0
	internal static void ReleaseMouseControl() { }
	// RVA: 0x5ECD30 Offset: 0x5EB530 VA: 0x1805ECD30
	public static void SetNextControlName(string name) { }
	// RVA: 0x5ECD80 Offset: 0x5EB580 VA: 0x1805ECD80
	public static string GetNameOfFocusedControl() { }
	// RVA: 0x5ECDD0 Offset: 0x5EB5D0 VA: 0x1805ECDD0
	public static void FocusControl(string name) { }
	// RVA: 0x5ECE20 Offset: 0x5EB620 VA: 0x1805ECE20
	internal static void InternalRepaintEditorWindow() { }
	// RVA: 0x5ECE70 Offset: 0x5EB670 VA: 0x1805ECE70
	private static void .cctor() { }
	// RVA: 0x5ED0D0 Offset: 0x5EB8D0 VA: 0x1805ED0D0
	internal static int get_scrollTroughSide() { }
	// RVA: 0x5ED170 Offset: 0x5EB970 VA: 0x1805ED170
	internal static void set_scrollTroughSide(int value) { }
	// RVA: 0x5ED210 Offset: 0x5EBA10 VA: 0x1805ED210
	internal static DateTime get_nextScrollStepTime() { }
	// RVA: 0x5ED2B0 Offset: 0x5EBAB0 VA: 0x1805ED2B0
	internal static void set_nextScrollStepTime(DateTime value) { }
	// RVA: 0x5ED350 Offset: 0x5EBB50 VA: 0x1805ED350
	public static void set_skin(GUISkin value) { }
	// RVA: 0x5ED3F0 Offset: 0x5EBBF0 VA: 0x1805ED3F0
	public static GUISkin get_skin() { }
	// RVA: 0x5ED490 Offset: 0x5EBC90 VA: 0x1805ED490
	internal static void DoSetSkin(GUISkin newSkin) { }
	// RVA: 0x5ED720 Offset: 0x5EBF20 VA: 0x1805ED720
	public static void Label(Rect position, string text) { }
	// RVA: 0x5ED820 Offset: 0x5EC020 VA: 0x1805ED820
	public static void Label(Rect position, string text, GUIStyle style) { }
	// RVA: 0x5ED910 Offset: 0x5EC110 VA: 0x1805ED910
	public static void Label(Rect position, GUIContent content, GUIStyle style) { }
	// RVA: 0x5ED9E0 Offset: 0x5EC1E0 VA: 0x1805ED9E0
	public static void DrawTexture(Rect position, Texture image) { }
	// RVA: 0x5EDBA0 Offset: 0x5EC3A0 VA: 0x1805EDBA0
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode) { }
	// RVA: 0x5EDCF0 Offset: 0x5EC4F0 VA: 0x1805EDCF0
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend) { }
	// RVA: 0x5EDDE0 Offset: 0x5EC5E0 VA: 0x1805EDDE0
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect) { }
	// RVA: 0x5EE010 Offset: 0x5EC810 VA: 0x1805EE010
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, float borderWidth, float borderRadius) { }
	// RVA: 0x5EE1B0 Offset: 0x5EC9B0 VA: 0x1805EE1B0
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, Vector4 borderWidths, float borderRadius) { }
	// RVA: 0x5EE460 Offset: 0x5ECC60 VA: 0x1805EE460
	public static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, Vector4 borderWidths, Vector4 borderRadiuses) { }
	// RVA: 0x5EE680 Offset: 0x5ECE80 VA: 0x1805EE680
	internal static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color color, Vector4 borderWidths, Vector4 borderRadiuses, bool drawSmoothCorners) { }
	// RVA: 0x5EE820 Offset: 0x5ED020 VA: 0x1805EE820
	internal static void DrawTexture(Rect position, Texture image, ScaleMode scaleMode, bool alphaBlend, float imageAspect, Color leftColor, Color topColor, Color rightColor, Color bottomColor, Vector4 borderWidths, Vector4 borderRadiuses, bool drawSmoothCorners) { }
	// RVA: 0x5EEE50 Offset: 0x5ED650 VA: 0x1805EEE50
	internal static bool CalculateScaledTextureRects(Rect position, ScaleMode scaleMode, float imageAspect, ref Rect outScreenRect, ref Rect outSourceRect) { }
	// RVA: 0x5EF000 Offset: 0x5ED800 VA: 0x1805EF000
	public static void Box(Rect position, string text) { }
	// RVA: 0x5EF100 Offset: 0x5ED900 VA: 0x1805EF100
	public static void Box(Rect position, GUIContent content, GUIStyle style) { }
	// RVA: 0x5EF320 Offset: 0x5EDB20 VA: 0x1805EF320
	public static bool Button(Rect position, string text) { }
	// RVA: 0x5EF520 Offset: 0x5EDD20 VA: 0x1805EF520
	public static bool Button(Rect position, GUIContent content, GUIStyle style) { }
	// RVA: 0x5EF660 Offset: 0x5EDE60 VA: 0x1805EF660
	internal static bool Button(Rect position, int id, GUIContent content, GUIStyle style) { }
	// RVA: 0x5EF8B0 Offset: 0x5EE0B0 VA: 0x1805EF8B0
	private static bool DoRepeatButton(Rect position, GUIContent content, GUIStyle style, FocusType focusType) { }
	// RVA: 0x5EFCB0 Offset: 0x5EE4B0 VA: 0x1805EFCB0
	public static string TextField(Rect position, string text) { }
	// RVA: 0x5EFF30 Offset: 0x5EE730 VA: 0x1805EFF30
	internal static string PasswordFieldGetStrToShow(string password, char maskChar) { }
	// RVA: 0x5F00A0 Offset: 0x5EE8A0 VA: 0x1805F00A0
	internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style) { }
	// RVA: 0x5F0220 Offset: 0x5EEA20 VA: 0x1805F0220
	internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText) { }
	// RVA: 0x5F0330 Offset: 0x5EEB30 VA: 0x1805F0330
	internal static void DoTextField(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar) { }
	// RVA: 0x5F0890 Offset: 0x5EF090 VA: 0x1805F0890
	private static void HandleTextFieldEventForTouchscreen(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, string secureText, char maskChar, TextEditor editor) { }
	// RVA: 0x5F0F30 Offset: 0x5EF730 VA: 0x1805F0F30
	private static void HandleTextFieldEventForDesktop(Rect position, int id, GUIContent content, bool multiline, int maxLength, GUIStyle style, TextEditor editor) { }
	// RVA: 0x5F1760 Offset: 0x5EFF60 VA: 0x1805F1760
	private static bool DoControl(Rect position, int id, bool on, bool hover, GUIContent content, GUIStyle style) { }
	// RVA: 0x5F1B90 Offset: 0x5F0390 VA: 0x1805F1B90
	private static void DoLabel(Rect position, GUIContent content, GUIStyle style) { }
	// RVA: 0x5F1F00 Offset: 0x5F0700 VA: 0x1805F1F00
	internal static bool DoButton(Rect position, int id, GUIContent content, GUIStyle style) { }
	// RVA: 0x5F2090 Offset: 0x5F0890 VA: 0x1805F2090
	public static float Slider(Rect position, float value, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id, GUIStyle thumbExtent) { }
	// RVA: 0x5F2320 Offset: 0x5F0B20 VA: 0x1805F2320
	internal static bool ScrollerRepeatButton(int scrollerID, Rect rect, GUIStyle style) { }
	// RVA: 0x5F2630 Offset: 0x5F0E30 VA: 0x1805F2630
	public static float VerticalScrollbar(Rect position, float value, float size, float topValue, float bottomValue) { }
	// RVA: 0x5F27B0 Offset: 0x5F0FB0 VA: 0x1805F27B0
	internal static float Scroller(Rect position, float value, float size, float leftValue, float rightValue, GUIStyle slider, GUIStyle thumb, GUIStyle leftButton, GUIStyle rightButton, bool horiz) { }
	// RVA: 0x5F3090 Offset: 0x5F1890 VA: 0x1805F3090
	internal static GenericStack get_scrollViewStates() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5F3130 Offset: 0x5F1930 VA: 0x1805F3130
	internal static void CallWindowDelegate(GUI.WindowFunction func, int id, int instanceID, GUISkin _skin, int forceRect, float width, float height, GUIStyle style) { }
	// RVA: 0x5F35F0 Offset: 0x5F1DF0 VA: 0x1805F35F0
	private static void get_color_Injected(out Color ret) { }
	// RVA: 0x5F3640 Offset: 0x5F1E40 VA: 0x1805F3640
	private static void set_color_Injected(ref Color value) { }
}

// Namespace: 
public sealed class GUI.WindowFunction : MulticastDelegate // TypeDefIndex: 1921
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E940 Offset: 0x44D140 VA: 0x18044E940 Slot: 12
	public virtual void Invoke(int id) { }
	// RVA: 0x68C7E0 Offset: 0x68AFE0 VA: 0x18068C7E0 Slot: 13
	public virtual IAsyncResult BeginInvoke(int id, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
internal sealed class GUIClip // TypeDefIndex: 1922
{
	// Properties
	internal static Rect visibleRect { get; }

	// Methods
	// RVA: 0x5F3690 Offset: 0x5F1E90 VA: 0x1805F3690
	internal static Rect get_visibleRect() { }
	// RVA: 0x5F36F0 Offset: 0x5F1EF0 VA: 0x1805F36F0
	private static Vector2 UnclipToWindow_Vector2(Vector2 pos) { }
	// RVA: 0x5F3760 Offset: 0x5F1F60 VA: 0x1805F3760
	public static Vector2 UnclipToWindow(Vector2 pos) { }
	// RVA: 0x5F37D0 Offset: 0x5F1FD0 VA: 0x1805F37D0
	private static void get_visibleRect_Injected(out Rect ret) { }
	// RVA: 0x5F3820 Offset: 0x5F2020 VA: 0x1805F3820
	private static void UnclipToWindow_Vector2_Injected(ref Vector2 pos, out Vector2 ret) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDCCC0 Offset: 0xDC0C0 VA: 0x1800DCCC0
[Serializable]
public class GUIContent // TypeDefIndex: 1923
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_Text; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Texture m_Image; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_Tooltip; // 0x20
	private static readonly GUIContent s_Text; // 0x0
	private static readonly GUIContent s_Image; // 0x8
	private static readonly GUIContent s_TextImage; // 0x10
	public static GUIContent none; // 0x18

	// Properties
	public string text { get; set; }
	public Texture image { set; }
	public string tooltip { get; set; }

	// Methods
	// RVA: 0x4E9190 Offset: 0x4E7990 VA: 0x1804E9190
	public string get_text() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void set_text(string value) { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_image(Texture value) { }
	// RVA: 0x4EAE00 Offset: 0x4E9600 VA: 0x1804EAE00
	public string get_tooltip() { }
	// RVA: 0x16EEC0 Offset: 0x16D6C0 VA: 0x18016EEC0
	public void set_tooltip(string value) { }
	// RVA: 0x5F3880 Offset: 0x5F2080 VA: 0x1805F3880
	public void .ctor() { }
	// RVA: 0x5F3920 Offset: 0x5F2120 VA: 0x1805F3920
	public void .ctor(string text) { }
	// RVA: 0x5F3A20 Offset: 0x5F2220 VA: 0x1805F3A20
	public void .ctor(string text, Texture image, string tooltip) { }
	// RVA: 0x5F3AC0 Offset: 0x5F22C0 VA: 0x1805F3AC0
	internal static GUIContent Temp(string t) { }
	// RVA: 0x5F3BB0 Offset: 0x5F23B0 VA: 0x1805F3BB0
	internal static void ClearStaticCache() { }
	// RVA: 0x5F3D10 Offset: 0x5F2510 VA: 0x1805F3D10
	private static void .cctor() { }
}

// Namespace: UnityEngine
public enum ScaleMode // TypeDefIndex: 1924
{
	// Fields
	public int value__; // 0x0
	public const ScaleMode StretchToFill = 0; // 0x0
	public const ScaleMode ScaleAndCrop = 1; // 0x0
	public const ScaleMode ScaleToFit = 2; // 0x0
}

// Namespace: UnityEngine
public enum FocusType // TypeDefIndex: 1925
{
	// Fields
	public int value__; // 0x0
	[ObsoleteAttribute] // RVA: 0xE6430 Offset: 0xE5830 VA: 0x1800E6430
	public const FocusType Native = 0; // 0x0
	public const FocusType Keyboard = 1; // 0x0
	public const FocusType Passive = 2; // 0x0
}

// Namespace: UnityEngine
public class GUILayout // TypeDefIndex: 1926
{
	// Methods
	// RVA: 0x5F3E30 Offset: 0x5F2630 VA: 0x1805F3E30
	public static GUILayoutOption Width(float width) { }
	// RVA: 0x5F3EE0 Offset: 0x5F26E0 VA: 0x1805F3EE0
	public static GUILayoutOption Height(float height) { }
}

// Namespace: UnityEngine
public sealed class GUILayoutOption // TypeDefIndex: 1927
{
	// Fields
	internal GUILayoutOption.Type type; // 0x10
	internal object value; // 0x18

	// Methods
	// RVA: 0x2DC420 Offset: 0x2DAC20 VA: 0x1802DC420
	internal void .ctor(GUILayoutOption.Type type, object value) { }
}

// Namespace: 
internal enum GUILayoutOption.Type // TypeDefIndex: 1928
{
	// Fields
	public int value__; // 0x0
	public const GUILayoutOption.Type fixedWidth = 0; // 0x0
	public const GUILayoutOption.Type fixedHeight = 1; // 0x0
	public const GUILayoutOption.Type minWidth = 2; // 0x0
	public const GUILayoutOption.Type maxWidth = 3; // 0x0
	public const GUILayoutOption.Type minHeight = 4; // 0x0
	public const GUILayoutOption.Type maxHeight = 5; // 0x0
	public const GUILayoutOption.Type stretchWidth = 6; // 0x0
	public const GUILayoutOption.Type stretchHeight = 7; // 0x0
	public const GUILayoutOption.Type alignStart = 8; // 0x0
	public const GUILayoutOption.Type alignMiddle = 9; // 0x0
	public const GUILayoutOption.Type alignEnd = 10; // 0x0
	public const GUILayoutOption.Type alignJustify = 11; // 0x0
	public const GUILayoutOption.Type equalSize = 12; // 0x0
	public const GUILayoutOption.Type spacing = 13; // 0x0
}

// Namespace: UnityEngine
public class GUILayoutUtility // TypeDefIndex: 1929
{
	// Fields
	private static readonly Dictionary<int, GUILayoutUtility.LayoutCache> s_StoredLayouts; // 0x0
	private static readonly Dictionary<int, GUILayoutUtility.LayoutCache> s_StoredWindows; // 0x8
	internal static GUILayoutUtility.LayoutCache current; // 0x10
	internal static readonly Rect kDummyRect; // 0x18

	// Methods
	// RVA: 0x5F8D70 Offset: 0x5F7570 VA: 0x1805F8D70
	private static Rect Internal_GetWindowRect(int windowID) { }
	// RVA: 0x5F8E50 Offset: 0x5F7650 VA: 0x1805F8E50
	private static void Internal_MoveWindow(int windowID, Rect r) { }
	// RVA: 0x5F8F30 Offset: 0x5F7730 VA: 0x1805F8F30
	internal static GUILayoutUtility.LayoutCache SelectIDList(int instanceID, bool isWindow) { }
	// RVA: 0x5F9150 Offset: 0x5F7950 VA: 0x1805F9150
	internal static void Begin(int instanceID) { }
	// RVA: 0x5F9410 Offset: 0x5F7C10 VA: 0x1805F9410
	internal static void BeginWindow(int windowID, GUIStyle style, GUILayoutOption[] options) { }
	// RVA: 0x5F97C0 Offset: 0x5F7FC0 VA: 0x1805F97C0
	internal static void Layout() { }
	// RVA: 0x5F9B90 Offset: 0x5F8390 VA: 0x1805F9B90
	internal static void LayoutFromEditorWindow() { }
	// RVA: 0x5F9EC0 Offset: 0x5F86C0 VA: 0x1805F9EC0
	internal static void LayoutFreeGroup(GUILayoutGroup toplevel) { }
	// RVA: 0x5FA470 Offset: 0x5F8C70 VA: 0x1805FA470
	private static void LayoutSingleGroup(GUILayoutGroup i) { }
	// RVA: 0x5FA870 Offset: 0x5F9070 VA: 0x1805FA870
	private static void .cctor() { }
	// RVA: 0x5FA9C0 Offset: 0x5F91C0 VA: 0x1805FA9C0
	private static void Internal_GetWindowRect_Injected(int windowID, out Rect ret) { }
	// RVA: 0x5FAA20 Offset: 0x5F9220 VA: 0x1805FAA20
	private static void Internal_MoveWindow_Injected(int windowID, ref Rect r) { }
}

// Namespace: 
internal sealed class GUILayoutUtility.LayoutCache // TypeDefIndex: 1930
{
	// Fields
	private int <id>k__BackingField; // 0x10
	internal GUILayoutGroup topLevel; // 0x18
	internal GenericStack layoutGroups; // 0x20
	internal GUILayoutGroup windows; // 0x28

	// Properties
	set; }

	// Methods
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	private void set_id(int value) { }
	// RVA: 0x68C8A0 Offset: 0x68B0A0 VA: 0x18068C8A0
	internal void .ctor(int instanceID = -1) { }
}

// Namespace: UnityEngine
[Serializable]
public sealed class GUISettings // TypeDefIndex: 1931
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_DoubleClickSelectsWord; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_TripleClickSelectsLine; // 0x11
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Color m_CursorColor; // 0x14
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_CursorFlashSpeed; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Color m_SelectionColor; // 0x28

	// Properties
	public bool doubleClickSelectsWord { get; }
	public bool tripleClickSelectsLine { get; }
	public Color cursorColor { get; }
	public float cursorFlashSpeed { get; }
	public Color selectionColor { get; }

	// Methods
	// RVA: 0x5FB240 Offset: 0x5F9A40 VA: 0x1805FB240
	private static float Internal_GetCursorFlashSpeed() { }
	// RVA: 0x5FB290 Offset: 0x5F9A90 VA: 0x1805FB290
	public bool get_doubleClickSelectsWord() { }
	// RVA: 0x5FB2A0 Offset: 0x5F9AA0 VA: 0x1805FB2A0
	public bool get_tripleClickSelectsLine() { }
	// RVA: 0x5FB2B0 Offset: 0x5F9AB0 VA: 0x1805FB2B0
	public Color get_cursorColor() { }
	// RVA: 0x5FB2C0 Offset: 0x5F9AC0 VA: 0x1805FB2C0
	public float get_cursorFlashSpeed() { }
	// RVA: 0x5FB320 Offset: 0x5F9B20 VA: 0x1805FB320
	public Color get_selectionColor() { }
	// RVA: 0x5FB330 Offset: 0x5F9B30 VA: 0x1805FB330
	public void .ctor() { }
}

// Namespace: UnityEngine
[ExecuteInEditMode] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public sealed class GUISkin : ScriptableObject // TypeDefIndex: 1932
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Font m_Font; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_box; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_button; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_toggle; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_label; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_textField; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_textArea; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_window; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_horizontalSlider; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_horizontalSliderThumb; // 0x60
	private GUIStyle m_horizontalSliderThumbExtent; // 0x68
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_verticalSlider; // 0x70
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_verticalSliderThumb; // 0x78
	private GUIStyle m_verticalSliderThumbExtent; // 0x80
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_horizontalScrollbar; // 0x88
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_horizontalScrollbarThumb; // 0x90
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_horizontalScrollbarLeftButton; // 0x98
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_horizontalScrollbarRightButton; // 0xA0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_verticalScrollbar; // 0xA8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_verticalScrollbarThumb; // 0xB0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_verticalScrollbarUpButton; // 0xB8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_verticalScrollbarDownButton; // 0xC0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUIStyle m_ScrollView; // 0xC8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal GUIStyle[] m_CustomStyles; // 0xD0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GUISettings m_Settings; // 0xD8
	internal static GUIStyle ms_Error; // 0x0
	private Dictionary<string, GUIStyle> m_Styles; // 0xE0
	internal static GUISkin.SkinChangedDelegate m_SkinChanged; // 0x8
	internal static GUISkin current; // 0x10

	// Properties
	public Font font { get; set; }
	public GUIStyle box { get; set; }
	public GUIStyle label { get; set; }
	public GUIStyle textField { get; set; }
	public GUIStyle textArea { get; set; }
	public GUIStyle button { get; set; }
	public GUIStyle toggle { get; set; }
	public GUIStyle window { get; set; }
	public GUIStyle horizontalSlider { get; set; }
	public GUIStyle horizontalSliderThumb { get; set; }
	internal GUIStyle horizontalSliderThumbExtent { get; set; }
	public GUIStyle verticalSlider { get; set; }
	public GUIStyle verticalSliderThumb { get; set; }
	internal GUIStyle verticalSliderThumbExtent { get; set; }
	public GUIStyle horizontalScrollbar { get; set; }
	public GUIStyle horizontalScrollbarThumb { get; set; }
	public GUIStyle horizontalScrollbarLeftButton { get; set; }
	public GUIStyle horizontalScrollbarRightButton { get; set; }
	public GUIStyle verticalScrollbar { get; set; }
	public GUIStyle verticalScrollbarThumb { get; set; }
	public GUIStyle verticalScrollbarUpButton { get; set; }
	public GUIStyle verticalScrollbarDownButton { get; set; }
	public GUIStyle scrollView { get; set; }
	public GUIStyle[] customStyles { get; set; }
	public GUISettings settings { get; }
	internal static GUIStyle error { get; }

	// Methods
	// RVA: 0x5FB360 Offset: 0x5F9B60 VA: 0x1805FB360
	public void .ctor() { }
	// RVA: 0x5FB430 Offset: 0x5F9C30 VA: 0x1805FB430
	internal void OnEnable() { }
	// RVA: 0x5FB440 Offset: 0x5F9C40 VA: 0x1805FB440
	internal static void CleanupRoots() { }
	// RVA: 0x537AA0 Offset: 0x5362A0 VA: 0x180537AA0
	public Font get_font() { }
	// RVA: 0x5FB4D0 Offset: 0x5F9CD0 VA: 0x1805FB4D0
	public void set_font(Font value) { }
	// RVA: 0x4EAE00 Offset: 0x4E9600 VA: 0x1804EAE00
	public GUIStyle get_box() { }
	// RVA: 0x5FB600 Offset: 0x5F9E00 VA: 0x1805FB600
	public void set_box(GUIStyle value) { }
	// RVA: 0x5FB610 Offset: 0x5F9E10 VA: 0x1805FB610
	public GUIStyle get_label() { }
	// RVA: 0x5FB620 Offset: 0x5F9E20 VA: 0x1805FB620
	public void set_label(GUIStyle value) { }
	// RVA: 0x5F3F90 Offset: 0x5F2790 VA: 0x1805F3F90
	public GUIStyle get_textField() { }
	// RVA: 0x5FB630 Offset: 0x5F9E30 VA: 0x1805FB630
	public void set_textField(GUIStyle value) { }
	// RVA: 0x5FB640 Offset: 0x5F9E40 VA: 0x1805FB640
	public GUIStyle get_textArea() { }
	// RVA: 0x5FB650 Offset: 0x5F9E50 VA: 0x1805FB650
	public void set_textArea(GUIStyle value) { }
	// RVA: 0x537AD0 Offset: 0x5362D0 VA: 0x180537AD0
	public GUIStyle get_button() { }
	// RVA: 0x5FB660 Offset: 0x5F9E60 VA: 0x1805FB660
	public void set_button(GUIStyle value) { }
	// RVA: 0x4EAE20 Offset: 0x4E9620 VA: 0x1804EAE20
	public GUIStyle get_toggle() { }
	// RVA: 0x5FB670 Offset: 0x5F9E70 VA: 0x1805FB670
	public void set_toggle(GUIStyle value) { }
	// RVA: 0x5FB680 Offset: 0x5F9E80 VA: 0x1805FB680
	public GUIStyle get_window() { }
	// RVA: 0x5FB690 Offset: 0x5F9E90 VA: 0x1805FB690
	public void set_window(GUIStyle value) { }
	// RVA: 0x5FB6A0 Offset: 0x5F9EA0 VA: 0x1805FB6A0
	public GUIStyle get_horizontalSlider() { }
	// RVA: 0x5FB6B0 Offset: 0x5F9EB0 VA: 0x1805FB6B0
	public void set_horizontalSlider(GUIStyle value) { }
	// RVA: 0x5FB6C0 Offset: 0x5F9EC0 VA: 0x1805FB6C0
	public GUIStyle get_horizontalSliderThumb() { }
	// RVA: 0x5FB6D0 Offset: 0x5F9ED0 VA: 0x1805FB6D0
	public void set_horizontalSliderThumb(GUIStyle value) { }
	// RVA: 0x5FB6E0 Offset: 0x5F9EE0 VA: 0x1805FB6E0
	internal GUIStyle get_horizontalSliderThumbExtent() { }
	// RVA: 0x5FB6F0 Offset: 0x5F9EF0 VA: 0x1805FB6F0
	internal void set_horizontalSliderThumbExtent(GUIStyle value) { }
	// RVA: 0x5FB700 Offset: 0x5F9F00 VA: 0x1805FB700
	public GUIStyle get_verticalSlider() { }
	// RVA: 0x5FB710 Offset: 0x5F9F10 VA: 0x1805FB710
	public void set_verticalSlider(GUIStyle value) { }
	// RVA: 0x5FB720 Offset: 0x5F9F20 VA: 0x1805FB720
	public GUIStyle get_verticalSliderThumb() { }
	// RVA: 0x5FB730 Offset: 0x5F9F30 VA: 0x1805FB730
	public void set_verticalSliderThumb(GUIStyle value) { }
	// RVA: 0x5FB740 Offset: 0x5F9F40 VA: 0x1805FB740
	internal GUIStyle get_verticalSliderThumbExtent() { }
	// RVA: 0x5FB750 Offset: 0x5F9F50 VA: 0x1805FB750
	internal void set_verticalSliderThumbExtent(GUIStyle value) { }
	// RVA: 0x5FB760 Offset: 0x5F9F60 VA: 0x1805FB760
	public GUIStyle get_horizontalScrollbar() { }
	// RVA: 0x5FB770 Offset: 0x5F9F70 VA: 0x1805FB770
	public void set_horizontalScrollbar(GUIStyle value) { }
	// RVA: 0x5FB780 Offset: 0x5F9F80 VA: 0x1805FB780
	public GUIStyle get_horizontalScrollbarThumb() { }
	// RVA: 0x5FB790 Offset: 0x5F9F90 VA: 0x1805FB790
	public void set_horizontalScrollbarThumb(GUIStyle value) { }
	// RVA: 0x5FB7A0 Offset: 0x5F9FA0 VA: 0x1805FB7A0
	public GUIStyle get_horizontalScrollbarLeftButton() { }
	// RVA: 0x5FB7B0 Offset: 0x5F9FB0 VA: 0x1805FB7B0
	public void set_horizontalScrollbarLeftButton(GUIStyle value) { }
	// RVA: 0x5FB7C0 Offset: 0x5F9FC0 VA: 0x1805FB7C0
	public GUIStyle get_horizontalScrollbarRightButton() { }
	// RVA: 0x5FB7D0 Offset: 0x5F9FD0 VA: 0x1805FB7D0
	public void set_horizontalScrollbarRightButton(GUIStyle value) { }
	// RVA: 0x5FB7E0 Offset: 0x5F9FE0 VA: 0x1805FB7E0
	public GUIStyle get_verticalScrollbar() { }
	// RVA: 0x5FB7F0 Offset: 0x5F9FF0 VA: 0x1805FB7F0
	public void set_verticalScrollbar(GUIStyle value) { }
	// RVA: 0x5FB800 Offset: 0x5FA000 VA: 0x1805FB800
	public GUIStyle get_verticalScrollbarThumb() { }
	// RVA: 0x5FB810 Offset: 0x5FA010 VA: 0x1805FB810
	public void set_verticalScrollbarThumb(GUIStyle value) { }
	// RVA: 0x5FB820 Offset: 0x5FA020 VA: 0x1805FB820
	public GUIStyle get_verticalScrollbarUpButton() { }
	// RVA: 0x5FB830 Offset: 0x5FA030 VA: 0x1805FB830
	public void set_verticalScrollbarUpButton(GUIStyle value) { }
	// RVA: 0x5FB840 Offset: 0x5FA040 VA: 0x1805FB840
	public GUIStyle get_verticalScrollbarDownButton() { }
	// RVA: 0x5FB850 Offset: 0x5FA050 VA: 0x1805FB850
	public void set_verticalScrollbarDownButton(GUIStyle value) { }
	// RVA: 0x5FB860 Offset: 0x5FA060 VA: 0x1805FB860
	public GUIStyle get_scrollView() { }
	// RVA: 0x5FB870 Offset: 0x5FA070 VA: 0x1805FB870
	public void set_scrollView(GUIStyle value) { }
	// RVA: 0x5FB880 Offset: 0x5FA080 VA: 0x1805FB880
	public GUIStyle[] get_customStyles() { }
	// RVA: 0x5FB890 Offset: 0x5FA090 VA: 0x1805FB890
	public void set_customStyles(GUIStyle[] value) { }
	// RVA: 0x5FB8A0 Offset: 0x5FA0A0 VA: 0x1805FB8A0
	public GUISettings get_settings() { }
	// RVA: 0x5FB8B0 Offset: 0x5FA0B0 VA: 0x1805FB8B0
	internal static GUIStyle get_error() { }
	// RVA: 0x5FB990 Offset: 0x5FA190 VA: 0x1805FB990
	internal void Apply() { }
	// RVA: 0x5FBA40 Offset: 0x5FA240 VA: 0x1805FBA40
	private void BuildStyleCache() { }
	// RVA: 0x5FCF20 Offset: 0x5FB720 VA: 0x1805FCF20
	public GUIStyle GetStyle(string styleName) { }
	// RVA: 0x5FD390 Offset: 0x5FBB90 VA: 0x1805FD390
	public GUIStyle FindStyle(string styleName) { }
	// RVA: 0x5FD4A0 Offset: 0x5FBCA0 VA: 0x1805FD4A0
	internal void MakeCurrent() { }
	// RVA: 0x5FD5A0 Offset: 0x5FBDA0 VA: 0x1805FD5A0
	public IEnumerator GetEnumerator() { }
}

// Namespace: 
internal sealed class GUISkin.SkinChangedDelegate : MulticastDelegate // TypeDefIndex: 1933
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
internal class GUIStateObjects // TypeDefIndex: 1934
{
	// Fields
	private static Dictionary<int, object> s_StateCache; // 0xAC3D9

	// Methods
	// RVA: 0x5FD6A0 Offset: 0x5FBEA0 VA: 0x1805FD6A0
	internal static object GetStateObject(Type t, int controlID) { }
	// RVA: 0x5FD840 Offset: 0x5FC040 VA: 0x1805FD840
	private static void .cctor() { }
}

// Namespace: UnityEngine
[Serializable]
public sealed class GUIStyleState // TypeDefIndex: 1935
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private readonly GUIStyle m_SourceStyle; // 0x18

	// Properties
	set; }

	// Methods
	// RVA: 0x600790 Offset: 0x5FEF90 VA: 0x180600790
	public void set_textColor(Color value) { }
	// RVA: 0x6007F0 Offset: 0x5FEFF0 VA: 0x1806007F0
	private static IntPtr Init() { }
	// RVA: 0x600840 Offset: 0x5FF040 VA: 0x180600840
	private void Cleanup() { }
	// RVA: 0x600890 Offset: 0x5FF090 VA: 0x180600890
	public void .ctor() { }
	// RVA: 0x4F7740 Offset: 0x4F5F40 VA: 0x1804F7740
	private void .ctor(GUIStyle sourceStyle, IntPtr source) { }
	// RVA: 0x6008E0 Offset: 0x5FF0E0 VA: 0x1806008E0
	internal static GUIStyleState GetGUIStyleState(GUIStyle sourceStyle, IntPtr source) { }
	// RVA: 0x600970 Offset: 0x5FF170 VA: 0x180600970 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x600A80 Offset: 0x5FF280 VA: 0x180600A80
	private void set_textColor_Injected(ref Color value) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public sealed class GUIStyle // TypeDefIndex: 1936
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private GUIStyleState m_Normal; // 0x18
	private GUIStyleState m_Hover; // 0x20
	private GUIStyleState m_Active; // 0x28
	private GUIStyleState m_Focused; // 0x30
	private GUIStyleState m_OnNormal; // 0x38
	private GUIStyleState m_OnHover; // 0x40
	private GUIStyleState m_OnActive; // 0x48
	private GUIStyleState m_OnFocused; // 0x50
	private RectOffset m_Border; // 0x58
	private RectOffset m_Padding; // 0x60
	private RectOffset m_Margin; // 0x68
	private RectOffset m_Overflow; // 0x70
	private string m_Name; // 0x78
	internal static bool showKeyboardFocus; // 0x0
	private static GUIStyle s_None; // 0x8

	// Properties
	internal string rawName { get; set; }
	public Font font { get; set; }
	public TextAnchor alignment { set; }
	public Vector2 contentOffset { get; set; }
	public float fixedWidth { get; }
	public float fixedHeight { get; }
	public bool stretchWidth { get; }
	public bool stretchHeight { get; set; }
	public int fontSize { set; }
	public FontStyle fontStyle { set; }
	internal Vector2 Internal_clipOffset { set; }
	public string name { get; set; }
	public GUIStyleState normal { get; }
	public RectOffset margin { get; }
	public RectOffset padding { get; }
	public float lineHeight { get; }
	public static GUIStyle none { get; }

	// Methods
	// RVA: 0x5FD900 Offset: 0x5FC100 VA: 0x1805FD900
	internal string get_rawName() { }
	// RVA: 0x5FD950 Offset: 0x5FC150 VA: 0x1805FD950
	internal void set_rawName(string value) { }
	// RVA: 0x5FD9B0 Offset: 0x5FC1B0 VA: 0x1805FD9B0
	public Font get_font() { }
	// RVA: 0x5FDA00 Offset: 0x5FC200 VA: 0x1805FDA00
	public void set_font(Font value) { }
	// RVA: 0x5FDA60 Offset: 0x5FC260 VA: 0x1805FDA60
	public void set_alignment(TextAnchor value) { }
	// RVA: 0x5FDAC0 Offset: 0x5FC2C0 VA: 0x1805FDAC0
	public Vector2 get_contentOffset() { }
	// RVA: 0x5FDB30 Offset: 0x5FC330 VA: 0x1805FDB30
	public void set_contentOffset(Vector2 value) { }
	// RVA: 0x5FDB90 Offset: 0x5FC390 VA: 0x1805FDB90
	public float get_fixedWidth() { }
	// RVA: 0x5FDBE0 Offset: 0x5FC3E0 VA: 0x1805FDBE0
	public float get_fixedHeight() { }
	// RVA: 0x5FDC30 Offset: 0x5FC430 VA: 0x1805FDC30
	public bool get_stretchWidth() { }
	// RVA: 0x5FDC80 Offset: 0x5FC480 VA: 0x1805FDC80
	public bool get_stretchHeight() { }
	// RVA: 0x5FDCD0 Offset: 0x5FC4D0 VA: 0x1805FDCD0
	public void set_stretchHeight(bool value) { }
	// RVA: 0x5FDD30 Offset: 0x5FC530 VA: 0x1805FDD30
	public void set_fontSize(int value) { }
	// RVA: 0x5FDD90 Offset: 0x5FC590 VA: 0x1805FDD90
	public void set_fontStyle(FontStyle value) { }
	// RVA: 0x5FDDF0 Offset: 0x5FC5F0 VA: 0x1805FDDF0
	internal void set_Internal_clipOffset(Vector2 value) { }
	// RVA: 0x5FDE50 Offset: 0x5FC650 VA: 0x1805FDE50
	private static IntPtr Internal_Create(GUIStyle self) { }
	// RVA: 0x5FDEA0 Offset: 0x5FC6A0 VA: 0x1805FDEA0
	private static IntPtr Internal_Copy(GUIStyle self, GUIStyle other) { }
	// RVA: 0x5FDF00 Offset: 0x5FC700 VA: 0x1805FDF00
	private static void Internal_Destroy(IntPtr self) { }
	// RVA: 0x5FDF50 Offset: 0x5FC750 VA: 0x1805FDF50
	private IntPtr GetStyleStatePtr(int idx) { }
	// RVA: 0x5FDFB0 Offset: 0x5FC7B0 VA: 0x1805FDFB0
	private IntPtr GetRectOffsetPtr(int idx) { }
	// RVA: 0x5FE010 Offset: 0x5FC810 VA: 0x1805FE010
	private static float Internal_GetLineHeight(IntPtr target) { }
	// RVA: 0x5FE060 Offset: 0x5FC860 VA: 0x1805FE060
	private void Internal_Draw(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }
	// RVA: 0x5FE110 Offset: 0x5FC910 VA: 0x1805FE110
	private void Internal_Draw2(Rect position, GUIContent content, int controlID, bool on) { }
	// RVA: 0x5FE1A0 Offset: 0x5FC9A0 VA: 0x1805FE1A0
	private void Internal_DrawCursor(Rect position, GUIContent content, int pos, Color cursorColor) { }
	// RVA: 0x5FE230 Offset: 0x5FCA30 VA: 0x1805FE230
	private void Internal_DrawWithTextSelection(Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, Color cursorColor, Color selectionColor) { }
	// RVA: 0x5FE320 Offset: 0x5FCB20 VA: 0x1805FE320
	internal Vector2 Internal_GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex) { }
	// RVA: 0x5FE3C0 Offset: 0x5FCBC0 VA: 0x1805FE3C0
	internal int Internal_GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition) { }
	// RVA: 0x5FE440 Offset: 0x5FCC40 VA: 0x1805FE440
	internal string Internal_GetSelectedRenderedText(Rect localPosition, GUIContent mContent, int selectIndex, int cursorIndex) { }
	// RVA: 0x5FE4D0 Offset: 0x5FCCD0 VA: 0x1805FE4D0
	internal Vector2 Internal_CalcSize(GUIContent content) { }
	// RVA: 0x5FE550 Offset: 0x5FCD50 VA: 0x1805FE550
	private float Internal_CalcHeight(GUIContent content, float width) { }
	// RVA: 0x5FE5C0 Offset: 0x5FCDC0 VA: 0x1805FE5C0
	internal static void SetMouseTooltip(string tooltip, Rect screenRect) { }
	// RVA: 0x5FE6A0 Offset: 0x5FCEA0 VA: 0x1805FE6A0
	private static float Internal_GetCursorFlashOffset() { }
	// RVA: 0x5FE6F0 Offset: 0x5FCEF0 VA: 0x1805FE6F0
	internal static void SetDefaultFont(Font font) { }
	// RVA: 0x5FE740 Offset: 0x5FCF40 VA: 0x1805FE740
	public void .ctor() { }
	// RVA: 0x5FE810 Offset: 0x5FD010 VA: 0x1805FE810
	public void .ctor(GUIStyle other) { }
	// RVA: 0x5FE930 Offset: 0x5FD130 VA: 0x1805FE930 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x5FEA60 Offset: 0x5FD260 VA: 0x1805FEA60
	public string get_name() { }
	// RVA: 0x5FEAC0 Offset: 0x5FD2C0 VA: 0x1805FEAC0
	public void set_name(string value) { }
	// RVA: 0x5FEB30 Offset: 0x5FD330 VA: 0x1805FEB30
	public GUIStyleState get_normal() { }
	// RVA: 0x5FEC10 Offset: 0x5FD410 VA: 0x1805FEC10
	public RectOffset get_margin() { }
	// RVA: 0x5FECF0 Offset: 0x5FD4F0 VA: 0x1805FECF0
	public RectOffset get_padding() { }
	// RVA: 0x5FEDD0 Offset: 0x5FD5D0 VA: 0x1805FEDD0
	public float get_lineHeight() { }
	// RVA: 0x5FEED0 Offset: 0x5FD6D0 VA: 0x1805FEED0
	public void Draw(Rect position, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }
	// RVA: 0x5FEF80 Offset: 0x5FD780 VA: 0x1805FEF80
	public void Draw(Rect position, GUIContent content, int controlID, bool on) { }
	// RVA: 0x5FEFC0 Offset: 0x5FD7C0 VA: 0x1805FEFC0
	public void Draw(Rect position, GUIContent content, int controlID, bool on, bool hover) { }
	// RVA: 0x5FF160 Offset: 0x5FD960 VA: 0x1805FF160
	private void Draw(Rect position, GUIContent content, int controlId, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }
	// RVA: 0x5FF280 Offset: 0x5FDA80 VA: 0x1805FF280
	public void DrawCursor(Rect position, GUIContent content, int controlID, int character) { }
	// RVA: 0x5FF600 Offset: 0x5FDE00 VA: 0x1805FF600
	internal void DrawWithTextSelection(Rect position, GUIContent content, bool isActive, bool hasKeyboardFocus, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition, Color selectionColor) { }
	// RVA: 0x5FFA20 Offset: 0x5FE220 VA: 0x1805FFA20
	internal void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter, bool drawSelectionAsComposition) { }
	// RVA: 0x5FFC40 Offset: 0x5FE440 VA: 0x1805FFC40
	public void DrawWithTextSelection(Rect position, GUIContent content, int controlID, int firstSelectedCharacter, int lastSelectedCharacter) { }
	// RVA: 0x5FFC80 Offset: 0x5FE480 VA: 0x1805FFC80
	public static GUIStyle op_Implicit(string str) { }
	// RVA: 0x5FFDA0 Offset: 0x5FE5A0 VA: 0x1805FFDA0
	public static GUIStyle get_none() { }
	// RVA: 0x5FFE80 Offset: 0x5FE680 VA: 0x1805FFE80
	public Vector2 GetCursorPixelPosition(Rect position, GUIContent content, int cursorStringIndex) { }
	// RVA: 0x5FFF20 Offset: 0x5FE720 VA: 0x1805FFF20
	public int GetCursorStringIndex(Rect position, GUIContent content, Vector2 cursorPixelPosition) { }
	// RVA: 0x5FE4D0 Offset: 0x5FCCD0 VA: 0x1805FE4D0
	public Vector2 CalcSize(GUIContent content) { }
	// RVA: 0x5FE550 Offset: 0x5FCD50 VA: 0x1805FE550
	public float CalcHeight(GUIContent content, float width) { }
	// RVA: 0x5FFFA0 Offset: 0x5FE7A0 VA: 0x1805FFFA0 Slot: 3
	public override string ToString() { }
	// RVA: 0x6000E0 Offset: 0x5FE8E0 VA: 0x1806000E0
	private static void .cctor() { }
	// RVA: 0x600160 Offset: 0x5FE960 VA: 0x180600160
	private void get_contentOffset_Injected(out Vector2 ret) { }
	// RVA: 0x6001C0 Offset: 0x5FE9C0 VA: 0x1806001C0
	private void set_contentOffset_Injected(ref Vector2 value) { }
	// RVA: 0x600220 Offset: 0x5FEA20 VA: 0x180600220
	private void set_Internal_clipOffset_Injected(ref Vector2 value) { }
	// RVA: 0x600280 Offset: 0x5FEA80 VA: 0x180600280
	private void Internal_Draw_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus) { }
	// RVA: 0x600330 Offset: 0x5FEB30 VA: 0x180600330
	private void Internal_Draw2_Injected(ref Rect position, GUIContent content, int controlID, bool on) { }
	// RVA: 0x6003C0 Offset: 0x5FEBC0 VA: 0x1806003C0
	private void Internal_DrawCursor_Injected(ref Rect position, GUIContent content, int pos, ref Color cursorColor) { }
	// RVA: 0x600450 Offset: 0x5FEC50 VA: 0x180600450
	private void Internal_DrawWithTextSelection_Injected(ref Rect screenRect, GUIContent content, bool isHover, bool isActive, bool on, bool hasKeyboardFocus, bool drawSelectionAsComposition, int cursorFirst, int cursorLast, ref Color cursorColor, ref Color selectionColor) { }
	// RVA: 0x600520 Offset: 0x5FED20 VA: 0x180600520
	private void Internal_GetCursorPixelPosition_Injected(ref Rect position, GUIContent content, int cursorStringIndex, out Vector2 ret) { }
	// RVA: 0x6005B0 Offset: 0x5FEDB0 VA: 0x1806005B0
	private int Internal_GetCursorStringIndex_Injected(ref Rect position, GUIContent content, ref Vector2 cursorPixelPosition) { }
	// RVA: 0x600630 Offset: 0x5FEE30 VA: 0x180600630
	private string Internal_GetSelectedRenderedText_Injected(ref Rect localPosition, GUIContent mContent, int selectIndex, int cursorIndex) { }
	// RVA: 0x6006C0 Offset: 0x5FEEC0 VA: 0x1806006C0
	private void Internal_CalcSize_Injected(GUIContent content, out Vector2 ret) { }
	// RVA: 0x600730 Offset: 0x5FEF30 VA: 0x180600730
	private static void SetMouseTooltip_Injected(string tooltip, ref Rect screenRect) { }
}

// Namespace: UnityEngine
[AttributeUsageAttribute] // RVA: 0xD9A10 Offset: 0xD8E10 VA: 0x1800D9A10
public class GUITargetAttribute : Attribute // TypeDefIndex: 1937
{
	// Fields
	internal int displayMask; // 0x10

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x600AE0 Offset: 0x5FF2E0 VA: 0x180600AE0
	private static int GetGUITargetAttrValue(Type klass, string methodName) { }
}

// Namespace: UnityEngine
public class GUIUtility // TypeDefIndex: 1938
{
	// Fields
	internal static int s_SkinMode; // 0x0
	internal static int s_OriginalID; // 0x4
	internal static Action takeCapture; // 0x8
	internal static Action releaseCapture; // 0x10
	internal static Func<int, IntPtr, bool> processEvent; // 0x18
	internal static Func<Exception, bool> endContainerGUIFromException; // 0x20
	internal static Action guiChanged; // 0x28
	private static bool <guiIsExiting>k__BackingField; // 0x30
	internal static Func<bool> s_HasCurrentWindowKeyFocusFunc; // 0x38

	// Properties
	internal static float pixelsPerPoint { get; }
	internal static int guiDepth { get; }
	internal static bool textFieldInput { set; }
	public static string systemCopyBuffer { get; set; }
	internal static string compositionString { get; }
	internal static Vector2 compositionCursorPos { set; }
	internal static bool guiIsExiting { set; }
	public static int hotControl { get; set; }
	public static int keyboardControl { get; set; }

	// Methods
	// RVA: 0x600CA0 Offset: 0x5FF4A0 VA: 0x180600CA0
	internal static float get_pixelsPerPoint() { }
	// RVA: 0x600CF0 Offset: 0x5FF4F0 VA: 0x180600CF0
	internal static int get_guiDepth() { }
	// RVA: 0x600D40 Offset: 0x5FF540 VA: 0x180600D40
	internal static void set_textFieldInput(bool value) { }
	// RVA: 0x1B1740 Offset: 0x1AFF40 VA: 0x1801B1740
	public static string get_systemCopyBuffer() { }
	// RVA: 0x1B1790 Offset: 0x1AFF90 VA: 0x1801B1790
	public static void set_systemCopyBuffer(string value) { }
	// RVA: 0x600D90 Offset: 0x5FF590 VA: 0x180600D90
	public static int GetControlID(int hint, FocusType focusType, Rect rect) { }
	// RVA: 0x600E00 Offset: 0x5FF600 VA: 0x180600E00
	public static Rect AlignRectToDevice(Rect rect, out int widthInPixels, out int heightInPixels) { }
	// RVA: 0x600E90 Offset: 0x5FF690 VA: 0x180600E90
	internal static string get_compositionString() { }
	// RVA: 0x600EE0 Offset: 0x5FF6E0 VA: 0x180600EE0
	internal static void set_compositionCursorPos(Vector2 value) { }
	// RVA: 0x600F30 Offset: 0x5FF730 VA: 0x180600F30
	private static int Internal_GetHotControl() { }
	// RVA: 0x600F80 Offset: 0x5FF780 VA: 0x180600F80
	private static int Internal_GetKeyboardControl() { }
	// RVA: 0x600FD0 Offset: 0x5FF7D0 VA: 0x180600FD0
	private static void Internal_SetHotControl(int value) { }
	// RVA: 0x601020 Offset: 0x5FF820 VA: 0x180601020
	private static void Internal_SetKeyboardControl(int value) { }
	// RVA: 0x601070 Offset: 0x5FF870 VA: 0x180601070
	private static object Internal_GetDefaultSkin(int skinMode) { }
	// RVA: 0x6010C0 Offset: 0x5FF8C0 VA: 0x1806010C0
	private static void Internal_ExitGUI() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x601110 Offset: 0x5FF910 VA: 0x180601110
	private static void MarkGUIChanged() { }
	// RVA: 0x6011A0 Offset: 0x5FF9A0 VA: 0x1806011A0
	public static int GetControlID(FocusType focus, Rect position) { }
	// RVA: 0x601200 Offset: 0x5FFA00 VA: 0x180601200
	public static int GetControlID(int hint, FocusType focus) { }
	// RVA: 0x601270 Offset: 0x5FFA70 VA: 0x180601270
	public static object GetStateObject(Type t, int controlID) { }
	// RVA: 0x601310 Offset: 0x5FFB10 VA: 0x180601310
	internal static void set_guiIsExiting(bool value) { }
	// RVA: 0x600F30 Offset: 0x5FF730 VA: 0x180600F30
	public static int get_hotControl() { }
	// RVA: 0x600FD0 Offset: 0x5FF7D0 VA: 0x180600FD0
	public static void set_hotControl(int value) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x601390 Offset: 0x5FFB90 VA: 0x180601390
	internal static void TakeCapture() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x601420 Offset: 0x5FFC20 VA: 0x180601420
	internal static void RemoveCapture() { }
	// RVA: 0x600F80 Offset: 0x5FF780 VA: 0x180600F80
	public static int get_keyboardControl() { }
	// RVA: 0x601020 Offset: 0x5FF820 VA: 0x180601020
	public static void set_keyboardControl(int value) { }
	// RVA: 0x6014B0 Offset: 0x5FFCB0 VA: 0x1806014B0
	internal static bool HasKeyFocus(int controlID) { }
	// RVA: 0x601590 Offset: 0x5FFD90 VA: 0x180601590
	internal static GUISkin GetDefaultSkin() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x601670 Offset: 0x5FFE70 VA: 0x180601670
	internal static void ProcessEvent(int instanceID, IntPtr nativeEventPtr, out bool result) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x601720 Offset: 0x5FFF20 VA: 0x180601720
	internal static void BeginGUI(int skinMode, int instanceID, int useGUILayout) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x601800 Offset: 0x600000 VA: 0x180601800
	internal static void EndGUI(int layoutType) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x601B90 Offset: 0x600390 VA: 0x180601B90
	internal static bool EndGUIFromException(Exception exception) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x601C90 Offset: 0x600490 VA: 0x180601C90
	internal static bool EndContainerGUIFromException(Exception exception) { }
	// RVA: 0x601D30 Offset: 0x600530 VA: 0x180601D30
	internal static void ResetGlobalState() { }
	// RVA: 0x601F10 Offset: 0x600710 VA: 0x180601F10
	internal static bool IsExitGUIException(Exception exception) { }
	// RVA: 0x601F10 Offset: 0x600710 VA: 0x180601F10
	internal static bool ShouldRethrowException(Exception exception) { }
	// RVA: 0x601FD0 Offset: 0x6007D0 VA: 0x180601FD0
	internal static void CheckOnGUI() { }
	// RVA: 0x6020B0 Offset: 0x6008B0 VA: 0x1806020B0
	public static Rect AlignRectToDevice(Rect rect) { }
	// RVA: 0x602140 Offset: 0x600940 VA: 0x180602140
	internal static bool HitTest(Rect rect, Vector2 point, int offset) { }
	// RVA: 0x6021A0 Offset: 0x6009A0 VA: 0x1806021A0
	internal static bool HitTest(Rect rect, Vector2 point, bool isDirectManipulationDevice) { }
	// RVA: 0x602220 Offset: 0x600A20 VA: 0x180602220
	internal static bool HitTest(Rect rect, Event evt) { }
	// RVA: 0x6023B0 Offset: 0x600BB0 VA: 0x1806023B0
	private static int GetControlID_Injected(int hint, FocusType focusType, ref Rect rect) { }
	// RVA: 0x602420 Offset: 0x600C20 VA: 0x180602420
	private static void AlignRectToDevice_Injected(ref Rect rect, out int widthInPixels, out int heightInPixels, out Rect ret) { }
	// RVA: 0x6024A0 Offset: 0x600CA0 VA: 0x1806024A0
	private static void set_compositionCursorPos_Injected(ref Vector2 value) { }
}

// Namespace: UnityEngine
public sealed class ExitGUIException : Exception // TypeDefIndex: 1939
{}

// Namespace: UnityEngine
internal class GUILayoutEntry // TypeDefIndex: 1940
{
	// Fields
	public float minWidth; // 0x10
	public float maxWidth; // 0x14
	public float minHeight; // 0x18
	public float maxHeight; // 0x1C
	public Rect rect; // 0x20
	public int stretchWidth; // 0x30
	public int stretchHeight; // 0x34
	public bool consideredForMargin; // 0x38
	private GUIStyle m_Style; // 0x40
	internal static Rect kDummyRect; // 0x0
	protected static int indent; // 0x10

	// Properties
	public GUIStyle style { get; set; }
	public virtual int marginLeft { get; }
	public virtual int marginRight { get; }
	public virtual int marginTop { get; }
	public virtual int marginBottom { get; }
	public int marginHorizontal { get; }
	public int marginVertical { get; }

	// Methods
	// RVA: 0x5F3F90 Offset: 0x5F2790 VA: 0x1805F3F90
	public GUIStyle get_style() { }
	// RVA: 0x5F3FA0 Offset: 0x5F27A0 VA: 0x1805F3FA0
	public void set_style(GUIStyle value) { }
	// RVA: 0x5F3FC0 Offset: 0x5F27C0 VA: 0x1805F3FC0 Slot: 4
	public virtual int get_marginLeft() { }
	// RVA: 0x5F4030 Offset: 0x5F2830 VA: 0x1805F4030 Slot: 5
	public virtual int get_marginRight() { }
	// RVA: 0x5F40A0 Offset: 0x5F28A0 VA: 0x1805F40A0 Slot: 6
	public virtual int get_marginTop() { }
	// RVA: 0x5F4110 Offset: 0x5F2910 VA: 0x1805F4110 Slot: 7
	public virtual int get_marginBottom() { }
	// RVA: 0x5F4180 Offset: 0x5F2980 VA: 0x1805F4180
	public int get_marginHorizontal() { }
	// RVA: 0x5F41C0 Offset: 0x5F29C0 VA: 0x1805F41C0
	public int get_marginVertical() { }
	// RVA: 0x5F4200 Offset: 0x5F2A00 VA: 0x1805F4200
	public void .ctor(float _minWidth, float _maxWidth, float _minHeight, float _maxHeight, GUIStyle _style) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 8
	public virtual void CalcWidth() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 9
	public virtual void CalcHeight() { }
	// RVA: 0x5F4340 Offset: 0x5F2B40 VA: 0x1805F4340 Slot: 10
	public virtual void SetHorizontal(float x, float width) { }
	// RVA: 0x5F4350 Offset: 0x5F2B50 VA: 0x1805F4350 Slot: 11
	public virtual void SetVertical(float y, float height) { }
	// RVA: 0x5F4360 Offset: 0x5F2B60 VA: 0x1805F4360 Slot: 12
	protected virtual void ApplyStyleSettings(GUIStyle style) { }
	// RVA: 0x5F44F0 Offset: 0x5F2CF0 VA: 0x1805F44F0 Slot: 13
	public virtual void ApplyOptions(GUILayoutOption[] options) { }
	// RVA: 0x5F48B0 Offset: 0x5F30B0 VA: 0x1805F48B0 Slot: 3
	public override string ToString() { }
	// RVA: 0x5F5C30 Offset: 0x5F4430 VA: 0x1805F5C30
	private static void .cctor() { }
}

// Namespace: UnityEngine
internal class GUILayoutGroup : GUILayoutEntry // TypeDefIndex: 1941
{
	// Fields
	public List<GUILayoutEntry> entries; // 0x48
	public bool isVertical; // 0x50
	public bool resetCoords; // 0x51
	public float spacing; // 0x54
	public bool sameSize; // 0x58
	public bool isWindow; // 0x59
	public int windowID; // 0x5C
	private int m_Cursor; // 0x60
	protected int m_StretchableCountX; // 0x64
	protected int m_StretchableCountY; // 0x68
	protected bool m_UserSpecifiedWidth; // 0x6C
	protected bool m_UserSpecifiedHeight; // 0x6D
	protected float m_ChildMinWidth; // 0x70
	protected float m_ChildMaxWidth; // 0x74
	protected float m_ChildMinHeight; // 0x78
	protected float m_ChildMaxHeight; // 0x7C
	protected int m_MarginLeft; // 0x80
	protected int m_MarginRight; // 0x84
	protected int m_MarginTop; // 0x88
	protected int m_MarginBottom; // 0x8C
	private static readonly GUILayoutEntry none; // 0x0

	// Properties
	public override int marginLeft { get; }
	public override int marginRight { get; }
	public override int marginTop { get; }
	public override int marginBottom { get; }

	// Methods
	// RVA: 0x3542B0 Offset: 0x352AB0 VA: 0x1803542B0 Slot: 4
	public override int get_marginLeft() { }
	// RVA: 0x5F5CC0 Offset: 0x5F44C0 VA: 0x1805F5CC0 Slot: 5
	public override int get_marginRight() { }
	// RVA: 0x5F5CD0 Offset: 0x5F44D0 VA: 0x1805F5CD0 Slot: 6
	public override int get_marginTop() { }
	// RVA: 0x5F5CE0 Offset: 0x5F44E0 VA: 0x1805F5CE0 Slot: 7
	public override int get_marginBottom() { }
	// RVA: 0x5F5CF0 Offset: 0x5F44F0 VA: 0x1805F5CF0
	public void .ctor() { }
	// RVA: 0x5F5E40 Offset: 0x5F4640 VA: 0x1805F5E40 Slot: 13
	public override void ApplyOptions(GUILayoutOption[] options) { }
	// RVA: 0x5F5F90 Offset: 0x5F4790 VA: 0x1805F5F90 Slot: 12
	protected override void ApplyStyleSettings(GUIStyle style) { }
	// RVA: 0x5F6260 Offset: 0x5F4A60 VA: 0x1805F6260
	public void ResetCursor() { }
	// RVA: 0x5F6270 Offset: 0x5F4A70 VA: 0x1805F6270 Slot: 8
	public override void CalcWidth() { }
	// RVA: 0x5F6B50 Offset: 0x5F5350 VA: 0x1805F6B50 Slot: 10
	public override void SetHorizontal(float x, float width) { }
	// RVA: 0x5F74C0 Offset: 0x5F5CC0 VA: 0x1805F74C0 Slot: 9
	public override void CalcHeight() { }
	// RVA: 0x5F7C00 Offset: 0x5F6400 VA: 0x1805F7C00 Slot: 11
	public override void SetVertical(float y, float height) { }
	// RVA: 0x5F8520 Offset: 0x5F6D20 VA: 0x1805F8520 Slot: 3
	public override string ToString() { }
	// RVA: 0x5F8C80 Offset: 0x5F7480 VA: 0x1805F8C80
	private static void .cctor() { }
}

// Namespace: UnityEngine
internal sealed class GUIScrollGroup : GUILayoutGroup // TypeDefIndex: 1942
{
	// Fields
	public float calcMinWidth; // 0x90
	public float calcMaxWidth; // 0x94
	public float calcMinHeight; // 0x98
	public float calcMaxHeight; // 0x9C
	public float clientWidth; // 0xA0
	public float clientHeight; // 0xA4
	public bool allowHorizontalScroll; // 0xA8
	public bool allowVerticalScroll; // 0xA9
	public bool needsHorizontalScrollbar; // 0xAA
	public bool needsVerticalScrollbar; // 0xAB
	public GUIStyle horizontalScrollbar; // 0xB0
	public GUIStyle verticalScrollbar; // 0xB8

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5FAA80 Offset: 0x5F9280 VA: 0x1805FAA80
	public void .ctor() { }
	// RVA: 0x5FAB20 Offset: 0x5F9320 VA: 0x1805FAB20 Slot: 8
	public override void CalcWidth() { }
	// RVA: 0x5FABC0 Offset: 0x5F93C0 VA: 0x1805FABC0 Slot: 10
	public override void SetHorizontal(float x, float width) { }
	// RVA: 0x5FAD70 Offset: 0x5F9570 VA: 0x1805FAD70 Slot: 9
	public override void CalcHeight() { }
	// RVA: 0x5FAF20 Offset: 0x5F9720 VA: 0x1805FAF20 Slot: 11
	public override void SetVertical(float y, float height) { }
}

// Namespace: UnityEngine
internal class ScrollViewState // TypeDefIndex: 1943
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
internal class SliderState // TypeDefIndex: 1944
{
	// Fields
	public float dragStartPos; // 0x10
	public float dragStartValue; // 0x14
	public bool isDragging; // 0x18

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
internal struct SliderHandler // TypeDefIndex: 1945
{
	// Fields
	private readonly Rect position; // 0x0
	private readonly float currentValue; // 0x10
	private readonly float size; // 0x14
	private readonly float start; // 0x18
	private readonly float end; // 0x1C
	private readonly GUIStyle slider; // 0x20
	private readonly GUIStyle thumb; // 0x28
	private readonly GUIStyle thumbExtent; // 0x30
	private readonly bool horiz; // 0x38
	private readonly int id; // 0x3C

	// Methods
	// RVA: 0x22390 Offset: 0x21790 VA: 0x180022390
	public void .ctor(Rect position, float currentValue, float size, float start, float end, GUIStyle slider, GUIStyle thumb, bool horiz, int id, GUIStyle thumbExtent) { }
	// RVA: 0x223F0 Offset: 0x217F0 VA: 0x1800223F0
	public float Handle() { }
	// RVA: 0x22400 Offset: 0x21800 VA: 0x180022400
	private float OnMouseDown() { }
	// RVA: 0x22410 Offset: 0x21810 VA: 0x180022410
	private float OnMouseDrag() { }
	// RVA: 0x22420 Offset: 0x21820 VA: 0x180022420
	private float OnMouseUp() { }
	// RVA: 0x22430 Offset: 0x21830 VA: 0x180022430
	private float OnRepaint() { }
	// RVA: 0x22440 Offset: 0x21840 VA: 0x180022440
	private EventType CurrentEventType() { }
	// RVA: 0x22450 Offset: 0x21850 VA: 0x180022450
	private int CurrentScrollTroughSide() { }
	// RVA: 0x22460 Offset: 0x21860 VA: 0x180022460
	private bool IsEmptySlider() { }
	// RVA: 0x22480 Offset: 0x21880 VA: 0x180022480
	private bool SupportsPageMovements() { }
	// RVA: 0x22490 Offset: 0x21890 VA: 0x180022490
	private float PageMovementValue() { }
	// RVA: 0x224A0 Offset: 0x218A0 VA: 0x1800224A0
	private float PageUpMovementBound() { }
	// RVA: 0x22500 Offset: 0x21900 VA: 0x180022500
	private Event CurrentEvent() { }
	// RVA: 0x22510 Offset: 0x21910 VA: 0x180022510
	private float ValueForCurrentMousePosition() { }
	// RVA: 0x22520 Offset: 0x21920 VA: 0x180022520
	private float Clamp(float value) { }
	// RVA: 0x22530 Offset: 0x21930 VA: 0x180022530
	private Rect ThumbSelectionRect() { }
	// RVA: 0x22580 Offset: 0x21980 VA: 0x180022580
	private void StartDraggingWithValue(float dragStartValue) { }
	// RVA: 0x225E0 Offset: 0x219E0 VA: 0x1800225E0
	private SliderState SliderState() { }
	// RVA: 0x225F0 Offset: 0x219F0 VA: 0x1800225F0
	private Rect ThumbExtRect() { }
	// RVA: 0x22530 Offset: 0x21930 VA: 0x180022530
	private Rect ThumbRect() { }
	// RVA: 0x22610 Offset: 0x21A10 VA: 0x180022610
	private Rect VerticalThumbRect() { }
	// RVA: 0x22630 Offset: 0x21A30 VA: 0x180022630
	private Rect HorizontalThumbRect() { }
	// RVA: 0x22650 Offset: 0x21A50 VA: 0x180022650
	private float ClampedCurrentValue() { }
	// RVA: 0x22660 Offset: 0x21A60 VA: 0x180022660
	private float MousePosition() { }
	// RVA: 0x22670 Offset: 0x21A70 VA: 0x180022670
	private float ValuesPerPixel() { }
	// RVA: 0x22680 Offset: 0x21A80 VA: 0x180022680
	private float ThumbSize() { }
	// RVA: 0x22690 Offset: 0x21A90 VA: 0x180022690
	private float MaxValue() { }
	// RVA: 0x226A0 Offset: 0x21AA0 VA: 0x1800226A0
	private float MinValue() { }
}

// Namespace: UnityEngine
public class TextEditor // TypeDefIndex: 1946
{
	// Fields
	public TouchScreenKeyboard keyboardOnScreen; // 0x10
	public int controlID; // 0x18
	public GUIStyle style; // 0x20
	public bool multiline; // 0x28
	public bool hasHorizontalCursorPos; // 0x29
	public bool isPasswordField; // 0x2A
	internal bool m_HasFocus; // 0x2B
	public Vector2 scrollOffset; // 0x2C
	private GUIContent m_Content; // 0x38
	private Rect m_Position; // 0x40
	private int m_CursorIndex; // 0x50
	private int m_SelectIndex; // 0x54
	private bool m_RevealCursor; // 0x58
	public Vector2 graphicalCursorPos; // 0x5C
	public Vector2 graphicalSelectCursorPos; // 0x64
	private bool m_MouseDragSelectsWholeWords; // 0x6C
	private int m_DblClickInitPos; // 0x70
	private TextEditor.DblClickSnapping m_DblClickSnap; // 0x74
	private bool m_bJustSelected; // 0x75
	private int m_iAltCursorPos; // 0x78
	private string oldText; // 0x80
	private int oldPos; // 0x88
	private int oldSelectPos; // 0x8C
	private static Dictionary<Event, TextEditor.TextEditOp> s_Keyactions; // 0x0

	// Properties
	public string text { get; set; }
	public Rect position { get; set; }
	internal virtual Rect localPosition { get; }
	public int cursorIndex { get; set; }
	public int selectIndex { get; set; }
	public bool hasSelection { get; }

	// Methods
	// RVA: 0x604520 Offset: 0x602D20 VA: 0x180604520
	public string get_text() { }
	// RVA: 0x604540 Offset: 0x602D40 VA: 0x180604540
	public void set_text(string value) { }
	// RVA: 0x604600 Offset: 0x602E00 VA: 0x180604600
	public Rect get_position() { }
	// RVA: 0x604610 Offset: 0x602E10 VA: 0x180604610
	public void set_position(Rect value) { }
	// RVA: 0x604780 Offset: 0x602F80 VA: 0x180604780 Slot: 4
	internal virtual Rect get_localPosition() { }
	// RVA: 0x604790 Offset: 0x602F90 VA: 0x180604790
	public int get_cursorIndex() { }
	// RVA: 0x6047A0 Offset: 0x602FA0 VA: 0x1806047A0
	public void set_cursorIndex(int value) { }
	// RVA: 0x6047F0 Offset: 0x602FF0 VA: 0x1806047F0
	public int get_selectIndex() { }
	// RVA: 0x604800 Offset: 0x603000 VA: 0x180604800
	public void set_selectIndex(int value) { }
	// RVA: 0x604850 Offset: 0x603050 VA: 0x180604850
	private void ClearCursorPos() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x604860 Offset: 0x603060 VA: 0x180604860
	public void .ctor() { }
	// RVA: 0x604990 Offset: 0x603190 VA: 0x180604990
	public void OnFocus() { }
	// RVA: 0x604A40 Offset: 0x603240 VA: 0x180604A40
	public void OnLostFocus() { }
	// RVA: 0x604AF0 Offset: 0x6032F0 VA: 0x180604AF0
	private void GrabGraphicalCursorPos() { }
	// RVA: 0x604C90 Offset: 0x603490 VA: 0x180604C90
	public bool HandleKeyEvent(Event e) { }
	// RVA: 0x604CA0 Offset: 0x6034A0 VA: 0x180604CA0
	internal bool HandleKeyEvent(Event e, bool textIsReadOnly) { }
	// RVA: 0x605000 Offset: 0x603800 VA: 0x180605000
	public bool DeleteLineBack() { }
	// RVA: 0x6050E0 Offset: 0x6038E0 VA: 0x1806050E0
	public bool DeleteWordBack() { }
	// RVA: 0x6051E0 Offset: 0x6039E0 VA: 0x1806051E0
	public bool DeleteWordForward() { }
	// RVA: 0x605260 Offset: 0x603A60 VA: 0x180605260
	public bool Delete() { }
	// RVA: 0x6052F0 Offset: 0x603AF0 VA: 0x1806052F0
	public bool Backspace() { }
	// RVA: 0x605400 Offset: 0x603C00 VA: 0x180605400
	public void SelectAll() { }
	// RVA: 0x6054B0 Offset: 0x603CB0 VA: 0x1806054B0
	public void SelectNone() { }
	// RVA: 0x605510 Offset: 0x603D10 VA: 0x180605510
	public bool get_hasSelection() { }
	// RVA: 0x605520 Offset: 0x603D20 VA: 0x180605520
	public bool DeleteSelection() { }
	// RVA: 0x6056D0 Offset: 0x603ED0 VA: 0x1806056D0
	public void ReplaceSelection(string replace) { }
	// RVA: 0x6057B0 Offset: 0x603FB0 VA: 0x1806057B0
	public void Insert(char c) { }
	// RVA: 0x6057E0 Offset: 0x603FE0 VA: 0x1806057E0
	public void MoveRight() { }
	// RVA: 0x605900 Offset: 0x604100 VA: 0x180605900
	public void MoveLeft() { }
	// RVA: 0x605A10 Offset: 0x604210 VA: 0x180605A10
	public void MoveUp() { }
	// RVA: 0x605BD0 Offset: 0x6043D0 VA: 0x180605BD0
	public void MoveDown() { }
	// RVA: 0x605DD0 Offset: 0x6045D0 VA: 0x180605DD0
	public void MoveLineStart() { }
	// RVA: 0x605EE0 Offset: 0x6046E0 VA: 0x180605EE0
	public void MoveLineEnd() { }
	// RVA: 0x606000 Offset: 0x604800 VA: 0x180606000
	public void MoveGraphicalLineStart() { }
	// RVA: 0x6060B0 Offset: 0x6048B0 VA: 0x1806060B0
	public void MoveGraphicalLineEnd() { }
	// RVA: 0x606160 Offset: 0x604960 VA: 0x180606160
	public void MoveTextStart() { }
	// RVA: 0x6061F0 Offset: 0x6049F0 VA: 0x1806061F0
	public void MoveTextEnd() { }
	// RVA: 0x6062B0 Offset: 0x604AB0 VA: 0x1806062B0
	private int IndexOfEndOfLine(int startIndex) { }
	// RVA: 0x606310 Offset: 0x604B10 VA: 0x180606310
	public void MoveParagraphForward() { }
	// RVA: 0x606450 Offset: 0x604C50 VA: 0x180606450
	public void MoveParagraphBackward() { }
	// RVA: 0x6065A0 Offset: 0x604DA0 VA: 0x1806065A0
	public void MoveCursorToPosition(Vector2 cursorPosition) { }
	// RVA: 0x606640 Offset: 0x604E40 VA: 0x180606640
	protected internal void MoveCursorToPosition_Internal(Vector2 cursorPosition, bool shift) { }
	// RVA: 0x606860 Offset: 0x605060 VA: 0x180606860
	public void SelectToPosition(Vector2 cursorPosition) { }
	// RVA: 0x606F60 Offset: 0x605760 VA: 0x180606F60
	public void SelectLeft() { }
	// RVA: 0x607040 Offset: 0x605840 VA: 0x180607040
	public void SelectRight() { }
	// RVA: 0x607120 Offset: 0x605920 VA: 0x180607120
	public void SelectUp() { }
	// RVA: 0x607240 Offset: 0x605A40 VA: 0x180607240
	public void SelectDown() { }
	// RVA: 0x607380 Offset: 0x605B80 VA: 0x180607380
	public void SelectTextEnd() { }
	// RVA: 0x607400 Offset: 0x605C00 VA: 0x180607400
	public void SelectTextStart() { }
	// RVA: 0x607460 Offset: 0x605C60 VA: 0x180607460
	public void MouseDragSelectsWholeWords(bool on) { }
	// RVA: 0x5552A0 Offset: 0x553AA0 VA: 0x1805552A0
	public void DblClickSnap(TextEditor.DblClickSnapping snapping) { }
	// RVA: 0x607470 Offset: 0x605C70 VA: 0x180607470
	private int GetGraphicalLineStart(int p) { }
	// RVA: 0x607670 Offset: 0x605E70 VA: 0x180607670
	private int GetGraphicalLineEnd(int p) { }
	// RVA: 0x607860 Offset: 0x606060 VA: 0x180607860
	private int FindNextSeperator(int startPos) { }
	// RVA: 0x607900 Offset: 0x606100 VA: 0x180607900
	private int FindPrevSeperator(int startPos) { }
	// RVA: 0x6079A0 Offset: 0x6061A0 VA: 0x1806079A0
	public void MoveWordRight() { }
	// RVA: 0x607AF0 Offset: 0x6062F0 VA: 0x180607AF0
	public void MoveToStartOfNextWord() { }
	// RVA: 0x607BC0 Offset: 0x6063C0 VA: 0x180607BC0
	public void MoveToEndOfPreviousWord() { }
	// RVA: 0x607C90 Offset: 0x606490 VA: 0x180607C90
	public void SelectToStartOfNextWord() { }
	// RVA: 0x607D00 Offset: 0x606500 VA: 0x180607D00
	public void SelectToEndOfPreviousWord() { }
	// RVA: 0x607D70 Offset: 0x606570 VA: 0x180607D70
	private TextEditor.CharacterType ClassifyChar(int index) { }
	// RVA: 0x607EB0 Offset: 0x6066B0 VA: 0x180607EB0
	public int FindStartOfNextWord(int p) { }
	// RVA: 0x608050 Offset: 0x606850 VA: 0x180608050
	private int FindEndOfPreviousWord(int p) { }
	// RVA: 0x608120 Offset: 0x606920 VA: 0x180608120
	public void MoveWordLeft() { }
	// RVA: 0x608270 Offset: 0x606A70 VA: 0x180608270
	public void SelectWordRight() { }
	// RVA: 0x6083C0 Offset: 0x606BC0 VA: 0x1806083C0
	public void SelectWordLeft() { }
	// RVA: 0x608510 Offset: 0x606D10 VA: 0x180608510
	public void ExpandSelectGraphicalLineStart() { }
	// RVA: 0x608600 Offset: 0x606E00 VA: 0x180608600
	public void ExpandSelectGraphicalLineEnd() { }
	// RVA: 0x6086F0 Offset: 0x606EF0 VA: 0x1806086F0
	public void SelectGraphicalLineStart() { }
	// RVA: 0x608760 Offset: 0x606F60 VA: 0x180608760
	public void SelectGraphicalLineEnd() { }
	// RVA: 0x6087D0 Offset: 0x606FD0 VA: 0x1806087D0
	public void SelectParagraphForward() { }
	// RVA: 0x608900 Offset: 0x607100 VA: 0x180608900
	public void SelectParagraphBackward() { }
	// RVA: 0x608A70 Offset: 0x607270 VA: 0x180608A70
	public void SelectCurrentWord() { }
	// RVA: 0x608DD0 Offset: 0x6075D0 VA: 0x180608DD0
	private int FindEndOfClassification(int p, TextEditor.Direction dir) { }
	// RVA: 0x608EF0 Offset: 0x6076F0 VA: 0x180608EF0
	public void SelectCurrentParagraph() { }
	// RVA: 0x609020 Offset: 0x607820 VA: 0x180609020
	public void UpdateScrollOffsetIfNeeded(Event evt) { }
	// RVA: 0x6090E0 Offset: 0x6078E0 VA: 0x1806090E0
	internal void UpdateScrollOffset() { }
	// RVA: 0x6096D0 Offset: 0x607ED0 VA: 0x1806096D0
	public void DrawCursor(string newText) { }
	// RVA: 0x609E70 Offset: 0x608670 VA: 0x180609E70
	private bool PerformOperation(TextEditor.TextEditOp operation, bool textIsReadOnly) { }
	// RVA: 0x60AD30 Offset: 0x609530 VA: 0x18060AD30
	public void SaveBackup() { }
	// RVA: 0x60AD70 Offset: 0x609570 VA: 0x18060AD70
	public bool Cut() { }
	// RVA: 0x60ADA0 Offset: 0x6095A0 VA: 0x18060ADA0
	public void Copy() { }
	// RVA: 0x60AEC0 Offset: 0x6096C0 VA: 0x18060AEC0
	private static string ReplaceNewlinesWithSpaces(string value) { }
	// RVA: 0x60AF80 Offset: 0x609780 VA: 0x18060AF80
	public bool Paste() { }
	// RVA: 0x60B1D0 Offset: 0x6099D0 VA: 0x18060B1D0
	private static void MapKey(string key, TextEditor.TextEditOp action) { }
	// RVA: 0x60B2A0 Offset: 0x609AA0 VA: 0x18060B2A0
	private void InitKeyActions() { }
	// RVA: 0x60B940 Offset: 0x60A140 VA: 0x18060B940
	public void DetectFocusChange() { }
	// RVA: 0x60B960 Offset: 0x60A160 VA: 0x18060B960 Slot: 5
	internal virtual void OnDetectFocusChange() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 6
	internal virtual void OnCursorIndexChange() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	internal virtual void OnSelectIndexChange() { }
	// RVA: 0x60BB50 Offset: 0x60A350 VA: 0x18060BB50
	private void ClampTextIndex(ref int index) { }
	// RVA: 0x60BC40 Offset: 0x60A440 VA: 0x18060BC40
	private void EnsureValidCodePointIndex(ref int index) { }
	// RVA: 0x60BE00 Offset: 0x60A600 VA: 0x18060BE00
	private bool IsValidCodePointIndex(int index) { }
	// RVA: 0x60BF00 Offset: 0x60A700 VA: 0x18060BF00
	private int PreviousCodePointIndex(int index) { }
	// RVA: 0x60C010 Offset: 0x60A810 VA: 0x18060C010
	private int NextCodePointIndex(int index) { }
}

// Namespace: 
public enum TextEditor.DblClickSnapping // TypeDefIndex: 1947
{
	// Fields
	public byte value__; // 0x0
	public const TextEditor.DblClickSnapping WORDS = 0; // 0x0
	public const TextEditor.DblClickSnapping PARAGRAPHS = 1; // 0x0
}

// Namespace: 
private enum TextEditor.CharacterType // TypeDefIndex: 1948
{
	// Fields
	public int value__; // 0x0
	public const TextEditor.CharacterType LetterLike = 0; // 0x0
	public const TextEditor.CharacterType Symbol = 1; // 0x0
	public const TextEditor.CharacterType Symbol2 = 2; // 0x0
	public const TextEditor.CharacterType WhiteSpace = 3; // 0x0
}

// Namespace: 
private enum TextEditor.Direction // TypeDefIndex: 1949
{
	// Fields
	public int value__; // 0x0
	public const TextEditor.Direction Forward = 0; // 0x0
	public const TextEditor.Direction Backward = 1; // 0x0
}

// Namespace: 
private enum TextEditor.TextEditOp // TypeDefIndex: 1950
{
	// Fields
	public int value__; // 0x0
	public const TextEditor.TextEditOp MoveLeft = 0; // 0x0
	public const TextEditor.TextEditOp MoveRight = 1; // 0x0
	public const TextEditor.TextEditOp MoveUp = 2; // 0x0
	public const TextEditor.TextEditOp MoveDown = 3; // 0x0
	public const TextEditor.TextEditOp MoveLineStart = 4; // 0x0
	public const TextEditor.TextEditOp MoveLineEnd = 5; // 0x0
	public const TextEditor.TextEditOp MoveTextStart = 6; // 0x0
	public const TextEditor.TextEditOp MoveTextEnd = 7; // 0x0
	public const TextEditor.TextEditOp MovePageUp = 8; // 0x0
	public const TextEditor.TextEditOp MovePageDown = 9; // 0x0
	public const TextEditor.TextEditOp MoveGraphicalLineStart = 10; // 0x0
	public const TextEditor.TextEditOp MoveGraphicalLineEnd = 11; // 0x0
	public const TextEditor.TextEditOp MoveWordLeft = 12; // 0x0
	public const TextEditor.TextEditOp MoveWordRight = 13; // 0x0
	public const TextEditor.TextEditOp MoveParagraphForward = 14; // 0x0
	public const TextEditor.TextEditOp MoveParagraphBackward = 15; // 0x0
	public const TextEditor.TextEditOp MoveToStartOfNextWord = 16; // 0x0
	public const TextEditor.TextEditOp MoveToEndOfPreviousWord = 17; // 0x0
	public const TextEditor.TextEditOp SelectLeft = 18; // 0x0
	public const TextEditor.TextEditOp SelectRight = 19; // 0x0
	public const TextEditor.TextEditOp SelectUp = 20; // 0x0
	public const TextEditor.TextEditOp SelectDown = 21; // 0x0
	public const TextEditor.TextEditOp SelectTextStart = 22; // 0x0
	public const TextEditor.TextEditOp SelectTextEnd = 23; // 0x0
	public const TextEditor.TextEditOp SelectPageUp = 24; // 0x0
	public const TextEditor.TextEditOp SelectPageDown = 25; // 0x0
	public const TextEditor.TextEditOp ExpandSelectGraphicalLineStart = 26; // 0x0
	public const TextEditor.TextEditOp ExpandSelectGraphicalLineEnd = 27; // 0x0
	public const TextEditor.TextEditOp SelectGraphicalLineStart = 28; // 0x0
	public const TextEditor.TextEditOp SelectGraphicalLineEnd = 29; // 0x0
	public const TextEditor.TextEditOp SelectWordLeft = 30; // 0x0
	public const TextEditor.TextEditOp SelectWordRight = 31; // 0x0
	public const TextEditor.TextEditOp SelectToEndOfPreviousWord = 32; // 0x0
	public const TextEditor.TextEditOp SelectToStartOfNextWord = 33; // 0x0
	public const TextEditor.TextEditOp SelectParagraphBackward = 34; // 0x0
	public const TextEditor.TextEditOp SelectParagraphForward = 35; // 0x0
	public const TextEditor.TextEditOp Delete = 36; // 0x0
	public const TextEditor.TextEditOp Backspace = 37; // 0x0
	public const TextEditor.TextEditOp DeleteWordBack = 38; // 0x0
	public const TextEditor.TextEditOp DeleteWordForward = 39; // 0x0
	public const TextEditor.TextEditOp DeleteLineBack = 40; // 0x0
	public const TextEditor.TextEditOp Cut = 41; // 0x0
	public const TextEditor.TextEditOp Copy = 42; // 0x0
	public const TextEditor.TextEditOp Paste = 43; // 0x0
	public const TextEditor.TextEditOp SelectAll = 44; // 0x0
	public const TextEditor.TextEditOp SelectNone = 45; // 0x0
	public const TextEditor.TextEditOp ScrollStart = 46; // 0x0
	public const TextEditor.TextEditOp ScrollEnd = 47; // 0x0
	public const TextEditor.TextEditOp ScrollPageUp = 48; // 0x0
	public const TextEditor.TextEditOp ScrollPageDown = 49; // 0x0
}

// Namespace: 
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 1951
{
	// Methods
	// RVA: 0x2C7B70 Offset: 0x2C6370 VA: 0x1802C7B70
	internal static uint ComputeStringHash(string s) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1952
{}

// Namespace: UnityEngine
public struct PhysicsScene2D : IEquatable<PhysicsScene2D> // TypeDefIndex: 1953
{
	// Fields
	private int m_Handle; // 0x0

	// Methods
	// RVA: 0x25E90 Offset: 0x25290 VA: 0x180025E90 Slot: 3
	public override string ToString() { }
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x25F90 Offset: 0x25390 VA: 0x180025F90 Slot: 0
	public override bool Equals(object other) { }
	// RVA: 0x1E2B0 Offset: 0x1D6B0 VA: 0x18001E2B0 Slot: 4
	public bool Equals(PhysicsScene2D other) { }
	// RVA: 0x26060 Offset: 0x25460 VA: 0x180026060
	public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask = -5) { }
	// RVA: 0x26090 Offset: 0x25490 VA: 0x180026090
	public RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter) { }
	// RVA: 0x66DB60 Offset: 0x66C360 VA: 0x18066DB60
	private static RaycastHit2D Raycast_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter) { }
	// RVA: 0x260F0 Offset: 0x254F0 VA: 0x1800260F0
	public int Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results) { }
	// RVA: 0x66DCC0 Offset: 0x66C4C0 VA: 0x18066DCC0
	private static int RaycastArray_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results) { }
	// RVA: 0x26140 Offset: 0x25540 VA: 0x180026140
	public int Raycast(Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, List<RaycastHit2D> results) { }
	// RVA: 0x66DE20 Offset: 0x66C620 VA: 0x18066DE20
	private static int RaycastList_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 direction, float distance, ContactFilter2D contactFilter, List<RaycastHit2D> results) { }
	// RVA: 0x26190 Offset: 0x25590 VA: 0x180026190
	public RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter) { }
	// RVA: 0x66DFE0 Offset: 0x66C7E0 VA: 0x18066DFE0
	private static RaycastHit2D CircleCast_Internal(PhysicsScene2D physicsScene, Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter) { }
	// RVA: 0x26200 Offset: 0x25600 VA: 0x180026200
	public int CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results) { }
	// RVA: 0x66E160 Offset: 0x66C960 VA: 0x18066E160
	private static int CircleCastArray_Internal(PhysicsScene2D physicsScene, Vector2 origin, float radius, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results) { }
	// RVA: 0x26260 Offset: 0x25660 VA: 0x180026260
	public int CapsuleCast(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results) { }
	// RVA: 0x66E2F0 Offset: 0x66CAF0 VA: 0x18066E2F0
	private static int CapsuleCastArray_Internal(PhysicsScene2D physicsScene, Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, float distance, ContactFilter2D contactFilter, RaycastHit2D[] results) { }
	// RVA: 0x262E0 Offset: 0x256E0 VA: 0x1800262E0
	public int GetRayIntersection(Ray ray, float distance, RaycastHit2D[] results, int layerMask = -5) { }
	// RVA: 0x66E460 Offset: 0x66CC60 VA: 0x18066E460
	private static int GetRayIntersectionArray_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask, RaycastHit2D[] results) { }
	// RVA: 0x26320 Offset: 0x25720 VA: 0x180026320
	public int OverlapCircle(Vector2 point, float radius, ContactFilter2D contactFilter, Collider2D[] results) { }
	// RVA: 0x66E4F0 Offset: 0x66CCF0 VA: 0x18066E4F0
	private static int OverlapCircleArray_Internal(PhysicsScene2D physicsScene, Vector2 point, float radius, ContactFilter2D contactFilter, Collider2D[] results) { }
	// RVA: 0x263D0 Offset: 0x257D0 VA: 0x1800263D0
	public int OverlapCapsule(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, Collider2D[] results) { }
	// RVA: 0x66E640 Offset: 0x66CE40 VA: 0x18066E640
	private static int OverlapCapsuleArray_Internal(PhysicsScene2D physicsScene, Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, ContactFilter2D contactFilter, Collider2D[] results) { }
	// RVA: 0x66E6E0 Offset: 0x66CEE0 VA: 0x18066E6E0
	private static void Raycast_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, out RaycastHit2D ret) { }
	// RVA: 0x66E770 Offset: 0x66CF70 VA: 0x18066E770
	private static int RaycastArray_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, RaycastHit2D[] results) { }
	// RVA: 0x66E800 Offset: 0x66D000 VA: 0x18066E800
	private static int RaycastList_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, List<RaycastHit2D> results) { }
	// RVA: 0x66E890 Offset: 0x66D090 VA: 0x18066E890
	private static void CircleCast_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, float radius, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, out RaycastHit2D ret) { }
	// RVA: 0x66E920 Offset: 0x66D120 VA: 0x18066E920
	private static int CircleCastArray_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, float radius, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, RaycastHit2D[] results) { }
	// RVA: 0x66E9B0 Offset: 0x66D1B0 VA: 0x18066E9B0
	private static int CapsuleCastArray_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 origin, ref Vector2 size, CapsuleDirection2D capsuleDirection, float angle, ref Vector2 direction, float distance, ref ContactFilter2D contactFilter, RaycastHit2D[] results) { }
	// RVA: 0x66EA40 Offset: 0x66D240 VA: 0x18066EA40
	private static int GetRayIntersectionArray_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask, RaycastHit2D[] results) { }
	// RVA: 0x66EAD0 Offset: 0x66D2D0 VA: 0x18066EAD0
	private static int OverlapCircleArray_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, float radius, ref ContactFilter2D contactFilter, Collider2D[] results) { }
	// RVA: 0x66EB60 Offset: 0x66D360 VA: 0x18066EB60
	private static int OverlapCapsuleArray_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector2 point, ref Vector2 size, CapsuleDirection2D direction, float angle, ref ContactFilter2D contactFilter, Collider2D[] results) { }
}

// Namespace: UnityEngine
public class Physics2D // TypeDefIndex: 1954
{
	// Fields
	private static List<Rigidbody2D> m_LastDisabledRigidbody2D; // 0xA17960

	// Properties
	public static PhysicsScene2D defaultPhysicsScene { get; }
	public static bool queriesHitTriggers { get; set; }

	// Methods
	// RVA: 0x543480 Offset: 0x541C80 VA: 0x180543480
	public static PhysicsScene2D get_defaultPhysicsScene() { }
	// RVA: 0x66B450 Offset: 0x669C50 VA: 0x18066B450
	public static bool get_queriesHitTriggers() { }
	// RVA: 0x66B4A0 Offset: 0x669CA0 VA: 0x18066B4A0
	public static void set_queriesHitTriggers(bool value) { }
	// RVA: 0x66B4F0 Offset: 0x669CF0 VA: 0x18066B4F0
	public static void IgnoreLayerCollision(int layer1, int layer2, bool ignore) { }
	// RVA: 0x66B660 Offset: 0x669E60 VA: 0x18066B660
	private static void IgnoreLayerCollision_Internal(int layer1, int layer2, bool ignore) { }
	// RVA: 0x66B6D0 Offset: 0x669ED0 VA: 0x18066B6D0
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction) { }
	// RVA: 0x66B7F0 Offset: 0x669FF0 VA: 0x18066B7F0
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x66B910 Offset: 0x66A110 VA: 0x18066B910
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask) { }
	// RVA: 0x66BB00 Offset: 0x66A300 VA: 0x18066BB00
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth) { }
	// RVA: 0x66BCF0 Offset: 0x66A4F0 VA: 0x18066BCF0
	public static RaycastHit2D Raycast(Vector2 origin, Vector2 direction, float distance, int layerMask, float minDepth, float maxDepth) { }
	// RVA: 0x66BEE0 Offset: 0x66A6E0 VA: 0x18066BEE0
	public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results) { }
	// RVA: 0x66C040 Offset: 0x66A840 VA: 0x18066C040
	public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, RaycastHit2D[] results, float distance) { }
	// RVA: 0x66C1A0 Offset: 0x66A9A0 VA: 0x18066C1A0
	public static int Raycast(Vector2 origin, Vector2 direction, ContactFilter2D contactFilter, List<RaycastHit2D> results, float distance = ∞) { }
	// RVA: 0x66C300 Offset: 0x66AB00 VA: 0x18066C300
	public static int RaycastNonAlloc(Vector2 origin, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask) { }
	// RVA: 0x66C4A0 Offset: 0x66ACA0 VA: 0x18066C4A0
	public static RaycastHit2D CircleCast(Vector2 origin, float radius, Vector2 direction, float distance, int layerMask) { }
	// RVA: 0x66C6A0 Offset: 0x66AEA0 VA: 0x18066C6A0
	public static int CircleCastNonAlloc(Vector2 origin, float radius, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask) { }
	// RVA: 0x66C850 Offset: 0x66B050 VA: 0x18066C850
	public static int CapsuleCastNonAlloc(Vector2 origin, Vector2 size, CapsuleDirection2D capsuleDirection, float angle, Vector2 direction, RaycastHit2D[] results, float distance, int layerMask) { }
	// RVA: 0x66CA30 Offset: 0x66B230 VA: 0x18066CA30
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray) { }
	// RVA: 0x66CB10 Offset: 0x66B310 VA: 0x18066CB10
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x66CC00 Offset: 0x66B400 VA: 0x18066CC00
	public static RaycastHit2D[] GetRayIntersectionAll(Ray ray, float distance, int layerMask) { }
	// RVA: 0x66CCF0 Offset: 0x66B4F0 VA: 0x18066CCF0
	private static RaycastHit2D[] GetRayIntersectionAll_Internal(PhysicsScene2D physicsScene, Vector3 origin, Vector3 direction, float distance, int layerMask) { }
	// RVA: 0x66CDF0 Offset: 0x66B5F0 VA: 0x18066CDF0
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results) { }
	// RVA: 0x66CF30 Offset: 0x66B730 VA: 0x18066CF30
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x66D080 Offset: 0x66B880 VA: 0x18066D080
	public static int GetRayIntersectionNonAlloc(Ray ray, RaycastHit2D[] results, float distance, int layerMask) { }
	// RVA: 0x66D1D0 Offset: 0x66B9D0 VA: 0x18066D1D0
	public static int OverlapCircleNonAlloc(Vector2 point, float radius, Collider2D[] results, int layerMask) { }
	// RVA: 0x66D350 Offset: 0x66BB50 VA: 0x18066D350
	public static int OverlapCapsuleNonAlloc(Vector2 point, Vector2 size, CapsuleDirection2D direction, float angle, Collider2D[] results, int layerMask) { }
	// RVA: 0x66D500 Offset: 0x66BD00 VA: 0x18066D500
	private static void .cctor() { }
	// RVA: 0x66D5A0 Offset: 0x66BDA0 VA: 0x18066D5A0
	private static RaycastHit2D[] GetRayIntersectionAll_Internal_Injected(ref PhysicsScene2D physicsScene, ref Vector3 origin, ref Vector3 direction, float distance, int layerMask) { }
}

// Namespace: UnityEngine
public enum CapsuleDirection2D // TypeDefIndex: 1955
{
	// Fields
	public int value__; // 0x0
	public const CapsuleDirection2D Vertical = 0; // 0x0
	public const CapsuleDirection2D Horizontal = 1; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum RigidbodyConstraints2D // TypeDefIndex: 1956
{
	// Fields
	public int value__; // 0x0
	public const RigidbodyConstraints2D None = 0; // 0x0
	public const RigidbodyConstraints2D FreezePositionX = 1; // 0x0
	public const RigidbodyConstraints2D FreezePositionY = 2; // 0x0
	public const RigidbodyConstraints2D FreezeRotation = 4; // 0x0
	public const RigidbodyConstraints2D FreezePosition = 3; // 0x0
	public const RigidbodyConstraints2D FreezeAll = 7; // 0x0
}

// Namespace: UnityEngine
public enum RigidbodyInterpolation2D // TypeDefIndex: 1957
{
	// Fields
	public int value__; // 0x0
	public const RigidbodyInterpolation2D None = 0; // 0x0
	public const RigidbodyInterpolation2D Interpolate = 1; // 0x0
	public const RigidbodyInterpolation2D Extrapolate = 2; // 0x0
}

// Namespace: UnityEngine
public enum CollisionDetectionMode2D // TypeDefIndex: 1958
{
	// Fields
	public int value__; // 0x0
	[ObsoleteAttribute] // RVA: 0xE7720 Offset: 0xE6B20 VA: 0x1800E7720
	public const CollisionDetectionMode2D None = 0; // 0x0
	public const CollisionDetectionMode2D Discrete = 0; // 0x0
	public const CollisionDetectionMode2D Continuous = 1; // 0x0
}

// Namespace: UnityEngine
public enum RigidbodyType2D // TypeDefIndex: 1959
{
	// Fields
	public int value__; // 0x0
	public const RigidbodyType2D Dynamic = 0; // 0x0
	public const RigidbodyType2D Kinematic = 1; // 0x0
	public const RigidbodyType2D Static = 2; // 0x0
}

// Namespace: UnityEngine
public enum ForceMode2D // TypeDefIndex: 1960
{
	// Fields
	public int value__; // 0x0
	public const ForceMode2D Force = 0; // 0x0
	public const ForceMode2D Impulse = 1; // 0x0
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDCCC0 Offset: 0xDC0C0 VA: 0x1800DCCC0
[Serializable]
public struct ContactFilter2D // TypeDefIndex: 1961
{
	// Fields
	public bool useTriggers; // 0x0
	public bool useLayerMask; // 0x1
	public bool useDepth; // 0x2
	public bool useOutsideDepth; // 0x3
	public bool useNormalAngle; // 0x4
	public bool useOutsideNormalAngle; // 0x5
	public LayerMask layerMask; // 0x8
	public float minDepth; // 0xC
	public float maxDepth; // 0x10
	public float minNormalAngle; // 0x14
	public float maxNormalAngle; // 0x18

	// Methods
	// RVA: 0x25D80 Offset: 0x25180 VA: 0x180025D80
	private void CheckConsistency() { }
	// RVA: 0x25DD0 Offset: 0x251D0 VA: 0x180025DD0
	public void SetLayerMask(LayerMask layerMask) { }
	// RVA: 0x25DE0 Offset: 0x251E0 VA: 0x180025DE0
	public void SetDepth(float minDepth, float maxDepth) { }
	// RVA: 0x66B150 Offset: 0x669950 VA: 0x18066B150
	internal static ContactFilter2D CreateLegacyFilter(int layerMask, float minDepth, float maxDepth) { }
	// RVA: 0x66B2F0 Offset: 0x669AF0 VA: 0x18066B2F0
	private static void CheckConsistency_Injected(ref ContactFilter2D _unity_self) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class Collision2D // TypeDefIndex: 1962
{
	// Fields
	internal int m_Collider; // 0x10
	internal int m_OtherCollider; // 0x14
	internal int m_Rigidbody; // 0x18
	internal int m_OtherRigidbody; // 0x1C
	internal Vector2 m_RelativeVelocity; // 0x20
	internal int m_Enabled; // 0x28
	internal int m_ContactCount; // 0x2C
	internal ContactPoint2D[] m_ReusedContacts; // 0x30
	internal ContactPoint2D[] m_LegacyContacts; // 0x38

	// Properties
	public Collider2D collider { get; }
	public Rigidbody2D rigidbody { get; }
	public GameObject gameObject { get; }
	public Vector2 relativeVelocity { get; }

	// Methods
	// RVA: 0x66A9E0 Offset: 0x6691E0 VA: 0x18066A9E0
	private ContactPoint2D[] GetContacts_Internal() { }
	// RVA: 0x66A9F0 Offset: 0x6691F0 VA: 0x18066A9F0
	public Collider2D get_collider() { }
	// RVA: 0x66AB00 Offset: 0x669300 VA: 0x18066AB00
	public Rigidbody2D get_rigidbody() { }
	// RVA: 0x66ABF0 Offset: 0x6693F0 VA: 0x18066ABF0
	public GameObject get_gameObject() { }
	// RVA: 0x66AD40 Offset: 0x669540 VA: 0x18066AD40
	public Vector2 get_relativeVelocity() { }
	// RVA: 0x66AD60 Offset: 0x669560 VA: 0x18066AD60
	public int GetContacts(ContactPoint2D[] contacts) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xE7750 Offset: 0xE6B50 VA: 0x1800E7750
public struct ContactPoint2D // TypeDefIndex: 1963
{
	// Fields
	private Vector2 m_Point; // 0x0
	private Vector2 m_Normal; // 0x8
	private Vector2 m_RelativeVelocity; // 0x10
	private float m_Separation; // 0x18
	private float m_NormalImpulse; // 0x1C
	private float m_TangentImpulse; // 0x20
	private int m_Collider; // 0x24
	private int m_OtherCollider; // 0x28
	private int m_Rigidbody; // 0x2C
	private int m_OtherRigidbody; // 0x30
	private int m_Enabled; // 0x34

	// Properties
	public Vector2 point { get; }
	public Vector2 normal { get; }
	public Collider2D collider { get; }

	// Methods
	// RVA: 0x25E40 Offset: 0x25240 VA: 0x180025E40
	public Vector2 get_point() { }
	// RVA: 0x25E60 Offset: 0x25260 VA: 0x180025E60
	public Vector2 get_normal() { }
	// RVA: 0x25E80 Offset: 0x25280 VA: 0x180025E80
	public Collider2D get_collider() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xDCCC0 Offset: 0xDC0C0 VA: 0x1800DCCC0
public struct RaycastHit2D // TypeDefIndex: 1964
{
	// Fields
	private Vector2 m_Centroid; // 0x0
	private Vector2 m_Point; // 0x8
	private Vector2 m_Normal; // 0x10
	private float m_Distance; // 0x18
	private float m_Fraction; // 0x1C
	private int m_Collider; // 0x20

	// Properties
	public Vector2 point { get; }
	public Vector2 normal { get; }
	public float distance { get; set; }
	public Collider2D collider { get; }
	public Rigidbody2D rigidbody { get; }
	public Transform transform { get; }

	// Methods
	// RVA: 0x25E60 Offset: 0x25260 VA: 0x180025E60
	public Vector2 get_point() { }
	// RVA: 0x26430 Offset: 0x25830 VA: 0x180026430
	public Vector2 get_normal() { }
	// RVA: 0x26450 Offset: 0x25850 VA: 0x180026450
	public float get_distance() { }
	// RVA: 0x2360 Offset: 0x1760 VA: 0x180002360
	public void set_distance(float value) { }
	// RVA: 0x26460 Offset: 0x25860 VA: 0x180026460
	public Collider2D get_collider() { }
	// RVA: 0x26470 Offset: 0x25870 VA: 0x180026470
	public Rigidbody2D get_rigidbody() { }
	// RVA: 0x26480 Offset: 0x25880 VA: 0x180026480
	public Transform get_transform() { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xE7760 Offset: 0xE6B60 VA: 0x1800E7760
public sealed class Rigidbody2D : Component // TypeDefIndex: 1965
{
	// Properties
	public Vector2 position { get; set; }
	public float rotation { get; set; }
	public Vector2 velocity { get; set; }
	public float angularVelocity { get; set; }
	public float mass { get; set; }
	public float gravityScale { get; set; }
	public RigidbodyType2D bodyType { get; set; }
	public bool isKinematic { get; set; }
	public RigidbodyConstraints2D constraints { get; set; }
	public RigidbodyInterpolation2D interpolation { get; set; }
	public CollisionDetectionMode2D collisionDetectionMode { get; set; }

	// Methods
	// RVA: 0x66F270 Offset: 0x66DA70 VA: 0x18066F270
	public Vector2 get_position() { }
	// RVA: 0x66F2E0 Offset: 0x66DAE0 VA: 0x18066F2E0
	public void set_position(Vector2 value) { }
	// RVA: 0x66F340 Offset: 0x66DB40 VA: 0x18066F340
	public float get_rotation() { }
	// RVA: 0x66F390 Offset: 0x66DB90 VA: 0x18066F390
	public void set_rotation(float value) { }
	// RVA: 0x66F3F0 Offset: 0x66DBF0 VA: 0x18066F3F0
	public void MovePosition(Vector2 position) { }
	// RVA: 0x66F450 Offset: 0x66DC50 VA: 0x18066F450
	public void MoveRotation(float angle) { }
	// RVA: 0x66F450 Offset: 0x66DC50 VA: 0x18066F450
	private void MoveRotation_Angle(float angle) { }
	// RVA: 0x66F4B0 Offset: 0x66DCB0 VA: 0x18066F4B0
	public Vector2 get_velocity() { }
	// RVA: 0x66F520 Offset: 0x66DD20 VA: 0x18066F520
	public void set_velocity(Vector2 value) { }
	// RVA: 0x66F580 Offset: 0x66DD80 VA: 0x18066F580
	public float get_angularVelocity() { }
	// RVA: 0x66F5D0 Offset: 0x66DDD0 VA: 0x18066F5D0
	public void set_angularVelocity(float value) { }
	// RVA: 0x66F630 Offset: 0x66DE30 VA: 0x18066F630
	public float get_mass() { }
	// RVA: 0x66F680 Offset: 0x66DE80 VA: 0x18066F680
	public void set_mass(float value) { }
	// RVA: 0x66F6E0 Offset: 0x66DEE0 VA: 0x18066F6E0
	public float get_gravityScale() { }
	// RVA: 0x66F730 Offset: 0x66DF30 VA: 0x18066F730
	public void set_gravityScale(float value) { }
	// RVA: 0x66F790 Offset: 0x66DF90 VA: 0x18066F790
	public RigidbodyType2D get_bodyType() { }
	// RVA: 0x66F7E0 Offset: 0x66DFE0 VA: 0x18066F7E0
	public void set_bodyType(RigidbodyType2D value) { }
	// RVA: 0x66F840 Offset: 0x66E040 VA: 0x18066F840
	public bool get_isKinematic() { }
	// RVA: 0x66F8A0 Offset: 0x66E0A0 VA: 0x18066F8A0
	public void set_isKinematic(bool value) { }
	// RVA: 0x66F910 Offset: 0x66E110 VA: 0x18066F910
	public RigidbodyConstraints2D get_constraints() { }
	// RVA: 0x66F960 Offset: 0x66E160 VA: 0x18066F960
	public void set_constraints(RigidbodyConstraints2D value) { }
	// RVA: 0x66F9C0 Offset: 0x66E1C0 VA: 0x18066F9C0
	public RigidbodyInterpolation2D get_interpolation() { }
	// RVA: 0x66FA10 Offset: 0x66E210 VA: 0x18066FA10
	public void set_interpolation(RigidbodyInterpolation2D value) { }
	// RVA: 0x66FA70 Offset: 0x66E270 VA: 0x18066FA70
	public CollisionDetectionMode2D get_collisionDetectionMode() { }
	// RVA: 0x66FAC0 Offset: 0x66E2C0 VA: 0x18066FAC0
	public void set_collisionDetectionMode(CollisionDetectionMode2D value) { }
	// RVA: 0x66FB20 Offset: 0x66E320 VA: 0x18066FB20
	public void AddForce(Vector2 force, ForceMode2D mode) { }
	// RVA: 0x66FB90 Offset: 0x66E390 VA: 0x18066FB90
	public void AddForceAtPosition(Vector2 force, Vector2 position) { }
	// RVA: 0x66FC00 Offset: 0x66E400 VA: 0x18066FC00
	public void AddForceAtPosition(Vector2 force, Vector2 position, ForceMode2D mode) { }
	// RVA: 0x66FC80 Offset: 0x66E480 VA: 0x18066FC80
	public void AddTorque(float torque) { }
	// RVA: 0x66FCF0 Offset: 0x66E4F0 VA: 0x18066FCF0
	public void AddTorque(float torque, ForceMode2D mode) { }
	// RVA: 0x66FD60 Offset: 0x66E560 VA: 0x18066FD60
	public Vector2 GetPointVelocity(Vector2 point) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
	// RVA: 0x66FDD0 Offset: 0x66E5D0 VA: 0x18066FDD0
	private void get_position_Injected(out Vector2 ret) { }
	// RVA: 0x66FE30 Offset: 0x66E630 VA: 0x18066FE30
	private void set_position_Injected(ref Vector2 value) { }
	// RVA: 0x66FE90 Offset: 0x66E690 VA: 0x18066FE90
	private void MovePosition_Injected(ref Vector2 position) { }
	// RVA: 0x66FEF0 Offset: 0x66E6F0 VA: 0x18066FEF0
	private void get_velocity_Injected(out Vector2 ret) { }
	// RVA: 0x66FF50 Offset: 0x66E750 VA: 0x18066FF50
	private void set_velocity_Injected(ref Vector2 value) { }
	// RVA: 0x66FFB0 Offset: 0x66E7B0 VA: 0x18066FFB0
	private void AddForce_Injected(ref Vector2 force, ForceMode2D mode) { }
	// RVA: 0x670020 Offset: 0x66E820 VA: 0x180670020
	private void AddForceAtPosition_Injected(ref Vector2 force, ref Vector2 position, ForceMode2D mode) { }
	// RVA: 0x6700A0 Offset: 0x66E8A0 VA: 0x1806700A0
	private void GetPointVelocity_Injected(ref Vector2 point, out Vector2 ret) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xE77E0 Offset: 0xE6BE0 VA: 0x1800E77E0
[RequiredByNativeCodeAttribute] // RVA: 0xE77E0 Offset: 0xE6BE0 VA: 0x1800E77E0
public class Collider2D : Behaviour // TypeDefIndex: 1966
{
	// Properties
	public Vector2 offset { get; set; }
	public Rigidbody2D attachedRigidbody { get; }
	public PhysicsMaterial2D sharedMaterial { get; set; }

	// Methods
	// RVA: 0x66A690 Offset: 0x668E90 VA: 0x18066A690
	public Vector2 get_offset() { }
	// RVA: 0x66A700 Offset: 0x668F00 VA: 0x18066A700
	public void set_offset(Vector2 value) { }
	// RVA: 0x66A760 Offset: 0x668F60 VA: 0x18066A760
	public Rigidbody2D get_attachedRigidbody() { }
	// RVA: 0x66A7B0 Offset: 0x668FB0 VA: 0x18066A7B0
	public PhysicsMaterial2D get_sharedMaterial() { }
	// RVA: 0x66A800 Offset: 0x669000 VA: 0x18066A800
	public void set_sharedMaterial(PhysicsMaterial2D value) { }
	// RVA: 0x66A860 Offset: 0x669060 VA: 0x18066A860
	public bool OverlapPoint(Vector2 point) { }
	// RVA: 0x66A8C0 Offset: 0x6690C0 VA: 0x18066A8C0
	private void get_offset_Injected(out Vector2 ret) { }
	// RVA: 0x66A920 Offset: 0x669120 VA: 0x18066A920
	private void set_offset_Injected(ref Vector2 value) { }
	// RVA: 0x66A980 Offset: 0x669180 VA: 0x18066A980
	private bool OverlapPoint_Injected(ref Vector2 point) { }
}

// Namespace: UnityEngine
public sealed class CircleCollider2D : Collider2D // TypeDefIndex: 1967
{
	// Properties
	public float radius { get; set; }

	// Methods
	// RVA: 0x66A5E0 Offset: 0x668DE0 VA: 0x18066A5E0
	public float get_radius() { }
	// RVA: 0x66A630 Offset: 0x668E30 VA: 0x18066A630
	public void set_radius(float value) { }
}

// Namespace: UnityEngine
public sealed class CapsuleCollider2D : Collider2D // TypeDefIndex: 1968
{
	// Properties
	public Vector2 size { get; set; }

	// Methods
	// RVA: 0x66A450 Offset: 0x668C50 VA: 0x18066A450
	public Vector2 get_size() { }
	// RVA: 0x66A4C0 Offset: 0x668CC0 VA: 0x18066A4C0
	public void set_size(Vector2 value) { }
	// RVA: 0x66A520 Offset: 0x668D20 VA: 0x18066A520
	private void get_size_Injected(out Vector2 ret) { }
	// RVA: 0x66A580 Offset: 0x668D80 VA: 0x18066A580
	private void set_size_Injected(ref Vector2 value) { }
}

// Namespace: UnityEngine
public sealed class PolygonCollider2D : Collider2D // TypeDefIndex: 1969
{
	// Properties
	public int pathCount { get; }

	// Methods
	// RVA: 0x66EBF0 Offset: 0x66D3F0 VA: 0x18066EBF0
	public int GetTotalPointCount() { }
	// RVA: 0x66EC40 Offset: 0x66D440 VA: 0x18066EC40
	public int get_pathCount() { }
	// RVA: 0x66EC90 Offset: 0x66D490 VA: 0x18066EC90
	public Vector2[] GetPath(int index) { }
	// RVA: 0x66EE50 Offset: 0x66D650 VA: 0x18066EE50
	private Vector2[] GetPath_Internal(int index) { }
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xE7880 Offset: 0xE6C80 VA: 0x1800E7880
public sealed class CompositeCollider2D : Collider2D // TypeDefIndex: 1970
{
	// Properties
	public int pathCount { get; }
	public int pointCount { get; }

	// Methods
	// RVA: 0x66AE60 Offset: 0x669660 VA: 0x18066AE60
	public int get_pathCount() { }
	// RVA: 0x66AEB0 Offset: 0x6696B0 VA: 0x18066AEB0
	public int get_pointCount() { }
	// RVA: 0x66AF00 Offset: 0x669700 VA: 0x18066AF00
	public int GetPath(int index, Vector2[] points) { }
	// RVA: 0x66B0E0 Offset: 0x6698E0 VA: 0x18066B0E0
	private int GetPathArray_Internal(int index, Vector2[] points) { }
}

// Namespace: UnityEngine
public sealed class PhysicsMaterial2D : Object // TypeDefIndex: 1971
{
	// Properties
	public float bounciness { set; }
	public float friction { set; }

	// Methods
	// RVA: 0x66D630 Offset: 0x66BE30 VA: 0x18066D630
	public void .ctor() { }
	// RVA: 0x66D700 Offset: 0x66BF00 VA: 0x18066D700
	public void .ctor(string name) { }
	// RVA: 0x66D7E0 Offset: 0x66BFE0 VA: 0x18066D7E0
	private static void Create_Internal(PhysicsMaterial2D scriptMaterial, string name) { }
	// RVA: 0x66D840 Offset: 0x66C040 VA: 0x18066D840
	public void set_bounciness(float value) { }
	// RVA: 0x66D8A0 Offset: 0x66C0A0 VA: 0x18066D8A0
	public void set_friction(float value) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1972
{}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum TerrainChangedFlags // TypeDefIndex: 1973
{
	// Fields
	public int value__; // 0x0
	public const TerrainChangedFlags Heightmap = 1; // 0x0
	public const TerrainChangedFlags TreeInstances = 2; // 0x0
	public const TerrainChangedFlags DelayedHeightmapUpdate = 4; // 0x0
	public const TerrainChangedFlags FlushEverythingImmediately = 8; // 0x0
	public const TerrainChangedFlags RemoveDirtyDetailsImmediately = 16; // 0x0
	public const TerrainChangedFlags HeightmapResolution = 32; // 0x0
	public const TerrainChangedFlags Holes = 64; // 0x0
	public const TerrainChangedFlags DelayedHolesUpdate = 128; // 0x0
	public const TerrainChangedFlags WillBeDestroyed = 256; // 0x0
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class Terrain : Behaviour // TypeDefIndex: 1974
{
	// Properties
	public TerrainData terrainData { get; }
	public float detailObjectDistance { set; }
	public float detailObjectDensity { get; }
	public bool allowAutoConnect { get; }
	public int groupingID { get; }
	public bool drawTreesAndFoliage { set; }
	public static Terrain[] activeTerrains { get; }

	// Methods
	// RVA: 0x670480 Offset: 0x66EC80 VA: 0x180670480
	public TerrainData get_terrainData() { }
	// RVA: 0x6704D0 Offset: 0x66ECD0 VA: 0x1806704D0
	public void set_detailObjectDistance(float value) { }
	// RVA: 0x670530 Offset: 0x66ED30 VA: 0x180670530
	public float get_detailObjectDensity() { }
	// RVA: 0x670580 Offset: 0x66ED80 VA: 0x180670580
	public bool get_allowAutoConnect() { }
	// RVA: 0x6705D0 Offset: 0x66EDD0 VA: 0x1806705D0
	public int get_groupingID() { }
	// RVA: 0x670620 Offset: 0x66EE20 VA: 0x180670620
	public void set_drawTreesAndFoliage(bool value) { }
	// RVA: 0x670680 Offset: 0x66EE80 VA: 0x180670680
	public float SampleHeight(Vector3 worldPosition) { }
	// RVA: 0x6706E0 Offset: 0x66EEE0 VA: 0x1806706E0
	public void SetNeighbors(Terrain left, Terrain top, Terrain right, Terrain bottom) { }
	// RVA: 0x670770 Offset: 0x66EF70 VA: 0x180670770
	public Vector3 GetPosition() { }
	// RVA: 0x6707E0 Offset: 0x66EFE0 VA: 0x1806707E0
	public void Flush() { }
	// RVA: 0x670830 Offset: 0x66F030 VA: 0x180670830
	public static Terrain[] get_activeTerrains() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
	// RVA: 0x670880 Offset: 0x66F080 VA: 0x180670880
	private float SampleHeight_Injected(ref Vector3 worldPosition) { }
	// RVA: 0x6708E0 Offset: 0x66F0E0 VA: 0x1806708E0
	private void GetPosition_Injected(out Vector3 ret) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class DetailPrototype // TypeDefIndex: 1975
{
	// Fields
	internal GameObject m_Prototype; // 0x10
	internal Texture2D m_PrototypeTexture; // 0x18
	internal Color m_HealthyColor; // 0x20
	internal Color m_DryColor; // 0x30
	internal float m_MinWidth; // 0x40
	internal float m_MaxWidth; // 0x44
	internal float m_MinHeight; // 0x48
	internal float m_MaxHeight; // 0x4C
	internal float m_NoiseSpread; // 0x50
	internal float m_BendFactor; // 0x54
	internal int m_RenderMode; // 0x58
	internal int m_UsePrototypeMesh; // 0x5C

	// Properties
	public GameObject prototype { get; }
	public Texture2D prototypeTexture { get; }
	public float minWidth { get; }
	public float maxWidth { get; }
	public float minHeight { get; }
	public float maxHeight { get; }
	public float noiseSpread { get; }
	public Color healthyColor { get; }
	public Color dryColor { get; }

	// Methods
	// RVA: 0x4E9190 Offset: 0x4E7990 VA: 0x1804E9190
	public GameObject get_prototype() { }
	// RVA: 0x537AA0 Offset: 0x5362A0 VA: 0x180537AA0
	public Texture2D get_prototypeTexture() { }
	// RVA: 0x670110 Offset: 0x66E910 VA: 0x180670110
	public float get_minWidth() { }
	// RVA: 0x670120 Offset: 0x66E920 VA: 0x180670120
	public float get_maxWidth() { }
	// RVA: 0x670130 Offset: 0x66E930 VA: 0x180670130
	public float get_minHeight() { }
	// RVA: 0x670140 Offset: 0x66E940 VA: 0x180670140
	public float get_maxHeight() { }
	// RVA: 0x670150 Offset: 0x66E950 VA: 0x180670150
	public float get_noiseSpread() { }
	// RVA: 0x670160 Offset: 0x66E960 VA: 0x180670160
	public Color get_healthyColor() { }
	// RVA: 0x670170 Offset: 0x66E970 VA: 0x180670170
	public Color get_dryColor() { }
	// RVA: 0x670180 Offset: 0x66E980 VA: 0x180670180
	public void .ctor() { }
	// RVA: 0x6701E0 Offset: 0x66E9E0 VA: 0x1806701E0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x4E8C90 Offset: 0x4E7490 VA: 0x1804E8C90 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x670280 Offset: 0x66EA80 VA: 0x180670280
	private bool Equals(DetailPrototype other) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class TerrainData : Object // TypeDefIndex: 1976
{
	// Fields
	internal static readonly int k_MaximumResolution; // 0x0
	internal static readonly int k_MinimumDetailResolutionPerPatch; // 0x4
	internal static readonly int k_MaximumDetailResolutionPerPatch; // 0x8
	internal static readonly int k_MaximumDetailPatchCount; // 0xC
	internal static readonly int k_MaximumDetailsPerRes; // 0x10
	internal static readonly int k_MinimumAlphamapResolution; // 0x14
	internal static readonly int k_MaximumAlphamapResolution; // 0x18
	internal static readonly int k_MinimumBaseMapResolution; // 0x1C
	internal static readonly int k_MaximumBaseMapResolution; // 0x20

	// Properties
	public int heightmapResolution { get; }
	private int internalHeightmapResolution { get; }
	public Vector3 heightmapScale { get; }
	public Vector3 size { get; }
	public Bounds bounds { get; }
	public int detailWidth { get; }
	public int detailHeight { get; }
	public int detailResolution { get; }
	public DetailPrototype[] detailPrototypes { get; }
	internal Terrain[] users { get; }

	// Methods
	// RVA: 0x670C30 Offset: 0x66F430 VA: 0x180670C30
	private static int GetBoundaryValue(TerrainData.BoundaryValueType type) { }
	// RVA: 0x670C80 Offset: 0x66F480 VA: 0x180670C80
	public void .ctor() { }
	// RVA: 0x670D70 Offset: 0x66F570 VA: 0x180670D70
	private static void Internal_Create(TerrainData terrainData) { }
	// RVA: 0x670DC0 Offset: 0x66F5C0 VA: 0x180670DC0
	public int get_heightmapResolution() { }
	// RVA: 0x670DC0 Offset: 0x66F5C0 VA: 0x180670DC0
	private int get_internalHeightmapResolution() { }
	// RVA: 0x670E10 Offset: 0x66F610 VA: 0x180670E10
	public Vector3 get_heightmapScale() { }
	// RVA: 0x670E80 Offset: 0x66F680 VA: 0x180670E80
	public Vector3 get_size() { }
	// RVA: 0x670EF0 Offset: 0x66F6F0 VA: 0x180670EF0
	public Bounds get_bounds() { }
	// RVA: 0x670F60 Offset: 0x66F760 VA: 0x180670F60
	public float[,] GetHeights(int xBase, int yBase, int width, int height) { }
	// RVA: 0x6710D0 Offset: 0x66F8D0 VA: 0x1806710D0
	private float[,] Internal_GetHeights(int xBase, int yBase, int width, int height) { }
	// RVA: 0x671150 Offset: 0x66F950 VA: 0x180671150
	public int get_detailWidth() { }
	// RVA: 0x6711A0 Offset: 0x66F9A0 VA: 0x1806711A0
	public int get_detailHeight() { }
	// RVA: 0x6711F0 Offset: 0x66F9F0 VA: 0x1806711F0
	public int get_detailResolution() { }
	// RVA: 0x671240 Offset: 0x66FA40 VA: 0x180671240
	public DetailPrototype[] get_detailPrototypes() { }
	// RVA: 0x671290 Offset: 0x66FA90 VA: 0x180671290
	public int[,] GetDetailLayer(int xBase, int yBase, int width, int height, int layer) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x671310 Offset: 0x66FB10 VA: 0x180671310
	internal float GetAlphamapResolutionInternal() { }
	// RVA: 0x671360 Offset: 0x66FB60 VA: 0x180671360
	internal Terrain[] get_users() { }
	// RVA: 0x6713B0 Offset: 0x66FBB0 VA: 0x1806713B0
	private static void .cctor() { }
	// RVA: 0x671720 Offset: 0x66FF20 VA: 0x180671720
	private void get_heightmapScale_Injected(out Vector3 ret) { }
	// RVA: 0x671780 Offset: 0x66FF80 VA: 0x180671780
	private void get_size_Injected(out Vector3 ret) { }
	// RVA: 0x6717E0 Offset: 0x66FFE0 VA: 0x1806717E0
	private void get_bounds_Injected(out Bounds ret) { }
}

// Namespace: 
private enum TerrainData.BoundaryValueType // TypeDefIndex: 1977
{
	// Fields
	public int value__; // 0x0
	public const TerrainData.BoundaryValueType MaxHeightmapRes = 0; // 0x0
	public const TerrainData.BoundaryValueType MinDetailResPerPatch = 1; // 0x0
	public const TerrainData.BoundaryValueType MaxDetailResPerPatch = 2; // 0x0
	public const TerrainData.BoundaryValueType MaxDetailPatchCount = 3; // 0x0
	public const TerrainData.BoundaryValueType MaxDetailsPerRes = 4; // 0x0
	public const TerrainData.BoundaryValueType MinAlphamapRes = 5; // 0x0
	public const TerrainData.BoundaryValueType MaxAlphamapRes = 6; // 0x0
	public const TerrainData.BoundaryValueType MinBaseMapRes = 7; // 0x0
	public const TerrainData.BoundaryValueType MaxBaseMapRes = 8; // 0x0
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class TerrainLayer : Object // TypeDefIndex: 1978
{}

// Namespace: UnityEngine.Experimental.TerrainAPI
public static class TerrainCallbacks // TypeDefIndex: 1979
{
	// Fields
	private static TerrainCallbacks.HeightmapChangedCallback heightmapChanged; // 0x0
	private static TerrainCallbacks.TextureChangedCallback textureChanged; // 0x8

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x670940 Offset: 0x66F140 VA: 0x180670940
	internal static void InvokeHeightmapChangedCallback(TerrainData terrainData, RectInt heightRegion, bool synched) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x670AB0 Offset: 0x66F2B0 VA: 0x180670AB0
	internal static void InvokeTextureChangedCallback(TerrainData terrainData, string textureName, RectInt texelRegion, bool synched) { }
}

// Namespace: 
public sealed class TerrainCallbacks.HeightmapChangedCallback : MulticastDelegate // TypeDefIndex: 1980
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x6720F0 Offset: 0x6708F0 VA: 0x1806720F0 Slot: 12
	public virtual void Invoke(Terrain terrain, RectInt heightRegion, bool synched) { }
	// RVA: 0x672660 Offset: 0x670E60 VA: 0x180672660 Slot: 13
	public virtual IAsyncResult BeginInvoke(Terrain terrain, RectInt heightRegion, bool synched, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class TerrainCallbacks.TextureChangedCallback : MulticastDelegate // TypeDefIndex: 1981
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x672740 Offset: 0x670F40 VA: 0x180672740 Slot: 12
	public virtual void Invoke(Terrain terrain, string textureName, RectInt texelRegion, bool synched) { }
	// RVA: 0x672CE0 Offset: 0x6714E0 VA: 0x180672CE0 Slot: 13
	public virtual IAsyncResult BeginInvoke(Terrain terrain, string textureName, RectInt texelRegion, bool synched, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Experimental.TerrainAPI
public static class TerrainUtility // TypeDefIndex: 1982
{
	// Methods
	// RVA: 0x671840 Offset: 0x670040 VA: 0x180671840
	internal static bool HasValidTerrains() { }
	// RVA: 0x6718F0 Offset: 0x6700F0 VA: 0x1806718F0
	internal static void ClearConnectivity() { }
	// RVA: 0x671A00 Offset: 0x670200 VA: 0x180671A00
	internal static TerrainUtility.TerrainGroups CollectTerrains(bool onlyAutoConnectedTerrains = True) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x671CE0 Offset: 0x6704E0 VA: 0x180671CE0
	public static void AutoConnect() { }
}

// Namespace: 
public class TerrainUtility.TerrainMap // TypeDefIndex: 1983
{
	// Fields
	private Vector3 m_patchSize; // 0x10
	public TerrainUtility.TerrainMap.ErrorCode m_errorCode; // 0x1C
	public Dictionary<TerrainUtility.TerrainMap.TileCoord, Terrain> m_terrainTiles; // 0x20

	// Methods
	// RVA: 0x672FB0 Offset: 0x6717B0 VA: 0x180672FB0
	public Terrain GetTerrain(int tileX, int tileZ) { }
	// RVA: 0x6730A0 Offset: 0x6718A0 VA: 0x1806730A0
	public static TerrainUtility.TerrainMap CreateFromPlacement(Terrain originTerrain, TerrainUtility.TerrainMap.TerrainFilter filter, bool fullValidation = True) { }
	// RVA: 0x6735F0 Offset: 0x671DF0 VA: 0x1806735F0
	public static TerrainUtility.TerrainMap CreateFromPlacement(Vector2 gridOrigin, Vector2 gridSize, TerrainUtility.TerrainMap.TerrainFilter filter, bool fullValidation = True) { }
	// RVA: 0x673A60 Offset: 0x672260 VA: 0x180673A60
	public void .ctor() { }
	// RVA: 0x673B20 Offset: 0x672320 VA: 0x180673B20
	private void AddTerrainInternal(int x, int z, Terrain terrain) { }
	// RVA: 0x673DE0 Offset: 0x6725E0 VA: 0x180673DE0
	private bool TryToAddTerrain(int tileX, int tileZ, Terrain terrain) { }
	// RVA: 0x673F50 Offset: 0x672750 VA: 0x180673F50
	private void ValidateTerrain(int tileX, int tileZ) { }
	// RVA: 0x674DC0 Offset: 0x6735C0 VA: 0x180674DC0
	private TerrainUtility.TerrainMap.ErrorCode Validate() { }
}

// Namespace: 
public sealed class TerrainUtility.TerrainMap.TerrainFilter : MulticastDelegate // TypeDefIndex: 1984
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x675000 Offset: 0x673800 VA: 0x180675000 Slot: 12
	public virtual bool Invoke(Terrain terrain) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(Terrain terrain, AsyncCallback callback, object object) { }
	// RVA: 0x27FDB0 Offset: 0x27E5B0 VA: 0x18027FDB0 Slot: 14
	public virtual bool EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public struct TerrainUtility.TerrainMap.TileCoord // TypeDefIndex: 1985
{
	// Fields
	public readonly int tileX; // 0x0
	public readonly int tileZ; // 0x4

	// Methods
	// RVA: 0x16B00 Offset: 0x15F00 VA: 0x180016B00
	public void .ctor(int tileX, int tileZ) { }
}

// Namespace: 
public enum TerrainUtility.TerrainMap.ErrorCode // TypeDefIndex: 1986
{
	// Fields
	public int value__; // 0x0
	public const TerrainUtility.TerrainMap.ErrorCode OK = 0; // 0x0
	public const TerrainUtility.TerrainMap.ErrorCode Overlapping = 1; // 0x0
	public const TerrainUtility.TerrainMap.ErrorCode SizeMismatch = 4; // 0x0
	public const TerrainUtility.TerrainMap.ErrorCode EdgeAlignmentMismatch = 8; // 0x0
}

// Namespace: 
private sealed class TerrainUtility.TerrainMap.<>c__DisplayClass4_0 // TypeDefIndex: 1987
{
	// Fields
	public int groupID; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x674F90 Offset: 0x673790 VA: 0x180674F90
	internal bool <CreateFromPlacement>b__0(Terrain x) { }
}

// Namespace: 
public class TerrainUtility.TerrainGroups : Dictionary<int, TerrainUtility.TerrainMap> // TypeDefIndex: 1988
{
	// Methods
	// RVA: 0x672F10 Offset: 0x671710 VA: 0x180672F10
	public void .ctor() { }
}

// Namespace: 
private sealed class TerrainUtility.<>c__DisplayClass4_0 // TypeDefIndex: 1989
{
	// Fields
	public bool onlyAutoConnectedTerrains; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private sealed class TerrainUtility.<>c__DisplayClass4_1 // TypeDefIndex: 1990
{
	// Fields
	public Terrain t; // 0x10
	public TerrainUtility.<>c__DisplayClass4_0 CS$<>8__locals1; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x672DD0 Offset: 0x6715D0 VA: 0x180672DD0
	internal bool <CollectTerrains>b__0(Terrain x) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 1991
{}

// Namespace: UnityEngine.XR
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public static class InputTracking // TypeDefIndex: 1992
{
	// Fields
	private static Action<XRNodeState> trackingAcquired; // 0x0
	private static Action<XRNodeState> trackingLost; // 0x8
	private static Action<XRNodeState> nodeAdded; // 0x10
	private static Action<XRNodeState> nodeRemoved; // 0x18

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x67C400 Offset: 0x67AC00 VA: 0x18067C400
	private static void InvokeTrackingEvent(InputTracking.TrackingStateEventType eventType, XRNode nodeType, long uniqueID, bool tracked) { }
	// RVA: 0x67C650 Offset: 0x67AE50 VA: 0x18067C650
	private static void .cctor() { }
}

// Namespace: 
private enum InputTracking.TrackingStateEventType // TypeDefIndex: 1993
{
	// Fields
	public int value__; // 0x0
	public const InputTracking.TrackingStateEventType NodeAdded = 0; // 0x0
	public const InputTracking.TrackingStateEventType NodeRemoved = 1; // 0x0
	public const InputTracking.TrackingStateEventType TrackingAcquired = 2; // 0x0
	public const InputTracking.TrackingStateEventType TrackingLost = 3; // 0x0
}

// Namespace: UnityEngine.XR
public enum XRNode // TypeDefIndex: 1994
{
	// Fields
	public int value__; // 0x0
	public const XRNode LeftEye = 0; // 0x0
	public const XRNode RightEye = 1; // 0x0
	public const XRNode CenterEye = 2; // 0x0
	public const XRNode Head = 3; // 0x0
	public const XRNode LeftHand = 4; // 0x0
	public const XRNode RightHand = 5; // 0x0
	public const XRNode GameController = 6; // 0x0
	public const XRNode TrackingReference = 7; // 0x0
	public const XRNode HardwareTracker = 8; // 0x0
}

// Namespace: UnityEngine.XR
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum AvailableTrackingData // TypeDefIndex: 1995
{
	// Fields
	public int value__; // 0x0
	public const AvailableTrackingData None = 0; // 0x0
	public const AvailableTrackingData PositionAvailable = 1; // 0x0
	public const AvailableTrackingData RotationAvailable = 2; // 0x0
	public const AvailableTrackingData VelocityAvailable = 4; // 0x0
	public const AvailableTrackingData AngularVelocityAvailable = 8; // 0x0
	public const AvailableTrackingData AccelerationAvailable = 16; // 0x0
	public const AvailableTrackingData AngularAccelerationAvailable = 32; // 0x0
}

// Namespace: UnityEngine.XR
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct XRNodeState // TypeDefIndex: 1996
{
	// Fields
	private XRNode m_Type; // 0x0
	private AvailableTrackingData m_AvailableFields; // 0x4
	private Vector3 m_Position; // 0x8
	private Quaternion m_Rotation; // 0x14
	private Vector3 m_Velocity; // 0x24
	private Vector3 m_AngularVelocity; // 0x30
	private Vector3 m_Acceleration; // 0x3C
	private Vector3 m_AngularAcceleration; // 0x48
	private int m_Tracked; // 0x54
	private ulong m_UniqueID; // 0x58

	// Properties
	set; }
	public XRNode nodeType { set; }
	public bool tracked { set; }

	// Methods
	// RVA: 0x176F0 Offset: 0x16AF0 VA: 0x1800176F0
	public void set_uniqueID(ulong value) { }
	// RVA: 0x1ED0 Offset: 0x12D0 VA: 0x180001ED0
	public void set_nodeType(XRNode value) { }
	// RVA: 0x27C20 Offset: 0x27020 VA: 0x180027C20
	public void set_tracked(bool value) { }
}

// Namespace: UnityEngine.XR
internal enum InputFeatureType // TypeDefIndex: 1997
{
	// Fields
	public uint value__; // 0x0
	public const InputFeatureType Custom = 0; // 0x0
	public const InputFeatureType Binary = 1; // 0x0
	public const InputFeatureType DiscreteStates = 2; // 0x0
	public const InputFeatureType Axis1D = 3; // 0x0
	public const InputFeatureType Axis2D = 4; // 0x0
	public const InputFeatureType Axis3D = 5; // 0x0
	public const InputFeatureType Rotation = 6; // 0x0
	public const InputFeatureType Hand = 7; // 0x0
	public const InputFeatureType Bone = 8; // 0x0
	public const InputFeatureType Eyes = 9; // 0x0
	public const InputFeatureType kUnityXRInputFeatureTypeInvalid = 4294967295; // 0x0
}

// Namespace: UnityEngine.XR
internal enum ConnectionChangeType // TypeDefIndex: 1998
{
	// Fields
	public uint value__; // 0x0
	public const ConnectionChangeType Connected = 0; // 0x0
	public const ConnectionChangeType Disconnected = 1; // 0x0
	public const ConnectionChangeType ConfigChange = 2; // 0x0
}

// Namespace: UnityEngine.XR
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct InputFeatureUsage : IEquatable<InputFeatureUsage> // TypeDefIndex: 1999
{
	// Fields
	internal string m_Name; // 0x0
	internal InputFeatureType m_InternalType; // 0x8

	// Properties
	public string name { get; }
	internal InputFeatureType internalType { get; }

	// Methods
	// RVA: 0x27000 Offset: 0x26400 VA: 0x180027000
	public string get_name() { }
	// RVA: 0x16080 Offset: 0x15480 VA: 0x180016080
	internal InputFeatureType get_internalType() { }
	// RVA: 0x27580 Offset: 0x26980 VA: 0x180027580 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x276F0 Offset: 0x26AF0 VA: 0x1800276F0 Slot: 4
	public bool Equals(InputFeatureUsage other) { }
	// RVA: 0x277A0 Offset: 0x26BA0 VA: 0x1800277A0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.XR
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct InputDevice : IEquatable<InputDevice> // TypeDefIndex: 2000
{
	// Fields
	private ulong m_DeviceId; // 0x0
	private bool m_Initialized; // 0x8

	// Properties
	private ulong deviceId { get; }

	// Methods
	// RVA: 0x27370 Offset: 0x26770 VA: 0x180027370
	internal void .ctor(ulong deviceId) { }
	// RVA: 0x27380 Offset: 0x26780 VA: 0x180027380
	private ulong get_deviceId() { }
	// RVA: 0x273A0 Offset: 0x267A0 VA: 0x1800273A0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x27490 Offset: 0x26890 VA: 0x180027490 Slot: 4
	public bool Equals(InputDevice other) { }
	// RVA: 0x274D0 Offset: 0x268D0 VA: 0x1800274D0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.XR
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Hand : IEquatable<Hand> // TypeDefIndex: 2001
{
	// Fields
	private ulong m_DeviceId; // 0x0
	private uint m_FeatureIndex; // 0x8

	// Properties
	internal ulong deviceId { get; }
	internal uint featureIndex { get; }

	// Methods
	// RVA: 0x27000 Offset: 0x26400 VA: 0x180027000
	internal ulong get_deviceId() { }
	// RVA: 0x16080 Offset: 0x15480 VA: 0x180016080
	internal uint get_featureIndex() { }
	// RVA: 0x27250 Offset: 0x26650 VA: 0x180027250 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x27100 Offset: 0x26500 VA: 0x180027100 Slot: 4
	public bool Equals(Hand other) { }
	// RVA: 0x27140 Offset: 0x26540 VA: 0x180027140 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.XR
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Eyes : IEquatable<Eyes> // TypeDefIndex: 2002
{
	// Fields
	private ulong m_DeviceId; // 0x0
	private uint m_FeatureIndex; // 0x8

	// Properties
	internal ulong deviceId { get; }
	internal uint featureIndex { get; }

	// Methods
	// RVA: 0x27000 Offset: 0x26400 VA: 0x180027000
	internal ulong get_deviceId() { }
	// RVA: 0x16080 Offset: 0x15480 VA: 0x180016080
	internal uint get_featureIndex() { }
	// RVA: 0x27160 Offset: 0x26560 VA: 0x180027160 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x27100 Offset: 0x26500 VA: 0x180027100 Slot: 4
	public bool Equals(Eyes other) { }
	// RVA: 0x27140 Offset: 0x26540 VA: 0x180027140 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.XR
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct Bone : IEquatable<Bone> // TypeDefIndex: 2003
{
	// Fields
	private ulong m_DeviceId; // 0x0
	private uint m_FeatureIndex; // 0x8

	// Properties
	internal ulong deviceId { get; }
	internal uint featureIndex { get; }

	// Methods
	// RVA: 0x27000 Offset: 0x26400 VA: 0x180027000
	internal ulong get_deviceId() { }
	// RVA: 0x16080 Offset: 0x15480 VA: 0x180016080
	internal uint get_featureIndex() { }
	// RVA: 0x27010 Offset: 0x26410 VA: 0x180027010 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x27100 Offset: 0x26500 VA: 0x180027100 Slot: 4
	public bool Equals(Bone other) { }
	// RVA: 0x27140 Offset: 0x26540 VA: 0x180027140 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.XR
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class InputDevices // TypeDefIndex: 2004
{
	// Fields
	private static Action<InputDevice> deviceConnected; // 0x0
	private static Action<InputDevice> deviceDisconnected; // 0x8
	private static Action<InputDevice> deviceConfigChanged; // 0x10

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x67C310 Offset: 0x67AB10 VA: 0x18067C310
	private static void InvokeConnectionEvent(ulong deviceId, ConnectionChangeType change) { }
}

// Namespace: UnityEngine.XR
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class XRDisplaySubsystem : IntegratedSubsystem<XRDisplaySubsystemDescriptor> // TypeDefIndex: 2005
{
	// Fields
	private Action<bool> displayFocusChanged; // 0x20

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x67C930 Offset: 0x67B130 VA: 0x18067C930
	private void InvokeDisplayFocusChanged(bool focus) { }
	// RVA: 0x67C9C0 Offset: 0x67B1C0 VA: 0x18067C9C0
	public void .ctor() { }
}

// Namespace: 
public struct XRDisplaySubsystem.XRRenderPass // TypeDefIndex: 2006
{
	// Fields
	private IntPtr displaySubsystemInstance; // 0x0
	public int renderPassIndex; // 0x8
	public RenderTargetIdentifier renderTarget; // 0x10
	public RenderTextureDescriptor renderTargetDesc; // 0x38
	public bool shouldFillOutDepth; // 0x6C
	public int cullingPassIndex; // 0x70
}

// Namespace: 
public struct XRDisplaySubsystem.XRMirrorViewBlitDesc // TypeDefIndex: 2007
{
	// Fields
	private IntPtr displaySubsystemInstance; // 0x0
	public bool nativeBlitAvailable; // 0x8
	public bool nativeBlitInvalidStates; // 0x9
	public int blitParamsCount; // 0xC
}

// Namespace: UnityEngine.XR
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class XRDisplaySubsystemDescriptor : IntegratedSubsystemDescriptor<XRDisplaySubsystem> // TypeDefIndex: 2008
{
	// Methods
	// RVA: 0x67CA40 Offset: 0x67B240 VA: 0x18067CA40
	public void .ctor() { }
}

// Namespace: UnityEngine.XR
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class XRInputSubsystem : IntegratedSubsystem<XRInputSubsystemDescriptor> // TypeDefIndex: 2009
{
	// Fields
	private Action<XRInputSubsystem> trackingOriginUpdated; // 0x20
	private Action<XRInputSubsystem> boundaryChanged; // 0x28

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0xDD2D0 Offset: 0xDC6D0 VA: 0x1800DD2D0
	// RVA: 0x67CAC0 Offset: 0x67B2C0 VA: 0x18067CAC0
	private static void InvokeTrackingOriginUpdatedEvent(IntPtr internalPtr) { }
	[RequiredByNativeCodeAttribute] // RVA: 0xDD2D0 Offset: 0xDC6D0 VA: 0x1800DD2D0
	// RVA: 0x67CBB0 Offset: 0x67B3B0 VA: 0x18067CBB0
	private static void InvokeBoundaryChangedEvent(IntPtr internalPtr) { }
	// RVA: 0x67CCA0 Offset: 0x67B4A0 VA: 0x18067CCA0
	public void .ctor() { }
}

// Namespace: UnityEngine.XR
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class XRInputSubsystemDescriptor : IntegratedSubsystemDescriptor<XRInputSubsystem> // TypeDefIndex: 2010
{
	// Methods
	// RVA: 0x67CD20 Offset: 0x67B520 VA: 0x18067CD20
	public void .ctor() { }
}

// Namespace: UnityEngine.XR
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct MeshId : IEquatable<MeshId> // TypeDefIndex: 2011
{
	// Fields
	private static MeshId s_InvalidId; // 0x0
	private ulong m_SubId1; // 0x0
	private ulong m_SubId2; // 0x8

	// Methods
	// RVA: 0x279D0 Offset: 0x26DD0 VA: 0x1800279D0 Slot: 3
	public override string ToString() { }
	// RVA: 0x27AF0 Offset: 0x26EF0 VA: 0x180027AF0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x27B10 Offset: 0x26F10 VA: 0x180027B10 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x27BF0 Offset: 0x26FF0 VA: 0x180027BF0 Slot: 4
	public bool Equals(MeshId other) { }
	// RVA: 0x67C8B0 Offset: 0x67B0B0 VA: 0x18067C8B0
	private static void .cctor() { }
}

// Namespace: UnityEngine.XR
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum MeshGenerationStatus // TypeDefIndex: 2012
{
	// Fields
	public int value__; // 0x0
	public const MeshGenerationStatus Success = 0; // 0x0
	public const MeshGenerationStatus InvalidMeshId = 1; // 0x0
	public const MeshGenerationStatus GenerationAlreadyInProgress = 2; // 0x0
	public const MeshGenerationStatus Canceled = 3; // 0x0
	public const MeshGenerationStatus UnknownError = 4; // 0x0
}

// Namespace: UnityEngine.XR
internal static class HashCodeHelper // TypeDefIndex: 2013
{
	// Methods
	// RVA: 0x67C300 Offset: 0x67AB00 VA: 0x18067C300
	public static int Combine(int hash1, int hash2) { }
}

// Namespace: UnityEngine.XR
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct MeshGenerationResult : IEquatable<MeshGenerationResult> // TypeDefIndex: 2014
{
	// Fields
	private readonly MeshId <MeshId>k__BackingField; // 0x0
	private readonly Mesh <Mesh>k__BackingField; // 0x10
	private readonly MeshCollider <MeshCollider>k__BackingField; // 0x18
	private readonly MeshGenerationStatus <Status>k__BackingField; // 0x20
	private readonly MeshVertexAttributes <Attributes>k__BackingField; // 0x24

	// Properties
	public MeshId MeshId { get; }
	public Mesh Mesh { get; }
	public MeshCollider MeshCollider { get; }
	public MeshGenerationStatus Status { get; }
	public MeshVertexAttributes Attributes { get; }

	// Methods
	// RVA: 0x86B0 Offset: 0x7AB0 VA: 0x1800086B0
	public MeshId get_MeshId() { }
	// RVA: 0x2100 Offset: 0x1500 VA: 0x180002100
	public Mesh get_Mesh() { }
	// RVA: 0x23D0 Offset: 0x17D0 VA: 0x1800023D0
	public MeshCollider get_MeshCollider() { }
	// RVA: 0x64B0 Offset: 0x58B0 VA: 0x1800064B0
	public MeshGenerationStatus get_Status() { }
	// RVA: 0xE980 Offset: 0xDD80 VA: 0x18000E980
	public MeshVertexAttributes get_Attributes() { }
	// RVA: 0x27800 Offset: 0x26C00 VA: 0x180027800 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x278F0 Offset: 0x26CF0 VA: 0x1800278F0 Slot: 4
	public bool Equals(MeshGenerationResult other) { }
	// RVA: 0x27930 Offset: 0x26D30 VA: 0x180027930 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.XR
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum MeshVertexAttributes // TypeDefIndex: 2015
{
	// Fields
	public int value__; // 0x0
	public const MeshVertexAttributes None = 0; // 0x0
	public const MeshVertexAttributes Normals = 1; // 0x0
	public const MeshVertexAttributes Tangents = 2; // 0x0
	public const MeshVertexAttributes UVs = 4; // 0x0
	public const MeshVertexAttributes Colors = 8; // 0x0
}

// Namespace: UnityEngine.XR
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class XRMeshSubsystem : IntegratedSubsystem<XRMeshSubsystemDescriptor> // TypeDefIndex: 2016
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x67CDA0 Offset: 0x67B5A0 VA: 0x18067CDA0
	private void InvokeMeshReadyDelegate(MeshGenerationResult result, Action<MeshGenerationResult> onMeshGenerationComplete) { }
	// RVA: 0x67CE50 Offset: 0x67B650 VA: 0x18067CE50
	public void .ctor() { }
}

// Namespace: UnityEngine.XR
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class XRMeshSubsystemDescriptor : IntegratedSubsystemDescriptor<XRMeshSubsystem> // TypeDefIndex: 2017
{
	// Methods
	// RVA: 0x67CED0 Offset: 0x67B6D0 VA: 0x18067CED0
	public void .ctor() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2018
{}

// Namespace: UnityEngine.AI
[MovedFromAttribute] // RVA: 0xEB140 Offset: 0xEA540 VA: 0x1800EB140
public sealed class NavMeshPath // TypeDefIndex: 2019
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	internal Vector3[] m_Corners; // 0x18

	// Properties
	public Vector3[] corners { get; }

	// Methods
	// RVA: 0x68D7C0 Offset: 0x68BFC0 VA: 0x18068D7C0
	public void .ctor() { }
	// RVA: 0x68D810 Offset: 0x68C010 VA: 0x18068D810 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x68D920 Offset: 0x68C120 VA: 0x18068D920
	private static IntPtr InitializeNavMeshPath() { }
	// RVA: 0x68D970 Offset: 0x68C170 VA: 0x18068D970
	private static void DestroyNavMeshPath(IntPtr ptr) { }
	// RVA: 0x68D9C0 Offset: 0x68C1C0 VA: 0x18068D9C0
	private Vector3[] CalculateCornersInternal() { }
	// RVA: 0x68DA10 Offset: 0x68C210 VA: 0x18068DA10
	private void ClearCornersInternal() { }
	// RVA: 0x68DA60 Offset: 0x68C260 VA: 0x18068DA60
	public void ClearCorners() { }
	// RVA: 0x68DAC0 Offset: 0x68C2C0 VA: 0x18068DAC0
	private void CalculateCorners() { }
	// RVA: 0x68DB20 Offset: 0x68C320 VA: 0x18068DB20
	public Vector3[] get_corners() { }
}

// Namespace: UnityEngine.AI
[MovedFromAttribute] // RVA: 0xEB140 Offset: 0xEA540 VA: 0x1800EB140
public static class NavMesh // TypeDefIndex: 2020
{
	// Fields
	public static NavMesh.OnNavMeshPreUpdate onPreUpdate; // 0xABB68

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68D530 Offset: 0x68BD30 VA: 0x18068D530
	private static void Internal_CallOnNavMeshPreUpdate() { }
	// RVA: 0x68D5C0 Offset: 0x68BDC0 VA: 0x18068D5C0
	public static bool CalculatePath(Vector3 sourcePosition, Vector3 targetPosition, int areaMask, NavMeshPath path) { }
	// RVA: 0x68D6C0 Offset: 0x68BEC0 VA: 0x18068D6C0
	private static bool CalculatePathInternal(Vector3 sourcePosition, Vector3 targetPosition, int areaMask, NavMeshPath path) { }
	// RVA: 0x68D740 Offset: 0x68BF40 VA: 0x18068D740
	private static bool CalculatePathInternal_Injected(ref Vector3 sourcePosition, ref Vector3 targetPosition, int areaMask, NavMeshPath path) { }
}

// Namespace: 
public sealed class NavMesh.OnNavMeshPreUpdate : MulticastDelegate // TypeDefIndex: 2021
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2022
{}

// Namespace: UnityEngine
public sealed class AndroidJavaRunnable : MulticastDelegate // TypeDefIndex: 2023
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public sealed class AndroidJavaException : Exception // TypeDefIndex: 2024
{
	// Fields
	private string mJavaStackTrace; // 0x88

	// Properties
	public override string StackTrace { get; }

	// Methods
	// RVA: 0x64E660 Offset: 0x64CE60 VA: 0x18064E660
	internal void .ctor(string message, string javaStackTrace) { }
	// RVA: 0x64E720 Offset: 0x64CF20 VA: 0x18064E720 Slot: 8
	public override string get_StackTrace() { }
}

// Namespace: UnityEngine
internal class GlobalJavaObjectRef // TypeDefIndex: 2025
{
	// Fields
	private bool m_disposed; // 0x10
	protected IntPtr m_jobject; // 0x18

	// Methods
	// RVA: 0x650C20 Offset: 0x64F420 VA: 0x180650C20
	public void .ctor(IntPtr jobject) { }
	// RVA: 0x650CF0 Offset: 0x64F4F0 VA: 0x180650CF0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x650D70 Offset: 0x64F570 VA: 0x180650D70
	public static IntPtr op_Implicit(GlobalJavaObjectRef obj) { }
	// RVA: 0x650D90 Offset: 0x64F590 VA: 0x180650D90
	public void Dispose() { }
}

// Namespace: UnityEngine
internal class AndroidJavaRunnableProxy : AndroidJavaProxy // TypeDefIndex: 2026
{
	// Fields
	private AndroidJavaRunnable mRunnable; // 0x20

	// Methods
	// RVA: 0x64FFD0 Offset: 0x64E7D0 VA: 0x18064FFD0
	public void .ctor(AndroidJavaRunnable runnable) { }
}

// Namespace: UnityEngine
public class AndroidJavaProxy // TypeDefIndex: 2027
{
	// Fields
	public readonly AndroidJavaClass javaInterface; // 0x10
	internal IntPtr proxyObject; // 0x18
	private static readonly GlobalJavaObjectRef s_JavaLangSystemClass; // 0x0
	private static readonly IntPtr s_HashCodeMethodID; // 0x8

	// Methods
	// RVA: 0x64F000 Offset: 0x64D800 VA: 0x18064F000
	public void .ctor(string javaInterface) { }
	// RVA: 0x64F110 Offset: 0x64D910 VA: 0x18064F110
	public void .ctor(AndroidJavaClass javaInterface) { }
	// RVA: 0x64F1B0 Offset: 0x64D9B0 VA: 0x18064F1B0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x64F2C0 Offset: 0x64DAC0 VA: 0x18064F2C0 Slot: 4
	public virtual AndroidJavaObject Invoke(string methodName, object[] args) { }
	// RVA: 0x64FA40 Offset: 0x64E240 VA: 0x18064FA40 Slot: 5
	public virtual AndroidJavaObject Invoke(string methodName, AndroidJavaObject[] javaArgs) { }
	// RVA: 0x64FCB0 Offset: 0x64E4B0 VA: 0x18064FCB0
	internal AndroidJavaObject GetProxyObject() { }
	// RVA: 0x64FD50 Offset: 0x64E550 VA: 0x18064FD50
	internal IntPtr GetRawProxy() { }
	// RVA: 0x64FEC0 Offset: 0x64E6C0 VA: 0x18064FEC0
	private static void .cctor() { }
}

// Namespace: UnityEngine
public class AndroidJavaObject : IDisposable // TypeDefIndex: 2028
{
	// Fields
	private static bool enableDebugPrints; // 0x0
	internal GlobalJavaObjectRef m_jobject; // 0x10
	internal GlobalJavaObjectRef m_jclass; // 0x18

	// Methods
	// RVA: 0x64E780 Offset: 0x64CF80 VA: 0x18064E780
	public void .ctor(string className, object[] args) { }
	// RVA: 0x64E790 Offset: 0x64CF90 VA: 0x18064E790 Slot: 4
	public void Dispose() { }
	// RVA: 0x64E840 Offset: 0x64D040 VA: 0x18064E840
	public IntPtr GetRawObject() { }
	// RVA: 0x64E860 Offset: 0x64D060 VA: 0x18064E860
	public IntPtr GetRawClass() { }
	// RVA: 0x4ADA50 Offset: 0x4AC250 VA: 0x1804ADA50
	public ReturnType Call(string methodName, object[] args) { }
	// RVA: 0x4ADA50 Offset: 0x4AC250 VA: 0x1804ADA50
	public ReturnType CallStatic(string methodName, object[] args) { }
	// RVA: 0x64E880 Offset: 0x64D080 VA: 0x18064E880
	protected void DebugPrint(string msg) { }
	// RVA: 0x64E950 Offset: 0x64D150 VA: 0x18064E950
	private void _AndroidJavaObject(string className, object[] args) { }
	// RVA: 0x64EB80 Offset: 0x64D380 VA: 0x18064EB80
	internal void .ctor(IntPtr jobject) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x64ECA0 Offset: 0x64D4A0 VA: 0x18064ECA0 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x64ED20 Offset: 0x64D520 VA: 0x18064ED20 Slot: 5
	protected virtual void Dispose(bool disposing) { }
	// RVA: 0x4ADA70 Offset: 0x4AC270 VA: 0x1804ADA70
	protected ReturnType _Call(string methodName, object[] args) { }
	// RVA: 0x4B6040 Offset: 0x4B4840 VA: 0x1804B6040
	protected ReturnType _CallStatic(string methodName, object[] args) { }
	// RVA: 0x64ED60 Offset: 0x64D560 VA: 0x18064ED60
	internal static AndroidJavaObject AndroidJavaObjectDeleteLocalRef(IntPtr jobject) { }
	// RVA: 0x64EE70 Offset: 0x64D670 VA: 0x18064EE70
	internal static AndroidJavaClass AndroidJavaClassDeleteLocalRef(IntPtr jclass) { }
	// RVA: 0x64E840 Offset: 0x64D040 VA: 0x18064E840
	protected IntPtr _GetRawObject() { }
	// RVA: 0x64E860 Offset: 0x64D060 VA: 0x18064E860
	protected IntPtr _GetRawClass() { }
	// RVA: 0x64EF80 Offset: 0x64D780 VA: 0x18064EF80
	private static void .cctor() { }
}

// Namespace: UnityEngine
public class AndroidJavaClass : AndroidJavaObject // TypeDefIndex: 2029
{
	// Methods
	// RVA: 0x64E190 Offset: 0x64C990 VA: 0x18064E190
	public void .ctor(string className) { }
	// RVA: 0x64E370 Offset: 0x64CB70 VA: 0x18064E370
	private void _AndroidJavaClass(string className) { }
	// RVA: 0x64E4E0 Offset: 0x64CCE0 VA: 0x18064E4E0
	internal void .ctor(IntPtr jclass) { }
}

// Namespace: UnityEngine
internal class AndroidReflection // TypeDefIndex: 2030
{
	// Fields
	private static readonly GlobalJavaObjectRef s_ReflectionHelperClass; // 0x0
	private static readonly IntPtr s_ReflectionHelperGetConstructorID; // 0x8
	private static readonly IntPtr s_ReflectionHelperGetMethodID; // 0x10
	private static readonly IntPtr s_ReflectionHelperGetFieldID; // 0x18
	private static readonly IntPtr s_ReflectionHelperGetFieldSignature; // 0x20
	private static readonly IntPtr s_ReflectionHelperNewProxyInstance; // 0x28
	private static readonly IntPtr s_ReflectionHelperSetNativeExceptionOnProxy; // 0x30
	private static readonly IntPtr s_FieldGetDeclaringClass; // 0x38

	// Methods
	// RVA: 0x650160 Offset: 0x64E960 VA: 0x180650160
	public static bool IsPrimitive(Type t) { }
	// RVA: 0x650190 Offset: 0x64E990 VA: 0x180650190
	public static bool IsAssignableFrom(Type t, Type from) { }
	// RVA: 0x6501C0 Offset: 0x64E9C0 VA: 0x1806501C0
	private static IntPtr GetStaticMethodID(string clazz, string methodName, string signature) { }
	// RVA: 0x650280 Offset: 0x64EA80 VA: 0x180650280
	private static IntPtr GetMethodID(string clazz, string methodName, string signature) { }
	// RVA: 0x650340 Offset: 0x64EB40 VA: 0x180650340
	public static IntPtr GetConstructorMember(IntPtr jclass, string signature) { }
	// RVA: 0x650520 Offset: 0x64ED20 VA: 0x180650520
	public static IntPtr GetMethodMember(IntPtr jclass, string methodName, string signature, bool isStatic) { }
	// RVA: 0x6507A0 Offset: 0x64EFA0 VA: 0x1806507A0
	public static IntPtr NewProxyInstance(IntPtr delegateHandle, IntPtr interfaze) { }
	// RVA: 0x6508C0 Offset: 0x64F0C0 VA: 0x1806508C0
	public static void SetNativeExceptionOnProxy(IntPtr proxy, Exception e, bool methodNotFound) { }
	// RVA: 0x650A20 Offset: 0x64F220 VA: 0x180650A20
	private static void .cctor() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class _AndroidJNIHelper // TypeDefIndex: 2031
{
	// Methods
	// RVA: 0x650EB0 Offset: 0x64F6B0 VA: 0x180650EB0
	public static IntPtr CreateJavaProxy(IntPtr delegateHandle, AndroidJavaProxy proxy) { }
	// RVA: 0x651080 Offset: 0x64F880 VA: 0x180651080
	public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x651280 Offset: 0x64FA80 VA: 0x180651280
	public static IntPtr InvokeJavaProxyMethod(AndroidJavaProxy proxy, IntPtr jmethodName, IntPtr jargs) { }
	// RVA: 0x6515D0 Offset: 0x64FDD0 VA: 0x1806515D0
	public static jvalue[] CreateJNIArgArray(object[] args) { }
	// RVA: 0x652070 Offset: 0x650870 VA: 0x180652070
	public static object UnboxArray(AndroidJavaObject obj) { }
	// RVA: 0x652810 Offset: 0x651010 VA: 0x180652810
	public static object Unbox(AndroidJavaObject obj) { }
	// RVA: 0x653110 Offset: 0x651910 VA: 0x180653110
	public static AndroidJavaObject Box(object obj) { }
	// RVA: 0x64B1B0 Offset: 0x6499B0 VA: 0x18064B1B0
	public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs) { }
	// RVA: 0x653E90 Offset: 0x652690 VA: 0x180653E90
	public static IntPtr ConvertToJNIArray(Array array) { }
	// RVA: 0x42B620 Offset: 0x429E20 VA: 0x18042B620
	public static ArrayType ConvertFromJNIArray(IntPtr array) { }
	// RVA: 0x64B320 Offset: 0x649B20 VA: 0x18064B320
	public static IntPtr GetConstructorID(IntPtr jclass, object[] args) { }
	// RVA: 0x430E80 Offset: 0x42F680 VA: 0x180430E80
	public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic) { }
	// RVA: 0x654720 Offset: 0x652F20 VA: 0x180654720
	public static IntPtr GetConstructorID(IntPtr jclass, string signature) { }
	// RVA: 0x6548E0 Offset: 0x6530E0 VA: 0x1806548E0
	public static IntPtr GetMethodID(IntPtr jclass, string methodName, string signature, bool isStatic) { }
	// RVA: 0x654AB0 Offset: 0x6532B0 VA: 0x180654AB0
	private static IntPtr GetMethodIDFallback(IntPtr jclass, string methodName, string signature, bool isStatic) { }
	// RVA: 0x654B80 Offset: 0x653380 VA: 0x180654B80
	public static string GetSignature(object obj) { }
	// RVA: 0x655790 Offset: 0x653F90 VA: 0x180655790
	public static string GetSignature(object[] args) { }
	// RVA: 0x430EE0 Offset: 0x42F6E0 VA: 0x180430EE0
	public static string GetSignature(object[] args) { }
}

// Namespace: UnityEngine
public struct jvalue // TypeDefIndex: 2032
{
	// Fields
	public bool z; // 0x0
	public sbyte b; // 0x0
	public char c; // 0x0
	public short s; // 0x0
	public int i; // 0x0
	public long j; // 0x0
	public float f; // 0x0
	public double d; // 0x0
	public IntPtr l; // 0x0
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public static class AndroidJNIHelper // TypeDefIndex: 2033
{
	// Methods
	// RVA: 0x64B0B0 Offset: 0x6498B0 VA: 0x18064B0B0
	public static IntPtr GetConstructorID(IntPtr javaClass, string signature) { }
	// RVA: 0x64B0C0 Offset: 0x6498C0 VA: 0x18064B0C0
	public static IntPtr GetMethodID(IntPtr javaClass, string methodName, string signature, bool isStatic) { }
	// RVA: 0x64B0D0 Offset: 0x6498D0 VA: 0x18064B0D0
	public static IntPtr CreateJavaRunnable(AndroidJavaRunnable jrunnable) { }
	// RVA: 0x64B0E0 Offset: 0x6498E0 VA: 0x18064B0E0
	public static IntPtr CreateJavaProxy(AndroidJavaProxy proxy) { }
	// RVA: 0x64B1A0 Offset: 0x6499A0 VA: 0x18064B1A0
	public static jvalue[] CreateJNIArgArray(object[] args) { }
	// RVA: 0x64B1B0 Offset: 0x6499B0 VA: 0x18064B1B0
	public static void DeleteJNIArgArray(object[] args, jvalue[] jniArgs) { }
	// RVA: 0x64B320 Offset: 0x649B20 VA: 0x18064B320
	public static IntPtr GetConstructorID(IntPtr jclass, object[] args) { }
	// RVA: 0x4ADA20 Offset: 0x4AC220 VA: 0x1804ADA20
	public static ArrayType ConvertFromJNIArray(IntPtr array) { }
	// RVA: 0x4ADA30 Offset: 0x4AC230 VA: 0x1804ADA30
	public static IntPtr GetMethodID(IntPtr jclass, string methodName, object[] args, bool isStatic) { }
}

// Namespace: UnityEngine
public static class AndroidJNI // TypeDefIndex: 2034
{
	// Methods
	// RVA: 0x649A90 Offset: 0x648290 VA: 0x180649A90
	public static IntPtr FindClass(string name) { }
	// RVA: 0x649AE0 Offset: 0x6482E0 VA: 0x180649AE0
	public static IntPtr FromReflectedMethod(IntPtr refMethod) { }
	// RVA: 0x649B30 Offset: 0x648330 VA: 0x180649B30
	public static IntPtr ExceptionOccurred() { }
	// RVA: 0x649B80 Offset: 0x648380 VA: 0x180649B80
	public static void ExceptionClear() { }
	// RVA: 0x649BD0 Offset: 0x6483D0 VA: 0x180649BD0
	public static IntPtr NewGlobalRef(IntPtr obj) { }
	// RVA: 0x649C20 Offset: 0x648420 VA: 0x180649C20
	public static void DeleteGlobalRef(IntPtr obj) { }
	// RVA: 0x649C70 Offset: 0x648470 VA: 0x180649C70
	public static IntPtr NewWeakGlobalRef(IntPtr obj) { }
	// RVA: 0x649CC0 Offset: 0x6484C0 VA: 0x180649CC0
	public static void DeleteWeakGlobalRef(IntPtr obj) { }
	// RVA: 0x649D10 Offset: 0x648510 VA: 0x180649D10
	public static IntPtr NewLocalRef(IntPtr obj) { }
	// RVA: 0x649D60 Offset: 0x648560 VA: 0x180649D60
	public static void DeleteLocalRef(IntPtr obj) { }
	// RVA: 0x649DB0 Offset: 0x6485B0 VA: 0x180649DB0
	public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x649E20 Offset: 0x648620 VA: 0x180649E20
	public static IntPtr GetObjectClass(IntPtr obj) { }
	// RVA: 0x649E70 Offset: 0x648670 VA: 0x180649E70
	public static IntPtr GetMethodID(IntPtr clazz, string name, string sig) { }
	// RVA: 0x649EE0 Offset: 0x6486E0 VA: 0x180649EE0
	public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig) { }
	// RVA: 0x649F50 Offset: 0x648750 VA: 0x180649F50
	public static IntPtr NewString(string chars) { }
	// RVA: 0x649F50 Offset: 0x648750 VA: 0x180649F50
	private static IntPtr NewStringFromStr(string chars) { }
	// RVA: 0x649FA0 Offset: 0x6487A0 VA: 0x180649FA0
	public static string GetStringChars(IntPtr str) { }
	// RVA: 0x649FF0 Offset: 0x6487F0 VA: 0x180649FF0
	public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A060 Offset: 0x648860 VA: 0x18064A060
	public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A0D0 Offset: 0x6488D0 VA: 0x18064A0D0
	public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A140 Offset: 0x648940 VA: 0x18064A140
	public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A1B0 Offset: 0x6489B0 VA: 0x18064A1B0
	public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A220 Offset: 0x648A20 VA: 0x18064A220
	public static sbyte CallSByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A290 Offset: 0x648A90 VA: 0x18064A290
	public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A300 Offset: 0x648B00 VA: 0x18064A300
	public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A370 Offset: 0x648B70 VA: 0x18064A370
	public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A3E0 Offset: 0x648BE0 VA: 0x18064A3E0
	public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A450 Offset: 0x648C50 VA: 0x18064A450
	public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A4C0 Offset: 0x648CC0 VA: 0x18064A4C0
	public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A530 Offset: 0x648D30 VA: 0x18064A530
	public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A5A0 Offset: 0x648DA0 VA: 0x18064A5A0
	public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A610 Offset: 0x648E10 VA: 0x18064A610
	public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A680 Offset: 0x648E80 VA: 0x18064A680
	public static sbyte CallStaticSByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A6F0 Offset: 0x648EF0 VA: 0x18064A6F0
	public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A760 Offset: 0x648F60 VA: 0x18064A760
	public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A7D0 Offset: 0x648FD0 VA: 0x18064A7D0
	public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A840 Offset: 0x649040 VA: 0x18064A840
	public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A8B0 Offset: 0x6490B0 VA: 0x18064A8B0
	public static void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64A920 Offset: 0x649120 VA: 0x18064A920
	public static IntPtr ToBooleanArray(bool[] array) { }
	[ObsoleteAttribute] // RVA: 0xEC450 Offset: 0xEB850 VA: 0x1800EC450
	// RVA: 0x64A970 Offset: 0x649170 VA: 0x18064A970
	public static IntPtr ToByteArray(byte[] array) { }
	// RVA: 0x64A9C0 Offset: 0x6491C0 VA: 0x18064A9C0
	public static IntPtr ToSByteArray(sbyte[] array) { }
	// RVA: 0x64AA10 Offset: 0x649210 VA: 0x18064AA10
	public static IntPtr ToCharArray(char[] array) { }
	// RVA: 0x64AA60 Offset: 0x649260 VA: 0x18064AA60
	public static IntPtr ToShortArray(short[] array) { }
	// RVA: 0x64AAB0 Offset: 0x6492B0 VA: 0x18064AAB0
	public static IntPtr ToIntArray(int[] array) { }
	// RVA: 0x64AB00 Offset: 0x649300 VA: 0x18064AB00
	public static IntPtr ToLongArray(long[] array) { }
	// RVA: 0x64AB50 Offset: 0x649350 VA: 0x18064AB50
	public static IntPtr ToFloatArray(float[] array) { }
	// RVA: 0x64ABA0 Offset: 0x6493A0 VA: 0x18064ABA0
	public static IntPtr ToDoubleArray(double[] array) { }
	// RVA: 0x64ABF0 Offset: 0x6493F0 VA: 0x18064ABF0
	public static IntPtr ToObjectArray(IntPtr[] array, IntPtr arrayClass) { }
	// RVA: 0x64AC50 Offset: 0x649450 VA: 0x18064AC50
	public static bool[] FromBooleanArray(IntPtr array) { }
	[ObsoleteAttribute] // RVA: 0xEC480 Offset: 0xEB880 VA: 0x1800EC480
	// RVA: 0x64ACA0 Offset: 0x6494A0 VA: 0x18064ACA0
	public static byte[] FromByteArray(IntPtr array) { }
	// RVA: 0x64ACF0 Offset: 0x6494F0 VA: 0x18064ACF0
	public static sbyte[] FromSByteArray(IntPtr array) { }
	// RVA: 0x64AD40 Offset: 0x649540 VA: 0x18064AD40
	public static char[] FromCharArray(IntPtr array) { }
	// RVA: 0x64AD90 Offset: 0x649590 VA: 0x18064AD90
	public static short[] FromShortArray(IntPtr array) { }
	// RVA: 0x64ADE0 Offset: 0x6495E0 VA: 0x18064ADE0
	public static int[] FromIntArray(IntPtr array) { }
	// RVA: 0x64AE30 Offset: 0x649630 VA: 0x18064AE30
	public static long[] FromLongArray(IntPtr array) { }
	// RVA: 0x64AE80 Offset: 0x649680 VA: 0x18064AE80
	public static float[] FromFloatArray(IntPtr array) { }
	// RVA: 0x64AED0 Offset: 0x6496D0 VA: 0x18064AED0
	public static double[] FromDoubleArray(IntPtr array) { }
	// RVA: 0x64AF20 Offset: 0x649720 VA: 0x18064AF20
	public static int GetArrayLength(IntPtr array) { }
	// RVA: 0x64AF70 Offset: 0x649770 VA: 0x18064AF70
	public static IntPtr NewObjectArray(int size, IntPtr clazz, IntPtr obj) { }
	// RVA: 0x64AFE0 Offset: 0x6497E0 VA: 0x18064AFE0
	public static IntPtr GetObjectArrayElement(IntPtr array, int index) { }
	// RVA: 0x64B040 Offset: 0x649840 VA: 0x18064B040
	public static void SetObjectArrayElement(IntPtr array, int index, IntPtr obj) { }
}

// Namespace: UnityEngine
internal class AndroidJNISafe // TypeDefIndex: 2035
{
	// Methods
	// RVA: 0x64B350 Offset: 0x649B50 VA: 0x18064B350
	public static void CheckException() { }
	// RVA: 0x64B560 Offset: 0x649D60 VA: 0x18064B560
	public static void DeleteGlobalRef(IntPtr globalref) { }
	// RVA: 0x64B620 Offset: 0x649E20 VA: 0x18064B620
	public static void DeleteWeakGlobalRef(IntPtr globalref) { }
	// RVA: 0x64B6E0 Offset: 0x649EE0 VA: 0x18064B6E0
	public static void DeleteLocalRef(IntPtr localref) { }
	// RVA: 0x64B7A0 Offset: 0x649FA0 VA: 0x18064B7A0
	public static IntPtr NewString(string chars) { }
	// RVA: 0x64B870 Offset: 0x64A070 VA: 0x18064B870
	public static string GetStringChars(IntPtr str) { }
	// RVA: 0x64B940 Offset: 0x64A140 VA: 0x18064B940
	public static IntPtr GetObjectClass(IntPtr ptr) { }
	// RVA: 0x64BA10 Offset: 0x64A210 VA: 0x18064BA10
	public static IntPtr GetStaticMethodID(IntPtr clazz, string name, string sig) { }
	// RVA: 0x64BAA0 Offset: 0x64A2A0 VA: 0x18064BAA0
	public static IntPtr GetMethodID(IntPtr obj, string name, string sig) { }
	// RVA: 0x64BB30 Offset: 0x64A330 VA: 0x18064BB30
	public static IntPtr FromReflectedMethod(IntPtr refMethod) { }
	// RVA: 0x64BC00 Offset: 0x64A400 VA: 0x18064BC00
	public static IntPtr FindClass(string name) { }
	// RVA: 0x64BCD0 Offset: 0x64A4D0 VA: 0x18064BCD0
	public static IntPtr NewObject(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64BDC0 Offset: 0x64A5C0 VA: 0x18064BDC0
	public static void CallStaticVoidMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64BE90 Offset: 0x64A690 VA: 0x18064BE90
	public static IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64BF80 Offset: 0x64A780 VA: 0x18064BF80
	public static string CallStaticStringMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C010 Offset: 0x64A810 VA: 0x18064C010
	public static char CallStaticCharMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C100 Offset: 0x64A900 VA: 0x18064C100
	public static double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C1F0 Offset: 0x64A9F0 VA: 0x18064C1F0
	public static float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C2E0 Offset: 0x64AAE0 VA: 0x18064C2E0
	public static long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C3D0 Offset: 0x64ABD0 VA: 0x18064C3D0
	public static short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C4C0 Offset: 0x64ACC0 VA: 0x18064C4C0
	public static sbyte CallStaticSByteMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C5B0 Offset: 0x64ADB0 VA: 0x18064C5B0
	public static bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C6A0 Offset: 0x64AEA0 VA: 0x18064C6A0
	public static int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C780 Offset: 0x64AF80 VA: 0x18064C780
	public static IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C870 Offset: 0x64B070 VA: 0x18064C870
	public static string CallStringMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C900 Offset: 0x64B100 VA: 0x18064C900
	public static char CallCharMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64C9F0 Offset: 0x64B1F0 VA: 0x18064C9F0
	public static double CallDoubleMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64CAE0 Offset: 0x64B2E0 VA: 0x18064CAE0
	public static float CallFloatMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64CBD0 Offset: 0x64B3D0 VA: 0x18064CBD0
	public static long CallLongMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64CCC0 Offset: 0x64B4C0 VA: 0x18064CCC0
	public static short CallShortMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64CDB0 Offset: 0x64B5B0 VA: 0x18064CDB0
	public static sbyte CallSByteMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64CEA0 Offset: 0x64B6A0 VA: 0x18064CEA0
	public static bool CallBooleanMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64CF90 Offset: 0x64B790 VA: 0x18064CF90
	public static int CallIntMethod(IntPtr obj, IntPtr methodID, jvalue[] args) { }
	// RVA: 0x64D070 Offset: 0x64B870 VA: 0x18064D070
	public static char[] FromCharArray(IntPtr array) { }
	// RVA: 0x64D140 Offset: 0x64B940 VA: 0x18064D140
	public static double[] FromDoubleArray(IntPtr array) { }
	// RVA: 0x64D210 Offset: 0x64BA10 VA: 0x18064D210
	public static float[] FromFloatArray(IntPtr array) { }
	// RVA: 0x64D2E0 Offset: 0x64BAE0 VA: 0x18064D2E0
	public static long[] FromLongArray(IntPtr array) { }
	// RVA: 0x64D3B0 Offset: 0x64BBB0 VA: 0x18064D3B0
	public static short[] FromShortArray(IntPtr array) { }
	// RVA: 0x64D480 Offset: 0x64BC80 VA: 0x18064D480
	public static byte[] FromByteArray(IntPtr array) { }
	// RVA: 0x64D550 Offset: 0x64BD50 VA: 0x18064D550
	public static sbyte[] FromSByteArray(IntPtr array) { }
	// RVA: 0x64D620 Offset: 0x64BE20 VA: 0x18064D620
	public static bool[] FromBooleanArray(IntPtr array) { }
	// RVA: 0x64D6F0 Offset: 0x64BEF0 VA: 0x18064D6F0
	public static int[] FromIntArray(IntPtr array) { }
	// RVA: 0x64D7C0 Offset: 0x64BFC0 VA: 0x18064D7C0
	public static IntPtr ToObjectArray(IntPtr[] array, IntPtr type) { }
	// RVA: 0x64D8A0 Offset: 0x64C0A0 VA: 0x18064D8A0
	public static IntPtr ToCharArray(char[] array) { }
	// RVA: 0x64D970 Offset: 0x64C170 VA: 0x18064D970
	public static IntPtr ToDoubleArray(double[] array) { }
	// RVA: 0x64DA40 Offset: 0x64C240 VA: 0x18064DA40
	public static IntPtr ToFloatArray(float[] array) { }
	// RVA: 0x64DB10 Offset: 0x64C310 VA: 0x18064DB10
	public static IntPtr ToLongArray(long[] array) { }
	// RVA: 0x64DBE0 Offset: 0x64C3E0 VA: 0x18064DBE0
	public static IntPtr ToShortArray(short[] array) { }
	// RVA: 0x64DCB0 Offset: 0x64C4B0 VA: 0x18064DCB0
	public static IntPtr ToByteArray(byte[] array) { }
	// RVA: 0x64DD80 Offset: 0x64C580 VA: 0x18064DD80
	public static IntPtr ToSByteArray(sbyte[] array) { }
	// RVA: 0x64DE50 Offset: 0x64C650 VA: 0x18064DE50
	public static IntPtr ToBooleanArray(bool[] array) { }
	// RVA: 0x64DF20 Offset: 0x64C720 VA: 0x18064DF20
	public static IntPtr ToIntArray(int[] array) { }
	// RVA: 0x64DFF0 Offset: 0x64C7F0 VA: 0x18064DFF0
	public static IntPtr GetObjectArrayElement(IntPtr array, int index) { }
	// RVA: 0x64E0C0 Offset: 0x64C8C0 VA: 0x18064E0C0
	public static int GetArrayLength(IntPtr array) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2036
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0xED770 Offset: 0xECB70 VA: 0x1800ED770
[AttributeUsageAttribute] // RVA: 0xED770 Offset: 0xECB70 VA: 0x1800ED770
public sealed class SharedBetweenAnimatorsAttribute : Attribute // TypeDefIndex: 2037
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public abstract class StateMachineBehaviour : ScriptableObject // TypeDefIndex: 2038
{
	// Methods
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	protected void .ctor() { }
}

// Namespace: UnityEngine
public enum PlayMode // TypeDefIndex: 2039
{
	// Fields
	public int value__; // 0x0
	public const PlayMode StopSameLayer = 0; // 0x0
	public const PlayMode StopAll = 4; // 0x0
}

// Namespace: UnityEngine
internal enum AnimationEventSource // TypeDefIndex: 2040
{
	// Fields
	public int value__; // 0x0
	public const AnimationEventSource NoSource = 0; // 0x0
	public const AnimationEventSource Legacy = 1; // 0x0
	public const AnimationEventSource Animator = 2; // 0x0
}

// Namespace: UnityEngine
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public sealed class Animation : Behaviour, IEnumerable // TypeDefIndex: 2041
{
	// Methods
	// RVA: 0x65AE70 Offset: 0x659670 VA: 0x18065AE70
	public void Stop() { }
	// RVA: 0x65AEC0 Offset: 0x6596C0 VA: 0x18065AEC0
	public bool Play() { }
	// RVA: 0x65AF20 Offset: 0x659720 VA: 0x18065AF20
	public bool Play(PlayMode mode) { }
	// RVA: 0x65AF20 Offset: 0x659720 VA: 0x18065AF20
	private bool PlayDefaultAnimation(PlayMode mode) { }
	// RVA: 0x65AF80 Offset: 0x659780 VA: 0x18065AF80 Slot: 4
	public IEnumerator GetEnumerator() { }
	// RVA: 0x65B000 Offset: 0x659800 VA: 0x18065B000
	internal AnimationState GetStateAtIndex(int index) { }
	// RVA: 0x65B060 Offset: 0x659860 VA: 0x18065B060
	internal int GetStateCount() { }
}

// Namespace: 
private sealed class Animation.Enumerator : IEnumerator // TypeDefIndex: 2042
{
	// Fields
	private Animation m_Outer; // 0x10
	private int m_CurrentIndex; // 0x18

	// Properties
	public object Current { get; }

	// Methods
	// RVA: 0x660930 Offset: 0x65F130 VA: 0x180660930
	internal void .ctor(Animation outer) { }
	// RVA: 0x660940 Offset: 0x65F140 VA: 0x180660940 Slot: 5
	public object get_Current() { }
	// RVA: 0x6609B0 Offset: 0x65F1B0 VA: 0x1806609B0 Slot: 4
	public bool MoveNext() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class AnimationState : TrackedReference // TypeDefIndex: 2043
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public sealed class AnimationEvent // TypeDefIndex: 2044
{
	// Fields
	internal float m_Time; // 0x10
	internal string m_FunctionName; // 0x18
	internal string m_StringParameter; // 0x20
	internal Object m_ObjectReferenceParameter; // 0x28
	internal float m_FloatParameter; // 0x30
	internal int m_IntParameter; // 0x34
	internal int m_MessageOptions; // 0x38
	internal AnimationEventSource m_Source; // 0x3C
	internal AnimationState m_StateSender; // 0x40
	internal AnimatorStateInfo m_AnimatorStateInfo; // 0x48
	internal AnimatorClipInfo m_AnimatorClipInfo; // 0x6C

	// Methods
	// RVA: 0x65BBA0 Offset: 0x65A3A0 VA: 0x18065BBA0
	public void .ctor() { }
}

// Namespace: UnityEngine
public sealed class AnimationClip : Motion // TypeDefIndex: 2045
{
	// Properties
	public float length { get; }
	public float frameRate { get; set; }
	public bool legacy { get; set; }
	public bool empty { get; }
	public bool hasGenericRootTransform { get; }
	public bool hasMotionCurves { get; }
	public bool hasRootCurves { get; }
	internal bool hasRootMotion { get; }

	// Methods
	// RVA: 0x65B0B0 Offset: 0x6598B0 VA: 0x18065B0B0
	public void .ctor() { }
	// RVA: 0x65B180 Offset: 0x659980 VA: 0x18065B180
	private static void Internal_CreateAnimationClip(AnimationClip self) { }
	// RVA: 0x65B1D0 Offset: 0x6599D0 VA: 0x18065B1D0
	public float get_length() { }
	// RVA: 0x65B220 Offset: 0x659A20 VA: 0x18065B220
	public float get_frameRate() { }
	// RVA: 0x65B270 Offset: 0x659A70 VA: 0x18065B270
	public void set_frameRate(float value) { }
	// RVA: 0x65B2D0 Offset: 0x659AD0 VA: 0x18065B2D0
	public bool get_legacy() { }
	// RVA: 0x65B320 Offset: 0x659B20 VA: 0x18065B320
	public void set_legacy(bool value) { }
	// RVA: 0x65B380 Offset: 0x659B80 VA: 0x18065B380
	public bool get_empty() { }
	// RVA: 0x65B3D0 Offset: 0x659BD0 VA: 0x18065B3D0
	public bool get_hasGenericRootTransform() { }
	// RVA: 0x65B420 Offset: 0x659C20 VA: 0x18065B420
	public bool get_hasMotionCurves() { }
	// RVA: 0x65B470 Offset: 0x659C70 VA: 0x18065B470
	public bool get_hasRootCurves() { }
	// RVA: 0x65B4C0 Offset: 0x659CC0 VA: 0x18065B4C0
	internal bool get_hasRootMotion() { }
}

// Namespace: UnityEngine
public enum AvatarIKGoal // TypeDefIndex: 2046
{
	// Fields
	public int value__; // 0x0
	public const AvatarIKGoal LeftFoot = 0; // 0x0
	public const AvatarIKGoal RightFoot = 1; // 0x0
	public const AvatarIKGoal LeftHand = 2; // 0x0
	public const AvatarIKGoal RightHand = 3; // 0x0
}

// Namespace: UnityEngine
internal enum StateInfoIndex // TypeDefIndex: 2047
{
	// Fields
	public int value__; // 0x0
	public const StateInfoIndex CurrentState = 0; // 0x0
	public const StateInfoIndex NextState = 1; // 0x0
	public const StateInfoIndex ExitState = 2; // 0x0
	public const StateInfoIndex InterruptedState = 3; // 0x0
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct AnimatorClipInfo // TypeDefIndex: 2048
{
	// Fields
	private int m_ClipInstanceID; // 0x0
	private float m_Weight; // 0x4

	// Properties
	public AnimationClip clip { get; }
	public float weight { get; }

	// Methods
	// RVA: 0x24920 Offset: 0x23D20 VA: 0x180024920
	public AnimationClip get_clip() { }
	// RVA: 0x1E7A0 Offset: 0x1DBA0 VA: 0x18001E7A0
	public float get_weight() { }
	// RVA: 0x660390 Offset: 0x65EB90 VA: 0x180660390
	private static AnimationClip InstanceIDToAnimationClipPPtr(int instanceID) { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct AnimatorStateInfo // TypeDefIndex: 2049
{
	// Fields
	private int m_Name; // 0x0
	private int m_Path; // 0x4
	private int m_FullPath; // 0x8
	private float m_NormalizedTime; // 0xC
	private float m_Length; // 0x10
	private float m_Speed; // 0x14
	private float m_SpeedMultiplier; // 0x18
	private int m_Tag; // 0x1C
	private int m_Loop; // 0x20

	// Properties
	public int fullPathHash { get; }
	public float normalizedTime { get; }

	// Methods
	// RVA: 0x24B10 Offset: 0x23F10 VA: 0x180024B10
	public bool IsName(string name) { }
	// RVA: 0x16080 Offset: 0x15480 VA: 0x180016080
	public int get_fullPathHash() { }
	// RVA: 0x1D690 Offset: 0x1CA90 VA: 0x18001D690
	public float get_normalizedTime() { }
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct AnimatorTransitionInfo // TypeDefIndex: 2050
{
	// Fields
	private int m_FullPath; // 0x0
	private int m_UserName; // 0x4
	private int m_Name; // 0x8
	private bool m_HasFixedDuration; // 0xC
	private float m_Duration; // 0x10
	private float m_NormalizedTime; // 0x14
	private bool m_AnyState; // 0x18
	private int m_TransitionType; // 0x1C
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class Animator : Behaviour // TypeDefIndex: 2051
{
	// Properties
	public bool hasRootMotion { get; }
	public int layerCount { get; }
	public RuntimeAnimatorController runtimeAnimatorController { get; }
	public bool hasBoundPlayables { get; }
	public bool logWarnings { get; }

	// Methods
	// RVA: 0x65F0F0 Offset: 0x65D8F0 VA: 0x18065F0F0
	public bool get_hasRootMotion() { }
	// RVA: 0x65F140 Offset: 0x65D940 VA: 0x18065F140
	public float GetFloat(string name) { }
	// RVA: 0x65F1A0 Offset: 0x65D9A0 VA: 0x18065F1A0
	public void SetFloat(string name, float value) { }
	// RVA: 0x65F210 Offset: 0x65DA10 VA: 0x18065F210
	public void SetInteger(string name, int value) { }
	// RVA: 0x65F280 Offset: 0x65DA80 VA: 0x18065F280
	public void SetTrigger(string name) { }
	// RVA: 0x65F2E0 Offset: 0x65DAE0 VA: 0x18065F2E0
	public void SetTrigger(int id) { }
	// RVA: 0x65F340 Offset: 0x65DB40 VA: 0x18065F340
	public void ResetTrigger(string name) { }
	// RVA: 0x65F3A0 Offset: 0x65DBA0 VA: 0x18065F3A0
	public Vector3 GetIKPosition(AvatarIKGoal goal) { }
	// RVA: 0x65F440 Offset: 0x65DC40 VA: 0x18065F440
	private Vector3 GetGoalPosition(AvatarIKGoal goal) { }
	// RVA: 0x65F4C0 Offset: 0x65DCC0 VA: 0x18065F4C0
	public void SetIKPosition(AvatarIKGoal goal, Vector3 goalPosition) { }
	// RVA: 0x65F550 Offset: 0x65DD50 VA: 0x18065F550
	private void SetGoalPosition(AvatarIKGoal goal, Vector3 goalPosition) { }
	// RVA: 0x65F5C0 Offset: 0x65DDC0 VA: 0x18065F5C0
	public void SetIKRotation(AvatarIKGoal goal, Quaternion goalRotation) { }
	// RVA: 0x65F640 Offset: 0x65DE40 VA: 0x18065F640
	private void SetGoalRotation(AvatarIKGoal goal, Quaternion goalRotation) { }
	// RVA: 0x65F6B0 Offset: 0x65DEB0 VA: 0x18065F6B0
	public void SetIKPositionWeight(AvatarIKGoal goal, float value) { }
	// RVA: 0x65F730 Offset: 0x65DF30 VA: 0x18065F730
	private void SetGoalWeightPosition(AvatarIKGoal goal, float value) { }
	// RVA: 0x65F7A0 Offset: 0x65DFA0 VA: 0x18065F7A0
	public void SetIKRotationWeight(AvatarIKGoal goal, float value) { }
	// RVA: 0x65F820 Offset: 0x65E020 VA: 0x18065F820
	private void SetGoalWeightRotation(AvatarIKGoal goal, float value) { }
	// RVA: 0x65F890 Offset: 0x65E090 VA: 0x18065F890
	public int get_layerCount() { }
	// RVA: 0x65F8E0 Offset: 0x65E0E0 VA: 0x18065F8E0
	private void GetAnimatorStateInfo(int layerIndex, StateInfoIndex stateInfoIndex, out AnimatorStateInfo info) { }
	// RVA: 0x65F960 Offset: 0x65E160 VA: 0x18065F960
	public AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex) { }
	// RVA: 0x65FA10 Offset: 0x65E210 VA: 0x18065FA10
	public AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex) { }
	// RVA: 0x65FAC0 Offset: 0x65E2C0 VA: 0x18065FAC0
	internal int GetAnimatorClipInfoCount(int layerIndex, bool current) { }
	// RVA: 0x65FB30 Offset: 0x65E330 VA: 0x18065FB30
	public int GetCurrentAnimatorClipInfoCount(int layerIndex) { }
	// RVA: 0x65FB90 Offset: 0x65E390 VA: 0x18065FB90
	public int GetNextAnimatorClipInfoCount(int layerIndex) { }
	// RVA: 0x65FBF0 Offset: 0x65E3F0 VA: 0x18065FBF0
	public void GetCurrentAnimatorClipInfo(int layerIndex, List<AnimatorClipInfo> clips) { }
	// RVA: 0x65FCD0 Offset: 0x65E4D0 VA: 0x18065FCD0
	private void GetAnimatorClipInfoInternal(int layerIndex, bool isCurrent, object clips) { }
	// RVA: 0x65FD50 Offset: 0x65E550 VA: 0x18065FD50
	public void GetNextAnimatorClipInfo(int layerIndex, List<AnimatorClipInfo> clips) { }
	// RVA: 0x65FE30 Offset: 0x65E630 VA: 0x18065FE30
	public bool IsInTransition(int layerIndex) { }
	// RVA: 0x65FE90 Offset: 0x65E690 VA: 0x18065FE90
	public void Play(int stateNameHash, int layer, float normalizedTime) { }
	// RVA: 0x65FF10 Offset: 0x65E710 VA: 0x18065FF10
	public void Play(int stateNameHash) { }
	// RVA: 0x65FF80 Offset: 0x65E780 VA: 0x18065FF80
	public RuntimeAnimatorController get_runtimeAnimatorController() { }
	// RVA: 0x65FFD0 Offset: 0x65E7D0 VA: 0x18065FFD0
	public bool get_hasBoundPlayables() { }
	// RVA: 0x660020 Offset: 0x65E820 VA: 0x180660020
	public static int StringToHash(string name) { }
	// RVA: 0x660070 Offset: 0x65E870 VA: 0x180660070
	private void CheckIfInIKPass() { }
	// RVA: 0x6601A0 Offset: 0x65E9A0 VA: 0x1806601A0
	private bool IsInIKPass() { }
	// RVA: 0x65F1A0 Offset: 0x65D9A0 VA: 0x18065F1A0
	private void SetFloatString(string name, float value) { }
	// RVA: 0x65F140 Offset: 0x65D940 VA: 0x18065F140
	private float GetFloatString(string name) { }
	// RVA: 0x65F210 Offset: 0x65DA10 VA: 0x18065F210
	private void SetIntegerString(string name, int value) { }
	// RVA: 0x65F280 Offset: 0x65DA80 VA: 0x18065F280
	private void SetTriggerString(string name) { }
	// RVA: 0x65F2E0 Offset: 0x65DAE0 VA: 0x18065F2E0
	private void SetTriggerID(int id) { }
	// RVA: 0x65F340 Offset: 0x65DB40 VA: 0x18065F340
	private void ResetTriggerString(string name) { }
	// RVA: 0x6601F0 Offset: 0x65E9F0 VA: 0x1806601F0
	public bool get_logWarnings() { }
	// RVA: 0x660240 Offset: 0x65EA40 VA: 0x180660240
	private void GetGoalPosition_Injected(AvatarIKGoal goal, out Vector3 ret) { }
	// RVA: 0x6602B0 Offset: 0x65EAB0 VA: 0x1806602B0
	private void SetGoalPosition_Injected(AvatarIKGoal goal, ref Vector3 goalPosition) { }
	// RVA: 0x660320 Offset: 0x65EB20 VA: 0x180660320
	private void SetGoalRotation_Injected(AvatarIKGoal goal, ref Quaternion goalRotation) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0xDCBE0 Offset: 0xDBFE0 VA: 0x1800DCBE0
[DefaultMemberAttribute] // RVA: 0xDCBE0 Offset: 0xDBFE0 VA: 0x1800DCBE0
public class AnimatorOverrideController : RuntimeAnimatorController // TypeDefIndex: 2052
{
	// Fields
	internal AnimatorOverrideController.OnOverrideControllerDirtyCallback OnOverrideControllerDirty; // 0x18

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x660710 Offset: 0x65EF10 VA: 0x180660710
	internal static void OnInvalidateOverrideController(AnimatorOverrideController controller) { }
}

// Namespace: 
internal sealed class AnimatorOverrideController.OnOverrideControllerDirtyCallback : MulticastDelegate // TypeDefIndex: 2053
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class Avatar : Object // TypeDefIndex: 2054
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct SkeletonBone // TypeDefIndex: 2055
{
	// Fields
	public string name; // 0x0
	internal string parentName; // 0x8
	public Vector3 position; // 0x10
	public Quaternion rotation; // 0x1C
	public Vector3 scale; // 0x2C
}

// Namespace: UnityEngine
public struct HumanLimit // TypeDefIndex: 2056
{
	// Fields
	private Vector3 m_Min; // 0x0
	private Vector3 m_Max; // 0xC
	private Vector3 m_Center; // 0x18
	private float m_AxisLength; // 0x24
	private int m_UseDefaultValues; // 0x28
}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct HumanBone // TypeDefIndex: 2057
{
	// Fields
	private string m_BoneName; // 0x0
	private string m_HumanName; // 0x8
	public HumanLimit limit; // 0x10
}

// Namespace: UnityEngine
[MovedFromAttribute] // RVA: 0xED790 Offset: 0xECB90 VA: 0x1800ED790
[UsedByNativeCodeAttribute] // RVA: 0xED790 Offset: 0xECB90 VA: 0x1800ED790
public sealed class AvatarMask : Object // TypeDefIndex: 2058
{}

// Namespace: UnityEngine
public class Motion : Object // TypeDefIndex: 2059
{
	// Fields
	private readonly bool <isAnimatorMotion>k__BackingField; // 0x18

	// Properties
	public bool isLooping { get; }

	// Methods
	// RVA: 0x6607C0 Offset: 0x65EFC0 VA: 0x1806607C0
	protected void .ctor() { }
	// RVA: 0x660850 Offset: 0x65F050 VA: 0x180660850
	public bool get_isLooping() { }
}

// Namespace: UnityEngine
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class RuntimeAnimatorController : Object // TypeDefIndex: 2060
{
	// Methods
	// RVA: 0x6608A0 Offset: 0x65F0A0 VA: 0x1806608A0
	protected void .ctor() { }
}

// Namespace: UnityEngine.Animations
public static class AnimationPlayableBinding // TypeDefIndex: 2061
{
	// Methods
	// RVA: 0x65DCD0 Offset: 0x65C4D0 VA: 0x18065DCD0
	public static PlayableBinding Create(string name, Object key) { }
	// RVA: 0x65DE10 Offset: 0x65C610 VA: 0x18065DE10
	private static PlayableOutput CreateAnimationOutput(PlayableGraph graph, string name) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xED800 Offset: 0xECC00 VA: 0x1800ED800
[AttributeUsageAttribute] // RVA: 0xED800 Offset: 0xECC00 VA: 0x1800ED800
public class NotKeyableAttribute : Attribute // TypeDefIndex: 2062
{}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct AnimationClipPlayable : IPlayable, IEquatable<AnimationClipPlayable> // TypeDefIndex: 2063
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods
	// RVA: 0x65B510 Offset: 0x659D10 VA: 0x18065B510
	public static AnimationClipPlayable Create(PlayableGraph graph, AnimationClip clip) { }
	// RVA: 0x65B720 Offset: 0x659F20 VA: 0x18065B720
	private static PlayableHandle CreateHandle(PlayableGraph graph, AnimationClip clip) { }
	// RVA: 0x23E40 Offset: 0x23240 VA: 0x180023E40
	internal void .ctor(PlayableHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x436F70 Offset: 0x435770 VA: 0x180436F70
	public static Playable op_Implicit(AnimationClipPlayable playable) { }
	// RVA: 0x23E60 Offset: 0x23260 VA: 0x180023E60 Slot: 5
	public bool Equals(AnimationClipPlayable other) { }
	// RVA: 0x23FB0 Offset: 0x233B0 VA: 0x180023FB0
	public void SetApplyFootIK(bool value) { }
	// RVA: 0x23FC0 Offset: 0x233C0 VA: 0x180023FC0
	internal void SetRemoveStartOffset(bool value) { }
	// RVA: 0x23FD0 Offset: 0x233D0 VA: 0x180023FD0
	internal void SetOverrideLoopTime(bool value) { }
	// RVA: 0x23FE0 Offset: 0x233E0 VA: 0x180023FE0
	internal void SetLoopTime(bool value) { }
	// RVA: 0x65BAC0 Offset: 0x65A2C0 VA: 0x18065BAC0
	private static bool CreateHandleInternal(PlayableGraph graph, AnimationClip clip, ref PlayableHandle handle) { }
	// RVA: 0x65B940 Offset: 0x65A140 VA: 0x18065B940
	private static void SetApplyFootIKInternal(ref PlayableHandle handle, bool value) { }
	// RVA: 0x65B9A0 Offset: 0x65A1A0 VA: 0x18065B9A0
	private static void SetRemoveStartOffsetInternal(ref PlayableHandle handle, bool value) { }
	// RVA: 0x65BA00 Offset: 0x65A200 VA: 0x18065BA00
	private static void SetOverrideLoopTimeInternal(ref PlayableHandle handle, bool value) { }
	// RVA: 0x65BA60 Offset: 0x65A260 VA: 0x18065BA60
	private static void SetLoopTimeInternal(ref PlayableHandle handle, bool value) { }
	// RVA: 0x65BB30 Offset: 0x65A330 VA: 0x18065BB30
	private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, AnimationClip clip, ref PlayableHandle handle) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xED820 Offset: 0xECC20 VA: 0x1800ED820
[MovedFromAttribute] // RVA: 0xED820 Offset: 0xECC20 VA: 0x1800ED820
public struct AnimationHumanStream // TypeDefIndex: 2064
{
	// Fields
	private IntPtr stream; // 0x0
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct AnimationLayerMixerPlayable : IPlayable, IEquatable<AnimationLayerMixerPlayable> // TypeDefIndex: 2065
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationLayerMixerPlayable m_NullPlayable; // 0x0

	// Methods
	// RVA: 0x65BC40 Offset: 0x65A440 VA: 0x18065BC40
	public static AnimationLayerMixerPlayable Create(PlayableGraph graph, int inputCount = 0) { }
	// RVA: 0x65BDD0 Offset: 0x65A5D0 VA: 0x18065BDD0
	private static PlayableHandle CreateHandle(PlayableGraph graph, int inputCount = 0) { }
	// RVA: 0x24010 Offset: 0x23410 VA: 0x180024010
	internal void .ctor(PlayableHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x436F70 Offset: 0x435770 VA: 0x180436F70
	public static Playable op_Implicit(AnimationLayerMixerPlayable playable) { }
	// RVA: 0x24030 Offset: 0x23430 VA: 0x180024030 Slot: 5
	public bool Equals(AnimationLayerMixerPlayable other) { }
	// RVA: 0x24180 Offset: 0x23580 VA: 0x180024180
	public void SetLayerMaskFromAvatarMask(uint layerIndex, AvatarMask mask) { }
	// RVA: 0x65C2A0 Offset: 0x65AAA0 VA: 0x18065C2A0
	private static bool CreateHandleInternal(PlayableGraph graph, ref PlayableHandle handle) { }
	// RVA: 0x65C380 Offset: 0x65AB80 VA: 0x18065C380
	private static void SetLayerMaskFromAvatarMaskInternal(ref PlayableHandle handle, uint layerIndex, AvatarMask mask) { }
	// RVA: 0x65C3F0 Offset: 0x65ABF0 VA: 0x18065C3F0
	private static void .cctor() { }
	// RVA: 0x65C550 Offset: 0x65AD50 VA: 0x18065C550
	private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, ref PlayableHandle handle) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct AnimationMixerPlayable : IPlayable, IEquatable<AnimationMixerPlayable> // TypeDefIndex: 2066
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationMixerPlayable m_NullPlayable; // 0x0

	// Methods
	// RVA: 0x65C5B0 Offset: 0x65ADB0 VA: 0x18065C5B0
	public static AnimationMixerPlayable Create(PlayableGraph graph, int inputCount = 0, bool normalizeWeights = False) { }
	// RVA: 0x65C750 Offset: 0x65AF50 VA: 0x18065C750
	private static PlayableHandle CreateHandle(PlayableGraph graph, int inputCount = 0, bool normalizeWeights = False) { }
	// RVA: 0x24190 Offset: 0x23590 VA: 0x180024190
	internal void .ctor(PlayableHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x436F70 Offset: 0x435770 VA: 0x180436F70
	public static Playable op_Implicit(AnimationMixerPlayable playable) { }
	// RVA: 0x241B0 Offset: 0x235B0 VA: 0x1800241B0 Slot: 5
	public bool Equals(AnimationMixerPlayable other) { }
	// RVA: 0x65CA30 Offset: 0x65B230 VA: 0x18065CA30
	private static bool CreateHandleInternal(PlayableGraph graph, bool normalizeWeights, ref PlayableHandle handle) { }
	// RVA: 0x65CB20 Offset: 0x65B320 VA: 0x18065CB20
	private static void .cctor() { }
	// RVA: 0x65CC80 Offset: 0x65B480 VA: 0x18065CC80
	private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, bool normalizeWeights, ref PlayableHandle handle) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal struct AnimationMotionXToDeltaPlayable : IPlayable, IEquatable<AnimationMotionXToDeltaPlayable> // TypeDefIndex: 2067
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationMotionXToDeltaPlayable m_NullPlayable; // 0x0

	// Methods
	// RVA: 0x65CCF0 Offset: 0x65B4F0 VA: 0x18065CCF0
	public static AnimationMotionXToDeltaPlayable Create(PlayableGraph graph) { }
	// RVA: 0x65CE70 Offset: 0x65B670 VA: 0x18065CE70
	private static PlayableHandle CreateHandle(PlayableGraph graph) { }
	// RVA: 0x24300 Offset: 0x23700 VA: 0x180024300
	private void .ctor(PlayableHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x436F70 Offset: 0x435770 VA: 0x180436F70
	public static Playable op_Implicit(AnimationMotionXToDeltaPlayable playable) { }
	// RVA: 0x24320 Offset: 0x23720 VA: 0x180024320 Slot: 5
	public bool Equals(AnimationMotionXToDeltaPlayable other) { }
	// RVA: 0x24470 Offset: 0x23870 VA: 0x180024470
	public void SetAbsoluteMotion(bool value) { }
	// RVA: 0x65D210 Offset: 0x65BA10 VA: 0x18065D210
	private static bool CreateHandleInternal(PlayableGraph graph, ref PlayableHandle handle) { }
	// RVA: 0x65D2F0 Offset: 0x65BAF0 VA: 0x18065D2F0
	private static void SetAbsoluteMotionInternal(ref PlayableHandle handle, bool value) { }
	// RVA: 0x65D350 Offset: 0x65BB50 VA: 0x18065D350
	private static void .cctor() { }
	// RVA: 0x65D4B0 Offset: 0x65BCB0 VA: 0x18065D4B0
	private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, ref PlayableHandle handle) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal struct AnimationOffsetPlayable : IPlayable, IEquatable<AnimationOffsetPlayable> // TypeDefIndex: 2068
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationOffsetPlayable m_NullPlayable; // 0x0

	// Methods
	// RVA: 0x65D510 Offset: 0x65BD10 VA: 0x18065D510
	public static AnimationOffsetPlayable Create(PlayableGraph graph, Vector3 position, Quaternion rotation, int inputCount) { }
	// RVA: 0x65D6E0 Offset: 0x65BEE0 VA: 0x18065D6E0
	private static PlayableHandle CreateHandle(PlayableGraph graph, Vector3 position, Quaternion rotation, int inputCount) { }
	// RVA: 0x24480 Offset: 0x23880 VA: 0x180024480
	internal void .ctor(PlayableHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x436F70 Offset: 0x435770 VA: 0x180436F70
	public static Playable op_Implicit(AnimationOffsetPlayable playable) { }
	// RVA: 0x244A0 Offset: 0x238A0 VA: 0x1800244A0 Slot: 5
	public bool Equals(AnimationOffsetPlayable other) { }
	// RVA: 0x65D9F0 Offset: 0x65C1F0 VA: 0x18065D9F0
	private static bool CreateHandleInternal(PlayableGraph graph, Vector3 position, Quaternion rotation, ref PlayableHandle handle) { }
	// RVA: 0x65DAF0 Offset: 0x65C2F0 VA: 0x18065DAF0
	private static void .cctor() { }
	// RVA: 0x65DC50 Offset: 0x65C450 VA: 0x18065DC50
	private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, ref Vector3 position, ref Quaternion rotation, ref PlayableHandle handle) { }
}

// Namespace: UnityEngine.Animations
public static class AnimationPlayableExtensions // TypeDefIndex: 2069
{
	// Methods
	// RVA: 0x4B7D90 Offset: 0x4B6590 VA: 0x1804B7D90
	public static void SetAnimatedProperties(U playable, AnimationClip clip) { }
	// RVA: 0x65DE60 Offset: 0x65C660 VA: 0x18065DE60
	internal static void SetAnimatedPropertiesInternal(ref PlayableHandle playable, AnimationClip animatedProperties) { }
}

// Namespace: UnityEngine.Animations
internal static class AnimationPlayableGraphExtensions // TypeDefIndex: 2070
{
	// Methods
	// RVA: 0x65DEC0 Offset: 0x65C6C0 VA: 0x18065DEC0
	internal static bool InternalCreateAnimationOutput(ref PlayableGraph graph, string name, out PlayableOutputHandle handle) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct AnimationPlayableOutput : IPlayableOutput // TypeDefIndex: 2071
{
	// Fields
	private PlayableOutputHandle m_Handle; // 0x0

	// Properties
	public static AnimationPlayableOutput Null { get; }

	// Methods
	// RVA: 0x65DF30 Offset: 0x65C730 VA: 0x18065DF30
	public static AnimationPlayableOutput Create(PlayableGraph graph, string name, Animator target) { }
	// RVA: 0x24580 Offset: 0x23980 VA: 0x180024580
	internal void .ctor(PlayableOutputHandle handle) { }
	// RVA: 0x65E2F0 Offset: 0x65CAF0 VA: 0x18065E2F0
	public static AnimationPlayableOutput get_Null() { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableOutputHandle GetHandle() { }
	// RVA: 0x436F70 Offset: 0x435770 VA: 0x180436F70
	public static PlayableOutput op_Implicit(AnimationPlayableOutput output) { }
	// RVA: 0x65E450 Offset: 0x65CC50 VA: 0x18065E450
	public static AnimationPlayableOutput op_Explicit(PlayableOutput output) { }
	// RVA: 0x245A0 Offset: 0x239A0 VA: 0x1800245A0
	public void SetTarget(Animator value) { }
	// RVA: 0x65E530 Offset: 0x65CD30 VA: 0x18065E530
	private static void InternalSetTarget(ref PlayableOutputHandle handle, Animator target) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal struct AnimationPosePlayable : IPlayable, IEquatable<AnimationPosePlayable> // TypeDefIndex: 2072
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationPosePlayable m_NullPlayable; // 0x0

	// Methods
	// RVA: 0x245B0 Offset: 0x239B0 VA: 0x1800245B0
	internal void .ctor(PlayableHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x245D0 Offset: 0x239D0 VA: 0x1800245D0 Slot: 5
	public bool Equals(AnimationPosePlayable other) { }
	// RVA: 0x65E660 Offset: 0x65CE60 VA: 0x18065E660
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal struct AnimationRemoveScalePlayable : IPlayable, IEquatable<AnimationRemoveScalePlayable> // TypeDefIndex: 2073
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationRemoveScalePlayable m_NullPlayable; // 0x0

	// Methods
	// RVA: 0x65E7C0 Offset: 0x65CFC0 VA: 0x18065E7C0
	public static AnimationRemoveScalePlayable Create(PlayableGraph graph, int inputCount) { }
	// RVA: 0x65E950 Offset: 0x65D150 VA: 0x18065E950
	private static PlayableHandle CreateHandle(PlayableGraph graph, int inputCount) { }
	// RVA: 0x246B0 Offset: 0x23AB0 VA: 0x1800246B0
	internal void .ctor(PlayableHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x436F70 Offset: 0x435770 VA: 0x180436F70
	public static Playable op_Implicit(AnimationRemoveScalePlayable playable) { }
	// RVA: 0x246D0 Offset: 0x23AD0 VA: 0x1800246D0 Slot: 5
	public bool Equals(AnimationRemoveScalePlayable other) { }
	// RVA: 0x65EC20 Offset: 0x65D420 VA: 0x18065EC20
	private static bool CreateHandleInternal(PlayableGraph graph, ref PlayableHandle handle) { }
	// RVA: 0x65ED00 Offset: 0x65D500 VA: 0x18065ED00
	private static void .cctor() { }
	// RVA: 0x65EE60 Offset: 0x65D660 VA: 0x18065EE60
	private static bool CreateHandleInternal_Injected(ref PlayableGraph graph, ref PlayableHandle handle) { }
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0xED820 Offset: 0xECC20 VA: 0x1800ED820
[MovedFromAttribute] // RVA: 0xED820 Offset: 0xECC20 VA: 0x1800ED820
public struct AnimationScriptPlayable : IPlayable, IEquatable<AnimationScriptPlayable> // TypeDefIndex: 2074
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimationScriptPlayable m_NullPlayable; // 0x0

	// Methods
	// RVA: 0x247B0 Offset: 0x23BB0 VA: 0x1800247B0
	internal void .ctor(PlayableHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x247D0 Offset: 0x23BD0 VA: 0x1800247D0 Slot: 5
	public bool Equals(AnimationScriptPlayable other) { }
	// RVA: 0x65EF90 Offset: 0x65D790 VA: 0x18065EF90
	private static void .cctor() { }
}

// Namespace: UnityEngine.Animations
[MovedFromAttribute] // RVA: 0xED870 Offset: 0xECC70 VA: 0x1800ED870
[RequiredByNativeCodeAttribute] // RVA: 0xED870 Offset: 0xECC70 VA: 0x1800ED870
public struct AnimationStream // TypeDefIndex: 2075
{
	// Fields
	private uint m_AnimatorBindingsVersion; // 0x0
	private IntPtr constant; // 0x8
	private IntPtr input; // 0x10
	private IntPtr output; // 0x18
	private IntPtr workspace; // 0x20
	private IntPtr inputStreamAccessor; // 0x28
	private IntPtr animationHandleBinder; // 0x30
}

// Namespace: UnityEngine.Animations
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct AnimatorControllerPlayable : IPlayable, IEquatable<AnimatorControllerPlayable> // TypeDefIndex: 2076
{
	// Fields
	private PlayableHandle m_Handle; // 0x0
	private static readonly AnimatorControllerPlayable m_NullPlayable; // 0x0

	// Methods
	// RVA: 0x24980 Offset: 0x23D80 VA: 0x180024980
	internal void .ctor(PlayableHandle handle) { }
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x249A0 Offset: 0x23DA0 VA: 0x1800249A0
	public void SetHandle(PlayableHandle handle) { }
	// RVA: 0x249C0 Offset: 0x23DC0 VA: 0x1800249C0 Slot: 5
	public bool Equals(AnimatorControllerPlayable other) { }
	// RVA: 0x6605B0 Offset: 0x65EDB0 VA: 0x1806605B0
	private static void .cctor() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2077
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class AssetBundleCreateRequest : AsyncOperation // TypeDefIndex: 2078
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class AssetBundleRecompressOperation : AsyncOperation // TypeDefIndex: 2079
{}

// Namespace: UnityEngine
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class AssetBundleRequest : AsyncOperation // TypeDefIndex: 2080
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2081
{}

// Namespace: UnityEngine.Playables
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class PlayableDirector : Behaviour, IExposedPropertyTable // TypeDefIndex: 2082
{
	// Fields
	private Action<PlayableDirector> played; // 0x18
	private Action<PlayableDirector> paused; // 0x20
	private Action<PlayableDirector> stopped; // 0x28

	// Properties
	public DirectorWrapMode extrapolationMode { get; }
	public PlayableAsset playableAsset { get; }
	public double time { get; set; }
	public double duration { get; }

	// Methods
	// RVA: 0x68EBD0 Offset: 0x68D3D0 VA: 0x18068EBD0
	public DirectorWrapMode get_extrapolationMode() { }
	// RVA: 0x68EC20 Offset: 0x68D420 VA: 0x18068EC20
	public PlayableAsset get_playableAsset() { }
	// RVA: 0x68ED10 Offset: 0x68D510 VA: 0x18068ED10
	public void set_time(double value) { }
	// RVA: 0x68ED70 Offset: 0x68D570 VA: 0x18068ED70
	public double get_time() { }
	// RVA: 0x68EDC0 Offset: 0x68D5C0 VA: 0x18068EDC0
	public double get_duration() { }
	// RVA: 0x68EE10 Offset: 0x68D610 VA: 0x18068EE10
	public void Play() { }
	// RVA: 0x68EE60 Offset: 0x68D660 VA: 0x18068EE60
	public void Stop() { }
	// RVA: 0x68EEB0 Offset: 0x68D6B0 VA: 0x18068EEB0 Slot: 4
	public Object GetReferenceValue(PropertyName id, out bool idValid) { }
	// RVA: 0x68EF20 Offset: 0x68D720 VA: 0x18068EF20
	public Object GetGenericBinding(Object key) { }
	// RVA: 0x68EBD0 Offset: 0x68D3D0 VA: 0x18068EBD0
	private DirectorWrapMode GetWrapMode() { }
	// RVA: 0x68EF80 Offset: 0x68D780 VA: 0x18068EF80
	private ScriptableObject Internal_GetPlayableAsset() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68EFD0 Offset: 0x68D7D0 VA: 0x18068EFD0
	private void SendOnPlayableDirectorPlay() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68F060 Offset: 0x68D860 VA: 0x18068F060
	private void SendOnPlayableDirectorPause() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68F0F0 Offset: 0x68D8F0 VA: 0x18068F0F0
	private void SendOnPlayableDirectorStop() { }
	// RVA: 0x68F180 Offset: 0x68D980 VA: 0x18068F180 Slot: 5
	private Object GetReferenceValue_Injected(ref PropertyName id, out bool idValid) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2083
{}

// Namespace: UnityEngineInternal.Input
internal sealed class NativeUpdateCallback : MulticastDelegate // TypeDefIndex: 2084
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x68E480 Offset: 0x68CC80 VA: 0x18068E480 Slot: 12
	public virtual void Invoke(NativeInputUpdateType updateType, NativeInputEventBuffer* buffer) { }
	// RVA: 0x68E7A0 Offset: 0x68CFA0 VA: 0x18068E7A0 Slot: 13
	public virtual IAsyncResult BeginInvoke(NativeInputUpdateType updateType, NativeInputEventBuffer* buffer, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngineInternal.Input
internal struct NativeInputEventBuffer // TypeDefIndex: 2085
{
	// Fields
	public void* eventBuffer; // 0x0
	public int eventCount; // 0x8
	public int sizeInBytes; // 0xC
	public int capacityInBytes; // 0x10
}

// Namespace: UnityEngineInternal.Input
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum NativeInputUpdateType // TypeDefIndex: 2086
{
	// Fields
	public int value__; // 0x0
	public const NativeInputUpdateType Dynamic = 1; // 0x0
	public const NativeInputUpdateType Fixed = 2; // 0x0
	public const NativeInputUpdateType BeforeRender = 4; // 0x0
	public const NativeInputUpdateType Editor = 8; // 0x0
	public const NativeInputUpdateType IgnoreFocus = -2147483648; // 0x0
}

// Namespace: UnityEngineInternal.Input
internal class NativeInputSystem // TypeDefIndex: 2087
{
	// Fields
	public static NativeUpdateCallback onUpdate; // 0x0
	public static Action<NativeInputUpdateType> onBeforeUpdate; // 0x8
	public static Func<NativeInputUpdateType, bool> onShouldRunUpdate; // 0x10
	private static Action<int, string> s_OnDeviceDiscoveredCallback; // 0x18

	// Properties
	internal static bool hasDeviceDiscoveredCallback { set; }

	// Methods
	// RVA: 0x68E0A0 Offset: 0x68C8A0 VA: 0x18068E0A0
	private static void .cctor() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68E0F0 Offset: 0x68C8F0 VA: 0x18068E0F0
	internal static void NotifyBeforeUpdate(NativeInputUpdateType updateType) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68E1B0 Offset: 0x68C9B0 VA: 0x18068E1B0
	internal static void NotifyUpdate(NativeInputUpdateType updateType, IntPtr eventBuffer) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68E2A0 Offset: 0x68CAA0 VA: 0x18068E2A0
	internal static void NotifyDeviceDiscovered(int deviceId, string deviceDescriptor) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68E360 Offset: 0x68CB60 VA: 0x18068E360
	internal static void ShouldRunUpdate(NativeInputUpdateType updateType, out bool retval) { }
	// RVA: 0x68E430 Offset: 0x68CC30 VA: 0x18068E430
	internal static void set_hasDeviceDiscoveredCallback(bool value) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2088
{}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xF2420 Offset: 0xF1820 VA: 0x1800F2420
[UsedByNativeCodeAttribute] // RVA: 0xF2420 Offset: 0xF1820 VA: 0x1800F2420
public sealed class ParticleSystem : Component // TypeDefIndex: 2089
{
	// Properties
	public bool isPlaying { get; }
	public ParticleSystem.MainModule main { get; }

	// Methods
	[ObsoleteAttribute] // RVA: 0xF24A0 Offset: 0xF18A0 VA: 0x1800F24A0
	// RVA: 0x684E60 Offset: 0x683660 VA: 0x180684E60
	public void Emit(Vector3 position, Vector3 velocity, float size, float lifetime, Color32 color) { }
	[ObsoleteAttribute] // RVA: 0xF24D0 Offset: 0xF18D0 VA: 0x1800F24D0
	// RVA: 0x685030 Offset: 0x683830 VA: 0x180685030
	public void Emit(ParticleSystem.Particle particle) { }
	// RVA: 0x685090 Offset: 0x683890 VA: 0x180685090
	public bool get_isPlaying() { }
	// RVA: 0x6850E0 Offset: 0x6838E0 VA: 0x1806850E0
	public void Play(bool withChildren) { }
	// RVA: 0x685140 Offset: 0x683940 VA: 0x180685140
	public void Stop(bool withChildren, ParticleSystemStopBehavior stopBehavior) { }
	// RVA: 0x6851B0 Offset: 0x6839B0 VA: 0x1806851B0
	public void Stop(bool withChildren) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x685220 Offset: 0x683A20 VA: 0x180685220
	public void Emit(int count) { }
	// RVA: 0x685220 Offset: 0x683A20 VA: 0x180685220
	private void Emit_Internal(int count) { }
	// RVA: 0x685280 Offset: 0x683A80 VA: 0x180685280
	public void Emit(ParticleSystem.EmitParams emitParams, int count) { }
	// RVA: 0x6852F0 Offset: 0x683AF0 VA: 0x1806852F0
	private void EmitOld_Internal(ref ParticleSystem.Particle particle) { }
	// RVA: 0x546400 Offset: 0x544C00 VA: 0x180546400
	public ParticleSystem.MainModule get_main() { }
	// RVA: 0x685350 Offset: 0x683B50 VA: 0x180685350
	private void Emit_Injected(ref ParticleSystem.EmitParams emitParams, int count) { }
}

// Namespace: 
public struct ParticleSystem.MainModule // TypeDefIndex: 2090
{
	// Fields
	internal ParticleSystem m_ParticleSystem; // 0x0

	// Properties
	public ParticleSystem.MinMaxCurve startSpeed { set; }
	public ParticleSystem.MinMaxCurve startSize { set; }
	public ParticleSystem.MinMaxGradient startColor { get; set; }
	public bool playOnAwake { set; }

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	internal void .ctor(ParticleSystem particleSystem) { }
	// RVA: 0x280E0 Offset: 0x274E0 VA: 0x1800280E0
	public void set_startSpeed(ParticleSystem.MinMaxCurve value) { }
	// RVA: 0x28150 Offset: 0x27550 VA: 0x180028150
	public void set_startSize(ParticleSystem.MinMaxCurve value) { }
	// RVA: 0x281C0 Offset: 0x275C0 VA: 0x1800281C0
	public ParticleSystem.MinMaxGradient get_startColor() { }
	// RVA: 0x281E0 Offset: 0x275E0 VA: 0x1800281E0
	public void set_startColor(ParticleSystem.MinMaxGradient value) { }
	// RVA: 0x28260 Offset: 0x27660 VA: 0x180028260
	public void set_playOnAwake(bool value) { }
	// RVA: 0x685500 Offset: 0x683D00 VA: 0x180685500
	private static void set_startSpeed_Injected(ref ParticleSystem.MainModule _unity_self, ref ParticleSystem.MinMaxCurve value) { }
	// RVA: 0x685560 Offset: 0x683D60 VA: 0x180685560
	private static void set_startSize_Injected(ref ParticleSystem.MainModule _unity_self, ref ParticleSystem.MinMaxCurve value) { }
	// RVA: 0x6855C0 Offset: 0x683DC0 VA: 0x1806855C0
	private static void get_startColor_Injected(ref ParticleSystem.MainModule _unity_self, out ParticleSystem.MinMaxGradient ret) { }
	// RVA: 0x685620 Offset: 0x683E20 VA: 0x180685620
	private static void set_startColor_Injected(ref ParticleSystem.MainModule _unity_self, ref ParticleSystem.MinMaxGradient value) { }
	// RVA: 0x6854A0 Offset: 0x683CA0 VA: 0x1806854A0
	private static void set_playOnAwake_Injected(ref ParticleSystem.MainModule _unity_self, bool value) { }
}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0xF2500 Offset: 0xF1900 VA: 0x1800F2500
public struct ParticleSystem.Particle // TypeDefIndex: 2091
{
	// Fields
	private Vector3 m_Position; // 0x0
	private Vector3 m_Velocity; // 0xC
	private Vector3 m_AnimatedVelocity; // 0x18
	private Vector3 m_InitialVelocity; // 0x24
	private Vector3 m_AxisOfRotation; // 0x30
	private Vector3 m_Rotation; // 0x3C
	private Vector3 m_AngularVelocity; // 0x48
	private Vector3 m_StartSize; // 0x54
	private Color32 m_StartColor; // 0x60
	private uint m_RandomSeed; // 0x64
	private uint m_ParentRandomSeed; // 0x68
	private float m_Lifetime; // 0x6C
	private float m_StartLifetime; // 0x70
	private int m_MeshIndex; // 0x74
	private float m_EmitAccumulator0; // 0x78
	private float m_EmitAccumulator1; // 0x7C
	private uint m_Flags; // 0x80

	// Properties
	[ObsoleteAttribute] // RVA: 0xF2530 Offset: 0xF1930 VA: 0x1800F2530
	set; }
	public Vector3 position { set; }
	public Vector3 velocity { set; }
	public float remainingLifetime { set; }
	public float startLifetime { set; }
	public Color32 startColor { set; }
	public uint randomSeed { set; }
	public float startSize { set; }
	public Vector3 rotation3D { set; }
	public Vector3 angularVelocity3D { set; }

	// Methods
	// RVA: 0x13530 Offset: 0x12930 VA: 0x180013530
	public void set_lifetime(float value) { }
	// RVA: 0x1E600 Offset: 0x1DA00 VA: 0x18001E600
	public void set_position(Vector3 value) { }
	// RVA: 0x201D0 Offset: 0x1F5D0 VA: 0x1800201D0
	public void set_velocity(Vector3 value) { }
	// RVA: 0x13530 Offset: 0x12930 VA: 0x180013530
	public void set_remainingLifetime(float value) { }
	// RVA: 0x282C0 Offset: 0x276C0 VA: 0x1800282C0
	public void set_startLifetime(float value) { }
	// RVA: 0x282D0 Offset: 0x276D0 VA: 0x1800282D0
	public void set_startColor(Color32 value) { }
	// RVA: 0x282E0 Offset: 0x276E0 VA: 0x1800282E0
	public void set_randomSeed(uint value) { }
	// RVA: 0x282F0 Offset: 0x276F0 VA: 0x1800282F0
	public void set_startSize(float value) { }
	// RVA: 0x28320 Offset: 0x27720 VA: 0x180028320
	public void set_rotation3D(Vector3 value) { }
	// RVA: 0x28350 Offset: 0x27750 VA: 0x180028350
	public void set_angularVelocity3D(Vector3 value) { }
}

// Namespace: 
[Serializable]
public struct ParticleSystem.MinMaxCurve // TypeDefIndex: 2092
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ParticleSystemCurveMode m_Mode; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_CurveMultiplier; // 0x4
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationCurve m_CurveMin; // 0x8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationCurve m_CurveMax; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_ConstantMin; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_ConstantMax; // 0x1C

	// Methods
	// RVA: 0x28270 Offset: 0x27670 VA: 0x180028270
	public void .ctor(float constant) { }
	// RVA: 0x685680 Offset: 0x683E80 VA: 0x180685680
	public static ParticleSystem.MinMaxCurve op_Implicit(float constant) { }
}

// Namespace: 
[Serializable]
public struct ParticleSystem.MinMaxGradient // TypeDefIndex: 2093
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ParticleSystemGradientMode m_Mode; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Gradient m_GradientMin; // 0x8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Gradient m_GradientMax; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Color m_ColorMin; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Color m_ColorMax; // 0x28

	// Properties
	public Color color { get; }

	// Methods
	// RVA: 0x28290 Offset: 0x27690 VA: 0x180028290
	public void .ctor(Color color) { }
	// RVA: 0x282B0 Offset: 0x276B0 VA: 0x1800282B0
	public Color get_color() { }
	// RVA: 0x6856A0 Offset: 0x683EA0 VA: 0x1806856A0
	public static ParticleSystem.MinMaxGradient op_Implicit(Color color) { }
}

// Namespace: 
public struct ParticleSystem.EmitParams // TypeDefIndex: 2094
{
	// Fields
	private ParticleSystem.Particle m_Particle; // 0x0
	private bool m_PositionSet; // 0x84
	private bool m_VelocitySet; // 0x85
	private bool m_AxisOfRotationSet; // 0x86
	private bool m_RotationSet; // 0x87
	private bool m_AngularVelocitySet; // 0x88
	private bool m_StartSizeSet; // 0x89
	private bool m_StartColorSet; // 0x8A
	private bool m_RandomSeedSet; // 0x8B
	private bool m_StartLifetimeSet; // 0x8C
	private bool m_MeshIndexSet; // 0x8D
	private bool m_ApplyShapeToPosition; // 0x8E
}

// Namespace: UnityEngine
public enum ParticleSystemCurveMode // TypeDefIndex: 2095
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemCurveMode Constant = 0; // 0x0
	public const ParticleSystemCurveMode Curve = 1; // 0x0
	public const ParticleSystemCurveMode TwoCurves = 2; // 0x0
	public const ParticleSystemCurveMode TwoConstants = 3; // 0x0
}

// Namespace: UnityEngine
public enum ParticleSystemGradientMode // TypeDefIndex: 2096
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemGradientMode Color = 0; // 0x0
	public const ParticleSystemGradientMode Gradient = 1; // 0x0
	public const ParticleSystemGradientMode TwoColors = 2; // 0x0
	public const ParticleSystemGradientMode TwoGradients = 3; // 0x0
	public const ParticleSystemGradientMode RandomColor = 4; // 0x0
}

// Namespace: UnityEngine
public enum ParticleSystemStopBehavior // TypeDefIndex: 2097
{
	// Fields
	public int value__; // 0x0
	public const ParticleSystemStopBehavior StopEmittingAndClear = 0; // 0x0
	public const ParticleSystemStopBehavior StopEmitting = 1; // 0x0
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xF2560 Offset: 0xF1960 VA: 0x1800F2560
public sealed class ParticleSystemRenderer : Renderer // TypeDefIndex: 2098
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x6853C0 Offset: 0x683BC0 VA: 0x1806853C0
	public int GetMeshes([Out] Mesh[] meshes) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2099
{}

// Namespace: UnityEngine.U2D
[MovedFromAttribute] // RVA: 0xDD390 Offset: 0xDC790 VA: 0x1800DD390
public class SpriteShapeRenderer : Renderer // TypeDefIndex: 2100
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2101
{}

// Namespace: UnityEngine
public class TerrainCollider : Collider // TypeDefIndex: 2102
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2103
{}

// Namespace: UnityEngine.TextCore
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public struct FaceInfo // TypeDefIndex: 2104
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_FamilyName; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_StyleName; // 0x8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_PointSize; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_Scale; // 0x14
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_LineHeight; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_AscentLine; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_CapLine; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_MeanLine; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_Baseline; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_DescentLine; // 0x2C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_SuperscriptOffset; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_SuperscriptSize; // 0x34
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_SubscriptOffset; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_SubscriptSize; // 0x3C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_UnderlineOffset; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_UnderlineThickness; // 0x44
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_StrikethroughOffset; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_StrikethroughThickness; // 0x4C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_TabWidth; // 0x50

	// Properties
	set; }
	public string styleName { set; }
	public int pointSize { get; set; }
	public float scale { get; set; }
	public float lineHeight { get; set; }
	public float ascentLine { get; set; }
	public float capLine { get; set; }
	public float meanLine { get; set; }
	public float baseline { get; set; }
	public float descentLine { get; set; }
	public float superscriptOffset { get; set; }
	public float superscriptSize { get; set; }
	public float subscriptOffset { get; set; }
	public float subscriptSize { get; set; }
	public float underlineOffset { get; set; }
	public float underlineThickness { get; set; }
	public float strikethroughOffset { get; set; }
	public float strikethroughThickness { set; }
	public float tabWidth { get; set; }

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	public void set_familyName(string value) { }
	// RVA: 0x20F0 Offset: 0x14F0 VA: 0x1800020F0
	public void set_styleName(string value) { }
	// RVA: 0x26680 Offset: 0x25A80 VA: 0x180026680
	public int get_pointSize() { }
	// RVA: 0x2340 Offset: 0x1740 VA: 0x180002340
	public void set_pointSize(int value) { }
	// RVA: 0x26690 Offset: 0x25A90 VA: 0x180026690
	public float get_scale() { }
	// RVA: 0x2350 Offset: 0x1750 VA: 0x180002350
	public void set_scale(float value) { }
	// RVA: 0x26450 Offset: 0x25850 VA: 0x180026450
	public float get_lineHeight() { }
	// RVA: 0x2360 Offset: 0x1760 VA: 0x180002360
	public void set_lineHeight(float value) { }
	// RVA: 0x25680 Offset: 0x24A80 VA: 0x180025680
	public float get_ascentLine() { }
	// RVA: 0x2370 Offset: 0x1770 VA: 0x180002370
	public void set_ascentLine(float value) { }
	// RVA: 0x266A0 Offset: 0x25AA0 VA: 0x1800266A0
	public float get_capLine() { }
	// RVA: 0x2380 Offset: 0x1780 VA: 0x180002380
	public void set_capLine(float value) { }
	// RVA: 0x20B30 Offset: 0x1FF30 VA: 0x180020B30
	public float get_meanLine() { }
	// RVA: 0x2390 Offset: 0x1790 VA: 0x180002390
	public void set_meanLine(float value) { }
	// RVA: 0x266B0 Offset: 0x25AB0 VA: 0x1800266B0
	public float get_baseline() { }
	// RVA: 0x23A0 Offset: 0x17A0 VA: 0x1800023A0
	public void set_baseline(float value) { }
	// RVA: 0x266C0 Offset: 0x25AC0 VA: 0x1800266C0
	public float get_descentLine() { }
	// RVA: 0x23B0 Offset: 0x17B0 VA: 0x1800023B0
	public void set_descentLine(float value) { }
	// RVA: 0x266D0 Offset: 0x25AD0 VA: 0x1800266D0
	public float get_superscriptOffset() { }
	// RVA: 0xEA20 Offset: 0xDE20 VA: 0x18000EA20
	public void set_superscriptOffset(float value) { }
	// RVA: 0x266E0 Offset: 0x25AE0 VA: 0x1800266E0
	public float get_superscriptSize() { }
	// RVA: 0xEC80 Offset: 0xE080 VA: 0x18000EC80
	public void set_superscriptSize(float value) { }
	// RVA: 0x266F0 Offset: 0x25AF0 VA: 0x1800266F0
	public float get_subscriptOffset() { }
	// RVA: 0x26700 Offset: 0x25B00 VA: 0x180026700
	public void set_subscriptOffset(float value) { }
	// RVA: 0x26710 Offset: 0x25B10 VA: 0x180026710
	public float get_subscriptSize() { }
	// RVA: 0x26720 Offset: 0x25B20 VA: 0x180026720
	public void set_subscriptSize(float value) { }
	// RVA: 0x26730 Offset: 0x25B30 VA: 0x180026730
	public float get_underlineOffset() { }
	// RVA: 0x26740 Offset: 0x25B40 VA: 0x180026740
	public void set_underlineOffset(float value) { }
	// RVA: 0x26750 Offset: 0x25B50 VA: 0x180026750
	public float get_underlineThickness() { }
	// RVA: 0x26760 Offset: 0x25B60 VA: 0x180026760
	public void set_underlineThickness(float value) { }
	// RVA: 0x26770 Offset: 0x25B70 VA: 0x180026770
	public float get_strikethroughOffset() { }
	// RVA: 0x26780 Offset: 0x25B80 VA: 0x180026780
	public void set_strikethroughOffset(float value) { }
	// RVA: 0x26790 Offset: 0x25B90 VA: 0x180026790
	public void set_strikethroughThickness(float value) { }
	// RVA: 0x267A0 Offset: 0x25BA0 VA: 0x1800267A0
	public float get_tabWidth() { }
	// RVA: 0x8710 Offset: 0x7B10 VA: 0x180008710
	public void set_tabWidth(float value) { }
}

// Namespace: UnityEngine.TextCore
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public struct GlyphRect : IEquatable<GlyphRect> // TypeDefIndex: 2105
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_X; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_Y; // 0x4
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_Width; // 0x8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_Height; // 0xC
	private static readonly GlyphRect s_ZeroGlyphRect; // 0x0

	// Properties
	public int x { get; }
	public int y { get; }
	public int width { get; }
	public int height { get; }
	public static GlyphRect zero { get; }

	// Methods
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060
	public int get_x() { }
	// RVA: 0x16070 Offset: 0x15470 VA: 0x180016070
	public int get_y() { }
	// RVA: 0x16080 Offset: 0x15480 VA: 0x180016080
	public int get_width() { }
	// RVA: 0x1EB00 Offset: 0x1DF00 VA: 0x18001EB00
	public int get_height() { }
	// RVA: 0x67B130 Offset: 0x679930 VA: 0x18067B130
	public static GlyphRect get_zero() { }
	// RVA: 0x26AD0 Offset: 0x25ED0 VA: 0x180026AD0
	public void .ctor(int x, int y, int width, int height) { }
	// RVA: 0x26AF0 Offset: 0x25EF0 VA: 0x180026AF0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x26B00 Offset: 0x25F00 VA: 0x180026B00 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x26B10 Offset: 0x25F10 VA: 0x180026B10 Slot: 4
	public bool Equals(GlyphRect other) { }
	// RVA: 0x67B400 Offset: 0x679C00 VA: 0x18067B400
	private static void .cctor() { }
}

// Namespace: UnityEngine.TextCore
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public struct GlyphMetrics : IEquatable<GlyphMetrics> // TypeDefIndex: 2106
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_Width; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_Height; // 0x4
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_HorizontalBearingX; // 0x8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_HorizontalBearingY; // 0xC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_HorizontalAdvance; // 0x10

	// Properties
	public float width { get; }
	public float height { get; }
	public float horizontalBearingX { get; }
	public float horizontalBearingY { get; }
	public float horizontalAdvance { get; }

	// Methods
	// RVA: 0x1E790 Offset: 0x1DB90 VA: 0x18001E790
	public float get_width() { }
	// RVA: 0x1E7A0 Offset: 0x1DBA0 VA: 0x18001E7A0
	public float get_height() { }
	// RVA: 0x1E8E0 Offset: 0x1DCE0 VA: 0x18001E8E0
	public float get_horizontalBearingX() { }
	// RVA: 0x1D690 Offset: 0x1CA90 VA: 0x18001D690
	public float get_horizontalBearingY() { }
	// RVA: 0x26820 Offset: 0x25C20 VA: 0x180026820
	public float get_horizontalAdvance() { }
	// RVA: 0x26830 Offset: 0x25C30 VA: 0x180026830
	public void .ctor(float width, float height, float bearingX, float bearingY, float advance) { }
	// RVA: 0x26860 Offset: 0x25C60 VA: 0x180026860 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x26900 Offset: 0x25D00 VA: 0x180026900 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x269B0 Offset: 0x25DB0 VA: 0x1800269B0 Slot: 4
	public bool Equals(GlyphMetrics other) { }
}

// Namespace: UnityEngine.TextCore
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public class Glyph // TypeDefIndex: 2107
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private uint m_Index; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GlyphMetrics m_Metrics; // 0x14
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GlyphRect m_GlyphRect; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_Scale; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_AtlasIndex; // 0x3C

	// Properties
	public uint index { get; set; }
	public GlyphMetrics metrics { get; set; }
	public GlyphRect glyphRect { get; set; }
	public float scale { get; set; }
	public int atlasIndex { get; set; }

	// Methods
	// RVA: 0x440EE0 Offset: 0x43F6E0 VA: 0x180440EE0
	public uint get_index() { }
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void set_index(uint value) { }
	// RVA: 0x67B000 Offset: 0x679800 VA: 0x18067B000
	public GlyphMetrics get_metrics() { }
	// RVA: 0x67B020 Offset: 0x679820 VA: 0x18067B020
	public void set_metrics(GlyphMetrics value) { }
	// RVA: 0x5FB320 Offset: 0x5F9B20 VA: 0x1805FB320
	public GlyphRect get_glyphRect() { }
	// RVA: 0x5B41B0 Offset: 0x5B29B0 VA: 0x1805B41B0
	public void set_glyphRect(GlyphRect value) { }
	// RVA: 0x679090 Offset: 0x677890 VA: 0x180679090
	public float get_scale() { }
	// RVA: 0x1FEFB0 Offset: 0x1FD7B0 VA: 0x1801FEFB0
	public void set_scale(float value) { }
	// RVA: 0x67B030 Offset: 0x679830 VA: 0x18067B030
	public int get_atlasIndex() { }
	// RVA: 0x2DBB20 Offset: 0x2DA320 VA: 0x1802DBB20
	public void set_atlasIndex(int value) { }
	// RVA: 0x16E520 Offset: 0x16CD20 VA: 0x18016E520
	public void .ctor() { }
	// RVA: 0x67B040 Offset: 0x679840 VA: 0x18067B040
	internal void .ctor(GlyphMarshallingStruct glyphStruct) { }
	// RVA: 0x67B0B0 Offset: 0x6798B0 VA: 0x18067B0B0
	public void .ctor(uint index, GlyphMetrics metrics, GlyphRect glyphRect, float scale, int atlasIndex) { }
}

// Namespace: UnityEngine.TextCore.LowLevel
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
internal struct GlyphValueRecord // TypeDefIndex: 2108
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_XPlacement; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_YPlacement; // 0x4
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_XAdvance; // 0x8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_YAdvance; // 0xC

	// Properties
	public float xPlacement { get; }
	public float yPlacement { get; }
	public float xAdvance { get; }
	public float yAdvance { get; }

	// Methods
	// RVA: 0x1E790 Offset: 0x1DB90 VA: 0x18001E790
	public float get_xPlacement() { }
	// RVA: 0x1E7A0 Offset: 0x1DBA0 VA: 0x18001E7A0
	public float get_yPlacement() { }
	// RVA: 0x1E8E0 Offset: 0x1DCE0 VA: 0x18001E8E0
	public float get_xAdvance() { }
	// RVA: 0x1D690 Offset: 0x1CA90 VA: 0x18001D690
	public float get_yAdvance() { }
}

// Namespace: UnityEngine.TextCore.LowLevel
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
internal struct GlyphAdjustmentRecord // TypeDefIndex: 2109
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private uint m_GlyphIndex; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GlyphValueRecord m_GlyphValueRecord; // 0x4

	// Properties
	public uint glyphIndex { get; }
	public GlyphValueRecord glyphValueRecord { get; }

	// Methods
	// RVA: 0x16060 Offset: 0x15460 VA: 0x180016060
	public uint get_glyphIndex() { }
	// RVA: 0x26810 Offset: 0x25C10 VA: 0x180026810
	public GlyphValueRecord get_glyphValueRecord() { }
}

// Namespace: UnityEngine.TextCore.LowLevel
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
internal struct GlyphPairAdjustmentRecord // TypeDefIndex: 2110
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GlyphAdjustmentRecord m_FirstAdjustmentRecord; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GlyphAdjustmentRecord m_SecondAdjustmentRecord; // 0x14

	// Properties
	public GlyphAdjustmentRecord firstAdjustmentRecord { get; }
	public GlyphAdjustmentRecord secondAdjustmentRecord { get; }

	// Methods
	// RVA: 0x26A90 Offset: 0x25E90 VA: 0x180026A90
	public GlyphAdjustmentRecord get_firstAdjustmentRecord() { }
	// RVA: 0x26AB0 Offset: 0x25EB0 VA: 0x180026AB0
	public GlyphAdjustmentRecord get_secondAdjustmentRecord() { }
}

// Namespace: UnityEngine.TextCore.LowLevel
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum GlyphLoadFlags // TypeDefIndex: 2111
{
	// Fields
	public int value__; // 0x0
	public const GlyphLoadFlags LOAD_DEFAULT = 0; // 0x0
	public const GlyphLoadFlags LOAD_NO_SCALE = 1; // 0x0
	public const GlyphLoadFlags LOAD_NO_HINTING = 2; // 0x0
	public const GlyphLoadFlags LOAD_RENDER = 4; // 0x0
	public const GlyphLoadFlags LOAD_NO_BITMAP = 8; // 0x0
	public const GlyphLoadFlags LOAD_FORCE_AUTOHINT = 32; // 0x0
	public const GlyphLoadFlags LOAD_MONOCHROME = 4096; // 0x0
	public const GlyphLoadFlags LOAD_NO_AUTOHINT = 32768; // 0x0
	public const GlyphLoadFlags LOAD_COMPUTE_METRICS = 2097152; // 0x0
	public const GlyphLoadFlags LOAD_BITMAP_METRICS_ONLY = 4194304; // 0x0
}

// Namespace: UnityEngine.TextCore.LowLevel
public enum FontEngineError // TypeDefIndex: 2112
{
	// Fields
	public int value__; // 0x0
	public const FontEngineError Success = 0; // 0x0
	public const FontEngineError Invalid_File_Path = 1; // 0x0
	public const FontEngineError Invalid_File_Format = 2; // 0x0
	public const FontEngineError Invalid_File_Structure = 3; // 0x0
	public const FontEngineError Invalid_File = 4; // 0x0
	public const FontEngineError Invalid_Table = 8; // 0x0
	public const FontEngineError Invalid_Glyph_Index = 16; // 0x0
	public const FontEngineError Invalid_Character_Code = 17; // 0x0
	public const FontEngineError Invalid_Pixel_Size = 23; // 0x0
	public const FontEngineError Invalid_Library = 33; // 0x0
	public const FontEngineError Invalid_Face = 35; // 0x0
	public const FontEngineError Invalid_Library_or_Face = 41; // 0x0
	public const FontEngineError Atlas_Generation_Cancelled = 100; // 0x0
	public const FontEngineError Invalid_SharedTextureData = 101; // 0x0
}

// Namespace: UnityEngine.TextCore.LowLevel
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum GlyphRenderMode // TypeDefIndex: 2113
{
	// Fields
	public int value__; // 0x0
	public const GlyphRenderMode SMOOTH_HINTED = 4121; // 0x0
	public const GlyphRenderMode SMOOTH = 4117; // 0x0
	public const GlyphRenderMode RASTER_HINTED = 4122; // 0x0
	public const GlyphRenderMode RASTER = 4118; // 0x0
	public const GlyphRenderMode SDF = 4138; // 0x0
	public const GlyphRenderMode SDF8 = 8234; // 0x0
	public const GlyphRenderMode SDF16 = 16426; // 0x0
	public const GlyphRenderMode SDF32 = 32810; // 0x0
	public const GlyphRenderMode SDFAA_HINTED = 4169; // 0x0
	public const GlyphRenderMode SDFAA = 4165; // 0x0
}

// Namespace: UnityEngine.TextCore.LowLevel
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum GlyphPackingMode // TypeDefIndex: 2114
{
	// Fields
	public int value__; // 0x0
	public const GlyphPackingMode BestShortSideFit = 0; // 0x0
	public const GlyphPackingMode BestLongSideFit = 1; // 0x0
	public const GlyphPackingMode BestAreaFit = 2; // 0x0
	public const GlyphPackingMode BottomLeftRule = 3; // 0x0
	public const GlyphPackingMode ContactPointRule = 4; // 0x0
}

// Namespace: UnityEngine.TextCore.LowLevel
public sealed class FontEngine // TypeDefIndex: 2115
{
	// Fields
	private static readonly FontEngine s_Instance; // 0x0
	private static Glyph[] s_Glyphs; // 0x8
	private static uint[] s_GlyphIndexes_MarshallingArray; // 0x10
	private static GlyphMarshallingStruct[] s_GlyphMarshallingStruct_IN; // 0x18
	private static GlyphMarshallingStruct[] s_GlyphMarshallingStruct_OUT; // 0x20
	private static GlyphRect[] s_FreeGlyphRects; // 0x28
	private static GlyphRect[] s_UsedGlyphRects; // 0x30
	private static GlyphPairAdjustmentRecord[] s_PairAdjustmentRecords_MarshallingArray; // 0x38
	private static Dictionary<uint, Glyph> s_GlyphLookupDictionary; // 0x40

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x6790B0 Offset: 0x6778B0 VA: 0x1806790B0
	public static FontEngineError InitializeFontEngine() { }
	// RVA: 0x679170 Offset: 0x677970 VA: 0x180679170
	private static int InitializeFontEngine_Internal() { }
	// RVA: 0x6791C0 Offset: 0x6779C0 VA: 0x1806791C0
	public static FontEngineError LoadFontFace(Font font, int pointSize) { }
	// RVA: 0x6792A0 Offset: 0x677AA0 VA: 0x1806792A0
	private static int LoadFontFace_With_Size_FromFont_Internal(Font font, int pointSize) { }
	// RVA: 0x679300 Offset: 0x677B00 VA: 0x180679300
	public static FaceInfo GetFaceInfo() { }
	// RVA: 0x679450 Offset: 0x677C50 VA: 0x180679450
	private static int GetFaceInfo_Internal(ref FaceInfo faceInfo) { }
	// RVA: 0x6794A0 Offset: 0x677CA0 VA: 0x1806794A0
	internal static uint GetGlyphIndex(uint unicode) { }
	// RVA: 0x6794F0 Offset: 0x677CF0 VA: 0x1806794F0
	public static bool TryGetGlyphWithUnicodeValue(uint unicode, GlyphLoadFlags flags, out Glyph glyph) { }
	// RVA: 0x679690 Offset: 0x677E90 VA: 0x180679690
	private static bool TryGetGlyphWithUnicodeValue_Internal(uint unicode, GlyphLoadFlags loadFlags, ref GlyphMarshallingStruct glyphStruct) { }
	// RVA: 0x679700 Offset: 0x677F00 VA: 0x180679700
	public static bool TryGetGlyphWithIndexValue(uint glyphIndex, GlyphLoadFlags flags, out Glyph glyph) { }
	// RVA: 0x6798A0 Offset: 0x6780A0 VA: 0x1806798A0
	private static bool TryGetGlyphWithIndexValue_Internal(uint glyphIndex, GlyphLoadFlags loadFlags, ref GlyphMarshallingStruct glyphStruct) { }
	// RVA: 0x679910 Offset: 0x678110 VA: 0x180679910
	internal static bool TryAddGlyphToTexture(uint glyphIndex, int padding, GlyphPackingMode packingMode, List<GlyphRect> freeGlyphRects, List<GlyphRect> usedGlyphRects, GlyphRenderMode renderMode, Texture2D texture, out Glyph glyph) { }
	// RVA: 0x679F50 Offset: 0x678750 VA: 0x180679F50
	private static bool TryAddGlyphToTexture_Internal(uint glyphIndex, int padding, GlyphPackingMode packingMode, [Out] GlyphRect[] freeGlyphRects, ref int freeGlyphRectCount, [Out] GlyphRect[] usedGlyphRects, ref int usedGlyphRectCount, GlyphRenderMode renderMode, Texture2D texture, out GlyphMarshallingStruct glyph) { }
	// RVA: 0x679FD0 Offset: 0x6787D0 VA: 0x180679FD0
	internal static bool TryAddGlyphsToTexture(List<uint> glyphIndexes, int padding, GlyphPackingMode packingMode, List<GlyphRect> freeGlyphRects, List<GlyphRect> usedGlyphRects, GlyphRenderMode renderMode, Texture2D texture, out Glyph[] glyphs) { }
	// RVA: 0x67AAC0 Offset: 0x6792C0 VA: 0x18067AAC0
	private static bool TryAddGlyphsToTexture_Internal(uint[] glyphIndex, int padding, GlyphPackingMode packingMode, [Out] GlyphRect[] freeGlyphRects, ref int freeGlyphRectCount, [Out] GlyphRect[] usedGlyphRects, ref int usedGlyphRectCount, GlyphRenderMode renderMode, Texture2D texture, [Out] GlyphMarshallingStruct[] glyphs, ref int glyphCount) { }
	// RVA: 0x67AB50 Offset: 0x679350 VA: 0x18067AB50
	internal static GlyphPairAdjustmentRecord[] GetGlyphPairAdjustmentTable(uint[] glyphIndexes) { }
	// RVA: 0x67AD70 Offset: 0x679570 VA: 0x18067AD70
	private static int GetGlyphPairAdjustmentTable_Internal(uint[] glyphIndexes, [Out] GlyphPairAdjustmentRecord[] glyphPairAdjustmentRecords, out int adjustmentRecordCount) { }
	// RVA: 0x67ADE0 Offset: 0x6795E0 VA: 0x18067ADE0
	internal static void ResetAtlasTexture(Texture2D texture) { }
	// RVA: 0x67AE30 Offset: 0x679630 VA: 0x18067AE30
	private static void .cctor() { }
}

// Namespace: UnityEngine.TextCore.LowLevel
internal struct FontEngineUtilities // TypeDefIndex: 2116
{
	// Methods
	// RVA: 0x67AFE0 Offset: 0x6797E0 VA: 0x18067AFE0
	internal static int MaxValue(int a, int b, int c) { }
}

// Namespace: UnityEngine.TextCore.LowLevel
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal struct GlyphMarshallingStruct // TypeDefIndex: 2117
{
	// Fields
	public uint index; // 0x0
	public GlyphMetrics metrics; // 0x4
	public GlyphRect glyphRect; // 0x18
	public float scale; // 0x28
	public int atlasIndex; // 0x2C
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2118
{}

// Namespace: UnityEngine.Tilemaps
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class ITilemap // TypeDefIndex: 2119
{
	// Fields
	internal static ITilemap s_Instance; // 0x0
	internal Tilemap m_Tilemap; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x68B930 Offset: 0x68A130 VA: 0x18068B930
	public void RefreshTile(Vector3Int position) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68B9B0 Offset: 0x68A1B0 VA: 0x18068B9B0
	private static ITilemap CreateInstance() { }
}

// Namespace: UnityEngine.Tilemaps
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public class Tile : TileBase // TypeDefIndex: 2120
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Sprite m_Sprite; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Color m_Color; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Matrix4x4 m_Transform; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject m_InstancedGameObject; // 0x70
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TileFlags m_Flags; // 0x78
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Tile.ColliderType m_ColliderType; // 0x7C

	// Properties
	public Sprite sprite { get; set; }
	public Color color { get; set; }
	public Matrix4x4 transform { get; set; }
	public GameObject gameObject { get; set; }
	public TileFlags flags { get; set; }
	public Tile.ColliderType colliderType { get; set; }

	// Methods
	// RVA: 0x537AA0 Offset: 0x5362A0 VA: 0x180537AA0
	public Sprite get_sprite() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_sprite(Sprite value) { }
	// RVA: 0x670160 Offset: 0x66E960 VA: 0x180670160
	public Color get_color() { }
	// RVA: 0x68BA40 Offset: 0x68A240 VA: 0x18068BA40
	public void set_color(Color value) { }
	// RVA: 0x68BA50 Offset: 0x68A250 VA: 0x18068BA50
	public Matrix4x4 get_transform() { }
	// RVA: 0x68BA80 Offset: 0x68A280 VA: 0x18068BA80
	public void set_transform(Matrix4x4 value) { }
	// RVA: 0x5FB700 Offset: 0x5F9F00 VA: 0x1805FB700
	public GameObject get_gameObject() { }
	// RVA: 0x345180 Offset: 0x343980 VA: 0x180345180
	public void set_gameObject(GameObject value) { }
	// RVA: 0x68BAA0 Offset: 0x68A2A0 VA: 0x18068BAA0
	public TileFlags get_flags() { }
	// RVA: 0x68BAB0 Offset: 0x68A2B0 VA: 0x18068BAB0
	public void set_flags(TileFlags value) { }
	// RVA: 0x68BAC0 Offset: 0x68A2C0 VA: 0x18068BAC0
	public Tile.ColliderType get_colliderType() { }
	// RVA: 0x68BAD0 Offset: 0x68A2D0 VA: 0x18068BAD0
	public void set_colliderType(Tile.ColliderType value) { }
	// RVA: 0x68BAE0 Offset: 0x68A2E0 VA: 0x18068BAE0 Slot: 5
	public override void GetTileData(Vector3Int position, ITilemap tilemap, ref TileData tileData) { }
	// RVA: 0x68BB30 Offset: 0x68A330 VA: 0x18068BB30
	public void .ctor() { }
}

// Namespace: 
public enum Tile.ColliderType // TypeDefIndex: 2121
{
	// Fields
	public int value__; // 0x0
	public const Tile.ColliderType None = 0; // 0x0
	public const Tile.ColliderType Sprite = 1; // 0x0
	public const Tile.ColliderType Grid = 2; // 0x0
}

// Namespace: UnityEngine.Tilemaps
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public abstract class TileBase : ScriptableObject // TypeDefIndex: 2122
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68BC10 Offset: 0x68A410 VA: 0x18068BC10 Slot: 4
	public virtual void RefreshTile(Vector3Int position, ITilemap tilemap) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	public virtual void GetTileData(Vector3Int position, ITilemap tilemap, ref TileData tileData) { }
	// RVA: 0x68BC90 Offset: 0x68A490 VA: 0x18068BC90
	private TileData GetTileDataNoRef(Vector3Int position, ITilemap tilemap) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x378D30 Offset: 0x377530 VA: 0x180378D30 Slot: 6
	public virtual bool GetTileAnimationData(Vector3Int position, ITilemap tilemap, ref TileAnimationData tileAnimationData) { }
	// RVA: 0x68BD90 Offset: 0x68A590 VA: 0x18068BD90
	private TileAnimationData GetTileAnimationDataNoRef(Vector3Int position, ITilemap tilemap) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x378D30 Offset: 0x377530 VA: 0x180378D30 Slot: 7
	public virtual bool StartUp(Vector3Int position, ITilemap tilemap, GameObject go) { }
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	protected void .ctor() { }
}

// Namespace: UnityEngine.Tilemaps
[RequireComponent] // RVA: 0xF7230 Offset: 0xF6630 VA: 0x1800F7230
public sealed class Tilemap : GridLayout // TypeDefIndex: 2123
{
	// Methods
	// RVA: 0x68BE00 Offset: 0x68A600 VA: 0x18068BE00
	public void RefreshTile(Vector3Int position) { }
	// RVA: 0x68BE60 Offset: 0x68A660 VA: 0x18068BE60
	private void RefreshTile_Injected(ref Vector3Int position) { }
}

// Namespace: UnityEngine.Tilemaps
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum TileFlags // TypeDefIndex: 2124
{
	// Fields
	public int value__; // 0x0
	public const TileFlags None = 0; // 0x0
	public const TileFlags LockColor = 1; // 0x0
	public const TileFlags LockTransform = 2; // 0x0
	public const TileFlags InstantiateGameObjectRuntimeOnly = 4; // 0x0
	public const TileFlags LockAll = 3; // 0x0
}

// Namespace: UnityEngine.Tilemaps
[RequireComponent] // RVA: 0xF72B0 Offset: 0xF66B0 VA: 0x1800F72B0
public sealed class TilemapRenderer : Renderer // TypeDefIndex: 2125
{}

// Namespace: UnityEngine.Tilemaps
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct TileData // TypeDefIndex: 2126
{
	// Fields
	private Sprite m_Sprite; // 0x0
	private Color m_Color; // 0x8
	private Matrix4x4 m_Transform; // 0x18
	private GameObject m_GameObject; // 0x58
	private TileFlags m_Flags; // 0x60
	private Tile.ColliderType m_ColliderType; // 0x64

	// Properties
	set; }
	public Color color { set; }
	public Matrix4x4 transform { set; }
	public GameObject gameObject { set; }
	public TileFlags flags { set; }
	public Tile.ColliderType colliderType { set; }

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	public void set_sprite(Sprite value) { }
	// RVA: 0x87D0 Offset: 0x7BD0 VA: 0x1800087D0
	public void set_color(Color value) { }
	// RVA: 0x2B1B0 Offset: 0x2A5B0 VA: 0x18002B1B0
	public void set_transform(Matrix4x4 value) { }
	// RVA: 0x176F0 Offset: 0x16AF0 VA: 0x1800176F0
	public void set_gameObject(GameObject value) { }
	// RVA: 0x282D0 Offset: 0x276D0 VA: 0x1800282D0
	public void set_flags(TileFlags value) { }
	// RVA: 0x282E0 Offset: 0x276E0 VA: 0x1800282E0
	public void set_colliderType(Tile.ColliderType value) { }
}

// Namespace: UnityEngine.Tilemaps
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct TileAnimationData // TypeDefIndex: 2127
{
	// Fields
	private Sprite[] m_AnimatedSprites; // 0x0
	private float m_AnimationSpeed; // 0x8
	private float m_AnimationStartTime; // 0xC
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2128
{}

// Namespace: UnityEngine.Yoga
internal sealed class BaselineFunction : MulticastDelegate // TypeDefIndex: 2129
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x689110 Offset: 0x687910 VA: 0x180689110 Slot: 12
	public virtual float Invoke(YogaNode node, float width, float height) { }
	// RVA: 0x689640 Offset: 0x687E40 VA: 0x180689640 Slot: 13
	public virtual IAsyncResult BeginInvoke(YogaNode node, float width, float height, AsyncCallback callback, object object) { }
	// RVA: 0x63CF80 Offset: 0x63B780 VA: 0x18063CF80 Slot: 14
	public virtual float EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Yoga
internal sealed class MeasureFunction : MulticastDelegate // TypeDefIndex: 2130
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x689720 Offset: 0x687F20 VA: 0x180689720 Slot: 12
	public virtual YogaSize Invoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode) { }
	// RVA: 0x689CD0 Offset: 0x6884D0 VA: 0x180689CD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, AsyncCallback callback, object object) { }
	// RVA: 0x271B20 Offset: 0x270320 VA: 0x180271B20 Slot: 14
	public virtual YogaSize EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.Yoga
internal enum YogaMeasureMode // TypeDefIndex: 2131
{
	// Fields
	public int value__; // 0x0
	public const YogaMeasureMode Undefined = 0; // 0x0
	public const YogaMeasureMode Exactly = 1; // 0x0
	public const YogaMeasureMode AtMost = 2; // 0x0
}

// Namespace: UnityEngine.Yoga
internal static class Native // TypeDefIndex: 2132
{
	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x689DE0 Offset: 0x6885E0 VA: 0x180689DE0
	public static void YGNodeMeasureInvoke(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode, IntPtr returnValueAddress) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x689F10 Offset: 0x688710 VA: 0x180689F10
	public static void YGNodeBaselineInvoke(YogaNode node, float width, float height, IntPtr returnValueAddress) { }
}

// Namespace: UnityEngine.Yoga
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
internal class YogaNode // TypeDefIndex: 2133
{
	// Fields
	internal IntPtr _ygNode; // 0x10
	private MeasureFunction _measureFunction; // 0x18
	private BaselineFunction _baselineFunction; // 0x20

	// Methods
	// RVA: 0x68A6B0 Offset: 0x688EB0 VA: 0x18068A6B0
	public static YogaSize MeasureInternal(YogaNode node, float width, YogaMeasureMode widthMode, float height, YogaMeasureMode heightMode) { }
	// RVA: 0x68A7C0 Offset: 0x688FC0 VA: 0x18068A7C0
	public static float BaselineInternal(YogaNode node, float width, float height) { }
}

// Namespace: UnityEngine.Yoga
internal struct YogaSize // TypeDefIndex: 2134
{
	// Fields
	public float width; // 0x0
	public float height; // 0x4
}

// Namespace: UnityEngine.UIElements
internal static class UIElementsRuntimeUtilityNative // TypeDefIndex: 2135
{
	// Fields
	internal static Action RepaintOverlayPanelsCallback; // 0xA16968

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A000 Offset: 0x688800 VA: 0x18068A000
	public static void RepaintOverlayPanels() { }
}

// Namespace: UnityEngine.UIElements.UIR
internal class Utility // TypeDefIndex: 2136
{
	// Fields
	private static Action<bool> GraphicsResourcesRecreate; // 0x0
	private static Action EngineUpdate; // 0x8
	private static Action FlushPendingResources; // 0x10
	private static Action<Camera> RegisterIntermediateRenderers; // 0x18
	private static Action<IntPtr> RenderNodeAdd; // 0x20
	private static Action<IntPtr> RenderNodeExecute; // 0x28
	private static Action<IntPtr> RenderNodeCleanup; // 0x30
	private static ProfilerMarker s_MarkerRaiseEngineUpdate; // 0x38

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A090 Offset: 0x688890 VA: 0x18068A090
	internal static void RaiseGraphicsResourcesRecreate(bool recreate) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A150 Offset: 0x688950 VA: 0x18068A150
	internal static void RaiseEngineUpdate() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A230 Offset: 0x688A30 VA: 0x18068A230
	internal static void RaiseFlushPendingResources() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A2E0 Offset: 0x688AE0 VA: 0x18068A2E0
	internal static void RaiseRegisterIntermediateRenderers(Camera camera) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A3A0 Offset: 0x688BA0 VA: 0x18068A3A0
	internal static void RaiseRenderNodeAdd(IntPtr userData) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A460 Offset: 0x688C60 VA: 0x18068A460
	internal static void RaiseRenderNodeExecute(IntPtr userData) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A520 Offset: 0x688D20 VA: 0x18068A520
	internal static void RaiseRenderNodeCleanup(IntPtr userData) { }
	// RVA: 0x68A5E0 Offset: 0x688DE0 VA: 0x18068A5E0
	private static void .cctor() { }
}

// Namespace: 
public class Utility.GPUBuffer<T> // TypeDefIndex: 2137
{
	// Fields
	private IntPtr buffer; // 0x0
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2138
{}

// Namespace: UnityEngine
public interface ICanvasRaycastFilter // TypeDefIndex: 2139
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
}

// Namespace: UnityEngine
public sealed class CanvasGroup : Behaviour, ICanvasRaycastFilter // TypeDefIndex: 2140
{
	// Properties
	public float alpha { get; set; }
	public bool interactable { get; }
	public bool blocksRaycasts { get; }
	public bool ignoreParentGroups { get; }

	// Methods
	// RVA: 0x67D930 Offset: 0x67C130 VA: 0x18067D930
	public float get_alpha() { }
	// RVA: 0x67D980 Offset: 0x67C180 VA: 0x18067D980
	public void set_alpha(float value) { }
	// RVA: 0x67D9E0 Offset: 0x67C1E0 VA: 0x18067D9E0
	public bool get_interactable() { }
	// RVA: 0x67DA30 Offset: 0x67C230 VA: 0x18067DA30
	public bool get_blocksRaycasts() { }
	// RVA: 0x67DA80 Offset: 0x67C280 VA: 0x18067DA80
	public bool get_ignoreParentGroups() { }
	// RVA: 0x67DA30 Offset: 0x67C230 VA: 0x18067DA30 Slot: 4
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
}

// Namespace: UnityEngine
public sealed class CanvasRenderer : Component // TypeDefIndex: 2141
{
	// Fields
	private bool <isMask>k__BackingField; // 0x18

	// Properties
	set; }
	public int materialCount { get; set; }
	public int popMaterialCount { set; }
	public int absoluteDepth { get; }
	public bool hasMoved { get; }
	public bool cullTransparentMesh { get; set; }
	public bool cull { get; set; }
	public Vector2 clippingSoftness { set; }

	// Methods
	// RVA: 0x67DAD0 Offset: 0x67C2D0 VA: 0x18067DAD0
	public void set_hasPopInstruction(bool value) { }
	// RVA: 0x67DB30 Offset: 0x67C330 VA: 0x18067DB30
	public int get_materialCount() { }
	// RVA: 0x67DB80 Offset: 0x67C380 VA: 0x18067DB80
	public void set_materialCount(int value) { }
	// RVA: 0x67DBE0 Offset: 0x67C3E0 VA: 0x18067DBE0
	public void set_popMaterialCount(int value) { }
	// RVA: 0x67DC40 Offset: 0x67C440 VA: 0x18067DC40
	public int get_absoluteDepth() { }
	// RVA: 0x67DC90 Offset: 0x67C490 VA: 0x18067DC90
	public bool get_hasMoved() { }
	// RVA: 0x67DCE0 Offset: 0x67C4E0 VA: 0x18067DCE0
	public bool get_cullTransparentMesh() { }
	// RVA: 0x67DD30 Offset: 0x67C530 VA: 0x18067DD30
	public void set_cullTransparentMesh(bool value) { }
	// RVA: 0x67DD90 Offset: 0x67C590 VA: 0x18067DD90
	public bool get_cull() { }
	// RVA: 0x67DDE0 Offset: 0x67C5E0 VA: 0x18067DDE0
	public void set_cull(bool value) { }
	// RVA: 0x67DE40 Offset: 0x67C640 VA: 0x18067DE40
	public void SetColor(Color color) { }
	// RVA: 0x67DEA0 Offset: 0x67C6A0 VA: 0x18067DEA0
	public Color GetColor() { }
	// RVA: 0x67DF10 Offset: 0x67C710 VA: 0x18067DF10
	public void EnableRectClipping(Rect rect) { }
	// RVA: 0x67DF70 Offset: 0x67C770 VA: 0x18067DF70
	public void set_clippingSoftness(Vector2 value) { }
	// RVA: 0x67DFD0 Offset: 0x67C7D0 VA: 0x18067DFD0
	public void DisableRectClipping() { }
	// RVA: 0x67E020 Offset: 0x67C820 VA: 0x18067E020
	public void SetMaterial(Material material, int index) { }
	// RVA: 0x67E090 Offset: 0x67C890 VA: 0x18067E090
	public Material GetMaterial(int index) { }
	// RVA: 0x67E0F0 Offset: 0x67C8F0 VA: 0x18067E0F0
	public void SetPopMaterial(Material material, int index) { }
	// RVA: 0x67E160 Offset: 0x67C960 VA: 0x18067E160
	public void SetTexture(Texture texture) { }
	// RVA: 0x67E1C0 Offset: 0x67C9C0 VA: 0x18067E1C0
	public void SetAlphaTexture(Texture texture) { }
	// RVA: 0x67E220 Offset: 0x67CA20 VA: 0x18067E220
	public void SetMesh(Mesh mesh) { }
	// RVA: 0x67E280 Offset: 0x67CA80 VA: 0x18067E280
	public void Clear() { }
	// RVA: 0x67E2D0 Offset: 0x67CAD0 VA: 0x18067E2D0
	public void SetMaterial(Material material, Texture texture) { }
	// RVA: 0x67E4A0 Offset: 0x67CCA0 VA: 0x18067E4A0
	public Material GetMaterial() { }
	// RVA: 0x67E500 Offset: 0x67CD00 VA: 0x18067E500
	public static void SplitUIVertexStreams(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices) { }
	// RVA: 0x67E610 Offset: 0x67CE10 VA: 0x18067E610
	public static void CreateUIVertexStream(List<UIVertex> verts, List<Vector3> positions, List<Color32> colors, List<Vector2> uv0S, List<Vector2> uv1S, List<Vector2> uv2S, List<Vector2> uv3S, List<Vector3> normals, List<Vector4> tangents, List<int> indices) { }
	// RVA: 0x67E6A0 Offset: 0x67CEA0 VA: 0x18067E6A0
	private static void SplitIndicesStreamsInternal(object verts, object indices) { }
	// RVA: 0x67E700 Offset: 0x67CF00 VA: 0x18067E700
	private static void SplitUIVertexStreamsInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents) { }
	// RVA: 0x67E610 Offset: 0x67CE10 VA: 0x18067E610
	private static void CreateUIVertexStreamInternal(object verts, object positions, object colors, object uv0S, object uv1S, object uv2S, object uv3S, object normals, object tangents, object indices) { }
	// RVA: 0x67E790 Offset: 0x67CF90 VA: 0x18067E790
	private void SetColor_Injected(ref Color color) { }
	// RVA: 0x67E7F0 Offset: 0x67CFF0 VA: 0x18067E7F0
	private void GetColor_Injected(out Color ret) { }
	// RVA: 0x67E850 Offset: 0x67D050 VA: 0x18067E850
	private void EnableRectClipping_Injected(ref Rect rect) { }
	// RVA: 0x67E8B0 Offset: 0x67D0B0 VA: 0x18067E8B0
	private void set_clippingSoftness_Injected(ref Vector2 value) { }
}

// Namespace: UnityEngine
public sealed class RectTransformUtility // TypeDefIndex: 2142
{
	// Fields
	private static readonly Vector3[] s_Corners; // 0xABB70

	// Methods
	// RVA: 0x67E910 Offset: 0x67D110 VA: 0x18067E910
	public static Vector2 PixelAdjustPoint(Vector2 point, Transform elementTransform, Canvas canvas) { }
	// RVA: 0x67EA10 Offset: 0x67D210 VA: 0x18067EA10
	public static Rect PixelAdjustRect(RectTransform rectTransform, Canvas canvas) { }
	// RVA: 0x67EB00 Offset: 0x67D300 VA: 0x18067EB00
	private static bool PointInRectangle(Vector2 screenPoint, RectTransform rect, Camera cam, Vector4 offset) { }
	// RVA: 0x67EBF0 Offset: 0x67D3F0 VA: 0x18067EBF0
	public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam) { }
	// RVA: 0x67ED00 Offset: 0x67D500 VA: 0x18067ED00
	public static bool RectangleContainsScreenPoint(RectTransform rect, Vector2 screenPoint, Camera cam, Vector4 offset) { }
	// RVA: 0x67EE90 Offset: 0x67D690 VA: 0x18067EE90
	public static bool ScreenPointToWorldPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector3 worldPoint) { }
	// RVA: 0x67F220 Offset: 0x67DA20 VA: 0x18067F220
	public static bool ScreenPointToLocalPointInRectangle(RectTransform rect, Vector2 screenPoint, Camera cam, out Vector2 localPoint) { }
	// RVA: 0x67F400 Offset: 0x67DC00 VA: 0x18067F400
	public static Ray ScreenPointToRay(Camera cam, Vector2 screenPos) { }
	// RVA: 0x67F670 Offset: 0x67DE70 VA: 0x18067F670
	public static Vector2 WorldToScreenPoint(Camera cam, Vector3 worldPoint) { }
	// RVA: 0x67F800 Offset: 0x67E000 VA: 0x18067F800
	public static void FlipLayoutOnAxis(RectTransform rect, int axis, bool keepPositioning, bool recursive) { }
	// RVA: 0x67FBA0 Offset: 0x67E3A0 VA: 0x18067FBA0
	public static void FlipLayoutAxes(RectTransform rect, bool keepPositioning, bool recursive) { }
	// RVA: 0x67FF50 Offset: 0x67E750 VA: 0x18067FF50
	private static Vector2 GetTransposed(Vector2 input) { }
	// RVA: 0x67FF70 Offset: 0x67E770 VA: 0x18067FF70
	private static void .cctor() { }
	// RVA: 0x680000 Offset: 0x67E800 VA: 0x180680000
	private static void PixelAdjustPoint_Injected(ref Vector2 point, Transform elementTransform, Canvas canvas, out Vector2 ret) { }
	// RVA: 0x680080 Offset: 0x67E880 VA: 0x180680080
	private static void PixelAdjustRect_Injected(RectTransform rectTransform, Canvas canvas, out Rect ret) { }
	// RVA: 0x6800F0 Offset: 0x67E8F0 VA: 0x1806800F0
	private static bool PointInRectangle_Injected(ref Vector2 screenPoint, RectTransform rect, Camera cam, ref Vector4 offset) { }
}

// Namespace: UnityEngine
public enum RenderMode // TypeDefIndex: 2143
{
	// Fields
	public int value__; // 0x0
	public const RenderMode ScreenSpaceOverlay = 0; // 0x0
	public const RenderMode ScreenSpaceCamera = 1; // 0x0
	public const RenderMode WorldSpace = 2; // 0x0
}

// Namespace: UnityEngine
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum AdditionalCanvasShaderChannels // TypeDefIndex: 2144
{
	// Fields
	public int value__; // 0x0
	public const AdditionalCanvasShaderChannels None = 0; // 0x0
	public const AdditionalCanvasShaderChannels TexCoord1 = 1; // 0x0
	public const AdditionalCanvasShaderChannels TexCoord2 = 2; // 0x0
	public const AdditionalCanvasShaderChannels TexCoord3 = 4; // 0x0
	public const AdditionalCanvasShaderChannels Normal = 8; // 0x0
	public const AdditionalCanvasShaderChannels Tangent = 16; // 0x0
}

// Namespace: UnityEngine
[RequireComponent] // RVA: 0xF98B0 Offset: 0xF8CB0 VA: 0x1800F98B0
public sealed class Canvas : Behaviour // TypeDefIndex: 2145
{
	// Fields
	private static Canvas.WillRenderCanvases willRenderCanvases; // 0xABB95

	// Properties
	public RenderMode renderMode { get; set; }
	public bool isRootCanvas { get; }
	public float scaleFactor { get; set; }
	public float referencePixelsPerUnit { get; set; }
	public bool pixelPerfect { get; }
	public int renderOrder { get; }
	public bool overrideSorting { get; set; }
	public int sortingOrder { get; set; }
	public int targetDisplay { get; }
	public int sortingLayerID { get; set; }
	public AdditionalCanvasShaderChannels additionalShaderChannels { get; set; }
	public Canvas rootCanvas { get; }
	public Camera worldCamera { get; }

	// Methods
	// RVA: 0x67CF50 Offset: 0x67B750 VA: 0x18067CF50
	public static void add_willRenderCanvases(Canvas.WillRenderCanvases value) { }
	// RVA: 0x67D050 Offset: 0x67B850 VA: 0x18067D050
	public static void remove_willRenderCanvases(Canvas.WillRenderCanvases value) { }
	// RVA: 0x67D150 Offset: 0x67B950 VA: 0x18067D150
	public RenderMode get_renderMode() { }
	// RVA: 0x67D1A0 Offset: 0x67B9A0 VA: 0x18067D1A0
	public void set_renderMode(RenderMode value) { }
	// RVA: 0x67D200 Offset: 0x67BA00 VA: 0x18067D200
	public bool get_isRootCanvas() { }
	// RVA: 0x67D250 Offset: 0x67BA50 VA: 0x18067D250
	public float get_scaleFactor() { }
	// RVA: 0x67D2A0 Offset: 0x67BAA0 VA: 0x18067D2A0
	public void set_scaleFactor(float value) { }
	// RVA: 0x67D300 Offset: 0x67BB00 VA: 0x18067D300
	public float get_referencePixelsPerUnit() { }
	// RVA: 0x67D350 Offset: 0x67BB50 VA: 0x18067D350
	public void set_referencePixelsPerUnit(float value) { }
	// RVA: 0x67D3B0 Offset: 0x67BBB0 VA: 0x18067D3B0
	public bool get_pixelPerfect() { }
	// RVA: 0x67D400 Offset: 0x67BC00 VA: 0x18067D400
	public int get_renderOrder() { }
	// RVA: 0x67D450 Offset: 0x67BC50 VA: 0x18067D450
	public bool get_overrideSorting() { }
	// RVA: 0x67D4A0 Offset: 0x67BCA0 VA: 0x18067D4A0
	public void set_overrideSorting(bool value) { }
	// RVA: 0x67D500 Offset: 0x67BD00 VA: 0x18067D500
	public int get_sortingOrder() { }
	// RVA: 0x67D550 Offset: 0x67BD50 VA: 0x18067D550
	public void set_sortingOrder(int value) { }
	// RVA: 0x67D5B0 Offset: 0x67BDB0 VA: 0x18067D5B0
	public int get_targetDisplay() { }
	// RVA: 0x67D600 Offset: 0x67BE00 VA: 0x18067D600
	public int get_sortingLayerID() { }
	// RVA: 0x67D650 Offset: 0x67BE50 VA: 0x18067D650
	public void set_sortingLayerID(int value) { }
	// RVA: 0x67D6B0 Offset: 0x67BEB0 VA: 0x18067D6B0
	public AdditionalCanvasShaderChannels get_additionalShaderChannels() { }
	// RVA: 0x67D700 Offset: 0x67BF00 VA: 0x18067D700
	public void set_additionalShaderChannels(AdditionalCanvasShaderChannels value) { }
	// RVA: 0x67D760 Offset: 0x67BF60 VA: 0x18067D760
	public Canvas get_rootCanvas() { }
	// RVA: 0x67D7B0 Offset: 0x67BFB0 VA: 0x18067D7B0
	public Camera get_worldCamera() { }
	// RVA: 0x67D800 Offset: 0x67C000 VA: 0x18067D800
	public static Material GetDefaultCanvasMaterial() { }
	// RVA: 0x67D850 Offset: 0x67C050 VA: 0x18067D850
	public static Material GetETC1SupportedCanvasMaterial() { }
	// RVA: 0x67D8A0 Offset: 0x67C0A0 VA: 0x18067D8A0
	public static void ForceUpdateCanvases() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x67D8A0 Offset: 0x67C0A0 VA: 0x18067D8A0
	private static void SendWillRenderCanvases() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public sealed class Canvas.WillRenderCanvases : MulticastDelegate // TypeDefIndex: 2146
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public static class UISystemProfilerApi // TypeDefIndex: 2147
{
	// Methods
	// RVA: 0x680170 Offset: 0x67E970 VA: 0x180680170
	public static void BeginSample(UISystemProfilerApi.SampleType type) { }
	// RVA: 0x6801C0 Offset: 0x67E9C0 VA: 0x1806801C0
	public static void EndSample(UISystemProfilerApi.SampleType type) { }
	// RVA: 0x680210 Offset: 0x67EA10 VA: 0x180680210
	public static void AddMarker(string name, Object obj) { }
}

// Namespace: 
public enum UISystemProfilerApi.SampleType // TypeDefIndex: 2148
{
	// Fields
	public int value__; // 0x0
	public const UISystemProfilerApi.SampleType Layout = 0; // 0x0
	public const UISystemProfilerApi.SampleType Render = 1; // 0x0
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2149
{}

// Namespace: UnityEngine
public static class RemoteSettings // TypeDefIndex: 2150
{
	// Fields
	private static RemoteSettings.UpdatedEventHandler Updated; // 0x0
	private static Action BeforeFetchFromServer; // 0x8
	private static Action<bool, bool, int> Completed; // 0x10

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68C1A0 Offset: 0x68A9A0 VA: 0x18068C1A0
	internal static void RemoteSettingsUpdated(bool wasLastUpdatedFromServer) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68C230 Offset: 0x68AA30 VA: 0x18068C230
	internal static void RemoteSettingsBeforeFetchFromServer() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68C2C0 Offset: 0x68AAC0 VA: 0x18068C2C0
	internal static void RemoteSettingsUpdateCompleted(bool wasLastUpdatedFromServer, bool settingsChanged, int response) { }
}

// Namespace: 
public sealed class RemoteSettings.UpdatedEventHandler : MulticastDelegate // TypeDefIndex: 2151
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine
public class RemoteConfigSettings // TypeDefIndex: 2152
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	private Action<bool> Updated; // 0x18

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68C100 Offset: 0x68A900 VA: 0x18068C100
	internal static void RemoteConfigSettingsUpdated(RemoteConfigSettings rcs, bool wasLastUpdatedFromServer) { }
}

// Namespace: UnityEngine
internal static class RemoteConfigSettingsHelper // TypeDefIndex: 2153
{}

// Namespace: 
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal enum RemoteConfigSettingsHelper.Tag // TypeDefIndex: 2154
{
	// Fields
	public int value__; // 0x0
	public const RemoteConfigSettingsHelper.Tag kUnknown = 0; // 0x0
	public const RemoteConfigSettingsHelper.Tag kIntVal = 1; // 0x0
	public const RemoteConfigSettingsHelper.Tag kInt64Val = 2; // 0x0
	public const RemoteConfigSettingsHelper.Tag kUInt64Val = 3; // 0x0
	public const RemoteConfigSettingsHelper.Tag kDoubleVal = 4; // 0x0
	public const RemoteConfigSettingsHelper.Tag kBoolVal = 5; // 0x0
	public const RemoteConfigSettingsHelper.Tag kStringVal = 6; // 0x0
	public const RemoteConfigSettingsHelper.Tag kArrayVal = 7; // 0x0
	public const RemoteConfigSettingsHelper.Tag kMixedArrayVal = 8; // 0x0
	public const RemoteConfigSettingsHelper.Tag kMapVal = 9; // 0x0
	public const RemoteConfigSettingsHelper.Tag kMaxTags = 10; // 0x0
}

// Namespace: UnityEngine.Analytics
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class ContinuousEvent // TypeDefIndex: 2155
{}

// Namespace: UnityEngine.Analytics
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum AnalyticsSessionState // TypeDefIndex: 2156
{
	// Fields
	public int value__; // 0x0
	public const AnalyticsSessionState kSessionStopped = 0; // 0x0
	public const AnalyticsSessionState kSessionStarted = 1; // 0x0
	public const AnalyticsSessionState kSessionPaused = 2; // 0x0
	public const AnalyticsSessionState kSessionResumed = 3; // 0x0
}

// Namespace: UnityEngine.Analytics
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public static class AnalyticsSessionInfo // TypeDefIndex: 2157
{
	// Fields
	private static AnalyticsSessionInfo.SessionStateChanged sessionStateChanged; // 0x0
	private static AnalyticsSessionInfo.IdentityTokenChanged identityTokenChanged; // 0x8

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68BFA0 Offset: 0x68A7A0 VA: 0x18068BFA0
	internal static void CallSessionStateChanged(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68C070 Offset: 0x68A870 VA: 0x18068C070
	internal static void CallIdentityTokenChanged(string token) { }
}

// Namespace: 
public sealed class AnalyticsSessionInfo.SessionStateChanged : MulticastDelegate // TypeDefIndex: 2158
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x68C380 Offset: 0x68AB80 VA: 0x18068C380 Slot: 12
	public virtual void Invoke(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged) { }
	// RVA: 0x68C6E0 Offset: 0x68AEE0 VA: 0x18068C6E0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AnalyticsSessionState sessionState, long sessionId, long sessionElapsedTime, bool sessionChanged, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class AnalyticsSessionInfo.IdentityTokenChanged : MulticastDelegate // TypeDefIndex: 2159
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(string token) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(string token, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2160
{}

// Namespace: UnityEngineInternal
internal static class WebRequestUtils // TypeDefIndex: 2161
{
	// Fields
	private static Regex domainRegex; // 0xA171D0

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x6781A0 Offset: 0x6769A0 VA: 0x1806781A0
	internal static string RedirectTo(string baseUri, string redirectUri) { }
	// RVA: 0x6782D0 Offset: 0x676AD0 VA: 0x1806782D0
	internal static string MakeInitialUrl(string targetUrl, string localUrl) { }
	// RVA: 0x6785D0 Offset: 0x676DD0 VA: 0x1806785D0
	internal static string MakeUriString(Uri targetUri, string targetUrl, bool prependProtocol) { }
	// RVA: 0x678D50 Offset: 0x677550 VA: 0x180678D50
	private static string URLDecode(string encoded) { }
	// RVA: 0x678EE0 Offset: 0x6776E0 VA: 0x180678EE0
	private static void .cctor() { }
}

// Namespace: UnityEngine
public class WWWForm // TypeDefIndex: 2162
{
	// Properties
	internal static Encoding DefaultEncoding { get; }

	// Methods
	// RVA: 0x677A20 Offset: 0x676220 VA: 0x180677A20
	internal static Encoding get_DefaultEncoding() { }
}

// Namespace: UnityEngine
internal class WWWTranscoder // TypeDefIndex: 2163
{
	// Fields
	private static byte[] ucHexChars; // 0x0
	private static byte[] lcHexChars; // 0x8
	private static byte urlEscapeChar; // 0x10
	private static byte[] urlSpace; // 0x18
	private static byte[] dataSpace; // 0x20
	private static byte[] urlForbidden; // 0x28
	private static byte qpEscapeChar; // 0x30
	private static byte[] qpSpace; // 0x38
	private static byte[] qpForbidden; // 0x40

	// Methods
	// RVA: 0x677A30 Offset: 0x676230 VA: 0x180677A30
	private static byte Hex2Byte(byte[] b, int offset) { }
	// RVA: 0x677AC0 Offset: 0x6762C0 VA: 0x180677AC0
	public static byte[] URLDecode(byte[] toEncode) { }
	// RVA: 0x677B70 Offset: 0x676370 VA: 0x180677B70
	private static bool ByteSubArrayEquals(byte[] array, int index, byte[] comperand) { }
	// RVA: 0x677C10 Offset: 0x676410 VA: 0x180677C10
	public static byte[] Decode(byte[] input, byte escapeChar, byte[] space) { }
	// RVA: 0x677F50 Offset: 0x676750 VA: 0x180677F50
	private static void .cctor() { }
}

// Namespace: UnityEngine.Networking
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class UnityWebRequestAsyncOperation : AsyncOperation // TypeDefIndex: 2164
{
	// Fields
	private UnityWebRequest <webRequest>k__BackingField; // 0x20

	// Properties
	set; }

	// Methods
	// RVA: 0x16EEC0 Offset: 0x16D6C0 VA: 0x18016EEC0
	internal void set_webRequest(UnityWebRequest value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.Networking
public class UnityWebRequest : IDisposable // TypeDefIndex: 2165
{
	// Fields
	internal IntPtr m_Ptr; // 0x10
	internal DownloadHandler m_DownloadHandler; // 0x18
	internal UploadHandler m_UploadHandler; // 0x20
	internal CertificateHandler m_CertificateHandler; // 0x28
	internal Uri m_Uri; // 0x30
	private bool <disposeCertificateHandlerOnDispose>k__BackingField; // 0x38
	private bool <disposeDownloadHandlerOnDispose>k__BackingField; // 0x39
	private bool <disposeUploadHandlerOnDispose>k__BackingField; // 0x3A

	// Properties
	public bool disposeCertificateHandlerOnDispose { get; set; }
	public bool disposeDownloadHandlerOnDispose { get; set; }
	public bool disposeUploadHandlerOnDispose { get; set; }
	public string method { set; }
	public string url { set; }
	public bool isModifiable { get; }
	public bool isNetworkError { get; }
	public UnityWebRequest.Result result { get; }
	public UploadHandler uploadHandler { get; set; }
	public DownloadHandler downloadHandler { get; set; }
	public CertificateHandler certificateHandler { get; }

	// Methods
	// RVA: 0x675DA0 Offset: 0x6745A0 VA: 0x180675DA0
	private static string GetWebErrorString(UnityWebRequest.UnityWebRequestError err) { }
	// RVA: 0x2E9C80 Offset: 0x2E8480 VA: 0x1802E9C80
	public bool get_disposeCertificateHandlerOnDispose() { }
	// RVA: 0x354270 Offset: 0x352A70 VA: 0x180354270
	public void set_disposeCertificateHandlerOnDispose(bool value) { }
	// RVA: 0x2E9C90 Offset: 0x2E8490 VA: 0x1802E9C90
	public bool get_disposeDownloadHandlerOnDispose() { }
	// RVA: 0x675DF0 Offset: 0x6745F0 VA: 0x180675DF0
	public void set_disposeDownloadHandlerOnDispose(bool value) { }
	// RVA: 0x2E9CA0 Offset: 0x2E84A0 VA: 0x1802E9CA0
	public bool get_disposeUploadHandlerOnDispose() { }
	// RVA: 0x2E9CB0 Offset: 0x2E84B0 VA: 0x1802E9CB0
	public void set_disposeUploadHandlerOnDispose(bool value) { }
	// RVA: 0x675E00 Offset: 0x674600 VA: 0x180675E00
	internal static IntPtr Create() { }
	// RVA: 0x675E50 Offset: 0x674650 VA: 0x180675E50
	private void Release() { }
	// RVA: 0x675EA0 Offset: 0x6746A0 VA: 0x180675EA0
	internal void InternalDestroy() { }
	// RVA: 0x675FA0 Offset: 0x6747A0 VA: 0x180675FA0
	private void InternalSetDefaults() { }
	// RVA: 0x675FB0 Offset: 0x6747B0 VA: 0x180675FB0
	public void .ctor(string url, string method, DownloadHandler downloadHandler, UploadHandler uploadHandler) { }
	// RVA: 0x676320 Offset: 0x674B20 VA: 0x180676320 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x6763B0 Offset: 0x674BB0 VA: 0x1806763B0 Slot: 4
	public void Dispose() { }
	// RVA: 0x676460 Offset: 0x674C60 VA: 0x180676460
	private void DisposeHandlers() { }
	// RVA: 0x676610 Offset: 0x674E10 VA: 0x180676610
	internal UnityWebRequestAsyncOperation BeginWebRequest() { }
	// RVA: 0x676660 Offset: 0x674E60 VA: 0x180676660
	public UnityWebRequestAsyncOperation SendWebRequest() { }
	// RVA: 0x6766C0 Offset: 0x674EC0 VA: 0x1806766C0
	public void Abort() { }
	// RVA: 0x676710 Offset: 0x674F10 VA: 0x180676710
	private UnityWebRequest.UnityWebRequestError SetMethod(UnityWebRequest.UnityWebRequestMethod methodType) { }
	// RVA: 0x676770 Offset: 0x674F70 VA: 0x180676770
	internal void InternalSetMethod(UnityWebRequest.UnityWebRequestMethod methodType) { }
	// RVA: 0x6768E0 Offset: 0x6750E0 VA: 0x1806768E0
	private UnityWebRequest.UnityWebRequestError SetCustomMethod(string customMethodName) { }
	// RVA: 0x676940 Offset: 0x675140 VA: 0x180676940
	internal void InternalSetCustomMethod(string customMethodName) { }
	// RVA: 0x676AB0 Offset: 0x6752B0 VA: 0x180676AB0
	public void set_method(string value) { }
	// RVA: 0x676F60 Offset: 0x675760 VA: 0x180676F60
	public void set_url(string value) { }
	// RVA: 0x677170 Offset: 0x675970 VA: 0x180677170
	private UnityWebRequest.UnityWebRequestError SetUrl(string url) { }
	// RVA: 0x6771D0 Offset: 0x6759D0 VA: 0x1806771D0
	private void InternalSetUrl(string url) { }
	// RVA: 0x677340 Offset: 0x675B40 VA: 0x180677340
	public bool get_isModifiable() { }
	// RVA: 0x677390 Offset: 0x675B90 VA: 0x180677390
	public bool get_isNetworkError() { }
	// RVA: 0x6773F0 Offset: 0x675BF0 VA: 0x1806773F0
	public UnityWebRequest.Result get_result() { }
	// RVA: 0x677440 Offset: 0x675C40 VA: 0x180677440
	private UnityWebRequest.UnityWebRequestError SetUploadHandler(UploadHandler uh) { }
	// RVA: 0x4EAE00 Offset: 0x4E9600 VA: 0x1804EAE00
	public UploadHandler get_uploadHandler() { }
	// RVA: 0x6774A0 Offset: 0x675CA0 VA: 0x1806774A0
	public void set_uploadHandler(UploadHandler value) { }
	// RVA: 0x677620 Offset: 0x675E20 VA: 0x180677620
	private UnityWebRequest.UnityWebRequestError SetDownloadHandler(DownloadHandler dh) { }
	// RVA: 0x537AA0 Offset: 0x5362A0 VA: 0x180537AA0
	public DownloadHandler get_downloadHandler() { }
	// RVA: 0x677680 Offset: 0x675E80 VA: 0x180677680
	public void set_downloadHandler(DownloadHandler value) { }
	// RVA: 0x537AD0 Offset: 0x5362D0 VA: 0x180537AD0
	public CertificateHandler get_certificateHandler() { }
	// RVA: 0x677800 Offset: 0x676000 VA: 0x180677800
	public static UnityWebRequest Get(string uri) { }
}

// Namespace: 
internal enum UnityWebRequest.UnityWebRequestMethod // TypeDefIndex: 2166
{
	// Fields
	public int value__; // 0x0
	public const UnityWebRequest.UnityWebRequestMethod Get = 0; // 0x0
	public const UnityWebRequest.UnityWebRequestMethod Post = 1; // 0x0
	public const UnityWebRequest.UnityWebRequestMethod Put = 2; // 0x0
	public const UnityWebRequest.UnityWebRequestMethod Head = 3; // 0x0
	public const UnityWebRequest.UnityWebRequestMethod Custom = 4; // 0x0
}

// Namespace: 
internal enum UnityWebRequest.UnityWebRequestError // TypeDefIndex: 2167
{
	// Fields
	public int value__; // 0x0
	public const UnityWebRequest.UnityWebRequestError OK = 0; // 0x0
	public const UnityWebRequest.UnityWebRequestError Unknown = 1; // 0x0
	public const UnityWebRequest.UnityWebRequestError SDKError = 2; // 0x0
	public const UnityWebRequest.UnityWebRequestError UnsupportedProtocol = 3; // 0x0
	public const UnityWebRequest.UnityWebRequestError MalformattedUrl = 4; // 0x0
	public const UnityWebRequest.UnityWebRequestError CannotResolveProxy = 5; // 0x0
	public const UnityWebRequest.UnityWebRequestError CannotResolveHost = 6; // 0x0
	public const UnityWebRequest.UnityWebRequestError CannotConnectToHost = 7; // 0x0
	public const UnityWebRequest.UnityWebRequestError AccessDenied = 8; // 0x0
	public const UnityWebRequest.UnityWebRequestError GenericHttpError = 9; // 0x0
	public const UnityWebRequest.UnityWebRequestError WriteError = 10; // 0x0
	public const UnityWebRequest.UnityWebRequestError ReadError = 11; // 0x0
	public const UnityWebRequest.UnityWebRequestError OutOfMemory = 12; // 0x0
	public const UnityWebRequest.UnityWebRequestError Timeout = 13; // 0x0
	public const UnityWebRequest.UnityWebRequestError HTTPPostError = 14; // 0x0
	public const UnityWebRequest.UnityWebRequestError SSLCannotConnect = 15; // 0x0
	public const UnityWebRequest.UnityWebRequestError Aborted = 16; // 0x0
	public const UnityWebRequest.UnityWebRequestError TooManyRedirects = 17; // 0x0
	public const UnityWebRequest.UnityWebRequestError ReceivedNoData = 18; // 0x0
	public const UnityWebRequest.UnityWebRequestError SSLNotSupported = 19; // 0x0
	public const UnityWebRequest.UnityWebRequestError FailedToSendData = 20; // 0x0
	public const UnityWebRequest.UnityWebRequestError FailedToReceiveData = 21; // 0x0
	public const UnityWebRequest.UnityWebRequestError SSLCertificateError = 22; // 0x0
	public const UnityWebRequest.UnityWebRequestError SSLCipherNotAvailable = 23; // 0x0
	public const UnityWebRequest.UnityWebRequestError SSLCACertError = 24; // 0x0
	public const UnityWebRequest.UnityWebRequestError UnrecognizedContentEncoding = 25; // 0x0
	public const UnityWebRequest.UnityWebRequestError LoginFailed = 26; // 0x0
	public const UnityWebRequest.UnityWebRequestError SSLShutdownFailed = 27; // 0x0
	public const UnityWebRequest.UnityWebRequestError NoInternetConnection = 28; // 0x0
}

// Namespace: 
public enum UnityWebRequest.Result // TypeDefIndex: 2168
{
	// Fields
	public int value__; // 0x0
	public const UnityWebRequest.Result InProgress = 0; // 0x0
	public const UnityWebRequest.Result Success = 1; // 0x0
	public const UnityWebRequest.Result ConnectionError = 2; // 0x0
	public const UnityWebRequest.Result ProtocolError = 3; // 0x0
	public const UnityWebRequest.Result DataProcessingError = 4; // 0x0
}

// Namespace: UnityEngine.Networking
public class CertificateHandler // TypeDefIndex: 2169
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	// RVA: 0x6753E0 Offset: 0x673BE0 VA: 0x1806753E0
	private void Release() { }
	// RVA: 0x378D30 Offset: 0x377530 VA: 0x180378D30 Slot: 4
	protected virtual bool ValidateCertificate(byte[] certificateData) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x39B5D0 Offset: 0x399DD0 VA: 0x18039B5D0
	internal bool ValidateCertificateNative(byte[] certificateData) { }
	// RVA: 0x675430 Offset: 0x673C30 VA: 0x180675430 Slot: 5
	public void Dispose() { }
}

// Namespace: UnityEngine.Networking
public class DownloadHandler : IDisposable // TypeDefIndex: 2170
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Properties
	public string text { get; }

	// Methods
	// RVA: 0x6754F0 Offset: 0x673CF0 VA: 0x1806754F0
	private void Release() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
	// RVA: 0x675540 Offset: 0x673D40 VA: 0x180675540 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x6755C0 Offset: 0x673DC0 VA: 0x1806755C0 Slot: 4
	public void Dispose() { }
	// RVA: 0x2BF580 Offset: 0x2BDD80 VA: 0x1802BF580
	public string get_text() { }
	// RVA: 0x543480 Offset: 0x541C80 VA: 0x180543480 Slot: 5
	protected virtual byte[] GetData() { }
	// RVA: 0x675680 Offset: 0x673E80 VA: 0x180675680 Slot: 6
	protected virtual string GetText() { }
	// RVA: 0x675760 Offset: 0x673F60 VA: 0x180675760
	private Encoding GetTextEncoder() { }
	// RVA: 0x675C50 Offset: 0x674450 VA: 0x180675C50
	private string GetContentType() { }
	// RVA: 0x675CA0 Offset: 0x6744A0 VA: 0x180675CA0
	internal static byte[] InternalGetByteArray(DownloadHandler dh) { }
}

// Namespace: UnityEngine.Networking
public sealed class DownloadHandlerBuffer : DownloadHandler // TypeDefIndex: 2171
{
	// Methods
	// RVA: 0x675CF0 Offset: 0x6744F0 VA: 0x180675CF0
	private static IntPtr Create(DownloadHandlerBuffer obj) { }
	// RVA: 0x675D40 Offset: 0x674540 VA: 0x180675D40
	private void InternalCreateBuffer() { }
	// RVA: 0x675D40 Offset: 0x674540 VA: 0x180675D40
	public void .ctor() { }
	// RVA: 0x675CA0 Offset: 0x6744A0 VA: 0x180675CA0 Slot: 5
	protected override byte[] GetData() { }
	// RVA: 0x675CA0 Offset: 0x6744A0 VA: 0x180675CA0
	private byte[] InternalGetData() { }
}

// Namespace: UnityEngine.Networking
public class UploadHandler // TypeDefIndex: 2172
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	// RVA: 0x677910 Offset: 0x676110 VA: 0x180677910
	private void Release() { }
	// RVA: 0x677960 Offset: 0x676160 VA: 0x180677960 Slot: 4
	public void Dispose() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2173
{}

// Namespace: UnityEngine.VFX
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class VFXEventAttribute // TypeDefIndex: 2174
{
	// Fields
	private IntPtr m_Ptr; // 0x10
	private bool m_Owner; // 0x18
	private VisualEffectAsset m_VfxAsset; // 0x20
}

// Namespace: UnityEngine.VFX
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class VFXExpressionValues // TypeDefIndex: 2175
{
	// Fields
	internal IntPtr m_Ptr; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68DB80 Offset: 0x68C380 VA: 0x18068DB80
	internal static VFXExpressionValues CreateExpressionValuesWrapper(IntPtr ptr) { }
}

// Namespace: UnityEngine.VFX
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public static class VFXManager // TypeDefIndex: 2176
{}

// Namespace: UnityEngine.VFX
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public abstract class VFXSpawnerCallbacks : ScriptableObject // TypeDefIndex: 2177
{
	// Methods
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	protected void .ctor() { }
}

// Namespace: UnityEngine.VFX
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class VFXSpawnerState : IDisposable // TypeDefIndex: 2178
{
	// Fields
	private IntPtr m_Ptr; // 0x10
	private bool m_Owner; // 0x18

	// Methods
	// RVA: 0x311110 Offset: 0x30F910 VA: 0x180311110
	internal void .ctor(IntPtr ptr, bool owner) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68DC10 Offset: 0x68C410 VA: 0x18068DC10
	internal static VFXSpawnerState CreateSpawnerStateWrapper() { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68DC90 Offset: 0x68C490 VA: 0x18068DC90
	internal void SetWrapValue(IntPtr ptr) { }
	// RVA: 0x68DD40 Offset: 0x68C540 VA: 0x18068DD40
	private void Release() { }
	// RVA: 0x68DE10 Offset: 0x68C610 VA: 0x18068DE10 Slot: 1
	protected override void Finalize() { }
	// RVA: 0x68DE90 Offset: 0x68C690 VA: 0x18068DE90 Slot: 4
	public void Dispose() { }
	// RVA: 0x68DF30 Offset: 0x68C730 VA: 0x18068DF30
	private static void Internal_Destroy(IntPtr ptr) { }
}

// Namespace: UnityEngine.VFX
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public abstract class VisualEffectObject : Object // TypeDefIndex: 2179
{}

// Namespace: UnityEngine.VFX
[UsedByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class VisualEffectAsset : VisualEffectObject // TypeDefIndex: 2180
{
	// Fields
	public static readonly int PlayEventID; // 0x0
	public static readonly int StopEventID; // 0x4

	// Methods
	// RVA: 0x68DF80 Offset: 0x68C780 VA: 0x18068DF80
	private static void .cctor() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2181
{}

// Namespace: UnityEngine.XR
public static class XRSettings // TypeDefIndex: 2182
{
	// Properties
	public static bool enabled { get; }
	public static int eyeTextureWidth { get; }
	public static int eyeTextureHeight { get; }
	public static RenderTextureDescriptor eyeTextureDesc { get; }
	public static float renderViewportScale { get; }
	internal static float renderViewportScaleInternal { get; }
	public static XRSettings.StereoRenderingMode stereoRenderingMode { get; }

	// Methods
	// RVA: 0x55AC00 Offset: 0x559400 VA: 0x18055AC00
	public static bool get_enabled() { }
	// RVA: 0x68E9D0 Offset: 0x68D1D0 VA: 0x18068E9D0
	public static int get_eyeTextureWidth() { }
	// RVA: 0x68EA20 Offset: 0x68D220 VA: 0x18068EA20
	public static int get_eyeTextureHeight() { }
	// RVA: 0x68EA70 Offset: 0x68D270 VA: 0x18068EA70
	public static RenderTextureDescriptor get_eyeTextureDesc() { }
	// RVA: 0x68EAE0 Offset: 0x68D2E0 VA: 0x18068EAE0
	public static float get_renderViewportScale() { }
	// RVA: 0x68EAE0 Offset: 0x68D2E0 VA: 0x18068EAE0
	internal static float get_renderViewportScaleInternal() { }
	// RVA: 0x68EB30 Offset: 0x68D330 VA: 0x18068EB30
	public static XRSettings.StereoRenderingMode get_stereoRenderingMode() { }
	// RVA: 0x68EB80 Offset: 0x68D380 VA: 0x18068EB80
	private static void get_eyeTextureDesc_Injected(out RenderTextureDescriptor ret) { }
}

// Namespace: 
public enum XRSettings.StereoRenderingMode // TypeDefIndex: 2183
{
	// Fields
	public int value__; // 0x0
	public const XRSettings.StereoRenderingMode MultiPass = 0; // 0x0
	public const XRSettings.StereoRenderingMode SinglePass = 1; // 0x0
	public const XRSettings.StereoRenderingMode SinglePassInstanced = 2; // 0x0
	public const XRSettings.StereoRenderingMode SinglePassMultiview = 3; // 0x0
}

// Namespace: UnityEngine.XR
public static class XRDevice // TypeDefIndex: 2184
{
	// Fields
	private static Action<string> deviceLoaded; // 0xABBA0

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68E860 Offset: 0x68D060 VA: 0x18068E860
	private static void InvokeDeviceLoaded(string loadedDeviceName) { }
	// RVA: 0x68E950 Offset: 0x68D150 VA: 0x18068E950
	private static void .cctor() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2185
{}

// Namespace: UnityEngine.Experimental.Video
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public struct VideoClipPlayable : IPlayable, IEquatable<VideoClipPlayable> // TypeDefIndex: 2186
{
	// Fields
	private PlayableHandle m_Handle; // 0x0

	// Methods
	// RVA: 0x16360 Offset: 0x15760 VA: 0x180016360 Slot: 4
	public PlayableHandle GetHandle() { }
	// RVA: 0x286C0 Offset: 0x27AC0 VA: 0x1800286C0 Slot: 5
	public bool Equals(VideoClipPlayable other) { }
}

// Namespace: UnityEngine.Video
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class VideoClip : Object // TypeDefIndex: 2187
{}

// Namespace: UnityEngine.Video
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum VideoRenderMode // TypeDefIndex: 2188
{
	// Fields
	public int value__; // 0x0
	public const VideoRenderMode CameraFarPlane = 0; // 0x0
	public const VideoRenderMode CameraNearPlane = 1; // 0x0
	public const VideoRenderMode RenderTexture = 2; // 0x0
	public const VideoRenderMode MaterialOverride = 3; // 0x0
	public const VideoRenderMode APIOnly = 4; // 0x0
}

// Namespace: UnityEngine.Video
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum Video3DLayout // TypeDefIndex: 2189
{
	// Fields
	public int value__; // 0x0
	public const Video3DLayout No3D = 0; // 0x0
	public const Video3DLayout SideBySide3D = 1; // 0x0
	public const Video3DLayout OverUnder3D = 2; // 0x0
}

// Namespace: UnityEngine.Video
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum VideoAspectRatio // TypeDefIndex: 2190
{
	// Fields
	public int value__; // 0x0
	public const VideoAspectRatio NoScaling = 0; // 0x0
	public const VideoAspectRatio FitVertically = 1; // 0x0
	public const VideoAspectRatio FitHorizontally = 2; // 0x0
	public const VideoAspectRatio FitInside = 3; // 0x0
	public const VideoAspectRatio FitOutside = 4; // 0x0
	public const VideoAspectRatio Stretch = 5; // 0x0
}

// Namespace: UnityEngine.Video
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum VideoTimeSource // TypeDefIndex: 2191
{
	// Fields
	public int value__; // 0x0
	public const VideoTimeSource AudioDSPTimeSource = 0; // 0x0
	public const VideoTimeSource GameTimeSource = 1; // 0x0
}

// Namespace: UnityEngine.Video
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum VideoTimeReference // TypeDefIndex: 2192
{
	// Fields
	public int value__; // 0x0
	public const VideoTimeReference Freerun = 0; // 0x0
	public const VideoTimeReference InternalTime = 1; // 0x0
	public const VideoTimeReference ExternalTime = 2; // 0x0
}

// Namespace: UnityEngine.Video
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum VideoSource // TypeDefIndex: 2193
{
	// Fields
	public int value__; // 0x0
	public const VideoSource VideoClip = 0; // 0x0
	public const VideoSource Url = 1; // 0x0
}

// Namespace: UnityEngine.Video
[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum VideoAudioOutputMode // TypeDefIndex: 2194
{
	// Fields
	public int value__; // 0x0
	public const VideoAudioOutputMode None = 0; // 0x0
	public const VideoAudioOutputMode AudioSource = 1; // 0x0
	public const VideoAudioOutputMode Direct = 2; // 0x0
	public const VideoAudioOutputMode APIOnly = 3; // 0x0
}

// Namespace: UnityEngine.Video
[RequireComponent] // RVA: 0xFF800 Offset: 0xFEC00 VA: 0x1800FF800
[RequiredByNativeCodeAttribute] // RVA: 0xFF800 Offset: 0xFEC00 VA: 0x1800FF800
public sealed class VideoPlayer : Behaviour // TypeDefIndex: 2195
{
	// Fields
	private VideoPlayer.EventHandler prepareCompleted; // 0x18
	private VideoPlayer.EventHandler loopPointReached; // 0x20
	private VideoPlayer.EventHandler started; // 0x28
	private VideoPlayer.EventHandler frameDropped; // 0x30
	private VideoPlayer.ErrorEventHandler errorReceived; // 0x38
	private VideoPlayer.EventHandler seekCompleted; // 0x40
	private VideoPlayer.TimeEventHandler clockResyncOccurred; // 0x48
	private VideoPlayer.FrameReadyEventHandler frameReady; // 0x50

	// Methods
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A8A0 Offset: 0x6890A0 VA: 0x18068A8A0
	private static void InvokePrepareCompletedCallback_Internal(VideoPlayer source) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A8D0 Offset: 0x6890D0 VA: 0x18068A8D0
	private static void InvokeFrameReadyCallback_Internal(VideoPlayer source, long frameIdx) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A910 Offset: 0x689110 VA: 0x18068A910
	private static void InvokeLoopPointReachedCallback_Internal(VideoPlayer source) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A940 Offset: 0x689140 VA: 0x18068A940
	private static void InvokeStartedCallback_Internal(VideoPlayer source) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A970 Offset: 0x689170 VA: 0x18068A970
	private static void InvokeFrameDroppedCallback_Internal(VideoPlayer source) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A9A0 Offset: 0x6891A0 VA: 0x18068A9A0
	private static void InvokeErrorReceivedCallback_Internal(VideoPlayer source, string errorStr) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68A9E0 Offset: 0x6891E0 VA: 0x18068A9E0
	private static void InvokeSeekCompletedCallback_Internal(VideoPlayer source) { }
	[RequiredByNativeCodeAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x68AA10 Offset: 0x689210 VA: 0x18068AA10
	private static void InvokeClockResyncOccurredCallback_Internal(VideoPlayer source, double seconds) { }
}

// Namespace: 
public sealed class VideoPlayer.EventHandler : MulticastDelegate // TypeDefIndex: 2196
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x44E1A0 Offset: 0x44C9A0 VA: 0x18044E1A0 Slot: 12
	public virtual void Invoke(VideoPlayer source) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(VideoPlayer source, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class VideoPlayer.ErrorEventHandler : MulticastDelegate // TypeDefIndex: 2197
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x68AA50 Offset: 0x689250 VA: 0x18068AA50 Slot: 12
	public virtual void Invoke(VideoPlayer source, string message) { }
	// RVA: 0x261F90 Offset: 0x260790 VA: 0x180261F90 Slot: 13
	public virtual IAsyncResult BeginInvoke(VideoPlayer source, string message, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class VideoPlayer.FrameReadyEventHandler : MulticastDelegate // TypeDefIndex: 2198
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x68AE90 Offset: 0x689690 VA: 0x18068AE90 Slot: 12
	public virtual void Invoke(VideoPlayer source, long frameIdx) { }
	// RVA: 0x68B2D0 Offset: 0x689AD0 VA: 0x18068B2D0 Slot: 13
	public virtual IAsyncResult BeginInvoke(VideoPlayer source, long frameIdx, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class VideoPlayer.TimeEventHandler : MulticastDelegate // TypeDefIndex: 2199
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x68B3A0 Offset: 0x689BA0 VA: 0x18068B3A0 Slot: 12
	public virtual void Invoke(VideoPlayer source, double seconds) { }
	// RVA: 0x68B860 Offset: 0x68A060 VA: 0x18068B860 Slot: 13
	public virtual IAsyncResult BeginInvoke(VideoPlayer source, double seconds, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2200
{}

// Namespace: UnityEngine
public enum WindZoneMode // TypeDefIndex: 2201
{
	// Fields
	public int value__; // 0x0
	public const WindZoneMode Directional = 0; // 0x0
	public const WindZoneMode Spherical = 1; // 0x0
}

// Namespace: UnityEngine
public class WindZone : Component // TypeDefIndex: 2202
{
	// Properties
	public WindZoneMode mode { get; }
	public float windMain { get; }
	public float windTurbulence { get; }
	public float windPulseFrequency { get; }

	// Methods
	// RVA: 0x68F650 Offset: 0x68DE50 VA: 0x18068F650
	public WindZoneMode get_mode() { }
	// RVA: 0x68F6A0 Offset: 0x68DEA0 VA: 0x18068F6A0
	public float get_windMain() { }
	// RVA: 0x68F6F0 Offset: 0x68DEF0 VA: 0x18068F6F0
	public float get_windTurbulence() { }
	// RVA: 0x68F740 Offset: 0x68DF40 VA: 0x18068F740
	public float get_windPulseFrequency() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2203
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2204
{}

// Namespace: VisualDesignCafe.Pooling
public static class ArrayExtensions // TypeDefIndex: 2205
{
	// Methods
	// RVA: 0x5279A0 Offset: 0x5261A0 VA: 0x1805279A0
	public static void Resize(ref T[] array, int size, ArrayPool pool) { }
	// RVA: 0x5277C0 Offset: 0x525FC0 VA: 0x1805277C0
	public static void Copy(T[] source, int sourceOffset, T[] destination, int destinationOffset, int count) { }
	// RVA: 0x5277E0 Offset: 0x525FE0 VA: 0x1805277E0
	private static void CopyToFast(T[] source, int sourceOffset, T[] destination, int destinationOffset, int count) { }
}

// Namespace: VisualDesignCafe.Pooling
public class ArrayPool // TypeDefIndex: 2206
{
	// Fields
	public static readonly ArrayPool Shared; // 0x0
	private Dictionary<Type, List<ArrayPool.PooledArray>> _pool; // 0x10

	// Methods
	// RVA: 0x527A50 Offset: 0x526250 VA: 0x180527A50
	public T[] Alloc(int size, bool clear, bool exact = False) { }
	// RVA: 0x52B1F0 Offset: 0x5299F0 VA: 0x18052B1F0
	public void Free(T[] array) { }
	// RVA: 0x68F460 Offset: 0x68DC60 VA: 0x18068F460
	public void .ctor() { }
	// RVA: 0x68F520 Offset: 0x68DD20 VA: 0x18068F520
	private static void .cctor() { }
}

// Namespace: 
private struct ArrayPool.PooledArray // TypeDefIndex: 2207
{
	// Fields
	public object Array; // 0x0
	public int Length; // 0x8
}

// Namespace: VisualDesignCafe.Pooling
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public class GroupedList<T> : IDisposable // TypeDefIndex: 2208
{
	// Fields
	private const int _minFragmentSize = 100; // 0x0
	private bool <IsFragmented>k__BackingField; // 0x0
	private int <Count>k__BackingField; // 0x0
	private int <FragmentedCount>k__BackingField; // 0x0
	private int <GroupCount>k__BackingField; // 0x0
	private readonly PooledList<GroupedList.GroupData<T>> _groups; // 0x0
	private readonly PooledList<GroupedList.GroupData<T>> _removedGroups; // 0x0
	private readonly PooledList<GroupedList.SortedGroupData<T>> _sortedGroups; // 0x0
	private readonly bool _allowFragmentation; // 0x0
	private readonly Comparer<GroupedList.SortedGroupData<T>> _comparer; // 0x0
	private T[] _data; // 0x0

	// Properties
	public bool IsFragmented { get; set; }
	public int Count { get; set; }
	protected int AppliedCount { get; }
	protected int FragmentedCount { get; set; }
	public int GroupCount { get; set; }
	public T[] Buffer { get; }

	// Methods
	// RVA: 0x1E30F0 Offset: 0x1E18F0 VA: 0x1801E30F0
	public bool get_IsFragmented() { }
	// RVA: 0x350D70 Offset: 0x34F570 VA: 0x180350D70
	private void set_IsFragmented(bool value) { }
	// RVA: 0x2E4C30 Offset: 0x2E3430 VA: 0x1802E4C30
	public int get_Count() { }
	// RVA: 0x2E4C40 Offset: 0x2E3440 VA: 0x1802E4C40
	private void set_Count(int value) { }
	// RVA: 0x7F4A40 Offset: 0x7F3240 VA: 0x1807F4A40
	protected int get_AppliedCount() { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0
	protected int get_FragmentedCount() { }
	// RVA: 0x1FECF0 Offset: 0x1FD4F0 VA: 0x1801FECF0
	private void set_FragmentedCount(int value) { }
	// RVA: 0x202970 Offset: 0x201170 VA: 0x180202970
	public int get_GroupCount() { }
	// RVA: 0x20B400 Offset: 0x209C00 VA: 0x18020B400
	private void set_GroupCount(int value) { }
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0
	public T[] get_Buffer() { }
	// RVA: 0x7F4AB0 Offset: 0x7F32B0 VA: 0x1807F4AB0
	public void .ctor(int capacity, bool allowFragmentation = False) { }
	// RVA: 0x7F4CE0 Offset: 0x7F34E0 VA: 0x1807F4CE0 Slot: 4
	public void Dispose() { }
	// RVA: 0x7F4E10 Offset: 0x7F3610 VA: 0x1807F4E10
	public void Defragment() { }
	// RVA: 0x7F5320 Offset: 0x7F3B20 VA: 0x1807F5320
	private int FindNextSlice(PooledList<GroupedList.SortedGroupData<T>> groups, int startIndex) { }
	// RVA: 0x7F5470 Offset: 0x7F3C70 VA: 0x1807F5470
	public int Add(T[] group, int offset, int length) { }
	// RVA: 0x7F5890 Offset: 0x7F4090 VA: 0x1807F5890
	public void Remove(int groupIndex) { }
	// RVA: 0x7F5ED0 Offset: 0x7F46D0 VA: 0x1807F5ED0
	private int FindStartIndex(int length) { }
}

// Namespace: 
private struct GroupedList.SortedGroupData<T> : IComparable<GroupedList.SortedGroupData<T>> // TypeDefIndex: 2209
{
	// Fields
	public int Index; // 0x0
	public int StartIndex; // 0x0
	public int Length; // 0x0

	// Methods
	// RVA: 0x12FB20 Offset: 0x12EF20 VA: 0x18012FB20
	public void .ctor(GroupedList.SortedGroupData<T> other) { }
	// RVA: 0x12FB50 Offset: 0x12EF50 VA: 0x18012FB50
	public void .ctor(int index, GroupedList.GroupData<T> group) { }
	// RVA: 0x12FB60 Offset: 0x12EF60 VA: 0x18012FB60 Slot: 4
	public int CompareTo(GroupedList.SortedGroupData<T> other) { }
}

// Namespace: 
private struct GroupedList.GroupData<T> // TypeDefIndex: 2210
{
	// Fields
	public int StartIndex; // 0x0
	public int Length; // 0x0

	// Methods
	// RVA: 0x16B00 Offset: 0x15F00 VA: 0x180016B00
	public void .ctor(int startIndex, int length) { }
	// RVA: 0x132D00 Offset: 0x132100 VA: 0x180132D00
	public void .ctor(GroupedList.GroupData<T> other) { }
}

// Namespace: VisualDesignCafe.Pooling
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public class PooledList<T> : IDisposable, IEnumerable<T>, IEnumerable // TypeDefIndex: 2211
{
	// Fields
	private int <Count>k__BackingField; // 0x0
	private T[] _buffer; // 0x0
	private readonly ArrayPool _pool; // 0x0

	// Properties
	public int Count { get; set; }
	public T Item { get; set; }

	// Methods
	// RVA: 0x198900 Offset: 0x197100 VA: 0x180198900
	public int get_Count() { }
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	private void set_Count(int value) { }
	// RVA: 0x7FC060 Offset: 0x7FA860 VA: 0x1807FC060
	public T get_Item(int index) { }
	// RVA: 0x7FC0B0 Offset: 0x7FA8B0 VA: 0x1807FC0B0
	public void set_Item(int index, T value) { }
	// RVA: 0x7FC100 Offset: 0x7FA900 VA: 0x1807FC100
	public void .ctor(int capacity) { }
	// RVA: 0x7FC1F0 Offset: 0x7FA9F0 VA: 0x1807FC1F0
	public void .ctor(int capacity, ArrayPool pool) { }
	// RVA: 0x7FC2F0 Offset: 0x7FAAF0 VA: 0x1807FC2F0
	public void Add(T value) { }
	// RVA: 0x7FC420 Offset: 0x7FAC20 VA: 0x1807FC420
	public void Clear() { }
	// RVA: 0x7FC450 Offset: 0x7FAC50 VA: 0x1807FC450 Slot: 4
	public void Dispose() { }
	// RVA: 0x7FC480 Offset: 0x7FAC80 VA: 0x1807FC480
	public void Sort(IComparer<T> comparer) { }
	// RVA: 0x7FC4E0 Offset: 0x7FACE0 VA: 0x1807FC4E0 Slot: 5
	public IEnumerator<T> GetEnumerator() { }
	// RVA: 0x7FC560 Offset: 0x7FAD60 VA: 0x1807FC560 Slot: 6
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
private sealed class PooledList.<GetEnumerator>d__16<T> : IEnumerator<T>, IEnumerator, IDisposable // TypeDefIndex: 2212
{
	// Fields
	private int <>1__state; // 0x0
	private T <>2__current; // 0x0
	public PooledList<T> <>4__this; // 0x0
	private int <i>5__2; // 0x0

	// Properties
	private T System.Collections.Generic.IEnumerator<T>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C7A90 Offset: 0x7C6290 VA: 0x1807C7A90
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x7C7F50 Offset: 0x7C6750 VA: 0x1807C7F50 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C5680 Offset: 0x5C3E80 VA: 0x1805C5680 Slot: 4
	private T System.Collections.Generic.IEnumerator<T>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C8010 Offset: 0x7C6810 VA: 0x1807C8010 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2213
{}

// Namespace: UnityEngine.Rendering.PostProcessing
[AttributeUsageAttribute] // RVA: 0x100B40 Offset: 0xFFF40 VA: 0x180100B40
public sealed class PostProcessAttribute : Attribute // TypeDefIndex: 2214
{
	// Fields
	public readonly Type renderer; // 0x10
	public readonly PostProcessEvent eventType; // 0x18
	public readonly string menuItem; // 0x20
	public readonly bool allowInSceneView; // 0x28
	internal readonly bool builtinEffect; // 0x29

	// Methods
	// RVA: 0x2BDAE0 Offset: 0x2BC2E0 VA: 0x1802BDAE0
	internal void .ctor(Type renderer, string menuItem, bool allowInSceneView = True) { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum AmbientOcclusionMode // TypeDefIndex: 2215
{
	// Fields
	public int value__; // 0x0
	public const AmbientOcclusionMode ScalableAmbientObscurance = 0; // 0x0
	public const AmbientOcclusionMode MultiScaleVolumetricObscurance = 1; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum AmbientOcclusionQuality // TypeDefIndex: 2216
{
	// Fields
	public int value__; // 0x0
	public const AmbientOcclusionQuality Lowest = 0; // 0x0
	public const AmbientOcclusionQuality Low = 1; // 0x0
	public const AmbientOcclusionQuality Medium = 2; // 0x0
	public const AmbientOcclusionQuality High = 3; // 0x0
	public const AmbientOcclusionQuality Ultra = 4; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class AmbientOcclusionModeParameter : ParameterOverride<AmbientOcclusionMode> // TypeDefIndex: 2217
{
	// Methods
	// RVA: 0x2A4980 Offset: 0x2A3180 VA: 0x1802A4980
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class AmbientOcclusionQualityParameter : ParameterOverride<AmbientOcclusionQuality> // TypeDefIndex: 2218
{
	// Methods
	// RVA: 0x2A4A20 Offset: 0x2A3220 VA: 0x1802A4A20
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PostProcessAttribute] // RVA: 0x100B60 Offset: 0xFFF60 VA: 0x180100B60
[Serializable]
public sealed class AmbientOcclusion : PostProcessEffectSettings // TypeDefIndex: 2219
{
	// Fields
	public AmbientOcclusionModeParameter mode; // 0x30
	public FloatParameter intensity; // 0x38
	public ColorParameter color; // 0x40
	public BoolParameter ambientOnly; // 0x48
	public FloatParameter noiseFilterTolerance; // 0x50
	public FloatParameter blurTolerance; // 0x58
	public FloatParameter upsampleTolerance; // 0x60
	public FloatParameter thicknessModifier; // 0x68
	public FloatParameter directLightingStrength; // 0x70
	public FloatParameter radius; // 0x78
	public AmbientOcclusionQualityParameter quality; // 0x80

	// Methods
	// RVA: 0x2A3E60 Offset: 0x2A2660 VA: 0x1802A3E60 Slot: 4
	public override bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x2A42C0 Offset: 0x2A2AC0 VA: 0x1802A42C0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
internal interface IAmbientOcclusionMethod // TypeDefIndex: 2220
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract DepthTextureMode GetCameraFlags() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void RenderAfterOpaque(PostProcessRenderContext context) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void RenderAmbientOnly(PostProcessRenderContext context) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void CompositeAmbientOnly(PostProcessRenderContext context) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void Release() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class AmbientOcclusionRenderer : PostProcessEffectRenderer<AmbientOcclusion> // TypeDefIndex: 2221
{
	// Fields
	private IAmbientOcclusionMethod[] m_Methods; // 0x20

	// Methods
	// RVA: 0x2A4AC0 Offset: 0x2A32C0 VA: 0x1802A4AC0 Slot: 4
	public override void Init() { }
	// RVA: 0x2A4D70 Offset: 0x2A3570 VA: 0x1802A4D70
	public bool IsAmbientOnly(PostProcessRenderContext context) { }
	// RVA: 0x2A4EC0 Offset: 0x2A36C0 VA: 0x1802A4EC0
	public IAmbientOcclusionMethod Get() { }
	// RVA: 0x2A4F70 Offset: 0x2A3770 VA: 0x1802A4F70 Slot: 5
	public override DepthTextureMode GetCameraFlags() { }
	// RVA: 0x2A5000 Offset: 0x2A3800 VA: 0x1802A5000 Slot: 7
	public override void Release() { }
	// RVA: 0x2A5160 Offset: 0x2A3960 VA: 0x1802A5160
	public MultiScaleVO GetMultiScaleVO() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 8
	public override void Render(PostProcessRenderContext context) { }
	// RVA: 0x2A5220 Offset: 0x2A3A20 VA: 0x1802A5220
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum EyeAdaptation // TypeDefIndex: 2222
{
	// Fields
	public int value__; // 0x0
	public const EyeAdaptation Progressive = 0; // 0x0
	public const EyeAdaptation Fixed = 1; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class EyeAdaptationParameter : ParameterOverride<EyeAdaptation> // TypeDefIndex: 2223
{
	// Methods
	// RVA: 0x2B2540 Offset: 0x2B0D40 VA: 0x1802B2540
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PostProcessAttribute] // RVA: 0x100C10 Offset: 0x100010 VA: 0x180100C10
[Serializable]
public sealed class AutoExposure : PostProcessEffectSettings // TypeDefIndex: 2224
{
	// Fields
	public Vector2Parameter filtering; // 0x30
	public FloatParameter minLuminance; // 0x38
	public FloatParameter maxLuminance; // 0x40
	public FloatParameter keyValue; // 0x48
	public EyeAdaptationParameter eyeAdaptation; // 0x50
	public FloatParameter speedUp; // 0x58
	public FloatParameter speedDown; // 0x60

	// Methods
	// RVA: 0x2A52A0 Offset: 0x2A3AA0 VA: 0x1802A52A0 Slot: 4
	public override bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x2A5480 Offset: 0x2A3C80 VA: 0x1802A5480
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class AutoExposureRenderer : PostProcessEffectRenderer<AutoExposure> // TypeDefIndex: 2225
{
	// Fields
	private readonly RenderTexture[][] m_AutoExposurePool; // 0x20
	private int[] m_AutoExposurePingPong; // 0x28
	private RenderTexture m_CurrentAutoExposure; // 0x30

	// Methods
	// RVA: 0x2A58E0 Offset: 0x2A40E0 VA: 0x1802A58E0
	public void .ctor() { }
	// RVA: 0x2A5AB0 Offset: 0x2A42B0 VA: 0x1802A5AB0
	private void CheckTexture(int eye, int id) { }
	// RVA: 0x2A5E10 Offset: 0x2A4610 VA: 0x1802A5E10 Slot: 8
	public override void Render(PostProcessRenderContext context) { }
	// RVA: 0x2A6880 Offset: 0x2A5080 VA: 0x1802A6880 Slot: 7
	public override void Release() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PostProcessAttribute] // RVA: 0x100CC0 Offset: 0x1000C0 VA: 0x180100CC0
[Serializable]
public sealed class Bloom : PostProcessEffectSettings // TypeDefIndex: 2226
{
	// Fields
	public FloatParameter intensity; // 0x30
	public FloatParameter threshold; // 0x38
	public FloatParameter softKnee; // 0x40
	public FloatParameter clamp; // 0x48
	public FloatParameter diffusion; // 0x50
	public FloatParameter anamorphicRatio; // 0x58
	public ColorParameter color; // 0x60
	[FormerlySerializedAsAttribute] // RVA: 0x100D70 Offset: 0x100170 VA: 0x180100D70
	public BoolParameter fastMode; // 0x68
	public TextureParameter dirtTexture; // 0x70
	public FloatParameter dirtIntensity; // 0x78

	// Methods
	// RVA: 0x2A69B0 Offset: 0x2A51B0 VA: 0x1802A69B0 Slot: 4
	public override bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x2A69F0 Offset: 0x2A51F0 VA: 0x1802A69F0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class BloomRenderer : PostProcessEffectRenderer<Bloom> // TypeDefIndex: 2227
{
	// Fields
	private BloomRenderer.Level[] m_Pyramid; // 0x20

	// Methods
	// RVA: 0x2A6FA0 Offset: 0x2A57A0 VA: 0x1802A6FA0 Slot: 4
	public override void Init() { }
	// RVA: 0x2A78F0 Offset: 0x2A60F0 VA: 0x1802A78F0 Slot: 8
	public override void Render(PostProcessRenderContext context) { }
	// RVA: 0x2A8C30 Offset: 0x2A7430 VA: 0x1802A8C30
	public void .ctor() { }
}

// Namespace: 
private enum BloomRenderer.Pass // TypeDefIndex: 2228
{
	// Fields
	public int value__; // 0x0
	public const BloomRenderer.Pass Prefilter13 = 0; // 0x0
	public const BloomRenderer.Pass Prefilter4 = 1; // 0x0
	public const BloomRenderer.Pass Downsample13 = 2; // 0x0
	public const BloomRenderer.Pass Downsample4 = 3; // 0x0
	public const BloomRenderer.Pass UpsampleTent = 4; // 0x0
	public const BloomRenderer.Pass UpsampleBox = 5; // 0x0
	public const BloomRenderer.Pass DebugOverlayThreshold = 6; // 0x0
	public const BloomRenderer.Pass DebugOverlayTent = 7; // 0x0
	public const BloomRenderer.Pass DebugOverlayBox = 8; // 0x0
}

// Namespace: 
private struct BloomRenderer.Level // TypeDefIndex: 2229
{
	// Fields
	internal int down; // 0x0
	internal int up; // 0x4
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PostProcessAttribute] // RVA: 0x100DA0 Offset: 0x1001A0 VA: 0x180100DA0
[Serializable]
public sealed class ChromaticAberration : PostProcessEffectSettings // TypeDefIndex: 2230
{
	// Fields
	public TextureParameter spectralLut; // 0x30
	public FloatParameter intensity; // 0x38
	[FormerlySerializedAsAttribute] // RVA: 0x100D70 Offset: 0x100170 VA: 0x180100D70
	public BoolParameter fastMode; // 0x40

	// Methods
	// RVA: 0x2A8D50 Offset: 0x2A7550 VA: 0x1802A8D50 Slot: 4
	public override bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x2A8D90 Offset: 0x2A7590 VA: 0x1802A8D90
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class ChromaticAberrationRenderer : PostProcessEffectRenderer<ChromaticAberration> // TypeDefIndex: 2231
{
	// Fields
	private Texture2D m_InternalSpectralLut; // 0x20

	// Methods
	// RVA: 0x2A8F80 Offset: 0x2A7780 VA: 0x1802A8F80 Slot: 8
	public override void Render(PostProcessRenderContext context) { }
	// RVA: 0x2A9390 Offset: 0x2A7B90 VA: 0x1802A9390 Slot: 7
	public override void Release() { }
	// RVA: 0x2A9440 Offset: 0x2A7C40 VA: 0x1802A9440
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum GradingMode // TypeDefIndex: 2232
{
	// Fields
	public int value__; // 0x0
	public const GradingMode LowDefinitionRange = 0; // 0x0
	public const GradingMode HighDefinitionRange = 1; // 0x0
	public const GradingMode External = 2; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum Tonemapper // TypeDefIndex: 2233
{
	// Fields
	public int value__; // 0x0
	public const Tonemapper None = 0; // 0x0
	public const Tonemapper Neutral = 1; // 0x0
	public const Tonemapper ACES = 2; // 0x0
	public const Tonemapper Custom = 3; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class GradingModeParameter : ParameterOverride<GradingMode> // TypeDefIndex: 2234
{
	// Methods
	// RVA: 0x2B2DD0 Offset: 0x2B15D0 VA: 0x1802B2DD0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class TonemapperParameter : ParameterOverride<Tonemapper> // TypeDefIndex: 2235
{
	// Methods
	// RVA: 0x569750 Offset: 0x567F50 VA: 0x180569750
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PostProcessAttribute] // RVA: 0x100E50 Offset: 0x100250 VA: 0x180100E50
[Serializable]
public sealed class ColorGrading : PostProcessEffectSettings // TypeDefIndex: 2236
{
	// Fields
	public GradingModeParameter gradingMode; // 0x30
	public TextureParameter externalLut; // 0x38
	public TonemapperParameter tonemapper; // 0x40
	public FloatParameter toneCurveToeStrength; // 0x48
	public FloatParameter toneCurveToeLength; // 0x50
	public FloatParameter toneCurveShoulderStrength; // 0x58
	public FloatParameter toneCurveShoulderLength; // 0x60
	public FloatParameter toneCurveShoulderAngle; // 0x68
	public FloatParameter toneCurveGamma; // 0x70
	public TextureParameter ldrLut; // 0x78
	public FloatParameter ldrLutContribution; // 0x80
	public FloatParameter temperature; // 0x88
	public FloatParameter tint; // 0x90
	public ColorParameter colorFilter; // 0x98
	public FloatParameter hueShift; // 0xA0
	public FloatParameter saturation; // 0xA8
	public FloatParameter brightness; // 0xB0
	public FloatParameter postExposure; // 0xB8
	public FloatParameter contrast; // 0xC0
	public FloatParameter mixerRedOutRedIn; // 0xC8
	public FloatParameter mixerRedOutGreenIn; // 0xD0
	public FloatParameter mixerRedOutBlueIn; // 0xD8
	public FloatParameter mixerGreenOutRedIn; // 0xE0
	public FloatParameter mixerGreenOutGreenIn; // 0xE8
	public FloatParameter mixerGreenOutBlueIn; // 0xF0
	public FloatParameter mixerBlueOutRedIn; // 0xF8
	public FloatParameter mixerBlueOutGreenIn; // 0x100
	public FloatParameter mixerBlueOutBlueIn; // 0x108
	public Vector4Parameter lift; // 0x110
	public Vector4Parameter gamma; // 0x118
	public Vector4Parameter gain; // 0x120
	public SplineParameter masterCurve; // 0x128
	public SplineParameter redCurve; // 0x130
	public SplineParameter greenCurve; // 0x138
	public SplineParameter blueCurve; // 0x140
	public SplineParameter hueVsHueCurve; // 0x148
	public SplineParameter hueVsSatCurve; // 0x150
	public SplineParameter satVsSatCurve; // 0x158
	public SplineParameter lumVsSatCurve; // 0x160

	// Methods
	// RVA: 0x2A94C0 Offset: 0x2A7CC0 VA: 0x1802A94C0 Slot: 4
	public override bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x2A9580 Offset: 0x2A7D80 VA: 0x1802A9580
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class ColorGradingRenderer : PostProcessEffectRenderer<ColorGrading> // TypeDefIndex: 2237
{
	// Fields
	private Texture2D m_GradingCurves; // 0x20
	private readonly Color[] m_Pixels; // 0x28
	private RenderTexture m_InternalLdrLut; // 0x30
	private RenderTexture m_InternalLogLut; // 0x38
	private readonly HableCurve m_HableCurve; // 0x40

	// Methods
	// RVA: 0x2AABE0 Offset: 0x2A93E0 VA: 0x1802AABE0 Slot: 8
	public override void Render(PostProcessRenderContext context) { }
	// RVA: 0x2AADE0 Offset: 0x2A95E0 VA: 0x1802AADE0
	private void RenderExternalPipeline3D(PostProcessRenderContext context) { }
	// RVA: 0x2AB0E0 Offset: 0x2A98E0 VA: 0x1802AB0E0
	private void RenderHDRPipeline3D(PostProcessRenderContext context) { }
	// RVA: 0x2AC220 Offset: 0x2AAA20 VA: 0x1802AC220
	private void RenderHDRPipeline2D(PostProcessRenderContext context) { }
	// RVA: 0x2AD9A0 Offset: 0x2AC1A0 VA: 0x1802AD9A0
	private void RenderLDRPipeline2D(PostProcessRenderContext context) { }
	// RVA: 0x2AEC40 Offset: 0x2AD440 VA: 0x1802AEC40
	private void CheckInternalLogLut() { }
	// RVA: 0x2AF090 Offset: 0x2AD890 VA: 0x1802AF090
	private void CheckInternalStripLut() { }
	// RVA: 0x2AF440 Offset: 0x2ADC40 VA: 0x1802AF440
	private Texture2D GetCurveTexture(bool hdr) { }
	// RVA: 0x2AF9F0 Offset: 0x2AE1F0 VA: 0x1802AF9F0
	private static bool IsRenderTextureFormatSupportedForLinearFiltering(RenderTextureFormat format) { }
	// RVA: 0x2AFAD0 Offset: 0x2AE2D0 VA: 0x1802AFAD0
	private static RenderTextureFormat GetLutFormat() { }
	// RVA: 0x2AFB20 Offset: 0x2AE320 VA: 0x1802AFB20
	private static TextureFormat GetCurveFormat() { }
	// RVA: 0x2AFB50 Offset: 0x2AE350 VA: 0x1802AFB50 Slot: 7
	public override void Release() { }
	// RVA: 0x2AFC20 Offset: 0x2AE420 VA: 0x1802AFC20
	public void .ctor() { }
}

// Namespace: 
private enum ColorGradingRenderer.Pass // TypeDefIndex: 2238
{
	// Fields
	public int value__; // 0x0
	public const ColorGradingRenderer.Pass LutGenLDRFromScratch = 0; // 0x0
	public const ColorGradingRenderer.Pass LutGenLDR = 1; // 0x0
	public const ColorGradingRenderer.Pass LutGenHDR2D = 2; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum KernelSize // TypeDefIndex: 2239
{
	// Fields
	public int value__; // 0x0
	public const KernelSize Small = 0; // 0x0
	public const KernelSize Medium = 1; // 0x0
	public const KernelSize Large = 2; // 0x0
	public const KernelSize VeryLarge = 3; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class KernelSizeParameter : ParameterOverride<KernelSize> // TypeDefIndex: 2240
{
	// Methods
	// RVA: 0x2B5660 Offset: 0x2B3E60 VA: 0x1802B5660
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PostProcessAttribute] // RVA: 0x100F00 Offset: 0x100300 VA: 0x180100F00
[Serializable]
public sealed class DepthOfField : PostProcessEffectSettings // TypeDefIndex: 2241
{
	// Fields
	public FloatParameter focusDistance; // 0x30
	public FloatParameter aperture; // 0x38
	public FloatParameter focalLength; // 0x40
	public KernelSizeParameter kernelSize; // 0x48

	// Methods
	// RVA: 0x2B0240 Offset: 0x2AEA40 VA: 0x1802B0240 Slot: 4
	public override bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x2B02B0 Offset: 0x2AEAB0 VA: 0x1802B02B0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class DepthOfFieldRenderer : PostProcessEffectRenderer<DepthOfField> // TypeDefIndex: 2242
{
	// Fields
	private readonly RenderTexture[][] m_CoCHistoryTextures; // 0x20
	private int[] m_HistoryPingPong; // 0x28

	// Methods
	// RVA: 0x2B05B0 Offset: 0x2AEDB0 VA: 0x1802B05B0
	public void .ctor() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 5
	public override DepthTextureMode GetCameraFlags() { }
	// RVA: 0x2B0780 Offset: 0x2AEF80 VA: 0x1802B0780
	private RenderTextureFormat SelectFormat(RenderTextureFormat primary, RenderTextureFormat secondary) { }
	// RVA: 0x2B0860 Offset: 0x2AF060 VA: 0x1802B0860
	private float CalculateMaxCoCRadius(int screenHeight) { }
	// RVA: 0x2B0950 Offset: 0x2AF150 VA: 0x1802B0950
	private RenderTexture CheckHistory(int eye, int id, PostProcessRenderContext context, RenderTextureFormat format) { }
	// RVA: 0x2B0E60 Offset: 0x2AF660 VA: 0x1802B0E60 Slot: 8
	public override void Render(PostProcessRenderContext context) { }
	// RVA: 0x2B2060 Offset: 0x2B0860 VA: 0x1802B2060 Slot: 7
	public override void Release() { }
}

// Namespace: 
private enum DepthOfFieldRenderer.Pass // TypeDefIndex: 2243
{
	// Fields
	public int value__; // 0x0
	public const DepthOfFieldRenderer.Pass CoCCalculation = 0; // 0x0
	public const DepthOfFieldRenderer.Pass CoCTemporalFilter = 1; // 0x0
	public const DepthOfFieldRenderer.Pass DownsampleAndPrefilter = 2; // 0x0
	public const DepthOfFieldRenderer.Pass BokehSmallKernel = 3; // 0x0
	public const DepthOfFieldRenderer.Pass BokehMediumKernel = 4; // 0x0
	public const DepthOfFieldRenderer.Pass BokehLargeKernel = 5; // 0x0
	public const DepthOfFieldRenderer.Pass BokehVeryLargeKernel = 6; // 0x0
	public const DepthOfFieldRenderer.Pass PostFilter = 7; // 0x0
	public const DepthOfFieldRenderer.Pass Combine = 8; // 0x0
	public const DepthOfFieldRenderer.Pass DebugOverlay = 9; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
internal sealed class Dithering // TypeDefIndex: 2244
{
	// Fields
	private int m_NoiseTextureIndex; // 0x10
	private Random m_Random; // 0x18

	// Methods
	// RVA: 0x2B21A0 Offset: 0x2B09A0 VA: 0x1802B21A0
	internal void Render(PostProcessRenderContext context) { }
	// RVA: 0x2B24A0 Offset: 0x2B0CA0 VA: 0x1802B24A0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public sealed class FastApproximateAntialiasing // TypeDefIndex: 2245
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0x100D70 Offset: 0x100170 VA: 0x180100D70
	public bool fastMode; // 0x10
	public bool keepAlpha; // 0x11

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public sealed class Fog // TypeDefIndex: 2246
{
	// Fields
	public bool enabled; // 0x10
	public bool excludeSkybox; // 0x11

	// Methods
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0
	internal DepthTextureMode GetCameraFlags() { }
	// RVA: 0x2B26A0 Offset: 0x2B0EA0 VA: 0x1802B26A0
	internal bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x2B2840 Offset: 0x2B1040 VA: 0x1802B2840
	internal void Render(PostProcessRenderContext context) { }
	// RVA: 0x2B2DC0 Offset: 0x2B15C0 VA: 0x1802B2DC0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PostProcessAttribute] // RVA: 0x100FB0 Offset: 0x1003B0 VA: 0x180100FB0
[Serializable]
public sealed class Grain : PostProcessEffectSettings // TypeDefIndex: 2247
{
	// Fields
	public BoolParameter colored; // 0x30
	public FloatParameter intensity; // 0x38
	public FloatParameter size; // 0x40
	public FloatParameter lumContrib; // 0x48

	// Methods
	// RVA: 0x2A8D50 Offset: 0x2A7550 VA: 0x1802A8D50 Slot: 4
	public override bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x2B2E70 Offset: 0x2B1670 VA: 0x1802B2E70
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class GrainRenderer : PostProcessEffectRenderer<Grain> // TypeDefIndex: 2248
{
	// Fields
	private RenderTexture m_GrainLookupRT; // 0x20
	private int m_SampleIndex; // 0x28

	// Methods
	// RVA: 0x2B3170 Offset: 0x2B1970 VA: 0x1802B3170 Slot: 8
	public override void Render(PostProcessRenderContext context) { }
	// RVA: 0x2B3C50 Offset: 0x2B2450 VA: 0x1802B3C50
	private RenderTextureFormat GetLookupFormat() { }
	// RVA: 0x2B3CE0 Offset: 0x2B24E0 VA: 0x1802B3CE0 Slot: 7
	public override void Release() { }
	// RVA: 0x2B3D90 Offset: 0x2B2590 VA: 0x1802B3D90
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PostProcessAttribute] // RVA: 0x101060 Offset: 0x100460 VA: 0x180101060
[Serializable]
public sealed class LensDistortion : PostProcessEffectSettings // TypeDefIndex: 2249
{
	// Fields
	public FloatParameter intensity; // 0x30
	public FloatParameter intensityX; // 0x38
	public FloatParameter intensityY; // 0x40
	public FloatParameter centerX; // 0x48
	public FloatParameter centerY; // 0x50
	public FloatParameter scale; // 0x58

	// Methods
	// RVA: 0x2B5700 Offset: 0x2B3F00 VA: 0x1802B5700 Slot: 4
	public override bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x2B5840 Offset: 0x2B4040 VA: 0x1802B5840
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class LensDistortionRenderer : PostProcessEffectRenderer<LensDistortion> // TypeDefIndex: 2250
{
	// Methods
	// RVA: 0x2B5C60 Offset: 0x2B4460 VA: 0x1802B5C60 Slot: 8
	public override void Render(PostProcessRenderContext context) { }
	// RVA: 0x2B6010 Offset: 0x2B4810 VA: 0x1802B6010
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PostProcessAttribute] // RVA: 0x101110 Offset: 0x100510 VA: 0x180101110
[Serializable]
public sealed class MotionBlur : PostProcessEffectSettings // TypeDefIndex: 2251
{
	// Fields
	public FloatParameter shutterAngle; // 0x30
	public IntParameter sampleCount; // 0x38

	// Methods
	// RVA: 0x2B7400 Offset: 0x2B5C00 VA: 0x1802B7400 Slot: 4
	public override bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x2B7550 Offset: 0x2B5D50 VA: 0x1802B7550
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class MotionBlurRenderer : PostProcessEffectRenderer<MotionBlur> // TypeDefIndex: 2252
{
	// Methods
	// RVA: 0x2B7720 Offset: 0x2B5F20 VA: 0x1802B7720 Slot: 5
	public override DepthTextureMode GetCameraFlags() { }
	// RVA: 0x2B7730 Offset: 0x2B5F30 VA: 0x1802B7730
	private void CreateTemporaryRT(PostProcessRenderContext context, int nameID, int width, int height, RenderTextureFormat RTFormat) { }
	// RVA: 0x2B7820 Offset: 0x2B6020 VA: 0x1802B7820 Slot: 8
	public override void Render(PostProcessRenderContext context) { }
	// RVA: 0x2B85C0 Offset: 0x2B6DC0 VA: 0x1802B85C0
	public void .ctor() { }
}

// Namespace: 
private enum MotionBlurRenderer.Pass // TypeDefIndex: 2253
{
	// Fields
	public int value__; // 0x0
	public const MotionBlurRenderer.Pass VelocitySetup = 0; // 0x0
	public const MotionBlurRenderer.Pass TileMax1 = 1; // 0x0
	public const MotionBlurRenderer.Pass TileMax2 = 2; // 0x0
	public const MotionBlurRenderer.Pass TileMaxV = 3; // 0x0
	public const MotionBlurRenderer.Pass NeighborMax = 4; // 0x0
	public const MotionBlurRenderer.Pass Reconstruction = 5; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
internal sealed class MultiScaleVO : IAmbientOcclusionMethod // TypeDefIndex: 2254
{
	// Fields
	private readonly float[] m_SampleThickness; // 0x10
	private readonly float[] m_InvThicknessTable; // 0x18
	private readonly float[] m_SampleWeightTable; // 0x20
	private readonly int[] m_ScaledWidths; // 0x28
	private readonly int[] m_ScaledHeights; // 0x30
	private AmbientOcclusion m_Settings; // 0x38
	private PropertySheet m_PropertySheet; // 0x40
	private PostProcessResources m_Resources; // 0x48
	private RenderTexture m_AmbientOnlyAO; // 0x50
	private readonly RenderTargetIdentifier[] m_MRT; // 0x58

	// Methods
	// RVA: 0x2B8640 Offset: 0x2B6E40 VA: 0x1802B8640
	public void .ctor(AmbientOcclusion settings) { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 4
	public DepthTextureMode GetCameraFlags() { }
	// RVA: 0x16C1B0 Offset: 0x16A9B0 VA: 0x18016C1B0
	public void SetResources(PostProcessResources resources) { }
	// RVA: 0x2B8A10 Offset: 0x2B7210 VA: 0x1802B8A10
	private void Alloc(CommandBuffer cmd, int id, MultiScaleVO.MipLevel size, RenderTextureFormat format, bool uav) { }
	// RVA: 0x2B8B80 Offset: 0x2B7380 VA: 0x1802B8B80
	private void AllocArray(CommandBuffer cmd, int id, MultiScaleVO.MipLevel size, RenderTextureFormat format, bool uav) { }
	// RVA: 0x2B8CF0 Offset: 0x2B74F0 VA: 0x1802B8CF0
	private void Release(CommandBuffer cmd, int id) { }
	// RVA: 0x2B8D60 Offset: 0x2B7560 VA: 0x1802B8D60
	private Vector4 CalculateZBufferParams(Camera camera) { }
	// RVA: 0x2B8EC0 Offset: 0x2B76C0 VA: 0x1802B8EC0
	private float CalculateTanHalfFovHeight(Camera camera) { }
	// RVA: 0x2B8FB0 Offset: 0x2B77B0 VA: 0x1802B8FB0
	private Vector2 GetSize(MultiScaleVO.MipLevel mip) { }
	// RVA: 0x2B9020 Offset: 0x2B7820 VA: 0x1802B9020
	private Vector3 GetSizeArray(MultiScaleVO.MipLevel mip) { }
	// RVA: 0x2B90A0 Offset: 0x2B78A0 VA: 0x1802B90A0
	public void GenerateAOMap(CommandBuffer cmd, Camera camera, RenderTargetIdentifier destination, Nullable<RenderTargetIdentifier> depthMap, bool invert, bool isMSAA) { }
	// RVA: 0x2B9CA0 Offset: 0x2B84A0 VA: 0x1802B9CA0
	private void PushAllocCommands(CommandBuffer cmd, bool isMSAA) { }
	// RVA: 0x2BA290 Offset: 0x2B8A90 VA: 0x1802BA290
	private void PushDownsampleCommands(CommandBuffer cmd, Camera camera, Nullable<RenderTargetIdentifier> depthMap, bool isMSAA) { }
	// RVA: 0x2BAE30 Offset: 0x2B9630 VA: 0x1802BAE30
	private void PushRenderCommands(CommandBuffer cmd, int source, int destination, Vector3 sourceSize, float tanHalfFovH, bool isMSAA) { }
	// RVA: 0x2BBB40 Offset: 0x2BA340 VA: 0x1802BBB40
	private void PushUpsampleCommands(CommandBuffer cmd, int lowResDepth, int interleavedAO, int highResDepth, Nullable<int> highResAO, RenderTargetIdentifier dest, Vector3 lowResDepthSize, Vector2 highResDepthSize, bool isMSAA, bool invert = False) { }
	// RVA: 0x2BC150 Offset: 0x2BA950 VA: 0x1802BC150
	private void PushReleaseCommands(CommandBuffer cmd) { }
	// RVA: 0x2BC760 Offset: 0x2BAF60 VA: 0x1802BC760
	private void PreparePropertySheet(PostProcessRenderContext context) { }
	// RVA: 0x2BC990 Offset: 0x2BB190 VA: 0x1802BC990
	private void CheckAOTexture(PostProcessRenderContext context) { }
	// RVA: 0x2BCE00 Offset: 0x2BB600 VA: 0x1802BCE00
	private void PushDebug(PostProcessRenderContext context) { }
	// RVA: 0x2BCED0 Offset: 0x2BB6D0 VA: 0x1802BCED0 Slot: 5
	public void RenderAfterOpaque(PostProcessRenderContext context) { }
	// RVA: 0x2BD510 Offset: 0x2BBD10 VA: 0x1802BD510 Slot: 6
	public void RenderAmbientOnly(PostProcessRenderContext context) { }
	// RVA: 0x2BD730 Offset: 0x2BBF30 VA: 0x1802BD730 Slot: 7
	public void CompositeAmbientOnly(PostProcessRenderContext context) { }
	// RVA: 0x2BDA30 Offset: 0x2BC230 VA: 0x1802BDA30 Slot: 8
	public void Release() { }
}

// Namespace: 
internal enum MultiScaleVO.MipLevel // TypeDefIndex: 2255
{
	// Fields
	public int value__; // 0x0
	public const MultiScaleVO.MipLevel Original = 0; // 0x0
	public const MultiScaleVO.MipLevel L1 = 1; // 0x0
	public const MultiScaleVO.MipLevel L2 = 2; // 0x0
	public const MultiScaleVO.MipLevel L3 = 3; // 0x0
	public const MultiScaleVO.MipLevel L4 = 4; // 0x0
	public const MultiScaleVO.MipLevel L5 = 5; // 0x0
	public const MultiScaleVO.MipLevel L6 = 6; // 0x0
}

// Namespace: 
private enum MultiScaleVO.Pass // TypeDefIndex: 2256
{
	// Fields
	public int value__; // 0x0
	public const MultiScaleVO.Pass DepthCopy = 0; // 0x0
	public const MultiScaleVO.Pass CompositionDeferred = 1; // 0x0
	public const MultiScaleVO.Pass CompositionForward = 2; // 0x0
	public const MultiScaleVO.Pass DebugOverlay = 3; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
internal sealed class ScalableAO : IAmbientOcclusionMethod // TypeDefIndex: 2257
{
	// Fields
	private RenderTexture m_Result; // 0x10
	private PropertySheet m_PropertySheet; // 0x18
	private AmbientOcclusion m_Settings; // 0x20
	private readonly RenderTargetIdentifier[] m_MRT; // 0x28
	private readonly int[] m_SampleCount; // 0x30

	// Methods
	// RVA: 0x55BE60 Offset: 0x55A660 VA: 0x18055BE60
	public void .ctor(AmbientOcclusion settings) { }
	// RVA: 0x32A7C0 Offset: 0x328FC0 VA: 0x18032A7C0 Slot: 4
	public DepthTextureMode GetCameraFlags() { }
	// RVA: 0x55BFC0 Offset: 0x55A7C0 VA: 0x18055BFC0
	private void DoLazyInitialization(PostProcessRenderContext context) { }
	// RVA: 0x55C2F0 Offset: 0x55AAF0 VA: 0x18055C2F0
	private void Render(PostProcessRenderContext context, CommandBuffer cmd, int occlusionSource) { }
	// RVA: 0x55CD90 Offset: 0x55B590 VA: 0x18055CD90 Slot: 5
	public void RenderAfterOpaque(PostProcessRenderContext context) { }
	// RVA: 0x55D0A0 Offset: 0x55B8A0 VA: 0x18055D0A0 Slot: 6
	public void RenderAmbientOnly(PostProcessRenderContext context) { }
	// RVA: 0x55D200 Offset: 0x55BA00 VA: 0x18055D200 Slot: 7
	public void CompositeAmbientOnly(PostProcessRenderContext context) { }
	// RVA: 0x55D500 Offset: 0x55BD00 VA: 0x18055D500 Slot: 8
	public void Release() { }
}

// Namespace: 
private enum ScalableAO.Pass // TypeDefIndex: 2258
{
	// Fields
	public int value__; // 0x0
	public const ScalableAO.Pass OcclusionEstimationForward = 0; // 0x0
	public const ScalableAO.Pass OcclusionEstimationDeferred = 1; // 0x0
	public const ScalableAO.Pass HorizontalBlurForward = 2; // 0x0
	public const ScalableAO.Pass HorizontalBlurDeferred = 3; // 0x0
	public const ScalableAO.Pass VerticalBlur = 4; // 0x0
	public const ScalableAO.Pass CompositionForward = 5; // 0x0
	public const ScalableAO.Pass CompositionDeferred = 6; // 0x0
	public const ScalableAO.Pass DebugOverlay = 7; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum ScreenSpaceReflectionPreset // TypeDefIndex: 2259
{
	// Fields
	public int value__; // 0x0
	public const ScreenSpaceReflectionPreset Lower = 0; // 0x0
	public const ScreenSpaceReflectionPreset Low = 1; // 0x0
	public const ScreenSpaceReflectionPreset Medium = 2; // 0x0
	public const ScreenSpaceReflectionPreset High = 3; // 0x0
	public const ScreenSpaceReflectionPreset Higher = 4; // 0x0
	public const ScreenSpaceReflectionPreset Ultra = 5; // 0x0
	public const ScreenSpaceReflectionPreset Overkill = 6; // 0x0
	public const ScreenSpaceReflectionPreset Custom = 7; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum ScreenSpaceReflectionResolution // TypeDefIndex: 2260
{
	// Fields
	public int value__; // 0x0
	public const ScreenSpaceReflectionResolution Downsampled = 0; // 0x0
	public const ScreenSpaceReflectionResolution FullSize = 1; // 0x0
	public const ScreenSpaceReflectionResolution Supersampled = 2; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class ScreenSpaceReflectionPresetParameter : ParameterOverride<ScreenSpaceReflectionPreset> // TypeDefIndex: 2261
{
	// Methods
	// RVA: 0x55D5B0 Offset: 0x55BDB0 VA: 0x18055D5B0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class ScreenSpaceReflectionResolutionParameter : ParameterOverride<ScreenSpaceReflectionResolution> // TypeDefIndex: 2262
{
	// Methods
	// RVA: 0x55D650 Offset: 0x55BE50 VA: 0x18055D650
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PostProcessAttribute] // RVA: 0x1011C0 Offset: 0x1005C0 VA: 0x1801011C0
[Serializable]
public sealed class ScreenSpaceReflections : PostProcessEffectSettings // TypeDefIndex: 2263
{
	// Fields
	public ScreenSpaceReflectionPresetParameter preset; // 0x30
	public IntParameter maximumIterationCount; // 0x38
	public ScreenSpaceReflectionResolutionParameter resolution; // 0x40
	public FloatParameter thickness; // 0x48
	public FloatParameter maximumMarchDistance; // 0x50
	public FloatParameter distanceFade; // 0x58
	public FloatParameter vignette; // 0x60

	// Methods
	// RVA: 0x55D6F0 Offset: 0x55BEF0 VA: 0x18055D6F0 Slot: 4
	public override bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x55D920 Offset: 0x55C120 VA: 0x18055D920
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class ScreenSpaceReflectionsRenderer : PostProcessEffectRenderer<ScreenSpaceReflections> // TypeDefIndex: 2264
{
	// Fields
	private RenderTexture m_Resolve; // 0x20
	private RenderTexture m_History; // 0x28
	private int[] m_MipIDs; // 0x30
	private readonly ScreenSpaceReflectionsRenderer.QualityPreset[] m_Presets; // 0x38

	// Methods
	// RVA: 0x2B7720 Offset: 0x2B5F20 VA: 0x1802B7720 Slot: 5
	public override DepthTextureMode GetCameraFlags() { }
	// RVA: 0x55DDE0 Offset: 0x55C5E0 VA: 0x18055DDE0
	internal void CheckRT(ref RenderTexture rt, int width, int height, FilterMode filterMode, bool useMipMap) { }
	// RVA: 0x55E1C0 Offset: 0x55C9C0 VA: 0x18055E1C0 Slot: 8
	public override void Render(PostProcessRenderContext context) { }
	// RVA: 0x55F9B0 Offset: 0x55E1B0 VA: 0x18055F9B0 Slot: 7
	public override void Release() { }
	// RVA: 0x55FA70 Offset: 0x55E270 VA: 0x18055FA70
	public void .ctor() { }
}

// Namespace: 
private class ScreenSpaceReflectionsRenderer.QualityPreset // TypeDefIndex: 2265
{
	// Fields
	public int maximumIterationCount; // 0x10
	public float thickness; // 0x14
	public ScreenSpaceReflectionResolution downsampling; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private enum ScreenSpaceReflectionsRenderer.Pass // TypeDefIndex: 2266
{
	// Fields
	public int value__; // 0x0
	public const ScreenSpaceReflectionsRenderer.Pass Test = 0; // 0x0
	public const ScreenSpaceReflectionsRenderer.Pass Resolve = 1; // 0x0
	public const ScreenSpaceReflectionsRenderer.Pass Reproject = 2; // 0x0
	public const ScreenSpaceReflectionsRenderer.Pass Composite = 3; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public sealed class SubpixelMorphologicalAntialiasing // TypeDefIndex: 2267
{
	// Fields
	public SubpixelMorphologicalAntialiasing.Quality quality; // 0x10

	// Methods
	// RVA: 0x563750 Offset: 0x561F50 VA: 0x180563750
	public bool IsSupported() { }
	// RVA: 0x5637E0 Offset: 0x561FE0 VA: 0x1805637E0
	internal void Render(PostProcessRenderContext context) { }
	// RVA: 0x563F50 Offset: 0x562750 VA: 0x180563F50
	public void .ctor() { }
}

// Namespace: 
private enum SubpixelMorphologicalAntialiasing.Pass // TypeDefIndex: 2268
{
	// Fields
	public int value__; // 0x0
	public const SubpixelMorphologicalAntialiasing.Pass EdgeDetection = 0; // 0x0
	public const SubpixelMorphologicalAntialiasing.Pass BlendWeights = 3; // 0x0
	public const SubpixelMorphologicalAntialiasing.Pass NeighborhoodBlending = 6; // 0x0
}

// Namespace: 
public enum SubpixelMorphologicalAntialiasing.Quality // TypeDefIndex: 2269
{
	// Fields
	public int value__; // 0x0
	public const SubpixelMorphologicalAntialiasing.Quality Low = 0; // 0x0
	public const SubpixelMorphologicalAntialiasing.Quality Medium = 1; // 0x0
	public const SubpixelMorphologicalAntialiasing.Quality High = 2; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public sealed class TemporalAntialiasing // TypeDefIndex: 2270
{
	// Fields
	public float jitterSpread; // 0x10
	public float sharpness; // 0x14
	public float stationaryBlending; // 0x18
	public float motionBlending; // 0x1C
	public Func<Camera, Vector2, Matrix4x4> jitteredMatrixFunc; // 0x20
	private Vector2 <jitter>k__BackingField; // 0x28
	private readonly RenderTargetIdentifier[] m_Mrt; // 0x30
	private bool m_ResetHistory; // 0x38
	private const int k_SampleCount = 8; // 0x0
	private int <sampleIndex>k__BackingField; // 0x3C
	private const int k_NumEyes = 2; // 0x0
	private const int k_NumHistoryTextures = 2; // 0x0
	private readonly RenderTexture[][] m_HistoryTextures; // 0x40
	private readonly int[] m_HistoryPingPong; // 0x48

	// Properties
	public Vector2 jitter { get; set; }
	public int sampleIndex { get; set; }

	// Methods
	// RVA: 0x5645E0 Offset: 0x562DE0 VA: 0x1805645E0
	public Vector2 get_jitter() { }
	// RVA: 0x207510 Offset: 0x205D10 VA: 0x180207510
	private void set_jitter(Vector2 value) { }
	// RVA: 0x564600 Offset: 0x562E00 VA: 0x180564600
	public int get_sampleIndex() { }
	// RVA: 0x2DBB20 Offset: 0x2DA320 VA: 0x1802DBB20
	private void set_sampleIndex(int value) { }
	// RVA: 0x564610 Offset: 0x562E10 VA: 0x180564610
	public bool IsSupported() { }
	// RVA: 0x2B7720 Offset: 0x2B5F20 VA: 0x1802B7720
	internal DepthTextureMode GetCameraFlags() { }
	// RVA: 0x29CB20 Offset: 0x29B320 VA: 0x18029CB20
	internal void ResetHistory() { }
	// RVA: 0x5646F0 Offset: 0x562EF0 VA: 0x1805646F0
	private Vector2 GenerateRandomOffset() { }
	// RVA: 0x5647C0 Offset: 0x562FC0 VA: 0x1805647C0
	public Matrix4x4 GetJitteredProjectionMatrix(Camera camera) { }
	// RVA: 0x564B00 Offset: 0x563300 VA: 0x180564B00
	public void ConfigureJitteredProjectionMatrix(PostProcessRenderContext context) { }
	// RVA: 0x564CE0 Offset: 0x5634E0 VA: 0x180564CE0
	public void ConfigureStereoJitteredProjectionMatrices(PostProcessRenderContext context) { }
	// RVA: 0x565060 Offset: 0x563860 VA: 0x180565060
	private void GenerateHistoryName(RenderTexture rt, int id, PostProcessRenderContext context) { }
	// RVA: 0x565180 Offset: 0x563980 VA: 0x180565180
	private RenderTexture CheckHistory(int id, PostProcessRenderContext context) { }
	// RVA: 0x565810 Offset: 0x564010 VA: 0x180565810
	internal void Render(PostProcessRenderContext context) { }
	// RVA: 0x565EB0 Offset: 0x5646B0 VA: 0x180565EB0
	internal void Release() { }
	// RVA: 0x566060 Offset: 0x564860 VA: 0x180566060
	public void .ctor() { }
}

// Namespace: 
private enum TemporalAntialiasing.Pass // TypeDefIndex: 2271
{
	// Fields
	public int value__; // 0x0
	public const TemporalAntialiasing.Pass SolverDilate = 0; // 0x0
	public const TemporalAntialiasing.Pass SolverNoDilate = 1; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum VignetteMode // TypeDefIndex: 2272
{
	// Fields
	public int value__; // 0x0
	public const VignetteMode Classic = 0; // 0x0
	public const VignetteMode Masked = 1; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class VignetteModeParameter : ParameterOverride<VignetteMode> // TypeDefIndex: 2273
{
	// Methods
	// RVA: 0x56A890 Offset: 0x569090 VA: 0x18056A890
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PostProcessAttribute] // RVA: 0x101270 Offset: 0x100670 VA: 0x180101270
[Serializable]
public sealed class Vignette : PostProcessEffectSettings // TypeDefIndex: 2274
{
	// Fields
	public VignetteModeParameter mode; // 0x30
	public ColorParameter color; // 0x38
	public Vector2Parameter center; // 0x40
	public FloatParameter intensity; // 0x48
	public FloatParameter smoothness; // 0x50
	public FloatParameter roundness; // 0x58
	public BoolParameter rounded; // 0x60
	public TextureParameter mask; // 0x68
	public FloatParameter opacity; // 0x70

	// Methods
	// RVA: 0x56A2D0 Offset: 0x568AD0 VA: 0x18056A2D0 Slot: 4
	public override bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x56A3E0 Offset: 0x568BE0 VA: 0x18056A3E0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
internal sealed class VignetteRenderer : PostProcessEffectRenderer<Vignette> // TypeDefIndex: 2275
{
	// Methods
	// RVA: 0x56A930 Offset: 0x569130 VA: 0x18056A930 Slot: 8
	public override void Render(PostProcessRenderContext context) { }
	// RVA: 0x56AE90 Offset: 0x569690 VA: 0x18056AE90
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class HistogramMonitor : Monitor // TypeDefIndex: 2276
{
	// Fields
	public int width; // 0x20
	public int height; // 0x24
	public HistogramMonitor.Channel channel; // 0x28
	private ComputeBuffer m_Data; // 0x30
	private const int k_NumBins = 256; // 0x0
	private const int k_ThreadGroupSizeX = 16; // 0x0
	private const int k_ThreadGroupSizeY = 16; // 0x0

	// Methods
	// RVA: 0x2B4C70 Offset: 0x2B3470 VA: 0x1802B4C70 Slot: 7
	internal override void OnDisable() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 5
	internal override bool NeedsHalfRes() { }
	// RVA: 0x2B4CA0 Offset: 0x2B34A0 VA: 0x1802B4CA0 Slot: 4
	internal override bool ShaderResourcesAvailable(PostProcessRenderContext context) { }
	// RVA: 0x2B4D50 Offset: 0x2B3550 VA: 0x1802B4D50 Slot: 8
	internal override void Render(PostProcessRenderContext context) { }
	// RVA: 0x2B5570 Offset: 0x2B3D70 VA: 0x1802B5570
	public void .ctor() { }
}

// Namespace: 
public enum HistogramMonitor.Channel // TypeDefIndex: 2277
{
	// Fields
	public int value__; // 0x0
	public const HistogramMonitor.Channel Red = 0; // 0x0
	public const HistogramMonitor.Channel Green = 1; // 0x0
	public const HistogramMonitor.Channel Blue = 2; // 0x0
	public const HistogramMonitor.Channel Master = 3; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class LightMeterMonitor : Monitor // TypeDefIndex: 2278
{
	// Fields
	public int width; // 0x20
	public int height; // 0x24
	public bool showCurves; // 0x28

	// Methods
	// RVA: 0x2B6090 Offset: 0x2B4890 VA: 0x1802B6090 Slot: 4
	internal override bool ShaderResourcesAvailable(PostProcessRenderContext context) { }
	// RVA: 0x2B61D0 Offset: 0x2B49D0 VA: 0x1802B61D0 Slot: 8
	internal override void Render(PostProcessRenderContext context) { }
	// RVA: 0x2B68E0 Offset: 0x2B50E0 VA: 0x1802B68E0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum MonitorType // TypeDefIndex: 2279
{
	// Fields
	public int value__; // 0x0
	public const MonitorType LightMeter = 0; // 0x0
	public const MonitorType Histogram = 1; // 0x0
	public const MonitorType Waveform = 2; // 0x0
	public const MonitorType Vectorscope = 3; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
public abstract class Monitor // TypeDefIndex: 2280
{
	// Fields
	private RenderTexture <output>k__BackingField; // 0x10
	internal bool requested; // 0x18

	// Properties
	public RenderTexture output { get; set; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public RenderTexture get_output() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	protected void set_output(RenderTexture value) { }
	// RVA: 0x2B6F50 Offset: 0x2B5750 VA: 0x1802B6F50
	public bool IsRequestedAndSupported(PostProcessRenderContext context) { }
	// RVA: -1 Offset: -1 Slot: 4
	internal abstract bool ShaderResourcesAvailable(PostProcessRenderContext context) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 5
	internal virtual bool NeedsHalfRes() { }
	// RVA: 0x2B7060 Offset: 0x2B5860 VA: 0x1802B7060
	protected void CheckOutput(int width, int height) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 6
	internal virtual void OnEnable() { }
	// RVA: 0x2B7360 Offset: 0x2B5B60 VA: 0x1802B7360 Slot: 7
	internal virtual void OnDisable() { }
	// RVA: -1 Offset: -1 Slot: 8
	internal abstract void Render(PostProcessRenderContext context) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class VectorscopeMonitor : Monitor // TypeDefIndex: 2281
{
	// Fields
	public int size; // 0x20
	public float exposure; // 0x24
	private ComputeBuffer m_Data; // 0x28
	private const int k_ThreadGroupSizeX = 16; // 0x0
	private const int k_ThreadGroupSizeY = 16; // 0x0

	// Methods
	// RVA: 0x5699A0 Offset: 0x5681A0 VA: 0x1805699A0 Slot: 7
	internal override void OnDisable() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 5
	internal override bool NeedsHalfRes() { }
	// RVA: 0x5699D0 Offset: 0x5681D0 VA: 0x1805699D0 Slot: 4
	internal override bool ShaderResourcesAvailable(PostProcessRenderContext context) { }
	// RVA: 0x569A80 Offset: 0x568280 VA: 0x180569A80 Slot: 8
	internal override void Render(PostProcessRenderContext context) { }
	// RVA: 0x56A2C0 Offset: 0x568AC0 VA: 0x18056A2C0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class WaveformMonitor : Monitor // TypeDefIndex: 2282
{
	// Fields
	public float exposure; // 0x20
	public int height; // 0x24
	private ComputeBuffer m_Data; // 0x28
	private const int k_ThreadGroupSize = 256; // 0x0
	private const int k_ThreadGroupSizeX = 16; // 0x0
	private const int k_ThreadGroupSizeY = 16; // 0x0

	// Methods
	// RVA: 0x5699A0 Offset: 0x5681A0 VA: 0x1805699A0 Slot: 7
	internal override void OnDisable() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 5
	internal override bool NeedsHalfRes() { }
	// RVA: 0x56AF10 Offset: 0x569710 VA: 0x18056AF10 Slot: 4
	internal override bool ShaderResourcesAvailable(PostProcessRenderContext context) { }
	// RVA: 0x56AFC0 Offset: 0x5697C0 VA: 0x18056AFC0 Slot: 8
	internal override void Render(PostProcessRenderContext context) { }
	// RVA: 0x56B9C0 Offset: 0x56A1C0 VA: 0x18056B9C0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public abstract class ParameterOverride // TypeDefIndex: 2283
{
	// Fields
	public bool overrideState; // 0x10

	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	internal abstract void Interp(ParameterOverride from, ParameterOverride to, float t) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract int GetHash() { }
	// RVA: 0x4262E0 Offset: 0x424AE0 VA: 0x1804262E0
	public T GetValue() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 6
	protected internal virtual void OnEnable() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	protected internal virtual void OnDisable() { }
	// RVA: -1 Offset: -1 Slot: 8
	internal abstract void SetValue(ParameterOverride parameter) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public class ParameterOverride<T> : ParameterOverride // TypeDefIndex: 2284
{
	// Fields
	public T value; // 0x0

	// Methods
	// RVA: 0x7A1C70 Offset: 0x7A0470 VA: 0x1807A1C70
	public void .ctor() { }
	// RVA: 0x7FB530 Offset: 0x7F9D30 VA: 0x1807FB530
	public void .ctor(T value, bool overrideState) { }
	// RVA: 0x7FB8C0 Offset: 0x7FA0C0 VA: 0x1807FB8C0 Slot: 4
	internal override void Interp(ParameterOverride from, ParameterOverride to, float t) { }
	// RVA: 0x7FB970 Offset: 0x7FA170 VA: 0x1807FB970 Slot: 9
	public virtual void Interp(T from, T to, float t) { }
	// RVA: 0x7FB9A0 Offset: 0x7FA1A0 VA: 0x1807FB9A0 Slot: 8
	internal override void SetValue(ParameterOverride parameter) { }
	// RVA: 0x7FBA20 Offset: 0x7FA220 VA: 0x1807FBA20 Slot: 5
	public override int GetHash() { }
	// RVA: 0x7FB880 Offset: 0x7FA080 VA: 0x1807FB880
	public static T op_Implicit(ParameterOverride<T> prop) { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class FloatParameter : ParameterOverride<float> // TypeDefIndex: 2285
{
	// Methods
	// RVA: 0x2B25E0 Offset: 0x2B0DE0 VA: 0x1802B25E0 Slot: 9
	public override void Interp(float from, float to, float t) { }
	// RVA: 0x2B2600 Offset: 0x2B0E00 VA: 0x1802B2600
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class IntParameter : ParameterOverride<int> // TypeDefIndex: 2286
{
	// Methods
	// RVA: 0x2B5590 Offset: 0x2B3D90 VA: 0x1802B5590 Slot: 9
	public override void Interp(int from, int to, float t) { }
	// RVA: 0x2B55C0 Offset: 0x2B3DC0 VA: 0x1802B55C0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class BoolParameter : ParameterOverride<bool> // TypeDefIndex: 2287
{
	// Methods
	// RVA: 0x2A8CB0 Offset: 0x2A74B0 VA: 0x1802A8CB0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class ColorParameter : ParameterOverride<Color> // TypeDefIndex: 2288
{
	// Methods
	// RVA: 0x2AFCD0 Offset: 0x2AE4D0 VA: 0x1802AFCD0 Slot: 9
	public override void Interp(Color from, Color to, float t) { }
	// RVA: 0x2AFD40 Offset: 0x2AE540 VA: 0x1802AFD40
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class Vector2Parameter : ParameterOverride<Vector2> // TypeDefIndex: 2289
{
	// Methods
	// RVA: 0x5697F0 Offset: 0x567FF0 VA: 0x1805697F0 Slot: 9
	public override void Interp(Vector2 from, Vector2 to, float t) { }
	// RVA: 0x569840 Offset: 0x568040 VA: 0x180569840
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class Vector4Parameter : ParameterOverride<Vector4> // TypeDefIndex: 2290
{
	// Methods
	// RVA: 0x2AFCD0 Offset: 0x2AE4D0 VA: 0x1802AFCD0 Slot: 9
	public override void Interp(Vector4 from, Vector4 to, float t) { }
	// RVA: 0x5698F0 Offset: 0x5680F0 VA: 0x1805698F0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class SplineParameter : ParameterOverride<Spline> // TypeDefIndex: 2291
{
	// Methods
	// RVA: 0x5633B0 Offset: 0x561BB0 VA: 0x1805633B0 Slot: 6
	protected internal override void OnEnable() { }
	// RVA: 0x5633D0 Offset: 0x561BD0 VA: 0x1805633D0 Slot: 8
	internal override void SetValue(ParameterOverride parameter) { }
	// RVA: 0x5634D0 Offset: 0x561CD0 VA: 0x1805634D0 Slot: 9
	public override void Interp(Spline from, Spline to, float t) { }
	// RVA: 0x5636B0 Offset: 0x561EB0 VA: 0x1805636B0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum TextureParameterDefault // TypeDefIndex: 2292
{
	// Fields
	public int value__; // 0x0
	public const TextureParameterDefault None = 0; // 0x0
	public const TextureParameterDefault Black = 1; // 0x0
	public const TextureParameterDefault White = 2; // 0x0
	public const TextureParameterDefault Transparent = 3; // 0x0
	public const TextureParameterDefault Lut2D = 4; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class TextureParameter : ParameterOverride<Texture> // TypeDefIndex: 2293
{
	// Fields
	public TextureParameterDefault defaultState; // 0x20

	// Methods
	// RVA: 0x5691E0 Offset: 0x5679E0 VA: 0x1805691E0 Slot: 9
	public override void Interp(Texture from, Texture to, float t) { }
	// RVA: 0x5696B0 Offset: 0x567EB0 VA: 0x1805696B0
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public sealed class PostProcessBundle // TypeDefIndex: 2294
{
	// Fields
	private PostProcessAttribute <attribute>k__BackingField; // 0x10
	private PostProcessEffectSettings <settings>k__BackingField; // 0x18
	private PostProcessEffectRenderer m_Renderer; // 0x20

	// Properties
	public PostProcessAttribute attribute { get; set; }
	public PostProcessEffectSettings settings { get; set; }
	internal PostProcessEffectRenderer renderer { get; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public PostProcessAttribute get_attribute() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	private void set_attribute(PostProcessAttribute value) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public PostProcessEffectSettings get_settings() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	private void set_settings(PostProcessEffectSettings value) { }
	// RVA: 0x2BDB00 Offset: 0x2BC300 VA: 0x1802BDB00
	internal PostProcessEffectRenderer get_renderer() { }
	// RVA: 0x2BDC30 Offset: 0x2BC430 VA: 0x1802BDC30
	internal void .ctor(PostProcessEffectSettings settings) { }
	// RVA: 0x2BDCF0 Offset: 0x2BC4F0 VA: 0x1802BDCF0
	internal void Release() { }
	// RVA: 0x2BDDA0 Offset: 0x2BC5A0 VA: 0x1802BDDA0
	internal void ResetHistory() { }
	// RVA: 0x427AE0 Offset: 0x4262E0 VA: 0x180427AE0
	internal T CastSettings() { }
	// RVA: 0x427A70 Offset: 0x426270 VA: 0x180427A70
	internal T CastRenderer() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum DebugOverlay // TypeDefIndex: 2295
{
	// Fields
	public int value__; // 0x0
	public const DebugOverlay None = 0; // 0x0
	public const DebugOverlay Depth = 1; // 0x0
	public const DebugOverlay Normals = 2; // 0x0
	public const DebugOverlay MotionVectors = 3; // 0x0
	public const DebugOverlay NANTracker = 4; // 0x0
	public const DebugOverlay ColorBlindnessSimulation = 5; // 0x0
	public const DebugOverlay _ = 6; // 0x0
	public const DebugOverlay AmbientOcclusion = 7; // 0x0
	public const DebugOverlay BloomBuffer = 8; // 0x0
	public const DebugOverlay BloomThreshold = 9; // 0x0
	public const DebugOverlay DepthOfField = 10; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum ColorBlindnessType // TypeDefIndex: 2296
{
	// Fields
	public int value__; // 0x0
	public const ColorBlindnessType Deuteranopia = 0; // 0x0
	public const ColorBlindnessType Protanopia = 1; // 0x0
	public const ColorBlindnessType Tritanopia = 2; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class PostProcessDebugLayer // TypeDefIndex: 2297
{
	// Fields
	public LightMeterMonitor lightMeter; // 0x10
	public HistogramMonitor histogram; // 0x18
	public WaveformMonitor waveform; // 0x20
	public VectorscopeMonitor vectorscope; // 0x28
	private Dictionary<MonitorType, Monitor> m_Monitors; // 0x30
	private int frameWidth; // 0x38
	private int frameHeight; // 0x3C
	private RenderTexture <debugOverlayTarget>k__BackingField; // 0x40
	private bool <debugOverlayActive>k__BackingField; // 0x48
	private DebugOverlay <debugOverlay>k__BackingField; // 0x4C
	public PostProcessDebugLayer.OverlaySettings overlaySettings; // 0x50

	// Properties
	public RenderTexture debugOverlayTarget { get; set; }
	public bool debugOverlayActive { get; set; }
	public DebugOverlay debugOverlay { get; set; }

	// Methods
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public RenderTexture get_debugOverlayTarget() { }
	// RVA: 0x16F140 Offset: 0x16D940 VA: 0x18016F140
	private void set_debugOverlayTarget(RenderTexture value) { }
	// RVA: 0x16F150 Offset: 0x16D950 VA: 0x18016F150
	public bool get_debugOverlayActive() { }
	// RVA: 0x16F160 Offset: 0x16D960 VA: 0x18016F160
	private void set_debugOverlayActive(bool value) { }
	// RVA: 0x2BDDC0 Offset: 0x2BC5C0 VA: 0x1802BDDC0
	public DebugOverlay get_debugOverlay() { }
	// RVA: 0x2BDDD0 Offset: 0x2BC5D0 VA: 0x1802BDDD0
	private void set_debugOverlay(DebugOverlay value) { }
	// RVA: 0x2BDDE0 Offset: 0x2BC5E0 VA: 0x1802BDDE0
	internal void OnEnable() { }
	// RVA: 0x2BE0D0 Offset: 0x2BC8D0 VA: 0x1802BE0D0
	internal void OnDisable() { }
	// RVA: 0x2BE240 Offset: 0x2BCA40 VA: 0x1802BE240
	private void DestroyDebugOverlayTarget() { }
	// RVA: 0x2BE2F0 Offset: 0x2BCAF0 VA: 0x1802BE2F0
	internal void SetFrameSize(int width, int height) { }
	// RVA: 0x2BE300 Offset: 0x2BCB00 VA: 0x1802BE300
	public void PushDebugOverlay(CommandBuffer cmd, RenderTargetIdentifier source, PropertySheet sheet, int pass) { }
	// RVA: 0x2BE750 Offset: 0x2BCF50 VA: 0x1802BE750
	internal DepthTextureMode GetCameraFlags() { }
	// RVA: 0x2BE780 Offset: 0x2BCF80 VA: 0x1802BE780
	internal void RenderMonitors(PostProcessRenderContext context) { }
	// RVA: 0x2BEDF0 Offset: 0x2BD5F0 VA: 0x1802BEDF0
	internal void RenderSpecialOverlays(PostProcessRenderContext context) { }
	// RVA: 0x2BF400 Offset: 0x2BDC00 VA: 0x1802BF400
	internal void EndFrame() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PostProcessDebugLayer.OverlaySettings // TypeDefIndex: 2298
{
	// Fields
	public bool linearDepth; // 0x10
	public float motionColorIntensity; // 0x14
	public int motionGridSize; // 0x18
	public ColorBlindnessType colorBlindnessType; // 0x1C
	public float colorBlindnessStrength; // 0x20

	// Methods
	// RVA: 0x56BD70 Offset: 0x56A570 VA: 0x18056BD70
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public abstract class PostProcessEffectRenderer // TypeDefIndex: 2299
{
	// Fields
	protected bool m_ResetHistory; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 4
	public virtual void Init() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 5
	public virtual DepthTextureMode GetCameraFlags() { }
	// RVA: 0x1FB8E0 Offset: 0x1FA0E0 VA: 0x1801FB8E0 Slot: 6
	public virtual void ResetHistory() { }
	// RVA: 0x2BF580 Offset: 0x2BDD80 VA: 0x1802BF580 Slot: 7
	public virtual void Release() { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract void Render(PostProcessRenderContext context) { }
	// RVA: -1 Offset: -1 Slot: 9
	internal abstract void SetSettings(PostProcessEffectSettings settings) { }
	// RVA: 0x1FB8E0 Offset: 0x1FA0E0 VA: 0x1801FB8E0
	protected void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public abstract class PostProcessEffectRenderer<T> : PostProcessEffectRenderer // TypeDefIndex: 2300
{
	// Fields
	private T <settings>k__BackingField; // 0x0

	// Properties
	public T settings { get; set; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public T get_settings() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	internal void set_settings(T value) { }
	// RVA: 0x7FD100 Offset: 0x7FB900 VA: 0x1807FD100 Slot: 9
	internal override void SetSettings(PostProcessEffectSettings settings) { }
	// RVA: 0x7FD1A0 Offset: 0x7FB9A0 VA: 0x1807FD1A0
	protected void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public class PostProcessEffectSettings : ScriptableObject // TypeDefIndex: 2301
{
	// Fields
	public bool active; // 0x18
	public BoolParameter enabled; // 0x20
	internal ReadOnlyCollection<ParameterOverride> parameters; // 0x28

	// Methods
	// RVA: 0x2BF5A0 Offset: 0x2BDDA0 VA: 0x1802BF5A0
	private void OnEnable() { }
	// RVA: 0x2BF9E0 Offset: 0x2BE1E0 VA: 0x1802BF9E0
	private void OnDisable() { }
	// RVA: 0x2BFBA0 Offset: 0x2BE3A0 VA: 0x1802BFBA0
	public void SetAllOverridesTo(bool state, bool excludeEnabled = True) { }
	// RVA: 0x2BFD80 Offset: 0x2BE580 VA: 0x1802BFD80 Slot: 4
	public virtual bool IsEnabledAndSupported(PostProcessRenderContext context) { }
	// RVA: 0x2BFDA0 Offset: 0x2BE5A0 VA: 0x1802BFDA0
	public int GetHash() { }
	// RVA: 0x2BFF90 Offset: 0x2BE790 VA: 0x1802BFF90
	public void .ctor() { }
	// RVA: 0x2C00C0 Offset: 0x2BE8C0 VA: 0x1802C00C0
	private ParameterOverride <OnEnable>b__3_2(FieldInfo t) { }
}

// Namespace: 
[Serializable]
private sealed class PostProcessEffectSettings.<>c // TypeDefIndex: 2302
{
	// Fields
	public static readonly PostProcessEffectSettings.<>c <>9; // 0x0
	public static Func<FieldInfo, bool> <>9__3_0; // 0x8
	public static Func<FieldInfo, int> <>9__3_1; // 0x10

	// Methods
	// RVA: 0x56BD90 Offset: 0x56A590 VA: 0x18056BD90
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x56BE10 Offset: 0x56A610 VA: 0x18056BE10
	internal bool <OnEnable>b__3_0(FieldInfo t) { }
	// RVA: 0x56BEF0 Offset: 0x56A6F0 VA: 0x18056BEF0
	internal int <OnEnable>b__3_1(FieldInfo t) { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public enum PostProcessEvent // TypeDefIndex: 2303
{
	// Fields
	public int value__; // 0x0
	public const PostProcessEvent BeforeTransparent = 0; // 0x0
	public const PostProcessEvent BeforeStack = 1; // 0x0
	public const PostProcessEvent AfterStack = 2; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
internal struct PostProcessEventComparer : IEqualityComparer<PostProcessEvent> // TypeDefIndex: 2304
{
	// Methods
	// RVA: 0xD800 Offset: 0xCC00 VA: 0x18000D800 Slot: 4
	public bool Equals(PostProcessEvent x, PostProcessEvent y) { }
	// RVA: 0xD810 Offset: 0xCC10 VA: 0x18000D810 Slot: 5
	public int GetHashCode(PostProcessEvent obj) { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[RequireComponent] // RVA: 0x101320 Offset: 0x100720 VA: 0x180101320
[DisallowMultipleComponent] // RVA: 0x101320 Offset: 0x100720 VA: 0x180101320
[ExecuteAlways] // RVA: 0x101320 Offset: 0x100720 VA: 0x180101320
public sealed class PostProcessLayer : MonoBehaviour // TypeDefIndex: 2305
{
	// Fields
	public Transform volumeTrigger; // 0x18
	public LayerMask volumeLayer; // 0x20
	public bool stopNaNPropagation; // 0x24
	public bool finalBlitToCameraTarget; // 0x25
	public PostProcessLayer.Antialiasing antialiasingMode; // 0x28
	public TemporalAntialiasing temporalAntialiasing; // 0x30
	public SubpixelMorphologicalAntialiasing subpixelMorphologicalAntialiasing; // 0x38
	public FastApproximateAntialiasing fastApproximateAntialiasing; // 0x40
	public Fog fog; // 0x48
	private Dithering dithering; // 0x50
	public PostProcessDebugLayer debugLayer; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private PostProcessResources m_Resources; // 0x60
	private PostProcessResources m_OldResources; // 0x68
	[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_ShowToolkit; // 0x70
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	[PreserveAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_ShowCustomSorter; // 0x71
	public bool breakBeforeColorGrading; // 0x72
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<PostProcessLayer.SerializedBundleRef> m_BeforeTransparentBundles; // 0x78
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<PostProcessLayer.SerializedBundleRef> m_BeforeStackBundles; // 0x80
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<PostProcessLayer.SerializedBundleRef> m_AfterStackBundles; // 0x88
	private Dictionary<PostProcessEvent, List<PostProcessLayer.SerializedBundleRef>> <sortedBundles>k__BackingField; // 0x90
	private DepthTextureMode <cameraDepthFlags>k__BackingField; // 0x98
	private bool <haveBundlesBeenInited>k__BackingField; // 0x9C
	private Dictionary<Type, PostProcessBundle> m_Bundles; // 0xA0
	private PropertySheetFactory m_PropertySheetFactory; // 0xA8
	private CommandBuffer m_LegacyCmdBufferBeforeReflections; // 0xB0
	private CommandBuffer m_LegacyCmdBufferBeforeLighting; // 0xB8
	private CommandBuffer m_LegacyCmdBufferOpaque; // 0xC0
	private CommandBuffer m_LegacyCmdBuffer; // 0xC8
	private Camera m_Camera; // 0xD0
	private PostProcessRenderContext m_CurrentContext; // 0xD8
	private LogHistogram m_LogHistogram; // 0xE0
	private bool m_SettingsUpdateNeeded; // 0xE8
	private bool m_IsRenderingInSceneView; // 0xE9
	private TargetPool m_TargetPool; // 0xF0
	private bool m_NaNKilled; // 0xF8
	private readonly List<PostProcessEffectRenderer> m_ActiveEffects; // 0x100
	private readonly List<RenderTargetIdentifier> m_Targets; // 0x108

	// Properties
	public Dictionary<PostProcessEvent, List<PostProcessLayer.SerializedBundleRef>> sortedBundles { get; set; }
	public DepthTextureMode cameraDepthFlags { get; set; }
	public bool haveBundlesBeenInited { get; set; }

	// Methods
	// RVA: 0x2C01B0 Offset: 0x2BE9B0 VA: 0x1802C01B0
	public Dictionary<PostProcessEvent, List<PostProcessLayer.SerializedBundleRef>> get_sortedBundles() { }
	// RVA: 0x2C01C0 Offset: 0x2BE9C0 VA: 0x1802C01C0
	private void set_sortedBundles(Dictionary<PostProcessEvent, List<PostProcessLayer.SerializedBundleRef>> value) { }
	// RVA: 0x2C01D0 Offset: 0x2BE9D0 VA: 0x1802C01D0
	public DepthTextureMode get_cameraDepthFlags() { }
	// RVA: 0x2C01E0 Offset: 0x2BE9E0 VA: 0x1802C01E0
	private void set_cameraDepthFlags(DepthTextureMode value) { }
	// RVA: 0x2C01F0 Offset: 0x2BE9F0 VA: 0x1802C01F0
	public bool get_haveBundlesBeenInited() { }
	// RVA: 0x2C0200 Offset: 0x2BEA00 VA: 0x1802C0200
	private void set_haveBundlesBeenInited(bool value) { }
	// RVA: 0x2C0210 Offset: 0x2BEA10 VA: 0x1802C0210
	private void OnEnable() { }
	// RVA: 0x2C0460 Offset: 0x2BEC60 VA: 0x1802C0460
	private void InitLegacy() { }
	// RVA: 0x2C0830 Offset: 0x2BF030 VA: 0x1802C0830
	private bool DynamicResolutionAllowsFinalBlitToCameraTarget() { }
	// RVA: 0x2C0940 Offset: 0x2BF140 VA: 0x1802C0940
	private void OnRenderImage(RenderTexture src, RenderTexture dst) { }
	// RVA: 0x2C0A60 Offset: 0x2BF260 VA: 0x1802C0A60
	public void Init(PostProcessResources resources) { }
	// RVA: 0x2C0BE0 Offset: 0x2BF3E0 VA: 0x1802C0BE0
	public void InitBundles() { }
	// RVA: 0x2C1100 Offset: 0x2BF900 VA: 0x1802C1100
	private void UpdateBundleSortList(List<PostProcessLayer.SerializedBundleRef> sortedList, PostProcessEvent evt) { }
	// RVA: 0x2C1680 Offset: 0x2BFE80 VA: 0x1802C1680
	private void OnDisable() { }
	// RVA: 0x2C1A00 Offset: 0x2C0200 VA: 0x1802C1A00
	private void Reset() { }
	// RVA: 0x2C1A60 Offset: 0x2C0260 VA: 0x1802C1A60
	private void OnPreCull() { }
	// RVA: 0x2C2020 Offset: 0x2C0820 VA: 0x1802C2020
	private void OnPreRender() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20
	private static bool RequiresInitialBlit(Camera camera, PostProcessRenderContext context) { }
	// RVA: 0x2C2120 Offset: 0x2C0920 VA: 0x1802C2120
	private void UpdateSrcDstForOpaqueOnly(ref int src, ref int dst, PostProcessRenderContext context, RenderTargetIdentifier cameraTarget, int opaqueOnlyEffectsRemaining) { }
	// RVA: 0x2C2340 Offset: 0x2C0B40 VA: 0x1802C2340
	private void BuildCommandBuffers() { }
	// RVA: 0x2C3510 Offset: 0x2C1D10 VA: 0x1802C3510
	private void OnPostRender() { }
	// RVA: 0x427B50 Offset: 0x426350 VA: 0x180427B50
	public PostProcessBundle GetBundle() { }
	// RVA: 0x2C3680 Offset: 0x2C1E80 VA: 0x1802C3680
	public PostProcessBundle GetBundle(Type settingsType) { }
	// RVA: 0x427C10 Offset: 0x426410 VA: 0x180427C10
	public T GetSettings() { }
	// RVA: 0x2C3720 Offset: 0x2C1F20 VA: 0x1802C3720
	public void BakeMSVOMap(CommandBuffer cmd, Camera camera, RenderTargetIdentifier destination, Nullable<RenderTargetIdentifier> depthMap, bool invert, bool isMSAA = False) { }
	// RVA: 0x2C3980 Offset: 0x2C2180 VA: 0x1802C3980
	internal void OverrideSettings(List<PostProcessEffectSettings> baseSettings, float interpFactor) { }
	// RVA: 0x2C3C00 Offset: 0x2C2400 VA: 0x1802C3C00
	private void SetLegacyCameraFlags(PostProcessRenderContext context) { }
	// RVA: 0x2C3F10 Offset: 0x2C2710 VA: 0x1802C3F10
	public void ResetHistory() { }
	// RVA: 0x2C4090 Offset: 0x2C2890 VA: 0x1802C4090
	public bool HasOpaqueOnlyEffects(PostProcessRenderContext context) { }
	// RVA: 0x2C40A0 Offset: 0x2C28A0 VA: 0x1802C40A0
	public bool HasActiveEffects(PostProcessEvent evt, PostProcessRenderContext context) { }
	// RVA: 0x2C42F0 Offset: 0x2C2AF0 VA: 0x1802C42F0
	private void SetupContext(PostProcessRenderContext context) { }
	// RVA: 0x2C4680 Offset: 0x2C2E80 VA: 0x1802C4680
	public void UpdateVolumeSystem(Camera cam, CommandBuffer cmd) { }
	// RVA: 0x2C4880 Offset: 0x2C3080 VA: 0x1802C4880
	public void RenderOpaqueOnly(PostProcessRenderContext context) { }
	// RVA: 0x2C49B0 Offset: 0x2C31B0 VA: 0x1802C49B0
	public void Render(PostProcessRenderContext context) { }
	// RVA: 0x2C5790 Offset: 0x2C3F90 VA: 0x1802C5790
	private int RenderInjectionPoint(PostProcessEvent evt, PostProcessRenderContext context, string marker, int releaseTargetAfterUse = -1) { }
	// RVA: 0x2C5A40 Offset: 0x2C4240 VA: 0x1802C5A40
	private void RenderList(List<PostProcessLayer.SerializedBundleRef> list, PostProcessRenderContext context, string marker) { }
	// RVA: 0x2C6120 Offset: 0x2C4920 VA: 0x1802C6120
	private void ApplyFlip(PostProcessRenderContext context, MaterialPropertyBlock properties) { }
	// RVA: 0x2C6280 Offset: 0x2C4A80 VA: 0x1802C6280
	private void ApplyDefaultFlip(MaterialPropertyBlock properties) { }
	// RVA: 0x2C63E0 Offset: 0x2C4BE0 VA: 0x1802C63E0
	private int RenderBuiltins(PostProcessRenderContext context, bool isFinalPass, int releaseTargetAfterUse = -1, int eye = -1) { }
	// RVA: 0x2C6EE0 Offset: 0x2C56E0 VA: 0x1802C6EE0
	private void RenderFinalPass(PostProcessRenderContext context, int releaseTargetAfterUse = -1, int eye = -1) { }
	// RVA: 0x427C50 Offset: 0x426450 VA: 0x180427C50
	private int RenderEffect(PostProcessRenderContext context, bool useTempTarget = False) { }
	// RVA: 0x2C7900 Offset: 0x2C6100 VA: 0x1802C7900
	private bool ShouldGenerateLogHistogram(PostProcessRenderContext context) { }
	// RVA: 0x2C79E0 Offset: 0x2C61E0 VA: 0x1802C79E0
	public void .ctor() { }
}

// Namespace: 
public enum PostProcessLayer.Antialiasing // TypeDefIndex: 2306
{
	// Fields
	public int value__; // 0x0
	public const PostProcessLayer.Antialiasing None = 0; // 0x0
	public const PostProcessLayer.Antialiasing FastApproximateAntialiasing = 1; // 0x0
	public const PostProcessLayer.Antialiasing SubpixelMorphologicalAntialiasing = 2; // 0x0
	public const PostProcessLayer.Antialiasing TemporalAntialiasing = 3; // 0x0
}

// Namespace: 
[Serializable]
public sealed class PostProcessLayer.SerializedBundleRef // TypeDefIndex: 2307
{
	// Fields
	public string assemblyQualifiedName; // 0x10
	public PostProcessBundle bundle; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private sealed class PostProcessLayer.<>c__DisplayClass54_0 // TypeDefIndex: 2308
{
	// Fields
	public PostProcessEvent evt; // 0x10
	public List<PostProcessBundle> effects; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x56C020 Offset: 0x56A820 VA: 0x18056C020
	internal bool <UpdateBundleSortList>b__0(KeyValuePair<Type, PostProcessBundle> kvp) { }
	// RVA: 0x56C0D0 Offset: 0x56A8D0 VA: 0x18056C0D0
	internal bool <UpdateBundleSortList>b__2(PostProcessLayer.SerializedBundleRef x) { }
}

// Namespace: 
private sealed class PostProcessLayer.<>c__DisplayClass54_1 // TypeDefIndex: 2309
{
	// Fields
	public string searchStr; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x56C1D0 Offset: 0x56A9D0 VA: 0x18056C1D0
	internal bool <UpdateBundleSortList>b__3(PostProcessBundle b) { }
}

// Namespace: 
private sealed class PostProcessLayer.<>c__DisplayClass54_2 // TypeDefIndex: 2310
{
	// Fields
	public string typeName; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x56C2B0 Offset: 0x56AAB0 VA: 0x18056C2B0
	internal bool <UpdateBundleSortList>b__4(PostProcessLayer.SerializedBundleRef b) { }
}

// Namespace: 
private sealed class PostProcessLayer.<>c__DisplayClass54_3 // TypeDefIndex: 2311
{
	// Fields
	public string typeName; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x56C1D0 Offset: 0x56A9D0 VA: 0x18056C1D0
	internal bool <UpdateBundleSortList>b__5(PostProcessBundle b) { }
}

// Namespace: 
[Serializable]
private sealed class PostProcessLayer.<>c // TypeDefIndex: 2312
{
	// Fields
	public static readonly PostProcessLayer.<>c <>9; // 0x0
	public static Func<KeyValuePair<Type, PostProcessBundle>, PostProcessBundle> <>9__54_1; // 0x8

	// Methods
	// RVA: 0x56BF20 Offset: 0x56A720 VA: 0x18056BF20
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x56BFA0 Offset: 0x56A7A0 VA: 0x18056BFA0
	internal PostProcessBundle <UpdateBundleSortList>b__54_1(KeyValuePair<Type, PostProcessBundle> kvp) { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public sealed class PostProcessManager // TypeDefIndex: 2313
{
	// Fields
	private static PostProcessManager s_Instance; // 0x0
	private readonly Dictionary<int, List<PostProcessVolume>> m_SortedVolumes; // 0x10
	private readonly List<PostProcessVolume> m_Volumes; // 0x18
	private readonly Dictionary<int, bool> m_SortNeeded; // 0x20
	private readonly List<PostProcessEffectSettings> m_BaseSettings; // 0x28
	private readonly List<Collider> m_TempColliders; // 0x30
	public readonly Dictionary<Type, PostProcessAttribute> settingsTypes; // 0x38

	// Properties
	public static PostProcessManager instance { get; }

	// Methods
	// RVA: 0x5527C0 Offset: 0x550FC0 VA: 0x1805527C0
	public static PostProcessManager get_instance() { }
	// RVA: 0x552870 Offset: 0x551070 VA: 0x180552870
	private void .ctor() { }
	// RVA: 0x552A50 Offset: 0x551250 VA: 0x180552A50
	private void CleanBaseTypes() { }
	// RVA: 0x552BF0 Offset: 0x5513F0 VA: 0x180552BF0
	private void ReloadBaseTypes() { }
	// RVA: 0x552F30 Offset: 0x551730 VA: 0x180552F30
	internal void SetLayerDirty(int layer) { }
	// RVA: 0x5530D0 Offset: 0x5518D0 VA: 0x1805530D0
	internal void UpdateVolumeLayer(PostProcessVolume volume, int prevLayer, int newLayer) { }
	// RVA: 0x553110 Offset: 0x551910 VA: 0x180553110
	private void Register(PostProcessVolume volume, int layer) { }
	// RVA: 0x5532D0 Offset: 0x551AD0 VA: 0x1805532D0
	internal void Register(PostProcessVolume volume) { }
	// RVA: 0x5533A0 Offset: 0x551BA0 VA: 0x1805533A0
	private void Unregister(PostProcessVolume volume, int layer) { }
	// RVA: 0x5535B0 Offset: 0x551DB0 VA: 0x1805535B0
	internal void Unregister(PostProcessVolume volume) { }
	// RVA: 0x553680 Offset: 0x551E80 VA: 0x180553680
	private void ReplaceData(PostProcessLayer postProcessLayer) { }
	// RVA: 0x5538C0 Offset: 0x5520C0 VA: 0x1805538C0
	internal void UpdateSettings(PostProcessLayer postProcessLayer, Camera camera) { }
	// RVA: 0x554010 Offset: 0x552810 VA: 0x180554010
	private List<PostProcessVolume> GrabVolumes(LayerMask mask) { }
	// RVA: 0x5544E0 Offset: 0x552CE0 VA: 0x1805544E0
	private static void SortByPriority(List<PostProcessVolume> volumes) { }
}

// Namespace: 
[Serializable]
private sealed class PostProcessManager.<>c // TypeDefIndex: 2314
{
	// Fields
	public static readonly PostProcessManager.<>c <>9; // 0x0
	public static Func<Type, bool> <>9__12_0; // 0x8

	// Methods
	// RVA: 0x56C360 Offset: 0x56AB60 VA: 0x18056C360
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x56C3E0 Offset: 0x56ABE0 VA: 0x18056C3E0
	internal bool <ReloadBaseTypes>b__12_0(Type t) { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public sealed class PostProcessProfile : ScriptableObject // TypeDefIndex: 2315
{
	// Fields
	public List<PostProcessEffectSettings> settings; // 0x18
	public bool isDirty; // 0x20

	// Methods
	// RVA: 0x554610 Offset: 0x552E10 VA: 0x180554610
	private void OnEnable() { }
	// RVA: 0x427EF0 Offset: 0x4266F0 VA: 0x180427EF0
	public T AddSettings() { }
	// RVA: 0x554740 Offset: 0x552F40 VA: 0x180554740
	public PostProcessEffectSettings AddSettings(Type type) { }
	// RVA: 0x554940 Offset: 0x553140 VA: 0x180554940
	public PostProcessEffectSettings AddSettings(PostProcessEffectSettings effect) { }
	// RVA: 0x428370 Offset: 0x426B70 VA: 0x180428370
	public void RemoveSettings() { }
	// RVA: 0x554A40 Offset: 0x553240 VA: 0x180554A40
	public void RemoveSettings(Type type) { }
	// RVA: 0x4282B0 Offset: 0x426AB0 VA: 0x1804282B0
	public bool HasSettings() { }
	// RVA: 0x554BC0 Offset: 0x5533C0 VA: 0x180554BC0
	public bool HasSettings(Type type) { }
	// RVA: 0x428000 Offset: 0x426800 VA: 0x180428000
	public T GetSetting() { }
	// RVA: 0x428580 Offset: 0x426D80 VA: 0x180428580
	public bool TryGetSettings(out T outSetting) { }
	// RVA: 0x554D70 Offset: 0x553570 VA: 0x180554D70
	public void .ctor() { }
}

// Namespace: 
[Serializable]
private sealed class PostProcessProfile.<>c // TypeDefIndex: 2316
{
	// Fields
	public static readonly PostProcessProfile.<>c <>9; // 0x0
	public static Predicate<PostProcessEffectSettings> <>9__2_0; // 0x8

	// Methods
	// RVA: 0x56C4D0 Offset: 0x56ACD0 VA: 0x18056C4D0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x56C550 Offset: 0x56AD50 VA: 0x18056C550
	internal bool <OnEnable>b__2_0(PostProcessEffectSettings x) { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public sealed class PostProcessRenderContext // TypeDefIndex: 2317
{
	// Fields
	private Camera m_Camera; // 0x10
	private CommandBuffer <command>k__BackingField; // 0x18
	private RenderTargetIdentifier <source>k__BackingField; // 0x20
	private RenderTargetIdentifier <destination>k__BackingField; // 0x48
	private RenderTextureFormat <sourceFormat>k__BackingField; // 0x70
	private bool <flip>k__BackingField; // 0x74
	private PostProcessResources <resources>k__BackingField; // 0x78
	private PropertySheetFactory <propertySheets>k__BackingField; // 0x80
	private Dictionary<string, object> <userData>k__BackingField; // 0x88
	private PostProcessDebugLayer <debugLayer>k__BackingField; // 0x90
	private int <width>k__BackingField; // 0x98
	private int <height>k__BackingField; // 0x9C
	private bool <stereoActive>k__BackingField; // 0xA0
	private int <xrActiveEye>k__BackingField; // 0xA4
	private int <numberOfEyes>k__BackingField; // 0xA8
	private PostProcessRenderContext.StereoRenderingMode <stereoRenderingMode>k__BackingField; // 0xAC
	private int <screenWidth>k__BackingField; // 0xB0
	private int <screenHeight>k__BackingField; // 0xB4
	private bool <isSceneView>k__BackingField; // 0xB8
	private PostProcessLayer.Antialiasing <antialiasing>k__BackingField; // 0xBC
	private TemporalAntialiasing <temporalAntialiasing>k__BackingField; // 0xC0
	internal PropertySheet uberSheet; // 0xC8
	internal Texture autoExposureTexture; // 0xD0
	internal LogHistogram logHistogram; // 0xD8
	internal Texture logLut; // 0xE0
	internal AutoExposure autoExposure; // 0xE8
	internal int bloomBufferNameID; // 0xF0
	internal bool physicalCamera; // 0xF4
	private RenderTextureDescriptor m_sourceDescriptor; // 0xF8

	// Properties
	public Camera camera { get; set; }
	public CommandBuffer command { get; set; }
	public RenderTargetIdentifier source { get; set; }
	public RenderTargetIdentifier destination { get; set; }
	public RenderTextureFormat sourceFormat { get; set; }
	public bool flip { get; set; }
	public PostProcessResources resources { get; set; }
	public PropertySheetFactory propertySheets { get; set; }
	public Dictionary<string, object> userData { get; set; }
	public PostProcessDebugLayer debugLayer { get; set; }
	public int width { get; set; }
	public int height { get; set; }
	public bool stereoActive { get; set; }
	public int xrActiveEye { get; set; }
	public int numberOfEyes { get; set; }
	public PostProcessRenderContext.StereoRenderingMode stereoRenderingMode { get; set; }
	public int screenWidth { get; set; }
	public int screenHeight { get; set; }
	public bool isSceneView { get; set; }
	public PostProcessLayer.Antialiasing antialiasing { get; set; }
	public TemporalAntialiasing temporalAntialiasing { get; set; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public Camera get_camera() { }
	// RVA: 0x554E10 Offset: 0x553610 VA: 0x180554E10
	public void set_camera(Camera value) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public CommandBuffer get_command() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_command(CommandBuffer value) { }
	// RVA: 0x555200 Offset: 0x553A00 VA: 0x180555200
	public RenderTargetIdentifier get_source() { }
	// RVA: 0x555220 Offset: 0x553A20 VA: 0x180555220
	public void set_source(RenderTargetIdentifier value) { }
	// RVA: 0x555240 Offset: 0x553A40 VA: 0x180555240
	public RenderTargetIdentifier get_destination() { }
	// RVA: 0x555260 Offset: 0x553A60 VA: 0x180555260
	public void set_destination(RenderTargetIdentifier value) { }
	// RVA: 0x212BD0 Offset: 0x2113D0 VA: 0x180212BD0
	public RenderTextureFormat get_sourceFormat() { }
	// RVA: 0x555280 Offset: 0x553A80 VA: 0x180555280
	public void set_sourceFormat(RenderTextureFormat value) { }
	// RVA: 0x555290 Offset: 0x553A90 VA: 0x180555290
	public bool get_flip() { }
	// RVA: 0x5552A0 Offset: 0x553AA0 VA: 0x1805552A0
	public void set_flip(bool value) { }
	// RVA: 0x34A220 Offset: 0x348A20 VA: 0x18034A220
	public PostProcessResources get_resources() { }
	// RVA: 0x34A230 Offset: 0x348A30 VA: 0x18034A230
	internal void set_resources(PostProcessResources value) { }
	// RVA: 0x5552B0 Offset: 0x553AB0 VA: 0x1805552B0
	public PropertySheetFactory get_propertySheets() { }
	// RVA: 0x5552C0 Offset: 0x553AC0 VA: 0x1805552C0
	internal void set_propertySheets(PropertySheetFactory value) { }
	// RVA: 0x262A60 Offset: 0x261260 VA: 0x180262A60
	public Dictionary<string, object> get_userData() { }
	// RVA: 0x3CE680 Offset: 0x3CCE80 VA: 0x1803CE680
	private void set_userData(Dictionary<string, object> value) { }
	// RVA: 0x2C01B0 Offset: 0x2BE9B0 VA: 0x1802C01B0
	public PostProcessDebugLayer get_debugLayer() { }
	// RVA: 0x2C01C0 Offset: 0x2BE9C0 VA: 0x1802C01C0
	internal void set_debugLayer(PostProcessDebugLayer value) { }
	// RVA: 0x2C01D0 Offset: 0x2BE9D0 VA: 0x1802C01D0
	public int get_width() { }
	// RVA: 0x2C01E0 Offset: 0x2BE9E0 VA: 0x1802C01E0
	private void set_width(int value) { }
	// RVA: 0x5552D0 Offset: 0x553AD0 VA: 0x1805552D0
	public int get_height() { }
	// RVA: 0x5552E0 Offset: 0x553AE0 VA: 0x1805552E0
	private void set_height(int value) { }
	// RVA: 0x5552F0 Offset: 0x553AF0 VA: 0x1805552F0
	public bool get_stereoActive() { }
	// RVA: 0x555300 Offset: 0x553B00 VA: 0x180555300
	private void set_stereoActive(bool value) { }
	// RVA: 0x555310 Offset: 0x553B10 VA: 0x180555310
	public int get_xrActiveEye() { }
	// RVA: 0x555320 Offset: 0x553B20 VA: 0x180555320
	private void set_xrActiveEye(int value) { }
	// RVA: 0x555330 Offset: 0x553B30 VA: 0x180555330
	public int get_numberOfEyes() { }
	// RVA: 0x555340 Offset: 0x553B40 VA: 0x180555340
	private void set_numberOfEyes(int value) { }
	// RVA: 0x555350 Offset: 0x553B50 VA: 0x180555350
	public PostProcessRenderContext.StereoRenderingMode get_stereoRenderingMode() { }
	// RVA: 0x555360 Offset: 0x553B60 VA: 0x180555360
	private void set_stereoRenderingMode(PostProcessRenderContext.StereoRenderingMode value) { }
	// RVA: 0x555370 Offset: 0x553B70 VA: 0x180555370
	public int get_screenWidth() { }
	// RVA: 0x555380 Offset: 0x553B80 VA: 0x180555380
	private void set_screenWidth(int value) { }
	// RVA: 0x555390 Offset: 0x553B90 VA: 0x180555390
	public int get_screenHeight() { }
	// RVA: 0x5553A0 Offset: 0x553BA0 VA: 0x1805553A0
	private void set_screenHeight(int value) { }
	// RVA: 0x2937C0 Offset: 0x291FC0 VA: 0x1802937C0
	public bool get_isSceneView() { }
	// RVA: 0x5553B0 Offset: 0x553BB0 VA: 0x1805553B0
	internal void set_isSceneView(bool value) { }
	// RVA: 0x5553C0 Offset: 0x553BC0 VA: 0x1805553C0
	public PostProcessLayer.Antialiasing get_antialiasing() { }
	// RVA: 0x5553D0 Offset: 0x553BD0 VA: 0x1805553D0
	internal void set_antialiasing(PostProcessLayer.Antialiasing value) { }
	// RVA: 0x2937A0 Offset: 0x291FA0 VA: 0x1802937A0
	public TemporalAntialiasing get_temporalAntialiasing() { }
	// RVA: 0x2937B0 Offset: 0x291FB0 VA: 0x1802937B0
	internal void set_temporalAntialiasing(TemporalAntialiasing value) { }
	// RVA: 0x5553E0 Offset: 0x553BE0 VA: 0x1805553E0
	public void Reset() { }
	// RVA: 0x5555D0 Offset: 0x553DD0 VA: 0x1805555D0
	public bool IsTemporalAntialiasingActive() { }
	// RVA: 0x5556E0 Offset: 0x553EE0 VA: 0x1805556E0
	public bool IsDebugOverlayEnabled(DebugOverlay overlay) { }
	// RVA: 0x555710 Offset: 0x553F10 VA: 0x180555710
	public void PushDebugOverlay(CommandBuffer cmd, RenderTargetIdentifier source, PropertySheet sheet, int pass) { }
	// RVA: 0x555770 Offset: 0x553F70 VA: 0x180555770
	internal RenderTextureDescriptor GetDescriptor(int depthBufferBits = 0, RenderTextureFormat colorFormat = 7, RenderTextureReadWrite readWrite = 0) { }
	// RVA: 0x555960 Offset: 0x554160 VA: 0x180555960
	public void GetScreenSpaceTemporaryRT(CommandBuffer cmd, int nameID, int depthBufferBits = 0, RenderTextureFormat colorFormat = 7, RenderTextureReadWrite readWrite = 0, FilterMode filter = 1, int widthOverride = 0, int heightOverride = 0) { }
	// RVA: 0x555AA0 Offset: 0x5542A0 VA: 0x180555AA0
	public RenderTexture GetScreenSpaceTemporaryRT(int depthBufferBits = 0, RenderTextureFormat colorFormat = 7, RenderTextureReadWrite readWrite = 0, int widthOverride = 0, int heightOverride = 0) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
public enum PostProcessRenderContext.StereoRenderingMode // TypeDefIndex: 2318
{
	// Fields
	public int value__; // 0x0
	public const PostProcessRenderContext.StereoRenderingMode MultiPass = 0; // 0x0
	public const PostProcessRenderContext.StereoRenderingMode SinglePass = 1; // 0x0
	public const PostProcessRenderContext.StereoRenderingMode SinglePassInstanced = 2; // 0x0
	public const PostProcessRenderContext.StereoRenderingMode SinglePassMultiview = 3; // 0x0
}

// Namespace: UnityEngine.Rendering.PostProcessing
public sealed class PostProcessResources : ScriptableObject // TypeDefIndex: 2319
{
	// Fields
	public Texture2D[] blueNoise64; // 0x18
	public Texture2D[] blueNoise256; // 0x20
	public PostProcessResources.SMAALuts smaaLuts; // 0x28
	public PostProcessResources.Shaders shaders; // 0x30
	public PostProcessResources.ComputeShaders computeShaders; // 0x38

	// Methods
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public sealed class PostProcessResources.Shaders // TypeDefIndex: 2320
{
	// Fields
	public Shader bloom; // 0x10
	public Shader copy; // 0x18
	public Shader copyStd; // 0x20
	public Shader copyStdFromTexArray; // 0x28
	public Shader copyStdFromDoubleWide; // 0x30
	public Shader discardAlpha; // 0x38
	public Shader depthOfField; // 0x40
	public Shader finalPass; // 0x48
	public Shader grainBaker; // 0x50
	public Shader motionBlur; // 0x58
	public Shader temporalAntialiasing; // 0x60
	public Shader subpixelMorphologicalAntialiasing; // 0x68
	public Shader texture2dLerp; // 0x70
	public Shader uber; // 0x78
	public Shader lut2DBaker; // 0x80
	public Shader lightMeter; // 0x88
	public Shader gammaHistogram; // 0x90
	public Shader waveform; // 0x98
	public Shader vectorscope; // 0xA0
	public Shader debugOverlays; // 0xA8
	public Shader deferredFog; // 0xB0
	public Shader scalableAO; // 0xB8
	public Shader multiScaleAO; // 0xC0
	public Shader screenSpaceReflections; // 0xC8

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public sealed class PostProcessResources.ComputeShaders // TypeDefIndex: 2321
{
	// Fields
	public ComputeShader autoExposure; // 0x10
	public ComputeShader exposureHistogram; // 0x18
	public ComputeShader lut3DBaker; // 0x20
	public ComputeShader texture3dLerp; // 0x28
	public ComputeShader gammaHistogram; // 0x30
	public ComputeShader waveform; // 0x38
	public ComputeShader vectorscope; // 0x40
	public ComputeShader multiScaleAODownsample1; // 0x48
	public ComputeShader multiScaleAODownsample2; // 0x50
	public ComputeShader multiScaleAORender; // 0x58
	public ComputeShader multiScaleAOUpsample; // 0x60
	public ComputeShader gaussianDownsample; // 0x68

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public sealed class PostProcessResources.SMAALuts // TypeDefIndex: 2322
{
	// Fields
	public Texture2D area; // 0x10
	public Texture2D search; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public sealed class PostProcessVolume : MonoBehaviour // TypeDefIndex: 2323
{
	// Fields
	public PostProcessProfile sharedProfile; // 0x18
	public bool isGlobal; // 0x20
	public float blendDistance; // 0x24
	public float weight; // 0x28
	public float priority; // 0x2C
	private int m_PreviousLayer; // 0x30
	private float m_PreviousPriority; // 0x34
	private List<Collider> m_TempColliders; // 0x38
	private PostProcessProfile m_InternalProfile; // 0x40

	// Properties
	public PostProcessProfile profile { get; set; }
	internal PostProcessProfile profileRef { get; }

	// Methods
	// RVA: 0x555BE0 Offset: 0x5543E0 VA: 0x180555BE0
	public PostProcessProfile get_profile() { }
	// RVA: 0x16F140 Offset: 0x16D940 VA: 0x18016F140
	public void set_profile(PostProcessProfile value) { }
	// RVA: 0x555E00 Offset: 0x554600 VA: 0x180555E00
	internal PostProcessProfile get_profileRef() { }
	// RVA: 0x555EC0 Offset: 0x5546C0 VA: 0x180555EC0
	public bool HasInstantiatedProfile() { }
	// RVA: 0x555F60 Offset: 0x554760 VA: 0x180555F60
	private void OnEnable() { }
	// RVA: 0x556160 Offset: 0x554960 VA: 0x180556160
	private void OnDisable() { }
	// RVA: 0x556240 Offset: 0x554A40 VA: 0x180556240
	private void Update() { }
	// RVA: 0x556370 Offset: 0x554B70 VA: 0x180556370
	private void OnDrawGizmos() { }
	// RVA: 0x557110 Offset: 0x555910 VA: 0x180557110
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public static class ColorUtilities // TypeDefIndex: 2324
{
	// Methods
	// RVA: 0x2AFDF0 Offset: 0x2AE5F0 VA: 0x1802AFDF0
	public static float StandardIlluminantY(float x) { }
	// RVA: 0x2AFE20 Offset: 0x2AE620 VA: 0x1802AFE20
	public static Vector3 CIExyToLMS(float x, float y) { }
	// RVA: 0x2AFEB0 Offset: 0x2AE6B0 VA: 0x1802AFEB0
	public static Vector3 ComputeColorBalance(float temperature, float tint) { }
	// RVA: 0x2AFFE0 Offset: 0x2AE7E0 VA: 0x1802AFFE0
	public static Vector3 ColorToLift(Vector4 color) { }
	// RVA: 0x2B0050 Offset: 0x2AE850 VA: 0x1802B0050
	public static Vector3 ColorToInverseGamma(Vector4 color) { }
	// RVA: 0x2B01D0 Offset: 0x2AE9D0 VA: 0x1802B01D0
	public static Vector3 ColorToGain(Vector4 color) { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public class HableCurve // TypeDefIndex: 2325
{
	// Fields
	private float <whitePoint>k__BackingField; // 0x10
	private float <inverseWhitePoint>k__BackingField; // 0x14
	private float <x0>k__BackingField; // 0x18
	private float <x1>k__BackingField; // 0x1C
	private readonly HableCurve.Segment[] m_Segments; // 0x20
	public readonly HableCurve.Uniforms uniforms; // 0x28

	// Properties
	set; }
	public float inverseWhitePoint { get; set; }
	internal float x0 { get; set; }
	internal float x1 { get; set; }

	// Methods
	// RVA: 0x2B3E10 Offset: 0x2B2610 VA: 0x1802B3E10
	private void set_whitePoint(float value) { }
	// RVA: 0x2B3E20 Offset: 0x2B2620 VA: 0x1802B3E20
	public float get_inverseWhitePoint() { }
	// RVA: 0x2B3E30 Offset: 0x2B2630 VA: 0x1802B3E30
	private void set_inverseWhitePoint(float value) { }
	// RVA: 0x2B3E40 Offset: 0x2B2640 VA: 0x1802B3E40
	internal float get_x0() { }
	// RVA: 0x2B3E50 Offset: 0x2B2650 VA: 0x1802B3E50
	private void set_x0(float value) { }
	// RVA: 0x1FBA30 Offset: 0x1FA230 VA: 0x1801FBA30
	internal float get_x1() { }
	// RVA: 0x1FED00 Offset: 0x1FD500 VA: 0x1801FED00
	private void set_x1(float value) { }
	// RVA: 0x2B3E60 Offset: 0x2B2660 VA: 0x1802B3E60
	public void .ctor() { }
	// RVA: 0x2B4000 Offset: 0x2B2800 VA: 0x1802B4000
	public void Init(float toeStrength, float toeLength, float shoulderStrength, float shoulderLength, float shoulderAngle, float gamma) { }
	// RVA: 0x2B4280 Offset: 0x2B2A80 VA: 0x1802B4280
	private void InitSegments(HableCurve.DirectParams srcParams) { }
	// RVA: 0x2B49F0 Offset: 0x2B31F0 VA: 0x1802B49F0
	private void SolveAB(out float lnA, out float B, float x0, float y0, float m) { }
	// RVA: 0x2B4AF0 Offset: 0x2B32F0 VA: 0x1802B4AF0
	private void AsSlopeIntercept(out float m, out float b, float x0, float x1, float y0, float y1) { }
	// RVA: 0x2B4B50 Offset: 0x2B3350 VA: 0x1802B4B50
	private float EvalDerivativeLinearGamma(float m, float b, float g, float x) { }
}

// Namespace: 
private class HableCurve.Segment // TypeDefIndex: 2326
{
	// Fields
	public float offsetX; // 0x10
	public float offsetY; // 0x14
	public float scaleX; // 0x18
	public float scaleY; // 0x1C
	public float lnA; // 0x20
	public float B; // 0x24

	// Methods
	// RVA: 0x56B9D0 Offset: 0x56A1D0 VA: 0x18056B9D0
	public float Eval(float x) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private struct HableCurve.DirectParams // TypeDefIndex: 2327
{
	// Fields
	internal float x0; // 0x0
	internal float y0; // 0x4
	internal float x1; // 0x8
	internal float y1; // 0xC
	internal float W; // 0x10
	internal float overshootX; // 0x14
	internal float overshootY; // 0x18
	internal float gamma; // 0x1C
}

// Namespace: 
public class HableCurve.Uniforms // TypeDefIndex: 2328
{
	// Fields
	private HableCurve parent; // 0x10

	// Properties
	public Vector4 curve { get; }
	public Vector4 toeSegmentA { get; }
	public Vector4 toeSegmentB { get; }
	public Vector4 midSegmentA { get; }
	public Vector4 midSegmentB { get; }
	public Vector4 shoSegmentA { get; }
	public Vector4 shoSegmentB { get; }

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	internal void .ctor(HableCurve parent) { }
	// RVA: 0x56BAC0 Offset: 0x56A2C0 VA: 0x18056BAC0
	public Vector4 get_curve() { }
	// RVA: 0x56BB00 Offset: 0x56A300 VA: 0x18056BB00
	public Vector4 get_toeSegmentA() { }
	// RVA: 0x56BB70 Offset: 0x56A370 VA: 0x18056BB70
	public Vector4 get_toeSegmentB() { }
	// RVA: 0x56BBD0 Offset: 0x56A3D0 VA: 0x18056BBD0
	public Vector4 get_midSegmentA() { }
	// RVA: 0x56BC40 Offset: 0x56A440 VA: 0x18056BC40
	public Vector4 get_midSegmentB() { }
	// RVA: 0x56BCA0 Offset: 0x56A4A0 VA: 0x18056BCA0
	public Vector4 get_shoSegmentA() { }
	// RVA: 0x56BD10 Offset: 0x56A510 VA: 0x18056BD10
	public Vector4 get_shoSegmentB() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public static class HaltonSeq // TypeDefIndex: 2329
{
	// Methods
	// RVA: 0x2B4C30 Offset: 0x2B3430 VA: 0x1802B4C30
	public static float Get(int index, int radix) { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
internal sealed class LogHistogram // TypeDefIndex: 2330
{
	// Fields
	public const int rangeMin = -9; // 0x0
	public const int rangeMax = 9; // 0x0
	private const int k_Bins = 128; // 0x0
	private ComputeBuffer <data>k__BackingField; // 0x10

	// Properties
	public ComputeBuffer data { get; set; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public ComputeBuffer get_data() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	private void set_data(ComputeBuffer value) { }
	// RVA: 0x2B6900 Offset: 0x2B5100 VA: 0x1802B6900
	public void Generate(PostProcessRenderContext context) { }
	// RVA: 0x2B6ED0 Offset: 0x2B56D0 VA: 0x1802B6ED0
	public Vector4 GetHistogramScaleOffsetRes(PostProcessRenderContext context) { }
	// RVA: 0x2B6F20 Offset: 0x2B5720 VA: 0x1802B6F20
	public void Release() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public sealed class PropertySheet // TypeDefIndex: 2331
{
	// Fields
	private MaterialPropertyBlock <properties>k__BackingField; // 0x10
	private Material <material>k__BackingField; // 0x18

	// Properties
	public MaterialPropertyBlock properties { get; set; }
	internal Material material { get; set; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public MaterialPropertyBlock get_properties() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	private void set_properties(MaterialPropertyBlock value) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	internal Material get_material() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	private void set_material(Material value) { }
	// RVA: 0x557120 Offset: 0x555920 VA: 0x180557120
	internal void .ctor(Material material) { }
	// RVA: 0x5571F0 Offset: 0x5559F0 VA: 0x1805571F0
	public void ClearKeywords() { }
	// RVA: 0x557250 Offset: 0x555A50 VA: 0x180557250
	public void EnableKeyword(string keyword) { }
	// RVA: 0x5572C0 Offset: 0x555AC0 VA: 0x1805572C0
	internal void Release() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public sealed class PropertySheetFactory // TypeDefIndex: 2332
{
	// Fields
	private readonly Dictionary<Shader, PropertySheet> m_Sheets; // 0x10

	// Methods
	// RVA: 0x557370 Offset: 0x555B70 VA: 0x180557370
	public void .ctor() { }
	// RVA: 0x557430 Offset: 0x555C30 VA: 0x180557430
	public PropertySheet Get(Shader shader) { }
	// RVA: 0x5576D0 Offset: 0x555ED0 VA: 0x1805576D0
	public void Release() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public static class RuntimeUtilities // TypeDefIndex: 2333
{
	// Fields
	private static Texture2D m_WhiteTexture; // 0x0
	private static Texture2D m_BlackTexture; // 0x8
	private static Dictionary<int, Texture2D> m_LutStrips; // 0x10
	private static PostProcessResources s_Resources; // 0x18
	private static Mesh s_FullscreenTriangle; // 0x20
	private static Material s_CopyStdMaterial; // 0x28
	private static Material s_CopyStdFromDoubleWideMaterial; // 0x30
	private static Material s_CopyMaterial; // 0x38
	private static Material s_CopyFromTexArrayMaterial; // 0x40
	private static PropertySheet s_CopySheet; // 0x48
	private static PropertySheet s_CopyFromTexArraySheet; // 0x50
	private static IEnumerable<Type> m_AssemblyTypes; // 0x58

	// Properties
	public static Texture2D whiteTexture { get; }
	public static Texture2D blackTexture { get; }
	public static Mesh fullscreenTriangle { get; }
	public static Material copyStdMaterial { get; }
	public static Material copyStdFromDoubleWideMaterial { get; }
	public static Material copyMaterial { get; }
	public static Material copyFromTexArrayMaterial { get; }
	public static PropertySheet copySheet { get; }
	public static PropertySheet copyFromTexArraySheet { get; }
	public static bool scriptableRenderPipelineActive { get; }
	public static bool isSinglePassStereoEnabled { get; }
	public static bool isVREnabled { get; }
	public static bool isAndroidOpenGL { get; }
	public static RenderTextureFormat defaultHDRRenderTextureFormat { get; }
	public static bool isLinearColorSpace { get; }

	// Methods
	// RVA: 0x5578F0 Offset: 0x5560F0 VA: 0x1805578F0
	public static Texture2D get_whiteTexture() { }
	// RVA: 0x557AD0 Offset: 0x5562D0 VA: 0x180557AD0
	public static Texture2D get_blackTexture() { }
	// RVA: 0x557CC0 Offset: 0x5564C0 VA: 0x180557CC0
	public static Texture2D GetLutStrip(int size) { }
	// RVA: 0x558140 Offset: 0x556940 VA: 0x180558140
	public static Mesh get_fullscreenTriangle() { }
	// RVA: 0x5584C0 Offset: 0x556CC0 VA: 0x1805584C0
	public static Material get_copyStdMaterial() { }
	// RVA: 0x5586B0 Offset: 0x556EB0 VA: 0x1805586B0
	public static Material get_copyStdFromDoubleWideMaterial() { }
	// RVA: 0x5588A0 Offset: 0x5570A0 VA: 0x1805588A0
	public static Material get_copyMaterial() { }
	// RVA: 0x558A90 Offset: 0x557290 VA: 0x180558A90
	public static Material get_copyFromTexArrayMaterial() { }
	// RVA: 0x558C80 Offset: 0x557480 VA: 0x180558C80
	public static PropertySheet get_copySheet() { }
	// RVA: 0x558DC0 Offset: 0x5575C0 VA: 0x180558DC0
	public static PropertySheet get_copyFromTexArraySheet() { }
	// RVA: 0x558F00 Offset: 0x557700 VA: 0x180558F00
	internal static void UpdateResources(PostProcessResources resources) { }
	// RVA: 0x559070 Offset: 0x557870 VA: 0x180559070
	public static void SetRenderTargetWithLoadStoreAction(CommandBuffer cmd, RenderTargetIdentifier rt, RenderBufferLoadAction loadAction, RenderBufferStoreAction storeAction) { }
	// RVA: 0x5590C0 Offset: 0x5578C0 VA: 0x1805590C0
	public static void BlitFullscreenTriangle(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, bool clear = False, Nullable<Rect> viewport) { }
	// RVA: 0x5593D0 Offset: 0x557BD0 VA: 0x1805593D0
	public static void BlitFullscreenTriangle(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, PropertySheet propertySheet, int pass, RenderBufferLoadAction loadAction, Nullable<Rect> viewport) { }
	// RVA: 0x5596F0 Offset: 0x557EF0 VA: 0x1805596F0
	public static void BlitFullscreenTriangle(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, PropertySheet propertySheet, int pass, bool clear = False, Nullable<Rect> viewport) { }
	// RVA: 0x559850 Offset: 0x558050 VA: 0x180559850
	public static void BlitFullscreenTriangleFromDoubleWide(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material material, int pass, int eye) { }
	// RVA: 0x559A60 Offset: 0x558260 VA: 0x180559A60
	public static void BlitFullscreenTriangleToDoubleWide(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, PropertySheet propertySheet, int pass, int eye) { }
	// RVA: 0x559CC0 Offset: 0x5584C0 VA: 0x180559CC0
	public static void BlitFullscreenTriangleFromTexArray(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, PropertySheet propertySheet, int pass, bool clear = False, int depthSlice = -1) { }
	// RVA: 0x559FB0 Offset: 0x5587B0 VA: 0x180559FB0
	public static void BlitFullscreenTriangleToTexArray(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, PropertySheet propertySheet, int pass, bool clear = False, int depthSlice = -1) { }
	// RVA: 0x55A290 Offset: 0x558A90 VA: 0x18055A290
	public static void BlitFullscreenTriangle(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier[] destinations, RenderTargetIdentifier depth, PropertySheet propertySheet, int pass, bool clear = False, Nullable<Rect> viewport) { }
	// RVA: 0x55A570 Offset: 0x558D70 VA: 0x18055A570
	public static void BuiltinBlit(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material mat, int pass = 0) { }
	// RVA: 0x55A7A0 Offset: 0x558FA0 VA: 0x18055A7A0
	public static void CopyTexture(CommandBuffer cmd, RenderTargetIdentifier source, RenderTargetIdentifier destination) { }
	// RVA: 0x55AA30 Offset: 0x559230 VA: 0x18055AA30
	public static bool get_scriptableRenderPipelineActive() { }
	// RVA: 0x55AB90 Offset: 0x559390 VA: 0x18055AB90
	public static bool get_isSinglePassStereoEnabled() { }
	// RVA: 0x55AC00 Offset: 0x559400 VA: 0x18055AC00
	public static bool get_isVREnabled() { }
	// RVA: 0x55AC50 Offset: 0x559450 VA: 0x18055AC50
	public static bool get_isAndroidOpenGL() { }
	// RVA: 0x55ACF0 Offset: 0x5594F0 VA: 0x18055ACF0
	public static RenderTextureFormat get_defaultHDRRenderTextureFormat() { }
	// RVA: 0x55AD00 Offset: 0x559500 VA: 0x18055AD00
	public static bool isFloatingPointFormat(RenderTextureFormat format) { }
	// RVA: 0x55AD20 Offset: 0x559520 VA: 0x18055AD20
	public static void Destroy(Object obj) { }
	// RVA: 0x55ADF0 Offset: 0x5595F0 VA: 0x18055ADF0
	public static bool get_isLinearColorSpace() { }
	// RVA: 0x55AE40 Offset: 0x559640 VA: 0x18055AE40
	public static bool IsResolvedDepthAvailable(Camera camera) { }
	// RVA: 0x429040 Offset: 0x427840 VA: 0x180429040
	public static void CreateIfNull(ref T obj) { }
	// RVA: 0x55AF20 Offset: 0x559720 VA: 0x18055AF20
	public static float Exp2(float x) { }
	// RVA: 0x55AFC0 Offset: 0x5597C0 VA: 0x18055AFC0
	public static Matrix4x4 GetJitteredPerspectiveProjectionMatrix(Camera camera, Vector2 offset) { }
	// RVA: 0x55B4C0 Offset: 0x559CC0 VA: 0x18055B4C0
	public static Matrix4x4 GetJitteredOrthographicProjectionMatrix(Camera camera, Vector2 offset) { }
	// RVA: 0x55B900 Offset: 0x55A100 VA: 0x18055B900
	public static Matrix4x4 GenerateJitteredProjectionMatrixFromOriginal(PostProcessRenderContext context, Matrix4x4 origProj, Vector2 jitter) { }
	// RVA: 0x55BAE0 Offset: 0x55A2E0 VA: 0x18055BAE0
	public static IEnumerable<Type> GetAllAssemblyTypes() { }
	// RVA: 0x429070 Offset: 0x427870 VA: 0x180429070
	public static IEnumerable<Type> GetAllTypesDerivedFrom() { }
	// RVA: 0x429290 Offset: 0x427A90 VA: 0x180429290
	public static T GetAttribute(Type type) { }
	// RVA: 0x55BDA0 Offset: 0x55A5A0 VA: 0x18055BDA0
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class RuntimeUtilities.<>c // TypeDefIndex: 2334
{
	// Fields
	public static readonly RuntimeUtilities.<>c <>9; // 0x0
	public static Func<Assembly, IEnumerable<Type>> <>9__87_0; // 0x8

	// Methods
	// RVA: 0x56C5F0 Offset: 0x56ADF0 VA: 0x18056C5F0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x56C670 Offset: 0x56AE70 VA: 0x18056C670
	internal IEnumerable<Type> <GetAllAssemblyTypes>b__87_0(Assembly t) { }
}

// Namespace: 
[Serializable]
private sealed class RuntimeUtilities.<>c__88<T> // TypeDefIndex: 2335
{
	// Fields
	public static readonly RuntimeUtilities.<>c__88<T> <>9; // 0x0
	public static Func<Type, bool> <>9__88_0; // 0x0

	// Methods
	// RVA: 0x7C66A0 Offset: 0x7C4EA0 VA: 0x1807C66A0
	private static void .cctor() { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
	// RVA: 0x7C6C00 Offset: 0x7C5400 VA: 0x1807C6C00
	internal bool <GetAllTypesDerivedFrom>b__88_0(Type t) { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
internal static class ShaderIDs // TypeDefIndex: 2336
{
	// Fields
	internal static readonly int MainTex; // 0x0
	internal static readonly int Jitter; // 0x4
	internal static readonly int Sharpness; // 0x8
	internal static readonly int FinalBlendParameters; // 0xC
	internal static readonly int HistoryTex; // 0x10
	internal static readonly int SMAA_Flip; // 0x14
	internal static readonly int SMAA_Flop; // 0x18
	internal static readonly int AOParams; // 0x1C
	internal static readonly int AOColor; // 0x20
	internal static readonly int OcclusionTexture1; // 0x24
	internal static readonly int OcclusionTexture2; // 0x28
	internal static readonly int SAOcclusionTexture; // 0x2C
	internal static readonly int MSVOcclusionTexture; // 0x30
	internal static readonly int DepthCopy; // 0x34
	internal static readonly int LinearDepth; // 0x38
	internal static readonly int LowDepth1; // 0x3C
	internal static readonly int LowDepth2; // 0x40
	internal static readonly int LowDepth3; // 0x44
	internal static readonly int LowDepth4; // 0x48
	internal static readonly int TiledDepth1; // 0x4C
	internal static readonly int TiledDepth2; // 0x50
	internal static readonly int TiledDepth3; // 0x54
	internal static readonly int TiledDepth4; // 0x58
	internal static readonly int Occlusion1; // 0x5C
	internal static readonly int Occlusion2; // 0x60
	internal static readonly int Occlusion3; // 0x64
	internal static readonly int Occlusion4; // 0x68
	internal static readonly int Combined1; // 0x6C
	internal static readonly int Combined2; // 0x70
	internal static readonly int Combined3; // 0x74
	internal static readonly int SSRResolveTemp; // 0x78
	internal static readonly int Noise; // 0x7C
	internal static readonly int Test; // 0x80
	internal static readonly int Resolve; // 0x84
	internal static readonly int History; // 0x88
	internal static readonly int ViewMatrix; // 0x8C
	internal static readonly int InverseViewMatrix; // 0x90
	internal static readonly int InverseProjectionMatrix; // 0x94
	internal static readonly int ScreenSpaceProjectionMatrix; // 0x98
	internal static readonly int Params2; // 0x9C
	internal static readonly int FogColor; // 0xA0
	internal static readonly int FogParams; // 0xA4
	internal static readonly int VelocityScale; // 0xA8
	internal static readonly int MaxBlurRadius; // 0xAC
	internal static readonly int RcpMaxBlurRadius; // 0xB0
	internal static readonly int VelocityTex; // 0xB4
	internal static readonly int Tile2RT; // 0xB8
	internal static readonly int Tile4RT; // 0xBC
	internal static readonly int Tile8RT; // 0xC0
	internal static readonly int TileMaxOffs; // 0xC4
	internal static readonly int TileMaxLoop; // 0xC8
	internal static readonly int TileVRT; // 0xCC
	internal static readonly int NeighborMaxTex; // 0xD0
	internal static readonly int LoopCount; // 0xD4
	internal static readonly int DepthOfFieldTemp; // 0xD8
	internal static readonly int DepthOfFieldTex; // 0xDC
	internal static readonly int Distance; // 0xE0
	internal static readonly int LensCoeff; // 0xE4
	internal static readonly int MaxCoC; // 0xE8
	internal static readonly int RcpMaxCoC; // 0xEC
	internal static readonly int RcpAspect; // 0xF0
	internal static readonly int CoCTex; // 0xF4
	internal static readonly int TaaParams; // 0xF8
	internal static readonly int AutoExposureTex; // 0xFC
	internal static readonly int HistogramBuffer; // 0x100
	internal static readonly int Params; // 0x104
	internal static readonly int ScaleOffsetRes; // 0x108
	internal static readonly int BloomTex; // 0x10C
	internal static readonly int SampleScale; // 0x110
	internal static readonly int Threshold; // 0x114
	internal static readonly int ColorIntensity; // 0x118
	internal static readonly int Bloom_DirtTex; // 0x11C
	internal static readonly int Bloom_Settings; // 0x120
	internal static readonly int Bloom_Color; // 0x124
	internal static readonly int Bloom_DirtTileOffset; // 0x128
	internal static readonly int ChromaticAberration_Amount; // 0x12C
	internal static readonly int ChromaticAberration_SpectralLut; // 0x130
	internal static readonly int Distortion_CenterScale; // 0x134
	internal static readonly int Distortion_Amount; // 0x138
	internal static readonly int Lut2D; // 0x13C
	internal static readonly int Lut3D; // 0x140
	internal static readonly int Lut3D_Params; // 0x144
	internal static readonly int Lut2D_Params; // 0x148
	internal static readonly int UserLut2D_Params; // 0x14C
	internal static readonly int PostExposure; // 0x150
	internal static readonly int ColorBalance; // 0x154
	internal static readonly int ColorFilter; // 0x158
	internal static readonly int HueSatCon; // 0x15C
	internal static readonly int Brightness; // 0x160
	internal static readonly int ChannelMixerRed; // 0x164
	internal static readonly int ChannelMixerGreen; // 0x168
	internal static readonly int ChannelMixerBlue; // 0x16C
	internal static readonly int Lift; // 0x170
	internal static readonly int InvGamma; // 0x174
	internal static readonly int Gain; // 0x178
	internal static readonly int Curves; // 0x17C
	internal static readonly int CustomToneCurve; // 0x180
	internal static readonly int ToeSegmentA; // 0x184
	internal static readonly int ToeSegmentB; // 0x188
	internal static readonly int MidSegmentA; // 0x18C
	internal static readonly int MidSegmentB; // 0x190
	internal static readonly int ShoSegmentA; // 0x194
	internal static readonly int ShoSegmentB; // 0x198
	internal static readonly int Vignette_Color; // 0x19C
	internal static readonly int Vignette_Center; // 0x1A0
	internal static readonly int Vignette_Settings; // 0x1A4
	internal static readonly int Vignette_Mask; // 0x1A8
	internal static readonly int Vignette_Opacity; // 0x1AC
	internal static readonly int Vignette_Mode; // 0x1B0
	internal static readonly int Grain_Params1; // 0x1B4
	internal static readonly int Grain_Params2; // 0x1B8
	internal static readonly int GrainTex; // 0x1BC
	internal static readonly int Phase; // 0x1C0
	internal static readonly int GrainNoiseParameters; // 0x1C4
	internal static readonly int LumaInAlpha; // 0x1C8
	internal static readonly int DitheringTex; // 0x1CC
	internal static readonly int Dithering_Coords; // 0x1D0
	internal static readonly int From; // 0x1D4
	internal static readonly int To; // 0x1D8
	internal static readonly int Interp; // 0x1DC
	internal static readonly int TargetColor; // 0x1E0
	internal static readonly int HalfResFinalCopy; // 0x1E4
	internal static readonly int WaveformSource; // 0x1E8
	internal static readonly int WaveformBuffer; // 0x1EC
	internal static readonly int VectorscopeBuffer; // 0x1F0
	internal static readonly int RenderViewportScaleFactor; // 0x1F4
	internal static readonly int UVTransform; // 0x1F8
	internal static readonly int DepthSlice; // 0x1FC
	internal static readonly int UVScaleOffset; // 0x200
	internal static readonly int PosScaleOffset; // 0x204

	// Methods
	// RVA: 0x55FE20 Offset: 0x55E620 VA: 0x18055FE20
	private static void .cctor() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
[Serializable]
public sealed class Spline // TypeDefIndex: 2337
{
	// Fields
	public AnimationCurve curve; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_Loop; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_ZeroValue; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_Range; // 0x20
	private AnimationCurve m_InternalLoopingCurve; // 0x28
	private int frameCount; // 0x30
	public float[] cachedData; // 0x38

	// Methods
	// RVA: 0x562E60 Offset: 0x561660 VA: 0x180562E60
	public void .ctor(AnimationCurve curve, float zeroValue, bool loop, Vector2 bounds) { }
	// RVA: 0x562F30 Offset: 0x561730 VA: 0x180562F30
	public void Cache(int frame) { }
	// RVA: 0x563340 Offset: 0x561B40 VA: 0x180563340
	public float Evaluate(float t, int length) { }
	// RVA: 0x563380 Offset: 0x561B80 VA: 0x180563380 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
internal class TargetPool // TypeDefIndex: 2338
{
	// Fields
	private readonly List<int> m_Pool; // 0x10
	private int m_Current; // 0x18

	// Methods
	// RVA: 0x563F60 Offset: 0x562760 VA: 0x180563F60
	internal void .ctor() { }
	// RVA: 0x564000 Offset: 0x562800 VA: 0x180564000
	internal int Get() { }
	// RVA: 0x564020 Offset: 0x562820 VA: 0x180564020
	private int Get(int i) { }
	// RVA: 0x5645D0 Offset: 0x562DD0 VA: 0x1805645D0
	internal void Reset() { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
public static class TextureFormatUtilities // TypeDefIndex: 2339
{
	// Fields
	private static Dictionary<int, RenderTextureFormat> s_FormatAliasMap; // 0x0
	private static Dictionary<int, bool> s_SupportedRenderTextureFormats; // 0x8
	private static Dictionary<int, bool> s_SupportedTextureFormats; // 0x10

	// Methods
	// RVA: 0x566130 Offset: 0x564930 VA: 0x180566130
	private static void .cctor() { }
	// RVA: 0x567080 Offset: 0x565880 VA: 0x180567080
	private static bool IsObsolete(object value) { }
	// RVA: 0x5671E0 Offset: 0x5659E0 VA: 0x1805671E0
	public static RenderTextureFormat GetUncompressedRenderTextureFormat(Texture texture) { }
	// RVA: 0x567450 Offset: 0x565C50 VA: 0x180567450
	internal static bool IsSupported(RenderTextureFormat format) { }
	// RVA: 0x567560 Offset: 0x565D60 VA: 0x180567560
	internal static bool IsSupported(TextureFormat format) { }
}

// Namespace: UnityEngine.Rendering.PostProcessing
internal class TextureLerper // TypeDefIndex: 2340
{
	// Fields
	private static TextureLerper m_Instance; // 0x0
	private CommandBuffer m_Command; // 0x10
	private PropertySheetFactory m_PropertySheets; // 0x18
	private PostProcessResources m_Resources; // 0x20
	private List<RenderTexture> m_Recycled; // 0x28
	private List<RenderTexture> m_Actives; // 0x30

	// Properties
	internal static TextureLerper instance { get; }

	// Methods
	// RVA: 0x567670 Offset: 0x565E70 VA: 0x180567670
	internal static TextureLerper get_instance() { }
	// RVA: 0x5677C0 Offset: 0x565FC0 VA: 0x1805677C0
	private void .ctor() { }
	// RVA: 0x567880 Offset: 0x566080 VA: 0x180567880
	internal void BeginFrame(PostProcessRenderContext context) { }
	// RVA: 0x5678B0 Offset: 0x5660B0 VA: 0x1805678B0
	internal void EndFrame() { }
	// RVA: 0x567B70 Offset: 0x566370 VA: 0x180567B70
	private RenderTexture Get(RenderTextureFormat format, int w, int h, int d = 1, bool enableRandomWrite = False, bool force3D = False) { }
	// RVA: 0x567EA0 Offset: 0x5666A0 VA: 0x180567EA0
	internal Texture Lerp(Texture from, Texture to, float t) { }
	// RVA: 0x568730 Offset: 0x566F30 VA: 0x180568730
	internal Texture Lerp(Texture from, Color to, float t) { }
	// RVA: 0x568F70 Offset: 0x567770 VA: 0x180568F70
	internal void Clear() { }
}

// Namespace: 
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 2341
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=20 0ED907628EE272F93737B500A23D77C9B1C88368 /*Metadata offset 0x15F7B3*/; // 0xABC1E
}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=20 // TypeDefIndex: 2342
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2343
{}

// Namespace: UnityEngine.Timeline
internal class AnimationOutputWeightProcessor : ITimelineEvaluateCallback // TypeDefIndex: 2344
{
	// Fields
	private AnimationPlayableOutput m_Output; // 0x10
	private readonly List<AnimationOutputWeightProcessor.WeightInfo> m_Mixers; // 0x20

	// Methods
	// RVA: 0x5AAF00 Offset: 0x5A9700 VA: 0x1805AAF00
	public void .ctor(AnimationPlayableOutput output) { }
	// RVA: 0x5AB080 Offset: 0x5A9880 VA: 0x1805AB080
	private void FindMixers() { }
	// RVA: 0x5AB270 Offset: 0x5A9A70 VA: 0x1805AB270
	private void FindMixers(Playable parent, int port, Playable node) { }
	// RVA: 0x5AB6B0 Offset: 0x5A9EB0 VA: 0x1805AB6B0 Slot: 4
	public void Evaluate() { }
}

// Namespace: 
private struct AnimationOutputWeightProcessor.WeightInfo // TypeDefIndex: 2345
{
	// Fields
	public Playable mixer; // 0x0
	public Playable parentMixer; // 0x10
	public int port; // 0x20
}

// Namespace: UnityEngine.Timeline
[Serializable]
public class AnimationPlayableAsset : PlayableAsset, ITimelineClipAsset, IPropertyPreview, ISerializationCallbackReceiver // TypeDefIndex: 2346
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationClip m_Clip; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 m_Position; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 m_EulerAngles; // 0x2C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_UseTrackMatchFields; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private MatchTargetFields m_MatchTargetFields; // 0x3C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_RemoveStartOffset; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_ApplyFootIK; // 0x41
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationPlayableAsset.LoopMode m_Loop; // 0x44
	private AppliedOffsetMode <appliedOffsetMode>k__BackingField; // 0x48
	private static readonly int k_LatestVersion; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_Version; // 0x4C
	[ObsoleteAttribute] // RVA: 0x1014E0 Offset: 0x1008E0 VA: 0x1801014E0
	[SerializeField] // RVA: 0x1014E0 Offset: 0x1008E0 VA: 0x1801014E0
	private Quaternion m_Rotation; // 0x50

	// Properties
	public Vector3 position { get; set; }
	public Quaternion rotation { get; set; }
	public Vector3 eulerAngles { get; set; }
	public bool useTrackMatchFields { get; set; }
	public MatchTargetFields matchTargetFields { get; set; }
	public bool removeStartOffset { get; set; }
	public bool applyFootIK { get; set; }
	public AnimationPlayableAsset.LoopMode loop { get; set; }
	internal bool hasRootTransforms { get; }
	internal AppliedOffsetMode appliedOffsetMode { get; set; }
	public AnimationClip clip { get; set; }
	public override double duration { get; }
	public override IEnumerable<PlayableBinding> outputs { get; }
	public ClipCaps clipCaps { get; }

	// Methods
	// RVA: 0x5AB880 Offset: 0x5AA080 VA: 0x1805AB880
	public Vector3 get_position() { }
	// RVA: 0x5AB8A0 Offset: 0x5AA0A0 VA: 0x1805AB8A0
	public void set_position(Vector3 value) { }
	// RVA: 0x5AB8B0 Offset: 0x5AA0B0 VA: 0x1805AB8B0
	public Quaternion get_rotation() { }
	// RVA: 0x5AB980 Offset: 0x5AA180 VA: 0x1805AB980
	public void set_rotation(Quaternion value) { }
	// RVA: 0x34A160 Offset: 0x348960 VA: 0x18034A160
	public Vector3 get_eulerAngles() { }
	// RVA: 0x34A180 Offset: 0x348980 VA: 0x18034A180
	public void set_eulerAngles(Vector3 value) { }
	// RVA: 0x2E9C80 Offset: 0x2E8480 VA: 0x1802E9C80
	public bool get_useTrackMatchFields() { }
	// RVA: 0x354270 Offset: 0x352A70 VA: 0x180354270
	public void set_useTrackMatchFields(bool value) { }
	// RVA: 0x564600 Offset: 0x562E00 VA: 0x180564600
	public MatchTargetFields get_matchTargetFields() { }
	// RVA: 0x2DBB20 Offset: 0x2DA320 VA: 0x1802DBB20
	public void set_matchTargetFields(MatchTargetFields value) { }
	// RVA: 0x207520 Offset: 0x205D20 VA: 0x180207520
	public bool get_removeStartOffset() { }
	// RVA: 0x208850 Offset: 0x207050 VA: 0x180208850
	public void set_removeStartOffset(bool value) { }
	// RVA: 0x207750 Offset: 0x205F50 VA: 0x180207750
	public bool get_applyFootIK() { }
	// RVA: 0x5AB9B0 Offset: 0x5AA1B0 VA: 0x1805AB9B0
	public void set_applyFootIK(bool value) { }
	// RVA: 0x34A1C0 Offset: 0x3489C0 VA: 0x18034A1C0
	public AnimationPlayableAsset.LoopMode get_loop() { }
	// RVA: 0x34A1D0 Offset: 0x3489D0 VA: 0x18034A1D0
	public void set_loop(AnimationPlayableAsset.LoopMode value) { }
	// RVA: 0x5AB9C0 Offset: 0x5AA1C0 VA: 0x1805AB9C0
	internal bool get_hasRootTransforms() { }
	// RVA: 0x1A20D0 Offset: 0x1A08D0 VA: 0x1801A20D0
	internal AppliedOffsetMode get_appliedOffsetMode() { }
	// RVA: 0x1A20E0 Offset: 0x1A08E0 VA: 0x1801A20E0
	internal void set_appliedOffsetMode(AppliedOffsetMode value) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public AnimationClip get_clip() { }
	// RVA: 0x5ABAA0 Offset: 0x5AA2A0 VA: 0x1805ABAA0
	public void set_clip(AnimationClip value) { }
	// RVA: 0x5ABB80 Offset: 0x5AA380 VA: 0x1805ABB80 Slot: 7
	public override double get_duration() { }
	// RVA: 0x5ABCC0 Offset: 0x5AA4C0 VA: 0x1805ABCC0 Slot: 8
	public override IEnumerable<PlayableBinding> get_outputs() { }
	// RVA: 0x5ABD80 Offset: 0x5AA580 VA: 0x1805ABD80 Slot: 6
	public override Playable CreatePlayable(PlayableGraph graph, GameObject go) { }
	// RVA: 0x5ABEF0 Offset: 0x5AA6F0 VA: 0x1805ABEF0
	internal static Playable CreatePlayable(PlayableGraph graph, AnimationClip clip, Vector3 positionOffset, Vector3 eulerOffset, bool removeStartOffset, AppliedOffsetMode mode, bool applyFootIK, AnimationPlayableAsset.LoopMode loop) { }
	// RVA: 0x5AC610 Offset: 0x5AAE10 VA: 0x1805AC610
	private static bool ShouldApplyOffset(AppliedOffsetMode mode, AnimationClip clip) { }
	// RVA: 0x5AC6D0 Offset: 0x5AAED0 VA: 0x1805AC6D0
	private static bool ShouldApplyScaleRemove(AppliedOffsetMode mode) { }
	// RVA: 0x5AC6F0 Offset: 0x5AAEF0 VA: 0x1805AC6F0 Slot: 9
	public ClipCaps get_clipCaps() { }
	// RVA: 0x5AC8A0 Offset: 0x5AB0A0 VA: 0x1805AC8A0
	public void ResetOffsets() { }
	// RVA: 0x5AC960 Offset: 0x5AB160 VA: 0x1805AC960 Slot: 10
	public void GatherProperties(PlayableDirector director, IPropertyCollector driver) { }
	// RVA: 0x5ACA60 Offset: 0x5AB260 VA: 0x1805ACA60
	internal static bool HasRootTransforms(AnimationClip clip) { }
	// RVA: 0x5ACC90 Offset: 0x5AB490 VA: 0x1805ACC90 Slot: 11
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }
	// RVA: 0x5ACD30 Offset: 0x5AB530 VA: 0x1805ACD30 Slot: 12
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
	// RVA: 0x5ACE00 Offset: 0x5AB600 VA: 0x1805ACE00
	private void OnUpgradeFromVersion(int oldVersion) { }
	// RVA: 0x5ACE40 Offset: 0x5AB640 VA: 0x1805ACE40
	public void .ctor() { }
	// RVA: 0x5ACF80 Offset: 0x5AB780 VA: 0x1805ACF80
	private static void .cctor() { }
}

// Namespace: 
public enum AnimationPlayableAsset.LoopMode // TypeDefIndex: 2347
{
	// Fields
	public int value__; // 0x0
	public const AnimationPlayableAsset.LoopMode UseSourceAsset = 0; // 0x0
	public const AnimationPlayableAsset.LoopMode On = 1; // 0x0
	public const AnimationPlayableAsset.LoopMode Off = 2; // 0x0
}

// Namespace: 
private static class AnimationPlayableAsset.AnimationPlayableAssetUpgrade // TypeDefIndex: 2348
{
	// Methods
	// RVA: 0x5C5840 Offset: 0x5C4040 VA: 0x1805C5840
	public static void ConvertRotationToEuler(AnimationPlayableAsset asset) { }
}

// Namespace: 
private sealed class AnimationPlayableAsset.<get_outputs>d__45 : IEnumerable<PlayableBinding>, IEnumerable, IEnumerator<PlayableBinding>, IEnumerator, IDisposable // TypeDefIndex: 2349
{
	// Fields
	private int <>1__state; // 0x10
	private PlayableBinding <>2__current; // 0x18
	private int <>l__initialThreadId; // 0x38
	public AnimationPlayableAsset <>4__this; // 0x40

	// Properties
	private PlayableBinding System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C55B0 Offset: 0x5C3DB0 VA: 0x1805C55B0
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	private void System.IDisposable.Dispose() { }
	// RVA: 0x5C55F0 Offset: 0x5C3DF0 VA: 0x1805C55F0 Slot: 8
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C5680 Offset: 0x5C3E80 VA: 0x1805C5680 Slot: 6
	private PlayableBinding System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C56A0 Offset: 0x5C3EA0 VA: 0x1805C56A0 Slot: 9
	private object System.Collections.IEnumerator.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C5730 Offset: 0x5C3F30 VA: 0x1805C5730 Slot: 4
	private IEnumerator<PlayableBinding> System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C5730 Offset: 0x5C3F30 VA: 0x1805C5730 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: UnityEngine.Timeline
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum MatchTargetFields // TypeDefIndex: 2350
{
	// Fields
	public int value__; // 0x0
	public const MatchTargetFields PositionX = 1; // 0x0
	public const MatchTargetFields PositionY = 2; // 0x0
	public const MatchTargetFields PositionZ = 4; // 0x0
	public const MatchTargetFields RotationX = 8; // 0x0
	public const MatchTargetFields RotationY = 16; // 0x0
	public const MatchTargetFields RotationZ = 32; // 0x0
}

// Namespace: UnityEngine.Timeline
public enum TrackOffset // TypeDefIndex: 2351
{
	// Fields
	public int value__; // 0x0
	public const TrackOffset ApplyTransformOffsets = 0; // 0x0
	public const TrackOffset ApplySceneOffsets = 1; // 0x0
	public const TrackOffset Auto = 2; // 0x0
}

// Namespace: UnityEngine.Timeline
internal enum AppliedOffsetMode // TypeDefIndex: 2352
{
	// Fields
	public int value__; // 0x0
	public const AppliedOffsetMode NoRootTransform = 0; // 0x0
	public const AppliedOffsetMode TransformOffset = 1; // 0x0
	public const AppliedOffsetMode SceneOffset = 2; // 0x0
	public const AppliedOffsetMode TransformOffsetLegacy = 3; // 0x0
	public const AppliedOffsetMode SceneOffsetLegacy = 4; // 0x0
	public const AppliedOffsetMode SceneOffsetEditor = 5; // 0x0
	public const AppliedOffsetMode SceneOffsetLegacyEditor = 6; // 0x0
}

// Namespace: UnityEngine.Timeline
internal static class MatchTargetFieldConstants // TypeDefIndex: 2353
{
	// Fields
	public static MatchTargetFields All; // 0x0
	public static MatchTargetFields None; // 0x4
	public static MatchTargetFields Position; // 0x8
	public static MatchTargetFields Rotation; // 0xC

	// Methods
	// RVA: 0x5B30E0 Offset: 0x5B18E0 VA: 0x1805B30E0
	private static void .cctor() { }
}

// Namespace: UnityEngine.Timeline
[TrackBindingTypeAttribute] // RVA: 0x101510 Offset: 0x100910 VA: 0x180101510
[TrackClipTypeAttribute] // RVA: 0x101510 Offset: 0x100910 VA: 0x180101510
[Serializable]
public class AnimationTrack : TrackAsset, ILayerable // TypeDefIndex: 2354
{
	// Fields
	private const string k_DefaultInfiniteClipName = "Recorded"; // 0x0
	private const string k_DefaultRecordableClipName = "Recorded"; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0x1015C0 Offset: 0x1009C0 VA: 0x1801015C0
	[SerializeField] // RVA: 0x1015C0 Offset: 0x1009C0 VA: 0x1801015C0
	private TimelineClip.ClipExtrapolation m_InfiniteClipPreExtrapolation; // 0xA0
	[SerializeField] // RVA: 0x1015F0 Offset: 0x1009F0 VA: 0x1801015F0
	[FormerlySerializedAsAttribute] // RVA: 0x1015F0 Offset: 0x1009F0 VA: 0x1801015F0
	private TimelineClip.ClipExtrapolation m_InfiniteClipPostExtrapolation; // 0xA4
	[FormerlySerializedAsAttribute] // RVA: 0x101620 Offset: 0x100A20 VA: 0x180101620
	[SerializeField] // RVA: 0x101620 Offset: 0x100A20 VA: 0x180101620
	private Vector3 m_InfiniteClipOffsetPosition; // 0xA8
	[FormerlySerializedAsAttribute] // RVA: 0x101650 Offset: 0x100A50 VA: 0x180101650
	[SerializeField] // RVA: 0x101650 Offset: 0x100A50 VA: 0x180101650
	private Vector3 m_InfiniteClipOffsetEulerAngles; // 0xB4
	[FormerlySerializedAsAttribute] // RVA: 0x101680 Offset: 0x100A80 VA: 0x180101680
	[SerializeField] // RVA: 0x101680 Offset: 0x100A80 VA: 0x180101680
	private double m_InfiniteClipTimeOffset; // 0xC0
	[FormerlySerializedAsAttribute] // RVA: 0x1016B0 Offset: 0x100AB0 VA: 0x1801016B0
	[SerializeField] // RVA: 0x1016B0 Offset: 0x100AB0 VA: 0x1801016B0
	private bool m_InfiniteClipRemoveOffset; // 0xC8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_InfiniteClipApplyFootIK; // 0xC9
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationPlayableAsset.LoopMode mInfiniteClipLoop; // 0xCC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private MatchTargetFields m_MatchTargetFields; // 0xD0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 m_Position; // 0xD4
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 m_EulerAngles; // 0xE0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AvatarMask m_AvatarMask; // 0xF0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_ApplyAvatarMask; // 0xF8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TrackOffset m_TrackOffset; // 0xFC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationClip m_InfiniteClip; // 0x100
	[SerializeField] // RVA: 0x1016E0 Offset: 0x100AE0 VA: 0x1801016E0
	[ObsoleteAttribute] // RVA: 0x1016E0 Offset: 0x100AE0 VA: 0x1801016E0
	private Quaternion m_OpenClipOffsetRotation; // 0x108
	[SerializeField] // RVA: 0x101710 Offset: 0x100B10 VA: 0x180101710
	[ObsoleteAttribute] // RVA: 0x101710 Offset: 0x100B10 VA: 0x180101710
	private Quaternion m_Rotation; // 0x118
	[SerializeField] // RVA: 0x101740 Offset: 0x100B40 VA: 0x180101740
	[ObsoleteAttribute] // RVA: 0x101740 Offset: 0x100B40 VA: 0x180101740
	private bool m_ApplyOffsets; // 0x128

	// Properties
	public Vector3 position { get; set; }
	public Quaternion rotation { get; set; }
	public Vector3 eulerAngles { get; set; }
	[ObsoleteAttribute] // RVA: 0x1017B0 Offset: 0x100BB0 VA: 0x1801017B0
	public bool applyOffsets { get; }
	public TrackOffset trackOffset { get; set; }
	public MatchTargetFields matchTargetFields { get; set; }
	public AnimationClip infiniteClip { get; set; }
	internal bool infiniteClipRemoveOffset { get; set; }
	public AvatarMask avatarMask { get; set; }
	public bool applyAvatarMask { get; set; }
	public override IEnumerable<PlayableBinding> outputs { get; }
	public bool inClipMode { get; }
	public Vector3 infiniteClipOffsetPosition { get; set; }
	public Quaternion infiniteClipOffsetRotation { get; set; }
	public Vector3 infiniteClipOffsetEulerAngles { get; set; }
	internal bool infiniteClipApplyFootIK { get; set; }
	internal double infiniteClipTimeOffset { get; set; }
	public TimelineClip.ClipExtrapolation infiniteClipPreExtrapolation { get; set; }
	public TimelineClip.ClipExtrapolation infiniteClipPostExtrapolation { get; set; }
	internal AnimationPlayableAsset.LoopMode infiniteClipLoop { get; set; }
	[ObsoleteAttribute] // RVA: 0x1017E0 Offset: 0x100BE0 VA: 0x1801017E0
	public Vector3 openClipOffsetPosition { get; set; }
	[ObsoleteAttribute] // RVA: 0x101810 Offset: 0x100C10 VA: 0x180101810
	public Quaternion openClipOffsetRotation { get; set; }
	[ObsoleteAttribute] // RVA: 0x101840 Offset: 0x100C40 VA: 0x180101840
	public Vector3 openClipOffsetEulerAngles { get; set; }
	[ObsoleteAttribute] // RVA: 0x101870 Offset: 0x100C70 VA: 0x180101870
	public TimelineClip.ClipExtrapolation openClipPreExtrapolation { get; set; }
	[ObsoleteAttribute] // RVA: 0x1018A0 Offset: 0x100CA0 VA: 0x1801018A0
	public TimelineClip.ClipExtrapolation openClipPostExtrapolation { get; set; }

	// Methods
	// RVA: 0x5AD000 Offset: 0x5AB800 VA: 0x1805AD000
	public Vector3 get_position() { }
	// RVA: 0x5AD020 Offset: 0x5AB820 VA: 0x1805AD020
	public void set_position(Vector3 value) { }
	// RVA: 0x5AD040 Offset: 0x5AB840 VA: 0x1805AD040
	public Quaternion get_rotation() { }
	// RVA: 0x5AD120 Offset: 0x5AB920 VA: 0x1805AD120
	public void set_rotation(Quaternion value) { }
	// RVA: 0x5AD150 Offset: 0x5AB950 VA: 0x1805AD150
	public Vector3 get_eulerAngles() { }
	// RVA: 0x5AD170 Offset: 0x5AB970 VA: 0x1805AD170
	public void set_eulerAngles(Vector3 value) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640
	public bool get_applyOffsets() { }
	// RVA: 0x216320 Offset: 0x214B20 VA: 0x180216320
	public TrackOffset get_trackOffset() { }
	// RVA: 0x5AD190 Offset: 0x5AB990 VA: 0x1805AD190
	public void set_trackOffset(TrackOffset value) { }
	// RVA: 0x5AD1A0 Offset: 0x5AB9A0 VA: 0x1805AD1A0
	public MatchTargetFields get_matchTargetFields() { }
	// RVA: 0x5AD1B0 Offset: 0x5AB9B0 VA: 0x1805AD1B0
	public void set_matchTargetFields(MatchTargetFields value) { }
	// RVA: 0x171250 Offset: 0x16FA50 VA: 0x180171250
	public AnimationClip get_infiniteClip() { }
	// RVA: 0x171260 Offset: 0x16FA60 VA: 0x180171260
	internal void set_infiniteClip(AnimationClip value) { }
	// RVA: 0x4C98E0 Offset: 0x4C80E0 VA: 0x1804C98E0
	internal bool get_infiniteClipRemoveOffset() { }
	// RVA: 0x5AD260 Offset: 0x5ABA60 VA: 0x1805AD260
	internal void set_infiniteClipRemoveOffset(bool value) { }
	// RVA: 0x171030 Offset: 0x16F830 VA: 0x180171030
	public AvatarMask get_avatarMask() { }
	// RVA: 0x1FEA60 Offset: 0x1FD260 VA: 0x1801FEA60
	public void set_avatarMask(AvatarMask value) { }
	// RVA: 0x216270 Offset: 0x214A70 VA: 0x180216270
	public bool get_applyAvatarMask() { }
	// RVA: 0x5AD270 Offset: 0x5ABA70 VA: 0x1805AD270
	public void set_applyAvatarMask(bool value) { }
	// RVA: 0x5AD280 Offset: 0x5ABA80 VA: 0x1805AD280 Slot: 32
	internal override bool CanCompileClips() { }
	// RVA: 0x5AD380 Offset: 0x5ABB80 VA: 0x1805AD380 Slot: 8
	public override IEnumerable<PlayableBinding> get_outputs() { }
	// RVA: 0x5AD440 Offset: 0x5ABC40 VA: 0x1805AD440
	public bool get_inClipMode() { }
	// RVA: 0x5AD480 Offset: 0x5ABC80 VA: 0x1805AD480
	public Vector3 get_infiniteClipOffsetPosition() { }
	// RVA: 0x5AD4A0 Offset: 0x5ABCA0 VA: 0x1805AD4A0
	public void set_infiniteClipOffsetPosition(Vector3 value) { }
	// RVA: 0x5AD4C0 Offset: 0x5ABCC0 VA: 0x1805AD4C0
	public Quaternion get_infiniteClipOffsetRotation() { }
	// RVA: 0x5AD5A0 Offset: 0x5ABDA0 VA: 0x1805AD5A0
	public void set_infiniteClipOffsetRotation(Quaternion value) { }
	// RVA: 0x5AD5D0 Offset: 0x5ABDD0 VA: 0x1805AD5D0
	public Vector3 get_infiniteClipOffsetEulerAngles() { }
	// RVA: 0x5AD5F0 Offset: 0x5ABDF0 VA: 0x1805AD5F0
	public void set_infiniteClipOffsetEulerAngles(Vector3 value) { }
	// RVA: 0x5AD610 Offset: 0x5ABE10 VA: 0x1805AD610
	internal bool get_infiniteClipApplyFootIK() { }
	// RVA: 0x5AD620 Offset: 0x5ABE20 VA: 0x1805AD620
	internal void set_infiniteClipApplyFootIK(bool value) { }
	// RVA: 0x5AD630 Offset: 0x5ABE30 VA: 0x1805AD630
	internal double get_infiniteClipTimeOffset() { }
	// RVA: 0x5AD640 Offset: 0x5ABE40 VA: 0x1805AD640
	internal void set_infiniteClipTimeOffset(double value) { }
	// RVA: 0x5AD650 Offset: 0x5ABE50 VA: 0x1805AD650
	public TimelineClip.ClipExtrapolation get_infiniteClipPreExtrapolation() { }
	// RVA: 0x5AD660 Offset: 0x5ABE60 VA: 0x1805AD660
	public void set_infiniteClipPreExtrapolation(TimelineClip.ClipExtrapolation value) { }
	// RVA: 0x555310 Offset: 0x553B10 VA: 0x180555310
	public TimelineClip.ClipExtrapolation get_infiniteClipPostExtrapolation() { }
	// RVA: 0x555320 Offset: 0x553B20 VA: 0x180555320
	public void set_infiniteClipPostExtrapolation(TimelineClip.ClipExtrapolation value) { }
	// RVA: 0x5AD670 Offset: 0x5ABE70 VA: 0x1805AD670
	internal AnimationPlayableAsset.LoopMode get_infiniteClipLoop() { }
	// RVA: 0x5AD680 Offset: 0x5ABE80 VA: 0x1805AD680
	internal void set_infiniteClipLoop(AnimationPlayableAsset.LoopMode value) { }
	[ContextMenu] // RVA: 0x101770 Offset: 0x100B70 VA: 0x180101770
	// RVA: 0x5AD690 Offset: 0x5ABE90 VA: 0x1805AD690
	private void ResetOffsets() { }
	// RVA: 0x5AD760 Offset: 0x5ABF60 VA: 0x1805AD760
	public TimelineClip CreateClip(AnimationClip clip) { }
	// RVA: 0x5AD850 Offset: 0x5AC050 VA: 0x1805AD850
	public void CreateInfiniteClip(string infiniteClipName) { }
	// RVA: 0x5AD9A0 Offset: 0x5AC1A0 VA: 0x1805AD9A0
	public TimelineClip CreateRecordableClip(string animClipName) { }
	// RVA: 0x5ADBC0 Offset: 0x5AC3C0 VA: 0x1805ADBC0 Slot: 29
	protected override void OnCreateClip(TimelineClip clip) { }
	// RVA: 0x5ADC30 Offset: 0x5AC430 VA: 0x1805ADC30 Slot: 30
	protected internal override int CalculateItemsHash() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void UpdateClipOffsets() { }
	// RVA: 0x5ADDC0 Offset: 0x5AC5C0 VA: 0x1805ADDC0
	private Playable CompileTrackPlayable(PlayableGraph graph, TrackAsset track, GameObject go, IntervalTree<RuntimeElement> tree, AppliedOffsetMode mode) { }
	// RVA: 0x5AE220 Offset: 0x5ACA20 VA: 0x1805AE220 Slot: 34
	private Playable UnityEngine.Timeline.ILayerable.CreateLayerMixer(PlayableGraph graph, GameObject go, int inputCount) { }
	// RVA: 0x5AE2C0 Offset: 0x5ACAC0 VA: 0x1805AE2C0 Slot: 25
	internal override Playable OnCreateClipPlayableGraph(PlayableGraph graph, GameObject go, IntervalTree<RuntimeElement> tree) { }
	// RVA: 0x5AECD0 Offset: 0x5AD4D0 VA: 0x1805AECD0
	private Playable CreateDefaultBlend(PlayableGraph graph, GameObject go, Playable mixer, bool requireOffset) { }
	// RVA: 0x5AECE0 Offset: 0x5AD4E0 VA: 0x1805AECE0
	private Playable AttachOffsetPlayable(PlayableGraph graph, Playable playable, Vector3 pos, Quaternion rot) { }
	// RVA: 0x5AEE90 Offset: 0x5AD690 VA: 0x1805AEE90
	private bool RequiresMotionXPlayable(AppliedOffsetMode mode, GameObject gameObject) { }
	// RVA: 0x5AF010 Offset: 0x5AD810 VA: 0x1805AF010
	private static bool UsesAbsoluteMotion(AppliedOffsetMode mode) { }
	// RVA: 0x5AF020 Offset: 0x5AD820 VA: 0x1805AF020
	private bool HasController(GameObject gameObject) { }
	// RVA: 0x5AF1C0 Offset: 0x5AD9C0 VA: 0x1805AF1C0
	internal Animator GetBinding(PlayableDirector director) { }
	// RVA: 0x5AF3E0 Offset: 0x5ADBE0 VA: 0x1805AF3E0
	private static AnimationLayerMixerPlayable CreateGroupMixer(PlayableGraph graph, GameObject go, int inputCount) { }
	// RVA: 0x5AF5E0 Offset: 0x5ADDE0 VA: 0x1805AF5E0
	private Playable CreateInfiniteTrackPlayable(PlayableGraph graph, GameObject go, IntervalTree<RuntimeElement> tree, AppliedOffsetMode mode) { }
	// RVA: 0x5AF930 Offset: 0x5AE130 VA: 0x1805AF930
	private Playable ApplyTrackOffset(PlayableGraph graph, Playable root, GameObject go, AppliedOffsetMode mode) { }
	// RVA: 0x5AFBC0 Offset: 0x5AE3C0 VA: 0x1805AFBC0 Slot: 26
	internal override void GetEvaluationTime(out double outStart, out double outDuration) { }
	// RVA: 0x5AFCC0 Offset: 0x5AE4C0 VA: 0x1805AFCC0 Slot: 27
	internal override void GetSequenceTime(out double outStart, out double outDuration) { }
	// RVA: 0x5AFE20 Offset: 0x5AE620 VA: 0x1805AFE20
	private void AssignAnimationClip(TimelineClip clip, AnimationClip animClip) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 28
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver) { }
	// RVA: 0x5B01A0 Offset: 0x5AE9A0 VA: 0x1805B01A0
	private void GetAnimationClips(List<AnimationClip> animClips) { }
	// RVA: 0x5B0550 Offset: 0x5AED50 VA: 0x1805B0550
	private AppliedOffsetMode GetOffsetMode(GameObject go, bool animatesRootTransform) { }
	// RVA: 0x5B05D0 Offset: 0x5AEDD0 VA: 0x1805B05D0
	internal bool AnimatesRootTransform() { }
	// RVA: 0x5AD480 Offset: 0x5ABC80 VA: 0x1805AD480
	public Vector3 get_openClipOffsetPosition() { }
	// RVA: 0x5AD4A0 Offset: 0x5ABCA0 VA: 0x1805AD4A0
	public void set_openClipOffsetPosition(Vector3 value) { }
	// RVA: 0x5AD4C0 Offset: 0x5ABCC0 VA: 0x1805AD4C0
	public Quaternion get_openClipOffsetRotation() { }
	// RVA: 0x5B08C0 Offset: 0x5AF0C0 VA: 0x1805B08C0
	public void set_openClipOffsetRotation(Quaternion value) { }
	// RVA: 0x5AD5D0 Offset: 0x5ABDD0 VA: 0x1805AD5D0
	public Vector3 get_openClipOffsetEulerAngles() { }
	// RVA: 0x5AD5F0 Offset: 0x5ABDF0 VA: 0x1805AD5F0
	public void set_openClipOffsetEulerAngles(Vector3 value) { }
	// RVA: 0x5AD650 Offset: 0x5ABE50 VA: 0x1805AD650
	public TimelineClip.ClipExtrapolation get_openClipPreExtrapolation() { }
	// RVA: 0x5AD660 Offset: 0x5ABE60 VA: 0x1805AD660
	public void set_openClipPreExtrapolation(TimelineClip.ClipExtrapolation value) { }
	// RVA: 0x555310 Offset: 0x553B10 VA: 0x180555310
	public TimelineClip.ClipExtrapolation get_openClipPostExtrapolation() { }
	// RVA: 0x555320 Offset: 0x553B20 VA: 0x180555320
	public void set_openClipPostExtrapolation(TimelineClip.ClipExtrapolation value) { }
	// RVA: 0x5B0900 Offset: 0x5AF100 VA: 0x1805B0900 Slot: 18
	internal override void OnUpgradeFromVersion(int oldVersion) { }
	// RVA: 0x5B0A80 Offset: 0x5AF280 VA: 0x1805B0A80
	public void .ctor() { }
}

// Namespace: 
private static class AnimationTrack.AnimationTrackUpgrade // TypeDefIndex: 2355
{
	// Methods
	// RVA: 0x5C5A20 Offset: 0x5C4220 VA: 0x1805C5A20
	public static void ConvertRotationsToEuler(AnimationTrack track) { }
	// RVA: 0x5C5A90 Offset: 0x5C4290 VA: 0x1805C5A90
	public static void ConvertRootMotion(AnimationTrack track) { }
	// RVA: 0x5C5B80 Offset: 0x5C4380 VA: 0x1805C5B80
	public static void ConvertInfiniteTrack(AnimationTrack track) { }
}

// Namespace: 
private sealed class AnimationTrack.<get_outputs>d__49 : IEnumerable<PlayableBinding>, IEnumerable, IEnumerator<PlayableBinding>, IEnumerator, IDisposable // TypeDefIndex: 2356
{
	// Fields
	private int <>1__state; // 0x10
	private PlayableBinding <>2__current; // 0x18
	private int <>l__initialThreadId; // 0x38
	public AnimationTrack <>4__this; // 0x40

	// Properties
	private PlayableBinding System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C55B0 Offset: 0x5C3DB0 VA: 0x1805C55B0
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	private void System.IDisposable.Dispose() { }
	// RVA: 0x5C55F0 Offset: 0x5C3DF0 VA: 0x1805C55F0 Slot: 8
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C5680 Offset: 0x5C3E80 VA: 0x1805C5680 Slot: 6
	private PlayableBinding System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C5880 Offset: 0x5C4080 VA: 0x1805C5880 Slot: 9
	private object System.Collections.IEnumerator.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C5910 Offset: 0x5C4110 VA: 0x1805C5910 Slot: 4
	private IEnumerator<PlayableBinding> System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C5910 Offset: 0x5C4110 VA: 0x1805C5910 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: UnityEngine.Timeline
internal interface ICurvesOwner // TypeDefIndex: 2357
{
	// Properties
	public abstract string defaultCurvesName { get; }
	public abstract Object asset { get; }
	public abstract Object assetOwner { get; }
	public abstract TrackAsset targetTrack { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_defaultCurvesName() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract Object get_asset() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract Object get_assetOwner() { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract TrackAsset get_targetTrack() { }
}

// Namespace: UnityEngine.Timeline
[Serializable]
public class TimelineClip : ICurvesOwner, ISerializationCallbackReceiver // TypeDefIndex: 2358
{
	// Fields
	private const int k_LatestVersion = 1; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_Version; // 0x10
	public static readonly ClipCaps kDefaultClipCaps; // 0x0
	public static readonly float kDefaultClipDurationInSeconds; // 0x4
	public static readonly double kTimeScaleMin; // 0x8
	public static readonly double kTimeScaleMax; // 0x10
	internal static readonly string kDefaultCurvesName; // 0x18
	internal static readonly double kMinDuration; // 0x20
	internal static readonly double kMaxTimeValue; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private double m_Start; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private double m_ClipIn; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Object m_Asset; // 0x28
	[SerializeField] // RVA: 0x1018D0 Offset: 0x100CD0 VA: 0x1801018D0
	[FormerlySerializedAsAttribute] // RVA: 0x1018D0 Offset: 0x100CD0 VA: 0x1801018D0
	private double m_Duration; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private double m_TimeScale; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TrackAsset m_ParentTrack; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private double m_EaseInDuration; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private double m_EaseOutDuration; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private double m_BlendInDuration; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private double m_BlendOutDuration; // 0x60
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationCurve m_MixInCurve; // 0x68
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationCurve m_MixOutCurve; // 0x70
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TimelineClip.BlendCurveMode m_BlendInCurveMode; // 0x78
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TimelineClip.BlendCurveMode m_BlendOutCurveMode; // 0x7C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<string> m_ExposedParameterNames; // 0x80
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationClip m_AnimationCurves; // 0x88
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_Recordable; // 0x90
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TimelineClip.ClipExtrapolation m_PostExtrapolationMode; // 0x94
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TimelineClip.ClipExtrapolation m_PreExtrapolationMode; // 0x98
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private double m_PostExtrapolationTime; // 0xA0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private double m_PreExtrapolationTime; // 0xA8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_DisplayName; // 0xB0

	// Properties
	public double timeScale { get; }
	public double start { get; set; }
	public double duration { get; set; }
	public double end { get; }
	public double clipIn { get; }
	public string displayName { get; set; }
	public AnimationClip curves { get; }
	private string UnityEngine.Timeline.ICurvesOwner.defaultCurvesName { get; }
	public Object asset { get; set; }
	private Object UnityEngine.Timeline.ICurvesOwner.assetOwner { get; }
	private TrackAsset UnityEngine.Timeline.ICurvesOwner.targetTrack { get; }
	public TrackAsset parentTrack { get; set; }
	public double easeInDuration { get; }
	public double easeOutDuration { get; }
	public double blendInDuration { get; }
	public double blendOutDuration { get; }
	public bool hasBlendIn { get; }
	public bool hasBlendOut { get; }
	public AnimationCurve mixInCurve { get; set; }
	public double mixInDuration { get; }
	public AnimationCurve mixOutCurve { get; set; }
	public double mixOutTime { get; }
	public double mixOutDuration { get; }
	public bool recordable { get; set; }
	public ClipCaps clipCaps { get; }
	public TimelineClip.ClipExtrapolation postExtrapolationMode { get; set; }
	public TimelineClip.ClipExtrapolation preExtrapolationMode { get; set; }
	public double extrapolatedStart { get; }
	public double extrapolatedDuration { get; }

	// Methods
	// RVA: 0x5B8D60 Offset: 0x5B7560 VA: 0x1805B8D60
	private void UpgradeToLatestVersion() { }
	// RVA: 0x5B8D90 Offset: 0x5B7590 VA: 0x1805B8D90
	internal void .ctor(TrackAsset parent) { }
	// RVA: 0x5B8F00 Offset: 0x5B7700 VA: 0x1805B8F00
	public double get_timeScale() { }
	// RVA: 0x5B9020 Offset: 0x5B7820 VA: 0x1805B9020
	public double get_start() { }
	// RVA: 0x5B9030 Offset: 0x5B7830 VA: 0x1805B9030
	public void set_start(double value) { }
	// RVA: 0x5B9180 Offset: 0x5B7980 VA: 0x1805B9180 Slot: 10
	public double get_duration() { }
	// RVA: 0x5B9190 Offset: 0x5B7990 VA: 0x1805B9190
	public void set_duration(double value) { }
	// RVA: 0x5B9280 Offset: 0x5B7A80 VA: 0x1805B9280
	public double get_end() { }
	// RVA: 0x5B9290 Offset: 0x5B7A90 VA: 0x1805B9290
	public double get_clipIn() { }
	// RVA: 0x232FF0 Offset: 0x2317F0 VA: 0x180232FF0
	public string get_displayName() { }
	// RVA: 0x16C280 Offset: 0x16AA80 VA: 0x18016C280
	public void set_displayName(string value) { }
	// RVA: 0x262A60 Offset: 0x261260 VA: 0x180262A60 Slot: 11
	public AnimationClip get_curves() { }
	// RVA: 0x5B92C0 Offset: 0x5B7AC0 VA: 0x1805B92C0 Slot: 4
	private string UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900 Slot: 5
	public Object get_asset() { }
	// RVA: 0x207510 Offset: 0x205D10 VA: 0x180207510
	public void set_asset(Object value) { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130 Slot: 6
	private Object UnityEngine.Timeline.ICurvesOwner.get_assetOwner() { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130 Slot: 7
	private TrackAsset UnityEngine.Timeline.ICurvesOwner.get_targetTrack() { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public TrackAsset get_parentTrack() { }
	// RVA: 0x5B9360 Offset: 0x5B7B60 VA: 0x1805B9360
	public void set_parentTrack(TrackAsset value) { }
	// RVA: 0x5B94B0 Offset: 0x5B7CB0 VA: 0x1805B94B0
	public double get_easeInDuration() { }
	// RVA: 0x5B9590 Offset: 0x5B7D90 VA: 0x1805B9590
	public double get_easeOutDuration() { }
	// RVA: 0x5B9670 Offset: 0x5B7E70 VA: 0x1805B9670
	public double get_blendInDuration() { }
	// RVA: 0x5B96A0 Offset: 0x5B7EA0 VA: 0x1805B96A0
	public double get_blendOutDuration() { }
	// RVA: 0x5B96D0 Offset: 0x5B7ED0 VA: 0x1805B96D0
	public bool get_hasBlendIn() { }
	// RVA: 0x5B9710 Offset: 0x5B7F10 VA: 0x1805B9710
	public bool get_hasBlendOut() { }
	// RVA: 0x5B9750 Offset: 0x5B7F50 VA: 0x1805B9750
	public AnimationCurve get_mixInCurve() { }
	// RVA: 0x21EFD0 Offset: 0x21D7D0 VA: 0x18021EFD0
	public void set_mixInCurve(AnimationCurve value) { }
	// RVA: 0x5B9860 Offset: 0x5B8060 VA: 0x1805B9860
	public double get_mixInDuration() { }
	// RVA: 0x5B9980 Offset: 0x5B8180 VA: 0x1805B9980
	public AnimationCurve get_mixOutCurve() { }
	// RVA: 0x345180 Offset: 0x343980 VA: 0x180345180
	public void set_mixOutCurve(AnimationCurve value) { }
	// RVA: 0x5B9A90 Offset: 0x5B8290 VA: 0x1805B9A90
	public double get_mixOutTime() { }
	// RVA: 0x5B9AD0 Offset: 0x5B82D0 VA: 0x1805B9AD0
	public double get_mixOutDuration() { }
	// RVA: 0x5B9BF0 Offset: 0x5B83F0 VA: 0x1805B9BF0
	public bool get_recordable() { }
	// RVA: 0x5B9C00 Offset: 0x5B8400 VA: 0x1805B9C00
	internal void set_recordable(bool value) { }
	// RVA: 0x5B9C10 Offset: 0x5B8410 VA: 0x1805B9C10
	public ClipCaps get_clipCaps() { }
	// RVA: 0x5B9CE0 Offset: 0x5B84E0 VA: 0x1805B9CE0
	internal int Hash() { }
	// RVA: 0x5B9E10 Offset: 0x5B8610 VA: 0x1805B9E10
	public float EvaluateMixOut(double time) { }
	// RVA: 0x5BA090 Offset: 0x5B8890 VA: 0x1805BA090
	public float EvaluateMixIn(double time) { }
	// RVA: 0x5BA300 Offset: 0x5B8B00 VA: 0x1805BA300
	private static AnimationCurve GetDefaultMixInCurve() { }
	// RVA: 0x5BA330 Offset: 0x5B8B30 VA: 0x1805BA330
	private static AnimationCurve GetDefaultMixOutCurve() { }
	// RVA: 0x5BA360 Offset: 0x5B8B60 VA: 0x1805BA360
	public double ToLocalTime(double time) { }
	// RVA: 0x5BA520 Offset: 0x5B8D20 VA: 0x1805BA520
	private static double SanitizeTimeValue(double value, double defaultValue) { }
	// RVA: 0x5BA6D0 Offset: 0x5B8ED0 VA: 0x1805BA6D0
	public TimelineClip.ClipExtrapolation get_postExtrapolationMode() { }
	// RVA: 0x5BA700 Offset: 0x5B8F00 VA: 0x1805BA700
	internal void set_postExtrapolationMode(TimelineClip.ClipExtrapolation value) { }
	// RVA: 0x5BA740 Offset: 0x5B8F40 VA: 0x1805BA740
	public TimelineClip.ClipExtrapolation get_preExtrapolationMode() { }
	// RVA: 0x5BA770 Offset: 0x5B8F70 VA: 0x1805BA770
	internal void set_preExtrapolationMode(TimelineClip.ClipExtrapolation value) { }
	// RVA: 0x5BA7B0 Offset: 0x5B8FB0 VA: 0x1805BA7B0
	internal void SetPostExtrapolationTime(double time) { }
	// RVA: 0x5BA7C0 Offset: 0x5B8FC0 VA: 0x1805BA7C0
	internal void SetPreExtrapolationTime(double time) { }
	// RVA: 0x5BA7D0 Offset: 0x5B8FD0 VA: 0x1805BA7D0
	public bool IsPreExtrapolatedTime(double sequenceTime) { }
	// RVA: 0x5BA830 Offset: 0x5B9030 VA: 0x1805BA830
	public bool IsPostExtrapolatedTime(double sequenceTime) { }
	// RVA: 0x5BA890 Offset: 0x5B9090 VA: 0x1805BA890
	public double get_extrapolatedStart() { }
	// RVA: 0x5BA8B0 Offset: 0x5B90B0 VA: 0x1805BA8B0
	public double get_extrapolatedDuration() { }
	// RVA: 0x5BA9D0 Offset: 0x5B91D0 VA: 0x1805BA9D0
	private static double GetExtrapolatedTime(double time, TimelineClip.ClipExtrapolation mode, double duration) { }
	// RVA: 0x1D4960 Offset: 0x1D3160 VA: 0x1801D4960 Slot: 8
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }
	// RVA: 0x5B8D60 Offset: 0x5B7560 VA: 0x1805B8D60 Slot: 9
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
	// RVA: 0x5BAB40 Offset: 0x5B9340 VA: 0x1805BAB40 Slot: 3
	public override string ToString() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void UpdateDirty(double oldValue, double newValue) { }
	// RVA: 0x5BADF0 Offset: 0x5B95F0 VA: 0x1805BADF0
	private static void .cctor() { }
}

// Namespace: 
private static class TimelineClip.TimelineClipUpgrade // TypeDefIndex: 2359
{
	// Methods
	// RVA: 0x5C6440 Offset: 0x5C4C40 VA: 0x1805C6440
	public static void UpgradeClipInFromGlobalToLocal(TimelineClip clip) { }
}

// Namespace: 
public enum TimelineClip.ClipExtrapolation // TypeDefIndex: 2360
{
	// Fields
	public int value__; // 0x0
	public const TimelineClip.ClipExtrapolation None = 0; // 0x0
	public const TimelineClip.ClipExtrapolation Hold = 1; // 0x0
	public const TimelineClip.ClipExtrapolation Loop = 2; // 0x0
	public const TimelineClip.ClipExtrapolation PingPong = 3; // 0x0
	public const TimelineClip.ClipExtrapolation Continue = 4; // 0x0
}

// Namespace: 
public enum TimelineClip.BlendCurveMode // TypeDefIndex: 2361
{
	// Fields
	public int value__; // 0x0
	public const TimelineClip.BlendCurveMode Auto = 0; // 0x0
	public const TimelineClip.BlendCurveMode Manual = 1; // 0x0
}

// Namespace: UnityEngine.Timeline
[Serializable]
public class TimelineAsset : PlayableAsset, ISerializationCallbackReceiver, ITimelineClipAsset, IPropertyPreview // TypeDefIndex: 2362
{
	// Fields
	private const int k_LatestVersion = 0; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_Version; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<ScriptableObject> m_Tracks; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private double m_FixedDuration; // 0x28
	private TrackAsset[] m_CacheOutputTracks; // 0x30
	private List<TrackAsset> m_CacheRootTracks; // 0x38
	private List<TrackAsset> m_CacheFlattenedTracks; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TimelineAsset.EditorSettings m_EditorSettings; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TimelineAsset.DurationMode m_DurationMode; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private MarkerTrack m_MarkerTrack; // 0x58

	// Properties
	public TimelineAsset.EditorSettings editorSettings { get; }
	public override double duration { get; }
	public double fixedDuration { get; set; }
	public TimelineAsset.DurationMode durationMode { get; set; }
	public override IEnumerable<PlayableBinding> outputs { get; }
	public ClipCaps clipCaps { get; }
	public int outputTrackCount { get; }
	public int rootTrackCount { get; }
	internal IEnumerable<TrackAsset> flattenedTracks { get; }
	public MarkerTrack markerTrack { get; }
	internal List<ScriptableObject> trackObjects { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void UpgradeToLatestVersion() { }
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0
	public TimelineAsset.EditorSettings get_editorSettings() { }
	// RVA: 0x5B5B30 Offset: 0x5B4330 VA: 0x1805B5B30 Slot: 7
	public override double get_duration() { }
	// RVA: 0x5B5B50 Offset: 0x5B4350 VA: 0x1805B5B50
	public double get_fixedDuration() { }
	// RVA: 0x5B5C50 Offset: 0x5B4450 VA: 0x1805B5C50
	public void set_fixedDuration(double value) { }
	// RVA: 0x29E310 Offset: 0x29CB10 VA: 0x18029E310
	public TimelineAsset.DurationMode get_durationMode() { }
	// RVA: 0x5B5D00 Offset: 0x5B4500 VA: 0x1805B5D00
	public void set_durationMode(TimelineAsset.DurationMode value) { }
	// RVA: 0x5B5D10 Offset: 0x5B4510 VA: 0x1805B5D10 Slot: 8
	public override IEnumerable<PlayableBinding> get_outputs() { }
	// RVA: 0x5B5DD0 Offset: 0x5B45D0 VA: 0x1805B5DD0 Slot: 11
	public ClipCaps get_clipCaps() { }
	// RVA: 0x5B5FC0 Offset: 0x5B47C0 VA: 0x1805B5FC0
	public int get_outputTrackCount() { }
	// RVA: 0x5B5FF0 Offset: 0x5B47F0 VA: 0x1805B5FF0
	public int get_rootTrackCount() { }
	// RVA: 0x5B6080 Offset: 0x5B4880 VA: 0x1805B6080
	private void OnValidate() { }
	// RVA: 0x5B60C0 Offset: 0x5B48C0 VA: 0x1805B60C0
	private static float GetValidFramerate(float framerate) { }
	// RVA: 0x5B61C0 Offset: 0x5B49C0 VA: 0x1805B61C0
	public TrackAsset GetRootTrack(int index) { }
	// RVA: 0x5B6270 Offset: 0x5B4A70 VA: 0x1805B6270
	public IEnumerable<TrackAsset> GetRootTracks() { }
	// RVA: 0x5B6290 Offset: 0x5B4A90 VA: 0x1805B6290
	public TrackAsset GetOutputTrack(int index) { }
	// RVA: 0x5B62E0 Offset: 0x5B4AE0 VA: 0x1805B62E0
	public IEnumerable<TrackAsset> GetOutputTracks() { }
	// RVA: 0x5B6300 Offset: 0x5B4B00 VA: 0x1805B6300
	private void UpdateRootTrackCache() { }
	// RVA: 0x5B6580 Offset: 0x5B4D80 VA: 0x1805B6580
	private void UpdateOutputTrackCache() { }
	// RVA: 0x5B6810 Offset: 0x5B5010 VA: 0x1805B6810
	internal IEnumerable<TrackAsset> get_flattenedTracks() { }
	// RVA: 0x3120C0 Offset: 0x3108C0 VA: 0x1803120C0
	public MarkerTrack get_markerTrack() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	internal List<ScriptableObject> get_trackObjects() { }
	// RVA: 0x5B6980 Offset: 0x5B5180 VA: 0x1805B6980
	internal void AddTrackInternal(TrackAsset track) { }
	// RVA: 0x5B6A40 Offset: 0x5B5240 VA: 0x1805B6A40
	internal void RemoveTrack(TrackAsset track) { }
	// RVA: 0x5B6C80 Offset: 0x5B5480 VA: 0x1805B6C80 Slot: 6
	public override Playable CreatePlayable(PlayableGraph graph, GameObject go) { }
	// RVA: 0x5645D0 Offset: 0x562DD0 VA: 0x1805645D0 Slot: 9
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }
	// RVA: 0x5B6E70 Offset: 0x5B5670 VA: 0x1805B6E70 Slot: 10
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
	// RVA: 0x5B6E80 Offset: 0x5B5680 VA: 0x1805B6E80
	private void __internalAwake() { }
	// RVA: 0x5B7010 Offset: 0x5B5810 VA: 0x1805B7010 Slot: 12
	public void GatherProperties(PlayableDirector director, IPropertyCollector driver) { }
	// RVA: 0x5B7210 Offset: 0x5B5A10 VA: 0x1805B7210
	public void CreateMarkerTrack() { }
	// RVA: 0x5B6E70 Offset: 0x5B5670 VA: 0x1805B6E70
	internal void Invalidate() { }
	// RVA: 0x5B7320 Offset: 0x5B5B20 VA: 0x1805B7320
	private double CalculateDuration() { }
	// RVA: 0x5B75A0 Offset: 0x5B5DA0 VA: 0x1805B75A0
	private static void AddSubTracksRecursive(TrackAsset track, ref List<TrackAsset> allTracks) { }
	// RVA: 0x5B77E0 Offset: 0x5B5FE0 VA: 0x1805B77E0
	public TrackAsset CreateTrack(Type type, TrackAsset parent, string name) { }
	// RVA: 0x42AF80 Offset: 0x429780 VA: 0x18042AF80
	public T CreateTrack(TrackAsset parent, string trackName) { }
	// RVA: 0x42AE50 Offset: 0x429650 VA: 0x18042AE50
	public T CreateTrack(string trackName) { }
	// RVA: 0x42AD30 Offset: 0x429530 VA: 0x18042AD30
	public T CreateTrack() { }
	// RVA: 0x5B7BB0 Offset: 0x5B63B0 VA: 0x1805B7BB0
	public bool DeleteClip(TimelineClip clip) { }
	// RVA: 0x5B7DF0 Offset: 0x5B65F0 VA: 0x1805B7DF0
	public bool DeleteTrack(TrackAsset track) { }
	// RVA: 0x5B8260 Offset: 0x5B6A60 VA: 0x1805B8260
	internal void MoveLastTrackBefore(TrackAsset asset) { }
	// RVA: 0x5B84C0 Offset: 0x5B6CC0 VA: 0x1805B84C0
	internal TrackAsset AllocateTrack(TrackAsset trackAssetParent, string trackName, Type trackType) { }
	// RVA: 0x5B88B0 Offset: 0x5B70B0 VA: 0x1805B88B0
	private void DeleteRecordedAnimation(TrackAsset track) { }
	// RVA: 0x5B8A70 Offset: 0x5B7270 VA: 0x1805B8A70
	private void DeleteRecordedAnimation(TimelineClip clip) { }
	// RVA: 0x5B8C30 Offset: 0x5B7430 VA: 0x1805B8C30
	public void .ctor() { }
}

// Namespace: 
public enum TimelineAsset.DurationMode // TypeDefIndex: 2363
{
	// Fields
	public int value__; // 0x0
	public const TimelineAsset.DurationMode BasedOnClips = 0; // 0x0
	public const TimelineAsset.DurationMode FixedLength = 1; // 0x0
}

// Namespace: 
[Serializable]
public class TimelineAsset.EditorSettings // TypeDefIndex: 2364
{
	// Fields
	internal static readonly float kMinFps; // 0x0
	internal static readonly float kMaxFps; // 0x4
	internal static readonly float kDefaultFps; // 0x8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_Framerate; // 0x10

	// Properties
	public float fps { get; set; }

	// Methods
	// RVA: 0x34A110 Offset: 0x348910 VA: 0x18034A110
	public float get_fps() { }
	// RVA: 0x5C62B0 Offset: 0x5C4AB0 VA: 0x1805C62B0
	public void set_fps(float value) { }
	// RVA: 0x5C62D0 Offset: 0x5C4AD0 VA: 0x1805C62D0
	public void .ctor() { }
	// RVA: 0x5C6370 Offset: 0x5C4B70 VA: 0x1805C6370
	private static void .cctor() { }
}

// Namespace: 
private sealed class TimelineAsset.<get_outputs>d__27 : IEnumerable<PlayableBinding>, IEnumerable, IEnumerator<PlayableBinding>, IEnumerator, IDisposable // TypeDefIndex: 2365
{
	// Fields
	private int <>1__state; // 0x10
	private PlayableBinding <>2__current; // 0x18
	private int <>l__initialThreadId; // 0x38
	public TimelineAsset <>4__this; // 0x40
	private IEnumerator<TrackAsset> <>7__wrap1; // 0x48
	private IEnumerator<PlayableBinding> <>7__wrap2; // 0x50

	// Properties
	private PlayableBinding System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C55B0 Offset: 0x5C3DB0 VA: 0x1805C55B0
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C5D10 Offset: 0x5C4510 VA: 0x1805C5D10 Slot: 7
	private void System.IDisposable.Dispose() { }
	// RVA: 0x5C5DB0 Offset: 0x5C45B0 VA: 0x1805C5DB0 Slot: 8
	private bool MoveNext() { }
	// RVA: 0x5C5FF0 Offset: 0x5C47F0 VA: 0x1805C5FF0
	private void <>m__Finally1() { }
	// RVA: 0x5C6080 Offset: 0x5C4880 VA: 0x1805C6080
	private void <>m__Finally2() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C5680 Offset: 0x5C3E80 VA: 0x1805C5680 Slot: 6
	private PlayableBinding System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C6110 Offset: 0x5C4910 VA: 0x1805C6110 Slot: 9
	private object System.Collections.IEnumerator.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C61A0 Offset: 0x5C49A0 VA: 0x1805C61A0 Slot: 4
	private IEnumerator<PlayableBinding> System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C61A0 Offset: 0x5C49A0 VA: 0x1805C61A0 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: UnityEngine.Timeline
[Serializable]
public abstract class TrackAsset : PlayableAsset, ISerializationCallbackReceiver, IPropertyPreview, ICurvesOwner // TypeDefIndex: 2366
{
	// Fields
	private const int k_LatestVersion = 3; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_Version; // 0x18
	[ObsoleteAttribute] // RVA: 0x101900 Offset: 0x100D00 VA: 0x180101900
	[SerializeField] // RVA: 0x101900 Offset: 0x100D00 VA: 0x180101900
	[FormerlySerializedAsAttribute] // RVA: 0x101900 Offset: 0x100D00 VA: 0x180101900
	internal AnimationClip m_AnimClip; // 0x20
	private static TrackAsset.TransientBuildData s_BuildData; // 0x0
	internal const string kDefaultCurvesName = "Track Parameters"; // 0x0
	private static Action<TimelineClip, GameObject, Playable> OnClipPlayableCreate; // 0x18
	private static Action<TrackAsset, GameObject, Playable> OnTrackAnimationPlayableCreate; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_Locked; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_Muted; // 0x29
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_CustomPlayableFullTypename; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationClip m_Curves; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private PlayableAsset m_Parent; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<ScriptableObject> m_Children; // 0x48
	private int m_ItemsHash; // 0x50
	private TimelineClip[] m_ClipsCache; // 0x58
	private DiscreteTime m_Start; // 0x60
	private DiscreteTime m_End; // 0x68
	private bool m_CacheSorted; // 0x70
	private Nullable<bool> m_SupportsNotifications; // 0x71
	private static TrackAsset[] s_EmptyCache; // 0x28
	private IEnumerable<TrackAsset> m_ChildTrackCache; // 0x78
	private static Dictionary<Type, TrackBindingTypeAttribute> s_TrackBindingTypeAttributeCache; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected internal List<TimelineClip> m_Clips; // 0x80
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private MarkerList m_Markers; // 0x88

	// Properties
	public double start { get; }
	public double end { get; }
	public sealed override double duration { get; }
	public bool muted { get; set; }
	public bool mutedInHierarchy { get; }
	public TimelineAsset timelineAsset { get; }
	public PlayableAsset parent { get; set; }
	internal TimelineClip[] clips { get; }
	public virtual bool isEmpty { get; }
	public bool hasClips { get; }
	public bool hasCurves { get; }
	public bool isSubTrack { get; }
	public override IEnumerable<PlayableBinding> outputs { get; }
	internal string customPlayableTypename { get; set; }
	public AnimationClip curves { get; set; }
	private string UnityEngine.Timeline.ICurvesOwner.defaultCurvesName { get; }
	private Object UnityEngine.Timeline.ICurvesOwner.asset { get; }
	private Object UnityEngine.Timeline.ICurvesOwner.assetOwner { get; }
	private TrackAsset UnityEngine.Timeline.ICurvesOwner.targetTrack { get; }
	internal List<ScriptableObject> subTracksObjects { get; }
	public bool locked { get; set; }
	public bool lockedInHierarchy { get; }
	public bool supportsNotifications { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 16
	protected virtual void OnBeforeTrackSerialize() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 17
	protected virtual void OnAfterTrackDeserialize() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 18
	internal virtual void OnUpgradeFromVersion(int oldVersion) { }
	// RVA: 0x5BDDF0 Offset: 0x5BC5F0 VA: 0x1805BDDF0 Slot: 9
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }
	// RVA: 0x5BDFC0 Offset: 0x5BC7C0 VA: 0x1805BDFC0 Slot: 10
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void UpgradeToLatestVersion() { }
	// RVA: 0x5BE250 Offset: 0x5BCA50 VA: 0x1805BE250
	internal static void add_OnClipPlayableCreate(Action<TimelineClip, GameObject, Playable> value) { }
	// RVA: 0x5BE390 Offset: 0x5BCB90 VA: 0x1805BE390
	internal static void remove_OnClipPlayableCreate(Action<TimelineClip, GameObject, Playable> value) { }
	// RVA: 0x5BE4D0 Offset: 0x5BCCD0 VA: 0x1805BE4D0
	internal static void add_OnTrackAnimationPlayableCreate(Action<TrackAsset, GameObject, Playable> value) { }
	// RVA: 0x5BE610 Offset: 0x5BCE10 VA: 0x1805BE610
	internal static void remove_OnTrackAnimationPlayableCreate(Action<TrackAsset, GameObject, Playable> value) { }
	// RVA: 0x5BE750 Offset: 0x5BCF50 VA: 0x1805BE750
	public double get_start() { }
	// RVA: 0x5BE7F0 Offset: 0x5BCFF0 VA: 0x1805BE7F0
	public double get_end() { }
	// RVA: 0x5BE890 Offset: 0x5BD090 VA: 0x1805BE890 Slot: 7
	public sealed override double get_duration() { }
	// RVA: 0x5BE940 Offset: 0x5BD140 VA: 0x1805BE940
	public bool get_muted() { }
	// RVA: 0x5BE950 Offset: 0x5BD150 VA: 0x1805BE950
	public void set_muted(bool value) { }
	// RVA: 0x5BE960 Offset: 0x5BD160 VA: 0x1805BE960
	public bool get_mutedInHierarchy() { }
	// RVA: 0x5BEB60 Offset: 0x5BD360 VA: 0x1805BEB60
	public TimelineAsset get_timelineAsset() { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public PlayableAsset get_parent() { }
	// RVA: 0x16F140 Offset: 0x16D940 VA: 0x18016F140
	internal void set_parent(PlayableAsset value) { }
	// RVA: 0x5BED30 Offset: 0x5BD530 VA: 0x1805BED30
	public IEnumerable<TimelineClip> GetClips() { }
	// RVA: 0x5BED40 Offset: 0x5BD540 VA: 0x1805BED40
	internal TimelineClip[] get_clips() { }
	// RVA: 0x5BEE10 Offset: 0x5BD610 VA: 0x1805BEE10 Slot: 19
	public virtual bool get_isEmpty() { }
	// RVA: 0x5BEE60 Offset: 0x5BD660 VA: 0x1805BEE60
	public bool get_hasClips() { }
	// RVA: 0x5BEEF0 Offset: 0x5BD6F0 VA: 0x1805BEEF0 Slot: 20
	public bool get_hasCurves() { }
	// RVA: 0x5BF000 Offset: 0x5BD800 VA: 0x1805BF000
	public bool get_isSubTrack() { }
	// RVA: 0x5BF140 Offset: 0x5BD940 VA: 0x1805BF140 Slot: 8
	public override IEnumerable<PlayableBinding> get_outputs() { }
	// RVA: 0x5BF200 Offset: 0x5BDA00 VA: 0x1805BF200
	public IEnumerable<TrackAsset> GetChildTracks() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	internal string get_customPlayableTypename() { }
	// RVA: 0x1A20C0 Offset: 0x1A08C0 VA: 0x1801A20C0
	internal void set_customPlayableTypename(string value) { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0 Slot: 21
	public AnimationClip get_curves() { }
	// RVA: 0x1FCBF0 Offset: 0x1FB3F0 VA: 0x1801FCBF0
	internal void set_curves(AnimationClip value) { }
	// RVA: 0x5BF220 Offset: 0x5BDA20 VA: 0x1805BF220 Slot: 12
	private string UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName() { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630 Slot: 13
	private Object UnityEngine.Timeline.ICurvesOwner.get_asset() { }
	// RVA: 0x5BF290 Offset: 0x5BDA90 VA: 0x1805BF290 Slot: 14
	private Object UnityEngine.Timeline.ICurvesOwner.get_assetOwner() { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630 Slot: 15
	private TrackAsset UnityEngine.Timeline.ICurvesOwner.get_targetTrack() { }
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0
	internal List<ScriptableObject> get_subTracksObjects() { }
	// RVA: 0x1E5260 Offset: 0x1E3A60 VA: 0x1801E5260
	public bool get_locked() { }
	// RVA: 0x5BF2A0 Offset: 0x5BDAA0 VA: 0x1805BF2A0
	public void set_locked(bool value) { }
	// RVA: 0x5BF2B0 Offset: 0x5BDAB0 VA: 0x1805BF2B0
	public bool get_lockedInHierarchy() { }
	// RVA: 0x5BF4B0 Offset: 0x5BDCB0 VA: 0x1805BF4B0
	public bool get_supportsNotifications() { }
	// RVA: 0x5BF560 Offset: 0x5BDD60 VA: 0x1805BF560
	private void __internalAwake() { }
	// RVA: 0x5BF640 Offset: 0x5BDE40 VA: 0x1805BF640 Slot: 22
	public void CreateCurves(string curvesClipName) { }
	// RVA: 0x5BF720 Offset: 0x5BDF20 VA: 0x1805BF720 Slot: 23
	public virtual Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount) { }
	// RVA: 0x5BF7E0 Offset: 0x5BDFE0 VA: 0x1805BF7E0 Slot: 6
	public sealed override Playable CreatePlayable(PlayableGraph graph, GameObject go) { }
	// RVA: 0x5BF880 Offset: 0x5BE080 VA: 0x1805BF880
	public TimelineClip CreateDefaultClip() { }
	// RVA: 0x42B0B0 Offset: 0x4298B0 VA: 0x18042B0B0
	public TimelineClip CreateClip() { }
	// RVA: 0x5BFB50 Offset: 0x5BE350 VA: 0x1805BFB50
	public IMarker CreateMarker(Type type, double time) { }
	// RVA: 0x42B300 Offset: 0x429B00 VA: 0x18042B300
	public T CreateMarker(double time) { }
	// RVA: 0x5BFB70 Offset: 0x5BE370 VA: 0x1805BFB70
	public bool DeleteMarker(IMarker marker) { }
	// RVA: 0x5BFB80 Offset: 0x5BE380 VA: 0x1805BFB80
	public IEnumerable<IMarker> GetMarkers() { }
	// RVA: 0x5BFBA0 Offset: 0x5BE3A0 VA: 0x1805BFBA0
	public int GetMarkerCount() { }
	// RVA: 0x5BFBB0 Offset: 0x5BE3B0 VA: 0x1805BFBB0
	public IMarker GetMarker(int idx) { }
	// RVA: 0x5BFBC0 Offset: 0x5BE3C0 VA: 0x1805BFBC0
	internal TimelineClip CreateClip(Type requestedType) { }
	// RVA: 0x5BFD70 Offset: 0x5BE570 VA: 0x1805BFD70
	internal TimelineClip CreateAndAddNewClipOfType(Type requestedType) { }
	// RVA: 0x5BFDB0 Offset: 0x5BE5B0 VA: 0x1805BFDB0
	internal TimelineClip CreateClipOfType(Type requestedType) { }
	// RVA: 0x5C0060 Offset: 0x5BE860 VA: 0x1805C0060
	internal TimelineClip CreateClipFromPlayableAsset(IPlayableAsset asset) { }
	// RVA: 0x5C0320 Offset: 0x5BEB20 VA: 0x1805C0320
	private TimelineClip CreateClipFromAsset(ScriptableObject playableAsset) { }
	// RVA: 0x262A60 Offset: 0x261260 VA: 0x180262A60
	internal IEnumerable<ScriptableObject> GetMarkersRaw() { }
	// RVA: 0x5C0570 Offset: 0x5BED70 VA: 0x1805C0570
	internal void ClearMarkers() { }
	// RVA: 0x5C0580 Offset: 0x5BED80 VA: 0x1805C0580
	internal void AddMarker(ScriptableObject e) { }
	// RVA: 0x5C0590 Offset: 0x5BED90 VA: 0x1805C0590
	internal bool DeleteMarkerRaw(ScriptableObject marker) { }
	// RVA: 0x5C05D0 Offset: 0x5BEDD0 VA: 0x1805C05D0
	private int GetTimeRangeHash() { }
	// RVA: 0x5C0950 Offset: 0x5BF150 VA: 0x1805C0950
	internal void AddClip(TimelineClip newClip) { }
	// RVA: 0x5C0A20 Offset: 0x5BF220 VA: 0x1805C0A20
	private Playable CreateNotificationsPlayable(PlayableGraph graph, Playable mixerPlayable, GameObject go, Playable timelinePlayable) { }
	// RVA: 0x5C0CC0 Offset: 0x5BF4C0 VA: 0x1805C0CC0
	internal Playable CreatePlayableGraph(PlayableGraph graph, GameObject go, IntervalTree<RuntimeElement> tree, Playable timelinePlayable) { }
	// RVA: 0x5C10E0 Offset: 0x5BF8E0 VA: 0x1805C10E0 Slot: 24
	internal virtual Playable CompileClips(PlayableGraph graph, GameObject go, IList<TimelineClip> timelineClips, IntervalTree<RuntimeElement> tree) { }
	// RVA: 0x5C16C0 Offset: 0x5BFEC0 VA: 0x1805C16C0
	private void GatherCompilableTracks(IList<TrackAsset> tracks) { }
	// RVA: 0x5C18A0 Offset: 0x5C00A0 VA: 0x1805C18A0
	private void GatherNotificiations(List<IMarker> markers) { }
	// RVA: 0x5C1AB0 Offset: 0x5C02B0 VA: 0x1805C1AB0 Slot: 25
	internal virtual Playable OnCreateClipPlayableGraph(PlayableGraph graph, GameObject go, IntervalTree<RuntimeElement> tree) { }
	// RVA: 0x5C2190 Offset: 0x5C0990 VA: 0x1805C2190
	internal void ConfigureTrackAnimation(IntervalTree<RuntimeElement> tree, GameObject go, Playable blend) { }
	// RVA: 0x5C2340 Offset: 0x5C0B40 VA: 0x1805C2340
	internal void SortClips() { }
	// RVA: 0x5C2570 Offset: 0x5C0D70 VA: 0x1805C2570
	internal void ClearClipsInternal() { }
	// RVA: 0x5C2620 Offset: 0x5C0E20 VA: 0x1805C2620
	internal void ClearSubTracksInternal() { }
	// RVA: 0x5C26C0 Offset: 0x5C0EC0 VA: 0x1805C26C0
	internal void OnClipMove() { }
	// RVA: 0x5C26D0 Offset: 0x5C0ED0 VA: 0x1805C26D0
	internal TimelineClip CreateNewClipContainerInternal() { }
	// RVA: 0x5C2AE0 Offset: 0x5C12E0 VA: 0x1805C2AE0
	internal void AddChild(TrackAsset child) { }
	// RVA: 0x5C2BC0 Offset: 0x5C13C0 VA: 0x1805C2BC0
	internal void MoveLastTrackBefore(TrackAsset asset) { }
	// RVA: 0x5C2E10 Offset: 0x5C1610 VA: 0x1805C2E10
	internal bool RemoveSubTrack(TrackAsset child) { }
	// RVA: 0x5C2F10 Offset: 0x5C1710 VA: 0x1805C2F10
	internal void RemoveClip(TimelineClip clip) { }
	// RVA: 0x5C3000 Offset: 0x5C1800 VA: 0x1805C3000 Slot: 26
	internal virtual void GetEvaluationTime(out double outStart, out double outDuration) { }
	// RVA: 0x5C32C0 Offset: 0x5C1AC0 VA: 0x1805C32C0 Slot: 27
	internal virtual void GetSequenceTime(out double outStart, out double outDuration) { }
	// RVA: 0x5C32E0 Offset: 0x5C1AE0 VA: 0x1805C32E0 Slot: 28
	public virtual void GatherProperties(PlayableDirector director, IPropertyCollector driver) { }
	// RVA: 0x5C36C0 Offset: 0x5C1EC0 VA: 0x1805C36C0
	internal GameObject GetGameObjectBinding(PlayableDirector director) { }
	// RVA: 0x5C38B0 Offset: 0x5C20B0 VA: 0x1805C38B0
	internal bool ValidateClipType(Type clipType) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 29
	protected virtual void OnCreateClip(TimelineClip clip) { }
	// RVA: 0x5C3BC0 Offset: 0x5C23C0 VA: 0x1805C3BC0
	private void UpdateDuration() { }
	// RVA: 0x5C3CF0 Offset: 0x5C24F0 VA: 0x1805C3CF0 Slot: 30
	protected internal virtual int CalculateItemsHash() { }
	// RVA: 0x5C3DE0 Offset: 0x5C25E0 VA: 0x1805C3DE0 Slot: 31
	protected virtual Playable CreatePlayable(PlayableGraph graph, GameObject gameObject, TimelineClip clip) { }
	// RVA: 0x5C4130 Offset: 0x5C2930 VA: 0x1805C4130
	internal void Invalidate() { }
	// RVA: 0x5C4200 Offset: 0x5C2A00 VA: 0x1805C4200
	internal double GetNotificationDuration() { }
	// RVA: 0x5C4430 Offset: 0x5C2C30 VA: 0x1805C4430 Slot: 32
	internal virtual bool CanCompileClips() { }
	// RVA: 0x5C4460 Offset: 0x5C2C60 VA: 0x1805C4460
	internal bool IsCompilable() { }
	// RVA: 0x5C4710 Offset: 0x5C2F10 VA: 0x1805C4710
	private void UpdateChildTrackCache() { }
	// RVA: 0x5C4910 Offset: 0x5C3110 VA: 0x1805C4910 Slot: 33
	internal virtual int Hash() { }
	// RVA: 0x5C4950 Offset: 0x5C3150 VA: 0x1805C4950
	private int GetClipsHash() { }
	// RVA: 0x5C4C10 Offset: 0x5C3410 VA: 0x1805C4C10
	protected static int GetAnimationClipHash(AnimationClip clip) { }
	// RVA: 0x5C4DF0 Offset: 0x5C35F0 VA: 0x1805C4DF0
	private bool HasNotifications() { }
	// RVA: 0x5C4E10 Offset: 0x5C3610 VA: 0x1805C4E10
	private bool CanCompileNotifications() { }
	// RVA: 0x5C4E50 Offset: 0x5C3650 VA: 0x1805C4E50
	private bool CanCompileClipsRecursive() { }
	// RVA: 0x5C5030 Offset: 0x5C3830 VA: 0x1805C5030
	protected void .ctor() { }
	// RVA: 0x5C5120 Offset: 0x5C3920 VA: 0x1805C5120
	private static void .cctor() { }
}

// Namespace: 
private struct TrackAsset.TransientBuildData // TypeDefIndex: 2367
{
	// Fields
	public List<TrackAsset> trackList; // 0x0
	public List<TimelineClip> clipList; // 0x8
	public List<IMarker> markerList; // 0x10

	// Methods
	// RVA: 0x5C6A30 Offset: 0x5C5230 VA: 0x1805C6A30
	public static TrackAsset.TransientBuildData Create() { }
	// RVA: 0x21F50 Offset: 0x21350 VA: 0x180021F50
	public void Clear() { }
}

// Namespace: 
private sealed class TrackAsset.<get_outputs>d__65 : IEnumerable<PlayableBinding>, IEnumerable, IEnumerator<PlayableBinding>, IEnumerator, IDisposable // TypeDefIndex: 2368
{
	// Fields
	private int <>1__state; // 0x10
	private PlayableBinding <>2__current; // 0x18
	private int <>l__initialThreadId; // 0x38
	public TrackAsset <>4__this; // 0x40

	// Properties
	private PlayableBinding System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C55B0 Offset: 0x5C3DB0 VA: 0x1805C55B0
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	private void System.IDisposable.Dispose() { }
	// RVA: 0x5C65B0 Offset: 0x5C4DB0 VA: 0x1805C65B0 Slot: 8
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C5680 Offset: 0x5C3E80 VA: 0x1805C5680 Slot: 6
	private PlayableBinding System.Collections.Generic.IEnumerator<UnityEngine.Playables.PlayableBinding>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C6890 Offset: 0x5C5090 VA: 0x1805C6890 Slot: 9
	private object System.Collections.IEnumerator.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C6920 Offset: 0x5C5120 VA: 0x1805C6920 Slot: 4
	private IEnumerator<PlayableBinding> System.Collections.Generic.IEnumerable<UnityEngine.Playables.PlayableBinding>.GetEnumerator() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x5C6920 Offset: 0x5C5120 VA: 0x1805C6920 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
}

// Namespace: 
[Serializable]
private sealed class TrackAsset.<>c // TypeDefIndex: 2369
{
	// Fields
	public static readonly TrackAsset.<>c <>9; // 0x0
	public static Comparison<TimelineClip> <>9__120_0; // 0x8

	// Methods
	// RVA: 0x5C6530 Offset: 0x5C4D30 VA: 0x1805C6530
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x5C5C30 Offset: 0x5C4430 VA: 0x1805C5C30
	internal int <SortClips>b__120_0(TimelineClip clip1, TimelineClip clip2) { }
}

// Namespace: UnityEngine.Timeline
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum ClipCaps // TypeDefIndex: 2370
{
	// Fields
	public int value__; // 0x0
	public const ClipCaps None = 0; // 0x0
	public const ClipCaps Looping = 1; // 0x0
	public const ClipCaps Extrapolation = 2; // 0x0
	public const ClipCaps ClipIn = 4; // 0x0
	public const ClipCaps SpeedMultiplier = 8; // 0x0
	public const ClipCaps Blending = 16; // 0x0
	public const ClipCaps All = -1; // 0x0
}

// Namespace: UnityEngine.Timeline
internal static class TimelineClipCapsExtensions // TypeDefIndex: 2371
{
	// Methods
	// RVA: 0x5BAF10 Offset: 0x5B9710 VA: 0x1805BAF10
	public static bool SupportsExtrapolation(TimelineClip clip) { }
	// RVA: 0x5BAF40 Offset: 0x5B9740 VA: 0x1805BAF40
	public static bool HasAny(ClipCaps caps, ClipCaps flags) { }
}

// Namespace: UnityEngine.Timeline
internal struct DiscreteTime : IComparable // TypeDefIndex: 2372
{
	// Fields
	private const double k_Tick = 1E-12; // 0x0
	public static readonly DiscreteTime kMaxTime; // 0x0
	private readonly long m_DiscreteTime; // 0x0

	// Methods
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	private void .ctor(long time) { }
	// RVA: 0x21BB0 Offset: 0x20FB0 VA: 0x180021BB0
	public void .ctor(double time) { }
	// RVA: 0x21BC0 Offset: 0x20FC0 VA: 0x180021BC0
	public void .ctor(int time) { }
	// RVA: 0x21BD0 Offset: 0x20FD0 VA: 0x180021BD0
	public DiscreteTime OneTickBefore() { }
	// RVA: 0x21BE0 Offset: 0x20FE0 VA: 0x180021BE0
	public DiscreteTime OneTickAfter() { }
	// RVA: 0x1F6630 Offset: 0x1F4E30 VA: 0x1801F6630
	public static DiscreteTime FromTicks(long ticks) { }
	// RVA: 0x21BF0 Offset: 0x20FF0 VA: 0x180021BF0 Slot: 4
	public int CompareTo(object obj) { }
	// RVA: 0x18E10 Offset: 0x18210 VA: 0x180018E10
	public bool Equals(DiscreteTime other) { }
	// RVA: 0x21CE0 Offset: 0x210E0 VA: 0x180021CE0 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x5B0EA0 Offset: 0x5AF6A0 VA: 0x1805B0EA0
	private static long DoubleToDiscreteTime(double time) { }
	// RVA: 0x5B0F70 Offset: 0x5AF770 VA: 0x1805B0F70
	private static long IntToDiscreteTime(int time) { }
	// RVA: 0x5B1010 Offset: 0x5AF810 VA: 0x1805B1010
	private static double ToDouble(long time) { }
	// RVA: 0x5B1030 Offset: 0x5AF830 VA: 0x1805B1030
	public static double op_Explicit(DiscreteTime b) { }
	// RVA: 0x5B10D0 Offset: 0x5AF8D0 VA: 0x1805B10D0
	public static DiscreteTime op_Explicit(double time) { }
	// RVA: 0x5B1170 Offset: 0x5AF970 VA: 0x1805B1170
	public static DiscreteTime op_Implicit(int time) { }
	// RVA: 0x33BBF0 Offset: 0x33A3F0 VA: 0x18033BBF0
	public static bool op_Equality(DiscreteTime lhs, DiscreteTime rhs) { }
	// RVA: 0x5B11A0 Offset: 0x5AF9A0 VA: 0x1805B11A0
	public static bool op_Inequality(DiscreteTime lhs, DiscreteTime rhs) { }
	// RVA: 0x494F20 Offset: 0x493720 VA: 0x180494F20
	public static bool op_LessThanOrEqual(DiscreteTime lhs, DiscreteTime rhs) { }
	// RVA: 0x494F40 Offset: 0x493740 VA: 0x180494F40
	public static bool op_GreaterThanOrEqual(DiscreteTime lhs, DiscreteTime rhs) { }
	// RVA: 0x5B1240 Offset: 0x5AFA40 VA: 0x1805B1240
	public static DiscreteTime op_Subtraction(DiscreteTime lhs, DiscreteTime rhs) { }
	// RVA: 0x21DB0 Offset: 0x211B0 VA: 0x180021DB0 Slot: 3
	public override string ToString() { }
	// RVA: 0x18E20 Offset: 0x18220 VA: 0x180018E20 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x5B1250 Offset: 0x5AFA50 VA: 0x1805B1250
	public static DiscreteTime Max(DiscreteTime lhs, DiscreteTime rhs) { }
	// RVA: 0x5B12F0 Offset: 0x5AFAF0 VA: 0x1805B12F0
	public static long GetNearestTick(double time) { }
	// RVA: 0x5B1390 Offset: 0x5AFB90 VA: 0x1805B1390
	private static void .cctor() { }
}

// Namespace: UnityEngine.Timeline
internal class InfiniteRuntimeClip : RuntimeElement // TypeDefIndex: 2373
{
	// Fields
	private Playable m_Playable; // 0x18
	private static readonly long kIntervalEnd; // 0x0

	// Properties
	public override long intervalStart { get; }
	public override long intervalEnd { get; }
	public override bool enable { set; }

	// Methods
	// RVA: 0x5B1F20 Offset: 0x5B0720 VA: 0x1805B1F20
	public void .ctor(Playable playable) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 6
	public override long get_intervalStart() { }
	// RVA: 0x5B1F30 Offset: 0x5B0730 VA: 0x1805B1F30 Slot: 7
	public override long get_intervalEnd() { }
	// RVA: 0x5B1FD0 Offset: 0x5B07D0 VA: 0x1805B1FD0 Slot: 8
	public override void set_enable(bool value) { }
	// RVA: 0x5B2070 Offset: 0x5B0870 VA: 0x1805B2070 Slot: 9
	public override void EvaluateAt(double localTime, FrameData frameData) { }
	// RVA: 0x5B2100 Offset: 0x5B0900 VA: 0x1805B2100
	private static void .cctor() { }
}

// Namespace: UnityEngine.Timeline
internal interface IInterval // TypeDefIndex: 2374
{
	// Properties
	public abstract long intervalStart { get; }
	public abstract long intervalEnd { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract long get_intervalStart() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract long get_intervalEnd() { }
}

// Namespace: UnityEngine.Timeline
internal struct IntervalTreeNode // TypeDefIndex: 2375
{
	// Fields
	public long center; // 0x0
	public int first; // 0x8
	public int last; // 0xC
	public int left; // 0x10
	public int right; // 0x14
}

// Namespace: UnityEngine.Timeline
internal class IntervalTree<T> // TypeDefIndex: 2376
{
	// Fields
	private readonly List<IntervalTree.Entry<T>> m_Entries; // 0x0
	private readonly List<IntervalTreeNode> m_Nodes; // 0x0
	private bool <dirty>k__BackingField; // 0x0

	// Properties
	public bool dirty { get; set; }

	// Methods
	// RVA: 0x20B410 Offset: 0x209C10 VA: 0x18020B410
	public bool get_dirty() { }
	// RVA: 0x20B420 Offset: 0x209C20 VA: 0x18020B420
	internal void set_dirty(bool value) { }
	// RVA: 0x7266E0 Offset: 0x724EE0 VA: 0x1807266E0
	public void Add(T item) { }
	// RVA: 0x7267F0 Offset: 0x724FF0 VA: 0x1807267F0
	public void IntersectsWith(long value, List<T> results) { }
	// RVA: 0x726950 Offset: 0x725150 VA: 0x180726950
	private void Query(IntervalTreeNode intervalTreeNode, long value, List<T> results) { }
	// RVA: 0x726BF0 Offset: 0x7253F0 VA: 0x180726BF0
	private void Rebuild() { }
	// RVA: 0x726E50 Offset: 0x725650 VA: 0x180726E50
	private int Rebuild(int start, int end) { }
	// RVA: 0x727420 Offset: 0x725C20 VA: 0x180727420
	public void .ctor() { }
}

// Namespace: 
internal struct IntervalTree.Entry<T> // TypeDefIndex: 2377
{
	// Fields
	public long intervalStart; // 0x0
	public long intervalEnd; // 0x0
	public T item; // 0x0
}

// Namespace: UnityEngine.Timeline
internal class RuntimeClip : RuntimeClipBase // TypeDefIndex: 2378
{
	// Fields
	private TimelineClip m_Clip; // 0x18
	private Playable m_Playable; // 0x20
	private Playable m_ParentMixer; // 0x30

	// Properties
	public override double start { get; }
	public override double duration { get; }
	public TimelineClip clip { get; }
	public Playable mixer { get; }
	public Playable playable { get; }
	public override bool enable { set; }

	// Methods
	// RVA: 0x5B39A0 Offset: 0x5B21A0 VA: 0x1805B39A0 Slot: 11
	public override double get_start() { }
	// RVA: 0x5B39D0 Offset: 0x5B21D0 VA: 0x1805B39D0 Slot: 12
	public override double get_duration() { }
	// RVA: 0x5B39F0 Offset: 0x5B21F0 VA: 0x1805B39F0
	public void .ctor(TimelineClip clip, Playable clipPlayable, Playable parentMixer) { }
	// RVA: 0x5B39F0 Offset: 0x5B21F0 VA: 0x1805B39F0
	private void Create(TimelineClip clip, Playable clipPlayable, Playable parentMixer) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public TimelineClip get_clip() { }
	// RVA: 0x5B3AA0 Offset: 0x5B22A0 VA: 0x1805B3AA0
	public Playable get_mixer() { }
	// RVA: 0x20C190 Offset: 0x20A990 VA: 0x18020C190
	public Playable get_playable() { }
	// RVA: 0x5B3AB0 Offset: 0x5B22B0 VA: 0x1805B3AB0 Slot: 8
	public override void set_enable(bool value) { }
	// RVA: 0x5B3C00 Offset: 0x5B2400 VA: 0x1805B3C00
	public void SetTime(double time) { }
	// RVA: 0x5B3C90 Offset: 0x5B2490 VA: 0x1805B3C90
	public void SetDuration(double duration) { }
	// RVA: 0x5B3D20 Offset: 0x5B2520 VA: 0x1805B3D20 Slot: 9
	public override void EvaluateAt(double localTime, FrameData frameData) { }
	// RVA: 0x5B3FD0 Offset: 0x5B27D0 VA: 0x1805B3FD0 Slot: 10
	public override void Reset() { }
}

// Namespace: UnityEngine.Timeline
internal abstract class RuntimeClipBase : RuntimeElement // TypeDefIndex: 2379
{
	// Properties
	public abstract double start { get; }
	public abstract double duration { get; }
	public override long intervalStart { get; }
	public override long intervalEnd { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 11
	public abstract double get_start() { }
	// RVA: -1 Offset: -1 Slot: 12
	public abstract double get_duration() { }
	// RVA: 0x5B4020 Offset: 0x5B2820 VA: 0x1805B4020 Slot: 6
	public override long get_intervalStart() { }
	// RVA: 0x5B40D0 Offset: 0x5B28D0 VA: 0x1805B40D0 Slot: 7
	public override long get_intervalEnd() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: UnityEngine.Timeline
internal abstract class RuntimeElement : IInterval // TypeDefIndex: 2380
{
	// Fields
	private int <intervalBit>k__BackingField; // 0x10

	// Properties
	public abstract long intervalStart { get; }
	public abstract long intervalEnd { get; }
	public int intervalBit { get; set; }
	public abstract bool enable { set; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 6
	public abstract long get_intervalStart() { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract long get_intervalEnd() { }
	// RVA: 0x198900 Offset: 0x197100 VA: 0x180198900
	public int get_intervalBit() { }
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void set_intervalBit(int value) { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract void set_enable(bool value) { }
	// RVA: -1 Offset: -1 Slot: 9
	public abstract void EvaluateAt(double localTime, FrameData frameData) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 10
	public virtual void Reset() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: UnityEngine.Timeline
public interface IMarker // TypeDefIndex: 2381
{
	// Properties
	public abstract double time { get; set; }
	public abstract TrackAsset parent { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract double get_time() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void set_time(double value) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract TrackAsset get_parent() { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void Initialize(TrackAsset parent) { }
}

// Namespace: UnityEngine.Timeline
public interface INotificationOptionProvider // TypeDefIndex: 2382
{
	// Properties
	public abstract NotificationFlags flags { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract NotificationFlags get_flags() { }
}

// Namespace: UnityEngine.Timeline
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[Serializable]
internal struct MarkerList : ISerializationCallbackReceiver // TypeDefIndex: 2383
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<ScriptableObject> m_Objects; // 0x0
	private List<IMarker> m_Cache; // 0x8
	private bool m_CacheDirty; // 0x10
	private bool m_HasNotifications; // 0x11

	// Properties
	public List<IMarker> markers { get; }
	public int Count { get; }
	public IMarker Item { get; }

	// Methods
	// RVA: 0x21E00 Offset: 0x21200 VA: 0x180021E00
	public List<IMarker> get_markers() { }
	// RVA: 0x21E20 Offset: 0x21220 VA: 0x180021E20
	public void .ctor(int capacity) { }
	// RVA: 0x21E30 Offset: 0x21230 VA: 0x180021E30
	public void Add(ScriptableObject item) { }
	// RVA: 0x21E40 Offset: 0x21240 VA: 0x180021E40
	public bool Remove(IMarker item) { }
	// RVA: 0x21E50 Offset: 0x21250 VA: 0x180021E50
	public bool Remove(ScriptableObject item, TimelineAsset timelineAsset, PlayableAsset thingToDirty) { }
	// RVA: 0x21E60 Offset: 0x21260 VA: 0x180021E60
	public void Clear() { }
	// RVA: 0x21E00 Offset: 0x21200 VA: 0x180021E00
	public IEnumerable<IMarker> GetMarkers() { }
	// RVA: 0x21E70 Offset: 0x21270 VA: 0x180021E70
	public int get_Count() { }
	// RVA: 0x21E80 Offset: 0x21280 VA: 0x180021E80
	public IMarker get_Item(int idx) { }
	// RVA: 0x1E50 Offset: 0x1250 VA: 0x180001E50
	public List<ScriptableObject> GetRawMarkerList() { }
	// RVA: 0x21E90 Offset: 0x21290 VA: 0x180021E90
	public IMarker CreateMarker(Type type, double time, TrackAsset owner) { }
	// RVA: 0x21EA0 Offset: 0x212A0 VA: 0x180021EA0
	public bool HasNotifications() { }
	// RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80 Slot: 4
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }
	// RVA: 0x21EC0 Offset: 0x212C0 VA: 0x180021EC0 Slot: 5
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
	// RVA: 0x21ED0 Offset: 0x212D0 VA: 0x180021ED0
	private void BuildCache() { }
}

// Namespace: UnityEngine.Timeline
[TrackBindingTypeAttribute] // RVA: 0x101960 Offset: 0x100D60 VA: 0x180101960
[Serializable]
public class MarkerTrack : TrackAsset // TypeDefIndex: 2384
{
	// Properties
	public override IEnumerable<PlayableBinding> outputs { get; }

	// Methods
	// RVA: 0x5B2D20 Offset: 0x5B1520 VA: 0x1805B2D20 Slot: 8
	public override IEnumerable<PlayableBinding> get_outputs() { }
	// RVA: 0x5B3050 Offset: 0x5B1850 VA: 0x1805B3050
	public void .ctor() { }
}

// Namespace: UnityEngine.Timeline
[TrackClipTypeAttribute] // RVA: 0x1019F0 Offset: 0x100DF0 VA: 0x1801019F0
[SupportsChildTracksAttribute] // RVA: 0x1019F0 Offset: 0x100DF0 VA: 0x1801019F0
[Serializable]
public class GroupTrack : TrackAsset // TypeDefIndex: 2385
{
	// Properties
	public override IEnumerable<PlayableBinding> outputs { get; }

	// Methods
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 32
	internal override bool CanCompileClips() { }
	// RVA: 0x5B1C40 Offset: 0x5B0440 VA: 0x1805B1C40 Slot: 8
	public override IEnumerable<PlayableBinding> get_outputs() { }
	// RVA: 0x5B1CE0 Offset: 0x5B04E0 VA: 0x1805B1CE0
	public void .ctor() { }
}

// Namespace: UnityEngine.Timeline
public interface ILayerable // TypeDefIndex: 2386
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract Playable CreateLayerMixer(PlayableGraph graph, GameObject go, int inputCount) { }
}

// Namespace: UnityEngine.Timeline
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[Serializable]
public enum NotificationFlags // TypeDefIndex: 2387
{
	// Fields
	public short value__; // 0x0
	public const NotificationFlags TriggerInEditMode = 1; // 0x0
	public const NotificationFlags Retroactive = 2; // 0x0
	public const NotificationFlags TriggerOnce = 4; // 0x0
}

// Namespace: UnityEngine.Timeline
public class TimeNotificationBehaviour : PlayableBehaviour // TypeDefIndex: 2388
{
	// Fields
	private readonly List<TimeNotificationBehaviour.NotificationEntry> m_Notifications; // 0x10
	private double m_PreviousTime; // 0x18
	private bool m_NeedSortNotifications; // 0x20
	private Playable m_TimeSource; // 0x28

	// Properties
	set; }

	// Methods
	// RVA: 0x5B41B0 Offset: 0x5B29B0 VA: 0x1805B41B0
	public void set_timeSource(Playable value) { }
	// RVA: 0x5B41C0 Offset: 0x5B29C0 VA: 0x1805B41C0
	public static ScriptPlayable<TimeNotificationBehaviour> Create(PlayableGraph graph, double duration, DirectorWrapMode loopMode) { }
	// RVA: 0x5B44E0 Offset: 0x5B2CE0 VA: 0x1805B44E0
	public void AddNotification(double time, INotification payload, NotificationFlags flags = 2) { }
	// RVA: 0x5B4640 Offset: 0x5B2E40 VA: 0x1805B4640 Slot: 13
	public override void OnGraphStart(Playable playable) { }
	// RVA: 0x5B4850 Offset: 0x5B3050 VA: 0x1805B4850 Slot: 18
	public override void OnBehaviourPause(Playable playable, FrameData info) { }
	// RVA: 0x5B4AB0 Offset: 0x5B32B0 VA: 0x1805B4AB0 Slot: 19
	public override void PrepareFrame(Playable playable, FrameData info) { }
	// RVA: 0x5B5010 Offset: 0x5B3810 VA: 0x1805B5010
	private void SortNotifications() { }
	// RVA: 0x5B5180 Offset: 0x5B3980 VA: 0x1805B5180
	private static bool CanRestoreNotification(TimeNotificationBehaviour.NotificationEntry e, FrameData info, double currentTime, double previousTime) { }
	// RVA: 0x5B51C0 Offset: 0x5B39C0 VA: 0x1805B51C0
	private void TriggerNotificationsInRange(double start, double end, FrameData info, Playable playable, bool checkState) { }
	// RVA: 0x5B5580 Offset: 0x5B3D80 VA: 0x1805B5580
	private void SyncDurationWithExternalSource(Playable playable) { }
	// RVA: 0x5B5660 Offset: 0x5B3E60 VA: 0x1805B5660
	private static void Trigger_internal(Playable playable, PlayableOutput output, ref TimeNotificationBehaviour.NotificationEntry e) { }
	// RVA: 0x1FB8D0 Offset: 0x1FA0D0 VA: 0x1801FB8D0
	private static void Restore_internal(ref TimeNotificationBehaviour.NotificationEntry e) { }
	// RVA: 0x5B5710 Offset: 0x5B3F10 VA: 0x1805B5710
	public void .ctor() { }
}

// Namespace: 
private struct TimeNotificationBehaviour.NotificationEntry // TypeDefIndex: 2389
{
	// Fields
	public double time; // 0x0
	public INotification payload; // 0x8
	public bool notificationFired; // 0x10
	public NotificationFlags flags; // 0x12

	// Properties
	public bool triggerInEditor { get; }
	public bool prewarm { get; }
	public bool triggerOnce { get; }

	// Methods
	// RVA: 0x21F00 Offset: 0x21300 VA: 0x180021F00
	public bool get_triggerInEditor() { }
	// RVA: 0x21F10 Offset: 0x21310 VA: 0x180021F10
	public bool get_prewarm() { }
	// RVA: 0x21F20 Offset: 0x21320 VA: 0x180021F20
	public bool get_triggerOnce() { }
}

// Namespace: 
[Serializable]
private sealed class TimeNotificationBehaviour.<>c // TypeDefIndex: 2390
{
	// Fields
	public static readonly TimeNotificationBehaviour.<>c <>9; // 0x0
	public static Comparison<TimeNotificationBehaviour.NotificationEntry> <>9__12_0; // 0x8

	// Methods
	// RVA: 0x5C5C70 Offset: 0x5C4470 VA: 0x1805C5C70
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x5C5CF0 Offset: 0x5C44F0 VA: 0x1805C5CF0
	internal int <SortNotifications>b__12_0(TimeNotificationBehaviour.NotificationEntry x, TimeNotificationBehaviour.NotificationEntry y) { }
}

// Namespace: UnityEngine.Timeline
[Serializable]
public class PlayableTrack : TrackAsset // TypeDefIndex: 2391
{
	// Methods
	// RVA: 0x5B3820 Offset: 0x5B2020 VA: 0x1805B3820 Slot: 29
	protected override void OnCreateClip(TimelineClip clip) { }
	// RVA: 0x5B3910 Offset: 0x5B2110 VA: 0x1805B3910
	public void .ctor() { }
}

// Namespace: UnityEngine.Timeline
[AttributeUsageAttribute] // RVA: 0x101AA0 Offset: 0x100EA0 VA: 0x180101AA0
public class TrackClipTypeAttribute : Attribute // TypeDefIndex: 2392
{
	// Fields
	public readonly Type inspectedType; // 0x10
	public readonly bool allowAutoCreate; // 0x18

	// Methods
	// RVA: 0x276B50 Offset: 0x275350 VA: 0x180276B50
	public void .ctor(Type clipClass) { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(Type clipClass, bool allowAutoCreate) { }
}

// Namespace: UnityEngine.Timeline
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum TrackBindingFlags // TypeDefIndex: 2393
{
	// Fields
	public int value__; // 0x0
	public const TrackBindingFlags None = 0; // 0x0
	public const TrackBindingFlags AllowCreateComponent = 1; // 0x0
	public const TrackBindingFlags All = 1; // 0x0
}

// Namespace: UnityEngine.Timeline
[AttributeUsageAttribute] // RVA: 0xD9D50 Offset: 0xD9150 VA: 0x1800D9D50
public class TrackBindingTypeAttribute : Attribute // TypeDefIndex: 2394
{
	// Fields
	public readonly Type type; // 0x10
	public readonly TrackBindingFlags flags; // 0x18

	// Methods
	// RVA: 0x5C5380 Offset: 0x5C3B80 VA: 0x1805C5380
	public void .ctor(Type type) { }
	// RVA: 0x272680 Offset: 0x270E80 VA: 0x180272680
	public void .ctor(Type type, TrackBindingFlags flags) { }
}

// Namespace: UnityEngine.Timeline
[AttributeUsageAttribute] // RVA: 0x101AC0 Offset: 0x100EC0 VA: 0x180101AC0
internal class SupportsChildTracksAttribute : Attribute // TypeDefIndex: 2395
{
	// Fields
	public readonly Type childType; // 0x10
	public readonly int levels; // 0x18

	// Methods
	// RVA: 0x272680 Offset: 0x270E80 VA: 0x180272680
	public void .ctor(Type childType, int levels = 2147483647) { }
}

// Namespace: UnityEngine.Timeline
public interface ITimelineClipAsset // TypeDefIndex: 2396
{
	// Properties
	public abstract ClipCaps clipCaps { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract ClipCaps get_clipCaps() { }
}

// Namespace: UnityEngine.Timeline
internal interface ITimelineEvaluateCallback // TypeDefIndex: 2397
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Evaluate() { }
}

// Namespace: UnityEngine.Timeline
public class TimelinePlayable : PlayableBehaviour // TypeDefIndex: 2398
{
	// Fields
	private IntervalTree<RuntimeElement> m_IntervalTree; // 0x10
	private List<RuntimeElement> m_ActiveClips; // 0x18
	private List<RuntimeElement> m_CurrentListOfActiveClips; // 0x20
	private int m_ActiveBit; // 0x28
	private List<ITimelineEvaluateCallback> m_EvaluateCallbacks; // 0x30
	private Dictionary<TrackAsset, Playable> m_PlayableCache; // 0x38
	internal static bool muteAudioScrubbing; // 0x0

	// Methods
	// RVA: 0x5BBB20 Offset: 0x5BA320 VA: 0x1805BBB20
	public static ScriptPlayable<TimelinePlayable> Create(PlayableGraph graph, IEnumerable<TrackAsset> tracks, GameObject go, bool autoRebalance, bool createOutputs) { }
	// RVA: 0x5BBE70 Offset: 0x5BA670 VA: 0x1805BBE70
	public void Compile(PlayableGraph graph, Playable timelinePlayable, IEnumerable<TrackAsset> tracks, GameObject go, bool autoRebalance, bool createOutputs) { }
	// RVA: 0x5BC140 Offset: 0x5BA940 VA: 0x1805BC140
	private void CompileTrackList(PlayableGraph graph, Playable timelinePlayable, IEnumerable<TrackAsset> tracks, GameObject go, bool createOutputs) { }
	// RVA: 0x5BC3E0 Offset: 0x5BABE0 VA: 0x1805BC3E0
	private void CreateTrackOutput(PlayableGraph graph, TrackAsset track, GameObject go, Playable playable, int port) { }
	// RVA: 0x5BC9A0 Offset: 0x5BB1A0 VA: 0x1805BC9A0
	private void EvaluateWeightsForAnimationPlayableOutput(TrackAsset track, AnimationPlayableOutput animOutput) { }
	// RVA: 0x5BCBA0 Offset: 0x5BB3A0 VA: 0x1805BCBA0
	private static Playable CreatePlayableGraph(PlayableGraph graph, TrackAsset asset, GameObject go, IntervalTree<RuntimeElement> tree, Playable timelinePlayable) { }
	// RVA: 0x5BCC10 Offset: 0x5BB410 VA: 0x1805BCC10
	private Playable CreateTrackPlayable(PlayableGraph graph, Playable timelinePlayable, TrackAsset track, GameObject go, bool createOutputs) { }
	// RVA: 0x5BD250 Offset: 0x5BBA50 VA: 0x1805BD250 Slot: 19
	public override void PrepareFrame(Playable playable, FrameData info) { }
	// RVA: 0x5BD2A0 Offset: 0x5BBAA0 VA: 0x1805BD2A0
	private void Evaluate(Playable playable, FrameData frameData) { }
	// RVA: 0x5BDAB0 Offset: 0x5BC2B0 VA: 0x1805BDAB0
	private void CacheTrack(TrackAsset track, Playable playable, int port, Playable parent) { }
	// RVA: 0x5BDB80 Offset: 0x5BC380 VA: 0x1805BDB80
	public void .ctor() { }
	// RVA: 0x5BDCA0 Offset: 0x5BC4A0 VA: 0x1805BDCA0
	private static void .cctor() { }
}

// Namespace: UnityEngine.Timeline
internal static class Extrapolation // TypeDefIndex: 2399
{
	// Fields
	internal static readonly double kMinExtrapolationTime; // 0xA15AC4

	// Methods
	// RVA: 0x5B1410 Offset: 0x5AFC10 VA: 0x1805B1410
	internal static void CalculateExtrapolationTimes(TrackAsset asset) { }
	// RVA: 0x5B1960 Offset: 0x5B0160 VA: 0x1805B1960
	private static TimelineClip[] SortClipsByStartTime(TimelineClip[] clips) { }
	// RVA: 0x5B1B90 Offset: 0x5B0390 VA: 0x1805B1B90
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class Extrapolation.<>c // TypeDefIndex: 2400
{
	// Fields
	public static readonly Extrapolation.<>c <>9; // 0x0
	public static Comparison<TimelineClip> <>9__2_0; // 0x8

	// Methods
	// RVA: 0x5C5BB0 Offset: 0x5C43B0 VA: 0x1805C5BB0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x5C5C30 Offset: 0x5C4430 VA: 0x1805C5C30
	internal int <SortClipsByStartTime>b__2_0(TimelineClip clip1, TimelineClip clip2) { }
}

// Namespace: UnityEngine.Timeline
internal static class HashUtility // TypeDefIndex: 2401
{
	// Methods
	// RVA: 0x5B1D70 Offset: 0x5B0570 VA: 0x1805B1D70
	public static int CombineHash(int h1, int h2) { }
	// RVA: 0x5B1D90 Offset: 0x5B0590 VA: 0x1805B1D90
	public static int CombineHash(int h1, int h2, int h3) { }
	// RVA: 0x5B1DD0 Offset: 0x5B05D0 VA: 0x1805B1DD0
	public static int CombineHash(int h1, int h2, int h3, int h4) { }
	// RVA: 0x5B1E20 Offset: 0x5B0620 VA: 0x1805B1E20
	public static int CombineHash(int h1, int h2, int h3, int h4, int h5) { }
	// RVA: 0x5B1E90 Offset: 0x5B0690 VA: 0x1805B1E90
	public static int CombineHash(int h1, int h2, int h3, int h4, int h5, int h6) { }
}

// Namespace: UnityEngine.Timeline
public interface IPropertyCollector // TypeDefIndex: 2402
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void PushActiveGameObject(GameObject gameObject) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void PopActiveGameObject() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void AddFromClip(AnimationClip clip) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void AddFromName(string name) { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract void AddObjectProperties(Object obj, AnimationClip clip) { }
}

// Namespace: UnityEngine.Timeline
public interface IPropertyPreview // TypeDefIndex: 2403
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GatherProperties(PlayableDirector director, IPropertyCollector driver) { }
}

// Namespace: UnityEngine.Timeline
internal static class NotificationUtilities // TypeDefIndex: 2404
{
	// Methods
	// RVA: 0x5B31A0 Offset: 0x5B19A0 VA: 0x1805B31A0
	public static ScriptPlayable<TimeNotificationBehaviour> CreateNotificationsPlayable(PlayableGraph graph, IEnumerable<IMarker> markers, GameObject go) { }
	// RVA: 0x5B3640 Offset: 0x5B1E40 VA: 0x1805B3640
	public static bool TrackTypeSupportsNotifications(Type type) { }
}

// Namespace: UnityEngine.Timeline
internal static class TimeUtility // TypeDefIndex: 2405
{
	// Fields
	public static readonly double kTimeEpsilon; // 0x0
	public static readonly double kFrameRateEpsilon; // 0x8
	public static readonly double k_MaxTimelineDurationInSeconds; // 0x10

	// Methods
	// RVA: 0x5B5860 Offset: 0x5B4060 VA: 0x1805B5860
	public static double GetAnimationClipLength(AnimationClip clip) { }
	// RVA: 0x5B5A80 Offset: 0x5B4280 VA: 0x1805B5A80
	private static void .cctor() { }
}

// Namespace: UnityEngine.Timeline
internal static class TimelineCreateUtilities // TypeDefIndex: 2406
{
	// Methods
	// RVA: 0x5BAF50 Offset: 0x5B9750 VA: 0x1805BAF50
	public static string GenerateUniqueActorName(List<ScriptableObject> tracks, string name) { }
	// RVA: 0x5BB2A0 Offset: 0x5B9AA0 VA: 0x1805BB2A0
	public static void SaveAssetIntoObject(Object childAsset, Object masterAsset) { }
	// RVA: 0x5BB400 Offset: 0x5B9C00 VA: 0x1805BB400
	public static AnimationClip CreateAnimationClipForTrack(string name, TrackAsset track, bool isLegacy) { }
	// RVA: 0x5BB7C0 Offset: 0x5B9FC0 VA: 0x1805BB7C0
	public static bool ValidateParentTrack(TrackAsset parent, Type childType) { }
}

// Namespace: 
private sealed class TimelineCreateUtilities.<>c__DisplayClass0_0 // TypeDefIndex: 2407
{
	// Fields
	public string name; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x5C6480 Offset: 0x5C4C80 VA: 0x1805C6480
	internal bool <GenerateUniqueActorName>b__0(ScriptableObject x) { }
}

// Namespace: 
private sealed class TimelineCreateUtilities.<>c__DisplayClass0_1 // TypeDefIndex: 2408
{
	// Fields
	public string result; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x5C6480 Offset: 0x5C4C80 VA: 0x1805C6480
	internal bool <GenerateUniqueActorName>b__1(ScriptableObject x) { }
}

// Namespace: UnityEngine.Timeline
internal static class TimelineUndo // TypeDefIndex: 2409
{
	// Methods
	// RVA: 0x5BDD20 Offset: 0x5BC520 VA: 0x1805BDD20
	public static void PushDestroyUndo(TimelineAsset timeline, Object thingToDirty, Object objectToDestroy, string operation) { }
}

// Namespace: UnityEngine.Timeline
internal static class WeightUtility // TypeDefIndex: 2410
{
	// Methods
	// RVA: 0x5C5390 Offset: 0x5C3B90 VA: 0x1805C5390
	public static float NormalizeMixer(Playable mixer) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2411
{}

// Namespace: UnityEngine.UI
[Serializable]
public class AnimationTriggers // TypeDefIndex: 2412
{
	// Fields
	private const string kDefaultNormalAnimName = "Normal"; // 0x0
	private const string kDefaultHighlightedAnimName = "Highlighted"; // 0x0
	private const string kDefaultPressedAnimName = "Pressed"; // 0x0
	private const string kDefaultSelectedAnimName = "Selected"; // 0x0
	private const string kDefaultDisabledAnimName = "Disabled"; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0x101B40 Offset: 0x100F40 VA: 0x180101B40
	[SerializeField] // RVA: 0x101B40 Offset: 0x100F40 VA: 0x180101B40
	private string m_NormalTrigger; // 0x10
	[SerializeField] // RVA: 0x101B70 Offset: 0x100F70 VA: 0x180101B70
	[FormerlySerializedAsAttribute] // RVA: 0x101B70 Offset: 0x100F70 VA: 0x180101B70
	private string m_HighlightedTrigger; // 0x18
	[FormerlySerializedAsAttribute] // RVA: 0x101BA0 Offset: 0x100FA0 VA: 0x180101BA0
	[SerializeField] // RVA: 0x101BA0 Offset: 0x100FA0 VA: 0x180101BA0
	private string m_PressedTrigger; // 0x20
	[FormerlySerializedAsAttribute] // RVA: 0x101BD0 Offset: 0x100FD0 VA: 0x180101BD0
	[SerializeField] // RVA: 0x101BD0 Offset: 0x100FD0 VA: 0x180101BD0
	private string m_SelectedTrigger; // 0x28
	[FormerlySerializedAsAttribute] // RVA: 0x101C00 Offset: 0x101000 VA: 0x180101C00
	[SerializeField] // RVA: 0x101C00 Offset: 0x101000 VA: 0x180101C00
	private string m_DisabledTrigger; // 0x30

	// Properties
	public string normalTrigger { get; }
	public string highlightedTrigger { get; }
	public string pressedTrigger { get; }
	public string selectedTrigger { get; }
	public string disabledTrigger { get; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public string get_normalTrigger() { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public string get_highlightedTrigger() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public string get_pressedTrigger() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public string get_selectedTrigger() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public string get_disabledTrigger() { }
	// RVA: 0x1FB8F0 Offset: 0x1FA0F0 VA: 0x1801FB8F0
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
public class Button : Selectable, IPointerClickHandler, IEventSystemHandler, ISubmitHandler // TypeDefIndex: 2413
{
	// Fields
	[SerializeField] // RVA: 0x101C30 Offset: 0x101030 VA: 0x180101C30
	[FormerlySerializedAsAttribute] // RVA: 0x101C30 Offset: 0x101030 VA: 0x180101C30
	private Button.ButtonClickedEvent m_OnClick; // 0xF0

	// Properties
	public Button.ButtonClickedEvent onClick { get; set; }

	// Methods
	// RVA: 0x1FE990 Offset: 0x1FD190 VA: 0x1801FE990
	protected void .ctor() { }
	// RVA: 0x171030 Offset: 0x16F830 VA: 0x180171030
	public Button.ButtonClickedEvent get_onClick() { }
	// RVA: 0x1FEA60 Offset: 0x1FD260 VA: 0x1801FEA60
	public void set_onClick(Button.ButtonClickedEvent value) { }
	// RVA: 0x1FEA70 Offset: 0x1FD270 VA: 0x1801FEA70
	private void Press() { }
	// RVA: 0x1FEB40 Offset: 0x1FD340 VA: 0x1801FEB40 Slot: 41
	public virtual void OnPointerClick(PointerEventData eventData) { }
	// RVA: 0x1FEB70 Offset: 0x1FD370 VA: 0x1801FEB70 Slot: 42
	public virtual void OnSubmit(BaseEventData eventData) { }
	// RVA: 0x1FEC60 Offset: 0x1FD460 VA: 0x1801FEC60
	private IEnumerator OnFinishSubmit() { }
}

// Namespace: 
[Serializable]
public class Button.ButtonClickedEvent : UnityEvent // TypeDefIndex: 2414
{
	// Methods
	// RVA: 0x443D70 Offset: 0x442570 VA: 0x180443D70
	public void .ctor() { }
}

// Namespace: 
private sealed class Button.<OnFinishSubmit>d__9 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2415
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public Button <>4__this; // 0x20
	private float <fadeTime>5__2; // 0x28
	private float <elapsedTime>5__3; // 0x2C

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x4DA750 Offset: 0x4D8F50 VA: 0x1804DA750 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: UnityEngine.UI
public enum CanvasUpdate // TypeDefIndex: 2416
{
	// Fields
	public int value__; // 0x0
	public const CanvasUpdate Prelayout = 0; // 0x0
	public const CanvasUpdate Layout = 1; // 0x0
	public const CanvasUpdate PostLayout = 2; // 0x0
	public const CanvasUpdate PreRender = 3; // 0x0
	public const CanvasUpdate LatePreRender = 4; // 0x0
	public const CanvasUpdate MaxUpdateValue = 5; // 0x0
}

// Namespace: UnityEngine.UI
public interface ICanvasElement // TypeDefIndex: 2417
{
	// Properties
	public abstract Transform transform { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void Rebuild(CanvasUpdate executing) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract Transform get_transform() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void LayoutComplete() { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void GraphicUpdateComplete() { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool IsDestroyed() { }
}

// Namespace: UnityEngine.UI
public class CanvasUpdateRegistry // TypeDefIndex: 2418
{
	// Fields
	private static CanvasUpdateRegistry s_Instance; // 0x0
	private bool m_PerformingLayoutUpdate; // 0x10
	private bool m_PerformingGraphicUpdate; // 0x11
	private string[] m_CanvasUpdateProfilerStrings; // 0x18
	private readonly IndexedSet<ICanvasElement> m_LayoutRebuildQueue; // 0x20
	private readonly IndexedSet<ICanvasElement> m_GraphicRebuildQueue; // 0x28
	private static readonly Comparison<ICanvasElement> s_SortLayoutFunction; // 0x8

	// Properties
	public static CanvasUpdateRegistry instance { get; }

	// Methods
	// RVA: 0x1FF9A0 Offset: 0x1FE1A0 VA: 0x1801FF9A0
	protected void .ctor() { }
	// RVA: 0x1FFC60 Offset: 0x1FE460 VA: 0x1801FFC60
	public static CanvasUpdateRegistry get_instance() { }
	// RVA: 0x1FFD80 Offset: 0x1FE580 VA: 0x1801FFD80
	private bool ObjectValidForUpdate(ICanvasElement element) { }
	// RVA: 0x1FFEB0 Offset: 0x1FE6B0 VA: 0x1801FFEB0
	private void CleanInvalidItems() { }
	// RVA: 0x200110 Offset: 0x1FE910 VA: 0x180200110
	private void PerformUpdate() { }
	// RVA: 0x200960 Offset: 0x1FF160 VA: 0x180200960
	private static int ParentCount(Transform child) { }
	// RVA: 0x200AF0 Offset: 0x1FF2F0 VA: 0x180200AF0
	private static int SortLayoutList(ICanvasElement x, ICanvasElement y) { }
	// RVA: 0x200BE0 Offset: 0x1FF3E0 VA: 0x180200BE0
	public static void RegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }
	// RVA: 0x200C90 Offset: 0x1FF490 VA: 0x180200C90
	public static bool TryRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }
	// RVA: 0x200D40 Offset: 0x1FF540 VA: 0x180200D40
	private bool InternalRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }
	// RVA: 0x200E20 Offset: 0x1FF620 VA: 0x180200E20
	public static void RegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }
	// RVA: 0x200FD0 Offset: 0x1FF7D0 VA: 0x180200FD0
	private bool InternalRegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }
	// RVA: 0x2010F0 Offset: 0x1FF8F0 VA: 0x1802010F0
	public static void UnRegisterCanvasElementForRebuild(ICanvasElement element) { }
	// RVA: 0x201430 Offset: 0x1FFC30 VA: 0x180201430
	private void InternalUnRegisterCanvasElementForLayoutRebuild(ICanvasElement element) { }
	// RVA: 0x2015A0 Offset: 0x1FFDA0 VA: 0x1802015A0
	private void InternalUnRegisterCanvasElementForGraphicRebuild(ICanvasElement element) { }
	// RVA: 0x201710 Offset: 0x1FFF10 VA: 0x180201710
	public static bool IsRebuildingLayout() { }
	// RVA: 0x2017B0 Offset: 0x1FFFB0 VA: 0x1802017B0
	public static bool IsRebuildingGraphics() { }
	// RVA: 0x201850 Offset: 0x200050 VA: 0x180201850
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[Serializable]
public struct ColorBlock : IEquatable<ColorBlock> // TypeDefIndex: 2419
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0x101C60 Offset: 0x101060 VA: 0x180101C60
	[SerializeField] // RVA: 0x101C60 Offset: 0x101060 VA: 0x180101C60
	private Color m_NormalColor; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0x101C90 Offset: 0x101090 VA: 0x180101C90
	[SerializeField] // RVA: 0x101C90 Offset: 0x101090 VA: 0x180101C90
	private Color m_HighlightedColor; // 0x10
	[SerializeField] // RVA: 0x101CC0 Offset: 0x1010C0 VA: 0x180101CC0
	[FormerlySerializedAsAttribute] // RVA: 0x101CC0 Offset: 0x1010C0 VA: 0x180101CC0
	private Color m_PressedColor; // 0x20
	[FormerlySerializedAsAttribute] // RVA: 0x101CF0 Offset: 0x1010F0 VA: 0x180101CF0
	[SerializeField] // RVA: 0x101CF0 Offset: 0x1010F0 VA: 0x180101CF0
	private Color m_SelectedColor; // 0x30
	[SerializeField] // RVA: 0x101D20 Offset: 0x101120 VA: 0x180101D20
	[FormerlySerializedAsAttribute] // RVA: 0x101D20 Offset: 0x101120 VA: 0x180101D20
	private Color m_DisabledColor; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_ColorMultiplier; // 0x50
	[SerializeField] // RVA: 0x101D50 Offset: 0x101150 VA: 0x180101D50
	[FormerlySerializedAsAttribute] // RVA: 0x101D50 Offset: 0x101150 VA: 0x180101D50
	private float m_FadeDuration; // 0x54

	// Properties
	public Color normalColor { get; }
	public Color highlightedColor { get; }
	public Color pressedColor { get; }
	public Color selectedColor { get; }
	public Color disabledColor { get; }
	public float colorMultiplier { get; set; }
	public float fadeDuration { get; set; }
	public static ColorBlock defaultColorBlock { get; }

	// Methods
	// RVA: 0x86B0 Offset: 0x7AB0 VA: 0x1800086B0
	public Color get_normalColor() { }
	// RVA: 0x86C0 Offset: 0x7AC0 VA: 0x1800086C0
	public Color get_highlightedColor() { }
	// RVA: 0x86D0 Offset: 0x7AD0 VA: 0x1800086D0
	public Color get_pressedColor() { }
	// RVA: 0x86E0 Offset: 0x7AE0 VA: 0x1800086E0
	public Color get_selectedColor() { }
	// RVA: 0x86F0 Offset: 0x7AF0 VA: 0x1800086F0
	public Color get_disabledColor() { }
	// RVA: 0x8700 Offset: 0x7B00 VA: 0x180008700
	public float get_colorMultiplier() { }
	// RVA: 0x8710 Offset: 0x7B10 VA: 0x180008710
	public void set_colorMultiplier(float value) { }
	// RVA: 0x8720 Offset: 0x7B20 VA: 0x180008720
	public float get_fadeDuration() { }
	// RVA: 0x8730 Offset: 0x7B30 VA: 0x180008730
	public void set_fadeDuration(float value) { }
	// RVA: 0x202100 Offset: 0x200900 VA: 0x180202100
	public static ColorBlock get_defaultColorBlock() { }
	// RVA: 0x8740 Offset: 0x7B40 VA: 0x180008740 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x8750 Offset: 0x7B50 VA: 0x180008750 Slot: 4
	public bool Equals(ColorBlock other) { }
	// RVA: 0x87A0 Offset: 0x7BA0 VA: 0x1800087A0 Slot: 2
	public override int GetHashCode() { }
}

// Namespace: UnityEngine.UI
public class ClipperRegistry // TypeDefIndex: 2420
{
	// Fields
	private static ClipperRegistry s_Instance; // 0x0
	private readonly IndexedSet<IClipper> m_Clippers; // 0x10

	// Properties
	public static ClipperRegistry instance { get; }

	// Methods
	// RVA: 0x2018F0 Offset: 0x2000F0 VA: 0x1802018F0
	protected void .ctor() { }
	// RVA: 0x201990 Offset: 0x200190 VA: 0x180201990
	public static ClipperRegistry get_instance() { }
	// RVA: 0x201AC0 Offset: 0x2002C0 VA: 0x180201AC0
	public void Cull() { }
	// RVA: 0x201C50 Offset: 0x200450 VA: 0x180201C50
	public static void Register(IClipper c) { }
	// RVA: 0x201CF0 Offset: 0x2004F0 VA: 0x180201CF0
	public static void Unregister(IClipper c) { }
}

// Namespace: UnityEngine.UI
public static class Clipping // TypeDefIndex: 2421
{
	// Methods
	// RVA: 0x201D90 Offset: 0x200590 VA: 0x180201D90
	public static Rect FindCullAndClipWorldRect(List<RectMask2D> rectMaskParents, out bool validRect) { }
}

// Namespace: UnityEngine.UI
public interface IClipper // TypeDefIndex: 2422
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void PerformClipping() { }
}

// Namespace: UnityEngine.UI
public interface IClippable // TypeDefIndex: 2423
{
	// Properties
	public abstract GameObject gameObject { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract GameObject get_gameObject() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void RecalculateClipping() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void SetClipRect(Rect value, bool validRect) { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract void SetClipSoftness(Vector2 clipSoftness) { }
}

// Namespace: UnityEngine.UI
internal class RectangularVertexClipper // TypeDefIndex: 2424
{
	// Fields
	private readonly Vector3[] m_WorldCorners; // 0x10
	private readonly Vector3[] m_CanvasCorners; // 0x18

	// Methods
	// RVA: 0x29CB40 Offset: 0x29B340 VA: 0x18029CB40
	public Rect GetCanvasRect(RectTransform t, Canvas c) { }
	// RVA: 0x29CDA0 Offset: 0x29B5A0 VA: 0x18029CDA0
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[RequireComponent] // RVA: 0x101D80 Offset: 0x101180 VA: 0x180101D80
public class Dropdown : Selectable, IPointerClickHandler, IEventSystemHandler, ISubmitHandler, ICancelHandler // TypeDefIndex: 2425
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private RectTransform m_Template; // 0xF0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Text m_CaptionText; // 0xF8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Image m_CaptionImage; // 0x100
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Text m_ItemText; // 0x108
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Image m_ItemImage; // 0x110
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_Value; // 0x118
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Dropdown.OptionDataList m_Options; // 0x120
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Dropdown.DropdownEvent m_OnValueChanged; // 0x128
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_AlphaFadeSpeed; // 0x130
	private GameObject m_Dropdown; // 0x138
	private GameObject m_Blocker; // 0x140
	private List<Dropdown.DropdownItem> m_Items; // 0x148
	private TweenRunner<FloatTween> m_AlphaTweenRunner; // 0x150
	private bool validTemplate; // 0x158
	private static Dropdown.OptionData s_NoOptionData; // 0x0

	// Properties
	public RectTransform template { get; set; }
	public Text captionText { get; set; }
	public Image captionImage { get; set; }
	public Text itemText { get; set; }
	public Image itemImage { get; set; }
	public List<Dropdown.OptionData> options { get; set; }
	public Dropdown.DropdownEvent onValueChanged { get; set; }
	public float alphaFadeSpeed { get; set; }
	public int value { get; set; }

	// Methods
	// RVA: 0x171030 Offset: 0x16F830 VA: 0x180171030
	public RectTransform get_template() { }
	// RVA: 0x202DC0 Offset: 0x2015C0 VA: 0x180202DC0
	public void set_template(RectTransform value) { }
	// RVA: 0x171080 Offset: 0x16F880 VA: 0x180171080
	public Text get_captionText() { }
	// RVA: 0x202DD0 Offset: 0x2015D0 VA: 0x180202DD0
	public void set_captionText(Text value) { }
	// RVA: 0x171250 Offset: 0x16FA50 VA: 0x180171250
	public Image get_captionImage() { }
	// RVA: 0x202DE0 Offset: 0x2015E0 VA: 0x180202DE0
	public void set_captionImage(Image value) { }
	// RVA: 0x173240 Offset: 0x171A40 VA: 0x180173240
	public Text get_itemText() { }
	// RVA: 0x202DF0 Offset: 0x2015F0 VA: 0x180202DF0
	public void set_itemText(Text value) { }
	// RVA: 0x19D9B0 Offset: 0x19C1B0 VA: 0x18019D9B0
	public Image get_itemImage() { }
	// RVA: 0x202E00 Offset: 0x201600 VA: 0x180202E00
	public void set_itemImage(Image value) { }
	// RVA: 0x202E10 Offset: 0x201610 VA: 0x180202E10
	public List<Dropdown.OptionData> get_options() { }
	// RVA: 0x202E30 Offset: 0x201630 VA: 0x180202E30
	public void set_options(List<Dropdown.OptionData> value) { }
	// RVA: 0x1ADA70 Offset: 0x1AC270 VA: 0x1801ADA70
	public Dropdown.DropdownEvent get_onValueChanged() { }
	// RVA: 0x202E60 Offset: 0x201660 VA: 0x180202E60
	public void set_onValueChanged(Dropdown.DropdownEvent value) { }
	// RVA: 0x202E70 Offset: 0x201670 VA: 0x180202E70
	public float get_alphaFadeSpeed() { }
	// RVA: 0x202E80 Offset: 0x201680 VA: 0x180202E80
	public void set_alphaFadeSpeed(float value) { }
	// RVA: 0x202E90 Offset: 0x201690 VA: 0x180202E90
	public int get_value() { }
	// RVA: 0x202EA0 Offset: 0x2016A0 VA: 0x180202EA0
	public void set_value(int value) { }
	// RVA: 0x202EB0 Offset: 0x2016B0 VA: 0x180202EB0
	public void SetValueWithoutNotify(int input) { }
	// RVA: 0x202EC0 Offset: 0x2016C0 VA: 0x180202EC0
	private void Set(int value, bool sendCallback = True) { }
	// RVA: 0x203070 Offset: 0x201870 VA: 0x180203070
	protected void .ctor() { }
	// RVA: 0x203260 Offset: 0x201A60 VA: 0x180203260 Slot: 4
	protected override void Awake() { }
	// RVA: 0x2034A0 Offset: 0x201CA0 VA: 0x1802034A0 Slot: 6
	protected override void Start() { }
	// RVA: 0x2034B0 Offset: 0x201CB0 VA: 0x1802034B0 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x2035A0 Offset: 0x201DA0 VA: 0x1802035A0
	public void RefreshShownValue() { }
	// RVA: 0x203850 Offset: 0x202050 VA: 0x180203850
	public void AddOptions(List<Dropdown.OptionData> options) { }
	// RVA: 0x203910 Offset: 0x202110 VA: 0x180203910
	public void AddOptions(List<string> options) { }
	// RVA: 0x203AA0 Offset: 0x2022A0 VA: 0x180203AA0
	public void AddOptions(List<Sprite> options) { }
	// RVA: 0x203C30 Offset: 0x202430 VA: 0x180203C30
	public void ClearOptions() { }
	// RVA: 0x203D00 Offset: 0x202500 VA: 0x180203D00
	private void SetupTemplate() { }
	// RVA: 0x52FD80 Offset: 0x52E580 VA: 0x18052FD80
	private static T GetOrAddComponent(GameObject go) { }
	// RVA: 0x204580 Offset: 0x202D80 VA: 0x180204580 Slot: 42
	public virtual void OnPointerClick(PointerEventData eventData) { }
	// RVA: 0x204580 Offset: 0x202D80 VA: 0x180204580 Slot: 43
	public virtual void OnSubmit(BaseEventData eventData) { }
	// RVA: 0x204590 Offset: 0x202D90 VA: 0x180204590 Slot: 44
	public virtual void OnCancel(BaseEventData eventData) { }
	// RVA: 0x2045A0 Offset: 0x202DA0 VA: 0x1802045A0
	public void Show() { }
	// RVA: 0x2058B0 Offset: 0x2040B0 VA: 0x1802058B0 Slot: 45
	protected virtual GameObject CreateBlocker(Canvas rootCanvas) { }
	// RVA: 0x206030 Offset: 0x204830 VA: 0x180206030 Slot: 46
	protected virtual void DestroyBlocker(GameObject blocker) { }
	// RVA: 0x2060C0 Offset: 0x2048C0 VA: 0x1802060C0 Slot: 47
	protected virtual GameObject CreateDropdownList(GameObject template) { }
	// RVA: 0x206160 Offset: 0x204960 VA: 0x180206160 Slot: 48
	protected virtual void DestroyDropdownList(GameObject dropdownList) { }
	// RVA: 0x2061F0 Offset: 0x2049F0 VA: 0x1802061F0 Slot: 49
	protected virtual Dropdown.DropdownItem CreateItem(Dropdown.DropdownItem itemTemplate) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 50
	protected virtual void DestroyItem(Dropdown.DropdownItem item) { }
	// RVA: 0x206290 Offset: 0x204A90 VA: 0x180206290
	private Dropdown.DropdownItem AddItem(Dropdown.OptionData data, bool selected, Dropdown.DropdownItem itemTemplate, List<Dropdown.DropdownItem> items) { }
	// RVA: 0x2066F0 Offset: 0x204EF0 VA: 0x1802066F0
	private void AlphaFadeList(float duration, float alpha) { }
	// RVA: 0x206810 Offset: 0x205010 VA: 0x180206810
	private void AlphaFadeList(float duration, float start, float end) { }
	// RVA: 0x2069B0 Offset: 0x2051B0 VA: 0x1802069B0
	private void SetAlpha(float alpha) { }
	// RVA: 0x206AA0 Offset: 0x2052A0 VA: 0x180206AA0
	public void Hide() { }
	// RVA: 0x206D50 Offset: 0x205550 VA: 0x180206D50
	private IEnumerator DelayedDestroyDropdownList(float delay) { }
	// RVA: 0x206DF0 Offset: 0x2055F0 VA: 0x180206DF0
	private void ImmediateDestroyDropdownList() { }
	// RVA: 0x206FD0 Offset: 0x2057D0 VA: 0x180206FD0
	private void OnSelectItem(Toggle toggle) { }
	// RVA: 0x207220 Offset: 0x205A20 VA: 0x180207220
	private static void .cctor() { }
}

// Namespace: 
protected internal class Dropdown.DropdownItem : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, ICancelHandler // TypeDefIndex: 2426
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Text m_Text; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Image m_Image; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private RectTransform m_RectTransform; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Toggle m_Toggle; // 0x30

	// Properties
	public Text text { get; set; }
	public Image image { get; set; }
	public RectTransform rectTransform { get; set; }
	public Toggle toggle { get; set; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public Text get_text() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_text(Text value) { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public Image get_image() { }
	// RVA: 0x16EEC0 Offset: 0x16D6C0 VA: 0x18016EEC0
	public void set_image(Image value) { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public RectTransform get_rectTransform() { }
	// RVA: 0x207510 Offset: 0x205D10 VA: 0x180207510
	public void set_rectTransform(RectTransform value) { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public Toggle get_toggle() { }
	// RVA: 0x1A20C0 Offset: 0x1A08C0 VA: 0x1801A20C0
	public void set_toggle(Toggle value) { }
	// RVA: 0x4DAA70 Offset: 0x4D9270 VA: 0x1804DAA70 Slot: 6
	public virtual void OnPointerEnter(PointerEventData eventData) { }
	// RVA: 0x4DAB70 Offset: 0x4D9370 VA: 0x1804DAB70 Slot: 7
	public virtual void OnCancel(BaseEventData eventData) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class Dropdown.OptionData // TypeDefIndex: 2427
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_Text; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Sprite m_Image; // 0x18

	// Properties
	public string text { get; set; }
	public Sprite image { get; set; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public string get_text() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void set_text(string value) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public Sprite get_image() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_image(Sprite value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(string text) { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void .ctor(Sprite image) { }
}

// Namespace: 
[Serializable]
public class Dropdown.OptionDataList // TypeDefIndex: 2428
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<Dropdown.OptionData> m_Options; // 0x10

	// Properties
	public List<Dropdown.OptionData> options { get; set; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public List<Dropdown.OptionData> get_options() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void set_options(List<Dropdown.OptionData> value) { }
	// RVA: 0x4DAC30 Offset: 0x4D9430 VA: 0x1804DAC30
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class Dropdown.DropdownEvent : UnityEvent<int> // TypeDefIndex: 2429
{
	// Methods
	// RVA: 0x4DA9F0 Offset: 0x4D91F0 VA: 0x1804DA9F0
	public void .ctor() { }
}

// Namespace: 
private sealed class Dropdown.<>c__DisplayClass62_0 // TypeDefIndex: 2430
{
	// Fields
	public Dropdown.DropdownItem item; // 0x10
	public Dropdown <>4__this; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x4DA8E0 Offset: 0x4D90E0 VA: 0x1804DA8E0
	internal void <Show>b__0(bool x) { }
}

// Namespace: 
private sealed class Dropdown.<DelayedDestroyDropdownList>d__74 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2431
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public float delay; // 0x20
	public Dropdown <>4__this; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x4DA910 Offset: 0x4D9110 VA: 0x1804DA910 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: UnityEngine.UI
[Serializable]
public class FontData : ISerializationCallbackReceiver // TypeDefIndex: 2432
{
	// Fields
	[SerializeField] // RVA: 0x101E00 Offset: 0x101200 VA: 0x180101E00
	[FormerlySerializedAsAttribute] // RVA: 0x101E00 Offset: 0x101200 VA: 0x180101E00
	private Font m_Font; // 0x10
	[SerializeField] // RVA: 0x101E30 Offset: 0x101230 VA: 0x180101E30
	[FormerlySerializedAsAttribute] // RVA: 0x101E30 Offset: 0x101230 VA: 0x180101E30
	private int m_FontSize; // 0x18
	[FormerlySerializedAsAttribute] // RVA: 0x101E60 Offset: 0x101260 VA: 0x180101E60
	[SerializeField] // RVA: 0x101E60 Offset: 0x101260 VA: 0x180101E60
	private FontStyle m_FontStyle; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_BestFit; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_MinSize; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_MaxSize; // 0x28
	[FormerlySerializedAsAttribute] // RVA: 0x101E90 Offset: 0x101290 VA: 0x180101E90
	[SerializeField] // RVA: 0x101E90 Offset: 0x101290 VA: 0x180101E90
	private TextAnchor m_Alignment; // 0x2C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_AlignByGeometry; // 0x30
	[FormerlySerializedAsAttribute] // RVA: 0x101EC0 Offset: 0x1012C0 VA: 0x180101EC0
	[SerializeField] // RVA: 0x101EC0 Offset: 0x1012C0 VA: 0x180101EC0
	private bool m_RichText; // 0x31
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private HorizontalWrapMode m_HorizontalOverflow; // 0x34
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private VerticalWrapMode m_VerticalOverflow; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_LineSpacing; // 0x3C

	// Properties
	public static FontData defaultFontData { get; }
	public Font font { get; set; }
	public int fontSize { get; set; }
	public FontStyle fontStyle { get; set; }
	public bool bestFit { get; set; }
	public int minSize { get; set; }
	public int maxSize { get; set; }
	public TextAnchor alignment { get; set; }
	public bool alignByGeometry { get; set; }
	public bool richText { get; set; }
	public HorizontalWrapMode horizontalOverflow { get; set; }
	public VerticalWrapMode verticalOverflow { get; set; }
	public float lineSpacing { get; set; }

	// Methods
	// RVA: 0x20B350 Offset: 0x209B50 VA: 0x18020B350
	public static FontData get_defaultFontData() { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public Font get_font() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void set_font(Font value) { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0
	public int get_fontSize() { }
	// RVA: 0x1FECF0 Offset: 0x1FD4F0 VA: 0x1801FECF0
	public void set_fontSize(int value) { }
	// RVA: 0x202970 Offset: 0x201170 VA: 0x180202970
	public FontStyle get_fontStyle() { }
	// RVA: 0x20B400 Offset: 0x209C00 VA: 0x18020B400
	public void set_fontStyle(FontStyle value) { }
	// RVA: 0x20B410 Offset: 0x209C10 VA: 0x18020B410
	public bool get_bestFit() { }
	// RVA: 0x20B420 Offset: 0x209C20 VA: 0x18020B420
	public void set_bestFit(bool value) { }
	// RVA: 0x198920 Offset: 0x197120 VA: 0x180198920
	public int get_minSize() { }
	// RVA: 0x20B430 Offset: 0x209C30 VA: 0x18020B430
	public void set_minSize(int value) { }
	// RVA: 0x1FC310 Offset: 0x1FAB10 VA: 0x1801FC310
	public int get_maxSize() { }
	// RVA: 0x1FC320 Offset: 0x1FAB20 VA: 0x1801FC320
	public void set_maxSize(int value) { }
	// RVA: 0x1FEF40 Offset: 0x1FD740 VA: 0x1801FEF40
	public TextAnchor get_alignment() { }
	// RVA: 0x1FEF50 Offset: 0x1FD750 VA: 0x1801FEF50
	public void set_alignment(TextAnchor value) { }
	// RVA: 0x2074F0 Offset: 0x205CF0 VA: 0x1802074F0
	public bool get_alignByGeometry() { }
	// RVA: 0x207500 Offset: 0x205D00 VA: 0x180207500
	public void set_alignByGeometry(bool value) { }
	// RVA: 0x20B440 Offset: 0x209C40 VA: 0x18020B440
	public bool get_richText() { }
	// RVA: 0x20B450 Offset: 0x209C50 VA: 0x18020B450
	public void set_richText(bool value) { }
	// RVA: 0x1FEF80 Offset: 0x1FD780 VA: 0x1801FEF80
	public HorizontalWrapMode get_horizontalOverflow() { }
	// RVA: 0x1FEF90 Offset: 0x1FD790 VA: 0x1801FEF90
	public void set_horizontalOverflow(HorizontalWrapMode value) { }
	// RVA: 0x197B80 Offset: 0x196380 VA: 0x180197B80
	public VerticalWrapMode get_verticalOverflow() { }
	// RVA: 0x20B460 Offset: 0x209C60 VA: 0x18020B460
	public void set_verticalOverflow(VerticalWrapMode value) { }
	// RVA: 0x1FEFC0 Offset: 0x1FD7C0 VA: 0x1801FEFC0
	public float get_lineSpacing() { }
	// RVA: 0x20B470 Offset: 0x209C70 VA: 0x18020B470
	public void set_lineSpacing(float value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 4
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize() { }
	// RVA: 0x20B480 Offset: 0x209C80 VA: 0x18020B480 Slot: 5
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
public static class FontUpdateTracker // TypeDefIndex: 2433
{
	// Fields
	private static Dictionary<Font, HashSet<Text>> m_Tracked; // 0xABC20

	// Methods
	// RVA: 0x20B580 Offset: 0x209D80 VA: 0x18020B580
	public static void TrackText(Text t) { }
	// RVA: 0x20B920 Offset: 0x20A120 VA: 0x18020B920
	private static void RebuildForFont(Font f) { }
	// RVA: 0x20BC40 Offset: 0x20A440 VA: 0x18020BC40
	public static void UntrackText(Text t) { }
	// RVA: 0x20BF60 Offset: 0x20A760 VA: 0x18020BF60
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[ExecuteAlways] // RVA: 0x101EF0 Offset: 0x1012F0 VA: 0x180101EF0
[RequireComponent] // RVA: 0x101EF0 Offset: 0x1012F0 VA: 0x180101EF0
[DisallowMultipleComponent] // RVA: 0x101EF0 Offset: 0x1012F0 VA: 0x180101EF0
public abstract class Graphic : UIBehaviour, ICanvasElement // TypeDefIndex: 2434
{
	// Fields
	protected static Material s_DefaultUI; // 0x0
	protected static Texture2D s_WhiteTexture; // 0x8
	[SerializeField] // RVA: 0x101F70 Offset: 0x101370 VA: 0x180101F70
	[FormerlySerializedAsAttribute] // RVA: 0x101F70 Offset: 0x101370 VA: 0x180101F70
	protected Material m_Material; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Color m_Color; // 0x20
	protected bool m_SkipLayoutUpdate; // 0x30
	protected bool m_SkipMaterialUpdate; // 0x31
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_RaycastTarget; // 0x32
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector4 m_RaycastPadding; // 0x34
	private RectTransform m_RectTransform; // 0x48
	private CanvasRenderer m_CanvasRenderer; // 0x50
	private Canvas m_Canvas; // 0x58
	private bool m_VertsDirty; // 0x60
	private bool m_MaterialDirty; // 0x61
	protected UnityAction m_OnDirtyLayoutCallback; // 0x68
	protected UnityAction m_OnDirtyVertsCallback; // 0x70
	protected UnityAction m_OnDirtyMaterialCallback; // 0x78
	protected static Mesh s_Mesh; // 0x10
	private static readonly VertexHelper s_VertexHelper; // 0x18
	protected Mesh m_CachedMesh; // 0x80
	protected Vector2[] m_CachedUvs; // 0x88
	private readonly TweenRunner<ColorTween> m_ColorTweenRunner; // 0x90
	private bool <useLegacyMeshGeneration>k__BackingField; // 0x98

	// Properties
	public static Material defaultGraphicMaterial { get; }
	public virtual Color color { get; set; }
	public virtual bool raycastTarget { get; set; }
	public Vector4 raycastPadding { get; set; }
	protected bool useLegacyMeshGeneration { get; set; }
	public int depth { get; }
	public RectTransform rectTransform { get; }
	public Canvas canvas { get; }
	public CanvasRenderer canvasRenderer { get; }
	public virtual Material defaultMaterial { get; }
	public virtual Material material { get; set; }
	public virtual Material materialForRendering { get; }
	public virtual Texture mainTexture { get; }
	protected static Mesh workerMesh { get; }

	// Methods
	// RVA: 0x20C020 Offset: 0x20A820 VA: 0x18020C020
	public static Material get_defaultGraphicMaterial() { }
	// RVA: 0x20C190 Offset: 0x20A990 VA: 0x18020C190 Slot: 22
	public virtual Color get_color() { }
	// RVA: 0x20C1A0 Offset: 0x20A9A0 VA: 0x18020C1A0 Slot: 23
	public virtual void set_color(Color value) { }
	// RVA: 0x20C200 Offset: 0x20AA00 VA: 0x18020C200 Slot: 24
	public virtual bool get_raycastTarget() { }
	// RVA: 0x20C210 Offset: 0x20AA10 VA: 0x18020C210 Slot: 25
	public virtual void set_raycastTarget(bool value) { }
	// RVA: 0x20C220 Offset: 0x20AA20 VA: 0x18020C220
	public Vector4 get_raycastPadding() { }
	// RVA: 0x20C230 Offset: 0x20AA30 VA: 0x18020C230
	public void set_raycastPadding(Vector4 value) { }
	// RVA: 0x20C240 Offset: 0x20AA40 VA: 0x18020C240
	protected bool get_useLegacyMeshGeneration() { }
	// RVA: 0x20C250 Offset: 0x20AA50 VA: 0x18020C250
	protected void set_useLegacyMeshGeneration(bool value) { }
	// RVA: 0x20C260 Offset: 0x20AA60 VA: 0x18020C260
	protected void .ctor() { }
	// RVA: 0x20C320 Offset: 0x20AB20 VA: 0x18020C320 Slot: 26
	public virtual void SetAllDirty() { }
	// RVA: 0x20C380 Offset: 0x20AB80 VA: 0x18020C380 Slot: 27
	public virtual void SetLayoutDirty() { }
	// RVA: 0x20C450 Offset: 0x20AC50 VA: 0x18020C450 Slot: 28
	public virtual void SetVerticesDirty() { }
	// RVA: 0x20C510 Offset: 0x20AD10 VA: 0x18020C510 Slot: 29
	public virtual void SetMaterialDirty() { }
	// RVA: 0x20C5D0 Offset: 0x20ADD0 VA: 0x18020C5D0 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }
	// RVA: 0x20C740 Offset: 0x20AF40 VA: 0x18020C740 Slot: 11
	protected override void OnBeforeTransformParentChanged() { }
	// RVA: 0x20C820 Offset: 0x20B020 VA: 0x18020C820 Slot: 12
	protected override void OnTransformParentChanged() { }
	// RVA: 0x20C910 Offset: 0x20B110 VA: 0x18020C910
	public int get_depth() { }
	// RVA: 0x20C980 Offset: 0x20B180 VA: 0x18020C980 Slot: 30
	public RectTransform get_rectTransform() { }
	// RVA: 0x20CA10 Offset: 0x20B210 VA: 0x18020CA10
	public Canvas get_canvas() { }
	// RVA: 0x20CAD0 Offset: 0x20B2D0 VA: 0x18020CAD0
	private void CacheCanvas() { }
	// RVA: 0x20CCE0 Offset: 0x20B4E0 VA: 0x18020CCE0
	public CanvasRenderer get_canvasRenderer() { }
	// RVA: 0x20CDD0 Offset: 0x20B5D0 VA: 0x18020CDD0 Slot: 31
	public virtual Material get_defaultMaterial() { }
	// RVA: 0x20CE60 Offset: 0x20B660 VA: 0x18020CE60 Slot: 32
	public virtual Material get_material() { }
	// RVA: 0x20CF30 Offset: 0x20B730 VA: 0x18020CF30 Slot: 33
	public virtual void set_material(Material value) { }
	// RVA: 0x20D000 Offset: 0x20B800 VA: 0x18020D000 Slot: 34
	public virtual Material get_materialForRendering() { }
	// RVA: 0x20D300 Offset: 0x20BB00 VA: 0x18020D300 Slot: 35
	public virtual Texture get_mainTexture() { }
	// RVA: 0x20D3A0 Offset: 0x20BBA0 VA: 0x18020D3A0 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x20D540 Offset: 0x20BD40 VA: 0x18020D540 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x20D6E0 Offset: 0x20BEE0 VA: 0x18020D6E0 Slot: 8
	protected override void OnDestroy() { }
	// RVA: 0x20D7D0 Offset: 0x20BFD0 VA: 0x18020D7D0 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }
	// RVA: 0x20D930 Offset: 0x20C130 VA: 0x18020D930 Slot: 36
	public virtual void OnCullingChanged() { }
	// RVA: 0x20DA40 Offset: 0x20C240 VA: 0x18020DA40 Slot: 37
	public virtual void Rebuild(CanvasUpdate update) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 38
	public virtual void LayoutComplete() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 39
	public virtual void GraphicUpdateComplete() { }
	// RVA: 0x20DBA0 Offset: 0x20C3A0 VA: 0x18020DBA0 Slot: 40
	protected virtual void UpdateMaterial() { }
	// RVA: 0x20DD30 Offset: 0x20C530 VA: 0x18020DD30 Slot: 41
	protected virtual void UpdateGeometry() { }
	// RVA: 0x20DD50 Offset: 0x20C550 VA: 0x18020DD50
	private void DoMeshGeneration() { }
	// RVA: 0x20E1D0 Offset: 0x20C9D0 VA: 0x18020E1D0
	private void DoLegacyMeshGeneration() { }
	// RVA: 0x20E640 Offset: 0x20CE40 VA: 0x18020E640
	protected static Mesh get_workerMesh() { }
	[ObsoleteAttribute] // RVA: 0x101FA0 Offset: 0x1013A0 VA: 0x180101FA0
	// RVA: 0x20E820 Offset: 0x20D020 VA: 0x18020E820 Slot: 42
	protected virtual void OnPopulateMesh(Mesh m) { }
	// RVA: 0x20E910 Offset: 0x20D110 VA: 0x18020E910 Slot: 43
	protected virtual void OnPopulateMesh(VertexHelper vh) { }
	// RVA: 0x20EB30 Offset: 0x20D330 VA: 0x18020EB30 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 44
	public virtual void SetNativeSize() { }
	// RVA: 0x20EB50 Offset: 0x20D350 VA: 0x18020EB50 Slot: 45
	public virtual bool Raycast(Vector2 sp, Camera eventCamera) { }
	// RVA: 0x20EF00 Offset: 0x20D700 VA: 0x18020EF00
	public Vector2 PixelAdjustPoint(Vector2 point) { }
	// RVA: 0x20F1E0 Offset: 0x20D9E0 VA: 0x18020F1E0
	public Rect GetPixelAdjustedRect() { }
	// RVA: 0x20F510 Offset: 0x20DD10 VA: 0x18020F510 Slot: 46
	public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) { }
	// RVA: 0x20F550 Offset: 0x20DD50 VA: 0x18020F550 Slot: 47
	public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB) { }
	// RVA: 0x20F860 Offset: 0x20E060 VA: 0x18020F860
	private static Color CreateColorFromAlpha(float alpha) { }
	// RVA: 0x20F880 Offset: 0x20E080 VA: 0x18020F880 Slot: 48
	public virtual void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) { }
	// RVA: 0x20F990 Offset: 0x20E190 VA: 0x18020F990
	public void RegisterDirtyLayoutCallback(UnityAction action) { }
	// RVA: 0x20FA50 Offset: 0x20E250 VA: 0x18020FA50
	public void UnregisterDirtyLayoutCallback(UnityAction action) { }
	// RVA: 0x20FB10 Offset: 0x20E310 VA: 0x18020FB10
	public void RegisterDirtyVerticesCallback(UnityAction action) { }
	// RVA: 0x20FBD0 Offset: 0x20E3D0 VA: 0x18020FBD0
	public void UnregisterDirtyVerticesCallback(UnityAction action) { }
	// RVA: 0x20FC90 Offset: 0x20E490 VA: 0x18020FC90
	public void RegisterDirtyMaterialCallback(UnityAction action) { }
	// RVA: 0x20FD50 Offset: 0x20E550 VA: 0x18020FD50
	public void UnregisterDirtyMaterialCallback(UnityAction action) { }
	// RVA: 0x20FE10 Offset: 0x20E610 VA: 0x18020FE10
	private static void .cctor() { }
	// RVA: 0x1BF8A0 Offset: 0x1BE0A0 VA: 0x1801BF8A0 Slot: 18
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: UnityEngine.UI
[RequireComponent] // RVA: 0x101FD0 Offset: 0x1013D0 VA: 0x180101FD0
public class GraphicRaycaster : BaseRaycaster // TypeDefIndex: 2435
{
	// Fields
	protected const int kNoEventMaskSet = -1; // 0x0
	[SerializeField] // RVA: 0x102050 Offset: 0x101450 VA: 0x180102050
	[FormerlySerializedAsAttribute] // RVA: 0x102050 Offset: 0x101450 VA: 0x180102050
	private bool m_IgnoreReversedGraphics; // 0x20
	[FormerlySerializedAsAttribute] // RVA: 0x102080 Offset: 0x101480 VA: 0x180102080
	[SerializeField] // RVA: 0x102080 Offset: 0x101480 VA: 0x180102080
	private GraphicRaycaster.BlockingObjects m_BlockingObjects; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected LayerMask m_BlockingMask; // 0x28
	private Canvas m_Canvas; // 0x30
	private List<Graphic> m_RaycastResults; // 0x38
	private static readonly List<Graphic> s_SortedGraphics; // 0x0

	// Properties
	public override int sortOrderPriority { get; }
	public override int renderOrderPriority { get; }
	public bool ignoreReversedGraphics { get; set; }
	public GraphicRaycaster.BlockingObjects blockingObjects { get; set; }
	private Canvas canvas { get; }
	public override Camera eventCamera { get; }

	// Methods
	// RVA: 0x20FEC0 Offset: 0x20E6C0 VA: 0x18020FEC0 Slot: 20
	public override int get_sortOrderPriority() { }
	// RVA: 0x20FFA0 Offset: 0x20E7A0 VA: 0x18020FFA0 Slot: 21
	public override int get_renderOrderPriority() { }
	// RVA: 0x20B410 Offset: 0x209C10 VA: 0x18020B410
	public bool get_ignoreReversedGraphics() { }
	// RVA: 0x20B420 Offset: 0x209C20 VA: 0x18020B420
	public void set_ignoreReversedGraphics(bool value) { }
	// RVA: 0x198920 Offset: 0x197120 VA: 0x180198920
	public GraphicRaycaster.BlockingObjects get_blockingObjects() { }
	// RVA: 0x20B430 Offset: 0x209C30 VA: 0x18020B430
	public void set_blockingObjects(GraphicRaycaster.BlockingObjects value) { }
	// RVA: 0x2100D0 Offset: 0x20E8D0 VA: 0x1802100D0
	protected void .ctor() { }
	// RVA: 0x210180 Offset: 0x20E980 VA: 0x180210180
	private Canvas get_canvas() { }
	// RVA: 0x210250 Offset: 0x20EA50 VA: 0x180210250 Slot: 17
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }
	// RVA: 0x211500 Offset: 0x20FD00 VA: 0x180211500 Slot: 18
	public override Camera get_eventCamera() { }
	// RVA: 0x211790 Offset: 0x20FF90 VA: 0x180211790
	private static void Raycast(Canvas canvas, Camera eventCamera, Vector2 pointerPosition, IList<Graphic> foundGraphics, List<Graphic> results) { }
	// RVA: 0x211D90 Offset: 0x210590 VA: 0x180211D90
	private static void .cctor() { }
}

// Namespace: 
public enum GraphicRaycaster.BlockingObjects // TypeDefIndex: 2436
{
	// Fields
	public int value__; // 0x0
	public const GraphicRaycaster.BlockingObjects None = 0; // 0x0
	public const GraphicRaycaster.BlockingObjects TwoD = 1; // 0x0
	public const GraphicRaycaster.BlockingObjects ThreeD = 2; // 0x0
	public const GraphicRaycaster.BlockingObjects All = 3; // 0x0
}

// Namespace: 
[Serializable]
private sealed class GraphicRaycaster.<>c // TypeDefIndex: 2437
{
	// Fields
	public static readonly GraphicRaycaster.<>c <>9; // 0x0
	public static Comparison<Graphic> <>9__24_0; // 0x8

	// Methods
	// RVA: 0x4DAFF0 Offset: 0x4D97F0 VA: 0x1804DAFF0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x4DB070 Offset: 0x4D9870 VA: 0x1804DB070
	internal int <Raycast>b__24_0(Graphic g1, Graphic g2) { }
}

// Namespace: UnityEngine.UI
public class GraphicRegistry // TypeDefIndex: 2438
{
	// Fields
	private static GraphicRegistry s_Instance; // 0x0
	private readonly Dictionary<Canvas, IndexedSet<Graphic>> m_Graphics; // 0x10
	private static readonly List<Graphic> s_EmptyList; // 0x8

	// Properties
	public static GraphicRegistry instance { get; }

	// Methods
	// RVA: 0x211E30 Offset: 0x210630 VA: 0x180211E30
	protected void .ctor() { }
	// RVA: 0x211FB0 Offset: 0x2107B0 VA: 0x180211FB0
	public static GraphicRegistry get_instance() { }
	// RVA: 0x212220 Offset: 0x210A20 VA: 0x180212220
	public static void RegisterGraphicForCanvas(Canvas c, Graphic graphic) { }
	// RVA: 0x212490 Offset: 0x210C90 VA: 0x180212490
	public static void UnregisterGraphicForCanvas(Canvas c, Graphic graphic) { }
	// RVA: 0x212670 Offset: 0x210E70 VA: 0x180212670
	public static IList<Graphic> GetGraphicsForCanvas(Canvas canvas) { }
	// RVA: 0x2127B0 Offset: 0x210FB0 VA: 0x1802127B0
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
public interface IMaskable // TypeDefIndex: 2439
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void RecalculateMasking() { }
}

// Namespace: UnityEngine.UI
[RequireComponent] // RVA: 0x1020B0 Offset: 0x1014B0 VA: 0x1801020B0
public class Image : MaskableGraphic, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter // TypeDefIndex: 2440
{
	// Fields
	protected static Material s_ETC1DefaultUI; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0x102130 Offset: 0x101530 VA: 0x180102130
	[SerializeField] // RVA: 0x102130 Offset: 0x101530 VA: 0x180102130
	private Sprite m_Sprite; // 0xD8
	private Sprite m_OverrideSprite; // 0xE0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Image.Type m_Type; // 0xE8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_PreserveAspect; // 0xEC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_FillCenter; // 0xED
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Image.FillMethod m_FillMethod; // 0xF0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_FillAmount; // 0xF4
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_FillClockwise; // 0xF8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_FillOrigin; // 0xFC
	private float m_AlphaHitTestMinimumThreshold; // 0x100
	private bool m_Tracked; // 0x104
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_UseSpriteMesh; // 0x105
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_PixelsPerUnitMultiplier; // 0x108
	private float m_CachedReferencePixelsPerUnit; // 0x10C
	private static readonly Vector2[] s_VertScratch; // 0x8
	private static readonly Vector2[] s_UVScratch; // 0x10
	private static readonly Vector3[] s_Xy; // 0x18
	private static readonly Vector3[] s_Uv; // 0x20
	private static List<Image> m_TrackedTexturelessImages; // 0x28
	private static bool s_Initialized; // 0x30

	// Properties
	public Sprite sprite { get; set; }
	public Sprite overrideSprite { get; set; }
	private Sprite activeSprite { get; }
	public Image.Type type { get; set; }
	public bool preserveAspect { get; set; }
	public bool fillCenter { get; set; }
	public Image.FillMethod fillMethod { get; set; }
	public float fillAmount { get; set; }
	public bool fillClockwise { get; set; }
	public int fillOrigin { get; set; }
	[ObsoleteAttribute] // RVA: 0x102160 Offset: 0x101560 VA: 0x180102160
	public float eventAlphaThreshold { get; set; }
	public float alphaHitTestMinimumThreshold { get; set; }
	public bool useSpriteMesh { get; set; }
	public static Material defaultETC1GraphicMaterial { get; }
	public override Texture mainTexture { get; }
	public bool hasBorder { get; }
	public float pixelsPerUnitMultiplier { get; set; }
	public float pixelsPerUnit { get; }
	protected float multipliedPixelsPerUnit { get; }
	public override Material material { get; set; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods
	// RVA: 0x170D70 Offset: 0x16F570 VA: 0x180170D70
	public Sprite get_sprite() { }
	// RVA: 0x215870 Offset: 0x214070 VA: 0x180215870
	public void set_sprite(Sprite value) { }
	// RVA: 0x215D00 Offset: 0x214500 VA: 0x180215D00
	public void DisableSpriteOptimizations() { }
	// RVA: 0x215D10 Offset: 0x214510 VA: 0x180215D10
	public Sprite get_overrideSprite() { }
	// RVA: 0x215D20 Offset: 0x214520 VA: 0x180215D20
	public void set_overrideSprite(Sprite value) { }
	// RVA: 0x215DF0 Offset: 0x2145F0 VA: 0x180215DF0
	private Sprite get_activeSprite() { }
	// RVA: 0x215EB0 Offset: 0x2146B0 VA: 0x180215EB0
	public Image.Type get_type() { }
	// RVA: 0x215EC0 Offset: 0x2146C0 VA: 0x180215EC0
	public void set_type(Image.Type value) { }
	// RVA: 0x215F60 Offset: 0x214760 VA: 0x180215F60
	public bool get_preserveAspect() { }
	// RVA: 0x215F70 Offset: 0x214770 VA: 0x180215F70
	public void set_preserveAspect(bool value) { }
	// RVA: 0x216010 Offset: 0x214810 VA: 0x180216010
	public bool get_fillCenter() { }
	// RVA: 0x216020 Offset: 0x214820 VA: 0x180216020
	public void set_fillCenter(bool value) { }
	// RVA: 0x2160C0 Offset: 0x2148C0 VA: 0x1802160C0
	public Image.FillMethod get_fillMethod() { }
	// RVA: 0x2160D0 Offset: 0x2148D0 VA: 0x1802160D0
	public void set_fillMethod(Image.FillMethod value) { }
	// RVA: 0x216180 Offset: 0x214980 VA: 0x180216180
	public float get_fillAmount() { }
	// RVA: 0x216190 Offset: 0x214990 VA: 0x180216190
	public void set_fillAmount(float value) { }
	// RVA: 0x216270 Offset: 0x214A70 VA: 0x180216270
	public bool get_fillClockwise() { }
	// RVA: 0x216280 Offset: 0x214A80 VA: 0x180216280
	public void set_fillClockwise(bool value) { }
	// RVA: 0x216320 Offset: 0x214B20 VA: 0x180216320
	public int get_fillOrigin() { }
	// RVA: 0x216330 Offset: 0x214B30 VA: 0x180216330
	public void set_fillOrigin(int value) { }
	// RVA: 0x2163D0 Offset: 0x214BD0 VA: 0x1802163D0
	public float get_eventAlphaThreshold() { }
	// RVA: 0x2163F0 Offset: 0x214BF0 VA: 0x1802163F0
	public void set_eventAlphaThreshold(float value) { }
	// RVA: 0x216410 Offset: 0x214C10 VA: 0x180216410
	public float get_alphaHitTestMinimumThreshold() { }
	// RVA: 0x216420 Offset: 0x214C20 VA: 0x180216420
	public void set_alphaHitTestMinimumThreshold(float value) { }
	// RVA: 0x216430 Offset: 0x214C30 VA: 0x180216430
	public bool get_useSpriteMesh() { }
	// RVA: 0x216440 Offset: 0x214C40 VA: 0x180216440
	public void set_useSpriteMesh(bool value) { }
	// RVA: 0x2164E0 Offset: 0x214CE0 VA: 0x1802164E0
	protected void .ctor() { }
	// RVA: 0x216540 Offset: 0x214D40 VA: 0x180216540
	public static Material get_defaultETC1GraphicMaterial() { }
	// RVA: 0x2166B0 Offset: 0x214EB0 VA: 0x1802166B0 Slot: 35
	public override Texture get_mainTexture() { }
	// RVA: 0x2168D0 Offset: 0x2150D0 VA: 0x1802168D0
	public bool get_hasBorder() { }
	// RVA: 0x216A10 Offset: 0x215210 VA: 0x180216A10
	public float get_pixelsPerUnitMultiplier() { }
	// RVA: 0x216A20 Offset: 0x215220 VA: 0x180216A20
	public void set_pixelsPerUnitMultiplier(float value) { }
	// RVA: 0x216AD0 Offset: 0x2152D0 VA: 0x180216AD0
	public float get_pixelsPerUnit() { }
	// RVA: 0x216C90 Offset: 0x215490 VA: 0x180216C90
	protected float get_multipliedPixelsPerUnit() { }
	// RVA: 0x216CB0 Offset: 0x2154B0 VA: 0x180216CB0 Slot: 32
	public override Material get_material() { }
	// RVA: 0x20CF30 Offset: 0x20B730 VA: 0x18020CF30 Slot: 33
	public override void set_material(Material value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 73
	public virtual void OnBeforeSerialize() { }
	// RVA: 0x216FF0 Offset: 0x2157F0 VA: 0x180216FF0 Slot: 74
	public virtual void OnAfterDeserialize() { }
	// RVA: 0x2170F0 Offset: 0x2158F0 VA: 0x1802170F0
	private void PreserveSpriteAspectRatio(ref Rect rect, Vector2 spriteSize) { }
	// RVA: 0x2171E0 Offset: 0x2159E0 VA: 0x1802171E0
	private Vector4 GetDrawingDimensions(bool shouldPreserveAspect) { }
	// RVA: 0x2175F0 Offset: 0x215DF0 VA: 0x1802175F0 Slot: 44
	public override void SetNativeSize() { }
	// RVA: 0x2178D0 Offset: 0x2160D0 VA: 0x1802178D0 Slot: 43
	protected override void OnPopulateMesh(VertexHelper toFill) { }
	// RVA: 0x217C00 Offset: 0x216400 VA: 0x180217C00
	private void TrackSprite() { }
	// RVA: 0x217D70 Offset: 0x216570 VA: 0x180217D70 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x217D90 Offset: 0x216590 VA: 0x180217D90 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x217F30 Offset: 0x216730 VA: 0x180217F30 Slot: 40
	protected override void UpdateMaterial() { }
	// RVA: 0x218260 Offset: 0x216A60 VA: 0x180218260 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }
	// RVA: 0x218440 Offset: 0x216C40 VA: 0x180218440
	private void GenerateSimpleSprite(VertexHelper vh, bool lPreserveAspect) { }
	// RVA: 0x2187C0 Offset: 0x216FC0 VA: 0x1802187C0
	private void GenerateSprite(VertexHelper vh, bool lPreserveAspect) { }
	// RVA: 0x218EC0 Offset: 0x2176C0 VA: 0x180218EC0
	private void GenerateSlicedSprite(VertexHelper toFill) { }
	// RVA: 0x219940 Offset: 0x218140 VA: 0x180219940
	private void GenerateTiledSprite(VertexHelper toFill) { }
	// RVA: 0x21AD30 Offset: 0x219530 VA: 0x18021AD30
	private static void AddQuad(VertexHelper vertexHelper, Vector3[] quadPositions, Color32 color, Vector3[] quadUVs) { }
	// RVA: 0x21AEF0 Offset: 0x2196F0 VA: 0x18021AEF0
	private static void AddQuad(VertexHelper vertexHelper, Vector2 posMin, Vector2 posMax, Color32 color, Vector2 uvMin, Vector2 uvMax) { }
	// RVA: 0x21B0B0 Offset: 0x2198B0 VA: 0x18021B0B0
	private Vector4 GetAdjustedBorders(Vector4 border, Rect adjustedRect) { }
	// RVA: 0x21B3C0 Offset: 0x219BC0 VA: 0x18021B3C0
	private void GenerateFilledSprite(VertexHelper toFill, bool preserveAspect) { }
	// RVA: 0x21CA40 Offset: 0x21B240 VA: 0x18021CA40
	private static bool RadialCut(Vector3[] xy, Vector3[] uv, float fill, bool invert, int corner) { }
	// RVA: 0x21CC00 Offset: 0x21B400 VA: 0x18021CC00
	private static void RadialCut(Vector3[] xy, float cos, float sin, bool invert, int corner) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 75
	public virtual void CalculateLayoutInputHorizontal() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 76
	public virtual void CalculateLayoutInputVertical() { }
	// RVA: 0x1BF170 Offset: 0x1BD970 VA: 0x1801BF170 Slot: 77
	public virtual float get_minWidth() { }
	// RVA: 0x21D420 Offset: 0x21BC20 VA: 0x18021D420 Slot: 78
	public virtual float get_preferredWidth() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 79
	public virtual float get_flexibleWidth() { }
	// RVA: 0x1BF170 Offset: 0x1BD970 VA: 0x1801BF170 Slot: 80
	public virtual float get_minHeight() { }
	// RVA: 0x21D5B0 Offset: 0x21BDB0 VA: 0x18021D5B0 Slot: 81
	public virtual float get_preferredHeight() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 82
	public virtual float get_flexibleHeight() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 83
	public virtual int get_layoutPriority() { }
	// RVA: 0x21D740 Offset: 0x21BF40 VA: 0x18021D740 Slot: 84
	public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera) { }
	// RVA: 0x21DCB0 Offset: 0x21C4B0 VA: 0x18021DCB0
	private Vector2 MapCoordinate(Vector2 local, Rect rect) { }
	// RVA: 0x21E1E0 Offset: 0x21C9E0 VA: 0x18021E1E0
	private static void RebuildImage(SpriteAtlas spriteAtlas) { }
	// RVA: 0x21E3B0 Offset: 0x21CBB0 VA: 0x18021E3B0
	private static void TrackImage(Image g) { }
	// RVA: 0x21E640 Offset: 0x21CE40 VA: 0x18021E640
	private static void UnTrackImage(Image g) { }
	// RVA: 0x21E740 Offset: 0x21CF40 VA: 0x18021E740 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }
	// RVA: 0x21E780 Offset: 0x21CF80 VA: 0x18021E780
	private static void .cctor() { }
}

// Namespace: 
public enum Image.Type // TypeDefIndex: 2441
{
	// Fields
	public int value__; // 0x0
	public const Image.Type Simple = 0; // 0x0
	public const Image.Type Sliced = 1; // 0x0
	public const Image.Type Tiled = 2; // 0x0
	public const Image.Type Filled = 3; // 0x0
}

// Namespace: 
public enum Image.FillMethod // TypeDefIndex: 2442
{
	// Fields
	public int value__; // 0x0
	public const Image.FillMethod Horizontal = 0; // 0x0
	public const Image.FillMethod Vertical = 1; // 0x0
	public const Image.FillMethod Radial90 = 2; // 0x0
	public const Image.FillMethod Radial180 = 3; // 0x0
	public const Image.FillMethod Radial360 = 4; // 0x0
}

// Namespace: UnityEngine.UI
public class InputField : Selectable, IUpdateSelectedHandler, IEventSystemHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, ICanvasElement, ILayoutElement // TypeDefIndex: 2443
{
	// Fields
	protected TouchScreenKeyboard m_Keyboard; // 0xF0
	private static readonly char[] kSeparators; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0x102190 Offset: 0x101590 VA: 0x180102190
	[SerializeField] // RVA: 0x102190 Offset: 0x101590 VA: 0x180102190
	protected Text m_TextComponent; // 0xF8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Graphic m_Placeholder; // 0x100
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private InputField.ContentType m_ContentType; // 0x108
	[FormerlySerializedAsAttribute] // RVA: 0x1021C0 Offset: 0x1015C0 VA: 0x1801021C0
	[SerializeField] // RVA: 0x1021C0 Offset: 0x1015C0 VA: 0x1801021C0
	private InputField.InputType m_InputType; // 0x10C
	[FormerlySerializedAsAttribute] // RVA: 0x1021F0 Offset: 0x1015F0 VA: 0x1801021F0
	[SerializeField] // RVA: 0x1021F0 Offset: 0x1015F0 VA: 0x1801021F0
	private char m_AsteriskChar; // 0x110
	[FormerlySerializedAsAttribute] // RVA: 0x102220 Offset: 0x101620 VA: 0x180102220
	[SerializeField] // RVA: 0x102220 Offset: 0x101620 VA: 0x180102220
	private TouchScreenKeyboardType m_KeyboardType; // 0x114
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private InputField.LineType m_LineType; // 0x118
	[SerializeField] // RVA: 0x102250 Offset: 0x101650 VA: 0x180102250
	[FormerlySerializedAsAttribute] // RVA: 0x102250 Offset: 0x101650 VA: 0x180102250
	private bool m_HideMobileInput; // 0x11C
	[SerializeField] // RVA: 0x102280 Offset: 0x101680 VA: 0x180102280
	[FormerlySerializedAsAttribute] // RVA: 0x102280 Offset: 0x101680 VA: 0x180102280
	private InputField.CharacterValidation m_CharacterValidation; // 0x120
	[SerializeField] // RVA: 0x1022B0 Offset: 0x1016B0 VA: 0x1801022B0
	[FormerlySerializedAsAttribute] // RVA: 0x1022B0 Offset: 0x1016B0 VA: 0x1801022B0
	private int m_CharacterLimit; // 0x124
	[FormerlySerializedAsAttribute] // RVA: 0x1022E0 Offset: 0x1016E0 VA: 0x1801022E0
	[SerializeField] // RVA: 0x1022E0 Offset: 0x1016E0 VA: 0x1801022E0
	[FormerlySerializedAsAttribute] // RVA: 0x1022E0 Offset: 0x1016E0 VA: 0x1801022E0
	[FormerlySerializedAsAttribute] // RVA: 0x1022E0 Offset: 0x1016E0 VA: 0x1801022E0
	private InputField.SubmitEvent m_OnEndEdit; // 0x128
	[SerializeField] // RVA: 0x102350 Offset: 0x101750 VA: 0x180102350
	[FormerlySerializedAsAttribute] // RVA: 0x102350 Offset: 0x101750 VA: 0x180102350
	[FormerlySerializedAsAttribute] // RVA: 0x102350 Offset: 0x101750 VA: 0x180102350
	private InputField.OnChangeEvent m_OnValueChanged; // 0x130
	[SerializeField] // RVA: 0x1023B0 Offset: 0x1017B0 VA: 0x1801023B0
	[FormerlySerializedAsAttribute] // RVA: 0x1023B0 Offset: 0x1017B0 VA: 0x1801023B0
	private InputField.OnValidateInput m_OnValidateInput; // 0x138
	[SerializeField] // RVA: 0x1023E0 Offset: 0x1017E0 VA: 0x1801023E0
	[FormerlySerializedAsAttribute] // RVA: 0x1023E0 Offset: 0x1017E0 VA: 0x1801023E0
	private Color m_CaretColor; // 0x140
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_CustomCaretColor; // 0x150
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Color m_SelectionColor; // 0x154
	[FormerlySerializedAsAttribute] // RVA: 0x102410 Offset: 0x101810 VA: 0x180102410
	[SerializeField] // RVA: 0x102410 Offset: 0x101810 VA: 0x180102410
	protected string m_Text; // 0x168
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_CaretBlinkRate; // 0x170
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_CaretWidth; // 0x174
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_ReadOnly; // 0x178
	protected int m_CaretPosition; // 0x17C
	protected int m_CaretSelectPosition; // 0x180
	private RectTransform caretRectTrans; // 0x188
	protected UIVertex[] m_CursorVerts; // 0x190
	private TextGenerator m_InputTextCache; // 0x198
	private CanvasRenderer m_CachedInputRenderer; // 0x1A0
	private bool m_PreventFontCallback; // 0x1A8
	protected Mesh m_Mesh; // 0x1B0
	private bool m_AllowInput; // 0x1B8
	private bool m_ShouldActivateNextUpdate; // 0x1B9
	private bool m_UpdateDrag; // 0x1BA
	private bool m_DragPositionOutOfBounds; // 0x1BB
	private const float kHScrollSpeed = 0.05; // 0x0
	private const float kVScrollSpeed = 0.1; // 0x0
	protected bool m_CaretVisible; // 0x1BC
	private Coroutine m_BlinkCoroutine; // 0x1C0
	private float m_BlinkStartTime; // 0x1C8
	protected int m_DrawStart; // 0x1CC
	protected int m_DrawEnd; // 0x1D0
	private Coroutine m_DragCoroutine; // 0x1D8
	private string m_OriginalText; // 0x1E0
	private bool m_WasCanceled; // 0x1E8
	private bool m_HasDoneFocusTransition; // 0x1E9
	private WaitForSecondsRealtime m_WaitForSecondsRealtime; // 0x1F0
	private bool m_TouchKeyboardAllowsInPlaceEditing; // 0x1F8
	private const string kEmailSpecialCharacters = "!#$%&\'*+-/=?^_`{|}~"; // 0x0
	private Event m_ProcessingEvent; // 0x200
	private const int k_MaxTextLength = 16382; // 0x0

	// Properties
	private BaseInput input { get; }
	private string compositionString { get; }
	protected Mesh mesh { get; }
	protected TextGenerator cachedInputTextGenerator { get; }
	public bool shouldHideMobileInput { get; set; }
	private bool shouldActivateOnSelect { get; }
	public string text { get; set; }
	public bool isFocused { get; }
	public float caretBlinkRate { get; set; }
	public int caretWidth { get; set; }
	public Text textComponent { get; set; }
	public Graphic placeholder { get; set; }
	public Color caretColor { get; set; }
	public bool customCaretColor { get; set; }
	public Color selectionColor { get; set; }
	public InputField.SubmitEvent onEndEdit { get; set; }
	[ObsoleteAttribute] // RVA: 0x102470 Offset: 0x101870 VA: 0x180102470
	public InputField.OnChangeEvent onValueChange { get; set; }
	public InputField.OnChangeEvent onValueChanged { get; set; }
	public InputField.OnValidateInput onValidateInput { get; set; }
	public int characterLimit { get; set; }
	public InputField.ContentType contentType { get; set; }
	public InputField.LineType lineType { get; set; }
	public InputField.InputType inputType { get; set; }
	public TouchScreenKeyboard touchScreenKeyboard { get; }
	public TouchScreenKeyboardType keyboardType { get; set; }
	public InputField.CharacterValidation characterValidation { get; set; }
	public bool readOnly { get; set; }
	public bool multiLine { get; }
	public char asteriskChar { get; set; }
	public bool wasCanceled { get; }
	protected int caretPositionInternal { get; set; }
	protected int caretSelectPositionInternal { get; set; }
	private bool hasSelection { get; }
	public int caretPosition { get; set; }
	public int selectionAnchorPosition { get; set; }
	public int selectionFocusPosition { get; set; }
	private static string clipboard { get; set; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods
	// RVA: 0x27FF10 Offset: 0x27E710 VA: 0x18027FF10
	private BaseInput get_input() { }
	// RVA: 0x280070 Offset: 0x27E870 VA: 0x180280070
	private string get_compositionString() { }
	// RVA: 0x280190 Offset: 0x27E990 VA: 0x180280190
	protected void .ctor() { }
	// RVA: 0x2803F0 Offset: 0x27EBF0 VA: 0x1802803F0
	protected Mesh get_mesh() { }
	// RVA: 0x2804D0 Offset: 0x27ECD0 VA: 0x1802804D0
	protected TextGenerator get_cachedInputTextGenerator() { }
	// RVA: 0x280580 Offset: 0x27ED80 VA: 0x180280580
	public void set_shouldHideMobileInput(bool value) { }
	// RVA: 0x280610 Offset: 0x27EE10 VA: 0x180280610
	public bool get_shouldHideMobileInput() { }
	// RVA: 0x280680 Offset: 0x27EE80 VA: 0x180280680
	private bool get_shouldActivateOnSelect() { }
	// RVA: 0x228A90 Offset: 0x227290 VA: 0x180228A90
	public string get_text() { }
	// RVA: 0x2806D0 Offset: 0x27EED0 VA: 0x1802806D0
	public void set_text(string value) { }
	// RVA: 0x2806E0 Offset: 0x27EEE0 VA: 0x1802806E0
	public void SetTextWithoutNotify(string input) { }
	// RVA: 0x2806F0 Offset: 0x27EEF0 VA: 0x1802806F0
	private void SetText(string value, bool sendCallback = True) { }
	// RVA: 0x280AB0 Offset: 0x27F2B0 VA: 0x180280AB0
	public bool get_isFocused() { }
	// RVA: 0x280AC0 Offset: 0x27F2C0 VA: 0x180280AC0
	public float get_caretBlinkRate() { }
	// RVA: 0x280AD0 Offset: 0x27F2D0 VA: 0x180280AD0
	public void set_caretBlinkRate(float value) { }
	// RVA: 0x1AF160 Offset: 0x1AD960 VA: 0x1801AF160
	public int get_caretWidth() { }
	// RVA: 0x280B70 Offset: 0x27F370 VA: 0x180280B70
	public void set_caretWidth(int value) { }
	// RVA: 0x171080 Offset: 0x16F880 VA: 0x180171080
	public Text get_textComponent() { }
	// RVA: 0x280C00 Offset: 0x27F400 VA: 0x180280C00
	public void set_textComponent(Text value) { }
	// RVA: 0x171250 Offset: 0x16FA50 VA: 0x180171250
	public Graphic get_placeholder() { }
	// RVA: 0x280EC0 Offset: 0x27F6C0 VA: 0x180280EC0
	public void set_placeholder(Graphic value) { }
	// RVA: 0x280F80 Offset: 0x27F780 VA: 0x180280F80
	public Color get_caretColor() { }
	// RVA: 0x280FE0 Offset: 0x27F7E0 VA: 0x180280FE0
	public void set_caretColor(Color value) { }
	// RVA: 0x281050 Offset: 0x27F850 VA: 0x180281050
	public bool get_customCaretColor() { }
	// RVA: 0x281060 Offset: 0x27F860 VA: 0x180281060
	public void set_customCaretColor(bool value) { }
	// RVA: 0x281080 Offset: 0x27F880 VA: 0x180281080
	public Color get_selectionColor() { }
	// RVA: 0x281090 Offset: 0x27F890 VA: 0x180281090
	public void set_selectionColor(Color value) { }
	// RVA: 0x1ADA70 Offset: 0x1AC270 VA: 0x1801ADA70
	public InputField.SubmitEvent get_onEndEdit() { }
	// RVA: 0x281100 Offset: 0x27F900 VA: 0x180281100
	public void set_onEndEdit(InputField.SubmitEvent value) { }
	// RVA: 0x19DA40 Offset: 0x19C240 VA: 0x18019DA40
	public InputField.OnChangeEvent get_onValueChange() { }
	// RVA: 0x2811C0 Offset: 0x27F9C0 VA: 0x1802811C0
	public void set_onValueChange(InputField.OnChangeEvent value) { }
	// RVA: 0x19DA40 Offset: 0x19C240 VA: 0x18019DA40
	public InputField.OnChangeEvent get_onValueChanged() { }
	// RVA: 0x2811C0 Offset: 0x27F9C0 VA: 0x1802811C0
	public void set_onValueChanged(InputField.OnChangeEvent value) { }
	// RVA: 0x1ADB30 Offset: 0x1AC330 VA: 0x1801ADB30
	public InputField.OnValidateInput get_onValidateInput() { }
	// RVA: 0x281280 Offset: 0x27FA80 VA: 0x180281280
	public void set_onValidateInput(InputField.OnValidateInput value) { }
	// RVA: 0x281340 Offset: 0x27FB40 VA: 0x180281340
	public int get_characterLimit() { }
	// RVA: 0x281350 Offset: 0x27FB50 VA: 0x180281350
	public void set_characterLimit(int value) { }
	// RVA: 0x1A2310 Offset: 0x1A0B10 VA: 0x1801A2310
	public InputField.ContentType get_contentType() { }
	// RVA: 0x281430 Offset: 0x27FC30 VA: 0x180281430
	public void set_contentType(InputField.ContentType value) { }
	// RVA: 0x202E90 Offset: 0x201690 VA: 0x180202E90
	public InputField.LineType get_lineType() { }
	// RVA: 0x281610 Offset: 0x27FE10 VA: 0x180281610
	public void set_lineType(InputField.LineType value) { }
	// RVA: 0x1A2330 Offset: 0x1A0B30 VA: 0x1801A2330
	public InputField.InputType get_inputType() { }
	// RVA: 0x281740 Offset: 0x27FF40 VA: 0x180281740
	public void set_inputType(InputField.InputType value) { }
	// RVA: 0x171030 Offset: 0x16F830 VA: 0x180171030
	public TouchScreenKeyboard get_touchScreenKeyboard() { }
	// RVA: 0x2817F0 Offset: 0x27FFF0 VA: 0x1802817F0
	public TouchScreenKeyboardType get_keyboardType() { }
	// RVA: 0x281800 Offset: 0x280000 VA: 0x180281800
	public void set_keyboardType(TouchScreenKeyboardType value) { }
	// RVA: 0x19DA80 Offset: 0x19C280 VA: 0x18019DA80
	public InputField.CharacterValidation get_characterValidation() { }
	// RVA: 0x2818B0 Offset: 0x2800B0 VA: 0x1802818B0
	public void set_characterValidation(InputField.CharacterValidation value) { }
	// RVA: 0x281960 Offset: 0x280160 VA: 0x180281960
	public bool get_readOnly() { }
	// RVA: 0x281970 Offset: 0x280170 VA: 0x180281970
	public void set_readOnly(bool value) { }
	// RVA: 0x281980 Offset: 0x280180 VA: 0x180281980
	public bool get_multiLine() { }
	// RVA: 0x2819A0 Offset: 0x2801A0 VA: 0x1802819A0
	public char get_asteriskChar() { }
	// RVA: 0x2819B0 Offset: 0x2801B0 VA: 0x1802819B0
	public void set_asteriskChar(char value) { }
	// RVA: 0x281A80 Offset: 0x280280 VA: 0x180281A80
	public bool get_wasCanceled() { }
	// RVA: 0x281A90 Offset: 0x280290 VA: 0x180281A90
	protected void ClampPos(ref int pos) { }
	// RVA: 0x281AD0 Offset: 0x2802D0 VA: 0x180281AD0
	protected int get_caretPositionInternal() { }
	// RVA: 0x281B00 Offset: 0x280300 VA: 0x180281B00
	protected void set_caretPositionInternal(int value) { }
	// RVA: 0x281B50 Offset: 0x280350 VA: 0x180281B50
	protected int get_caretSelectPositionInternal() { }
	// RVA: 0x281B80 Offset: 0x280380 VA: 0x180281B80
	protected void set_caretSelectPositionInternal(int value) { }
	// RVA: 0x281BD0 Offset: 0x2803D0 VA: 0x180281BD0
	private bool get_hasSelection() { }
	// RVA: 0x281B50 Offset: 0x280350 VA: 0x180281B50
	public int get_caretPosition() { }
	// RVA: 0x281C40 Offset: 0x280440 VA: 0x180281C40
	public void set_caretPosition(int value) { }
	// RVA: 0x281AD0 Offset: 0x2802D0 VA: 0x180281AD0
	public int get_selectionAnchorPosition() { }
	// RVA: 0x281D00 Offset: 0x280500 VA: 0x180281D00
	public void set_selectionAnchorPosition(int value) { }
	// RVA: 0x281B50 Offset: 0x280350 VA: 0x180281B50
	public int get_selectionFocusPosition() { }
	// RVA: 0x281D70 Offset: 0x280570 VA: 0x180281D70
	public void set_selectionFocusPosition(int value) { }
	// RVA: 0x281DE0 Offset: 0x2805E0 VA: 0x180281DE0 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x282090 Offset: 0x280890 VA: 0x180282090 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x282350 Offset: 0x280B50 VA: 0x180282350
	private IEnumerator CaretBlink() { }
	// RVA: 0x2823E0 Offset: 0x280BE0 VA: 0x1802823E0
	private void SetCaretVisible() { }
	// RVA: 0x282460 Offset: 0x280C60 VA: 0x180282460
	private void SetCaretActive() { }
	// RVA: 0x282540 Offset: 0x280D40 VA: 0x180282540
	private void UpdateCaretMaterial() { }
	// RVA: 0x2826D0 Offset: 0x280ED0 VA: 0x1802826D0
	protected void OnFocus() { }
	// RVA: 0x2826D0 Offset: 0x280ED0 VA: 0x1802826D0
	protected void SelectAll() { }
	// RVA: 0x282730 Offset: 0x280F30 VA: 0x180282730
	public void MoveTextEnd(bool shift) { }
	// RVA: 0x282800 Offset: 0x281000 VA: 0x180282800
	public void MoveTextStart(bool shift) { }
	// RVA: 0x1B1740 Offset: 0x1AFF40 VA: 0x1801B1740
	private static string get_clipboard() { }
	// RVA: 0x1B1790 Offset: 0x1AFF90 VA: 0x1801B1790
	private static void set_clipboard(string value) { }
	// RVA: 0x2828C0 Offset: 0x2810C0 VA: 0x1802828C0
	private bool InPlaceEditing() { }
	// RVA: 0x2828F0 Offset: 0x2810F0 VA: 0x1802828F0
	private void UpdateCaretFromKeyboard() { }
	// RVA: 0x282AA0 Offset: 0x2812A0 VA: 0x180282AA0 Slot: 59
	protected virtual void LateUpdate() { }
	[ObsoleteAttribute] // RVA: 0x102440 Offset: 0x101840 VA: 0x180102440
	// RVA: 0x2830A0 Offset: 0x2818A0 VA: 0x1802830A0
	public Vector2 ScreenToLocal(Vector2 screen) { }
	// RVA: 0x2835D0 Offset: 0x281DD0 VA: 0x1802835D0
	private int GetUnclampedCharacterLineFromPosition(Vector2 pos, TextGenerator generator) { }
	// RVA: 0x2838C0 Offset: 0x2820C0 VA: 0x1802838C0
	protected int GetCharacterIndexFromPosition(Vector2 pos) { }
	// RVA: 0x283BE0 Offset: 0x2823E0 VA: 0x180283BE0
	private bool MayDrag(PointerEventData eventData) { }
	// RVA: 0x283D10 Offset: 0x282510 VA: 0x180283D10 Slot: 60
	public virtual void OnBeginDrag(PointerEventData eventData) { }
	// RVA: 0x283D40 Offset: 0x282540 VA: 0x180283D40 Slot: 61
	public virtual void OnDrag(PointerEventData eventData) { }
	// RVA: 0x284010 Offset: 0x282810 VA: 0x180284010
	private IEnumerator MouseDragOutsideRect(PointerEventData eventData) { }
	// RVA: 0x2840B0 Offset: 0x2828B0 VA: 0x1802840B0 Slot: 62
	public virtual void OnEndDrag(PointerEventData eventData) { }
	// RVA: 0x2840E0 Offset: 0x2828E0 VA: 0x1802840E0 Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }
	// RVA: 0x2843B0 Offset: 0x282BB0 VA: 0x1802843B0
	protected InputField.EditState KeyPressed(Event evt) { }
	// RVA: 0x284AA0 Offset: 0x2832A0 VA: 0x180284AA0
	private bool IsValidChar(char c) { }
	// RVA: 0x284B00 Offset: 0x283300 VA: 0x180284B00
	public void ProcessEvent(Event e) { }
	// RVA: 0x284B10 Offset: 0x283310 VA: 0x180284B10 Slot: 63
	public virtual void OnUpdateSelected(BaseEventData eventData) { }
	// RVA: 0x284DA0 Offset: 0x2835A0 VA: 0x180284DA0
	private string GetSelectedString() { }
	// RVA: 0x284EB0 Offset: 0x2836B0 VA: 0x180284EB0
	private int FindtNextWordBegin() { }
	// RVA: 0x285010 Offset: 0x283810 VA: 0x180285010
	private void MoveRight(bool shift, bool ctrl) { }
	// RVA: 0x285340 Offset: 0x283B40 VA: 0x180285340
	private int FindtPrevWordBegin() { }
	// RVA: 0x285480 Offset: 0x283C80 VA: 0x180285480
	private void MoveLeft(bool shift, bool ctrl) { }
	// RVA: 0x285790 Offset: 0x283F90 VA: 0x180285790
	private int DetermineCharacterLine(int charPos, TextGenerator generator) { }
	// RVA: 0x285960 Offset: 0x284160 VA: 0x180285960
	private int LineUpCharacterPosition(int originalPos, bool goToFirstChar) { }
	// RVA: 0x285D40 Offset: 0x284540 VA: 0x180285D40
	private int LineDownCharacterPosition(int originalPos, bool goToLastChar) { }
	// RVA: 0x286150 Offset: 0x284950 VA: 0x180286150
	private void MoveDown(bool shift) { }
	// RVA: 0x286160 Offset: 0x284960 VA: 0x180286160
	private void MoveDown(bool shift, bool goToLastChar) { }
	// RVA: 0x2863C0 Offset: 0x284BC0 VA: 0x1802863C0
	private void MoveUp(bool shift) { }
	// RVA: 0x2863D0 Offset: 0x284BD0 VA: 0x1802863D0
	private void MoveUp(bool shift, bool goToFirstChar) { }
	// RVA: 0x2865F0 Offset: 0x284DF0 VA: 0x1802865F0
	private void Delete() { }
	// RVA: 0x286900 Offset: 0x285100 VA: 0x180286900
	private void ForwardSpace() { }
	// RVA: 0x2869F0 Offset: 0x2851F0 VA: 0x1802869F0
	private void Backspace() { }
	// RVA: 0x286B70 Offset: 0x285370 VA: 0x180286B70
	private void Insert(char c) { }
	// RVA: 0x286CE0 Offset: 0x2854E0 VA: 0x180286CE0
	private void UpdateTouchKeyboardFromEditChanges() { }
	// RVA: 0x286D40 Offset: 0x285540 VA: 0x180286D40
	private void SendOnValueChangedAndUpdateLabel() { }
	// RVA: 0x286D60 Offset: 0x285560 VA: 0x180286D60
	private void SendOnValueChanged() { }
	// RVA: 0x286E40 Offset: 0x285640 VA: 0x180286E40
	protected void SendOnSubmit() { }
	// RVA: 0x286F20 Offset: 0x285720 VA: 0x180286F20 Slot: 64
	protected virtual void Append(string input) { }
	// RVA: 0x286FD0 Offset: 0x2857D0 VA: 0x180286FD0 Slot: 65
	protected virtual void Append(char input) { }
	// RVA: 0x2872D0 Offset: 0x285AD0 VA: 0x1802872D0
	protected void UpdateLabel() { }
	// RVA: 0x287860 Offset: 0x286060 VA: 0x180287860
	private bool IsSelectionVisible() { }
	// RVA: 0x287930 Offset: 0x286130 VA: 0x180287930
	private static int GetLineStartPosition(TextGenerator gen, int line) { }
	// RVA: 0x287AA0 Offset: 0x2862A0 VA: 0x180287AA0
	private static int GetLineEndPosition(TextGenerator gen, int line) { }
	// RVA: 0x287C60 Offset: 0x286460 VA: 0x180287C60
	private void SetDrawRangeToContainCaretPosition(int caretPos) { }
	// RVA: 0x2886A0 Offset: 0x286EA0 VA: 0x1802886A0
	public void ForceLabelUpdate() { }
	// RVA: 0x2886B0 Offset: 0x286EB0 VA: 0x1802886B0
	private void MarkGeometryAsDirty() { }
	// RVA: 0x288740 Offset: 0x286F40 VA: 0x180288740 Slot: 66
	public virtual void Rebuild(CanvasUpdate update) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 67
	public virtual void LayoutComplete() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 68
	public virtual void GraphicUpdateComplete() { }
	// RVA: 0x288750 Offset: 0x286F50 VA: 0x180288750
	private void UpdateGeometry() { }
	// RVA: 0x288BF0 Offset: 0x2873F0 VA: 0x180288BF0
	private void AssignPositioningIfNeeded() { }
	// RVA: 0x2896E0 Offset: 0x287EE0 VA: 0x1802896E0
	private void OnFillVBO(Mesh vbo) { }
	// RVA: 0x2898D0 Offset: 0x2880D0 VA: 0x1802898D0
	private void GenerateCaret(VertexHelper vbo, Vector2 roundingOffset) { }
	// RVA: 0x28A540 Offset: 0x288D40 VA: 0x18028A540
	private void CreateCursorVerts() { }
	// RVA: 0x28A710 Offset: 0x288F10 VA: 0x18028A710
	private void GenerateHighlight(VertexHelper vbo, Vector2 roundingOffset) { }
	// RVA: 0x28B020 Offset: 0x289820 VA: 0x18028B020
	protected char Validate(string text, int pos, char ch) { }
	// RVA: 0x28B760 Offset: 0x289F60 VA: 0x18028B760
	public void ActivateInputField() { }
	// RVA: 0x28B8F0 Offset: 0x28A0F0 VA: 0x18028B8F0
	private void ActivateInputFieldInternal() { }
	// RVA: 0x28BD40 Offset: 0x28A540 VA: 0x18028BD40 Slot: 36
	public override void OnSelect(BaseEventData eventData) { }
	// RVA: 0x28BDB0 Offset: 0x28A5B0 VA: 0x18028BDB0 Slot: 69
	public virtual void OnPointerClick(PointerEventData eventData) { }
	// RVA: 0x28BDE0 Offset: 0x28A5E0 VA: 0x18028BDE0
	public void DeactivateInputField() { }
	// RVA: 0x28C0B0 Offset: 0x28A8B0 VA: 0x18028C0B0 Slot: 37
	public override void OnDeselect(BaseEventData eventData) { }
	// RVA: 0x28C0E0 Offset: 0x28A8E0 VA: 0x18028C0E0 Slot: 70
	public virtual void OnSubmit(BaseEventData eventData) { }
	// RVA: 0x28C130 Offset: 0x28A930 VA: 0x18028C130
	private void EnforceContentType() { }
	// RVA: 0x28C2A0 Offset: 0x28AAA0 VA: 0x18028C2A0
	private void EnforceTextHOverflow() { }
	// RVA: 0x28C3E0 Offset: 0x28ABE0 VA: 0x18028C3E0
	private void SetToCustomIfContentTypeIsNot(InputField.ContentType[] allowedContentTypes) { }
	// RVA: 0x28C450 Offset: 0x28AC50 VA: 0x18028C450
	private void SetToCustom() { }
	// RVA: 0x28C470 Offset: 0x28AC70 VA: 0x18028C470 Slot: 26
	protected override void DoStateTransition(Selectable.SelectionState state, bool instant) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 71
	public virtual void CalculateLayoutInputHorizontal() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 72
	public virtual void CalculateLayoutInputVertical() { }
	// RVA: 0x1BF170 Offset: 0x1BD970 VA: 0x1801BF170 Slot: 73
	public virtual float get_minWidth() { }
	// RVA: 0x28C4A0 Offset: 0x28ACA0 VA: 0x18028C4A0 Slot: 74
	public virtual float get_preferredWidth() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 75
	public virtual float get_flexibleWidth() { }
	// RVA: 0x1BF170 Offset: 0x1BD970 VA: 0x1801BF170 Slot: 76
	public virtual float get_minHeight() { }
	// RVA: 0x28C680 Offset: 0x28AE80 VA: 0x18028C680 Slot: 77
	public virtual float get_preferredHeight() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 78
	public virtual float get_flexibleHeight() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 79
	public virtual int get_layoutPriority() { }
	// RVA: 0x28C8C0 Offset: 0x28B0C0 VA: 0x18028C8C0
	private static void .cctor() { }
	// RVA: 0x1BF8A0 Offset: 0x1BE0A0 VA: 0x1801BF8A0 Slot: 46
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum InputField.ContentType // TypeDefIndex: 2444
{
	// Fields
	public int value__; // 0x0
	public const InputField.ContentType Standard = 0; // 0x0
	public const InputField.ContentType Autocorrected = 1; // 0x0
	public const InputField.ContentType IntegerNumber = 2; // 0x0
	public const InputField.ContentType DecimalNumber = 3; // 0x0
	public const InputField.ContentType Alphanumeric = 4; // 0x0
	public const InputField.ContentType Name = 5; // 0x0
	public const InputField.ContentType EmailAddress = 6; // 0x0
	public const InputField.ContentType Password = 7; // 0x0
	public const InputField.ContentType Pin = 8; // 0x0
	public const InputField.ContentType Custom = 9; // 0x0
}

// Namespace: 
public enum InputField.InputType // TypeDefIndex: 2445
{
	// Fields
	public int value__; // 0x0
	public const InputField.InputType Standard = 0; // 0x0
	public const InputField.InputType AutoCorrect = 1; // 0x0
	public const InputField.InputType Password = 2; // 0x0
}

// Namespace: 
public enum InputField.CharacterValidation // TypeDefIndex: 2446
{
	// Fields
	public int value__; // 0x0
	public const InputField.CharacterValidation None = 0; // 0x0
	public const InputField.CharacterValidation Integer = 1; // 0x0
	public const InputField.CharacterValidation Decimal = 2; // 0x0
	public const InputField.CharacterValidation Alphanumeric = 3; // 0x0
	public const InputField.CharacterValidation Name = 4; // 0x0
	public const InputField.CharacterValidation EmailAddress = 5; // 0x0
}

// Namespace: 
public enum InputField.LineType // TypeDefIndex: 2447
{
	// Fields
	public int value__; // 0x0
	public const InputField.LineType SingleLine = 0; // 0x0
	public const InputField.LineType MultiLineSubmit = 1; // 0x0
	public const InputField.LineType MultiLineNewline = 2; // 0x0
}

// Namespace: 
public sealed class InputField.OnValidateInput : MulticastDelegate // TypeDefIndex: 2448
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x4DB700 Offset: 0x4D9F00 VA: 0x1804DB700 Slot: 12
	public virtual char Invoke(string text, int charIndex, char addedChar) { }
	// RVA: 0x4DBAA0 Offset: 0x4DA2A0 VA: 0x1804DBAA0 Slot: 13
	public virtual IAsyncResult BeginInvoke(string text, int charIndex, char addedChar, AsyncCallback callback, object object) { }
	// RVA: 0x4DBB80 Offset: 0x4DA380 VA: 0x1804DBB80 Slot: 14
	public virtual char EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[Serializable]
public class InputField.SubmitEvent : UnityEvent<string> // TypeDefIndex: 2449
{
	// Methods
	// RVA: 0x4DBBC0 Offset: 0x4DA3C0 VA: 0x1804DBBC0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class InputField.OnChangeEvent : UnityEvent<string> // TypeDefIndex: 2450
{
	// Methods
	// RVA: 0x4DB680 Offset: 0x4D9E80 VA: 0x1804DB680
	public void .ctor() { }
}

// Namespace: 
protected enum InputField.EditState // TypeDefIndex: 2451
{
	// Fields
	public int value__; // 0x0
	public const InputField.EditState Continue = 0; // 0x0
	public const InputField.EditState Finish = 1; // 0x0
}

// Namespace: 
private sealed class InputField.<CaretBlink>d__159 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2452
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public InputField <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x4DB170 Offset: 0x4D9970 VA: 0x1804DB170 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class InputField.<MouseDragOutsideRect>d__179 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2453
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public PointerEventData eventData; // 0x20
	public InputField <>4__this; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x4DB2A0 Offset: 0x4D9AA0 VA: 0x1804DB2A0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: UnityEngine.UI
[ExecuteAlways] // RVA: 0x1024A0 Offset: 0x1018A0 VA: 0x1801024A0
[RequireComponent] // RVA: 0x1024A0 Offset: 0x1018A0 VA: 0x1801024A0
[DisallowMultipleComponent] // RVA: 0x1024A0 Offset: 0x1018A0 VA: 0x1801024A0
public class AspectRatioFitter : UIBehaviour, ILayoutSelfController, ILayoutController // TypeDefIndex: 2454
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AspectRatioFitter.AspectMode m_AspectMode; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_AspectRatio; // 0x1C
	private RectTransform m_Rect; // 0x20
	private bool m_DelayedSetDirty; // 0x28
	private DrivenRectTransformTracker m_Tracker; // 0x29

	// Properties
	public AspectRatioFitter.AspectMode aspectMode { get; set; }
	public float aspectRatio { get; set; }
	private RectTransform rectTransform { get; }

	// Methods
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0
	public AspectRatioFitter.AspectMode get_aspectMode() { }
	// RVA: 0x1FB990 Offset: 0x1FA190 VA: 0x1801FB990
	public void set_aspectMode(AspectRatioFitter.AspectMode value) { }
	// RVA: 0x1FBA30 Offset: 0x1FA230 VA: 0x1801FBA30
	public float get_aspectRatio() { }
	// RVA: 0x1FBA40 Offset: 0x1FA240 VA: 0x1801FBA40
	public void set_aspectRatio(float value) { }
	// RVA: 0x1FBAD0 Offset: 0x1FA2D0 VA: 0x1801FBAD0
	private RectTransform get_rectTransform() { }
	// RVA: 0x1FBB90 Offset: 0x1FA390 VA: 0x1801FBB90
	protected void .ctor() { }
	// RVA: 0x1FBBA0 Offset: 0x1FA3A0 VA: 0x1801FBBA0 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x1FBBB0 Offset: 0x1FA3B0 VA: 0x1801FBBB0 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x1FBC50 Offset: 0x1FA450 VA: 0x1801FBC50 Slot: 19
	protected virtual void Update() { }
	// RVA: 0x1FBBA0 Offset: 0x1FA3A0 VA: 0x1801FBBA0 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }
	// RVA: 0x1FBC70 Offset: 0x1FA470 VA: 0x1801FBC70
	private void UpdateRect() { }
	// RVA: 0x1FBFE0 Offset: 0x1FA7E0 VA: 0x1801FBFE0
	private float GetSizeDeltaToProduceSize(float size, int axis) { }
	// RVA: 0x1FC160 Offset: 0x1FA960 VA: 0x1801FC160
	private Vector2 GetParentSize() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 20
	public virtual void SetLayoutHorizontal() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 21
	public virtual void SetLayoutVertical() { }
	// RVA: 0x1FBBA0 Offset: 0x1FA3A0 VA: 0x1801FBBA0
	protected void SetDirty() { }
}

// Namespace: 
public enum AspectRatioFitter.AspectMode // TypeDefIndex: 2455
{
	// Fields
	public int value__; // 0x0
	public const AspectRatioFitter.AspectMode None = 0; // 0x0
	public const AspectRatioFitter.AspectMode WidthControlsHeight = 1; // 0x0
	public const AspectRatioFitter.AspectMode HeightControlsWidth = 2; // 0x0
	public const AspectRatioFitter.AspectMode FitInParent = 3; // 0x0
	public const AspectRatioFitter.AspectMode EnvelopeParent = 4; // 0x0
}

// Namespace: UnityEngine.UI
[RequireComponent] // RVA: 0x102520 Offset: 0x101920 VA: 0x180102520
[ExecuteAlways] // RVA: 0x102520 Offset: 0x101920 VA: 0x180102520
[DisallowMultipleComponent] // RVA: 0x102520 Offset: 0x101920 VA: 0x180102520
public class CanvasScaler : UIBehaviour // TypeDefIndex: 2456
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CanvasScaler.ScaleMode m_UiScaleMode; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_ReferencePixelsPerUnit; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_ScaleFactor; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Vector2 m_ReferenceResolution; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected CanvasScaler.ScreenMatchMode m_ScreenMatchMode; // 0x2C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_MatchWidthOrHeight; // 0x30
	private const float kLogBase = 2; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected CanvasScaler.Unit m_PhysicalUnit; // 0x34
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_FallbackScreenDPI; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_DefaultSpriteDPI; // 0x3C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_DynamicPixelsPerUnit; // 0x40
	private Canvas m_Canvas; // 0x48
	private float m_PrevScaleFactor; // 0x50
	private float m_PrevReferencePixelsPerUnit; // 0x54

	// Properties
	public CanvasScaler.ScaleMode uiScaleMode { get; set; }
	public float referencePixelsPerUnit { get; set; }
	public float scaleFactor { get; set; }
	public Vector2 referenceResolution { get; set; }
	public CanvasScaler.ScreenMatchMode screenMatchMode { get; set; }
	public float matchWidthOrHeight { get; set; }
	public CanvasScaler.Unit physicalUnit { get; set; }
	public float fallbackScreenDPI { get; set; }
	public float defaultSpriteDPI { get; set; }
	public float dynamicPixelsPerUnit { get; set; }

	// Methods
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0
	public CanvasScaler.ScaleMode get_uiScaleMode() { }
	// RVA: 0x1FECF0 Offset: 0x1FD4F0 VA: 0x1801FECF0
	public void set_uiScaleMode(CanvasScaler.ScaleMode value) { }
	// RVA: 0x1FBA30 Offset: 0x1FA230 VA: 0x1801FBA30
	public float get_referencePixelsPerUnit() { }
	// RVA: 0x1FED00 Offset: 0x1FD500 VA: 0x1801FED00
	public void set_referencePixelsPerUnit(float value) { }
	// RVA: 0x1FED10 Offset: 0x1FD510 VA: 0x1801FED10
	public float get_scaleFactor() { }
	// RVA: 0x1FED20 Offset: 0x1FD520 VA: 0x1801FED20
	public void set_scaleFactor(float value) { }
	// RVA: 0x1FEDD0 Offset: 0x1FD5D0 VA: 0x1801FEDD0
	public Vector2 get_referenceResolution() { }
	// RVA: 0x1FEDF0 Offset: 0x1FD5F0 VA: 0x1801FEDF0
	public void set_referenceResolution(Vector2 value) { }
	// RVA: 0x1FEF40 Offset: 0x1FD740 VA: 0x1801FEF40
	public CanvasScaler.ScreenMatchMode get_screenMatchMode() { }
	// RVA: 0x1FEF50 Offset: 0x1FD750 VA: 0x1801FEF50
	public void set_screenMatchMode(CanvasScaler.ScreenMatchMode value) { }
	// RVA: 0x1FEF60 Offset: 0x1FD760 VA: 0x1801FEF60
	public float get_matchWidthOrHeight() { }
	// RVA: 0x1FEF70 Offset: 0x1FD770 VA: 0x1801FEF70
	public void set_matchWidthOrHeight(float value) { }
	// RVA: 0x1FEF80 Offset: 0x1FD780 VA: 0x1801FEF80
	public CanvasScaler.Unit get_physicalUnit() { }
	// RVA: 0x1FEF90 Offset: 0x1FD790 VA: 0x1801FEF90
	public void set_physicalUnit(CanvasScaler.Unit value) { }
	// RVA: 0x1FEFA0 Offset: 0x1FD7A0 VA: 0x1801FEFA0
	public float get_fallbackScreenDPI() { }
	// RVA: 0x1FEFB0 Offset: 0x1FD7B0 VA: 0x1801FEFB0
	public void set_fallbackScreenDPI(float value) { }
	// RVA: 0x1FEFC0 Offset: 0x1FD7C0 VA: 0x1801FEFC0
	public float get_defaultSpriteDPI() { }
	// RVA: 0x1FEFD0 Offset: 0x1FD7D0 VA: 0x1801FEFD0
	public void set_defaultSpriteDPI(float value) { }
	// RVA: 0x1FF080 Offset: 0x1FD880 VA: 0x1801FF080
	public float get_dynamicPixelsPerUnit() { }
	// RVA: 0x1FF090 Offset: 0x1FD890 VA: 0x1801FF090
	public void set_dynamicPixelsPerUnit(float value) { }
	// RVA: 0x1FF0A0 Offset: 0x1FD8A0 VA: 0x1801FF0A0
	protected void .ctor() { }
	// RVA: 0x1FF0F0 Offset: 0x1FD8F0 VA: 0x1801FF0F0 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x1FF180 Offset: 0x1FD980 VA: 0x1801FF180 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x1FF1C0 Offset: 0x1FD9C0 VA: 0x1801FF1C0 Slot: 17
	protected virtual void Update() { }
	// RVA: 0x1FF1E0 Offset: 0x1FD9E0 VA: 0x1801FF1E0 Slot: 18
	protected virtual void Handle() { }
	// RVA: 0x1FF3C0 Offset: 0x1FDBC0 VA: 0x1801FF3C0 Slot: 19
	protected virtual void HandleWorldCanvas() { }
	// RVA: 0x1FF3F0 Offset: 0x1FDBF0 VA: 0x1801FF3F0 Slot: 20
	protected virtual void HandleConstantPixelSize() { }
	// RVA: 0x1FF420 Offset: 0x1FDC20 VA: 0x1801FF420 Slot: 21
	protected virtual void HandleScaleWithScreenSize() { }
	// RVA: 0x1FF7A0 Offset: 0x1FDFA0 VA: 0x1801FF7A0 Slot: 22
	protected virtual void HandleConstantPhysicalSize() { }
	// RVA: 0x1FF880 Offset: 0x1FE080 VA: 0x1801FF880
	protected void SetScaleFactor(float scaleFactor) { }
	// RVA: 0x1FF910 Offset: 0x1FE110 VA: 0x1801FF910
	protected void SetReferencePixelsPerUnit(float referencePixelsPerUnit) { }
}

// Namespace: 
public enum CanvasScaler.ScaleMode // TypeDefIndex: 2457
{
	// Fields
	public int value__; // 0x0
	public const CanvasScaler.ScaleMode ConstantPixelSize = 0; // 0x0
	public const CanvasScaler.ScaleMode ScaleWithScreenSize = 1; // 0x0
	public const CanvasScaler.ScaleMode ConstantPhysicalSize = 2; // 0x0
}

// Namespace: 
public enum CanvasScaler.ScreenMatchMode // TypeDefIndex: 2458
{
	// Fields
	public int value__; // 0x0
	public const CanvasScaler.ScreenMatchMode MatchWidthOrHeight = 0; // 0x0
	public const CanvasScaler.ScreenMatchMode Expand = 1; // 0x0
	public const CanvasScaler.ScreenMatchMode Shrink = 2; // 0x0
}

// Namespace: 
public enum CanvasScaler.Unit // TypeDefIndex: 2459
{
	// Fields
	public int value__; // 0x0
	public const CanvasScaler.Unit Centimeters = 0; // 0x0
	public const CanvasScaler.Unit Millimeters = 1; // 0x0
	public const CanvasScaler.Unit Inches = 2; // 0x0
	public const CanvasScaler.Unit Points = 3; // 0x0
	public const CanvasScaler.Unit Picas = 4; // 0x0
}

// Namespace: UnityEngine.UI
[RequireComponent] // RVA: 0x1025A0 Offset: 0x1019A0 VA: 0x1801025A0
[ExecuteAlways] // RVA: 0x1025A0 Offset: 0x1019A0 VA: 0x1801025A0
public class ContentSizeFitter : UIBehaviour, ILayoutSelfController, ILayoutController // TypeDefIndex: 2460
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected ContentSizeFitter.FitMode m_HorizontalFit; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected ContentSizeFitter.FitMode m_VerticalFit; // 0x1C
	private RectTransform m_Rect; // 0x20
	private DrivenRectTransformTracker m_Tracker; // 0x28

	// Properties
	public ContentSizeFitter.FitMode horizontalFit { get; set; }
	public ContentSizeFitter.FitMode verticalFit { get; set; }
	private RectTransform rectTransform { get; }

	// Methods
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0
	public ContentSizeFitter.FitMode get_horizontalFit() { }
	// RVA: 0x2028D0 Offset: 0x2010D0 VA: 0x1802028D0
	public void set_horizontalFit(ContentSizeFitter.FitMode value) { }
	// RVA: 0x202970 Offset: 0x201170 VA: 0x180202970
	public ContentSizeFitter.FitMode get_verticalFit() { }
	// RVA: 0x202980 Offset: 0x201180 VA: 0x180202980
	public void set_verticalFit(ContentSizeFitter.FitMode value) { }
	// RVA: 0x202A20 Offset: 0x201220 VA: 0x180202A20
	private RectTransform get_rectTransform() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
	// RVA: 0x202AE0 Offset: 0x2012E0 VA: 0x180202AE0 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x202AF0 Offset: 0x2012F0 VA: 0x180202AF0 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x202AE0 Offset: 0x2012E0 VA: 0x180202AE0 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }
	// RVA: 0x202B90 Offset: 0x201390 VA: 0x180202B90
	private void HandleSelfFittingAlongAxis(int axis) { }
	// RVA: 0x202C20 Offset: 0x201420 VA: 0x180202C20 Slot: 19
	public virtual void SetLayoutHorizontal() { }
	// RVA: 0x202C90 Offset: 0x201490 VA: 0x180202C90 Slot: 20
	public virtual void SetLayoutVertical() { }
	// RVA: 0x202D00 Offset: 0x201500 VA: 0x180202D00
	protected void SetDirty() { }
}

// Namespace: 
public enum ContentSizeFitter.FitMode // TypeDefIndex: 2461
{
	// Fields
	public int value__; // 0x0
	public const ContentSizeFitter.FitMode Unconstrained = 0; // 0x0
	public const ContentSizeFitter.FitMode MinSize = 1; // 0x0
	public const ContentSizeFitter.FitMode PreferredSize = 2; // 0x0
}

// Namespace: UnityEngine.UI
public class GridLayoutGroup : LayoutGroup // TypeDefIndex: 2462
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected GridLayoutGroup.Corner m_StartCorner; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected GridLayoutGroup.Axis m_StartAxis; // 0x5C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Vector2 m_CellSize; // 0x60
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Vector2 m_Spacing; // 0x68
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected GridLayoutGroup.Constraint m_Constraint; // 0x70
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected int m_ConstraintCount; // 0x74

	// Properties
	public GridLayoutGroup.Corner startCorner { get; set; }
	public GridLayoutGroup.Axis startAxis { get; set; }
	public Vector2 cellSize { get; set; }
	public Vector2 spacing { get; set; }
	public GridLayoutGroup.Constraint constraint { get; set; }
	public int constraintCount { get; set; }

	// Methods
	// RVA: 0x212850 Offset: 0x211050 VA: 0x180212850
	public GridLayoutGroup.Corner get_startCorner() { }
	// RVA: 0x212860 Offset: 0x211060 VA: 0x180212860
	public void set_startCorner(GridLayoutGroup.Corner value) { }
	// RVA: 0x2128F0 Offset: 0x2110F0 VA: 0x1802128F0
	public GridLayoutGroup.Axis get_startAxis() { }
	// RVA: 0x212900 Offset: 0x211100 VA: 0x180212900
	public void set_startAxis(GridLayoutGroup.Axis value) { }
	// RVA: 0x212990 Offset: 0x211190 VA: 0x180212990
	public Vector2 get_cellSize() { }
	// RVA: 0x2129B0 Offset: 0x2111B0 VA: 0x1802129B0
	public void set_cellSize(Vector2 value) { }
	// RVA: 0x212AB0 Offset: 0x2112B0 VA: 0x180212AB0
	public Vector2 get_spacing() { }
	// RVA: 0x212AD0 Offset: 0x2112D0 VA: 0x180212AD0
	public void set_spacing(Vector2 value) { }
	// RVA: 0x212BD0 Offset: 0x2113D0 VA: 0x180212BD0
	public GridLayoutGroup.Constraint get_constraint() { }
	// RVA: 0x212BE0 Offset: 0x2113E0 VA: 0x180212BE0
	public void set_constraint(GridLayoutGroup.Constraint value) { }
	// RVA: 0x212C70 Offset: 0x211470 VA: 0x180212C70
	public int get_constraintCount() { }
	// RVA: 0x212C80 Offset: 0x211480 VA: 0x180212C80
	public void set_constraintCount(int value) { }
	// RVA: 0x212D90 Offset: 0x211590 VA: 0x180212D90
	protected void .ctor() { }
	// RVA: 0x212E60 Offset: 0x211660 VA: 0x180212E60 Slot: 28
	public override void CalculateLayoutInputHorizontal() { }
	// RVA: 0x2131F0 Offset: 0x2119F0 VA: 0x1802131F0 Slot: 29
	public override void CalculateLayoutInputVertical() { }
	// RVA: 0x2135C0 Offset: 0x211DC0 VA: 0x1802135C0 Slot: 37
	public override void SetLayoutHorizontal() { }
	// RVA: 0x2135D0 Offset: 0x211DD0 VA: 0x1802135D0 Slot: 38
	public override void SetLayoutVertical() { }
	// RVA: 0x2135E0 Offset: 0x211DE0 VA: 0x1802135E0
	private void SetCellsAlongAxis(int axis) { }
}

// Namespace: 
public enum GridLayoutGroup.Corner // TypeDefIndex: 2463
{
	// Fields
	public int value__; // 0x0
	public const GridLayoutGroup.Corner UpperLeft = 0; // 0x0
	public const GridLayoutGroup.Corner UpperRight = 1; // 0x0
	public const GridLayoutGroup.Corner LowerLeft = 2; // 0x0
	public const GridLayoutGroup.Corner LowerRight = 3; // 0x0
}

// Namespace: 
public enum GridLayoutGroup.Axis // TypeDefIndex: 2464
{
	// Fields
	public int value__; // 0x0
	public const GridLayoutGroup.Axis Horizontal = 0; // 0x0
	public const GridLayoutGroup.Axis Vertical = 1; // 0x0
}

// Namespace: 
public enum GridLayoutGroup.Constraint // TypeDefIndex: 2465
{
	// Fields
	public int value__; // 0x0
	public const GridLayoutGroup.Constraint Flexible = 0; // 0x0
	public const GridLayoutGroup.Constraint FixedColumnCount = 1; // 0x0
	public const GridLayoutGroup.Constraint FixedRowCount = 2; // 0x0
}

// Namespace: UnityEngine.UI
public class HorizontalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2466
{
	// Methods
	// RVA: 0x213EC0 Offset: 0x2126C0 VA: 0x180213EC0
	protected void .ctor() { }
	// RVA: 0x213ED0 Offset: 0x2126D0 VA: 0x180213ED0 Slot: 28
	public override void CalculateLayoutInputHorizontal() { }
	// RVA: 0x213F00 Offset: 0x212700 VA: 0x180213F00 Slot: 29
	public override void CalculateLayoutInputVertical() { }
	// RVA: 0x213F10 Offset: 0x212710 VA: 0x180213F10 Slot: 37
	public override void SetLayoutHorizontal() { }
	// RVA: 0x213F20 Offset: 0x212720 VA: 0x180213F20 Slot: 38
	public override void SetLayoutVertical() { }
}

// Namespace: UnityEngine.UI
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public abstract class HorizontalOrVerticalLayoutGroup : LayoutGroup // TypeDefIndex: 2467
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_Spacing; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_ChildForceExpandWidth; // 0x5C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_ChildForceExpandHeight; // 0x5D
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_ChildControlWidth; // 0x5E
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_ChildControlHeight; // 0x5F
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_ChildScaleWidth; // 0x60
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_ChildScaleHeight; // 0x61
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_ReverseArrangement; // 0x62

	// Properties
	public float spacing { get; set; }
	public bool childForceExpandWidth { get; set; }
	public bool childForceExpandHeight { get; set; }
	public bool childControlWidth { get; set; }
	public bool childControlHeight { get; set; }
	public bool childScaleWidth { get; set; }
	public bool childScaleHeight { get; set; }
	public bool reverseArrangement { get; set; }

	// Methods
	// RVA: 0x213F30 Offset: 0x212730 VA: 0x180213F30
	public float get_spacing() { }
	// RVA: 0x213F40 Offset: 0x212740 VA: 0x180213F40
	public void set_spacing(float value) { }
	// RVA: 0x214030 Offset: 0x212830 VA: 0x180214030
	public bool get_childForceExpandWidth() { }
	// RVA: 0x214040 Offset: 0x212840 VA: 0x180214040
	public void set_childForceExpandWidth(bool value) { }
	// RVA: 0x214130 Offset: 0x212930 VA: 0x180214130
	public bool get_childForceExpandHeight() { }
	// RVA: 0x214140 Offset: 0x212940 VA: 0x180214140
	public void set_childForceExpandHeight(bool value) { }
	// RVA: 0x214230 Offset: 0x212A30 VA: 0x180214230
	public bool get_childControlWidth() { }
	// RVA: 0x214240 Offset: 0x212A40 VA: 0x180214240
	public void set_childControlWidth(bool value) { }
	// RVA: 0x214330 Offset: 0x212B30 VA: 0x180214330
	public bool get_childControlHeight() { }
	// RVA: 0x214340 Offset: 0x212B40 VA: 0x180214340
	public void set_childControlHeight(bool value) { }
	// RVA: 0x214430 Offset: 0x212C30 VA: 0x180214430
	public bool get_childScaleWidth() { }
	// RVA: 0x214440 Offset: 0x212C40 VA: 0x180214440
	public void set_childScaleWidth(bool value) { }
	// RVA: 0x214530 Offset: 0x212D30 VA: 0x180214530
	public bool get_childScaleHeight() { }
	// RVA: 0x214540 Offset: 0x212D40 VA: 0x180214540
	public void set_childScaleHeight(bool value) { }
	// RVA: 0x214630 Offset: 0x212E30 VA: 0x180214630
	public bool get_reverseArrangement() { }
	// RVA: 0x214640 Offset: 0x212E40 VA: 0x180214640
	public void set_reverseArrangement(bool value) { }
	// RVA: 0x214730 Offset: 0x212F30 VA: 0x180214730
	protected void CalcAlongAxis(int axis, bool isVertical) { }
	// RVA: 0x214C20 Offset: 0x213420 VA: 0x180214C20
	protected void SetChildrenAlongAxis(int axis, bool isVertical) { }
	// RVA: 0x215700 Offset: 0x213F00 VA: 0x180215700
	private void GetChildSizes(RectTransform child, int axis, bool controlSize, bool childForceExpand, out float min, out float preferred, out float flexible) { }
	// RVA: 0x213EC0 Offset: 0x2126C0 VA: 0x180213EC0
	protected void .ctor() { }
}

// Namespace: UnityEngine.UI
public interface ILayoutElement // TypeDefIndex: 2468
{
	// Properties
	public abstract float minWidth { get; }
	public abstract float preferredWidth { get; }
	public abstract float flexibleWidth { get; }
	public abstract float minHeight { get; }
	public abstract float preferredHeight { get; }
	public abstract float flexibleHeight { get; }
	public abstract int layoutPriority { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void CalculateLayoutInputHorizontal() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void CalculateLayoutInputVertical() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract float get_minWidth() { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract float get_preferredWidth() { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract float get_flexibleWidth() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract float get_minHeight() { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract float get_preferredHeight() { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract float get_flexibleHeight() { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract int get_layoutPriority() { }
}

// Namespace: UnityEngine.UI
public interface ILayoutController // TypeDefIndex: 2469
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void SetLayoutHorizontal() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void SetLayoutVertical() { }
}

// Namespace: UnityEngine.UI
public interface ILayoutGroup : ILayoutController // TypeDefIndex: 2470
{}

// Namespace: UnityEngine.UI
public interface ILayoutSelfController : ILayoutController // TypeDefIndex: 2471
{}

// Namespace: UnityEngine.UI
public interface ILayoutIgnorer // TypeDefIndex: 2472
{
	// Properties
	public abstract bool ignoreLayout { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract bool get_ignoreLayout() { }
}

// Namespace: UnityEngine.UI
[ExecuteAlways] // RVA: 0x102620 Offset: 0x101A20 VA: 0x180102620
[RequireComponent] // RVA: 0x102620 Offset: 0x101A20 VA: 0x180102620
public class LayoutElement : UIBehaviour, ILayoutElement, ILayoutIgnorer // TypeDefIndex: 2473
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_IgnoreLayout; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_MinWidth; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_MinHeight; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_PreferredWidth; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_PreferredHeight; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_FlexibleWidth; // 0x2C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_FlexibleHeight; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_LayoutPriority; // 0x34

	// Properties
	public virtual bool ignoreLayout { get; set; }
	public virtual float minWidth { get; set; }
	public virtual float minHeight { get; set; }
	public virtual float preferredWidth { get; set; }
	public virtual float preferredHeight { get; set; }
	public virtual float flexibleWidth { get; set; }
	public virtual float flexibleHeight { get; set; }
	public virtual int layoutPriority { get; set; }

	// Methods
	// RVA: 0x28C960 Offset: 0x28B160 VA: 0x18028C960 Slot: 27
	public virtual bool get_ignoreLayout() { }
	// RVA: 0x28C970 Offset: 0x28B170 VA: 0x18028C970 Slot: 28
	public virtual void set_ignoreLayout(bool value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 29
	public virtual void CalculateLayoutInputHorizontal() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 30
	public virtual void CalculateLayoutInputVertical() { }
	// RVA: 0x1FBA30 Offset: 0x1FA230 VA: 0x1801FBA30 Slot: 31
	public virtual float get_minWidth() { }
	// RVA: 0x28CA00 Offset: 0x28B200 VA: 0x18028CA00 Slot: 32
	public virtual void set_minWidth(float value) { }
	// RVA: 0x1FED10 Offset: 0x1FD510 VA: 0x1801FED10 Slot: 33
	public virtual float get_minHeight() { }
	// RVA: 0x28CA90 Offset: 0x28B290 VA: 0x18028CA90 Slot: 34
	public virtual void set_minHeight(float value) { }
	// RVA: 0x197B30 Offset: 0x196330 VA: 0x180197B30 Slot: 35
	public virtual float get_preferredWidth() { }
	// RVA: 0x28CB20 Offset: 0x28B320 VA: 0x18028CB20 Slot: 36
	public virtual void set_preferredWidth(float value) { }
	// RVA: 0x28CBB0 Offset: 0x28B3B0 VA: 0x18028CBB0 Slot: 37
	public virtual float get_preferredHeight() { }
	// RVA: 0x28CBC0 Offset: 0x28B3C0 VA: 0x18028CBC0 Slot: 38
	public virtual void set_preferredHeight(float value) { }
	// RVA: 0x28CC50 Offset: 0x28B450 VA: 0x18028CC50 Slot: 39
	public virtual float get_flexibleWidth() { }
	// RVA: 0x28CC60 Offset: 0x28B460 VA: 0x18028CC60 Slot: 40
	public virtual void set_flexibleWidth(float value) { }
	// RVA: 0x1FEF60 Offset: 0x1FD760 VA: 0x1801FEF60 Slot: 41
	public virtual float get_flexibleHeight() { }
	// RVA: 0x28CCF0 Offset: 0x28B4F0 VA: 0x18028CCF0 Slot: 42
	public virtual void set_flexibleHeight(float value) { }
	// RVA: 0x1FEF80 Offset: 0x1FD780 VA: 0x1801FEF80 Slot: 43
	public virtual int get_layoutPriority() { }
	// RVA: 0x28CD80 Offset: 0x28B580 VA: 0x18028CD80 Slot: 44
	public virtual void set_layoutPriority(int value) { }
	// RVA: 0x28CE10 Offset: 0x28B610 VA: 0x18028CE10
	protected void .ctor() { }
	// RVA: 0x28CE50 Offset: 0x28B650 VA: 0x18028CE50 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x28CE50 Offset: 0x28B650 VA: 0x18028CE50 Slot: 12
	protected override void OnTransformParentChanged() { }
	// RVA: 0x28CE50 Offset: 0x28B650 VA: 0x18028CE50 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x28CE50 Offset: 0x28B650 VA: 0x18028CE50 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }
	// RVA: 0x28CE50 Offset: 0x28B650 VA: 0x18028CE50 Slot: 11
	protected override void OnBeforeTransformParentChanged() { }
	// RVA: 0x28CE60 Offset: 0x28B660 VA: 0x18028CE60
	protected void SetDirty() { }
}

// Namespace: UnityEngine.UI
[DisallowMultipleComponent] // RVA: 0x1026A0 Offset: 0x101AA0 VA: 0x1801026A0
[RequireComponent] // RVA: 0x1026A0 Offset: 0x101AA0 VA: 0x1801026A0
[ExecuteAlways] // RVA: 0x1026A0 Offset: 0x101AA0 VA: 0x1801026A0
public abstract class LayoutGroup : UIBehaviour, ILayoutElement, ILayoutGroup, ILayoutController // TypeDefIndex: 2474
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected RectOffset m_Padding; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TextAnchor m_ChildAlignment; // 0x20
	private RectTransform m_Rect; // 0x28
	protected DrivenRectTransformTracker m_Tracker; // 0x30
	private Vector2 m_TotalMinSize; // 0x34
	private Vector2 m_TotalPreferredSize; // 0x3C
	private Vector2 m_TotalFlexibleSize; // 0x44
	private List<RectTransform> m_RectChildren; // 0x50

	// Properties
	public RectOffset padding { get; set; }
	public TextAnchor childAlignment { get; set; }
	protected RectTransform rectTransform { get; }
	protected List<RectTransform> rectChildren { get; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }
	private bool isRootLayoutGroup { get; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public RectOffset get_padding() { }
	// RVA: 0x28CF70 Offset: 0x28B770 VA: 0x18028CF70
	public void set_padding(RectOffset value) { }
	// RVA: 0x197B20 Offset: 0x196320 VA: 0x180197B20
	public TextAnchor get_childAlignment() { }
	// RVA: 0x28D030 Offset: 0x28B830 VA: 0x18028D030
	public void set_childAlignment(TextAnchor value) { }
	// RVA: 0x28D0C0 Offset: 0x28B8C0 VA: 0x18028D0C0
	protected RectTransform get_rectTransform() { }
	// RVA: 0x1E31F0 Offset: 0x1E19F0 VA: 0x1801E31F0
	protected List<RectTransform> get_rectChildren() { }
	// RVA: 0x28D180 Offset: 0x28B980 VA: 0x18028D180 Slot: 28
	public virtual void CalculateLayoutInputHorizontal() { }
	// RVA: -1 Offset: -1 Slot: 29
	public abstract void CalculateLayoutInputVertical() { }
	// RVA: 0x28D500 Offset: 0x28BD00 VA: 0x18028D500 Slot: 30
	public virtual float get_minWidth() { }
	// RVA: 0x28D580 Offset: 0x28BD80 VA: 0x18028D580 Slot: 31
	public virtual float get_preferredWidth() { }
	// RVA: 0x28D600 Offset: 0x28BE00 VA: 0x18028D600 Slot: 32
	public virtual float get_flexibleWidth() { }
	// RVA: 0x28D680 Offset: 0x28BE80 VA: 0x18028D680 Slot: 33
	public virtual float get_minHeight() { }
	// RVA: 0x28D700 Offset: 0x28BF00 VA: 0x18028D700 Slot: 34
	public virtual float get_preferredHeight() { }
	// RVA: 0x28D780 Offset: 0x28BF80 VA: 0x18028D780 Slot: 35
	public virtual float get_flexibleHeight() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 36
	public virtual int get_layoutPriority() { }
	// RVA: -1 Offset: -1 Slot: 37
	public abstract void SetLayoutHorizontal() { }
	// RVA: -1 Offset: -1 Slot: 38
	public abstract void SetLayoutVertical() { }
	// RVA: 0x28D800 Offset: 0x28C000 VA: 0x18028D800
	protected void .ctor() { }
	// RVA: 0x28D9E0 Offset: 0x28C1E0 VA: 0x18028D9E0 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x28D9F0 Offset: 0x28C1F0 VA: 0x18028D9F0 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x28D9E0 Offset: 0x28C1E0 VA: 0x18028D9E0 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }
	// RVA: 0x28DA90 Offset: 0x28C290 VA: 0x18028DA90
	protected float GetTotalMinSize(int axis) { }
	// RVA: 0x28DAA0 Offset: 0x28C2A0 VA: 0x18028DAA0
	protected float GetTotalPreferredSize(int axis) { }
	// RVA: 0x28DAB0 Offset: 0x28C2B0 VA: 0x18028DAB0
	protected float GetTotalFlexibleSize(int axis) { }
	// RVA: 0x28DAC0 Offset: 0x28C2C0 VA: 0x18028DAC0
	protected float GetStartOffset(int axis, float requiredSpaceWithoutPadding) { }
	// RVA: 0x28DD20 Offset: 0x28C520 VA: 0x18028DD20
	protected float GetAlignmentOnAxis(int axis) { }
	// RVA: 0x28DD70 Offset: 0x28C570 VA: 0x18028DD70
	protected void SetLayoutInputForAxis(float totalMin, float totalPreferred, float totalFlexible, int axis) { }
	// RVA: 0x28DDD0 Offset: 0x28C5D0 VA: 0x18028DDD0
	protected void SetChildAlongAxis(RectTransform rect, int axis, float pos) { }
	// RVA: 0x28DEC0 Offset: 0x28C6C0 VA: 0x18028DEC0
	protected void SetChildAlongAxisWithScale(RectTransform rect, int axis, float pos, float scaleFactor) { }
	// RVA: 0x28E1A0 Offset: 0x28C9A0 VA: 0x18028E1A0
	protected void SetChildAlongAxis(RectTransform rect, int axis, float pos, float size) { }
	// RVA: 0x28E2A0 Offset: 0x28CAA0 VA: 0x18028E2A0
	protected void SetChildAlongAxisWithScale(RectTransform rect, int axis, float pos, float size, float scaleFactor) { }
	// RVA: 0x28E590 Offset: 0x28CD90 VA: 0x18028E590
	private bool get_isRootLayoutGroup() { }
	// RVA: 0x28E7F0 Offset: 0x28CFF0 VA: 0x18028E7F0 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }
	// RVA: 0x28D9E0 Offset: 0x28C1E0 VA: 0x18028D9E0 Slot: 39
	protected virtual void OnTransformChildrenChanged() { }
	// RVA: 0x534410 Offset: 0x532C10 VA: 0x180534410
	protected void SetProperty(ref T currentValue, T newValue) { }
	// RVA: 0x28E820 Offset: 0x28D020 VA: 0x18028E820
	protected void SetDirty() { }
	// RVA: 0x28E9B0 Offset: 0x28D1B0 VA: 0x18028E9B0
	private IEnumerator DelayedSetDirty(RectTransform rectTransform) { }
}

// Namespace: 
private sealed class LayoutGroup.<DelayedSetDirty>d__56 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2475
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public RectTransform rectTransform; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x4DBC40 Offset: 0x4DA440 VA: 0x1804DBC40 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: UnityEngine.UI
public class LayoutRebuilder : ICanvasElement // TypeDefIndex: 2476
{
	// Fields
	private RectTransform m_ToRebuild; // 0x10
	private int m_CachedHashFromTransform; // 0x18
	private static ObjectPool<LayoutRebuilder> s_Rebuilders; // 0x0

	// Properties
	public Transform transform { get; }

	// Methods
	// RVA: 0x28EA40 Offset: 0x28D240 VA: 0x18028EA40
	private void Initialize(RectTransform controller) { }
	// RVA: 0x28EA80 Offset: 0x28D280 VA: 0x18028EA80
	private void Clear() { }
	// RVA: 0x28EA90 Offset: 0x28D290 VA: 0x18028EA90
	private static void .cctor() { }
	// RVA: 0x28EC80 Offset: 0x28D480 VA: 0x18028EC80
	private static void ReapplyDrivenProperties(RectTransform driven) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 5
	public Transform get_transform() { }
	// RVA: 0x28ED10 Offset: 0x28D510 VA: 0x18028ED10 Slot: 8
	public bool IsDestroyed() { }
	// RVA: 0x28EDB0 Offset: 0x28D5B0 VA: 0x18028EDB0
	private static void StripDisabledBehavioursFromList(List<Component> components) { }
	// RVA: 0x28EED0 Offset: 0x28D6D0 VA: 0x18028EED0
	public static void ForceRebuildLayoutImmediate(RectTransform layoutRoot) { }
	// RVA: 0x28EFF0 Offset: 0x28D7F0 VA: 0x18028EFF0 Slot: 4
	public void Rebuild(CanvasUpdate executing) { }
	// RVA: 0x28F310 Offset: 0x28DB10 VA: 0x18028F310
	private void PerformLayoutControl(RectTransform rect, UnityAction<Component> action) { }
	// RVA: 0x28F880 Offset: 0x28E080 VA: 0x18028F880
	private void PerformLayoutCalculation(RectTransform rect, UnityAction<Component> action) { }
	// RVA: 0x28FBB0 Offset: 0x28E3B0 VA: 0x18028FBB0
	public static void MarkLayoutForRebuild(RectTransform rect) { }
	// RVA: 0x2900C0 Offset: 0x28E8C0 VA: 0x1802900C0
	private static bool ValidController(RectTransform layoutRoot, List<Component> comps) { }
	// RVA: 0x290390 Offset: 0x28EB90 VA: 0x180290390
	private static void MarkLayoutRootForRebuild(RectTransform controller) { }
	// RVA: 0x2905C0 Offset: 0x28EDC0 VA: 0x1802905C0 Slot: 6
	public void LayoutComplete() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	public void GraphicUpdateComplete() { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x290680 Offset: 0x28EE80 VA: 0x180290680 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x2906E0 Offset: 0x28EEE0 VA: 0x1802906E0 Slot: 3
	public override string ToString() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
[Serializable]
private sealed class LayoutRebuilder.<>c // TypeDefIndex: 2477
{
	// Fields
	public static readonly LayoutRebuilder.<>c <>9; // 0x0
	public static Predicate<Component> <>9__10_0; // 0x8
	public static UnityAction<Component> <>9__12_0; // 0x10
	public static UnityAction<Component> <>9__12_1; // 0x18
	public static UnityAction<Component> <>9__12_2; // 0x20
	public static UnityAction<Component> <>9__12_3; // 0x28

	// Methods
	// RVA: 0x4DBD10 Offset: 0x4DA510 VA: 0x1804DBD10
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x4DBD90 Offset: 0x4DA590 VA: 0x1804DBD90
	internal void <.cctor>b__5_0(LayoutRebuilder x) { }
	// RVA: 0x4DBDB0 Offset: 0x4DA5B0 VA: 0x1804DBDB0
	internal bool <StripDisabledBehavioursFromList>b__10_0(Component e) { }
	// RVA: 0x4DBF30 Offset: 0x4DA730 VA: 0x1804DBF30
	internal void <Rebuild>b__12_0(Component e) { }
	// RVA: 0x4DBFD0 Offset: 0x4DA7D0 VA: 0x1804DBFD0
	internal void <Rebuild>b__12_1(Component e) { }
	// RVA: 0x4DC070 Offset: 0x4DA870 VA: 0x1804DC070
	internal void <Rebuild>b__12_2(Component e) { }
	// RVA: 0x4DC120 Offset: 0x4DA920 VA: 0x1804DC120
	internal void <Rebuild>b__12_3(Component e) { }
}

// Namespace: UnityEngine.UI
public static class LayoutUtility // TypeDefIndex: 2478
{
	// Methods
	// RVA: 0x290760 Offset: 0x28EF60 VA: 0x180290760
	public static float GetMinSize(RectTransform rect, int axis) { }
	// RVA: 0x290990 Offset: 0x28F190 VA: 0x180290990
	public static float GetPreferredSize(RectTransform rect, int axis) { }
	// RVA: 0x2909B0 Offset: 0x28F1B0 VA: 0x1802909B0
	public static float GetFlexibleSize(RectTransform rect, int axis) { }
	// RVA: 0x290BE0 Offset: 0x28F3E0 VA: 0x180290BE0
	public static float GetMinWidth(RectTransform rect) { }
	// RVA: 0x290D10 Offset: 0x28F510 VA: 0x180290D10
	public static float GetPreferredWidth(RectTransform rect) { }
	// RVA: 0x290F40 Offset: 0x28F740 VA: 0x180290F40
	public static float GetFlexibleWidth(RectTransform rect) { }
	// RVA: 0x291070 Offset: 0x28F870 VA: 0x180291070
	public static float GetMinHeight(RectTransform rect) { }
	// RVA: 0x2911A0 Offset: 0x28F9A0 VA: 0x1802911A0
	public static float GetPreferredHeight(RectTransform rect) { }
	// RVA: 0x2913D0 Offset: 0x28FBD0 VA: 0x1802913D0
	public static float GetFlexibleHeight(RectTransform rect) { }
	// RVA: 0x291500 Offset: 0x28FD00 VA: 0x180291500
	public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue) { }
	// RVA: 0x291520 Offset: 0x28FD20 VA: 0x180291520
	public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue, out ILayoutElement source) { }
}

// Namespace: 
[Serializable]
private sealed class LayoutUtility.<>c // TypeDefIndex: 2479
{
	// Fields
	public static readonly LayoutUtility.<>c <>9; // 0x0
	public static Func<ILayoutElement, float> <>9__3_0; // 0x8
	public static Func<ILayoutElement, float> <>9__4_0; // 0x10
	public static Func<ILayoutElement, float> <>9__4_1; // 0x18
	public static Func<ILayoutElement, float> <>9__5_0; // 0x20
	public static Func<ILayoutElement, float> <>9__6_0; // 0x28
	public static Func<ILayoutElement, float> <>9__7_0; // 0x30
	public static Func<ILayoutElement, float> <>9__7_1; // 0x38
	public static Func<ILayoutElement, float> <>9__8_0; // 0x40

	// Methods
	// RVA: 0x4DC1D0 Offset: 0x4DA9D0 VA: 0x1804DC1D0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x4DC250 Offset: 0x4DAA50 VA: 0x1804DC250
	internal float <GetMinWidth>b__3_0(ILayoutElement e) { }
	// RVA: 0x4DC2E0 Offset: 0x4DAAE0 VA: 0x1804DC2E0
	internal float <GetPreferredWidth>b__4_0(ILayoutElement e) { }
	// RVA: 0x4DC370 Offset: 0x4DAB70 VA: 0x1804DC370
	internal float <GetPreferredWidth>b__4_1(ILayoutElement e) { }
	// RVA: 0x4DC400 Offset: 0x4DAC00 VA: 0x1804DC400
	internal float <GetFlexibleWidth>b__5_0(ILayoutElement e) { }
	// RVA: 0x4DC490 Offset: 0x4DAC90 VA: 0x1804DC490
	internal float <GetMinHeight>b__6_0(ILayoutElement e) { }
	// RVA: 0x4DC520 Offset: 0x4DAD20 VA: 0x1804DC520
	internal float <GetPreferredHeight>b__7_0(ILayoutElement e) { }
	// RVA: 0x4DC5B0 Offset: 0x4DADB0 VA: 0x1804DC5B0
	internal float <GetPreferredHeight>b__7_1(ILayoutElement e) { }
	// RVA: 0x4DC640 Offset: 0x4DAE40 VA: 0x1804DC640
	internal float <GetFlexibleHeight>b__8_0(ILayoutElement e) { }
}

// Namespace: UnityEngine.UI
public class VerticalLayoutGroup : HorizontalOrVerticalLayoutGroup // TypeDefIndex: 2480
{
	// Methods
	// RVA: 0x213EC0 Offset: 0x2126C0 VA: 0x180213EC0
	protected void .ctor() { }
	// RVA: 0x4DA6F0 Offset: 0x4D8EF0 VA: 0x1804DA6F0 Slot: 28
	public override void CalculateLayoutInputHorizontal() { }
	// RVA: 0x4DA720 Offset: 0x4D8F20 VA: 0x1804DA720 Slot: 29
	public override void CalculateLayoutInputVertical() { }
	// RVA: 0x4DA730 Offset: 0x4D8F30 VA: 0x1804DA730 Slot: 37
	public override void SetLayoutHorizontal() { }
	// RVA: 0x4DA740 Offset: 0x4D8F40 VA: 0x1804DA740 Slot: 38
	public override void SetLayoutVertical() { }
}

// Namespace: UnityEngine.UI
[DisallowMultipleComponent] // RVA: 0x102720 Offset: 0x101B20 VA: 0x180102720
[RequireComponent] // RVA: 0x102720 Offset: 0x101B20 VA: 0x180102720
[ExecuteAlways] // RVA: 0x102720 Offset: 0x101B20 VA: 0x180102720
public class Mask : UIBehaviour, ICanvasRaycastFilter, IMaterialModifier // TypeDefIndex: 2481
{
	// Fields
	private RectTransform m_RectTransform; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_ShowMaskGraphic; // 0x20
	private Graphic m_Graphic; // 0x28
	private Material m_MaskMaterial; // 0x30
	private Material m_UnmaskMaterial; // 0x38

	// Properties
	public RectTransform rectTransform { get; }
	public bool showMaskGraphic { get; set; }
	public Graphic graphic { get; }

	// Methods
	// RVA: 0x2918C0 Offset: 0x2900C0 VA: 0x1802918C0
	public RectTransform get_rectTransform() { }
	// RVA: 0x20B410 Offset: 0x209C10 VA: 0x18020B410
	public bool get_showMaskGraphic() { }
	// RVA: 0x291950 Offset: 0x290150 VA: 0x180291950
	public void set_showMaskGraphic(bool value) { }
	// RVA: 0x291A40 Offset: 0x290240 VA: 0x180291A40
	public Graphic get_graphic() { }
	// RVA: 0x291AD0 Offset: 0x2902D0 VA: 0x180291AD0
	protected void .ctor() { }
	// RVA: 0x291AE0 Offset: 0x2902E0 VA: 0x180291AE0 Slot: 19
	public virtual bool MaskEnabled() { }
	// RVA: 0x291BA0 Offset: 0x2903A0 VA: 0x180291BA0 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x291CF0 Offset: 0x2904F0 VA: 0x180291CF0 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x291F00 Offset: 0x290700 VA: 0x180291F00 Slot: 20
	public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
	// RVA: 0x292090 Offset: 0x290890 VA: 0x180292090 Slot: 21
	public virtual Material GetModifiedMaterial(Material baseMaterial) { }
}

// Namespace: UnityEngine.UI
public class MaskUtilities // TypeDefIndex: 2482
{
	// Methods
	// RVA: 0x292430 Offset: 0x290C30 VA: 0x180292430
	public static void Notify2DMaskStateChanged(Component mask) { }
	// RVA: 0x292650 Offset: 0x290E50 VA: 0x180292650
	public static void NotifyStencilStateChanged(Component mask) { }
	// RVA: 0x292860 Offset: 0x291060 VA: 0x180292860
	public static Transform FindRootSortOverrideCanvas(Transform start) { }
	// RVA: 0x292AC0 Offset: 0x2912C0 VA: 0x180292AC0
	public static int GetStencilDepth(Transform transform, Transform stopAfter) { }
	// RVA: 0x292DC0 Offset: 0x2915C0 VA: 0x180292DC0
	public static bool IsDescendantOrSelf(Transform father, Transform child) { }
	// RVA: 0x293010 Offset: 0x291810 VA: 0x180293010
	public static RectMask2D GetRectMaskForClippable(IClippable clippable) { }
	// RVA: 0x293360 Offset: 0x291B60 VA: 0x180293360
	public static void GetRectMasksForClip(RectMask2D clipper, List<RectMask2D> masks) { }
}

// Namespace: UnityEngine.UI
public abstract class MaskableGraphic : Graphic, IClippable, IMaskable, IMaterialModifier // TypeDefIndex: 2483
{
	// Fields
	protected bool m_ShouldRecalculateStencil; // 0xA0
	protected Material m_MaskMaterial; // 0xA8
	private RectMask2D m_ParentMask; // 0xB0
	private bool m_Maskable; // 0xB8
	[ObsoleteAttribute] // RVA: 0x1027A0 Offset: 0x101BA0 VA: 0x1801027A0
	protected bool m_IncludeForMasking; // 0xB9
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private MaskableGraphic.CullStateChangedEvent m_OnCullStateChanged; // 0xC0
	[ObsoleteAttribute] // RVA: 0x1027D0 Offset: 0x101BD0 VA: 0x1801027D0
	protected bool m_ShouldRecalculate; // 0xC8
	protected int m_StencilValue; // 0xCC
	private readonly Vector3[] m_Corners; // 0xD0

	// Properties
	public MaskableGraphic.CullStateChangedEvent onCullStateChanged { get; set; }
	public bool maskable { get; set; }
	private Rect rootCanvasRect { get; }

	// Methods
	// RVA: 0x2937A0 Offset: 0x291FA0 VA: 0x1802937A0
	public MaskableGraphic.CullStateChangedEvent get_onCullStateChanged() { }
	// RVA: 0x2937B0 Offset: 0x291FB0 VA: 0x1802937B0
	public void set_onCullStateChanged(MaskableGraphic.CullStateChangedEvent value) { }
	// RVA: 0x2937C0 Offset: 0x291FC0 VA: 0x1802937C0
	public bool get_maskable() { }
	// RVA: 0x2937D0 Offset: 0x291FD0 VA: 0x1802937D0
	public void set_maskable(bool value) { }
	// RVA: 0x293800 Offset: 0x292000 VA: 0x180293800 Slot: 55
	public virtual Material GetModifiedMaterial(Material baseMaterial) { }
	// RVA: 0x293A40 Offset: 0x292240 VA: 0x180293A40 Slot: 56
	public virtual void Cull(Rect clipRect, bool validRect) { }
	// RVA: 0x293AA0 Offset: 0x2922A0 VA: 0x180293AA0
	private void UpdateCull(bool cull) { }
	// RVA: 0x293C60 Offset: 0x292460 VA: 0x180293C60 Slot: 57
	public virtual void SetClipRect(Rect clipRect, bool validRect) { }
	// RVA: 0x293D40 Offset: 0x292540 VA: 0x180293D40 Slot: 58
	public virtual void SetClipSoftness(Vector2 clipSoftness) { }
	// RVA: 0x293DC0 Offset: 0x2925C0 VA: 0x180293DC0 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x294030 Offset: 0x292830 VA: 0x180294030 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x294160 Offset: 0x292960 VA: 0x180294160 Slot: 12
	protected override void OnTransformParentChanged() { }
	// RVA: 0x2942B0 Offset: 0x292AB0 VA: 0x1802942B0 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }
	// RVA: 0x294470 Offset: 0x292C70 VA: 0x180294470
	private Rect get_rootCanvasRect() { }
	// RVA: 0x294A40 Offset: 0x293240 VA: 0x180294A40
	private void UpdateClipParent() { }
	// RVA: 0x172B40 Offset: 0x171340 VA: 0x180172B40 Slot: 59
	public virtual void RecalculateClipping() { }
	// RVA: 0x294E30 Offset: 0x293630 VA: 0x180294E30 Slot: 60
	public virtual void RecalculateMasking() { }
	// RVA: 0x294F00 Offset: 0x293700 VA: 0x180294F00
	protected void .ctor() { }
	// RVA: 0x2950F0 Offset: 0x2938F0 VA: 0x1802950F0 Slot: 49
	private GameObject UnityEngine.UI.IClippable.get_gameObject() { }
}

// Namespace: 
[Serializable]
public class MaskableGraphic.CullStateChangedEvent : UnityEvent<bool> // TypeDefIndex: 2484
{
	// Methods
	// RVA: 0x4DC6D0 Offset: 0x4DAED0 VA: 0x1804DC6D0
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
public interface IMaterialModifier // TypeDefIndex: 2485
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract Material GetModifiedMaterial(Material baseMaterial) { }
}

// Namespace: UnityEngine.UI
internal static class Misc // TypeDefIndex: 2486
{
	// Methods
	// RVA: 0x295140 Offset: 0x293940 VA: 0x180295140
	public static void DestroyImmediate(Object obj) { }
}

// Namespace: UnityEngine.UI
internal static class MultipleDisplayUtilities // TypeDefIndex: 2487
{
	// Methods
	// RVA: 0x295210 Offset: 0x293A10 VA: 0x180295210
	public static bool GetRelativeMousePositionForDrag(PointerEventData eventData, ref Vector2 position) { }
	// RVA: 0x2953D0 Offset: 0x293BD0 VA: 0x1802953D0
	public static Vector2 GetMousePositionRelativeToMainDisplayResolution() { }
}

// Namespace: UnityEngine.UI
[Serializable]
public struct Navigation : IEquatable<Navigation> // TypeDefIndex: 2488
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Navigation.Mode m_Mode; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Selectable m_SelectOnUp; // 0x8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Selectable m_SelectOnDown; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Selectable m_SelectOnLeft; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Selectable m_SelectOnRight; // 0x20

	// Properties
	public Navigation.Mode mode { get; set; }
	public Selectable selectOnUp { get; set; }
	public Selectable selectOnDown { get; set; }
	public Selectable selectOnLeft { get; set; }
	public Selectable selectOnRight { get; set; }
	public static Navigation defaultNavigation { get; }

	// Methods
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10
	public Navigation.Mode get_mode() { }
	// RVA: 0x1ED0 Offset: 0x12D0 VA: 0x180001ED0
	public void set_mode(Navigation.Mode value) { }
	// RVA: 0x1E40 Offset: 0x1240 VA: 0x180001E40
	public Selectable get_selectOnUp() { }
	// RVA: 0x20F0 Offset: 0x14F0 VA: 0x1800020F0
	public void set_selectOnUp(Selectable value) { }
	// RVA: 0x2100 Offset: 0x1500 VA: 0x180002100
	public Selectable get_selectOnDown() { }
	// RVA: 0xCF90 Offset: 0xC390 VA: 0x18000CF90
	public void set_selectOnDown(Selectable value) { }
	// RVA: 0x23D0 Offset: 0x17D0 VA: 0x1800023D0
	public Selectable get_selectOnLeft() { }
	// RVA: 0xCFA0 Offset: 0xC3A0 VA: 0x18000CFA0
	public void set_selectOnLeft(Selectable value) { }
	// RVA: 0x23E0 Offset: 0x17E0 VA: 0x1800023E0
	public Selectable get_selectOnRight() { }
	// RVA: 0x2110 Offset: 0x1510 VA: 0x180002110
	public void set_selectOnRight(Selectable value) { }
	// RVA: 0x295660 Offset: 0x293E60 VA: 0x180295660
	public static Navigation get_defaultNavigation() { }
	// RVA: 0xCFB0 Offset: 0xC3B0 VA: 0x18000CFB0 Slot: 4
	public bool Equals(Navigation other) { }
}

// Namespace: 
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum Navigation.Mode // TypeDefIndex: 2489
{
	// Fields
	public int value__; // 0x0
	public const Navigation.Mode None = 0; // 0x0
	public const Navigation.Mode Horizontal = 1; // 0x0
	public const Navigation.Mode Vertical = 2; // 0x0
	public const Navigation.Mode Automatic = 3; // 0x0
	public const Navigation.Mode Explicit = 4; // 0x0
}

// Namespace: UnityEngine.UI
[RequireComponent] // RVA: 0x102800 Offset: 0x101C00 VA: 0x180102800
public class RawImage : MaskableGraphic // TypeDefIndex: 2490
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0x102880 Offset: 0x101C80 VA: 0x180102880
	[SerializeField] // RVA: 0x102880 Offset: 0x101C80 VA: 0x180102880
	private Texture m_Texture; // 0xD8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Rect m_UVRect; // 0xE0

	// Properties
	public override Texture mainTexture { get; }
	public Texture texture { get; set; }
	public Rect uvRect { get; set; }

	// Methods
	// RVA: 0x299910 Offset: 0x298110 VA: 0x180299910
	protected void .ctor() { }
	// RVA: 0x299940 Offset: 0x298140 VA: 0x180299940 Slot: 35
	public override Texture get_mainTexture() { }
	// RVA: 0x170D70 Offset: 0x16F570 VA: 0x180170D70
	public Texture get_texture() { }
	// RVA: 0x299B00 Offset: 0x298300 VA: 0x180299B00
	public void set_texture(Texture value) { }
	// RVA: 0x299BF0 Offset: 0x2983F0 VA: 0x180299BF0
	public Rect get_uvRect() { }
	// RVA: 0x299C00 Offset: 0x298400 VA: 0x180299C00
	public void set_uvRect(Rect value) { }
	// RVA: 0x299C70 Offset: 0x298470 VA: 0x180299C70 Slot: 44
	public override void SetNativeSize() { }
	// RVA: 0x299ED0 Offset: 0x2986D0 VA: 0x180299ED0 Slot: 43
	protected override void OnPopulateMesh(VertexHelper vh) { }
	// RVA: 0x21E740 Offset: 0x21CF40 VA: 0x18021E740 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }
}

// Namespace: UnityEngine.UI
[ExecuteAlways] // RVA: 0x1028B0 Offset: 0x101CB0 VA: 0x1801028B0
[RequireComponent] // RVA: 0x1028B0 Offset: 0x101CB0 VA: 0x1801028B0
[DisallowMultipleComponent] // RVA: 0x1028B0 Offset: 0x101CB0 VA: 0x1801028B0
public class RectMask2D : UIBehaviour, IClipper, ICanvasRaycastFilter // TypeDefIndex: 2491
{
	// Fields
	private readonly RectangularVertexClipper m_VertexClipper; // 0x18
	private RectTransform m_RectTransform; // 0x20
	private HashSet<MaskableGraphic> m_MaskableTargets; // 0x28
	private HashSet<IClippable> m_ClipTargets; // 0x30
	private bool m_ShouldRecalculateClipRects; // 0x38
	private List<RectMask2D> m_Clippers; // 0x40
	private Rect m_LastClipRectCanvasSpace; // 0x48
	private bool m_ForceClip; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector4 m_Padding; // 0x5C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector2Int m_Softness; // 0x6C
	private Canvas m_Canvas; // 0x78
	private Vector3[] m_Corners; // 0x80

	// Properties
	public Vector4 padding { get; set; }
	public Vector2Int softness { get; set; }
	private Canvas Canvas { get; }
	public Rect canvasRect { get; }
	public RectTransform rectTransform { get; }
	private Rect rootCanvasRect { get; }

	// Methods
	// RVA: 0x29B100 Offset: 0x299900 VA: 0x18029B100
	public Vector4 get_padding() { }
	// RVA: 0x29B110 Offset: 0x299910 VA: 0x18029B110
	public void set_padding(Vector4 value) { }
	// RVA: 0x29B120 Offset: 0x299920 VA: 0x18029B120
	public Vector2Int get_softness() { }
	// RVA: 0x29B130 Offset: 0x299930 VA: 0x18029B130
	public void set_softness(Vector2Int value) { }
	// RVA: 0x29B1F0 Offset: 0x2999F0 VA: 0x18029B1F0
	private Canvas get_Canvas() { }
	// RVA: 0x29B390 Offset: 0x299B90 VA: 0x18029B390
	public Rect get_canvasRect() { }
	// RVA: 0x29B410 Offset: 0x299C10 VA: 0x18029B410
	public RectTransform get_rectTransform() { }
	// RVA: 0x29B4A0 Offset: 0x299CA0 VA: 0x18029B4A0
	protected void .ctor() { }
	// RVA: 0x29B6A0 Offset: 0x299EA0 VA: 0x18029B6A0 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x29B740 Offset: 0x299F40 VA: 0x18029B740 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x29B910 Offset: 0x29A110 VA: 0x18029B910 Slot: 19
	public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) { }
	// RVA: 0x29BA50 Offset: 0x29A250 VA: 0x18029BA50
	private Rect get_rootCanvasRect() { }
	// RVA: 0x29BCF0 Offset: 0x29A4F0 VA: 0x18029BCF0 Slot: 20
	public virtual void PerformClipping() { }
	// RVA: 0x29C5B0 Offset: 0x29ADB0 VA: 0x18029C5B0 Slot: 21
	public virtual void UpdateClipSoftness() { }
	// RVA: 0x29C8A0 Offset: 0x29B0A0 VA: 0x18029C8A0
	public void AddClippable(IClippable clippable) { }
	// RVA: 0x29C9E0 Offset: 0x29B1E0 VA: 0x18029C9E0
	public void RemoveClippable(IClippable clippable) { }
	// RVA: 0x29CB20 Offset: 0x29B320 VA: 0x18029CB20 Slot: 12
	protected override void OnTransformParentChanged() { }
	// RVA: 0x29CB30 Offset: 0x29B330 VA: 0x18029CB30 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }
}

// Namespace: UnityEngine.UI
[ExecuteAlways] // RVA: 0x102930 Offset: 0x101D30 VA: 0x180102930
[DisallowMultipleComponent] // RVA: 0x102930 Offset: 0x101D30 VA: 0x180102930
[RequireComponent] // RVA: 0x102930 Offset: 0x101D30 VA: 0x180102930
public class ScrollRect : UIBehaviour, IInitializePotentialDragHandler, IEventSystemHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler, ICanvasElement, ILayoutElement, ILayoutGroup, ILayoutController // TypeDefIndex: 2492
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private RectTransform m_Content; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_Horizontal; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_Vertical; // 0x21
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ScrollRect.MovementType m_MovementType; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_Elasticity; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_Inertia; // 0x2C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_DecelerationRate; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_ScrollSensitivity; // 0x34
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private RectTransform m_Viewport; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Scrollbar m_HorizontalScrollbar; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Scrollbar m_VerticalScrollbar; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ScrollRect.ScrollbarVisibility m_HorizontalScrollbarVisibility; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ScrollRect.ScrollbarVisibility m_VerticalScrollbarVisibility; // 0x54
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_HorizontalScrollbarSpacing; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_VerticalScrollbarSpacing; // 0x5C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ScrollRect.ScrollRectEvent m_OnValueChanged; // 0x60
	private Vector2 m_PointerStartLocalCursor; // 0x68
	protected Vector2 m_ContentStartPosition; // 0x70
	private RectTransform m_ViewRect; // 0x78
	protected Bounds m_ContentBounds; // 0x80
	private Bounds m_ViewBounds; // 0x98
	private Vector2 m_Velocity; // 0xB0
	private bool m_Dragging; // 0xB8
	private bool m_Scrolling; // 0xB9
	private Vector2 m_PrevPosition; // 0xBC
	private Bounds m_PrevContentBounds; // 0xC4
	private Bounds m_PrevViewBounds; // 0xDC
	private bool m_HasRebuiltLayout; // 0xF4
	private bool m_HSliderExpand; // 0xF5
	private bool m_VSliderExpand; // 0xF6
	private float m_HSliderHeight; // 0xF8
	private float m_VSliderWidth; // 0xFC
	private RectTransform m_Rect; // 0x100
	private RectTransform m_HorizontalScrollbarRect; // 0x108
	private RectTransform m_VerticalScrollbarRect; // 0x110
	private DrivenRectTransformTracker m_Tracker; // 0x118
	private readonly Vector3[] m_Corners; // 0x120

	// Properties
	public RectTransform content { get; set; }
	public bool horizontal { get; set; }
	public bool vertical { get; set; }
	public ScrollRect.MovementType movementType { get; set; }
	public float elasticity { get; set; }
	public bool inertia { get; set; }
	public float decelerationRate { get; set; }
	public float scrollSensitivity { get; set; }
	public RectTransform viewport { get; set; }
	public Scrollbar horizontalScrollbar { get; set; }
	public Scrollbar verticalScrollbar { get; set; }
	public ScrollRect.ScrollbarVisibility horizontalScrollbarVisibility { get; set; }
	public ScrollRect.ScrollbarVisibility verticalScrollbarVisibility { get; set; }
	public float horizontalScrollbarSpacing { get; set; }
	public float verticalScrollbarSpacing { get; set; }
	public ScrollRect.ScrollRectEvent onValueChanged { get; set; }
	protected RectTransform viewRect { get; }
	public Vector2 velocity { get; set; }
	private RectTransform rectTransform { get; }
	public Vector2 normalizedPosition { get; set; }
	public float horizontalNormalizedPosition { get; set; }
	public float verticalNormalizedPosition { get; set; }
	private bool hScrollingNeeded { get; }
	private bool vScrollingNeeded { get; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public RectTransform get_content() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_content(RectTransform value) { }
	// RVA: 0x20B410 Offset: 0x209C10 VA: 0x18020B410
	public bool get_horizontal() { }
	// RVA: 0x20B420 Offset: 0x209C20 VA: 0x18020B420
	public void set_horizontal(bool value) { }
	// RVA: 0x29DF10 Offset: 0x29C710 VA: 0x18029DF10
	public bool get_vertical() { }
	// RVA: 0x29DF20 Offset: 0x29C720 VA: 0x18029DF20
	public void set_vertical(bool value) { }
	// RVA: 0x198920 Offset: 0x197120 VA: 0x180198920
	public ScrollRect.MovementType get_movementType() { }
	// RVA: 0x20B430 Offset: 0x209C30 VA: 0x18020B430
	public void set_movementType(ScrollRect.MovementType value) { }
	// RVA: 0x28CBB0 Offset: 0x28B3B0 VA: 0x18028CBB0
	public float get_elasticity() { }
	// RVA: 0x29DF30 Offset: 0x29C730 VA: 0x18029DF30
	public void set_elasticity(float value) { }
	// RVA: 0x29DF40 Offset: 0x29C740 VA: 0x18029DF40
	public bool get_inertia() { }
	// RVA: 0x29DF50 Offset: 0x29C750 VA: 0x18029DF50
	public void set_inertia(bool value) { }
	// RVA: 0x1FEF60 Offset: 0x1FD760 VA: 0x1801FEF60
	public float get_decelerationRate() { }
	// RVA: 0x1FEF70 Offset: 0x1FD770 VA: 0x1801FEF70
	public void set_decelerationRate(float value) { }
	// RVA: 0x29DF60 Offset: 0x29C760 VA: 0x18029DF60
	public float get_scrollSensitivity() { }
	// RVA: 0x29DF70 Offset: 0x29C770 VA: 0x18029DF70
	public void set_scrollSensitivity(float value) { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0
	public RectTransform get_viewport() { }
	// RVA: 0x29DF80 Offset: 0x29C780 VA: 0x18029DF80
	public void set_viewport(RectTransform value) { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public Scrollbar get_horizontalScrollbar() { }
	// RVA: 0x29DF90 Offset: 0x29C790 VA: 0x18029DF90
	public void set_horizontalScrollbar(Scrollbar value) { }
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0
	public Scrollbar get_verticalScrollbar() { }
	// RVA: 0x29E150 Offset: 0x29C950 VA: 0x18029E150
	public void set_verticalScrollbar(Scrollbar value) { }
	// RVA: 0x29E310 Offset: 0x29CB10 VA: 0x18029E310
	public ScrollRect.ScrollbarVisibility get_horizontalScrollbarVisibility() { }
	// RVA: 0x29E320 Offset: 0x29CB20 VA: 0x18029E320
	public void set_horizontalScrollbarVisibility(ScrollRect.ScrollbarVisibility value) { }
	// RVA: 0x29E330 Offset: 0x29CB30 VA: 0x18029E330
	public ScrollRect.ScrollbarVisibility get_verticalScrollbarVisibility() { }
	// RVA: 0x29E340 Offset: 0x29CB40 VA: 0x18029E340
	public void set_verticalScrollbarVisibility(ScrollRect.ScrollbarVisibility value) { }
	// RVA: 0x213F30 Offset: 0x212730 VA: 0x180213F30
	public float get_horizontalScrollbarSpacing() { }
	// RVA: 0x29E350 Offset: 0x29CB50 VA: 0x18029E350
	public void set_horizontalScrollbarSpacing(float value) { }
	// RVA: 0x29E360 Offset: 0x29CB60 VA: 0x18029E360
	public float get_verticalScrollbarSpacing() { }
	// RVA: 0x29E370 Offset: 0x29CB70 VA: 0x18029E370
	public void set_verticalScrollbarSpacing(float value) { }
	// RVA: 0x29E380 Offset: 0x29CB80 VA: 0x18029E380
	public ScrollRect.ScrollRectEvent get_onValueChanged() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0
	public void set_onValueChanged(ScrollRect.ScrollRectEvent value) { }
	// RVA: 0x29E390 Offset: 0x29CB90 VA: 0x18029E390
	protected RectTransform get_viewRect() { }
	// RVA: 0x29E4F0 Offset: 0x29CCF0 VA: 0x18029E4F0
	public Vector2 get_velocity() { }
	// RVA: 0x16C280 Offset: 0x16AA80 VA: 0x18016C280
	public void set_velocity(Vector2 value) { }
	// RVA: 0x29E510 Offset: 0x29CD10 VA: 0x18029E510
	private RectTransform get_rectTransform() { }
	// RVA: 0x29E5E0 Offset: 0x29CDE0 VA: 0x18029E5E0
	protected void .ctor() { }
	// RVA: 0x29E7B0 Offset: 0x29CFB0 VA: 0x18029E7B0 Slot: 38
	public virtual void Rebuild(CanvasUpdate executing) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 39
	public virtual void LayoutComplete() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 40
	public virtual void GraphicUpdateComplete() { }
	// RVA: 0x29E890 Offset: 0x29D090 VA: 0x18029E890
	private void UpdateCachedData() { }
	// RVA: 0x29EE90 Offset: 0x29D690 VA: 0x18029EE90 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x29F070 Offset: 0x29D870 VA: 0x18029F070 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x29F2E0 Offset: 0x29DAE0 VA: 0x18029F2E0 Slot: 9
	public override bool IsActive() { }
	// RVA: 0x29F3C0 Offset: 0x29DBC0 VA: 0x18029F3C0
	private void EnsureLayoutHasRebuilt() { }
	// RVA: 0x29F4E0 Offset: 0x29DCE0 VA: 0x18029F4E0 Slot: 41
	public virtual void StopMovement() { }
	// RVA: 0x29F590 Offset: 0x29DD90 VA: 0x18029F590 Slot: 42
	public virtual void OnScroll(PointerEventData data) { }
	// RVA: 0x29F8D0 Offset: 0x29E0D0 VA: 0x18029F8D0 Slot: 43
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }
	// RVA: 0x29F9A0 Offset: 0x29E1A0 VA: 0x18029F9A0 Slot: 44
	public virtual void OnBeginDrag(PointerEventData eventData) { }
	// RVA: 0x29FB50 Offset: 0x29E350 VA: 0x18029FB50 Slot: 45
	public virtual void OnEndDrag(PointerEventData eventData) { }
	// RVA: 0x29FB80 Offset: 0x29E380 VA: 0x18029FB80 Slot: 46
	public virtual void OnDrag(PointerEventData eventData) { }
	// RVA: 0x29FE60 Offset: 0x29E660 VA: 0x18029FE60 Slot: 47
	protected virtual void SetContentAnchoredPosition(Vector2 position) { }
	// RVA: 0x2A0060 Offset: 0x29E860 VA: 0x1802A0060 Slot: 48
	protected virtual void LateUpdate() { }
	// RVA: 0x2A0910 Offset: 0x29F110 VA: 0x1802A0910
	protected void UpdatePrevData() { }
	// RVA: 0x2A0A40 Offset: 0x29F240 VA: 0x1802A0A40
	private void UpdateScrollbars(Vector2 offset) { }
	// RVA: 0x2A0D10 Offset: 0x29F510 VA: 0x1802A0D10
	public Vector2 get_normalizedPosition() { }
	// RVA: 0x2A0D50 Offset: 0x29F550 VA: 0x1802A0D50
	public void set_normalizedPosition(Vector2 value) { }
	// RVA: 0x2A0DA0 Offset: 0x29F5A0 VA: 0x1802A0DA0
	public float get_horizontalNormalizedPosition() { }
	// RVA: 0x2A0F50 Offset: 0x29F750 VA: 0x1802A0F50
	public void set_horizontalNormalizedPosition(float value) { }
	// RVA: 0x2A0F70 Offset: 0x29F770 VA: 0x1802A0F70
	public float get_verticalNormalizedPosition() { }
	// RVA: 0x2A1170 Offset: 0x29F970 VA: 0x1802A1170
	public void set_verticalNormalizedPosition(float value) { }
	// RVA: 0x2A0F50 Offset: 0x29F750 VA: 0x1802A0F50
	private void SetHorizontalNormalizedPosition(float value) { }
	// RVA: 0x2A1170 Offset: 0x29F970 VA: 0x1802A1170
	private void SetVerticalNormalizedPosition(float value) { }
	// RVA: 0x2A1190 Offset: 0x29F990 VA: 0x1802A1190 Slot: 49
	protected virtual void SetNormalizedPosition(float value, int axis) { }
	// RVA: 0x2A14F0 Offset: 0x29FCF0 VA: 0x1802A14F0
	private static float RubberDelta(float overStretching, float viewSize) { }
	// RVA: 0x2A15E0 Offset: 0x29FDE0 VA: 0x1802A15E0 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }
	// RVA: 0x2A15F0 Offset: 0x29FDF0 VA: 0x1802A15F0
	private bool get_hScrollingNeeded() { }
	// RVA: 0x2A1690 Offset: 0x29FE90 VA: 0x1802A1690
	private bool get_vScrollingNeeded() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 50
	public virtual void CalculateLayoutInputHorizontal() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 51
	public virtual void CalculateLayoutInputVertical() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 52
	public virtual float get_minWidth() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 53
	public virtual float get_preferredWidth() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 54
	public virtual float get_flexibleWidth() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 55
	public virtual float get_minHeight() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 56
	public virtual float get_preferredHeight() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 57
	public virtual float get_flexibleHeight() { }
	// RVA: 0x24A4C0 Offset: 0x248CC0 VA: 0x18024A4C0 Slot: 58
	public virtual int get_layoutPriority() { }
	// RVA: 0x2A1740 Offset: 0x29FF40 VA: 0x1802A1740 Slot: 59
	public virtual void SetLayoutHorizontal() { }
	// RVA: 0x2A2220 Offset: 0x2A0A20 VA: 0x1802A2220 Slot: 60
	public virtual void SetLayoutVertical() { }
	// RVA: 0x2A24F0 Offset: 0x2A0CF0 VA: 0x1802A24F0
	private void UpdateScrollbarVisibility() { }
	// RVA: 0x2A2550 Offset: 0x2A0D50 VA: 0x1802A2550
	private static void UpdateOneScrollbarVisibility(bool xScrollingNeeded, bool xAxisEnabled, ScrollRect.ScrollbarVisibility scrollbarVisibility, Scrollbar scrollbar) { }
	// RVA: 0x2A2790 Offset: 0x2A0F90 VA: 0x1802A2790
	private void UpdateScrollbarLayout() { }
	// RVA: 0x2A2B10 Offset: 0x2A1310 VA: 0x1802A2B10
	protected void UpdateBounds() { }
	// RVA: 0x2A3320 Offset: 0x2A1B20 VA: 0x1802A3320
	internal static void AdjustBounds(ref Bounds viewBounds, ref Vector2 contentPivot, ref Vector3 contentSize, ref Vector3 contentPos) { }
	// RVA: 0x2A3490 Offset: 0x2A1C90 VA: 0x1802A3490
	private Bounds GetBounds() { }
	// RVA: 0x2A3670 Offset: 0x2A1E70 VA: 0x1802A3670
	internal static Bounds InternalGetBounds(Vector3[] corners, ref Matrix4x4 viewWorldToLocalMatrix) { }
	// RVA: 0x2A3980 Offset: 0x2A2180 VA: 0x1802A3980
	private Vector2 CalculateOffset(Vector2 delta) { }
	// RVA: 0x2A39D0 Offset: 0x2A21D0 VA: 0x1802A39D0
	internal static Vector2 InternalCalculateOffset(ref Bounds viewBounds, ref Bounds contentBounds, bool horizontal, bool vertical, ScrollRect.MovementType movementType, ref Vector2 delta) { }
	// RVA: 0x2A3C00 Offset: 0x2A2400 VA: 0x1802A3C00
	protected void SetDirty() { }
	// RVA: 0x2A3CC0 Offset: 0x2A24C0 VA: 0x1802A3CC0
	protected void SetDirtyCaching() { }
	// RVA: 0x1BF8A0 Offset: 0x1BE0A0 VA: 0x1801BF8A0 Slot: 23
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum ScrollRect.MovementType // TypeDefIndex: 2493
{
	// Fields
	public int value__; // 0x0
	public const ScrollRect.MovementType Unrestricted = 0; // 0x0
	public const ScrollRect.MovementType Elastic = 1; // 0x0
	public const ScrollRect.MovementType Clamped = 2; // 0x0
}

// Namespace: 
public enum ScrollRect.ScrollbarVisibility // TypeDefIndex: 2494
{
	// Fields
	public int value__; // 0x0
	public const ScrollRect.ScrollbarVisibility Permanent = 0; // 0x0
	public const ScrollRect.ScrollbarVisibility AutoHide = 1; // 0x0
	public const ScrollRect.ScrollbarVisibility AutoHideAndExpandViewport = 2; // 0x0
}

// Namespace: 
[Serializable]
public class ScrollRect.ScrollRectEvent : UnityEvent<Vector2> // TypeDefIndex: 2495
{
	// Methods
	// RVA: 0x4DE180 Offset: 0x4DC980 VA: 0x1804DE180
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[RequireComponent] // RVA: 0x1029B0 Offset: 0x101DB0 VA: 0x1801029B0
[ExecuteAlways] // RVA: 0x1029B0 Offset: 0x101DB0 VA: 0x1801029B0
public class Scrollbar : Selectable, IBeginDragHandler, IEventSystemHandler, IDragHandler, IInitializePotentialDragHandler, ICanvasElement // TypeDefIndex: 2496
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private RectTransform m_HandleRect; // 0xF0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Scrollbar.Direction m_Direction; // 0xF8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_Value; // 0xFC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_Size; // 0x100
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_NumberOfSteps; // 0x104
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Scrollbar.ScrollEvent m_OnValueChanged; // 0x108
	private RectTransform m_ContainerRect; // 0x110
	private Vector2 m_Offset; // 0x118
	private DrivenRectTransformTracker m_Tracker; // 0x120
	private Coroutine m_PointerDownRepeat; // 0x128
	private bool isPointerDownAndNotDragging; // 0x130
	private bool m_DelayedUpdateVisuals; // 0x131

	// Properties
	public RectTransform handleRect { get; set; }
	public Scrollbar.Direction direction { get; set; }
	public float value { get; set; }
	public float size { get; set; }
	public int numberOfSteps { get; set; }
	public Scrollbar.ScrollEvent onValueChanged { get; set; }
	private float stepSize { get; }
	private Scrollbar.Axis axis { get; }
	private bool reverseValue { get; }

	// Methods
	// RVA: 0x171030 Offset: 0x16F830 VA: 0x180171030
	public RectTransform get_handleRect() { }
	// RVA: 0x4C6CD0 Offset: 0x4C54D0 VA: 0x1804C6CD0
	public void set_handleRect(RectTransform value) { }
	// RVA: 0x4C6D90 Offset: 0x4C5590 VA: 0x1804C6D90
	public Scrollbar.Direction get_direction() { }
	// RVA: 0x4C6DA0 Offset: 0x4C55A0 VA: 0x1804C6DA0
	public void set_direction(Scrollbar.Direction value) { }
	// RVA: 0x4C6E40 Offset: 0x4C5640 VA: 0x1804C6E40
	protected void .ctor() { }
	// RVA: 0x4C6FB0 Offset: 0x4C57B0 VA: 0x1804C6FB0
	public float get_value() { }
	// RVA: 0x4C70A0 Offset: 0x4C58A0 VA: 0x1804C70A0
	public void set_value(float value) { }
	// RVA: 0x4C70B0 Offset: 0x4C58B0 VA: 0x1804C70B0 Slot: 47
	public virtual void SetValueWithoutNotify(float input) { }
	// RVA: 0x216410 Offset: 0x214C10 VA: 0x180216410
	public float get_size() { }
	// RVA: 0x4C70C0 Offset: 0x4C58C0 VA: 0x1804C70C0
	public void set_size(float value) { }
	// RVA: 0x1A22F0 Offset: 0x1A0AF0 VA: 0x1801A22F0
	public int get_numberOfSteps() { }
	// RVA: 0x4C71A0 Offset: 0x4C59A0 VA: 0x1804C71A0
	public void set_numberOfSteps(int value) { }
	// RVA: 0x173240 Offset: 0x171A40 VA: 0x180173240
	public Scrollbar.ScrollEvent get_onValueChanged() { }
	// RVA: 0x4C7250 Offset: 0x4C5A50 VA: 0x1804C7250
	public void set_onValueChanged(Scrollbar.ScrollEvent value) { }
	// RVA: 0x4C7260 Offset: 0x4C5A60 VA: 0x1804C7260
	private float get_stepSize() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 48
	public virtual void Rebuild(CanvasUpdate executing) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 49
	public virtual void LayoutComplete() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 50
	public virtual void GraphicUpdateComplete() { }
	// RVA: 0x4C7290 Offset: 0x4C5A90 VA: 0x1804C7290 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x4C7360 Offset: 0x4C5B60 VA: 0x1804C7360 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x4C7370 Offset: 0x4C5B70 VA: 0x1804C7370 Slot: 51
	protected virtual void Update() { }
	// RVA: 0x4C7390 Offset: 0x4C5B90 VA: 0x1804C7390
	private void UpdateCachedReferences() { }
	// RVA: 0x4C7550 Offset: 0x4C5D50 VA: 0x1804C7550
	private void Set(float input, bool sendCallback = True) { }
	// RVA: 0x4C7650 Offset: 0x4C5E50 VA: 0x1804C7650 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }
	// RVA: 0x4C7690 Offset: 0x4C5E90 VA: 0x1804C7690
	private Scrollbar.Axis get_axis() { }
	// RVA: 0x4C76A0 Offset: 0x4C5EA0 VA: 0x1804C76A0
	private bool get_reverseValue() { }
	// RVA: 0x4C76C0 Offset: 0x4C5EC0 VA: 0x1804C76C0
	private void UpdateVisuals() { }
	// RVA: 0x4C7980 Offset: 0x4C6180 VA: 0x1804C7980
	private void UpdateDrag(PointerEventData eventData) { }
	// RVA: 0x4C7D70 Offset: 0x4C6570 VA: 0x1804C7D70
	private void DoUpdateDrag(Vector2 handleCorner, float remainingSize) { }
	// RVA: 0x4C7F10 Offset: 0x4C6710 VA: 0x1804C7F10
	private bool MayDrag(PointerEventData eventData) { }
	// RVA: 0x4C7F80 Offset: 0x4C6780 VA: 0x1804C7F80 Slot: 52
	public virtual void OnBeginDrag(PointerEventData eventData) { }
	// RVA: 0x4C8290 Offset: 0x4C6A90 VA: 0x1804C8290 Slot: 53
	public virtual void OnDrag(PointerEventData eventData) { }
	// RVA: 0x4C83A0 Offset: 0x4C6BA0 VA: 0x1804C83A0 Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }
	// RVA: 0x4C84B0 Offset: 0x4C6CB0 VA: 0x1804C84B0
	protected IEnumerator ClickRepeat(PointerEventData eventData) { }
	// RVA: 0x4C8550 Offset: 0x4C6D50 VA: 0x1804C8550 Slot: 33
	public override void OnPointerUp(PointerEventData eventData) { }
	// RVA: 0x4C8590 Offset: 0x4C6D90 VA: 0x1804C8590 Slot: 31
	public override void OnMove(AxisEventData eventData) { }
	// RVA: 0x4C8B30 Offset: 0x4C7330 VA: 0x1804C8B30 Slot: 27
	public override Selectable FindSelectableOnLeft() { }
	// RVA: 0x4C8B60 Offset: 0x4C7360 VA: 0x1804C8B60 Slot: 28
	public override Selectable FindSelectableOnRight() { }
	// RVA: 0x4C8B90 Offset: 0x4C7390 VA: 0x1804C8B90 Slot: 29
	public override Selectable FindSelectableOnUp() { }
	// RVA: 0x4C8BC0 Offset: 0x4C73C0 VA: 0x1804C8BC0 Slot: 30
	public override Selectable FindSelectableOnDown() { }
	// RVA: 0x4C8BF0 Offset: 0x4C73F0 VA: 0x1804C8BF0 Slot: 54
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }
	// RVA: 0x4C8C10 Offset: 0x4C7410 VA: 0x1804C8C10
	public void SetDirection(Scrollbar.Direction direction, bool includeRectLayouts) { }
	// RVA: 0x1BF8A0 Offset: 0x1BE0A0 VA: 0x1801BF8A0 Slot: 43
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Scrollbar.Direction // TypeDefIndex: 2497
{
	// Fields
	public int value__; // 0x0
	public const Scrollbar.Direction LeftToRight = 0; // 0x0
	public const Scrollbar.Direction RightToLeft = 1; // 0x0
	public const Scrollbar.Direction BottomToTop = 2; // 0x0
	public const Scrollbar.Direction TopToBottom = 3; // 0x0
}

// Namespace: 
[Serializable]
public class Scrollbar.ScrollEvent : UnityEvent<float> // TypeDefIndex: 2498
{
	// Methods
	// RVA: 0x4DE470 Offset: 0x4DCC70 VA: 0x1804DE470
	public void .ctor() { }
}

// Namespace: 
private enum Scrollbar.Axis // TypeDefIndex: 2499
{
	// Fields
	public int value__; // 0x0
	public const Scrollbar.Axis Horizontal = 0; // 0x0
	public const Scrollbar.Axis Vertical = 1; // 0x0
}

// Namespace: 
private sealed class Scrollbar.<ClickRepeat>d__57 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2500
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public Scrollbar <>4__this; // 0x20
	public PointerEventData eventData; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x4DE200 Offset: 0x4DCA00 VA: 0x1804DE200 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: UnityEngine.UI
[DisallowMultipleComponent] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class Selectable : UIBehaviour, IMoveHandler, IEventSystemHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler // TypeDefIndex: 2501
{
	// Fields
	protected static Selectable[] s_Selectables; // 0x0
	protected static int s_SelectableCount; // 0x8
	[SerializeField] // RVA: 0x102A30 Offset: 0x101E30 VA: 0x180102A30
	[FormerlySerializedAsAttribute] // RVA: 0x102A30 Offset: 0x101E30 VA: 0x180102A30
	private Navigation m_Navigation; // 0x18
	[SerializeField] // RVA: 0x102A60 Offset: 0x101E60 VA: 0x180102A60
	[FormerlySerializedAsAttribute] // RVA: 0x102A60 Offset: 0x101E60 VA: 0x180102A60
	private Selectable.Transition m_Transition; // 0x40
	[SerializeField] // RVA: 0x102A90 Offset: 0x101E90 VA: 0x180102A90
	[FormerlySerializedAsAttribute] // RVA: 0x102A90 Offset: 0x101E90 VA: 0x180102A90
	private ColorBlock m_Colors; // 0x44
	[FormerlySerializedAsAttribute] // RVA: 0x102AC0 Offset: 0x101EC0 VA: 0x180102AC0
	[SerializeField] // RVA: 0x102AC0 Offset: 0x101EC0 VA: 0x180102AC0
	private SpriteState m_SpriteState; // 0xA0
	[FormerlySerializedAsAttribute] // RVA: 0x102AF0 Offset: 0x101EF0 VA: 0x180102AF0
	[SerializeField] // RVA: 0x102AF0 Offset: 0x101EF0 VA: 0x180102AF0
	private AnimationTriggers m_AnimationTriggers; // 0xC0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_Interactable; // 0xC8
	[FormerlySerializedAsAttribute] // RVA: 0x102B20 Offset: 0x101F20 VA: 0x180102B20
	[FormerlySerializedAsAttribute] // RVA: 0x102B20 Offset: 0x101F20 VA: 0x180102B20
	[SerializeField] // RVA: 0x102B20 Offset: 0x101F20 VA: 0x180102B20
	private Graphic m_TargetGraphic; // 0xD0
	private bool m_GroupsAllowInteraction; // 0xD8
	protected int m_CurrentIndex; // 0xDC
	private bool <isPointerInside>k__BackingField; // 0xE0
	private bool <isPointerDown>k__BackingField; // 0xE1
	private bool <hasSelection>k__BackingField; // 0xE2
	private readonly List<CanvasGroup> m_CanvasGroupCache; // 0xE8

	// Properties
	public static Selectable[] allSelectablesArray { get; }
	public static int allSelectableCount { get; }
	[ObsoleteAttribute] // RVA: 0x102B80 Offset: 0x101F80 VA: 0x180102B80
	public static List<Selectable> allSelectables { get; }
	public Navigation navigation { get; set; }
	public Selectable.Transition transition { get; set; }
	public ColorBlock colors { get; set; }
	public SpriteState spriteState { get; set; }
	public AnimationTriggers animationTriggers { get; set; }
	public Graphic targetGraphic { get; set; }
	public bool interactable { get; set; }
	private bool isPointerInside { get; set; }
	private bool isPointerDown { get; set; }
	private bool hasSelection { get; set; }
	public Image image { get; set; }
	public Animator animator { get; }
	protected Selectable.SelectionState currentSelectionState { get; }

	// Methods
	// RVA: 0x4C8E90 Offset: 0x4C7690 VA: 0x1804C8E90
	public static Selectable[] get_allSelectablesArray() { }
	// RVA: 0x4C8F60 Offset: 0x4C7760 VA: 0x1804C8F60
	public static int get_allSelectableCount() { }
	// RVA: 0x4C9000 Offset: 0x4C7800 VA: 0x1804C9000
	public static List<Selectable> get_allSelectables() { }
	// RVA: 0x4C9170 Offset: 0x4C7970 VA: 0x1804C9170
	public static int AllSelectablesNoAlloc(Selectable[] selectables) { }
	// RVA: 0x4C9290 Offset: 0x4C7A90 VA: 0x1804C9290
	public Navigation get_navigation() { }
	// RVA: 0x4C92B0 Offset: 0x4C7AB0 VA: 0x1804C92B0
	public void set_navigation(Navigation value) { }
	// RVA: 0x4C93D0 Offset: 0x4C7BD0 VA: 0x1804C93D0
	public Selectable.Transition get_transition() { }
	// RVA: 0x4C93E0 Offset: 0x4C7BE0 VA: 0x1804C93E0
	public void set_transition(Selectable.Transition value) { }
	// RVA: 0x4C9480 Offset: 0x4C7C80 VA: 0x1804C9480
	public ColorBlock get_colors() { }
	// RVA: 0x4C94C0 Offset: 0x4C7CC0 VA: 0x1804C94C0
	public void set_colors(ColorBlock value) { }
	// RVA: 0x4C9660 Offset: 0x4C7E60 VA: 0x1804C9660
	public SpriteState get_spriteState() { }
	// RVA: 0x4C9680 Offset: 0x4C7E80 VA: 0x1804C9680
	public void set_spriteState(SpriteState value) { }
	// RVA: 0x2937A0 Offset: 0x291FA0 VA: 0x1802937A0
	public AnimationTriggers get_animationTriggers() { }
	// RVA: 0x4C9780 Offset: 0x4C7F80 VA: 0x1804C9780
	public void set_animationTriggers(AnimationTriggers value) { }
	// RVA: 0x1A2260 Offset: 0x1A0A60 VA: 0x1801A2260
	public Graphic get_targetGraphic() { }
	// RVA: 0x4C9830 Offset: 0x4C8030 VA: 0x1804C9830
	public void set_targetGraphic(Graphic value) { }
	// RVA: 0x4C98E0 Offset: 0x4C80E0 VA: 0x1804C98E0
	public bool get_interactable() { }
	// RVA: 0x4C98F0 Offset: 0x4C80F0 VA: 0x1804C98F0
	public void set_interactable(bool value) { }
	// RVA: 0x4C9AB0 Offset: 0x4C82B0 VA: 0x1804C9AB0
	private bool get_isPointerInside() { }
	// RVA: 0x4C9AC0 Offset: 0x4C82C0 VA: 0x1804C9AC0
	private void set_isPointerInside(bool value) { }
	// RVA: 0x4C9AD0 Offset: 0x4C82D0 VA: 0x1804C9AD0
	private bool get_isPointerDown() { }
	// RVA: 0x4C9AE0 Offset: 0x4C82E0 VA: 0x1804C9AE0
	private void set_isPointerDown(bool value) { }
	// RVA: 0x4C9AF0 Offset: 0x4C82F0 VA: 0x1804C9AF0
	private bool get_hasSelection() { }
	// RVA: 0x4C9B00 Offset: 0x4C8300 VA: 0x1804C9B00
	private void set_hasSelection(bool value) { }
	// RVA: 0x4C9B10 Offset: 0x4C8310 VA: 0x1804C9B10
	protected void .ctor() { }
	// RVA: 0x4C9D00 Offset: 0x4C8500 VA: 0x1804C9D00
	public Image get_image() { }
	// RVA: 0x1A2270 Offset: 0x1A0A70 VA: 0x1801A2270
	public void set_image(Image value) { }
	// RVA: 0x4C9DC0 Offset: 0x4C85C0 VA: 0x1804C9DC0
	public Animator get_animator() { }
	// RVA: 0x4C9E40 Offset: 0x4C8640 VA: 0x1804C9E40 Slot: 4
	protected override void Awake() { }
	// RVA: 0x4C9F00 Offset: 0x4C8700 VA: 0x1804C9F00 Slot: 14
	protected override void OnCanvasGroupChanged() { }
	// RVA: 0x4CA110 Offset: 0x4C8910 VA: 0x1804CA110 Slot: 24
	public virtual bool IsInteractable() { }
	// RVA: 0x4CA130 Offset: 0x4C8930 VA: 0x1804CA130 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }
	// RVA: 0x4CA140 Offset: 0x4C8940 VA: 0x1804CA140 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x22E6C0 Offset: 0x22CEC0 VA: 0x18022E6C0 Slot: 12
	protected override void OnTransformParentChanged() { }
	// RVA: 0x4CA3A0 Offset: 0x4C8BA0 VA: 0x1804CA3A0
	private void OnSetProperty() { }
	// RVA: 0x4CA410 Offset: 0x4C8C10 VA: 0x1804CA410 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x4CA600 Offset: 0x4C8E00 VA: 0x1804CA600
	protected Selectable.SelectionState get_currentSelectionState() { }
	// RVA: 0x4CA670 Offset: 0x4C8E70 VA: 0x1804CA670 Slot: 25
	protected virtual void InstantClearState() { }
	// RVA: 0x4CA6F0 Offset: 0x4C8EF0 VA: 0x1804CA6F0 Slot: 26
	protected virtual void DoStateTransition(Selectable.SelectionState state, bool instant) { }
	// RVA: 0x4CA9C0 Offset: 0x4C91C0 VA: 0x1804CA9C0
	public Selectable FindSelectable(Vector3 dir) { }
	// RVA: 0x4CB1E0 Offset: 0x4C99E0 VA: 0x1804CB1E0
	private static Vector3 GetPointOnRectEdge(RectTransform rect, Vector2 dir) { }
	// RVA: 0x4CB500 Offset: 0x4C9D00 VA: 0x1804CB500
	private void Navigate(AxisEventData eventData, Selectable sel) { }
	// RVA: 0x4CB620 Offset: 0x4C9E20 VA: 0x1804CB620 Slot: 27
	public virtual Selectable FindSelectableOnLeft() { }
	// RVA: 0x4CB820 Offset: 0x4CA020 VA: 0x1804CB820 Slot: 28
	public virtual Selectable FindSelectableOnRight() { }
	// RVA: 0x4CBA20 Offset: 0x4CA220 VA: 0x1804CBA20 Slot: 29
	public virtual Selectable FindSelectableOnUp() { }
	// RVA: 0x4CBC20 Offset: 0x4CA420 VA: 0x1804CBC20 Slot: 30
	public virtual Selectable FindSelectableOnDown() { }
	// RVA: 0x4CBE20 Offset: 0x4CA620 VA: 0x1804CBE20 Slot: 31
	public virtual void OnMove(AxisEventData eventData) { }
	// RVA: 0x4CBEC0 Offset: 0x4CA6C0 VA: 0x1804CBEC0
	private void StartColorTween(Color targetColor, bool instant) { }
	// RVA: 0x4CBFD0 Offset: 0x4CA7D0 VA: 0x1804CBFD0
	private void DoSpriteSwap(Sprite newSprite) { }
	// RVA: 0x4CC160 Offset: 0x4CA960 VA: 0x1804CC160
	private void TriggerAnimation(string triggername) { }
	// RVA: 0x4CC3E0 Offset: 0x4CABE0 VA: 0x1804CC3E0
	protected bool IsHighlighted() { }
	// RVA: 0x4CC440 Offset: 0x4CAC40 VA: 0x1804CC440
	protected bool IsPressed() { }
	// RVA: 0x4CC490 Offset: 0x4CAC90 VA: 0x1804CC490
	private void EvaluateAndTransitionToSelectionState() { }
	// RVA: 0x4CC500 Offset: 0x4CAD00 VA: 0x1804CC500 Slot: 32
	public virtual void OnPointerDown(PointerEventData eventData) { }
	// RVA: 0x4CC670 Offset: 0x4CAE70 VA: 0x1804CC670 Slot: 33
	public virtual void OnPointerUp(PointerEventData eventData) { }
	// RVA: 0x4CC6A0 Offset: 0x4CAEA0 VA: 0x1804CC6A0 Slot: 34
	public virtual void OnPointerEnter(PointerEventData eventData) { }
	// RVA: 0x4CC710 Offset: 0x4CAF10 VA: 0x1804CC710 Slot: 35
	public virtual void OnPointerExit(PointerEventData eventData) { }
	// RVA: 0x4CC780 Offset: 0x4CAF80 VA: 0x1804CC780 Slot: 36
	public virtual void OnSelect(BaseEventData eventData) { }
	// RVA: 0x4CC7F0 Offset: 0x4CAFF0 VA: 0x1804CC7F0 Slot: 37
	public virtual void OnDeselect(BaseEventData eventData) { }
	// RVA: 0x4CC860 Offset: 0x4CB060 VA: 0x1804CC860 Slot: 38
	public virtual void Select() { }
	// RVA: 0x4CC9F0 Offset: 0x4CB1F0 VA: 0x1804CC9F0
	private static void .cctor() { }
}

// Namespace: 
public enum Selectable.Transition // TypeDefIndex: 2502
{
	// Fields
	public int value__; // 0x0
	public const Selectable.Transition None = 0; // 0x0
	public const Selectable.Transition ColorTint = 1; // 0x0
	public const Selectable.Transition SpriteSwap = 2; // 0x0
	public const Selectable.Transition Animation = 3; // 0x0
}

// Namespace: 
protected enum Selectable.SelectionState // TypeDefIndex: 2503
{
	// Fields
	public int value__; // 0x0
	public const Selectable.SelectionState Normal = 0; // 0x0
	public const Selectable.SelectionState Highlighted = 1; // 0x0
	public const Selectable.SelectionState Pressed = 2; // 0x0
	public const Selectable.SelectionState Selected = 3; // 0x0
	public const Selectable.SelectionState Disabled = 4; // 0x0
}

// Namespace: UnityEngine.UI
internal static class SetPropertyUtility // TypeDefIndex: 2504
{
	// Methods
	// RVA: 0x19A3C0 Offset: 0x198BC0 VA: 0x18019A3C0
	public static bool SetColor(ref Color currentValue, Color newValue) { }
	// RVA: 0x4298F0 Offset: 0x4280F0 VA: 0x1804298F0
	public static bool SetStruct(ref T currentValue, T newValue) { }
	// RVA: 0x429510 Offset: 0x427D10 VA: 0x180429510
	public static bool SetClass(ref T currentValue, T newValue) { }
}

// Namespace: UnityEngine.UI
[ExecuteAlways] // RVA: 0x102BB0 Offset: 0x101FB0 VA: 0x180102BB0
[RequireComponent] // RVA: 0x102BB0 Offset: 0x101FB0 VA: 0x180102BB0
public class Slider : Selectable, IDragHandler, IEventSystemHandler, IInitializePotentialDragHandler, ICanvasElement // TypeDefIndex: 2505
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private RectTransform m_FillRect; // 0xF0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private RectTransform m_HandleRect; // 0xF8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Slider.Direction m_Direction; // 0x100
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_MinValue; // 0x104
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_MaxValue; // 0x108
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_WholeNumbers; // 0x10C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_Value; // 0x110
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Slider.SliderEvent m_OnValueChanged; // 0x118
	private Image m_FillImage; // 0x120
	private Transform m_FillTransform; // 0x128
	private RectTransform m_FillContainerRect; // 0x130
	private Transform m_HandleTransform; // 0x138
	private RectTransform m_HandleContainerRect; // 0x140
	private Vector2 m_Offset; // 0x148
	private DrivenRectTransformTracker m_Tracker; // 0x150
	private bool m_DelayedUpdateVisuals; // 0x151

	// Properties
	public RectTransform fillRect { get; set; }
	public RectTransform handleRect { get; set; }
	public Slider.Direction direction { get; set; }
	public float minValue { get; set; }
	public float maxValue { get; set; }
	public bool wholeNumbers { get; set; }
	public virtual float value { get; set; }
	public float normalizedValue { get; set; }
	public Slider.SliderEvent onValueChanged { get; set; }
	private float stepSize { get; }
	private Slider.Axis axis { get; }
	private bool reverseValue { get; }

	// Methods
	// RVA: 0x171030 Offset: 0x16F830 VA: 0x180171030
	public RectTransform get_fillRect() { }
	// RVA: 0x4CD330 Offset: 0x4CBB30 VA: 0x1804CD330
	public void set_fillRect(RectTransform value) { }
	// RVA: 0x171080 Offset: 0x16F880 VA: 0x180171080
	public RectTransform get_handleRect() { }
	// RVA: 0x4CD3F0 Offset: 0x4CBBF0 VA: 0x1804CD3F0
	public void set_handleRect(RectTransform value) { }
	// RVA: 0x1A22D0 Offset: 0x1A0AD0 VA: 0x1801A22D0
	public Slider.Direction get_direction() { }
	// RVA: 0x4CD4B0 Offset: 0x4CBCB0 VA: 0x1804CD4B0
	public void set_direction(Slider.Direction value) { }
	// RVA: 0x4CD550 Offset: 0x4CBD50 VA: 0x1804CD550
	public float get_minValue() { }
	// RVA: 0x4CD560 Offset: 0x4CBD60 VA: 0x1804CD560
	public void set_minValue(float value) { }
	// RVA: 0x216A10 Offset: 0x215210 VA: 0x180216A10
	public float get_maxValue() { }
	// RVA: 0x4CD610 Offset: 0x4CBE10 VA: 0x1804CD610
	public void set_maxValue(float value) { }
	// RVA: 0x4CD6C0 Offset: 0x4CBEC0 VA: 0x1804CD6C0
	public bool get_wholeNumbers() { }
	// RVA: 0x4CD6D0 Offset: 0x4CBED0 VA: 0x1804CD6D0
	public void set_wholeNumbers(bool value) { }
	// RVA: 0x4CD790 Offset: 0x4CBF90 VA: 0x1804CD790 Slot: 46
	public virtual float get_value() { }
	// RVA: 0x4CD850 Offset: 0x4CC050 VA: 0x1804CD850 Slot: 47
	public virtual void set_value(float value) { }
	// RVA: 0x4CD870 Offset: 0x4CC070 VA: 0x1804CD870 Slot: 48
	public virtual void SetValueWithoutNotify(float input) { }
	// RVA: 0x4CD890 Offset: 0x4CC090 VA: 0x1804CD890
	public float get_normalizedValue() { }
	// RVA: 0x4CD9C0 Offset: 0x4CC1C0 VA: 0x1804CD9C0
	public void set_normalizedValue(float value) { }
	// RVA: 0x19D9D0 Offset: 0x19C1D0 VA: 0x18019D9D0
	public Slider.SliderEvent get_onValueChanged() { }
	// RVA: 0x4CDAB0 Offset: 0x4CC2B0 VA: 0x1804CDAB0
	public void set_onValueChanged(Slider.SliderEvent value) { }
	// RVA: 0x4CDAC0 Offset: 0x4CC2C0 VA: 0x1804CDAC0
	private float get_stepSize() { }
	// RVA: 0x4CDAF0 Offset: 0x4CC2F0 VA: 0x1804CDAF0
	protected void .ctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 49
	public virtual void Rebuild(CanvasUpdate executing) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 50
	public virtual void LayoutComplete() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 51
	public virtual void GraphicUpdateComplete() { }
	// RVA: 0x4CDC60 Offset: 0x4CC460 VA: 0x1804CDC60 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x4C7360 Offset: 0x4C5B60 VA: 0x1804C7360 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x4CDCB0 Offset: 0x4CC4B0 VA: 0x1804CDCB0 Slot: 52
	protected virtual void Update() { }
	// RVA: 0x4CDD00 Offset: 0x4CC500 VA: 0x1804CDD00 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }
	// RVA: 0x4CDFC0 Offset: 0x4CC7C0 VA: 0x1804CDFC0
	private void UpdateCachedReferences() { }
	// RVA: 0x4CE480 Offset: 0x4CCC80 VA: 0x1804CE480
	private float ClampValue(float input) { }
	// RVA: 0x4CE590 Offset: 0x4CCD90 VA: 0x1804CE590 Slot: 53
	protected virtual void Set(float input, bool sendCallback = True) { }
	// RVA: 0x4CE680 Offset: 0x4CCE80 VA: 0x1804CE680 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }
	// RVA: 0x4CE6C0 Offset: 0x4CCEC0 VA: 0x1804CE6C0
	private Slider.Axis get_axis() { }
	// RVA: 0x4CE6D0 Offset: 0x4CCED0 VA: 0x1804CE6D0
	private bool get_reverseValue() { }
	// RVA: 0x4CE6F0 Offset: 0x4CCEF0 VA: 0x1804CE6F0
	private void UpdateVisuals() { }
	// RVA: 0x4CEBE0 Offset: 0x4CD3E0 VA: 0x1804CEBE0
	private void UpdateDrag(PointerEventData eventData, Camera cam) { }
	// RVA: 0x4C7F10 Offset: 0x4C6710 VA: 0x1804C7F10
	private bool MayDrag(PointerEventData eventData) { }
	// RVA: 0x4CF030 Offset: 0x4CD830 VA: 0x1804CF030 Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }
	// RVA: 0x4CF2A0 Offset: 0x4CDAA0 VA: 0x1804CF2A0 Slot: 54
	public virtual void OnDrag(PointerEventData eventData) { }
	// RVA: 0x4CF320 Offset: 0x4CDB20 VA: 0x1804CF320 Slot: 31
	public override void OnMove(AxisEventData eventData) { }
	// RVA: 0x4CF610 Offset: 0x4CDE10 VA: 0x1804CF610 Slot: 27
	public override Selectable FindSelectableOnLeft() { }
	// RVA: 0x4CF640 Offset: 0x4CDE40 VA: 0x1804CF640 Slot: 28
	public override Selectable FindSelectableOnRight() { }
	// RVA: 0x4CF670 Offset: 0x4CDE70 VA: 0x1804CF670 Slot: 29
	public override Selectable FindSelectableOnUp() { }
	// RVA: 0x4CF6A0 Offset: 0x4CDEA0 VA: 0x1804CF6A0 Slot: 30
	public override Selectable FindSelectableOnDown() { }
	// RVA: 0x4C8BF0 Offset: 0x4C73F0 VA: 0x1804C8BF0 Slot: 55
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }
	// RVA: 0x4CF6D0 Offset: 0x4CDED0 VA: 0x1804CF6D0
	public void SetDirection(Slider.Direction direction, bool includeRectLayouts) { }
	// RVA: 0x1BF8A0 Offset: 0x1BE0A0 VA: 0x1801BF8A0 Slot: 42
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Slider.Direction // TypeDefIndex: 2506
{
	// Fields
	public int value__; // 0x0
	public const Slider.Direction LeftToRight = 0; // 0x0
	public const Slider.Direction RightToLeft = 1; // 0x0
	public const Slider.Direction BottomToTop = 2; // 0x0
	public const Slider.Direction TopToBottom = 3; // 0x0
}

// Namespace: 
[Serializable]
public class Slider.SliderEvent : UnityEvent<float> // TypeDefIndex: 2507
{
	// Methods
	// RVA: 0x4DE4F0 Offset: 0x4DCCF0 VA: 0x1804DE4F0
	public void .ctor() { }
}

// Namespace: 
private enum Slider.Axis // TypeDefIndex: 2508
{
	// Fields
	public int value__; // 0x0
	public const Slider.Axis Horizontal = 0; // 0x0
	public const Slider.Axis Vertical = 1; // 0x0
}

// Namespace: UnityEngine.UI
[Serializable]
public struct SpriteState : IEquatable<SpriteState> // TypeDefIndex: 2509
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Sprite m_HighlightedSprite; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Sprite m_PressedSprite; // 0x8
	[SerializeField] // RVA: 0x102C30 Offset: 0x102030 VA: 0x180102C30
	[FormerlySerializedAsAttribute] // RVA: 0x102C30 Offset: 0x102030 VA: 0x180102C30
	private Sprite m_SelectedSprite; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Sprite m_DisabledSprite; // 0x18

	// Properties
	public Sprite highlightedSprite { get; }
	public Sprite pressedSprite { get; }
	public Sprite selectedSprite { get; }
	public Sprite disabledSprite { get; }

	// Methods
	// RVA: 0x1E50 Offset: 0x1250 VA: 0x180001E50
	public Sprite get_highlightedSprite() { }
	// RVA: 0x1E40 Offset: 0x1240 VA: 0x180001E40
	public Sprite get_pressedSprite() { }
	// RVA: 0x2100 Offset: 0x1500 VA: 0x180002100
	public Sprite get_selectedSprite() { }
	// RVA: 0x23D0 Offset: 0x17D0 VA: 0x1800023D0
	public Sprite get_disabledSprite() { }
	// RVA: 0x1C4F0 Offset: 0x1B8F0 VA: 0x18001C4F0 Slot: 4
	public bool Equals(SpriteState other) { }
}

// Namespace: UnityEngine.UI
public static class StencilMaterial // TypeDefIndex: 2510
{
	// Fields
	private static List<StencilMaterial.MatEntry> m_List; // 0xABC73

	// Methods
	// RVA: 0x4D21E0 Offset: 0x4D09E0 VA: 0x1804D21E0
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask) { }
	// RVA: 0x4D22D0 Offset: 0x4D0AD0 VA: 0x1804D22D0
	public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask) { }
	// RVA: 0x4D2BE0 Offset: 0x4D13E0 VA: 0x1804D2BE0
	public static void Remove(Material customMat) { }
	// RVA: 0x4D2DF0 Offset: 0x4D15F0 VA: 0x1804D2DF0
	private static void .cctor() { }
}

// Namespace: 
private class StencilMaterial.MatEntry // TypeDefIndex: 2511
{
	// Fields
	public Material baseMat; // 0x10
	public Material customMat; // 0x18
	public int count; // 0x20
	public int stencilId; // 0x24
	public StencilOp operation; // 0x28
	public CompareFunction compareFunction; // 0x2C
	public int readMask; // 0x30
	public int writeMask; // 0x34
	public bool useAlphaClip; // 0x38
	public ColorWriteMask colorMask; // 0x3C

	// Methods
	// RVA: 0x4DE570 Offset: 0x4DCD70 VA: 0x1804DE570
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[RequireComponent] // RVA: 0x102C60 Offset: 0x102060 VA: 0x180102C60
public class Text : MaskableGraphic, ILayoutElement // TypeDefIndex: 2512
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private FontData m_FontData; // 0xD8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected string m_Text; // 0xE0
	private TextGenerator m_TextCache; // 0xE8
	private TextGenerator m_TextCacheForLayout; // 0xF0
	protected static Material s_DefaultText; // 0x0
	protected bool m_DisableFontTextureRebuiltCallback; // 0xF8
	private readonly UIVertex[] m_TempVerts; // 0x100

	// Properties
	public TextGenerator cachedTextGenerator { get; }
	public TextGenerator cachedTextGeneratorForLayout { get; }
	public override Texture mainTexture { get; }
	public Font font { get; set; }
	public virtual string text { get; set; }
	public bool supportRichText { get; set; }
	public bool resizeTextForBestFit { get; set; }
	public int resizeTextMinSize { get; set; }
	public int resizeTextMaxSize { get; set; }
	public TextAnchor alignment { get; set; }
	public bool alignByGeometry { get; set; }
	public int fontSize { get; set; }
	public HorizontalWrapMode horizontalOverflow { get; set; }
	public VerticalWrapMode verticalOverflow { get; set; }
	public float lineSpacing { get; set; }
	public FontStyle fontStyle { get; set; }
	public float pixelsPerUnit { get; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods
	// RVA: 0x4D2E90 Offset: 0x4D1690 VA: 0x1804D2E90
	protected void .ctor() { }
	// RVA: 0x4D2FF0 Offset: 0x4D17F0 VA: 0x1804D2FF0
	public TextGenerator get_cachedTextGenerator() { }
	// RVA: 0x4D30C0 Offset: 0x4D18C0 VA: 0x1804D30C0
	public TextGenerator get_cachedTextGeneratorForLayout() { }
	// RVA: 0x4D3170 Offset: 0x4D1970 VA: 0x1804D3170 Slot: 35
	public override Texture get_mainTexture() { }
	// RVA: 0x4D3490 Offset: 0x4D1C90 VA: 0x1804D3490
	public void FontTextureChanged() { }
	// RVA: 0x4D35F0 Offset: 0x4D1DF0 VA: 0x1804D35F0
	public Font get_font() { }
	// RVA: 0x4D3610 Offset: 0x4D1E10 VA: 0x1804D3610
	public void set_font(Font value) { }
	// RVA: 0x170D90 Offset: 0x16F590 VA: 0x180170D90 Slot: 70
	public virtual string get_text() { }
	// RVA: 0x4D3730 Offset: 0x4D1F30 VA: 0x1804D3730 Slot: 71
	public virtual void set_text(string value) { }
	// RVA: 0x4D38B0 Offset: 0x4D20B0 VA: 0x1804D38B0
	public bool get_supportRichText() { }
	// RVA: 0x4D38D0 Offset: 0x4D20D0 VA: 0x1804D38D0
	public void set_supportRichText(bool value) { }
	// RVA: 0x4D3930 Offset: 0x4D2130 VA: 0x1804D3930
	public bool get_resizeTextForBestFit() { }
	// RVA: 0x4D3950 Offset: 0x4D2150 VA: 0x1804D3950
	public void set_resizeTextForBestFit(bool value) { }
	// RVA: 0x4D39B0 Offset: 0x4D21B0 VA: 0x1804D39B0
	public int get_resizeTextMinSize() { }
	// RVA: 0x4D39D0 Offset: 0x4D21D0 VA: 0x1804D39D0
	public void set_resizeTextMinSize(int value) { }
	// RVA: 0x4D3A30 Offset: 0x4D2230 VA: 0x1804D3A30
	public int get_resizeTextMaxSize() { }
	// RVA: 0x4D3A50 Offset: 0x4D2250 VA: 0x1804D3A50
	public void set_resizeTextMaxSize(int value) { }
	// RVA: 0x4D3AB0 Offset: 0x4D22B0 VA: 0x1804D3AB0
	public TextAnchor get_alignment() { }
	// RVA: 0x4D3AD0 Offset: 0x4D22D0 VA: 0x1804D3AD0
	public void set_alignment(TextAnchor value) { }
	// RVA: 0x4D3B30 Offset: 0x4D2330 VA: 0x1804D3B30
	public bool get_alignByGeometry() { }
	// RVA: 0x4D3B50 Offset: 0x4D2350 VA: 0x1804D3B50
	public void set_alignByGeometry(bool value) { }
	// RVA: 0x4D3B90 Offset: 0x4D2390 VA: 0x1804D3B90
	public int get_fontSize() { }
	// RVA: 0x4D3BB0 Offset: 0x4D23B0 VA: 0x1804D3BB0
	public void set_fontSize(int value) { }
	// RVA: 0x4D3C10 Offset: 0x4D2410 VA: 0x1804D3C10
	public HorizontalWrapMode get_horizontalOverflow() { }
	// RVA: 0x4D3C30 Offset: 0x4D2430 VA: 0x1804D3C30
	public void set_horizontalOverflow(HorizontalWrapMode value) { }
	// RVA: 0x4D3C90 Offset: 0x4D2490 VA: 0x1804D3C90
	public VerticalWrapMode get_verticalOverflow() { }
	// RVA: 0x4D3CB0 Offset: 0x4D24B0 VA: 0x1804D3CB0
	public void set_verticalOverflow(VerticalWrapMode value) { }
	// RVA: 0x4D3D10 Offset: 0x4D2510 VA: 0x1804D3D10
	public float get_lineSpacing() { }
	// RVA: 0x4D3D30 Offset: 0x4D2530 VA: 0x1804D3D30
	public void set_lineSpacing(float value) { }
	// RVA: 0x4D3D90 Offset: 0x4D2590 VA: 0x1804D3D90
	public FontStyle get_fontStyle() { }
	// RVA: 0x4D3DB0 Offset: 0x4D25B0 VA: 0x1804D3DB0
	public void set_fontStyle(FontStyle value) { }
	// RVA: 0x4D3E10 Offset: 0x4D2610 VA: 0x1804D3E10
	public float get_pixelsPerUnit() { }
	// RVA: 0x4D4070 Offset: 0x4D2870 VA: 0x1804D4070 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x4D4130 Offset: 0x4D2930 VA: 0x1804D4130 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x4D41D0 Offset: 0x4D29D0 VA: 0x1804D41D0 Slot: 41
	protected override void UpdateGeometry() { }
	// RVA: 0x4D42B0 Offset: 0x4D2AB0 VA: 0x1804D42B0
	internal void AssignDefaultFont() { }
	// RVA: 0x4D4560 Offset: 0x4D2D60 VA: 0x1804D4560
	public TextGenerationSettings GetGenerationSettings(Vector2 extents) { }
	// RVA: 0x4D47F0 Offset: 0x4D2FF0 VA: 0x1804D47F0
	public static Vector2 GetTextAnchorPivot(TextAnchor anchor) { }
	// RVA: 0x4D4980 Offset: 0x4D3180 VA: 0x1804D4980 Slot: 43
	protected override void OnPopulateMesh(VertexHelper toFill) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 72
	public virtual void CalculateLayoutInputHorizontal() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 73
	public virtual void CalculateLayoutInputVertical() { }
	// RVA: 0x1BF170 Offset: 0x1BD970 VA: 0x1801BF170 Slot: 74
	public virtual float get_minWidth() { }
	// RVA: 0x4D50C0 Offset: 0x4D38C0 VA: 0x1804D50C0 Slot: 75
	public virtual float get_preferredWidth() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 76
	public virtual float get_flexibleWidth() { }
	// RVA: 0x1BF170 Offset: 0x1BD970 VA: 0x1801BF170 Slot: 77
	public virtual float get_minHeight() { }
	// RVA: 0x4D5230 Offset: 0x4D3A30 VA: 0x1804D5230 Slot: 78
	public virtual float get_preferredHeight() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 79
	public virtual float get_flexibleHeight() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 80
	public virtual int get_layoutPriority() { }
}

// Namespace: UnityEngine.UI
[RequireComponent] // RVA: 0x102CE0 Offset: 0x1020E0 VA: 0x180102CE0
public class Toggle : Selectable, IPointerClickHandler, IEventSystemHandler, ISubmitHandler, ICanvasElement // TypeDefIndex: 2513
{
	// Fields
	public Toggle.ToggleTransition toggleTransition; // 0xF0
	public Graphic graphic; // 0xF8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ToggleGroup m_Group; // 0x100
	public Toggle.ToggleEvent onValueChanged; // 0x108
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_IsOn; // 0x110

	// Properties
	public ToggleGroup group { get; set; }
	public bool isOn { get; set; }

	// Methods
	// RVA: 0x171250 Offset: 0x16FA50 VA: 0x180171250
	public ToggleGroup get_group() { }
	// RVA: 0x4D5340 Offset: 0x4D3B40 VA: 0x1804D5340
	public void set_group(ToggleGroup value) { }
	// RVA: 0x4D5370 Offset: 0x4D3B70 VA: 0x1804D5370
	protected void .ctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 46
	public virtual void Rebuild(CanvasUpdate executing) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 47
	public virtual void LayoutComplete() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 48
	public virtual void GraphicUpdateComplete() { }
	// RVA: 0x4D54A0 Offset: 0x4D3CA0 VA: 0x1804D54A0 Slot: 8
	protected override void OnDestroy() { }
	// RVA: 0x4D5560 Offset: 0x4D3D60 VA: 0x1804D5560 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x4D55A0 Offset: 0x4D3DA0 VA: 0x1804D55A0 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x4D55D0 Offset: 0x4D3DD0 VA: 0x1804D55D0 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }
	// RVA: 0x4D5750 Offset: 0x4D3F50 VA: 0x1804D5750
	private void SetToggleGroup(ToggleGroup newGroup, bool setMemberValue) { }
	// RVA: 0x4D5A60 Offset: 0x4D4260 VA: 0x1804D5A60
	public bool get_isOn() { }
	// RVA: 0x4D5A70 Offset: 0x4D4270 VA: 0x1804D5A70
	public void set_isOn(bool value) { }
	// RVA: 0x4D5A80 Offset: 0x4D4280 VA: 0x1804D5A80
	public void SetIsOnWithoutNotify(bool value) { }
	// RVA: 0x4D5A90 Offset: 0x4D4290 VA: 0x1804D5A90
	private void Set(bool value, bool sendCallback = True) { }
	// RVA: 0x4D5C90 Offset: 0x4D4490 VA: 0x1804D5C90
	private void PlayEffect(bool instant) { }
	// RVA: 0x4D5DA0 Offset: 0x4D45A0 VA: 0x1804D5DA0 Slot: 6
	protected override void Start() { }
	// RVA: 0x4D5DB0 Offset: 0x4D45B0 VA: 0x1804D5DB0
	private void InternalToggle() { }
	// RVA: 0x4D5E10 Offset: 0x4D4610 VA: 0x1804D5E10 Slot: 49
	public virtual void OnPointerClick(PointerEventData eventData) { }
	// RVA: 0x4D5DB0 Offset: 0x4D45B0 VA: 0x1804D5DB0 Slot: 50
	public virtual void OnSubmit(BaseEventData eventData) { }
	// RVA: 0x1BF8A0 Offset: 0x1BE0A0 VA: 0x1801BF8A0 Slot: 42
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum Toggle.ToggleTransition // TypeDefIndex: 2514
{
	// Fields
	public int value__; // 0x0
	public const Toggle.ToggleTransition None = 0; // 0x0
	public const Toggle.ToggleTransition Fade = 1; // 0x0
}

// Namespace: 
[Serializable]
public class Toggle.ToggleEvent : UnityEvent<bool> // TypeDefIndex: 2515
{
	// Methods
	// RVA: 0x4DE580 Offset: 0x4DCD80 VA: 0x1804DE580
	public void .ctor() { }
}

// Namespace: UnityEngine.UI
[DisallowMultipleComponent] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class ToggleGroup : UIBehaviour // TypeDefIndex: 2516
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_AllowSwitchOff; // 0x18
	protected List<Toggle> m_Toggles; // 0x20

	// Properties
	public bool allowSwitchOff { get; set; }

	// Methods
	// RVA: 0x28C960 Offset: 0x28B160 VA: 0x18028C960
	public bool get_allowSwitchOff() { }
	// RVA: 0x2E9780 Offset: 0x2E7F80 VA: 0x1802E9780
	public void set_allowSwitchOff(bool value) { }
	// RVA: 0x4D5E80 Offset: 0x4D4680 VA: 0x1804D5E80
	protected void .ctor() { }
	// RVA: 0x4D5F20 Offset: 0x4D4720 VA: 0x1804D5F20 Slot: 6
	protected override void Start() { }
	// RVA: 0x4D5F20 Offset: 0x4D4720 VA: 0x1804D5F20 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x4D5F30 Offset: 0x4D4730 VA: 0x1804D5F30
	private void ValidateToggleIsInGroup(Toggle toggle) { }
	// RVA: 0x4D60A0 Offset: 0x4D48A0 VA: 0x1804D60A0
	public void NotifyToggleOn(Toggle toggle, bool sendCallback = True) { }
	// RVA: 0x4D6380 Offset: 0x4D4B80 VA: 0x1804D6380
	public void UnregisterToggle(Toggle toggle) { }
	// RVA: 0x4D6470 Offset: 0x4D4C70 VA: 0x1804D6470
	public void RegisterToggle(Toggle toggle) { }
	// RVA: 0x4D6520 Offset: 0x4D4D20 VA: 0x1804D6520
	public void EnsureValidState() { }
	// RVA: 0x4D6860 Offset: 0x4D5060 VA: 0x1804D6860
	public bool AnyTogglesOn() { }
	// RVA: 0x4D69B0 Offset: 0x4D51B0 VA: 0x1804D69B0
	public IEnumerable<Toggle> ActiveToggles() { }
	// RVA: 0x4D6AD0 Offset: 0x4D52D0 VA: 0x1804D6AD0
	public Toggle GetFirstActiveToggle() { }
	// RVA: 0x4D6B70 Offset: 0x4D5370 VA: 0x1804D6B70
	public void SetAllTogglesOff(bool sendCallback = True) { }
}

// Namespace: 
[Serializable]
private sealed class ToggleGroup.<>c // TypeDefIndex: 2517
{
	// Fields
	public static readonly ToggleGroup.<>c <>9; // 0x0
	public static Predicate<Toggle> <>9__13_0; // 0x8
	public static Func<Toggle, bool> <>9__14_0; // 0x10

	// Methods
	// RVA: 0x4DE600 Offset: 0x4DCE00 VA: 0x1804DE600
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x4DE680 Offset: 0x4DCE80 VA: 0x1804DE680
	internal bool <AnyTogglesOn>b__13_0(Toggle x) { }
	// RVA: 0x4DE680 Offset: 0x4DCE80 VA: 0x1804DE680
	internal bool <ActiveToggles>b__14_0(Toggle x) { }
}

// Namespace: UnityEngine.UI
internal static class ListPool<T> // TypeDefIndex: 2518
{
	// Fields
	private static readonly ObjectPool<List<T>> s_ListPool; // 0x0

	// Methods
	// RVA: 0x780D90 Offset: 0x77F590 VA: 0x180780D90
	private static void Clear(List<T> l) { }
	// RVA: 0x780E10 Offset: 0x77F610 VA: 0x180780E10
	public static List<T> Get() { }
	// RVA: 0x780F80 Offset: 0x77F780 VA: 0x180780F80
	public static void Release(List<T> toRelease) { }
	// RVA: 0x781100 Offset: 0x77F900 VA: 0x180781100
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
internal class ObjectPool<T> // TypeDefIndex: 2519
{
	// Fields
	private readonly Stack<T> m_Stack; // 0x0
	private readonly UnityAction<T> m_ActionOnGet; // 0x0
	private readonly UnityAction<T> m_ActionOnRelease; // 0x0
	private int <countAll>k__BackingField; // 0x0

	// Properties
	public int countAll { get; set; }

	// Methods
	// RVA: 0x1FC310 Offset: 0x1FAB10 VA: 0x1801FC310
	public int get_countAll() { }
	// RVA: 0x1FC320 Offset: 0x1FAB20 VA: 0x1801FC320
	private void set_countAll(int value) { }
	// RVA: 0x7C0970 Offset: 0x7BF170 VA: 0x1807C0970
	public void .ctor(UnityAction<T> actionOnGet, UnityAction<T> actionOnRelease) { }
	// RVA: 0x7C0A00 Offset: 0x7BF200 VA: 0x1807C0A00
	public T Get() { }
	// RVA: 0x7FAEE0 Offset: 0x7F96E0 VA: 0x1807FAEE0
	public void Release(T element) { }
}

// Namespace: UnityEngine.UI
internal class ReflectionMethodsCache // TypeDefIndex: 2520
{
	// Fields
	public ReflectionMethodsCache.Raycast3DCallback raycast3D; // 0x10
	public ReflectionMethodsCache.RaycastAllCallback raycast3DAll; // 0x18
	public ReflectionMethodsCache.GetRaycastNonAllocCallback getRaycastNonAlloc; // 0x20
	public ReflectionMethodsCache.Raycast2DCallback raycast2D; // 0x28
	public ReflectionMethodsCache.GetRayIntersectionAllCallback getRayIntersectionAll; // 0x30
	public ReflectionMethodsCache.GetRayIntersectionAllNonAllocCallback getRayIntersectionAllNonAlloc; // 0x38
	private static ReflectionMethodsCache s_ReflectionMethodsCache; // 0x0

	// Properties
	public static ReflectionMethodsCache Singleton { get; }

	// Methods
	// RVA: 0x29CE40 Offset: 0x29B640 VA: 0x18029CE40
	public void .ctor() { }
	// RVA: 0x29DE60 Offset: 0x29C660 VA: 0x18029DE60
	public static ReflectionMethodsCache get_Singleton() { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.Raycast3DCallback : MulticastDelegate // TypeDefIndex: 2521
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x4DDB00 Offset: 0x4DC300 VA: 0x1804DDB00 Slot: 12
	public virtual bool Invoke(Ray r, out RaycastHit hit, float f, int i) { }
	// RVA: 0x4DDF50 Offset: 0x4DC750 VA: 0x1804DDF50 Slot: 13
	public virtual IAsyncResult BeginInvoke(Ray r, out RaycastHit hit, float f, int i, AsyncCallback callback, object object) { }
	// RVA: 0x4DE060 Offset: 0x4DC860 VA: 0x1804DE060 Slot: 14
	public virtual bool EndInvoke(out RaycastHit hit, IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.RaycastAllCallback : MulticastDelegate // TypeDefIndex: 2522
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x4DCA70 Offset: 0x4DB270 VA: 0x1804DCA70 Slot: 12
	public virtual RaycastHit[] Invoke(Ray r, float f, int i) { }
	// RVA: 0x4DE090 Offset: 0x4DC890 VA: 0x1804DE090 Slot: 13
	public virtual IAsyncResult BeginInvoke(Ray r, float f, int i, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual RaycastHit[] EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.GetRaycastNonAllocCallback : MulticastDelegate // TypeDefIndex: 2523
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x4DCF70 Offset: 0x4DB770 VA: 0x1804DCF70 Slot: 12
	public virtual int Invoke(Ray r, RaycastHit[] results, float f, int i) { }
	// RVA: 0x4DD4C0 Offset: 0x4DBCC0 VA: 0x1804DD4C0 Slot: 13
	public virtual IAsyncResult BeginInvoke(Ray r, RaycastHit[] results, float f, int i, AsyncCallback callback, object object) { }
	// RVA: 0x26EFA0 Offset: 0x26D7A0 VA: 0x18026EFA0 Slot: 14
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.Raycast2DCallback : MulticastDelegate // TypeDefIndex: 2524
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x4DD5C0 Offset: 0x4DBDC0 VA: 0x1804DD5C0 Slot: 12
	public virtual RaycastHit2D Invoke(Vector2 p1, Vector2 p2, float f, int i) { }
	// RVA: 0x4DD9A0 Offset: 0x4DC1A0 VA: 0x1804DD9A0 Slot: 13
	public virtual IAsyncResult BeginInvoke(Vector2 p1, Vector2 p2, float f, int i, AsyncCallback callback, object object) { }
	// RVA: 0x4DDAA0 Offset: 0x4DC2A0 VA: 0x1804DDAA0 Slot: 14
	public virtual RaycastHit2D EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.GetRayIntersectionAllCallback : MulticastDelegate // TypeDefIndex: 2525
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x4DCA70 Offset: 0x4DB270 VA: 0x1804DCA70 Slot: 12
	public virtual RaycastHit2D[] Invoke(Ray r, float f, int i) { }
	// RVA: 0x4DCE80 Offset: 0x4DB680 VA: 0x1804DCE80 Slot: 13
	public virtual IAsyncResult BeginInvoke(Ray r, float f, int i, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual RaycastHit2D[] EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class ReflectionMethodsCache.GetRayIntersectionAllNonAllocCallback : MulticastDelegate // TypeDefIndex: 2526
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x4DCF70 Offset: 0x4DB770 VA: 0x1804DCF70 Slot: 12
	public virtual int Invoke(Ray r, RaycastHit2D[] results, float f, int i) { }
	// RVA: 0x4DD3C0 Offset: 0x4DBBC0 VA: 0x1804DD3C0 Slot: 13
	public virtual IAsyncResult BeginInvoke(Ray r, RaycastHit2D[] results, float f, int i, AsyncCallback callback, object object) { }
	// RVA: 0x26EFA0 Offset: 0x26D7A0 VA: 0x18026EFA0 Slot: 14
	public virtual int EndInvoke(IAsyncResult result) { }
}

// Namespace: UnityEngine.UI
public class VertexHelper : IDisposable // TypeDefIndex: 2527
{
	// Fields
	private List<Vector3> m_Positions; // 0x10
	private List<Color32> m_Colors; // 0x18
	private List<Vector2> m_Uv0S; // 0x20
	private List<Vector2> m_Uv1S; // 0x28
	private List<Vector2> m_Uv2S; // 0x30
	private List<Vector2> m_Uv3S; // 0x38
	private List<Vector3> m_Normals; // 0x40
	private List<Vector4> m_Tangents; // 0x48
	private List<int> m_Indices; // 0x50
	private static readonly Vector4 s_DefaultTangent; // 0x0
	private static readonly Vector3 s_DefaultNormal; // 0x10
	private bool m_ListsInitalized; // 0x58

	// Properties
	public int currentVertCount { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x4D7FD0 Offset: 0x4D67D0 VA: 0x1804D7FD0
	public void .ctor(Mesh m) { }
	// RVA: 0x4D8340 Offset: 0x4D6B40 VA: 0x1804D8340
	private void InitializeListIfRequired() { }
	// RVA: 0x4D8880 Offset: 0x4D7080 VA: 0x1804D8880 Slot: 4
	public void Dispose() { }
	// RVA: 0x4D8E00 Offset: 0x4D7600 VA: 0x1804D8E00
	public void Clear() { }
	// RVA: 0x4D9000 Offset: 0x4D7800 VA: 0x1804D9000
	public int get_currentVertCount() { }
	// RVA: 0x4D9080 Offset: 0x4D7880 VA: 0x1804D9080
	public void PopulateUIVertex(ref UIVertex vertex, int i) { }
	// RVA: 0x4D9280 Offset: 0x4D7A80 VA: 0x1804D9280
	public void SetUIVertex(UIVertex vertex, int i) { }
	// RVA: 0x4D95E0 Offset: 0x4D7DE0 VA: 0x1804D95E0
	public void FillMesh(Mesh mesh) { }
	// RVA: 0x4D9A00 Offset: 0x4D8200 VA: 0x1804D9A00
	public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector3 normal, Vector4 tangent) { }
	// RVA: 0x4D9C70 Offset: 0x4D8470 VA: 0x1804D9C70
	public void AddVert(Vector3 position, Color32 color, Vector2 uv0, Vector2 uv1, Vector3 normal, Vector4 tangent) { }
	// RVA: 0x4D9DE0 Offset: 0x4D85E0 VA: 0x1804D9DE0
	public void AddVert(Vector3 position, Color32 color, Vector2 uv0) { }
	// RVA: 0x4D9F40 Offset: 0x4D8740 VA: 0x1804D9F40
	public void AddVert(UIVertex v) { }
	// RVA: 0x4DA0B0 Offset: 0x4D88B0 VA: 0x1804DA0B0
	public void AddTriangle(int idx0, int idx1, int idx2) { }
	// RVA: 0x4DA180 Offset: 0x4D8980 VA: 0x1804DA180
	public void AddUIVertexQuad(UIVertex[] verts) { }
	// RVA: 0x4DA3C0 Offset: 0x4D8BC0 VA: 0x1804DA3C0
	public void AddUIVertexTriangleStream(List<UIVertex> verts) { }
	// RVA: 0x4DA510 Offset: 0x4D8D10 VA: 0x1804DA510
	public void GetUIVertexStream(List<UIVertex> stream) { }
	// RVA: 0x4DA620 Offset: 0x4D8E20 VA: 0x1804DA620
	private static void .cctor() { }
}

// Namespace: UnityEngine.UI
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public abstract class BaseMeshEffect : UIBehaviour, IMeshModifier // TypeDefIndex: 2528
{
	// Fields
	private Graphic m_Graphic; // 0x18

	// Properties
	protected Graphic graphic { get; }

	// Methods
	// RVA: 0x1FDC90 Offset: 0x1FC490 VA: 0x1801FDC90
	protected Graphic get_graphic() { }
	// RVA: 0x1FDD50 Offset: 0x1FC550 VA: 0x1801FDD50 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x1FDE30 Offset: 0x1FC630 VA: 0x1801FDE30 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x1FDF10 Offset: 0x1FC710 VA: 0x1801FDF10 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }
	// RVA: 0x1FDFF0 Offset: 0x1FC7F0 VA: 0x1801FDFF0 Slot: 19
	public virtual void ModifyMesh(Mesh mesh) { }
	// RVA: -1 Offset: -1 Slot: 20
	public abstract void ModifyMesh(VertexHelper vh) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: UnityEngine.UI
public interface IMeshModifier // TypeDefIndex: 2529
{
	// Methods
	[ObsoleteAttribute] // RVA: 0x102D60 Offset: 0x102160 VA: 0x180102D60
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void ModifyMesh(Mesh mesh) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract void ModifyMesh(VertexHelper verts) { }
}

// Namespace: UnityEngine.UI
public class Outline : Shadow // TypeDefIndex: 2530
{
	// Methods
	// RVA: 0x2957F0 Offset: 0x293FF0 VA: 0x1802957F0
	protected void .ctor() { }
	// RVA: 0x295820 Offset: 0x294020 VA: 0x180295820 Slot: 20
	public override void ModifyMesh(VertexHelper vh) { }
}

// Namespace: UnityEngine.UI
public class PositionAsUV1 : BaseMeshEffect // TypeDefIndex: 2531
{
	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
	// RVA: 0x2997B0 Offset: 0x297FB0 VA: 0x1802997B0 Slot: 20
	public override void ModifyMesh(VertexHelper vh) { }
}

// Namespace: UnityEngine.UI
public class Shadow : BaseMeshEffect // TypeDefIndex: 2532
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Color m_EffectColor; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector2 m_EffectDistance; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_UseGraphicAlpha; // 0x38
	private const float kMaxEffectDistance = 600; // 0x0

	// Properties
	public Color effectColor { get; set; }
	public Vector2 effectDistance { get; set; }
	public bool useGraphicAlpha { get; set; }

	// Methods
	// RVA: 0x2957F0 Offset: 0x293FF0 VA: 0x1802957F0
	protected void .ctor() { }
	// RVA: 0x20C190 Offset: 0x20A990 VA: 0x18020C190
	public Color get_effectColor() { }
	// RVA: 0x4CCA90 Offset: 0x4CB290 VA: 0x1804CCA90
	public void set_effectColor(Color value) { }
	// RVA: 0x4CCB80 Offset: 0x4CB380 VA: 0x1804CCB80
	public Vector2 get_effectDistance() { }
	// RVA: 0x4CCBA0 Offset: 0x4CB3A0 VA: 0x1804CCBA0
	public void set_effectDistance(Vector2 value) { }
	// RVA: 0x2E9C80 Offset: 0x2E8480 VA: 0x1802E9C80
	public bool get_useGraphicAlpha() { }
	// RVA: 0x4CCD80 Offset: 0x4CB580 VA: 0x1804CCD80
	public void set_useGraphicAlpha(bool value) { }
	// RVA: 0x4CCE60 Offset: 0x4CB660 VA: 0x1804CCE60
	protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y) { }
	// RVA: 0x4CD1C0 Offset: 0x4CB9C0 VA: 0x1804CD1C0
	protected void ApplyShadow(List<UIVertex> verts, Color32 color, int start, int end, float x, float y) { }
	// RVA: 0x4CD1D0 Offset: 0x4CB9D0 VA: 0x1804CD1D0 Slot: 20
	public override void ModifyMesh(VertexHelper vh) { }
}

// Namespace: UnityEngine.UI.Collections
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
internal class IndexedSet<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable // TypeDefIndex: 2533
{
	// Fields
	private readonly List<T> m_List; // 0x0
	private Dictionary<T, int> m_Dictionary; // 0x0

	// Properties
	public int Count { get; }
	public bool IsReadOnly { get; }
	public T Item { get; set; }

	// Methods
	// RVA: 0x725EA0 Offset: 0x7246A0 VA: 0x180725EA0 Slot: 11
	public void Add(T item) { }
	// RVA: 0x725F40 Offset: 0x724740 VA: 0x180725F40
	public bool AddUnique(T item) { }
	// RVA: 0x726010 Offset: 0x724810 VA: 0x180726010 Slot: 15
	public bool Remove(T item) { }
	// RVA: 0x726090 Offset: 0x724890 VA: 0x180726090 Slot: 16
	public IEnumerator<T> GetEnumerator() { }
	// RVA: 0x7260E0 Offset: 0x7248E0 VA: 0x1807260E0 Slot: 17
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x726110 Offset: 0x724910 VA: 0x180726110 Slot: 12
	public void Clear() { }
	// RVA: 0x726170 Offset: 0x724970 VA: 0x180726170 Slot: 13
	public bool Contains(T item) { }
	// RVA: 0x7261A0 Offset: 0x7249A0 VA: 0x1807261A0 Slot: 14
	public void CopyTo(T[] array, int arrayIndex) { }
	// RVA: 0x7261D0 Offset: 0x7249D0 VA: 0x1807261D0 Slot: 9
	public int get_Count() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 10
	public bool get_IsReadOnly() { }
	// RVA: 0x726200 Offset: 0x724A00 VA: 0x180726200 Slot: 6
	public int IndexOf(T item) { }
	// RVA: 0x726250 Offset: 0x724A50 VA: 0x180726250 Slot: 7
	public void Insert(int index, T item) { }
	// RVA: 0x7262B0 Offset: 0x724AB0 VA: 0x1807262B0 Slot: 8
	public void RemoveAt(int index) { }
	// RVA: 0x726440 Offset: 0x724C40 VA: 0x180726440 Slot: 4
	public T get_Item(int index) { }
	// RVA: 0x726470 Offset: 0x724C70 VA: 0x180726470 Slot: 5
	public void set_Item(int index, T value) { }
	// RVA: 0x726540 Offset: 0x724D40 VA: 0x180726540
	public void Sort(Comparison<T> sortLayoutFunction) { }
	// RVA: 0x726620 Offset: 0x724E20 VA: 0x180726620
	public void .ctor() { }
}

// Namespace: UnityEngine.UI.CoroutineTween
internal interface ITweenValue // TypeDefIndex: 2534
{
	// Properties
	public abstract bool ignoreTimeScale { get; }
	public abstract float duration { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void TweenValue(float floatPercentage) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_ignoreTimeScale() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract float get_duration() { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool ValidTarget() { }
}

// Namespace: UnityEngine.UI.CoroutineTween
internal struct ColorTween : ITweenValue // TypeDefIndex: 2535
{
	// Fields
	private ColorTween.ColorTweenCallback m_Target; // 0x0
	private Color m_StartColor; // 0x8
	private Color m_TargetColor; // 0x18
	private ColorTween.ColorTweenMode m_TweenMode; // 0x28
	private float m_Duration; // 0x2C
	private bool m_IgnoreTimeScale; // 0x30

	// Properties
	set; }
	public Color targetColor { set; }
	public ColorTween.ColorTweenMode tweenMode { set; }
	public float duration { get; set; }
	public bool ignoreTimeScale { get; set; }

	// Methods
	// RVA: 0x87D0 Offset: 0x7BD0 VA: 0x1800087D0
	public void set_startColor(Color value) { }
	// RVA: 0x87E0 Offset: 0x7BE0 VA: 0x1800087E0
	public void set_targetColor(Color value) { }
	// RVA: 0x2130 Offset: 0x1530 VA: 0x180002130
	public void set_tweenMode(ColorTween.ColorTweenMode value) { }
	// RVA: 0x87F0 Offset: 0x7BF0 VA: 0x1800087F0 Slot: 6
	public float get_duration() { }
	// RVA: 0x23B0 Offset: 0x17B0 VA: 0x1800023B0
	public void set_duration(float value) { }
	// RVA: 0x8800 Offset: 0x7C00 VA: 0x180008800 Slot: 5
	public bool get_ignoreTimeScale() { }
	// RVA: 0x8810 Offset: 0x7C10 VA: 0x180008810
	public void set_ignoreTimeScale(bool value) { }
	// RVA: 0x8820 Offset: 0x7C20 VA: 0x180008820 Slot: 4
	public void TweenValue(float floatPercentage) { }
	// RVA: 0x8830 Offset: 0x7C30 VA: 0x180008830
	public void AddOnChangedCallback(UnityAction<Color> callback) { }
	// RVA: 0x5DB0 Offset: 0x51B0 VA: 0x180005DB0 Slot: 7
	public bool ValidTarget() { }
}

// Namespace: 
public enum ColorTween.ColorTweenMode // TypeDefIndex: 2536
{
	// Fields
	public int value__; // 0x0
	public const ColorTween.ColorTweenMode All = 0; // 0x0
	public const ColorTween.ColorTweenMode RGB = 1; // 0x0
	public const ColorTween.ColorTweenMode Alpha = 2; // 0x0
}

// Namespace: 
public class ColorTween.ColorTweenCallback : UnityEvent<Color> // TypeDefIndex: 2537
{
	// Methods
	// RVA: 0x4DA860 Offset: 0x4D9060 VA: 0x1804DA860
	public void .ctor() { }
}

// Namespace: UnityEngine.UI.CoroutineTween
internal struct FloatTween : ITweenValue // TypeDefIndex: 2538
{
	// Fields
	private FloatTween.FloatTweenCallback m_Target; // 0x0
	private float m_StartValue; // 0x8
	private float m_TargetValue; // 0xC
	private float m_Duration; // 0x10
	private bool m_IgnoreTimeScale; // 0x14

	// Properties
	set; }
	public float targetValue { set; }
	public float duration { get; set; }
	public bool ignoreTimeScale { get; set; }

	// Methods
	// RVA: 0x5D30 Offset: 0x5130 VA: 0x180005D30
	public void set_startValue(float value) { }
	// RVA: 0x5D40 Offset: 0x5140 VA: 0x180005D40
	public void set_targetValue(float value) { }
	// RVA: 0x5D50 Offset: 0x5150 VA: 0x180005D50 Slot: 6
	public float get_duration() { }
	// RVA: 0x5D60 Offset: 0x5160 VA: 0x180005D60
	public void set_duration(float value) { }
	// RVA: 0x5D70 Offset: 0x5170 VA: 0x180005D70 Slot: 5
	public bool get_ignoreTimeScale() { }
	// RVA: 0x5D80 Offset: 0x5180 VA: 0x180005D80
	public void set_ignoreTimeScale(bool value) { }
	// RVA: 0x8840 Offset: 0x7C40 VA: 0x180008840 Slot: 4
	public void TweenValue(float floatPercentage) { }
	// RVA: 0x8850 Offset: 0x7C50 VA: 0x180008850
	public void AddOnChangedCallback(UnityAction<float> callback) { }
	// RVA: 0x5DB0 Offset: 0x51B0 VA: 0x180005DB0 Slot: 7
	public bool ValidTarget() { }
}

// Namespace: 
public class FloatTween.FloatTweenCallback : UnityEvent<float> // TypeDefIndex: 2539
{
	// Methods
	// RVA: 0x4DAF70 Offset: 0x4D9770 VA: 0x1804DAF70
	public void .ctor() { }
}

// Namespace: UnityEngine.UI.CoroutineTween
internal class TweenRunner<T> // TypeDefIndex: 2540
{
	// Fields
	protected MonoBehaviour m_CoroutineContainer; // 0x0
	protected IEnumerator m_Tween; // 0x0

	// Methods
	// RVA: 0x7C5050 Offset: 0x7C3850 VA: 0x1807C5050
	private static IEnumerator Start(T tweenInfo) { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void Init(MonoBehaviour coroutineContainer) { }
	// RVA: 0x7C5150 Offset: 0x7C3950 VA: 0x1807C5150
	public void StartTween(T info) { }
	// RVA: 0x7C5010 Offset: 0x7C3810 VA: 0x1807C5010
	public void StopTween() { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
}

// Namespace: 
private sealed class TweenRunner.<Start>d__2<T> : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2541
{
	// Fields
	private int <>1__state; // 0x0
	private object <>2__current; // 0x0
	public T tweenInfo; // 0x0
	private float <elapsedTime>5__2; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C7A90 Offset: 0x7C6290 VA: 0x1807C7A90
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x7C8B90 Offset: 0x7C7390 VA: 0x1807C8B90 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: UnityEngine.EventSystems
public class AxisEventData : BaseEventData // TypeDefIndex: 2542
{
	// Fields
	private Vector2 <moveVector>k__BackingField; // 0x20
	private MoveDirection <moveDir>k__BackingField; // 0x28

	// Properties
	set; }
	public MoveDirection moveDir { get; set; }

	// Methods
	// RVA: 0x16EEC0 Offset: 0x16D6C0 VA: 0x18016EEC0
	public void set_moveVector(Vector2 value) { }
	// RVA: 0x1FC310 Offset: 0x1FAB10 VA: 0x1801FC310
	public MoveDirection get_moveDir() { }
	// RVA: 0x1FC320 Offset: 0x1FAB20 VA: 0x1801FC320
	public void set_moveDir(MoveDirection value) { }
	// RVA: 0x1FC330 Offset: 0x1FAB30 VA: 0x1801FC330
	public void .ctor(EventSystem eventSystem) { }
}

// Namespace: UnityEngine.EventSystems
public abstract class AbstractEventData // TypeDefIndex: 2543
{
	// Fields
	protected bool m_Used; // 0x10

	// Properties
	public virtual bool used { get; }

	// Methods
	// RVA: 0x1FB8D0 Offset: 0x1FA0D0 VA: 0x1801FB8D0 Slot: 4
	public virtual void Reset() { }
	// RVA: 0x1FB8E0 Offset: 0x1FA0E0 VA: 0x1801FB8E0 Slot: 5
	public virtual void Use() { }
	// RVA: 0x1E30F0 Offset: 0x1E18F0 VA: 0x1801E30F0 Slot: 6
	public virtual bool get_used() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void .ctor() { }
}

// Namespace: UnityEngine.EventSystems
public class BaseEventData : AbstractEventData // TypeDefIndex: 2544
{
	// Fields
	private readonly EventSystem m_EventSystem; // 0x18

	// Properties
	public GameObject selectedObject { set; }

	// Methods
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void .ctor(EventSystem eventSystem) { }
	// RVA: 0x1FC3F0 Offset: 0x1FABF0 VA: 0x1801FC3F0
	public void set_selectedObject(GameObject value) { }
}

// Namespace: UnityEngine.EventSystems
public class PointerEventData : BaseEventData // TypeDefIndex: 2545
{
	// Fields
	private GameObject <pointerEnter>k__BackingField; // 0x20
	private GameObject m_PointerPress; // 0x28
	private GameObject <lastPress>k__BackingField; // 0x30
	private GameObject <rawPointerPress>k__BackingField; // 0x38
	private GameObject <pointerDrag>k__BackingField; // 0x40
	private GameObject <pointerClick>k__BackingField; // 0x48
	private RaycastResult <pointerCurrentRaycast>k__BackingField; // 0x50
	private RaycastResult <pointerPressRaycast>k__BackingField; // 0x98
	public List<GameObject> hovered; // 0xE0
	private bool <eligibleForClick>k__BackingField; // 0xE8
	private int <pointerId>k__BackingField; // 0xEC
	private Vector2 <position>k__BackingField; // 0xF0
	private Vector2 <delta>k__BackingField; // 0xF8
	private Vector2 <pressPosition>k__BackingField; // 0x100
	private Vector3 <worldPosition>k__BackingField; // 0x108
	private Vector3 <worldNormal>k__BackingField; // 0x114
	private float <clickTime>k__BackingField; // 0x120
	private int <clickCount>k__BackingField; // 0x124
	private Vector2 <scrollDelta>k__BackingField; // 0x128
	private bool <useDragThreshold>k__BackingField; // 0x130
	private bool <dragging>k__BackingField; // 0x131
	private PointerEventData.InputButton <button>k__BackingField; // 0x134

	// Properties
	public GameObject pointerEnter { get; set; }
	public GameObject lastPress { get; set; }
	public GameObject rawPointerPress { set; }
	public GameObject pointerDrag { get; set; }
	public GameObject pointerClick { get; set; }
	public RaycastResult pointerCurrentRaycast { get; set; }
	public RaycastResult pointerPressRaycast { get; set; }
	public bool eligibleForClick { get; set; }
	public int pointerId { get; set; }
	public Vector2 position { get; set; }
	public Vector2 delta { get; set; }
	public Vector2 pressPosition { get; set; }
	public float clickTime { get; set; }
	public int clickCount { get; set; }
	public Vector2 scrollDelta { get; set; }
	public bool useDragThreshold { get; set; }
	public bool dragging { get; set; }
	public PointerEventData.InputButton button { get; set; }
	public Camera enterEventCamera { get; }
	public Camera pressEventCamera { get; }
	public GameObject pointerPress { get; set; }

	// Methods
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public GameObject get_pointerEnter() { }
	// RVA: 0x16EEC0 Offset: 0x16D6C0 VA: 0x18016EEC0
	public void set_pointerEnter(GameObject value) { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public GameObject get_lastPress() { }
	// RVA: 0x1A20C0 Offset: 0x1A08C0 VA: 0x1801A20C0
	private void set_lastPress(GameObject value) { }
	// RVA: 0x1FCBF0 Offset: 0x1FB3F0 VA: 0x1801FCBF0
	public void set_rawPointerPress(GameObject value) { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public GameObject get_pointerDrag() { }
	// RVA: 0x16F140 Offset: 0x16D940 VA: 0x18016F140
	public void set_pointerDrag(GameObject value) { }
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0
	public GameObject get_pointerClick() { }
	// RVA: 0x16C1B0 Offset: 0x16A9B0 VA: 0x18016C1B0
	public void set_pointerClick(GameObject value) { }
	// RVA: 0x296EE0 Offset: 0x2956E0 VA: 0x180296EE0
	public RaycastResult get_pointerCurrentRaycast() { }
	// RVA: 0x296F20 Offset: 0x295720 VA: 0x180296F20
	public void set_pointerCurrentRaycast(RaycastResult value) { }
	// RVA: 0x296F50 Offset: 0x295750 VA: 0x180296F50
	public RaycastResult get_pointerPressRaycast() { }
	// RVA: 0x296F90 Offset: 0x295790 VA: 0x180296F90
	public void set_pointerPressRaycast(RaycastResult value) { }
	// RVA: 0x1730C0 Offset: 0x1718C0 VA: 0x1801730C0
	public bool get_eligibleForClick() { }
	// RVA: 0x296FD0 Offset: 0x2957D0 VA: 0x180296FD0
	public void set_eligibleForClick(bool value) { }
	// RVA: 0x296FE0 Offset: 0x2957E0 VA: 0x180296FE0
	public int get_pointerId() { }
	// RVA: 0x296FF0 Offset: 0x2957F0 VA: 0x180296FF0
	public void set_pointerId(int value) { }
	// RVA: 0x297000 Offset: 0x295800 VA: 0x180297000
	public Vector2 get_position() { }
	// RVA: 0x1FEA60 Offset: 0x1FD260 VA: 0x1801FEA60
	public void set_position(Vector2 value) { }
	// RVA: 0x297020 Offset: 0x295820 VA: 0x180297020
	public Vector2 get_delta() { }
	// RVA: 0x297040 Offset: 0x295840 VA: 0x180297040
	public void set_delta(Vector2 value) { }
	// RVA: 0x297050 Offset: 0x295850 VA: 0x180297050
	public Vector2 get_pressPosition() { }
	// RVA: 0x171260 Offset: 0x16FA60 VA: 0x180171260
	public void set_pressPosition(Vector2 value) { }
	// RVA: 0x297070 Offset: 0x295870 VA: 0x180297070
	public float get_clickTime() { }
	// RVA: 0x297080 Offset: 0x295880 VA: 0x180297080
	public void set_clickTime(float value) { }
	// RVA: 0x281340 Offset: 0x27FB40 VA: 0x180281340
	public int get_clickCount() { }
	// RVA: 0x297090 Offset: 0x295890 VA: 0x180297090
	public void set_clickCount(int value) { }
	// RVA: 0x2970A0 Offset: 0x2958A0 VA: 0x1802970A0
	public Vector2 get_scrollDelta() { }
	// RVA: 0x202E60 Offset: 0x201660 VA: 0x180202E60
	public void set_scrollDelta(Vector2 value) { }
	// RVA: 0x2970C0 Offset: 0x2958C0 VA: 0x1802970C0
	public bool get_useDragThreshold() { }
	// RVA: 0x2970D0 Offset: 0x2958D0 VA: 0x1802970D0
	public void set_useDragThreshold(bool value) { }
	// RVA: 0x2970E0 Offset: 0x2958E0 VA: 0x1802970E0
	public bool get_dragging() { }
	// RVA: 0x2970F0 Offset: 0x2958F0 VA: 0x1802970F0
	public void set_dragging(bool value) { }
	// RVA: 0x297100 Offset: 0x295900 VA: 0x180297100
	public PointerEventData.InputButton get_button() { }
	// RVA: 0x297110 Offset: 0x295910 VA: 0x180297110
	public void set_button(PointerEventData.InputButton value) { }
	// RVA: 0x297120 Offset: 0x295920 VA: 0x180297120
	public void .ctor(EventSystem eventSystem) { }
	// RVA: 0x2972C0 Offset: 0x295AC0 VA: 0x1802972C0
	public bool IsPointerMoving() { }
	// RVA: 0x2972F0 Offset: 0x295AF0 VA: 0x1802972F0
	public bool IsScrolling() { }
	// RVA: 0x297320 Offset: 0x295B20 VA: 0x180297320
	public Camera get_enterEventCamera() { }
	// RVA: 0x297400 Offset: 0x295C00 VA: 0x180297400
	public Camera get_pressEventCamera() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public GameObject get_pointerPress() { }
	// RVA: 0x2974F0 Offset: 0x295CF0 VA: 0x1802974F0
	public void set_pointerPress(GameObject value) { }
	// RVA: 0x2975B0 Offset: 0x295DB0 VA: 0x1802975B0 Slot: 3
	public override string ToString() { }
}

// Namespace: 
public enum PointerEventData.InputButton // TypeDefIndex: 2546
{
	// Fields
	public int value__; // 0x0
	public const PointerEventData.InputButton Left = 0; // 0x0
	public const PointerEventData.InputButton Right = 1; // 0x0
	public const PointerEventData.InputButton Middle = 2; // 0x0
}

// Namespace: 
public enum PointerEventData.FramePressState // TypeDefIndex: 2547
{
	// Fields
	public int value__; // 0x0
	public const PointerEventData.FramePressState Pressed = 0; // 0x0
	public const PointerEventData.FramePressState Released = 1; // 0x0
	public const PointerEventData.FramePressState PressedAndReleased = 2; // 0x0
	public const PointerEventData.FramePressState NotChanged = 3; // 0x0
}

// Namespace: UnityEngine.EventSystems
public interface IEventSystemHandler // TypeDefIndex: 2548
{}

// Namespace: UnityEngine.EventSystems
public interface IPointerEnterHandler : IEventSystemHandler // TypeDefIndex: 2549
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerEnter(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IPointerExitHandler : IEventSystemHandler // TypeDefIndex: 2550
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerExit(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IPointerDownHandler : IEventSystemHandler // TypeDefIndex: 2551
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerDown(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IPointerUpHandler : IEventSystemHandler // TypeDefIndex: 2552
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerUp(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IPointerClickHandler : IEventSystemHandler // TypeDefIndex: 2553
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnPointerClick(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IBeginDragHandler : IEventSystemHandler // TypeDefIndex: 2554
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnBeginDrag(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IInitializePotentialDragHandler : IEventSystemHandler // TypeDefIndex: 2555
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnInitializePotentialDrag(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IDragHandler : IEventSystemHandler // TypeDefIndex: 2556
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDrag(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IEndDragHandler : IEventSystemHandler // TypeDefIndex: 2557
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnEndDrag(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IDropHandler : IEventSystemHandler // TypeDefIndex: 2558
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDrop(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IScrollHandler : IEventSystemHandler // TypeDefIndex: 2559
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnScroll(PointerEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IUpdateSelectedHandler : IEventSystemHandler // TypeDefIndex: 2560
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnUpdateSelected(BaseEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface ISelectHandler : IEventSystemHandler // TypeDefIndex: 2561
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnSelect(BaseEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IDeselectHandler : IEventSystemHandler // TypeDefIndex: 2562
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnDeselect(BaseEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface IMoveHandler : IEventSystemHandler // TypeDefIndex: 2563
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnMove(AxisEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface ISubmitHandler : IEventSystemHandler // TypeDefIndex: 2564
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnSubmit(BaseEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public interface ICancelHandler : IEventSystemHandler // TypeDefIndex: 2565
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void OnCancel(BaseEventData eventData) { }
}

// Namespace: UnityEngine.EventSystems
public class EventSystem : UIBehaviour // TypeDefIndex: 2566
{
	// Fields
	private List<BaseInputModule> m_SystemInputModules; // 0x18
	private BaseInputModule m_CurrentInputModule; // 0x20
	private static List<EventSystem> m_EventSystems; // 0x0
	[FormerlySerializedAsAttribute] // RVA: 0x102D90 Offset: 0x102190 VA: 0x180102D90
	[SerializeField] // RVA: 0x102D90 Offset: 0x102190 VA: 0x180102D90
	private GameObject m_FirstSelected; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_sendNavigationEvents; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_DragThreshold; // 0x34
	private GameObject m_CurrentSelected; // 0x38
	private bool m_HasFocus; // 0x40
	private bool m_SelectionGuard; // 0x41
	private BaseEventData m_DummyData; // 0x48
	private static readonly Comparison<RaycastResult> s_RaycastComparer; // 0x8

	// Properties
	public static EventSystem current { get; set; }
	public bool sendNavigationEvents { get; set; }
	public int pixelDragThreshold { get; set; }
	public BaseInputModule currentInputModule { get; }
	public GameObject firstSelectedGameObject { get; set; }
	public GameObject currentSelectedGameObject { get; }
	[ObsoleteAttribute] // RVA: 0x102DC0 Offset: 0x1021C0 VA: 0x180102DC0
	public GameObject lastSelectedGameObject { get; }
	public bool isFocused { get; }
	public bool alreadySelecting { get; }
	private BaseEventData baseEventDataCache { get; }

	// Methods
	// RVA: 0x2072A0 Offset: 0x205AA0 VA: 0x1802072A0
	public static EventSystem get_current() { }
	// RVA: 0x207390 Offset: 0x205B90 VA: 0x180207390
	public static void set_current(EventSystem value) { }
	// RVA: 0x2074F0 Offset: 0x205CF0 VA: 0x1802074F0
	public bool get_sendNavigationEvents() { }
	// RVA: 0x207500 Offset: 0x205D00 VA: 0x180207500
	public void set_sendNavigationEvents(bool value) { }
	// RVA: 0x1FEF80 Offset: 0x1FD780 VA: 0x1801FEF80
	public int get_pixelDragThreshold() { }
	// RVA: 0x1FEF90 Offset: 0x1FD790 VA: 0x1801FEF90
	public void set_pixelDragThreshold(int value) { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public BaseInputModule get_currentInputModule() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public GameObject get_firstSelectedGameObject() { }
	// RVA: 0x207510 Offset: 0x205D10 VA: 0x180207510
	public void set_firstSelectedGameObject(GameObject value) { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0
	public GameObject get_currentSelectedGameObject() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	public GameObject get_lastSelectedGameObject() { }
	// RVA: 0x207520 Offset: 0x205D20 VA: 0x180207520
	public bool get_isFocused() { }
	// RVA: 0x207530 Offset: 0x205D30 VA: 0x180207530
	protected void .ctor() { }
	// RVA: 0x2075E0 Offset: 0x205DE0 VA: 0x1802075E0
	public void UpdateModules() { }
	// RVA: 0x207750 Offset: 0x205F50 VA: 0x180207750
	public bool get_alreadySelecting() { }
	// RVA: 0x207760 Offset: 0x205F60 VA: 0x180207760
	public void SetSelectedGameObject(GameObject selected, BaseEventData pointer) { }
	// RVA: 0x2079F0 Offset: 0x2061F0 VA: 0x1802079F0
	private BaseEventData get_baseEventDataCache() { }
	// RVA: 0x207A80 Offset: 0x206280 VA: 0x180207A80
	public void SetSelectedGameObject(GameObject selected) { }
	// RVA: 0x207B30 Offset: 0x206330 VA: 0x180207B30
	private static int RaycastComparer(RaycastResult lhs, RaycastResult rhs) { }
	// RVA: 0x2080A0 Offset: 0x2068A0 VA: 0x1802080A0
	public void RaycastAll(PointerEventData eventData, List<RaycastResult> raycastResults) { }
	// RVA: 0x208330 Offset: 0x206B30 VA: 0x180208330
	public bool IsPointerOverGameObject() { }
	// RVA: 0x208410 Offset: 0x206C10 VA: 0x180208410
	public bool IsPointerOverGameObject(int pointerId) { }
	// RVA: 0x208500 Offset: 0x206D00 VA: 0x180208500 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x2085C0 Offset: 0x206DC0 VA: 0x1802085C0 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x208710 Offset: 0x206F10 VA: 0x180208710
	private void TickModules() { }
	// RVA: 0x208850 Offset: 0x207050 VA: 0x180208850 Slot: 17
	protected virtual void OnApplicationFocus(bool hasFocus) { }
	// RVA: 0x208860 Offset: 0x207060 VA: 0x180208860 Slot: 18
	protected virtual void Update() { }
	// RVA: 0x208C50 Offset: 0x207450 VA: 0x180208C50
	private void ChangeEventModule(BaseInputModule module) { }
	// RVA: 0x208DB0 Offset: 0x2075B0 VA: 0x180208DB0 Slot: 3
	public override string ToString() { }
	// RVA: 0x208F50 Offset: 0x207750 VA: 0x180208F50
	private static void .cctor() { }
}

// Namespace: UnityEngine.EventSystems
public class EventTrigger : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IInitializePotentialDragHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler // TypeDefIndex: 2567
{
	// Fields
	[SerializeField] // RVA: 0x102DF0 Offset: 0x1021F0 VA: 0x180102DF0
	[FormerlySerializedAsAttribute] // RVA: 0x102DF0 Offset: 0x1021F0 VA: 0x180102DF0
	private List<EventTrigger.Entry> m_Delegates; // 0x18

	// Properties
	[ObsoleteAttribute] // RVA: 0x102E20 Offset: 0x102220 VA: 0x180102E20
	public List<EventTrigger.Entry> delegates { get; set; }
	public List<EventTrigger.Entry> triggers { get; set; }

	// Methods
	// RVA: 0x209020 Offset: 0x207820 VA: 0x180209020
	public List<EventTrigger.Entry> get_delegates() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_delegates(List<EventTrigger.Entry> value) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
	// RVA: 0x209030 Offset: 0x207830 VA: 0x180209030
	public List<EventTrigger.Entry> get_triggers() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_triggers(List<EventTrigger.Entry> value) { }
	// RVA: 0x2090D0 Offset: 0x2078D0 VA: 0x1802090D0
	private void Execute(EventTriggerType id, BaseEventData eventData) { }
	// RVA: 0x2091F0 Offset: 0x2079F0 VA: 0x1802091F0 Slot: 21
	public virtual void OnPointerEnter(PointerEventData eventData) { }
	// RVA: 0x209200 Offset: 0x207A00 VA: 0x180209200 Slot: 22
	public virtual void OnPointerExit(PointerEventData eventData) { }
	// RVA: 0x209210 Offset: 0x207A10 VA: 0x180209210 Slot: 23
	public virtual void OnDrag(PointerEventData eventData) { }
	// RVA: 0x209220 Offset: 0x207A20 VA: 0x180209220 Slot: 24
	public virtual void OnDrop(PointerEventData eventData) { }
	// RVA: 0x209230 Offset: 0x207A30 VA: 0x180209230 Slot: 25
	public virtual void OnPointerDown(PointerEventData eventData) { }
	// RVA: 0x209240 Offset: 0x207A40 VA: 0x180209240 Slot: 26
	public virtual void OnPointerUp(PointerEventData eventData) { }
	// RVA: 0x209250 Offset: 0x207A50 VA: 0x180209250 Slot: 27
	public virtual void OnPointerClick(PointerEventData eventData) { }
	// RVA: 0x209260 Offset: 0x207A60 VA: 0x180209260 Slot: 28
	public virtual void OnSelect(BaseEventData eventData) { }
	// RVA: 0x209270 Offset: 0x207A70 VA: 0x180209270 Slot: 29
	public virtual void OnDeselect(BaseEventData eventData) { }
	// RVA: 0x209280 Offset: 0x207A80 VA: 0x180209280 Slot: 30
	public virtual void OnScroll(PointerEventData eventData) { }
	// RVA: 0x209290 Offset: 0x207A90 VA: 0x180209290 Slot: 31
	public virtual void OnMove(AxisEventData eventData) { }
	// RVA: 0x2092A0 Offset: 0x207AA0 VA: 0x1802092A0 Slot: 32
	public virtual void OnUpdateSelected(BaseEventData eventData) { }
	// RVA: 0x2092B0 Offset: 0x207AB0 VA: 0x1802092B0 Slot: 33
	public virtual void OnInitializePotentialDrag(PointerEventData eventData) { }
	// RVA: 0x2092C0 Offset: 0x207AC0 VA: 0x1802092C0 Slot: 34
	public virtual void OnBeginDrag(PointerEventData eventData) { }
	// RVA: 0x2092D0 Offset: 0x207AD0 VA: 0x1802092D0 Slot: 35
	public virtual void OnEndDrag(PointerEventData eventData) { }
	// RVA: 0x2092E0 Offset: 0x207AE0 VA: 0x1802092E0 Slot: 36
	public virtual void OnSubmit(BaseEventData eventData) { }
	// RVA: 0x2092F0 Offset: 0x207AF0 VA: 0x1802092F0 Slot: 37
	public virtual void OnCancel(BaseEventData eventData) { }
}

// Namespace: 
[Serializable]
public class EventTrigger.TriggerEvent : UnityEvent<BaseEventData> // TypeDefIndex: 2568
{
	// Methods
	// RVA: 0x4DADD0 Offset: 0x4D95D0 VA: 0x1804DADD0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class EventTrigger.Entry // TypeDefIndex: 2569
{
	// Fields
	public EventTriggerType eventID; // 0x10
	public EventTrigger.TriggerEvent callback; // 0x18

	// Methods
	// RVA: 0x4DACD0 Offset: 0x4D94D0 VA: 0x1804DACD0
	public void .ctor() { }
}

// Namespace: UnityEngine.EventSystems
public enum EventTriggerType // TypeDefIndex: 2570
{
	// Fields
	public int value__; // 0x0
	public const EventTriggerType PointerEnter = 0; // 0x0
	public const EventTriggerType PointerExit = 1; // 0x0
	public const EventTriggerType PointerDown = 2; // 0x0
	public const EventTriggerType PointerUp = 3; // 0x0
	public const EventTriggerType PointerClick = 4; // 0x0
	public const EventTriggerType Drag = 5; // 0x0
	public const EventTriggerType Drop = 6; // 0x0
	public const EventTriggerType Scroll = 7; // 0x0
	public const EventTriggerType UpdateSelected = 8; // 0x0
	public const EventTriggerType Select = 9; // 0x0
	public const EventTriggerType Deselect = 10; // 0x0
	public const EventTriggerType Move = 11; // 0x0
	public const EventTriggerType InitializePotentialDrag = 12; // 0x0
	public const EventTriggerType BeginDrag = 13; // 0x0
	public const EventTriggerType EndDrag = 14; // 0x0
	public const EventTriggerType Submit = 15; // 0x0
	public const EventTriggerType Cancel = 16; // 0x0
}

// Namespace: UnityEngine.EventSystems
public static class ExecuteEvents // TypeDefIndex: 2571
{
	// Fields
	private static readonly ExecuteEvents.EventFunction<IPointerEnterHandler> s_PointerEnterHandler; // 0x0
	private static readonly ExecuteEvents.EventFunction<IPointerExitHandler> s_PointerExitHandler; // 0x8
	private static readonly ExecuteEvents.EventFunction<IPointerDownHandler> s_PointerDownHandler; // 0x10
	private static readonly ExecuteEvents.EventFunction<IPointerUpHandler> s_PointerUpHandler; // 0x18
	private static readonly ExecuteEvents.EventFunction<IPointerClickHandler> s_PointerClickHandler; // 0x20
	private static readonly ExecuteEvents.EventFunction<IInitializePotentialDragHandler> s_InitializePotentialDragHandler; // 0x28
	private static readonly ExecuteEvents.EventFunction<IBeginDragHandler> s_BeginDragHandler; // 0x30
	private static readonly ExecuteEvents.EventFunction<IDragHandler> s_DragHandler; // 0x38
	private static readonly ExecuteEvents.EventFunction<IEndDragHandler> s_EndDragHandler; // 0x40
	private static readonly ExecuteEvents.EventFunction<IDropHandler> s_DropHandler; // 0x48
	private static readonly ExecuteEvents.EventFunction<IScrollHandler> s_ScrollHandler; // 0x50
	private static readonly ExecuteEvents.EventFunction<IUpdateSelectedHandler> s_UpdateSelectedHandler; // 0x58
	private static readonly ExecuteEvents.EventFunction<ISelectHandler> s_SelectHandler; // 0x60
	private static readonly ExecuteEvents.EventFunction<IDeselectHandler> s_DeselectHandler; // 0x68
	private static readonly ExecuteEvents.EventFunction<IMoveHandler> s_MoveHandler; // 0x70
	private static readonly ExecuteEvents.EventFunction<ISubmitHandler> s_SubmitHandler; // 0x78
	private static readonly ExecuteEvents.EventFunction<ICancelHandler> s_CancelHandler; // 0x80
	private static readonly ObjectPool<List<IEventSystemHandler>> s_HandlerListPool; // 0x88
	private static readonly List<Transform> s_InternalTransformList; // 0x90

	// Properties
	public static ExecuteEvents.EventFunction<IPointerEnterHandler> pointerEnterHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerExitHandler> pointerExitHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerDownHandler> pointerDownHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerUpHandler> pointerUpHandler { get; }
	public static ExecuteEvents.EventFunction<IPointerClickHandler> pointerClickHandler { get; }
	public static ExecuteEvents.EventFunction<IInitializePotentialDragHandler> initializePotentialDrag { get; }
	public static ExecuteEvents.EventFunction<IBeginDragHandler> beginDragHandler { get; }
	public static ExecuteEvents.EventFunction<IDragHandler> dragHandler { get; }
	public static ExecuteEvents.EventFunction<IEndDragHandler> endDragHandler { get; }
	public static ExecuteEvents.EventFunction<IDropHandler> dropHandler { get; }
	public static ExecuteEvents.EventFunction<IScrollHandler> scrollHandler { get; }
	public static ExecuteEvents.EventFunction<IUpdateSelectedHandler> updateSelectedHandler { get; }
	public static ExecuteEvents.EventFunction<ISelectHandler> selectHandler { get; }
	public static ExecuteEvents.EventFunction<IDeselectHandler> deselectHandler { get; }
	public static ExecuteEvents.EventFunction<IMoveHandler> moveHandler { get; }
	public static ExecuteEvents.EventFunction<ISubmitHandler> submitHandler { get; }
	public static ExecuteEvents.EventFunction<ICancelHandler> cancelHandler { get; }

	// Methods
	// RVA: 0x533530 Offset: 0x531D30 VA: 0x180533530
	public static T ValidateEventData(BaseEventData data) { }
	// RVA: 0x209300 Offset: 0x207B00 VA: 0x180209300
	private static void Execute(IPointerEnterHandler handler, BaseEventData eventData) { }
	// RVA: 0x2093C0 Offset: 0x207BC0 VA: 0x1802093C0
	private static void Execute(IPointerExitHandler handler, BaseEventData eventData) { }
	// RVA: 0x209480 Offset: 0x207C80 VA: 0x180209480
	private static void Execute(IPointerDownHandler handler, BaseEventData eventData) { }
	// RVA: 0x209540 Offset: 0x207D40 VA: 0x180209540
	private static void Execute(IPointerUpHandler handler, BaseEventData eventData) { }
	// RVA: 0x209600 Offset: 0x207E00 VA: 0x180209600
	private static void Execute(IPointerClickHandler handler, BaseEventData eventData) { }
	// RVA: 0x2096C0 Offset: 0x207EC0 VA: 0x1802096C0
	private static void Execute(IInitializePotentialDragHandler handler, BaseEventData eventData) { }
	// RVA: 0x209780 Offset: 0x207F80 VA: 0x180209780
	private static void Execute(IBeginDragHandler handler, BaseEventData eventData) { }
	// RVA: 0x209840 Offset: 0x208040 VA: 0x180209840
	private static void Execute(IDragHandler handler, BaseEventData eventData) { }
	// RVA: 0x209900 Offset: 0x208100 VA: 0x180209900
	private static void Execute(IEndDragHandler handler, BaseEventData eventData) { }
	// RVA: 0x2099C0 Offset: 0x2081C0 VA: 0x1802099C0
	private static void Execute(IDropHandler handler, BaseEventData eventData) { }
	// RVA: 0x209A80 Offset: 0x208280 VA: 0x180209A80
	private static void Execute(IScrollHandler handler, BaseEventData eventData) { }
	// RVA: 0x209B40 Offset: 0x208340 VA: 0x180209B40
	private static void Execute(IUpdateSelectedHandler handler, BaseEventData eventData) { }
	// RVA: 0x209BE0 Offset: 0x2083E0 VA: 0x180209BE0
	private static void Execute(ISelectHandler handler, BaseEventData eventData) { }
	// RVA: 0x209C80 Offset: 0x208480 VA: 0x180209C80
	private static void Execute(IDeselectHandler handler, BaseEventData eventData) { }
	// RVA: 0x209D20 Offset: 0x208520 VA: 0x180209D20
	private static void Execute(IMoveHandler handler, BaseEventData eventData) { }
	// RVA: 0x209E40 Offset: 0x208640 VA: 0x180209E40
	private static void Execute(ISubmitHandler handler, BaseEventData eventData) { }
	// RVA: 0x209EE0 Offset: 0x2086E0 VA: 0x180209EE0
	private static void Execute(ICancelHandler handler, BaseEventData eventData) { }
	// RVA: 0x209F80 Offset: 0x208780 VA: 0x180209F80
	public static ExecuteEvents.EventFunction<IPointerEnterHandler> get_pointerEnterHandler() { }
	// RVA: 0x20A020 Offset: 0x208820 VA: 0x18020A020
	public static ExecuteEvents.EventFunction<IPointerExitHandler> get_pointerExitHandler() { }
	// RVA: 0x20A0C0 Offset: 0x2088C0 VA: 0x18020A0C0
	public static ExecuteEvents.EventFunction<IPointerDownHandler> get_pointerDownHandler() { }
	// RVA: 0x20A160 Offset: 0x208960 VA: 0x18020A160
	public static ExecuteEvents.EventFunction<IPointerUpHandler> get_pointerUpHandler() { }
	// RVA: 0x20A200 Offset: 0x208A00 VA: 0x18020A200
	public static ExecuteEvents.EventFunction<IPointerClickHandler> get_pointerClickHandler() { }
	// RVA: 0x20A2A0 Offset: 0x208AA0 VA: 0x18020A2A0
	public static ExecuteEvents.EventFunction<IInitializePotentialDragHandler> get_initializePotentialDrag() { }
	// RVA: 0x20A340 Offset: 0x208B40 VA: 0x18020A340
	public static ExecuteEvents.EventFunction<IBeginDragHandler> get_beginDragHandler() { }
	// RVA: 0x20A3E0 Offset: 0x208BE0 VA: 0x18020A3E0
	public static ExecuteEvents.EventFunction<IDragHandler> get_dragHandler() { }
	// RVA: 0x20A480 Offset: 0x208C80 VA: 0x18020A480
	public static ExecuteEvents.EventFunction<IEndDragHandler> get_endDragHandler() { }
	// RVA: 0x20A520 Offset: 0x208D20 VA: 0x18020A520
	public static ExecuteEvents.EventFunction<IDropHandler> get_dropHandler() { }
	// RVA: 0x20A5C0 Offset: 0x208DC0 VA: 0x18020A5C0
	public static ExecuteEvents.EventFunction<IScrollHandler> get_scrollHandler() { }
	// RVA: 0x20A660 Offset: 0x208E60 VA: 0x18020A660
	public static ExecuteEvents.EventFunction<IUpdateSelectedHandler> get_updateSelectedHandler() { }
	// RVA: 0x20A700 Offset: 0x208F00 VA: 0x18020A700
	public static ExecuteEvents.EventFunction<ISelectHandler> get_selectHandler() { }
	// RVA: 0x20A7A0 Offset: 0x208FA0 VA: 0x18020A7A0
	public static ExecuteEvents.EventFunction<IDeselectHandler> get_deselectHandler() { }
	// RVA: 0x20A840 Offset: 0x209040 VA: 0x18020A840
	public static ExecuteEvents.EventFunction<IMoveHandler> get_moveHandler() { }
	// RVA: 0x20A8E0 Offset: 0x2090E0 VA: 0x18020A8E0
	public static ExecuteEvents.EventFunction<ISubmitHandler> get_submitHandler() { }
	// RVA: 0x20A980 Offset: 0x209180 VA: 0x18020A980
	public static ExecuteEvents.EventFunction<ICancelHandler> get_cancelHandler() { }
	// RVA: 0x20AA20 Offset: 0x209220 VA: 0x18020AA20
	private static void GetEventChain(GameObject root, IList<Transform> eventChain) { }
	// RVA: 0x532A40 Offset: 0x531240 VA: 0x180532A40
	public static bool Execute(GameObject target, BaseEventData eventData, ExecuteEvents.EventFunction<T> functor) { }
	// RVA: 0x532DB0 Offset: 0x5315B0 VA: 0x180532DB0
	public static GameObject ExecuteHierarchy(GameObject root, BaseEventData eventData, ExecuteEvents.EventFunction<T> callbackFunction) { }
	// RVA: 0x5333E0 Offset: 0x531BE0 VA: 0x1805333E0
	private static bool ShouldSendToComponent(Component component) { }
	// RVA: 0x533160 Offset: 0x531960 VA: 0x180533160
	private static void GetEventList(GameObject go, IList<IEventSystemHandler> results) { }
	// RVA: 0x532920 Offset: 0x531120 VA: 0x180532920
	public static bool CanHandleEvent(GameObject go) { }
	// RVA: 0x532F70 Offset: 0x531770 VA: 0x180532F70
	public static GameObject GetEventHandler(GameObject root) { }
	// RVA: 0x20AC40 Offset: 0x209440 VA: 0x18020AC40
	private static void .cctor() { }
}

// Namespace: 
public sealed class ExecuteEvents.EventFunction<T1> : MulticastDelegate // TypeDefIndex: 2572
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x7E9980 Offset: 0x7E8180 VA: 0x1807E9980 Slot: 12
	public virtual void Invoke(T1 handler, BaseEventData eventData) { }
	// RVA: 0x261F90 Offset: 0x260790 VA: 0x180261F90 Slot: 13
	public virtual IAsyncResult BeginInvoke(T1 handler, BaseEventData eventData, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[Serializable]
private sealed class ExecuteEvents.<>c // TypeDefIndex: 2573
{
	// Fields
	public static readonly ExecuteEvents.<>c <>9; // 0xA15984

	// Methods
	// RVA: 0x4DAE50 Offset: 0x4D9650 VA: 0x1804DAE50
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x4DAED0 Offset: 0x4D96D0 VA: 0x1804DAED0
	internal void <.cctor>b__79_0(List<IEventSystemHandler> l) { }
}

// Namespace: UnityEngine.EventSystems
public class BaseInput : UIBehaviour // TypeDefIndex: 2574
{
	// Properties
	public virtual string compositionString { get; }
	public virtual IMECompositionMode imeCompositionMode { get; set; }
	public virtual Vector2 compositionCursorPos { get; set; }
	public virtual bool mousePresent { get; }
	public virtual Vector2 mousePosition { get; }
	public virtual Vector2 mouseScrollDelta { get; }
	public virtual bool touchSupported { get; }
	public virtual int touchCount { get; }

	// Methods
	// RVA: 0x1FC420 Offset: 0x1FAC20 VA: 0x1801FC420 Slot: 17
	public virtual string get_compositionString() { }
	// RVA: 0x1FC470 Offset: 0x1FAC70 VA: 0x1801FC470 Slot: 18
	public virtual IMECompositionMode get_imeCompositionMode() { }
	// RVA: 0x1FC4C0 Offset: 0x1FACC0 VA: 0x1801FC4C0 Slot: 19
	public virtual void set_imeCompositionMode(IMECompositionMode value) { }
	// RVA: 0x1FC510 Offset: 0x1FAD10 VA: 0x1801FC510 Slot: 20
	public virtual Vector2 get_compositionCursorPos() { }
	// RVA: 0x1FC570 Offset: 0x1FAD70 VA: 0x1801FC570 Slot: 21
	public virtual void set_compositionCursorPos(Vector2 value) { }
	// RVA: 0x1FC5C0 Offset: 0x1FADC0 VA: 0x1801FC5C0 Slot: 22
	public virtual bool get_mousePresent() { }
	// RVA: 0x1FC610 Offset: 0x1FAE10 VA: 0x1801FC610 Slot: 23
	public virtual bool GetMouseButtonDown(int button) { }
	// RVA: 0x1FC660 Offset: 0x1FAE60 VA: 0x1801FC660 Slot: 24
	public virtual bool GetMouseButtonUp(int button) { }
	// RVA: 0x1FC6B0 Offset: 0x1FAEB0 VA: 0x1801FC6B0 Slot: 25
	public virtual bool GetMouseButton(int button) { }
	// RVA: 0x1FC700 Offset: 0x1FAF00 VA: 0x1801FC700 Slot: 26
	public virtual Vector2 get_mousePosition() { }
	// RVA: 0x1FC710 Offset: 0x1FAF10 VA: 0x1801FC710 Slot: 27
	public virtual Vector2 get_mouseScrollDelta() { }
	// RVA: 0x1FC770 Offset: 0x1FAF70 VA: 0x1801FC770 Slot: 28
	public virtual bool get_touchSupported() { }
	// RVA: 0x1FC7C0 Offset: 0x1FAFC0 VA: 0x1801FC7C0 Slot: 29
	public virtual int get_touchCount() { }
	// RVA: 0x1FC810 Offset: 0x1FB010 VA: 0x1801FC810 Slot: 30
	public virtual Touch GetTouch(int index) { }
	// RVA: 0x1FC8C0 Offset: 0x1FB0C0 VA: 0x1801FC8C0 Slot: 31
	public virtual float GetAxisRaw(string axisName) { }
	// RVA: 0x1FC910 Offset: 0x1FB110 VA: 0x1801FC910 Slot: 32
	public virtual bool GetButtonDown(string buttonName) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: UnityEngine.EventSystems
[RequireComponent] // RVA: 0x102E50 Offset: 0x102250 VA: 0x180102E50
public abstract class BaseInputModule : UIBehaviour // TypeDefIndex: 2575
{
	// Fields
	protected List<RaycastResult> m_RaycastResultCache; // 0x18
	private AxisEventData m_AxisEventData; // 0x20
	private EventSystem m_EventSystem; // 0x28
	private BaseEventData m_BaseEventData; // 0x30
	protected BaseInput m_InputOverride; // 0x38
	private BaseInput m_DefaultInput; // 0x40

	// Properties
	public BaseInput input { get; }
	public BaseInput inputOverride { get; set; }
	protected EventSystem eventSystem { get; }

	// Methods
	// RVA: 0x1FC960 Offset: 0x1FB160 VA: 0x1801FC960
	public BaseInput get_input() { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0
	public BaseInput get_inputOverride() { }
	// RVA: 0x1FCBF0 Offset: 0x1FB3F0 VA: 0x1801FCBF0
	public void set_inputOverride(BaseInput value) { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	protected EventSystem get_eventSystem() { }
	// RVA: 0x1FCC00 Offset: 0x1FB400 VA: 0x1801FCC00 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x1FCC90 Offset: 0x1FB490 VA: 0x1801FCC90 Slot: 7
	protected override void OnDisable() { }
	// RVA: -1 Offset: -1 Slot: 17
	public abstract void Process() { }
	// RVA: 0x1FCCB0 Offset: 0x1FB4B0 VA: 0x1801FCCB0
	protected static RaycastResult FindFirstRaycast(List<RaycastResult> candidates) { }
	// RVA: 0x1FCE30 Offset: 0x1FB630 VA: 0x1801FCE30
	protected static MoveDirection DetermineMoveDirection(float x, float y) { }
	// RVA: 0x1FCE40 Offset: 0x1FB640 VA: 0x1801FCE40
	protected static MoveDirection DetermineMoveDirection(float x, float y, float deadZone) { }
	// RVA: 0x1FCF50 Offset: 0x1FB750 VA: 0x1801FCF50
	protected static GameObject FindCommonRoot(GameObject g1, GameObject g2) { }
	// RVA: 0x1FD1C0 Offset: 0x1FB9C0 VA: 0x1801FD1C0
	protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget) { }
	// RVA: 0x1FD7A0 Offset: 0x1FBFA0 VA: 0x1801FD7A0 Slot: 18
	protected virtual AxisEventData GetAxisEventData(float x, float y, float moveDeadZone) { }
	// RVA: 0x1FD970 Offset: 0x1FC170 VA: 0x1801FD970 Slot: 19
	protected virtual BaseEventData GetBaseEventData() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 20
	public virtual bool IsPointerOverGameObject(int pointerId) { }
	// RVA: 0x1FDA30 Offset: 0x1FC230 VA: 0x1801FDA30 Slot: 21
	public virtual bool ShouldActivateModule() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 22
	public virtual void DeactivateModule() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 23
	public virtual void ActivateModule() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 24
	public virtual void UpdateModule() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 25
	public virtual bool IsModuleSupported() { }
	// RVA: 0x1FDB30 Offset: 0x1FC330 VA: 0x1801FDB30
	protected void .ctor() { }
}

// Namespace: UnityEngine.EventSystems
public abstract class PointerInputModule : BaseInputModule // TypeDefIndex: 2576
{
	// Fields
	public const int kMouseLeftId = -1; // 0x0
	public const int kMouseRightId = -2; // 0x0
	public const int kMouseMiddleId = -3; // 0x0
	public const int kFakeTouchesId = -4; // 0x0
	protected Dictionary<int, PointerEventData> m_PointerData; // 0x48
	private readonly PointerInputModule.MouseState m_MouseState; // 0x50

	// Methods
	// RVA: 0x297A40 Offset: 0x296240 VA: 0x180297A40
	protected bool GetPointerData(int id, out PointerEventData data, bool create) { }
	// RVA: 0x297D30 Offset: 0x296530 VA: 0x180297D30
	protected void RemovePointerData(PointerEventData data) { }
	// RVA: 0x297DD0 Offset: 0x2965D0 VA: 0x180297DD0
	protected PointerEventData GetTouchPointerEventData(Touch input, out bool pressed, out bool released) { }
	// RVA: 0x2980C0 Offset: 0x2968C0 VA: 0x1802980C0
	protected void CopyFromTo(PointerEventData from, PointerEventData to) { }
	// RVA: 0x298190 Offset: 0x296990 VA: 0x180298190
	protected PointerEventData.FramePressState StateForMouseButton(int buttonId) { }
	// RVA: 0x298250 Offset: 0x296A50 VA: 0x180298250 Slot: 26
	protected virtual PointerInputModule.MouseState GetMousePointerEventData() { }
	// RVA: 0x298270 Offset: 0x296A70 VA: 0x180298270 Slot: 27
	protected virtual PointerInputModule.MouseState GetMousePointerEventData(int id) { }
	// RVA: 0x298860 Offset: 0x297060 VA: 0x180298860
	protected PointerEventData GetLastPointerEventData(int id) { }
	// RVA: 0x298890 Offset: 0x297090 VA: 0x180298890
	private static bool ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, float threshold, bool useDragThreshold) { }
	// RVA: 0x298970 Offset: 0x297170 VA: 0x180298970 Slot: 28
	protected virtual void ProcessMove(PointerEventData pointerEvent) { }
	// RVA: 0x298A00 Offset: 0x297200 VA: 0x180298A00 Slot: 29
	protected virtual void ProcessDrag(PointerEventData pointerEvent) { }
	// RVA: 0x298EA0 Offset: 0x2976A0 VA: 0x180298EA0 Slot: 20
	public override bool IsPointerOverGameObject(int pointerId) { }
	// RVA: 0x298F90 Offset: 0x297790 VA: 0x180298F90
	protected void ClearSelection() { }
	// RVA: 0x299190 Offset: 0x297990 VA: 0x180299190 Slot: 3
	public override string ToString() { }
	// RVA: 0x299410 Offset: 0x297C10 VA: 0x180299410
	protected void DeselectIfSelectionChanged(GameObject currentOverGo, BaseEventData pointerEvent) { }
	// RVA: 0x299530 Offset: 0x297D30 VA: 0x180299530
	protected void .ctor() { }
}

// Namespace: 
protected class PointerInputModule.ButtonState // TypeDefIndex: 2577
{
	// Fields
	private PointerEventData.InputButton m_Button; // 0x10
	private PointerInputModule.MouseButtonEventData m_EventData; // 0x18

	// Properties
	public PointerInputModule.MouseButtonEventData eventData { get; set; }
	public PointerEventData.InputButton button { get; set; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public PointerInputModule.MouseButtonEventData get_eventData() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_eventData(PointerInputModule.MouseButtonEventData value) { }
	// RVA: 0x198900 Offset: 0x197100 VA: 0x180198900
	public PointerEventData.InputButton get_button() { }
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void set_button(PointerEventData.InputButton value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
protected class PointerInputModule.MouseState // TypeDefIndex: 2578
{
	// Fields
	private List<PointerInputModule.ButtonState> m_TrackedButtons; // 0x10

	// Methods
	// RVA: 0x4DC860 Offset: 0x4DB060 VA: 0x1804DC860
	public PointerInputModule.ButtonState GetButtonState(PointerEventData.InputButton button) { }
	// RVA: 0x4DC980 Offset: 0x4DB180 VA: 0x1804DC980
	public void SetButtonState(PointerEventData.InputButton button, PointerEventData.FramePressState stateForMouseButton, PointerEventData data) { }
	// RVA: 0x4DC9D0 Offset: 0x4DB1D0 VA: 0x1804DC9D0
	public void .ctor() { }
}

// Namespace: 
public class PointerInputModule.MouseButtonEventData // TypeDefIndex: 2579
{
	// Fields
	public PointerEventData.FramePressState buttonState; // 0x10
	public PointerEventData buttonData; // 0x18

	// Methods
	// RVA: 0x4DC830 Offset: 0x4DB030 VA: 0x1804DC830
	public bool PressedThisFrame() { }
	// RVA: 0x4DC850 Offset: 0x4DB050 VA: 0x1804DC850
	public bool ReleasedThisFrame() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: UnityEngine.EventSystems
public class StandaloneInputModule : PointerInputModule // TypeDefIndex: 2580
{
	// Fields
	private float m_PrevActionTime; // 0x58
	private Vector2 m_LastMoveVector; // 0x5C
	private int m_ConsecutiveMoveCount; // 0x64
	private Vector2 m_LastMousePosition; // 0x68
	private Vector2 m_MousePosition; // 0x70
	private GameObject m_CurrentFocusedGameObject; // 0x78
	private PointerEventData m_InputPointerEvent; // 0x80
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_HorizontalAxis; // 0x88
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_VerticalAxis; // 0x90
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_SubmitButton; // 0x98
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_CancelButton; // 0xA0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_InputActionsPerSecond; // 0xA8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_RepeatDelay; // 0xAC
	[FormerlySerializedAsAttribute] // RVA: 0x102ED0 Offset: 0x1022D0 VA: 0x180102ED0
	[SerializeField] // RVA: 0x102ED0 Offset: 0x1022D0 VA: 0x180102ED0
	private bool m_ForceModuleActive; // 0xB0

	// Properties
	[ObsoleteAttribute] // RVA: 0x102F30 Offset: 0x102330 VA: 0x180102F30
	public StandaloneInputModule.InputMode inputMode { get; }
	[ObsoleteAttribute] // RVA: 0x102F60 Offset: 0x102360 VA: 0x180102F60
	public bool allowActivationOnMobileDevice { get; set; }
	public bool forceModuleActive { get; set; }
	public float inputActionsPerSecond { get; set; }
	public float repeatDelay { get; set; }
	public string horizontalAxis { get; set; }
	public string verticalAxis { get; set; }
	public string submitButton { get; set; }
	public string cancelButton { get; set; }

	// Methods
	// RVA: 0x4CFAC0 Offset: 0x4CE2C0 VA: 0x1804CFAC0
	protected void .ctor() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	public StandaloneInputModule.InputMode get_inputMode() { }
	// RVA: 0x4CFB80 Offset: 0x4CE380 VA: 0x1804CFB80
	public bool get_allowActivationOnMobileDevice() { }
	// RVA: 0x4CFB90 Offset: 0x4CE390 VA: 0x1804CFB90
	public void set_allowActivationOnMobileDevice(bool value) { }
	// RVA: 0x4CFB80 Offset: 0x4CE380 VA: 0x1804CFB80
	public bool get_forceModuleActive() { }
	// RVA: 0x4CFB90 Offset: 0x4CE390 VA: 0x1804CFB90
	public void set_forceModuleActive(bool value) { }
	// RVA: 0x4CFBA0 Offset: 0x4CE3A0 VA: 0x1804CFBA0
	public float get_inputActionsPerSecond() { }
	// RVA: 0x4CFBB0 Offset: 0x4CE3B0 VA: 0x1804CFBB0
	public void set_inputActionsPerSecond(float value) { }
	// RVA: 0x4CFBC0 Offset: 0x4CE3C0 VA: 0x1804CFBC0
	public float get_repeatDelay() { }
	// RVA: 0x4CFBD0 Offset: 0x4CE3D0 VA: 0x1804CFBD0
	public void set_repeatDelay(float value) { }
	// RVA: 0x262A60 Offset: 0x261260 VA: 0x180262A60
	public string get_horizontalAxis() { }
	// RVA: 0x3CE680 Offset: 0x3CCE80 VA: 0x1803CE680
	public void set_horizontalAxis(string value) { }
	// RVA: 0x2C01B0 Offset: 0x2BE9B0 VA: 0x1802C01B0
	public string get_verticalAxis() { }
	// RVA: 0x2C01C0 Offset: 0x2BE9C0 VA: 0x1802C01C0
	public void set_verticalAxis(string value) { }
	// RVA: 0x4CFBE0 Offset: 0x4CE3E0 VA: 0x1804CFBE0
	public string get_submitButton() { }
	// RVA: 0x4CFBF0 Offset: 0x4CE3F0 VA: 0x1804CFBF0
	public void set_submitButton(string value) { }
	// RVA: 0x4CFC00 Offset: 0x4CE400 VA: 0x1804CFC00
	public string get_cancelButton() { }
	// RVA: 0x4CFC10 Offset: 0x4CE410 VA: 0x1804CFC10
	public void set_cancelButton(string value) { }
	// RVA: 0x4CFC20 Offset: 0x4CE420 VA: 0x1804CFC20
	private bool ShouldIgnoreEventsOnNoFocus() { }
	// RVA: 0x4CFC70 Offset: 0x4CE470 VA: 0x1804CFC70 Slot: 24
	public override void UpdateModule() { }
	// RVA: 0x4CFE30 Offset: 0x4CE630 VA: 0x1804CFE30
	private void ReleaseMouse(PointerEventData pointerEvent, GameObject currentOverGo) { }
	// RVA: 0x4D0110 Offset: 0x4CE910 VA: 0x1804D0110 Slot: 25
	public override bool IsModuleSupported() { }
	// RVA: 0x4D0180 Offset: 0x4CE980 VA: 0x1804D0180 Slot: 21
	public override bool ShouldActivateModule() { }
	// RVA: 0x4D0430 Offset: 0x4CEC30 VA: 0x1804D0430 Slot: 23
	public override void ActivateModule() { }
	// RVA: 0x4D0610 Offset: 0x4CEE10 VA: 0x1804D0610 Slot: 22
	public override void DeactivateModule() { }
	// RVA: 0x4D0620 Offset: 0x4CEE20 VA: 0x1804D0620 Slot: 17
	public override void Process() { }
	// RVA: 0x4D08B0 Offset: 0x4CF0B0 VA: 0x1804D08B0
	private bool ProcessTouchEvents() { }
	// RVA: 0x4D0A60 Offset: 0x4CF260 VA: 0x1804D0A60
	protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released) { }
	// RVA: 0x4D1080 Offset: 0x4CF880 VA: 0x1804D1080
	protected bool SendSubmitEventToSelectedObject() { }
	// RVA: 0x4D13A0 Offset: 0x4CFBA0 VA: 0x1804D13A0
	private Vector2 GetRawMoveVector() { }
	// RVA: 0x4D1560 Offset: 0x4CFD60 VA: 0x1804D1560
	protected bool SendMoveEventToSelectedObject() { }
	// RVA: 0x4D18E0 Offset: 0x4D00E0 VA: 0x1804D18E0
	protected void ProcessMouseEvent() { }
	[ObsoleteAttribute] // RVA: 0x102F00 Offset: 0x102300 VA: 0x180102F00
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 30
	protected virtual bool ForceAutoSelect() { }
	// RVA: 0x4D18F0 Offset: 0x4D00F0 VA: 0x1804D18F0
	protected void ProcessMouseEvent(int id) { }
	// RVA: 0x4D1C40 Offset: 0x4D0440 VA: 0x1804D1C40
	protected bool SendUpdateEventToSelectedObject() { }
	// RVA: 0x4D1E20 Offset: 0x4D0620 VA: 0x1804D1E20
	protected void ProcessMousePress(PointerInputModule.MouseButtonEventData data) { }
	// RVA: 0x34A220 Offset: 0x348A20 VA: 0x18034A220
	protected GameObject GetCurrentFocusedGameObject() { }
}

// Namespace: 
[ObsoleteAttribute] // RVA: 0x102F30 Offset: 0x102330 VA: 0x180102F30
public enum StandaloneInputModule.InputMode // TypeDefIndex: 2581
{
	// Fields
	public int value__; // 0x0
	public const StandaloneInputModule.InputMode Mouse = 0; // 0x0
	public const StandaloneInputModule.InputMode Buttons = 1; // 0x0
}

// Namespace: UnityEngine.EventSystems
[ObsoleteAttribute] // RVA: 0x102F90 Offset: 0x102390 VA: 0x180102F90
public class TouchInputModule : PointerInputModule // TypeDefIndex: 2582
{
	// Fields
	private Vector2 m_LastMousePosition; // 0x58
	private Vector2 m_MousePosition; // 0x60
	private PointerEventData m_InputPointerEvent; // 0x68
	[FormerlySerializedAsAttribute] // RVA: 0x102FC0 Offset: 0x1023C0 VA: 0x180102FC0
	[SerializeField] // RVA: 0x102FC0 Offset: 0x1023C0 VA: 0x180102FC0
	private bool m_ForceModuleActive; // 0x70

	// Properties
	[ObsoleteAttribute] // RVA: 0x102FF0 Offset: 0x1023F0 VA: 0x180102FF0
	public bool allowActivationOnStandalone { get; set; }
	public bool forceModuleActive { get; set; }

	// Methods
	// RVA: 0x4D6CD0 Offset: 0x4D54D0 VA: 0x1804D6CD0
	protected void .ctor() { }
	// RVA: 0x3666A0 Offset: 0x364EA0 VA: 0x1803666A0
	public bool get_allowActivationOnStandalone() { }
	// RVA: 0x3666B0 Offset: 0x364EB0 VA: 0x1803666B0
	public void set_allowActivationOnStandalone(bool value) { }
	// RVA: 0x3666A0 Offset: 0x364EA0 VA: 0x1803666A0
	public bool get_forceModuleActive() { }
	// RVA: 0x3666B0 Offset: 0x364EB0 VA: 0x1803666B0
	public void set_forceModuleActive(bool value) { }
	// RVA: 0x4D6CE0 Offset: 0x4D54E0 VA: 0x1804D6CE0 Slot: 24
	public override void UpdateModule() { }
	// RVA: 0x4D6E70 Offset: 0x4D5670 VA: 0x1804D6E70 Slot: 25
	public override bool IsModuleSupported() { }
	// RVA: 0x4D6EB0 Offset: 0x4D56B0 VA: 0x1804D6EB0 Slot: 21
	public override bool ShouldActivateModule() { }
	// RVA: 0x4D7060 Offset: 0x4D5860 VA: 0x1804D7060
	private bool UseFakeInput() { }
	// RVA: 0x4D70A0 Offset: 0x4D58A0 VA: 0x1804D70A0 Slot: 17
	public override void Process() { }
	// RVA: 0x4D7270 Offset: 0x4D5A70 VA: 0x1804D7270
	private void FakeTouches() { }
	// RVA: 0x4D7430 Offset: 0x4D5C30 VA: 0x1804D7430
	private void ProcessTouchEvents() { }
	// RVA: 0x4D75C0 Offset: 0x4D5DC0 VA: 0x1804D75C0
	protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released) { }
	// RVA: 0x4D0610 Offset: 0x4CEE10 VA: 0x1804D0610 Slot: 22
	public override void DeactivateModule() { }
	// RVA: 0x4D7BE0 Offset: 0x4D63E0 VA: 0x1804D7BE0 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine.EventSystems
public enum MoveDirection // TypeDefIndex: 2583
{
	// Fields
	public int value__; // 0x0
	public const MoveDirection Left = 0; // 0x0
	public const MoveDirection Up = 1; // 0x0
	public const MoveDirection Right = 2; // 0x0
	public const MoveDirection Down = 3; // 0x0
	public const MoveDirection None = 4; // 0x0
}

// Namespace: UnityEngine.EventSystems
public struct RaycastResult // TypeDefIndex: 2584
{
	// Fields
	private GameObject m_GameObject; // 0x0
	public BaseRaycaster module; // 0x8
	public float distance; // 0x10
	public float index; // 0x14
	public int depth; // 0x18
	public int sortingLayer; // 0x1C
	public int sortingOrder; // 0x20
	public Vector3 worldPosition; // 0x24
	public Vector3 worldNormal; // 0x30
	public Vector2 screenPosition; // 0x3C
	public int displayIndex; // 0x44

	// Properties
	public GameObject gameObject { get; set; }
	public bool isValid { get; }

	// Methods
	// RVA: 0x1E50 Offset: 0x1250 VA: 0x180001E50
	public GameObject get_gameObject() { }
	// RVA: 0x20E0 Offset: 0x14E0 VA: 0x1800020E0
	public void set_gameObject(GameObject value) { }
	// RVA: 0xD010 Offset: 0xC410 VA: 0x18000D010
	public bool get_isValid() { }
	// RVA: 0xD020 Offset: 0xC420 VA: 0x18000D020 Slot: 3
	public override string ToString() { }
}

// Namespace: UnityEngine.EventSystems
internal static class RaycasterManager // TypeDefIndex: 2585
{
	// Fields
	private static readonly List<BaseRaycaster> s_Raycasters; // 0xABC80

	// Methods
	// RVA: 0x29AD60 Offset: 0x299560 VA: 0x18029AD60
	public static void AddRaycaster(BaseRaycaster baseRaycaster) { }
	// RVA: 0x29AE70 Offset: 0x299670 VA: 0x18029AE70
	public static List<BaseRaycaster> GetRaycasters() { }
	// RVA: 0x29AF10 Offset: 0x299710 VA: 0x18029AF10
	public static void RemoveRaycasters(BaseRaycaster baseRaycaster) { }
	// RVA: 0x29B060 Offset: 0x299860 VA: 0x18029B060
	private static void .cctor() { }
}

// Namespace: UnityEngine.EventSystems
public abstract class BaseRaycaster : UIBehaviour // TypeDefIndex: 2586
{
	// Fields
	private BaseRaycaster m_RootRaycaster; // 0x18

	// Properties
	public abstract Camera eventCamera { get; }
	[ObsoleteAttribute] // RVA: 0x103020 Offset: 0x102420 VA: 0x180103020
	public virtual int priority { get; }
	public virtual int sortOrderPriority { get; }
	public virtual int renderOrderPriority { get; }
	public BaseRaycaster rootRaycaster { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 17
	public abstract void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }
	// RVA: -1 Offset: -1 Slot: 18
	public abstract Camera get_eventCamera() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 19
	public virtual int get_priority() { }
	// RVA: 0x1FE130 Offset: 0x1FC930 VA: 0x1801FE130 Slot: 20
	public virtual int get_sortOrderPriority() { }
	// RVA: 0x1FE130 Offset: 0x1FC930 VA: 0x1801FE130 Slot: 21
	public virtual int get_renderOrderPriority() { }
	// RVA: 0x1FE140 Offset: 0x1FC940 VA: 0x1801FE140
	public BaseRaycaster get_rootRaycaster() { }
	// RVA: 0x1FE240 Offset: 0x1FCA40 VA: 0x1801FE240 Slot: 3
	public override string ToString() { }
	// RVA: 0x1FE620 Offset: 0x1FCE20 VA: 0x1801FE620 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x1FE7B0 Offset: 0x1FCFB0 VA: 0x1801FE7B0 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x1FE980 Offset: 0x1FD180 VA: 0x1801FE980 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }
	// RVA: 0x1FE980 Offset: 0x1FD180 VA: 0x1801FE980 Slot: 12
	protected override void OnTransformParentChanged() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: UnityEngine.EventSystems
[RequireComponent] // RVA: 0x103050 Offset: 0x102450 VA: 0x180103050
public class Physics2DRaycaster : PhysicsRaycaster // TypeDefIndex: 2587
{
	// Fields
	private RaycastHit2D[] m_Hits; // 0x40

	// Methods
	// RVA: 0x295AD0 Offset: 0x2942D0 VA: 0x180295AD0
	protected void .ctor() { }
	// RVA: 0x295AE0 Offset: 0x2942E0 VA: 0x180295AE0 Slot: 17
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }
}

// Namespace: UnityEngine.EventSystems
[RequireComponent] // RVA: 0x1030D0 Offset: 0x1024D0 VA: 0x1801030D0
public class PhysicsRaycaster : BaseRaycaster // TypeDefIndex: 2588
{
	// Fields
	protected const int kNoEventMaskSet = -1; // 0x0
	protected Camera m_EventCamera; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected LayerMask m_EventMask; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected int m_MaxRayIntersections; // 0x2C
	protected int m_LastMaxRayIntersections; // 0x30
	private RaycastHit[] m_Hits; // 0x38

	// Properties
	public override Camera eventCamera { get; }
	public virtual int depth { get; }
	public int finalEventMask { get; }
	public LayerMask eventMask { get; set; }
	public int maxRayIntersections { get; set; }

	// Methods
	// RVA: 0x295AD0 Offset: 0x2942D0 VA: 0x180295AD0
	protected void .ctor() { }
	// RVA: 0x2961B0 Offset: 0x2949B0 VA: 0x1802961B0 Slot: 18
	public override Camera get_eventCamera() { }
	// RVA: 0x2962B0 Offset: 0x294AB0 VA: 0x1802962B0 Slot: 22
	public virtual int get_depth() { }
	// RVA: 0x2963E0 Offset: 0x294BE0 VA: 0x1802963E0
	public int get_finalEventMask() { }
	// RVA: 0x1FC310 Offset: 0x1FAB10 VA: 0x1801FC310
	public LayerMask get_eventMask() { }
	// RVA: 0x1FC320 Offset: 0x1FAB20 VA: 0x1801FC320
	public void set_eventMask(LayerMask value) { }
	// RVA: 0x1FEF40 Offset: 0x1FD740 VA: 0x1801FEF40
	public int get_maxRayIntersections() { }
	// RVA: 0x1FEF50 Offset: 0x1FD750 VA: 0x1801FEF50
	public void set_maxRayIntersections(int value) { }
	// RVA: 0x296510 Offset: 0x294D10 VA: 0x180296510
	protected bool ComputeRayAndDistance(PointerEventData eventData, ref Ray ray, ref int eventDisplayIndex, ref float distanceToClipPlane) { }
	// RVA: 0x2969B0 Offset: 0x2951B0 VA: 0x1802969B0 Slot: 17
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) { }
}

// Namespace: 
private class PhysicsRaycaster.RaycastHitComparer : IComparer<RaycastHit> // TypeDefIndex: 2589
{
	// Fields
	public static PhysicsRaycaster.RaycastHitComparer instance; // 0xABCD3

	// Methods
	// RVA: 0x4DC750 Offset: 0x4DAF50 VA: 0x1804DC750 Slot: 4
	public int Compare(RaycastHit x, RaycastHit y) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x4DC7B0 Offset: 0x4DAFB0 VA: 0x1804DC7B0
	private static void .cctor() { }
}

// Namespace: UnityEngine.EventSystems
public abstract class UIBehaviour : MonoBehaviour // TypeDefIndex: 2590
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 4
	protected virtual void Awake() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	protected virtual void OnEnable() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 6
	protected virtual void Start() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	protected virtual void OnDisable() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 8
	protected virtual void OnDestroy() { }
	// RVA: 0x4D7EE0 Offset: 0x4D66E0 VA: 0x1804D7EE0 Slot: 9
	public virtual bool IsActive() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 10
	protected virtual void OnRectTransformDimensionsChange() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 11
	protected virtual void OnBeforeTransformParentChanged() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 12
	protected virtual void OnTransformParentChanged() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 13
	protected virtual void OnDidApplyAnimationProperties() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 14
	protected virtual void OnCanvasGroupChanged() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 15
	protected virtual void OnCanvasHierarchyChanged() { }
	// RVA: 0x4D7F30 Offset: 0x4D6730 VA: 0x1804D7F30 Slot: 16
	public bool IsDestroyed() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: 
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 2591
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 7BBE37982E6C057ED87163CAFC7FD6E5E42EEA46 /*Metadata offset 0x15FB5D*/; // 0xA15984
}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 // TypeDefIndex: 2592
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2593
{}

// Namespace: VisualDesignCafe.Rendering
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public class DynamicBatcher : IEnumerable<InstanceBuffer>, IEnumerable, IDisposable // TypeDefIndex: 2594
{
	// Fields
	private readonly int _batchSize; // 0x10
	private readonly List<InstanceBuffer> _buffers; // 0x18

	// Methods
	// RVA: 0x655900 Offset: 0x654100 VA: 0x180655900 Slot: 6
	public void Dispose() { }
	// RVA: 0x655A80 Offset: 0x654280 VA: 0x180655A80
	public int Add(InstanceBufferSlice buffer, ref List<InstanceBuffer> addedBuffers) { }
	// RVA: 0x655AC0 Offset: 0x6542C0 VA: 0x180655AC0
	private int Add(InstanceBufferSlice bufferSlice, ref List<InstanceBuffer> addedBuffers, int sliceIndexOffset) { }
	// RVA: 0x656130 Offset: 0x654930 VA: 0x180656130
	public void Remove(InstanceBuffer buffer) { }
	// RVA: 0x6564A0 Offset: 0x654CA0 VA: 0x1806564A0 Slot: 4
	public IEnumerator<InstanceBuffer> GetEnumerator() { }
	// RVA: 0x656560 Offset: 0x654D60 VA: 0x180656560 Slot: 5
	private IEnumerator System.Collections.IEnumerable.GetEnumerator() { }
	// RVA: 0x656620 Offset: 0x654E20 VA: 0x180656620
	public void .ctor() { }
}

// Namespace: VisualDesignCafe.Rendering
public struct InstanceBufferSlice // TypeDefIndex: 2595
{
	// Fields
	public readonly Matrix4x4[] Instances; // 0x0
	public readonly Vector4[] Colors; // 0x8
	public readonly int Offset; // 0x10
	public readonly int Count; // 0x14
	public readonly Bounds Bounds; // 0x18

	// Methods
	// RVA: 0x23C40 Offset: 0x23040 VA: 0x180023C40
	public void .ctor(Matrix4x4[] instances, Vector4[] colors, int offset, int count, Bounds bounds) { }
	// RVA: 0x23C90 Offset: 0x23090 VA: 0x180023C90
	public InstanceBufferSlice Slice(int offset, int count, bool absoluteOffset) { }
}

// Namespace: VisualDesignCafe.Rendering
public class InstanceBuffer // TypeDefIndex: 2596
{
	// Fields
	public readonly Matrix4x4[] Instances; // 0x10
	public readonly Vector4[] Colors; // 0x18
	public readonly int OffsetSelf; // 0x20
	public readonly int CountSelf; // 0x24
	public readonly Bounds Bounds; // 0x28
	private InstanceBuffer <MergedBuffer>k__BackingField; // 0x40
	private Nullable<int> <IndexInMergedBuffer>k__BackingField; // 0x48
	private bool <IsMerged>k__BackingField; // 0x50
	private GroupedList<Matrix4x4> <MergedInstances>k__BackingField; // 0x58
	private GroupedList<Vector4> <MergedColors>k__BackingField; // 0x60
	private bool <PropertiesAreDirty>k__BackingField; // 0x68
	private MaterialPropertyBlock <Properties>k__BackingField; // 0x70
	private bool <IsDisposed>k__BackingField; // 0x78
	internal float[] Hue; // 0x80
	internal float[] Saturation; // 0x88
	internal float[] Lightness; // 0x90

	// Properties
	public InstanceBuffer MergedBuffer { get; set; }
	public Nullable<int> IndexInMergedBuffer { get; set; }
	public bool IsMerged { get; set; }
	public GroupedList<Matrix4x4> MergedInstances { get; set; }
	public GroupedList<Vector4> MergedColors { get; set; }
	public bool PropertiesAreDirty { get; set; }
	public MaterialPropertyBlock Properties { get; set; }
	internal bool IsDisposed { get; set; }

	// Methods
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public InstanceBuffer get_MergedBuffer() { }
	// RVA: 0x16F140 Offset: 0x16D940 VA: 0x18016F140
	private void set_MergedBuffer(InstanceBuffer value) { }
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0
	public Nullable<int> get_IndexInMergedBuffer() { }
	// RVA: 0x16C1B0 Offset: 0x16A9B0 VA: 0x18016C1B0
	internal void set_IndexInMergedBuffer(Nullable<int> value) { }
	// RVA: 0x6566C0 Offset: 0x654EC0 VA: 0x1806566C0
	public bool get_IsMerged() { }
	// RVA: 0x6566D0 Offset: 0x654ED0 VA: 0x1806566D0
	private void set_IsMerged(bool value) { }
	// RVA: 0x3120C0 Offset: 0x3108C0 VA: 0x1803120C0
	public GroupedList<Matrix4x4> get_MergedInstances() { }
	// RVA: 0x3120D0 Offset: 0x3108D0 VA: 0x1803120D0
	private void set_MergedInstances(GroupedList<Matrix4x4> value) { }
	// RVA: 0x29E380 Offset: 0x29CB80 VA: 0x18029E380
	public GroupedList<Vector4> get_MergedColors() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0
	private void set_MergedColors(GroupedList<Vector4> value) { }
	// RVA: 0x6566E0 Offset: 0x654EE0 VA: 0x1806566E0
	public bool get_PropertiesAreDirty() { }
	// RVA: 0x363F50 Offset: 0x362750 VA: 0x180363F50
	public void set_PropertiesAreDirty(bool value) { }
	// RVA: 0x262A80 Offset: 0x261280 VA: 0x180262A80
	public MaterialPropertyBlock get_Properties() { }
	// RVA: 0x345180 Offset: 0x343980 VA: 0x180345180
	internal void set_Properties(MaterialPropertyBlock value) { }
	// RVA: 0x6566F0 Offset: 0x654EF0 VA: 0x1806566F0
	internal bool get_IsDisposed() { }
	// RVA: 0x656700 Offset: 0x654F00 VA: 0x180656700
	private void set_IsDisposed(bool value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x656710 Offset: 0x654F10 VA: 0x180656710
	public void .ctor(InstanceBufferSlice slice) { }
	// RVA: 0x264340 Offset: 0x262B40 VA: 0x180264340 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x656780 Offset: 0x654F80 VA: 0x180656780
	public void Dispose() { }
	// RVA: 0x656A70 Offset: 0x655270 VA: 0x180656A70
	public void Merge(InstanceBuffer destination) { }
	// RVA: 0x656F30 Offset: 0x655730 VA: 0x180656F30
	public void ConvertToMergedBuffer(bool forceColorsAllocation = False) { }
	// RVA: 0x6570F0 Offset: 0x6558F0 VA: 0x1806570F0
	public void Split() { }
}

// Namespace: VisualDesignCafe.Rendering
public struct InstanceData // TypeDefIndex: 2597
{
	// Fields
	public readonly Mesh Mesh; // 0x0
	public readonly Material[] Materials; // 0x8
	public readonly float CullDistance; // 0x10
	public readonly float SqrCullDistance; // 0x14
	public readonly ShadowCastingMode ShadowCasting; // 0x18
	public readonly bool ReceiveShadow; // 0x1C
	public readonly Bounds Bounds; // 0x20
	public readonly LODFadeMode FadeMode; // 0x38
	public readonly InstanceData.ColorType Color; // 0x3C
	public readonly int Layer; // 0x40
	public readonly bool IsLastLod; // 0x44
	public readonly bool LightProbes; // 0x45
	public readonly bool OcclusionProbes; // 0x46

	// Properties
	public bool IsValid { get; }

	// Methods
	// RVA: 0x23D20 Offset: 0x23120 VA: 0x180023D20
	public bool get_IsValid() { }
	// RVA: 0x23D40 Offset: 0x23140 VA: 0x180023D40
	public void .ctor(Mesh mesh, Material[] materials, Bounds bounds, float distance, ShadowCastingMode shadowCasting, bool receiveShadows, LODFadeMode fadeMode, InstanceData.ColorType color, int layer, bool isLastLod, bool lightProbes, bool occlusionProbes) { }
}

// Namespace: 
public enum InstanceData.ColorType // TypeDefIndex: 2598
{
	// Fields
	public int value__; // 0x0
	public const InstanceData.ColorType None = 0; // 0x0
	public const InstanceData.ColorType Color = 1; // 0x0
	public const InstanceData.ColorType Tint = 2; // 0x0
	public const InstanceData.ColorType HSV = 3; // 0x0
}

// Namespace: VisualDesignCafe.Rendering
public class InstanceIndirectRenderer : InstanceRenderer // TypeDefIndex: 2599
{
	// Fields
	private static Matrix4x4[] _temporaryInstancesBuffer; // 0x0
	private ComputeBuffer _argBuffer; // 0x88
	private ComputeBuffer _positionBuffer; // 0x90
	private MaterialPropertyBlock _properties; // 0x98
	private uint[] _args; // 0xA0
	private Bounds _bounds; // 0xA8
	private object _lock; // 0xC0
	private InstanceBuffer _renderBuffer; // 0xC8
	private bool _cacheIsDirty; // 0xD0

	// Methods
	// RVA: 0x6573F0 Offset: 0x655BF0 VA: 0x1806573F0
	public void .ctor(InstanceData source, bool isHdrp) { }
	// RVA: 0x657520 Offset: 0x655D20 VA: 0x180657520 Slot: 5
	public override void Dispose() { }
	// RVA: 0x6576E0 Offset: 0x655EE0 VA: 0x1806576E0 Slot: 4
	public override void FinalizeFrame() { }
	// RVA: 0x6578F0 Offset: 0x6560F0 VA: 0x1806578F0 Slot: 6
	public override int Add(InstanceBufferSlice buffer, ref List<InstanceBuffer> addedBuffers) { }
	// RVA: 0x657C70 Offset: 0x656470 VA: 0x180657C70 Slot: 7
	public override void Remove(InstanceBuffer buffer) { }
	// RVA: 0x657EF0 Offset: 0x6566F0 VA: 0x180657EF0 Slot: 8
	public override void Render(Camera camera, Plane[] planes, float cullDistance, bool useCache, out int instancesRendered, out int instancesCulled, out int batchesRendered) { }
	// RVA: 0x658C70 Offset: 0x657470 VA: 0x180658C70
	private ComputeBuffer GetArgBuffer() { }
	// RVA: 0x658D60 Offset: 0x657560 VA: 0x180658D60
	private ComputeBuffer GetInstancesBuffer(int bufferSize) { }
	// RVA: 0x658EB0 Offset: 0x6576B0 VA: 0x180658EB0
	private MaterialPropertyBlock GetPropertyBlock() { }
	// RVA: 0x658F90 Offset: 0x657790 VA: 0x180658F90
	private void DisposeComputeBuffers() { }
	// RVA: 0x658FE0 Offset: 0x6577E0 VA: 0x180658FE0
	private static void .cctor() { }
}

// Namespace: VisualDesignCafe.Rendering
public class InstanceRenderer // TypeDefIndex: 2600
{
	// Fields
	private const int _batchSize = 1023; // 0x0
	private EventHandler<InstanceRenderer> Disposed; // 0x10
	private EventHandler<InstanceRenderer.AddBufferEventArgs> AddBuffer; // 0x18
	private EventHandler<InstanceBuffer> AddedBuffer; // 0x20
	private EventHandler<InstanceBuffer> RemoveBuffer; // 0x28
	private EventHandler<InstanceBuffer> RemovedBuffer; // 0x30
	public readonly InstanceData Source; // 0x38
	private DynamicBatcher _dynamicBatcher; // 0x80

	// Methods
	// RVA: 0x659070 Offset: 0x657870 VA: 0x180659070
	public void .ctor(InstanceData source, bool isHdrp) { }
	// RVA: 0x659200 Offset: 0x657A00 VA: 0x180659200 Slot: 4
	public virtual void FinalizeFrame() { }
	// RVA: 0x659510 Offset: 0x657D10 VA: 0x180659510 Slot: 5
	public virtual void Dispose() { }
	// RVA: 0x6598F0 Offset: 0x6580F0 VA: 0x1806598F0 Slot: 6
	public virtual int Add(InstanceBufferSlice buffer, ref List<InstanceBuffer> addedBuffers) { }
	// RVA: 0x659C50 Offset: 0x658450 VA: 0x180659C50 Slot: 7
	public virtual void Remove(InstanceBuffer buffer) { }
	// RVA: 0x659EA0 Offset: 0x6586A0 VA: 0x180659EA0 Slot: 8
	public virtual void Render(Camera camera, Plane[] planes, float cullDistance, bool useCache, out int instancesRendered, out int instancesCulled, out int batchesRendered) { }
	// RVA: 0x65A600 Offset: 0x658E00 VA: 0x18065A600
	private bool HasProperties(InstanceBuffer group) { }
	// RVA: 0x65A650 Offset: 0x658E50 VA: 0x18065A650
	private void SampleLightProbes(MaterialPropertyBlock properties, Matrix4x4[] instances, int instancesCount) { }
	// RVA: 0x65AB20 Offset: 0x659320 VA: 0x18065AB20
	private void SetColors(MaterialPropertyBlock properties, Vector4[] colors, int count, ref float[] hue, ref float[] saturation, ref float[] lightness) { }
}

// Namespace: 
public class InstanceRenderer.AddBufferEventArgs // TypeDefIndex: 2601
{
	// Fields
	public InstanceBufferSlice Buffer; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2602
{}

// Namespace: 
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineCameraOffset : CinemachineExtension // TypeDefIndex: 2603
{
	// Fields
	public Vector3 m_Offset; // 0x28
	public CinemachineCore.Stage m_ApplyAfter; // 0x34
	public bool m_PreserveComposition; // 0x38

	// Methods
	// RVA: 0x3D3800 Offset: 0x3D2000 VA: 0x1803D3800 Slot: 7
	protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime) { }
	// RVA: 0x3D3D30 Offset: 0x3D2530 VA: 0x1803D3D30
	public void .ctor() { }
}

// Namespace: 
public class CinemachineTouchInputMapper : MonoBehaviour // TypeDefIndex: 2604
{
	// Fields
	public float TouchSensitivityX; // 0x18
	public float TouchSensitivityY; // 0x1C
	public string TouchXInputMapTo; // 0x20
	public string TouchYInputMapTo; // 0x28

	// Methods
	// RVA: 0x23A6A0 Offset: 0x238EA0 VA: 0x18023A6A0
	private void Start() { }
	// RVA: 0x23A780 Offset: 0x238F80 VA: 0x18023A780
	private float GetInputAxis(string axisName) { }
	// RVA: 0x23A9D0 Offset: 0x2391D0 VA: 0x18023A9D0
	public void .ctor() { }
}

// Namespace: 
internal sealed class CinemachineMixer : PlayableBehaviour // TypeDefIndex: 2605
{
	// Fields
	private CinemachineBrain mBrain; // 0x10
	private int mBrainOverrideId; // 0x18
	private bool mPlaying; // 0x1C
	private float mLastOverrideTime; // 0x20

	// Methods
	// RVA: 0x227880 Offset: 0x226080 VA: 0x180227880 Slot: 16
	public override void OnPlayableDestroy(Playable playable) { }
	// RVA: 0x227A10 Offset: 0x226210 VA: 0x180227A10 Slot: 19
	public override void PrepareFrame(Playable playable, FrameData info) { }
	// RVA: 0x227A20 Offset: 0x226220 VA: 0x180227A20 Slot: 20
	public override void ProcessFrame(Playable playable, FrameData info, object playerData) { }
	// RVA: 0x228000 Offset: 0x226800 VA: 0x180228000
	private float GetDeltaTime(float deltaTime) { }
	// RVA: 0x228160 Offset: 0x226960 VA: 0x180228160
	public void .ctor() { }
}

// Namespace: 
private struct CinemachineMixer.ClipInfo // TypeDefIndex: 2606
{
	// Fields
	public ICinemachineCamera vcam; // 0x0
	public float weight; // 0x8
	public double localTime; // 0x10
	public double duration; // 0x18
}

// Namespace: 
public sealed class CinemachineShot : PlayableAsset, IPropertyPreview // TypeDefIndex: 2607
{
	// Fields
	public string DisplayName; // 0x18
	public ExposedReference<CinemachineVirtualCameraBase> VirtualCamera; // 0x20

	// Methods
	// RVA: 0x231660 Offset: 0x22FE60 VA: 0x180231660 Slot: 6
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner) { }
	// RVA: 0x231800 Offset: 0x230000 VA: 0x180231800 Slot: 9
	public void GatherProperties(PlayableDirector director, IPropertyCollector driver) { }
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	public void .ctor() { }
}

// Namespace: 
internal sealed class CinemachineShotPlayable : PlayableBehaviour // TypeDefIndex: 2608
{
	// Fields
	public CinemachineVirtualCameraBase VirtualCamera; // 0x10

	// Properties
	public bool IsValid { get; }

	// Methods
	// RVA: 0x231940 Offset: 0x230140 VA: 0x180231940
	public bool get_IsValid() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
[TrackBindingTypeAttribute] // RVA: 0x103180 Offset: 0x102580 VA: 0x180103180
[TrackClipTypeAttribute] // RVA: 0x103180 Offset: 0x102580 VA: 0x180103180
[Serializable]
public class CinemachineTrack : TrackAsset // TypeDefIndex: 2609
{
	// Methods
	// RVA: 0x23AA70 Offset: 0x239270 VA: 0x18023AA70 Slot: 23
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount) { }
	// RVA: 0x23AB70 Offset: 0x239370 VA: 0x18023AB70
	public void .ctor() { }
}

// Namespace: Cinemachine
[DisallowMultipleComponent] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineBlendListCamera : CinemachineVirtualCameraBase // TypeDefIndex: 2610
{
	// Fields
	public Transform m_LookAt; // 0x60
	public Transform m_Follow; // 0x68
	public bool m_ShowDebugText; // 0x70
	public bool m_Loop; // 0x71
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal CinemachineVirtualCameraBase[] m_ChildCameras; // 0x78
	public CinemachineBlendListCamera.Instruction[] m_Instructions; // 0x80
	private ICinemachineCamera <LiveChild>k__BackingField; // 0x88
	private ICinemachineCamera <TransitioningFrom>k__BackingField; // 0x90
	private CameraState m_State; // 0x98
	private float mActivationTime; // 0x178
	private int mCurrentInstruction; // 0x17C
	private CinemachineBlend mActiveBlend; // 0x180

	// Properties
	public override string Description { get; }
	public ICinemachineCamera LiveChild { get; set; }
	public override CameraState State { get; }
	public override Transform LookAt { get; set; }
	public override Transform Follow { get; set; }
	private ICinemachineCamera TransitioningFrom { get; set; }
	public CinemachineVirtualCameraBase[] ChildCameras { get; }
	public bool IsBlending { get; }

	// Methods
	// RVA: 0x3CE540 Offset: 0x3CCD40 VA: 0x1803CE540 Slot: 17
	public override string get_Description() { }
	// RVA: 0x3CE680 Offset: 0x3CCE80 VA: 0x1803CE680
	public void set_LiveChild(ICinemachineCamera value) { }
	// RVA: 0x262A60 Offset: 0x261260 VA: 0x180262A60
	public ICinemachineCamera get_LiveChild() { }
	// RVA: 0x3CE690 Offset: 0x3CCE90 VA: 0x1803CE690 Slot: 20
	public override bool IsLiveChild(ICinemachineCamera vcam, bool dominantChildOnly = False) { }
	// RVA: 0x3CE6C0 Offset: 0x3CCEC0 VA: 0x1803CE6C0 Slot: 19
	public override CameraState get_State() { }
	// RVA: 0x21EFB0 Offset: 0x21D7B0 VA: 0x18021EFB0 Slot: 21
	public override Transform get_LookAt() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0 Slot: 22
	public override void set_LookAt(Transform value) { }
	// RVA: 0x21EFC0 Offset: 0x21D7C0 VA: 0x18021EFC0 Slot: 23
	public override Transform get_Follow() { }
	// RVA: 0x21EFD0 Offset: 0x21D7D0 VA: 0x18021EFD0 Slot: 24
	public override void set_Follow(Transform value) { }
	// RVA: 0x3CE750 Offset: 0x3CCF50 VA: 0x1803CE750 Slot: 35
	public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x3CE840 Offset: 0x3CD040 VA: 0x1803CE840 Slot: 28
	public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
	// RVA: 0x2C01B0 Offset: 0x2BE9B0 VA: 0x1802C01B0
	private ICinemachineCamera get_TransitioningFrom() { }
	// RVA: 0x2C01C0 Offset: 0x2BE9C0 VA: 0x1802C01C0
	private void set_TransitioningFrom(ICinemachineCamera value) { }
	// RVA: 0x3CE960 Offset: 0x3CD160 VA: 0x1803CE960 Slot: 27
	public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x3CEF10 Offset: 0x3CD710 VA: 0x1803CEF10 Slot: 32
	protected override void OnEnable() { }
	// RVA: 0x3CF0A0 Offset: 0x3CD8A0 VA: 0x1803CF0A0 Slot: 33
	protected override void OnDisable() { }
	// RVA: 0x3CF1A0 Offset: 0x3CD9A0 VA: 0x1803CF1A0
	private void OnTransformChildrenChanged() { }
	// RVA: 0x3CF1B0 Offset: 0x3CD9B0 VA: 0x1803CF1B0
	private void OnGuiHandler() { }
	// RVA: 0x3CF350 Offset: 0x3CDB50 VA: 0x1803CF350
	public CinemachineVirtualCameraBase[] get_ChildCameras() { }
	// RVA: 0x3CF370 Offset: 0x3CDB70 VA: 0x1803CF370
	public bool get_IsBlending() { }
	// RVA: 0x3CF1A0 Offset: 0x3CD9A0 VA: 0x1803CF1A0
	private void InvalidateListOfChildren() { }
	// RVA: 0x3CF380 Offset: 0x3CDB80 VA: 0x1803CF380
	private void UpdateListOfChildren() { }
	// RVA: 0x3CF5E0 Offset: 0x3CDDE0 VA: 0x1803CF5E0
	internal void ValidateInstructions() { }
	// RVA: 0x3CF7F0 Offset: 0x3CDFF0 VA: 0x1803CF7F0
	private void AdvanceCurrentInstruction(float deltaTime) { }
	// RVA: 0x3CFA00 Offset: 0x3CE200 VA: 0x1803CFA00
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct CinemachineBlendListCamera.Instruction // TypeDefIndex: 2611
{
	// Fields
	public CinemachineVirtualCameraBase m_VirtualCamera; // 0x0
	public float m_Hold; // 0x8
	public CinemachineBlendDefinition m_Blend; // 0x10
}

// Namespace: Cinemachine
[DisallowMultipleComponent] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineBrain : MonoBehaviour // TypeDefIndex: 2612
{
	// Fields
	public bool m_ShowDebugText; // 0x18
	public bool m_ShowCameraFrustum; // 0x19
	public bool m_IgnoreTimeScale; // 0x1A
	public Transform m_WorldUpOverride; // 0x20
	public CinemachineBrain.UpdateMethod m_UpdateMethod; // 0x28
	public CinemachineBrain.BrainUpdateMethod m_BlendUpdateMethod; // 0x2C
	public CinemachineBlendDefinition m_DefaultBlend; // 0x30
	public CinemachineBlenderSettings m_CustomBlends; // 0x40
	private Camera m_OutputCamera; // 0x48
	public CinemachineBrain.BrainEvent m_CameraCutEvent; // 0x50
	public CinemachineBrain.VcamActivatedEvent m_CameraActivatedEvent; // 0x58
	private static ICinemachineCamera mSoloCamera; // 0x0
	private Coroutine mPhysicsCoroutine; // 0x60
	private WaitForFixedUpdate mWaitForFixedUpdate; // 0x68
	private List<CinemachineBrain.BrainFrame> mFrameStack; // 0x70
	private int mNextFrameId; // 0x78
	private CinemachineBlend mCurrentLiveCameras; // 0x80
	private ICinemachineCamera mActiveCameraPreviousFrame; // 0x88
	private CameraState <CurrentCameraState>k__BackingField; // 0x90

	// Properties
	public Camera OutputCamera { get; }
	public static ICinemachineCamera SoloCamera { get; set; }
	public Vector3 DefaultWorldUp { get; }
	public ICinemachineCamera ActiveVirtualCamera { get; }
	public bool IsBlending { get; }
	public CinemachineBlend ActiveBlend { get; }
	public CameraState CurrentCameraState { get; set; }

	// Methods
	// RVA: 0x3D00A0 Offset: 0x3CE8A0 VA: 0x1803D00A0
	public Camera get_OutputCamera() { }
	// RVA: 0x3D01A0 Offset: 0x3CE9A0 VA: 0x1803D01A0
	public static ICinemachineCamera get_SoloCamera() { }
	// RVA: 0x3D0220 Offset: 0x3CEA20 VA: 0x1803D0220
	public static void set_SoloCamera(ICinemachineCamera value) { }
	// RVA: 0x3D0390 Offset: 0x3CEB90 VA: 0x1803D0390
	public static Color GetSoloGUIColor() { }
	// RVA: 0x3D03F0 Offset: 0x3CEBF0 VA: 0x1803D03F0
	public Vector3 get_DefaultWorldUp() { }
	// RVA: 0x3D0550 Offset: 0x3CED50 VA: 0x1803D0550
	private void OnEnable() { }
	// RVA: 0x3D0860 Offset: 0x3CF060 VA: 0x1803D0860
	private void OnDisable() { }
	// RVA: 0x3D09D0 Offset: 0x3CF1D0 VA: 0x1803D09D0
	private void Start() { }
	// RVA: 0x3D09F0 Offset: 0x3CF1F0 VA: 0x1803D09F0
	private void OnGuiHandler() { }
	// RVA: 0x3D0D40 Offset: 0x3CF540 VA: 0x1803D0D40
	private IEnumerator AfterPhysics() { }
	// RVA: 0x3D0DD0 Offset: 0x3CF5D0 VA: 0x1803D0DD0
	private void LateUpdate() { }
	// RVA: 0x3D0FC0 Offset: 0x3CF7C0 VA: 0x1803D0FC0
	private float GetEffectiveDeltaTime(bool fixedDelta) { }
	// RVA: 0x3D12B0 Offset: 0x3CFAB0 VA: 0x1803D12B0
	private void UpdateVirtualCameras(CinemachineCore.UpdateFilter updateFilter, float deltaTime) { }
	// RVA: 0x3D1580 Offset: 0x3CFD80 VA: 0x1803D1580
	public ICinemachineCamera get_ActiveVirtualCamera() { }
	// RVA: 0x3D16A0 Offset: 0x3CFEA0 VA: 0x1803D16A0
	private static ICinemachineCamera DeepCamBFromBlend(CinemachineBlend blend) { }
	// RVA: 0x3D17A0 Offset: 0x3CFFA0 VA: 0x1803D17A0
	public bool get_IsBlending() { }
	// RVA: 0x3D1810 Offset: 0x3D0010 VA: 0x1803D1810
	public CinemachineBlend get_ActiveBlend() { }
	// RVA: 0x3D1870 Offset: 0x3D0070 VA: 0x1803D1870
	private int GetBrainFrame(int withId) { }
	// RVA: 0x3D1990 Offset: 0x3D0190 VA: 0x1803D1990
	internal int SetCameraOverride(int overrideId, ICinemachineCamera camA, ICinemachineCamera camB, float weightB, float deltaTime) { }
	// RVA: 0x3D1C40 Offset: 0x3D0440 VA: 0x1803D1C40
	internal void ReleaseCameraOverride(int overrideId) { }
	// RVA: 0x3D1D20 Offset: 0x3D0520 VA: 0x1803D1D20
	private void ProcessActiveCamera(float deltaTime) { }
	// RVA: 0x3D20B0 Offset: 0x3D08B0 VA: 0x1803D20B0
	private void UpdateFrame0(float deltaTime) { }
	// RVA: 0x3D24E0 Offset: 0x3D0CE0 VA: 0x1803D24E0
	private void UpdateCurrentLiveCameras() { }
	// RVA: 0x3D2980 Offset: 0x3D1180 VA: 0x1803D2980
	public bool IsLive(ICinemachineCamera vcam, bool dominantChildOnly = False) { }
	// RVA: 0x3D2B50 Offset: 0x3D1350 VA: 0x1803D2B50
	public CameraState get_CurrentCameraState() { }
	// RVA: 0x3D2BE0 Offset: 0x3D13E0 VA: 0x1803D2BE0
	private void set_CurrentCameraState(CameraState value) { }
	// RVA: 0x3D2C60 Offset: 0x3D1460 VA: 0x1803D2C60
	private ICinemachineCamera TopCameraFromPriorityQueue() { }
	// RVA: 0x3D2F70 Offset: 0x3D1770 VA: 0x1803D2F70
	private CinemachineBlendDefinition LookupBlend(ICinemachineCamera fromKey, ICinemachineCamera toKey) { }
	// RVA: 0x3D3170 Offset: 0x3D1970 VA: 0x1803D3170
	private void PushStateToUnityCamera(CameraState state) { }
	// RVA: 0x3D3640 Offset: 0x3D1E40 VA: 0x1803D3640
	public void .ctor() { }
}

// Namespace: 
public enum CinemachineBrain.UpdateMethod // TypeDefIndex: 2613
{
	// Fields
	public int value__; // 0x0
	public const CinemachineBrain.UpdateMethod FixedUpdate = 0; // 0x0
	public const CinemachineBrain.UpdateMethod LateUpdate = 1; // 0x0
	public const CinemachineBrain.UpdateMethod SmartUpdate = 2; // 0x0
}

// Namespace: 
public enum CinemachineBrain.BrainUpdateMethod // TypeDefIndex: 2614
{
	// Fields
	public int value__; // 0x0
	public const CinemachineBrain.BrainUpdateMethod FixedUpdate = 0; // 0x0
	public const CinemachineBrain.BrainUpdateMethod LateUpdate = 1; // 0x0
}

// Namespace: 
[Serializable]
public class CinemachineBrain.BrainEvent : UnityEvent<CinemachineBrain> // TypeDefIndex: 2615
{
	// Methods
	// RVA: 0x63B9E0 Offset: 0x63A1E0 VA: 0x18063B9E0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class CinemachineBrain.VcamActivatedEvent : UnityEvent<ICinemachineCamera, ICinemachineCamera> // TypeDefIndex: 2616
{
	// Methods
	// RVA: 0x63BC00 Offset: 0x63A400 VA: 0x18063BC00
	public void .ctor() { }
}

// Namespace: 
private class CinemachineBrain.BrainFrame // TypeDefIndex: 2617
{
	// Fields
	public int id; // 0x10
	public CinemachineBlend blend; // 0x18
	public CinemachineBlend workingBlend; // 0x20
	public BlendSourceVirtualCamera workingBlendSource; // 0x28
	public float deltaTimeOverride; // 0x30
	public float timeOfOverride; // 0x34

	// Properties
	public bool Active { get; }
	public bool TimeOverrideExpired { get; }

	// Methods
	// RVA: 0x63BA60 Offset: 0x63A260 VA: 0x18063BA60
	public bool get_Active() { }
	// RVA: 0x63BA80 Offset: 0x63A280 VA: 0x18063BA80
	public bool get_TimeOverrideExpired() { }
	// RVA: 0x63BB30 Offset: 0x63A330 VA: 0x18063BB30
	public void .ctor() { }
}

// Namespace: 
private sealed class CinemachineBrain.<AfterPhysics>d__30 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2618
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public CinemachineBrain <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x63B890 Offset: 0x63A090 VA: 0x18063B890 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: Cinemachine
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[DisallowMultipleComponent] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineClearShot : CinemachineVirtualCameraBase // TypeDefIndex: 2619
{
	// Fields
	public Transform m_LookAt; // 0x60
	public Transform m_Follow; // 0x68
	public bool m_ShowDebugText; // 0x70
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal CinemachineVirtualCameraBase[] m_ChildCameras; // 0x78
	public float m_ActivateAfter; // 0x80
	public float m_MinDuration; // 0x84
	public bool m_RandomizeChoice; // 0x88
	public CinemachineBlendDefinition m_DefaultBlend; // 0x90
	public CinemachineBlenderSettings m_CustomBlends; // 0xA0
	private ICinemachineCamera <LiveChild>k__BackingField; // 0xA8
	private CameraState m_State; // 0xB0
	private float mActivationTime; // 0x190
	private float mPendingActivationTime; // 0x194
	private ICinemachineCamera mPendingCamera; // 0x198
	private CinemachineBlend mActiveBlend; // 0x1A0
	private bool mRandomizeNow; // 0x1A8
	private CinemachineVirtualCameraBase[] m_RandomizedChilden; // 0x1B0
	private ICinemachineCamera <TransitioningFrom>k__BackingField; // 0x1B8

	// Properties
	public override string Description { get; }
	public ICinemachineCamera LiveChild { get; set; }
	public override CameraState State { get; }
	public override Transform LookAt { get; set; }
	public override Transform Follow { get; set; }
	public bool IsBlending { get; }
	public CinemachineVirtualCameraBase[] ChildCameras { get; }
	private ICinemachineCamera TransitioningFrom { get; set; }

	// Methods
	// RVA: 0x3D3DF0 Offset: 0x3D25F0 VA: 0x1803D3DF0 Slot: 17
	public override string get_Description() { }
	// RVA: 0x1A2100 Offset: 0x1A0900 VA: 0x1801A2100
	public void set_LiveChild(ICinemachineCamera value) { }
	// RVA: 0x1A20F0 Offset: 0x1A08F0 VA: 0x1801A20F0
	public ICinemachineCamera get_LiveChild() { }
	// RVA: 0x3D3F30 Offset: 0x3D2730 VA: 0x1803D3F30 Slot: 19
	public override CameraState get_State() { }
	// RVA: 0x3D3FC0 Offset: 0x3D27C0 VA: 0x1803D3FC0 Slot: 20
	public override bool IsLiveChild(ICinemachineCamera vcam, bool dominantChildOnly = False) { }
	// RVA: 0x21EFB0 Offset: 0x21D7B0 VA: 0x18021EFB0 Slot: 21
	public override Transform get_LookAt() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0 Slot: 22
	public override void set_LookAt(Transform value) { }
	// RVA: 0x21EFC0 Offset: 0x21D7C0 VA: 0x18021EFC0 Slot: 23
	public override Transform get_Follow() { }
	// RVA: 0x21EFD0 Offset: 0x21D7D0 VA: 0x18021EFD0 Slot: 24
	public override void set_Follow(Transform value) { }
	// RVA: 0x3D3FF0 Offset: 0x3D27F0 VA: 0x1803D3FF0 Slot: 35
	public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x3D40E0 Offset: 0x3D28E0 VA: 0x1803D40E0 Slot: 27
	public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x3D44D0 Offset: 0x3D2CD0 VA: 0x1803D44D0 Slot: 32
	protected override void OnEnable() { }
	// RVA: 0x3D4670 Offset: 0x3D2E70 VA: 0x1803D4670 Slot: 33
	protected override void OnDisable() { }
	// RVA: 0x3D4770 Offset: 0x3D2F70 VA: 0x1803D4770
	public void OnTransformChildrenChanged() { }
	// RVA: 0x3D4790 Offset: 0x3D2F90 VA: 0x1803D4790
	private void OnGuiHandler() { }
	// RVA: 0x3D4930 Offset: 0x3D3130 VA: 0x1803D4930
	public bool get_IsBlending() { }
	// RVA: 0x3D4940 Offset: 0x3D3140 VA: 0x1803D4940
	public CinemachineVirtualCameraBase[] get_ChildCameras() { }
	// RVA: 0x3D4770 Offset: 0x3D2F70 VA: 0x1803D4770
	private void InvalidateListOfChildren() { }
	// RVA: 0x3D4960 Offset: 0x3D3160 VA: 0x1803D4960
	public void ResetRandomization() { }
	// RVA: 0x3D4980 Offset: 0x3D3180 VA: 0x1803D4980
	private void UpdateListOfChildren() { }
	// RVA: 0x3D4C00 Offset: 0x3D3400 VA: 0x1803D4C00
	private ICinemachineCamera ChooseCurrentCamera(Vector3 worldUp) { }
	// RVA: 0x3D5300 Offset: 0x3D3B00 VA: 0x1803D5300
	private CinemachineVirtualCameraBase[] Randomize(CinemachineVirtualCameraBase[] src) { }
	// RVA: 0x3D57C0 Offset: 0x3D3FC0 VA: 0x1803D57C0
	private CinemachineBlendDefinition LookupBlend(ICinemachineCamera fromKey, ICinemachineCamera toKey) { }
	// RVA: 0x3D59D0 Offset: 0x3D41D0 VA: 0x1803D59D0 Slot: 28
	public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
	// RVA: 0x1AE380 Offset: 0x1ACB80 VA: 0x1801AE380
	private ICinemachineCamera get_TransitioningFrom() { }
	// RVA: 0x3D5AB0 Offset: 0x3D42B0 VA: 0x1803D5AB0
	private void set_TransitioningFrom(ICinemachineCamera value) { }
	// RVA: 0x3D5AC0 Offset: 0x3D42C0 VA: 0x1803D5AC0
	public void .ctor() { }
}

// Namespace: 
private struct CinemachineClearShot.Pair // TypeDefIndex: 2620
{
	// Fields
	public int a; // 0x0
	public float b; // 0x4
}

// Namespace: 
[Serializable]
private sealed class CinemachineClearShot.<>c // TypeDefIndex: 2621
{
	// Fields
	public static readonly CinemachineClearShot.<>c <>9; // 0x0
	public static Comparison<CinemachineClearShot.Pair> <>9__46_0; // 0x8

	// Methods
	// RVA: 0x63BC80 Offset: 0x63A480 VA: 0x18063BC80
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x63BD00 Offset: 0x63A500 VA: 0x18063BD00
	internal int <Randomize>b__46_0(CinemachineClearShot.Pair p1, CinemachineClearShot.Pair p2) { }
}

// Namespace: Cinemachine
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineCollider : CinemachineExtension // TypeDefIndex: 2622
{
	// Fields
	public LayerMask m_CollideAgainst; // 0x28
	public string m_IgnoreTag; // 0x30
	public LayerMask m_TransparentLayers; // 0x38
	public float m_MinimumDistanceFromTarget; // 0x3C
	[FormerlySerializedAsAttribute] // RVA: 0x103230 Offset: 0x102630 VA: 0x180103230
	public bool m_AvoidObstacles; // 0x40
	[FormerlySerializedAsAttribute] // RVA: 0x103260 Offset: 0x102660 VA: 0x180103260
	public float m_DistanceLimit; // 0x44
	public float m_MinimumOcclusionTime; // 0x48
	public float m_CameraRadius; // 0x4C
	public CinemachineCollider.ResolutionStrategy m_Strategy; // 0x50
	public int m_MaximumEffort; // 0x54
	public float m_SmoothingTime; // 0x58
	[FormerlySerializedAsAttribute] // RVA: 0x103290 Offset: 0x102690 VA: 0x180103290
	public float m_Damping; // 0x5C
	public float m_DampingWhenOccluded; // 0x60
	public float m_OptimalTargetDistance; // 0x64
	private const float PrecisionSlush = 0.001; // 0x0
	private RaycastHit[] m_CornerBuffer; // 0x68
	private const float AngleThreshold = 0.1; // 0x0
	private Collider[] mColliderBuffer; // 0x70
	private static SphereCollider mCameraCollider; // 0x0
	private static GameObject mCameraColliderGameObject; // 0x8

	// Properties
	public List<List<Vector3>> DebugPaths { get; }

	// Methods
	// RVA: 0x3D5C10 Offset: 0x3D4410 VA: 0x1803D5C10
	public bool IsTargetObscured(ICinemachineCamera vcam) { }
	// RVA: 0x3D5CB0 Offset: 0x3D44B0 VA: 0x1803D5CB0
	public bool CameraWasDisplaced(ICinemachineCamera vcam) { }
	// RVA: 0x3D5D50 Offset: 0x3D4550 VA: 0x1803D5D50
	private void OnValidate() { }
	// RVA: 0x3D5E30 Offset: 0x3D4630 VA: 0x1803D5E30 Slot: 5
	protected override void OnDestroy() { }
	// RVA: 0x3D5FF0 Offset: 0x3D47F0 VA: 0x1803D5FF0
	public List<List<Vector3>> get_DebugPaths() { }
	// RVA: 0x3D6190 Offset: 0x3D4990 VA: 0x1803D6190 Slot: 7
	protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime) { }
	// RVA: 0x3D6F70 Offset: 0x3D5770 VA: 0x1803D6F70
	private Vector3 PreserveLignOfSight(ref CameraState state, ref CinemachineCollider.VcamExtraState extra) { }
	// RVA: 0x3D7410 Offset: 0x3D5C10 VA: 0x1803D7410
	private Vector3 PullCameraInFrontOfNearestObstacle(Vector3 cameraPos, Vector3 lookAtPos, int layerMask, ref RaycastHit hitInfo) { }
	// RVA: 0x3D7910 Offset: 0x3D6110 VA: 0x1803D7910
	private bool RaycastIgnoreTag(Ray ray, out RaycastHit hitInfo, float rayLength, int layerMask) { }
	// RVA: 0x3D7CF0 Offset: 0x3D64F0 VA: 0x1803D7CF0
	private Vector3 PushCameraBack(Vector3 currentPos, Vector3 pushDir, RaycastHit obstacle, Vector3 lookAtPos, Plane startPlane, float targetDistance, int iterations, ref CinemachineCollider.VcamExtraState extra) { }
	// RVA: 0x3D8630 Offset: 0x3D6E30 VA: 0x1803D8630
	private bool GetWalkingDirection(Vector3 pos, Vector3 pushDir, RaycastHit obstacle, ref Vector3 outDir) { }
	// RVA: 0x3D8FC0 Offset: 0x3D77C0 VA: 0x1803D8FC0
	private float GetPushBackDistance(Ray ray, Plane startPlane, float targetDistance, Vector3 lookAtPos) { }
	// RVA: 0x3D9250 Offset: 0x3D7A50 VA: 0x1803D9250
	private float ClampRayToBounds(Ray ray, float distance, Bounds bounds) { }
	// RVA: 0x3D99E0 Offset: 0x3D81E0 VA: 0x1803D99E0
	private static void DestroyCollider() { }
	// RVA: 0x3D9B80 Offset: 0x3D8380 VA: 0x1803D9B80
	private Vector3 RespectCameraRadius(Vector3 cameraPos, ref CameraState state) { }
	// RVA: 0x3DADC0 Offset: 0x3D95C0 VA: 0x1803DADC0
	private bool CheckForTargetObstructions(CameraState state) { }
	// RVA: 0x3DB070 Offset: 0x3D9870 VA: 0x1803DB070
	private bool IsTargetOffscreen(CameraState state) { }
	// RVA: 0x3DB490 Offset: 0x3D9C90 VA: 0x1803DB490
	public void .ctor() { }
}

// Namespace: 
public enum CinemachineCollider.ResolutionStrategy // TypeDefIndex: 2623
{
	// Fields
	public int value__; // 0x0
	public const CinemachineCollider.ResolutionStrategy PullCameraForward = 0; // 0x0
	public const CinemachineCollider.ResolutionStrategy PreserveCameraHeight = 1; // 0x0
	public const CinemachineCollider.ResolutionStrategy PreserveCameraDistance = 2; // 0x0
}

// Namespace: 
private class CinemachineCollider.VcamExtraState // TypeDefIndex: 2624
{
	// Fields
	public Vector3 m_previousDisplacement; // 0x10
	public Vector3 m_previousDisplacementCorrection; // 0x1C
	public float colliderDisplacement; // 0x28
	public bool targetObscured; // 0x2C
	public float occlusionStartTime; // 0x30
	public List<Vector3> debugResolutionPath; // 0x38
	private float m_SmoothedDistance; // 0x40
	private float m_SmoothedTime; // 0x44

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void AddPointToDebugPath(Vector3 p) { }
	// RVA: 0x63BD20 Offset: 0x63A520 VA: 0x18063BD20
	public float ApplyDistanceSmoothing(float distance, float smoothingTime) { }
	// RVA: 0x63BE30 Offset: 0x63A630 VA: 0x18063BE30
	public void UpdateDistanceSmoothing(float distance, float smoothingTime) { }
	// RVA: 0x63BEB0 Offset: 0x63A6B0 VA: 0x18063BEB0
	public void ResetDistanceSmoothing(float smoothingTime) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Cinemachine
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineConfiner : CinemachineExtension // TypeDefIndex: 2625
{
	// Fields
	public CinemachineConfiner.Mode m_ConfineMode; // 0x28
	public Collider m_BoundingVolume; // 0x30
	public Collider2D m_BoundingShape2D; // 0x38
	public bool m_ConfineScreenEdges; // 0x40
	public float m_Damping; // 0x44
	private List<List<Vector2>> m_pathCache; // 0x48
	private int m_pathTotalPointCount; // 0x50

	// Properties
	public bool IsValid { get; }

	// Methods
	// RVA: 0x3E0210 Offset: 0x3DEA10 VA: 0x1803E0210
	public bool CameraWasDisplaced(CinemachineVirtualCameraBase vcam) { }
	// RVA: 0x3E02B0 Offset: 0x3DEAB0 VA: 0x1803E02B0
	private void OnValidate() { }
	// RVA: 0x3E0360 Offset: 0x3DEB60 VA: 0x1803E0360
	public bool get_IsValid() { }
	// RVA: 0x3E0460 Offset: 0x3DEC60 VA: 0x1803E0460 Slot: 7
	protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime) { }
	// RVA: 0x3E0850 Offset: 0x3DF050 VA: 0x1803E0850
	public void InvalidatePathCache() { }
	// RVA: 0x3E0860 Offset: 0x3DF060 VA: 0x1803E0860
	private bool ValidatePathCache() { }
	// RVA: 0x3E0DB0 Offset: 0x3DF5B0 VA: 0x1803E0DB0
	private Vector3 ConfinePoint(Vector3 camPos) { }
	// RVA: 0x3E13F0 Offset: 0x3DFBF0 VA: 0x1803E13F0
	private Vector3 ConfineScreenEdges(CinemachineVirtualCameraBase vcam, ref CameraState state) { }
	// RVA: 0x3E1BC0 Offset: 0x3E03C0 VA: 0x1803E1BC0
	public void .ctor() { }
}

// Namespace: 
public enum CinemachineConfiner.Mode // TypeDefIndex: 2626
{
	// Fields
	public int value__; // 0x0
	public const CinemachineConfiner.Mode Confine2D = 0; // 0x0
	public const CinemachineConfiner.Mode Confine3D = 1; // 0x0
}

// Namespace: 
private class CinemachineConfiner.VcamExtraState // TypeDefIndex: 2627
{
	// Fields
	public Vector3 m_previousDisplacement; // 0x10
	public float confinerDisplacement; // 0x1C

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Cinemachine
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineDollyCart : MonoBehaviour // TypeDefIndex: 2628
{
	// Fields
	public CinemachinePathBase m_Path; // 0x18
	public CinemachineDollyCart.UpdateMethod m_UpdateMethod; // 0x20
	public CinemachinePathBase.PositionUnits m_PositionUnits; // 0x24
	[FormerlySerializedAsAttribute] // RVA: 0x1032C0 Offset: 0x1026C0 VA: 0x1801032C0
	public float m_Speed; // 0x28
	[FormerlySerializedAsAttribute] // RVA: 0x1032F0 Offset: 0x1026F0 VA: 0x1801032F0
	public float m_Position; // 0x2C

	// Methods
	// RVA: 0x3E4680 Offset: 0x3E2E80 VA: 0x1803E4680
	private void FixedUpdate() { }
	// RVA: 0x3E4710 Offset: 0x3E2F10 VA: 0x1803E4710
	private void Update() { }
	// RVA: 0x3E47E0 Offset: 0x3E2FE0 VA: 0x1803E47E0
	private void LateUpdate() { }
	// RVA: 0x3E48C0 Offset: 0x3E30C0 VA: 0x1803E48C0
	private void SetCartPosition(float distanceAlongPath) { }
	// RVA: 0x3E4B70 Offset: 0x3E3370 VA: 0x1803E4B70
	public void .ctor() { }
}

// Namespace: 
public enum CinemachineDollyCart.UpdateMethod // TypeDefIndex: 2629
{
	// Fields
	public int value__; // 0x0
	public const CinemachineDollyCart.UpdateMethod Update = 0; // 0x0
	public const CinemachineDollyCart.UpdateMethod FixedUpdate = 1; // 0x0
	public const CinemachineDollyCart.UpdateMethod LateUpdate = 2; // 0x0
}

// Namespace: Cinemachine
[RequireComponent] // RVA: 0x103320 Offset: 0x102720 VA: 0x180103320
[ExecuteAlways] // RVA: 0x103320 Offset: 0x102720 VA: 0x180103320
[DisallowMultipleComponent] // RVA: 0x103320 Offset: 0x102720 VA: 0x180103320
public class CinemachineExternalCamera : CinemachineVirtualCameraBase // TypeDefIndex: 2630
{
	// Fields
	public Transform m_LookAt; // 0x60
	private Camera m_Camera; // 0x68
	private CameraState m_State; // 0x70
	private Transform <Follow>k__BackingField; // 0x150
	[FormerlySerializedAsAttribute] // RVA: 0x1033A0 Offset: 0x1027A0 VA: 0x1801033A0
	public CinemachineVirtualCameraBase.BlendHint m_BlendHint; // 0x158

	// Properties
	public override CameraState State { get; }
	public override Transform LookAt { get; set; }
	public override Transform Follow { get; set; }

	// Methods
	// RVA: 0x3E4E10 Offset: 0x3E3610 VA: 0x1803E4E10 Slot: 19
	public override CameraState get_State() { }
	// RVA: 0x29E380 Offset: 0x29CB80 VA: 0x18029E380 Slot: 21
	public override Transform get_LookAt() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0 Slot: 22
	public override void set_LookAt(Transform value) { }
	// RVA: 0x3E4EB0 Offset: 0x3E36B0 VA: 0x1803E4EB0 Slot: 23
	public override Transform get_Follow() { }
	// RVA: 0x3E4EC0 Offset: 0x3E36C0 VA: 0x1803E4EC0 Slot: 24
	public override void set_Follow(Transform value) { }
	// RVA: 0x3E4ED0 Offset: 0x3E36D0 VA: 0x1803E4ED0 Slot: 27
	public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x3E5710 Offset: 0x3E3F10 VA: 0x1803E5710
	public void .ctor() { }
}

// Namespace: Cinemachine
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineFollowZoom : CinemachineExtension // TypeDefIndex: 2631
{
	// Fields
	public float m_Width; // 0x28
	public float m_Damping; // 0x2C
	public float m_MinFOV; // 0x30
	public float m_MaxFOV; // 0x34

	// Methods
	// RVA: 0x3E5CE0 Offset: 0x3E44E0 VA: 0x1803E5CE0
	private void OnValidate() { }
	// RVA: 0x3E5DF0 Offset: 0x3E45F0 VA: 0x1803E5DF0 Slot: 7
	protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime) { }
	// RVA: 0x3E6200 Offset: 0x3E4A00 VA: 0x1803E6200
	public void .ctor() { }
}

// Namespace: 
private class CinemachineFollowZoom.VcamExtraState // TypeDefIndex: 2632
{
	// Fields
	public float m_previousFrameZoom; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Cinemachine
[DisallowMultipleComponent] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineFreeLook : CinemachineVirtualCameraBase // TypeDefIndex: 2633
{
	// Fields
	public Transform m_LookAt; // 0x60
	public Transform m_Follow; // 0x68
	[FormerlySerializedAsAttribute] // RVA: 0x1033D0 Offset: 0x1027D0 VA: 0x1801033D0
	public bool m_CommonLens; // 0x70
	[FormerlySerializedAsAttribute] // RVA: 0x103400 Offset: 0x102800 VA: 0x180103400
	public LensSettings m_Lens; // 0x74
	public CinemachineVirtualCameraBase.TransitionParams m_Transitions; // 0xA0
	[SerializeField] // RVA: 0x103430 Offset: 0x102830 VA: 0x180103430
	[FormerlySerializedAsAttribute] // RVA: 0x103430 Offset: 0x102830 VA: 0x180103430
	[FormerlySerializedAsAttribute] // RVA: 0x103430 Offset: 0x102830 VA: 0x180103430
	private CinemachineVirtualCameraBase.BlendHint m_LegacyBlendHint; // 0xB0
	public AxisState m_YAxis; // 0xB8
	public AxisState.Recentering m_YAxisRecentering; // 0x110
	public AxisState m_XAxis; // 0x130
	public CinemachineOrbitalTransposer.Heading m_Heading; // 0x188
	public AxisState.Recentering m_RecenterToTargetHeading; // 0x194
	public CinemachineTransposer.BindingMode m_BindingMode; // 0x1B0
	[FormerlySerializedAsAttribute] // RVA: 0x103490 Offset: 0x102890 VA: 0x180103490
	public float m_SplineCurvature; // 0x1B4
	public CinemachineFreeLook.Orbit[] m_Orbits; // 0x1B8
	[FormerlySerializedAsAttribute] // RVA: 0x1034C0 Offset: 0x1028C0 VA: 0x1801034C0
	[SerializeField] // RVA: 0x1034C0 Offset: 0x1028C0 VA: 0x1801034C0
	private float m_LegacyHeadingBias; // 0x1C0
	private bool mUseLegacyRigDefinitions; // 0x1C4
	private bool mIsDestroyed; // 0x1C5
	private CameraState m_State; // 0x1C8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CinemachineVirtualCamera[] m_Rigs; // 0x2A8
	private CinemachineOrbitalTransposer[] mOrbitals; // 0x2B0
	private CinemachineBlend mBlendA; // 0x2B8
	private CinemachineBlend mBlendB; // 0x2C0
	public static CinemachineFreeLook.CreateRigDelegate CreateRigOverride; // 0x0
	public static CinemachineFreeLook.DestroyRigDelegate DestroyRigOverride; // 0x8
	private float <CachedXAxisHeading>k__BackingField; // 0x2C8
	private CinemachineFreeLook.Orbit[] m_CachedOrbits; // 0x2D0
	private float m_CachedTension; // 0x2D8
	private Vector4[] m_CachedKnots; // 0x2E0
	private Vector4[] m_CachedCtrl1; // 0x2E8
	private Vector4[] m_CachedCtrl2; // 0x2F0

	// Properties
	public static string[] RigNames { get; }
	public override bool PreviousStateIsValid { get; set; }
	public override CameraState State { get; }
	public override Transform LookAt { get; set; }
	public override Transform Follow { get; set; }
	private float CachedXAxisHeading { get; set; }

	// Methods
	// RVA: 0x21E9F0 Offset: 0x21D1F0 VA: 0x18021E9F0 Slot: 31
	protected override void OnValidate() { }
	// RVA: 0x21EAC0 Offset: 0x21D2C0 VA: 0x18021EAC0
	public CinemachineVirtualCamera GetRig(int i) { }
	// RVA: 0x21EB20 Offset: 0x21D320 VA: 0x18021EB20
	public static string[] get_RigNames() { }
	// RVA: 0x21ECB0 Offset: 0x21D4B0 VA: 0x18021ECB0 Slot: 32
	protected override void OnEnable() { }
	// RVA: 0x21ECE0 Offset: 0x21D4E0 VA: 0x18021ECE0 Slot: 29
	protected override void OnDestroy() { }
	// RVA: 0x21EE70 Offset: 0x21D670 VA: 0x18021EE70
	private void OnTransformChildrenChanged() { }
	// RVA: 0x21EE80 Offset: 0x21D680 VA: 0x18021EE80
	private void Reset() { }
	// RVA: 0x16F150 Offset: 0x16D950 VA: 0x18016F150 Slot: 25
	public override bool get_PreviousStateIsValid() { }
	// RVA: 0x21EE90 Offset: 0x21D690 VA: 0x18021EE90 Slot: 26
	public override void set_PreviousStateIsValid(bool value) { }
	// RVA: 0x21EF20 Offset: 0x21D720 VA: 0x18021EF20 Slot: 19
	public override CameraState get_State() { }
	// RVA: 0x21EFB0 Offset: 0x21D7B0 VA: 0x18021EFB0 Slot: 21
	public override Transform get_LookAt() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0 Slot: 22
	public override void set_LookAt(Transform value) { }
	// RVA: 0x21EFC0 Offset: 0x21D7C0 VA: 0x18021EFC0 Slot: 23
	public override Transform get_Follow() { }
	// RVA: 0x21EFD0 Offset: 0x21D7D0 VA: 0x18021EFD0 Slot: 24
	public override void set_Follow(Transform value) { }
	// RVA: 0x21EFE0 Offset: 0x21D7E0 VA: 0x18021EFE0 Slot: 20
	public override bool IsLiveChild(ICinemachineCamera vcam, bool dominantChildOnly = False) { }
	// RVA: 0x21F0A0 Offset: 0x21D8A0 VA: 0x18021F0A0 Slot: 35
	public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x21F180 Offset: 0x21D980 VA: 0x18021F180 Slot: 27
	public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x21FD30 Offset: 0x21E530 VA: 0x18021FD30 Slot: 28
	public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
	// RVA: 0x220440 Offset: 0x21EC40 VA: 0x180220440
	private float GetYAxisClosestValue(Vector3 cameraPos, Vector3 up) { }
	// RVA: 0x21EE70 Offset: 0x21D670 VA: 0x18021EE70
	private void InvalidateRigCache() { }
	// RVA: 0x220B20 Offset: 0x21F320 VA: 0x180220B20
	private void DestroyRigs() { }
	// RVA: 0x2210A0 Offset: 0x21F8A0 VA: 0x1802210A0
	private CinemachineVirtualCamera[] CreateRigs(CinemachineVirtualCamera[] copyFrom) { }
	// RVA: 0x2215E0 Offset: 0x21FDE0 VA: 0x1802215E0
	private void UpdateRigCache() { }
	// RVA: 0x221890 Offset: 0x220090 VA: 0x180221890
	private int LocateExistingRigs(string[] rigNames, bool forceOrbital) { }
	// RVA: 0x222080 Offset: 0x220880 VA: 0x180222080
	private float get_CachedXAxisHeading() { }
	// RVA: 0x222090 Offset: 0x220890 VA: 0x180222090
	private void set_CachedXAxisHeading(float value) { }
	// RVA: 0x2220A0 Offset: 0x2208A0 VA: 0x1802220A0
	private float UpdateXAxisHeading(CinemachineOrbitalTransposer orbital, float deltaTime, Vector3 up) { }
	// RVA: 0x222290 Offset: 0x220A90 VA: 0x180222290
	private void PushSettingsToRigs() { }
	// RVA: 0x222B30 Offset: 0x221330 VA: 0x180222B30
	private float GetYAxisValue() { }
	// RVA: 0x222B60 Offset: 0x221360 VA: 0x180222B60
	private CameraState CalculateNewState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x222DF0 Offset: 0x2215F0 VA: 0x180222DF0
	public Vector3 GetLocalPositionForCameraFromInput(float t) { }
	// RVA: 0x2230F0 Offset: 0x2218F0 VA: 0x1802230F0
	private void UpdateCachedSpline() { }
	// RVA: 0x2236F0 Offset: 0x221EF0 VA: 0x1802236F0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct CinemachineFreeLook.Orbit // TypeDefIndex: 2634
{
	// Fields
	public float m_Height; // 0x0
	public float m_Radius; // 0x4

	// Methods
	// RVA: 0x16930 Offset: 0x15D30 VA: 0x180016930
	public void .ctor(float h, float r) { }
}

// Namespace: 
public sealed class CinemachineFreeLook.CreateRigDelegate : MulticastDelegate // TypeDefIndex: 2635
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x63D7E0 Offset: 0x63BFE0 VA: 0x18063D7E0 Slot: 12
	public virtual CinemachineVirtualCamera Invoke(CinemachineFreeLook vcam, string name, CinemachineVirtualCamera copyFrom) { }
	// RVA: 0x63DD30 Offset: 0x63C530 VA: 0x18063DD30 Slot: 13
	public virtual IAsyncResult BeginInvoke(CinemachineFreeLook vcam, string name, CinemachineVirtualCamera copyFrom, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual CinemachineVirtualCamera EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class CinemachineFreeLook.DestroyRigDelegate : MulticastDelegate // TypeDefIndex: 2636
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(GameObject rig) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(GameObject rig, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Cinemachine
[DisallowMultipleComponent] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineMixingCamera : CinemachineVirtualCameraBase // TypeDefIndex: 2637
{
	// Fields
	public const int MaxCameras = 8; // 0x0
	public float m_Weight0; // 0x60
	public float m_Weight1; // 0x64
	public float m_Weight2; // 0x68
	public float m_Weight3; // 0x6C
	public float m_Weight4; // 0x70
	public float m_Weight5; // 0x74
	public float m_Weight6; // 0x78
	public float m_Weight7; // 0x7C
	private CameraState m_State; // 0x80
	private ICinemachineCamera <LiveChild>k__BackingField; // 0x160
	private Transform <LookAt>k__BackingField; // 0x168
	private Transform <Follow>k__BackingField; // 0x170
	private CinemachineVirtualCameraBase[] m_ChildCameras; // 0x178
	private Dictionary<CinemachineVirtualCameraBase, int> m_indexMap; // 0x180

	// Properties
	private ICinemachineCamera LiveChild { get; set; }
	public override CameraState State { get; }
	public override Transform LookAt { get; set; }
	public override Transform Follow { get; set; }
	public CinemachineVirtualCameraBase[] ChildCameras { get; }

	// Methods
	// RVA: 0x228170 Offset: 0x226970 VA: 0x180228170
	public float GetWeight(int index) { }
	// RVA: 0x228300 Offset: 0x226B00 VA: 0x180228300
	public void SetWeight(int index, float w) { }
	// RVA: 0x2284C0 Offset: 0x226CC0 VA: 0x1802284C0
	public float GetWeight(CinemachineVirtualCameraBase vcam) { }
	// RVA: 0x228750 Offset: 0x226F50 VA: 0x180228750
	public void SetWeight(CinemachineVirtualCameraBase vcam, float w) { }
	// RVA: 0x2289F0 Offset: 0x2271F0 VA: 0x1802289F0
	private void set_LiveChild(ICinemachineCamera value) { }
	// RVA: 0x228A00 Offset: 0x227200 VA: 0x180228A00
	private ICinemachineCamera get_LiveChild() { }
	// RVA: 0x228A10 Offset: 0x227210 VA: 0x180228A10 Slot: 19
	public override CameraState get_State() { }
	// RVA: 0x228A90 Offset: 0x227290 VA: 0x180228A90 Slot: 21
	public override Transform get_LookAt() { }
	// RVA: 0x228AA0 Offset: 0x2272A0 VA: 0x180228AA0 Slot: 22
	public override void set_LookAt(Transform value) { }
	// RVA: 0x228AB0 Offset: 0x2272B0 VA: 0x180228AB0 Slot: 23
	public override Transform get_Follow() { }
	// RVA: 0x228AC0 Offset: 0x2272C0 VA: 0x180228AC0 Slot: 24
	public override void set_Follow(Transform value) { }
	// RVA: 0x228AD0 Offset: 0x2272D0 VA: 0x180228AD0 Slot: 35
	public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x228BC0 Offset: 0x2273C0 VA: 0x180228BC0 Slot: 32
	protected override void OnEnable() { }
	// RVA: 0x228BF0 Offset: 0x2273F0 VA: 0x180228BF0
	public void OnTransformChildrenChanged() { }
	// RVA: 0x228C10 Offset: 0x227410 VA: 0x180228C10 Slot: 31
	protected override void OnValidate() { }
	// RVA: 0x228D00 Offset: 0x227500 VA: 0x180228D00 Slot: 20
	public override bool IsLiveChild(ICinemachineCamera vcam, bool dominantChildOnly = False) { }
	// RVA: 0x228DC0 Offset: 0x2275C0 VA: 0x180228DC0
	public CinemachineVirtualCameraBase[] get_ChildCameras() { }
	// RVA: 0x228BF0 Offset: 0x2273F0 VA: 0x180228BF0
	protected void InvalidateListOfChildren() { }
	// RVA: 0x228DE0 Offset: 0x2275E0 VA: 0x180228DE0
	protected void ValidateListOfChildren() { }
	// RVA: 0x2290D0 Offset: 0x2278D0 VA: 0x1802290D0 Slot: 28
	public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
	// RVA: 0x2292A0 Offset: 0x227AA0 VA: 0x1802292A0 Slot: 27
	public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x2297B0 Offset: 0x227FB0 VA: 0x1802297B0
	public void .ctor() { }
}

// Namespace: Cinemachine
public class CinemachinePath : CinemachinePathBase // TypeDefIndex: 2638
{
	// Fields
	public bool m_Looped; // 0x48
	public CinemachinePath.Waypoint[] m_Waypoints; // 0x50

	// Properties
	public override float MinPos { get; }
	public override float MaxPos { get; }
	public override bool Looped { get; }
	public override int DistanceCacheSampleStepsPerSegment { get; }

	// Methods
	// RVA: 0x1BF170 Offset: 0x1BD970 VA: 0x1801BF170 Slot: 4
	public override float get_MinPos() { }
	// RVA: 0x22D4D0 Offset: 0x22BCD0 VA: 0x18022D4D0 Slot: 5
	public override float get_MaxPos() { }
	// RVA: 0x16F150 Offset: 0x16D950 VA: 0x18016F150 Slot: 6
	public override bool get_Looped() { }
	// RVA: 0x22D510 Offset: 0x22BD10 VA: 0x18022D510
	private void Reset() { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 13
	public override int get_DistanceCacheSampleStepsPerSegment() { }
	// RVA: 0x22D660 Offset: 0x22BE60 VA: 0x18022D660
	private float GetBoundingIndices(float pos, out int indexA, out int indexB) { }
	// RVA: 0x22D810 Offset: 0x22C010 VA: 0x18022D810 Slot: 8
	public override Vector3 EvaluatePosition(float pos) { }
	// RVA: 0x22DC70 Offset: 0x22C470 VA: 0x18022DC70 Slot: 9
	public override Vector3 EvaluateTangent(float pos) { }
	// RVA: 0x22E130 Offset: 0x22C930 VA: 0x18022E130 Slot: 10
	public override Quaternion EvaluateOrientation(float pos) { }
	// RVA: 0x22E6C0 Offset: 0x22CEC0 VA: 0x18022E6C0
	private void OnValidate() { }
	// RVA: 0x22E6E0 Offset: 0x22CEE0 VA: 0x18022E6E0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct CinemachinePath.Waypoint // TypeDefIndex: 2639
{
	// Fields
	public Vector3 position; // 0x0
	public Vector3 tangent; // 0xC
	public float roll; // 0x18
}

// Namespace: Cinemachine
public sealed class CinemachinePipeline : MonoBehaviour // TypeDefIndex: 2640
{
	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: Cinemachine
public class CinemachinePixelPerfect : MonoBehaviour // TypeDefIndex: 2641
{
	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: Cinemachine
public class CinemachineSmoothPath : CinemachinePathBase // TypeDefIndex: 2642
{
	// Fields
	public bool m_Looped; // 0x48
	public CinemachineSmoothPath.Waypoint[] m_Waypoints; // 0x50
	private CinemachineSmoothPath.Waypoint[] m_ControlPoints1; // 0x58
	private CinemachineSmoothPath.Waypoint[] m_ControlPoints2; // 0x60
	private bool m_IsLoopedCache; // 0x68

	// Properties
	public override float MinPos { get; }
	public override float MaxPos { get; }
	public override bool Looped { get; }
	public override int DistanceCacheSampleStepsPerSegment { get; }

	// Methods
	// RVA: 0x1BF170 Offset: 0x1BD970 VA: 0x1801BF170 Slot: 4
	public override float get_MinPos() { }
	// RVA: 0x22D4D0 Offset: 0x22BCD0 VA: 0x18022D4D0 Slot: 5
	public override float get_MaxPos() { }
	// RVA: 0x16F150 Offset: 0x16D950 VA: 0x18016F150 Slot: 6
	public override bool get_Looped() { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 13
	public override int get_DistanceCacheSampleStepsPerSegment() { }
	// RVA: 0x22E6C0 Offset: 0x22CEC0 VA: 0x18022E6C0
	private void OnValidate() { }
	// RVA: 0x2319E0 Offset: 0x2301E0 VA: 0x1802319E0
	private void Reset() { }
	// RVA: 0x231B50 Offset: 0x230350 VA: 0x180231B50 Slot: 14
	public override void InvalidateDistanceCache() { }
	// RVA: 0x231B70 Offset: 0x230370 VA: 0x180231B70
	private void UpdateControlPoints() { }
	// RVA: 0x231E50 Offset: 0x230650 VA: 0x180231E50
	private float GetBoundingIndices(float pos, out int indexA, out int indexB) { }
	// RVA: 0x231FB0 Offset: 0x2307B0 VA: 0x180231FB0 Slot: 8
	public override Vector3 EvaluatePosition(float pos) { }
	// RVA: 0x232310 Offset: 0x230B10 VA: 0x180232310 Slot: 9
	public override Vector3 EvaluateTangent(float pos) { }
	// RVA: 0x232740 Offset: 0x230F40 VA: 0x180232740 Slot: 10
	public override Quaternion EvaluateOrientation(float pos) { }
	// RVA: 0x232E20 Offset: 0x231620 VA: 0x180232E20
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct CinemachineSmoothPath.Waypoint // TypeDefIndex: 2643
{
	// Fields
	public Vector3 position; // 0x0
	public float roll; // 0xC

	// Properties
	internal Vector4 AsVector4 { get; }

	// Methods
	// RVA: 0x23590 Offset: 0x22990 VA: 0x180023590
	internal Vector4 get_AsVector4() { }
	// RVA: 0x63FCF0 Offset: 0x63E4F0 VA: 0x18063FCF0
	internal static CinemachineSmoothPath.Waypoint FromVector4(Vector4 v) { }
}

// Namespace: Cinemachine
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[DisallowMultipleComponent] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineStateDrivenCamera : CinemachineVirtualCameraBase // TypeDefIndex: 2644
{
	// Fields
	public Transform m_LookAt; // 0x60
	public Transform m_Follow; // 0x68
	public Animator m_AnimatedTarget; // 0x70
	public int m_LayerIndex; // 0x78
	public bool m_ShowDebugText; // 0x7C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal CinemachineVirtualCameraBase[] m_ChildCameras; // 0x80
	public CinemachineStateDrivenCamera.Instruction[] m_Instructions; // 0x88
	public CinemachineBlendDefinition m_DefaultBlend; // 0x90
	public CinemachineBlenderSettings m_CustomBlends; // 0xA0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal CinemachineStateDrivenCamera.ParentHash[] m_ParentHash; // 0xA8
	private ICinemachineCamera <LiveChild>k__BackingField; // 0xB0
	private ICinemachineCamera <TransitioningFrom>k__BackingField; // 0xB8
	private CameraState m_State; // 0xC0
	private Dictionary<AnimationClip, List<CinemachineStateDrivenCamera.HashPair>> mHashCache; // 0x1A0
	private float mActivationTime; // 0x1A8
	private CinemachineStateDrivenCamera.Instruction mActiveInstruction; // 0x1B0
	private float mPendingActivationTime; // 0x1C8
	private CinemachineStateDrivenCamera.Instruction mPendingInstruction; // 0x1D0
	private CinemachineBlend mActiveBlend; // 0x1E8
	private Dictionary<int, int> mInstructionDictionary; // 0x1F0
	private Dictionary<int, int> mStateParentLookup; // 0x1F8
	private List<AnimatorClipInfo> m_clipInfoList; // 0x200

	// Properties
	public override string Description { get; }
	public ICinemachineCamera LiveChild { get; set; }
	public override CameraState State { get; }
	public override Transform LookAt { get; set; }
	public override Transform Follow { get; set; }
	private ICinemachineCamera TransitioningFrom { get; set; }
	public CinemachineVirtualCameraBase[] ChildCameras { get; }
	public bool IsBlending { get; }

	// Methods
	// RVA: 0x232EB0 Offset: 0x2316B0 VA: 0x180232EB0 Slot: 17
	public override string get_Description() { }
	// RVA: 0x16C280 Offset: 0x16AA80 VA: 0x18016C280
	public void set_LiveChild(ICinemachineCamera value) { }
	// RVA: 0x232FF0 Offset: 0x2317F0 VA: 0x180232FF0
	public ICinemachineCamera get_LiveChild() { }
	// RVA: 0x233000 Offset: 0x231800 VA: 0x180233000 Slot: 20
	public override bool IsLiveChild(ICinemachineCamera vcam, bool dominantChildOnly = False) { }
	// RVA: 0x233030 Offset: 0x231830 VA: 0x180233030 Slot: 19
	public override CameraState get_State() { }
	// RVA: 0x21EFB0 Offset: 0x21D7B0 VA: 0x18021EFB0 Slot: 21
	public override Transform get_LookAt() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0 Slot: 22
	public override void set_LookAt(Transform value) { }
	// RVA: 0x21EFC0 Offset: 0x21D7C0 VA: 0x18021EFC0 Slot: 23
	public override Transform get_Follow() { }
	// RVA: 0x21EFD0 Offset: 0x21D7D0 VA: 0x18021EFD0 Slot: 24
	public override void set_Follow(Transform value) { }
	// RVA: 0x2330C0 Offset: 0x2318C0 VA: 0x1802330C0 Slot: 35
	public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x2331B0 Offset: 0x2319B0 VA: 0x1802331B0 Slot: 28
	public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
	// RVA: 0x16C290 Offset: 0x16AA90 VA: 0x18016C290
	private ICinemachineCamera get_TransitioningFrom() { }
	// RVA: 0x16C2A0 Offset: 0x16AAA0 VA: 0x18016C2A0
	private void set_TransitioningFrom(ICinemachineCamera value) { }
	// RVA: 0x233270 Offset: 0x231A70 VA: 0x180233270 Slot: 27
	public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x2337A0 Offset: 0x231FA0 VA: 0x1802337A0 Slot: 32
	protected override void OnEnable() { }
	// RVA: 0x233930 Offset: 0x232130 VA: 0x180233930 Slot: 33
	protected override void OnDisable() { }
	// RVA: 0x233A30 Offset: 0x232230 VA: 0x180233A30
	public void OnTransformChildrenChanged() { }
	// RVA: 0x233A50 Offset: 0x232250 VA: 0x180233A50
	private void OnGuiHandler() { }
	// RVA: 0x233BF0 Offset: 0x2323F0 VA: 0x180233BF0
	public CinemachineVirtualCameraBase[] get_ChildCameras() { }
	// RVA: 0x233C10 Offset: 0x232410 VA: 0x180233C10
	public bool get_IsBlending() { }
	// RVA: 0x233C20 Offset: 0x232420 VA: 0x180233C20
	public static int CreateFakeHash(int parentHash, AnimationClip clip) { }
	// RVA: 0x233D20 Offset: 0x232520 VA: 0x180233D20
	private int LookupFakeHash(int parentHash, AnimationClip clip) { }
	// RVA: 0x233A30 Offset: 0x232230 VA: 0x180233A30
	private void InvalidateListOfChildren() { }
	// RVA: 0x234120 Offset: 0x232920 VA: 0x180234120
	private void UpdateListOfChildren() { }
	// RVA: 0x234400 Offset: 0x232C00 VA: 0x180234400
	internal void ValidateInstructions() { }
	// RVA: 0x234790 Offset: 0x232F90 VA: 0x180234790
	private CinemachineVirtualCameraBase ChooseCurrentCamera() { }
	// RVA: 0x235030 Offset: 0x233830 VA: 0x180235030
	private int GetClipHash(int hash, List<AnimatorClipInfo> clips) { }
	// RVA: 0x2351D0 Offset: 0x2339D0 VA: 0x1802351D0
	private CinemachineBlendDefinition LookupBlend(ICinemachineCamera fromKey, ICinemachineCamera toKey) { }
	// RVA: 0x2353E0 Offset: 0x233BE0 VA: 0x1802353E0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct CinemachineStateDrivenCamera.Instruction // TypeDefIndex: 2645
{
	// Fields
	public int m_FullHash; // 0x0
	public CinemachineVirtualCameraBase m_VirtualCamera; // 0x8
	public float m_ActivateAfter; // 0x10
	public float m_MinDuration; // 0x14
}

// Namespace: 
[Serializable]
internal struct CinemachineStateDrivenCamera.ParentHash // TypeDefIndex: 2646
{
	// Fields
	public int m_Hash; // 0x0
	public int m_ParentHash; // 0x4
}

// Namespace: 
private struct CinemachineStateDrivenCamera.HashPair // TypeDefIndex: 2647
{
	// Fields
	public int parentHash; // 0x0
	public int hash; // 0x4
}

// Namespace: Cinemachine
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineStoryboard : CinemachineExtension // TypeDefIndex: 2648
{
	// Fields
	public static bool s_StoryboardGlobalMute; // 0x0
	public bool m_ShowImage; // 0x28
	public Texture m_Image; // 0x30
	public CinemachineStoryboard.FillStrategy m_Aspect; // 0x38
	public float m_Alpha; // 0x3C
	public Vector2 m_Center; // 0x40
	public Vector3 m_Rotation; // 0x48
	public Vector2 m_Scale; // 0x54
	public bool m_SyncScale; // 0x5C
	public bool m_MuteCamera; // 0x5D
	public float m_SplitView; // 0x60
	private List<CinemachineStoryboard.CanvasInfo> mCanvasInfo; // 0x68

	// Properties
	private string CanvasName { get; }

	// Methods
	// RVA: 0x235620 Offset: 0x233E20 VA: 0x180235620 Slot: 7
	protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float wipeAmountTime) { }
	// RVA: 0x235750 Offset: 0x233F50 VA: 0x180235750 Slot: 6
	protected override void ConnectToVcam(bool connect) { }
	// RVA: 0x235920 Offset: 0x234120 VA: 0x180235920
	private string get_CanvasName() { }
	// RVA: 0x235A10 Offset: 0x234210 VA: 0x180235A10
	private void CameraUpdatedCallback(CinemachineBrain brain) { }
	// RVA: 0x235D10 Offset: 0x234510 VA: 0x180235D10
	private CinemachineStoryboard.CanvasInfo LocateMyCanvas(CinemachineBrain parent, bool createIfNotFound) { }
	// RVA: 0x2361B0 Offset: 0x2349B0 VA: 0x1802361B0
	private void CreateCanvas(CinemachineStoryboard.CanvasInfo ci) { }
	// RVA: 0x236970 Offset: 0x235170 VA: 0x180236970
	private void DestroyCanvas() { }
	// RVA: 0x236C20 Offset: 0x235420 VA: 0x180236C20
	private void PlaceImage(CinemachineStoryboard.CanvasInfo ci, float alpha) { }
	// RVA: 0x2377B0 Offset: 0x235FB0 VA: 0x1802377B0
	private static void StaticBlendingHandler(CinemachineBrain brain) { }
	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xDC810 Offset: 0xDBC10 VA: 0x1800DC810
	// RVA: 0x237A80 Offset: 0x236280 VA: 0x180237A80
	private static void InitializeModule() { }
	// RVA: 0x237BE0 Offset: 0x2363E0 VA: 0x180237BE0
	public void .ctor() { }
}

// Namespace: 
public enum CinemachineStoryboard.FillStrategy // TypeDefIndex: 2649
{
	// Fields
	public int value__; // 0x0
	public const CinemachineStoryboard.FillStrategy BestFit = 0; // 0x0
	public const CinemachineStoryboard.FillStrategy CropImageToFit = 1; // 0x0
	public const CinemachineStoryboard.FillStrategy StretchToFit = 2; // 0x0
}

// Namespace: 
private class CinemachineStoryboard.CanvasInfo // TypeDefIndex: 2650
{
	// Fields
	public GameObject mCanvas; // 0x10
	public CinemachineBrain mCanvasParent; // 0x18
	public RectTransform mViewport; // 0x20
	public RawImage mRawImage; // 0x28

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Cinemachine
public interface ICinemachineTargetGroup // TypeDefIndex: 2651
{
	// Properties
	public abstract BoundingSphere Sphere { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract BoundingSphere get_Sphere() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract Bounds GetViewSpaceBoundingBox(Matrix4x4 observer) { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract void GetViewSpaceAngularBounds(Matrix4x4 observer, out Vector2 minAngles, out Vector2 maxAngles, out Vector2 zRange) { }
}

// Namespace: Cinemachine
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineTargetGroup : MonoBehaviour, ICinemachineTargetGroup // TypeDefIndex: 2652
{
	// Fields
	public CinemachineTargetGroup.PositionMode m_PositionMode; // 0x18
	public CinemachineTargetGroup.RotationMode m_RotationMode; // 0x1C
	public CinemachineTargetGroup.UpdateMethod m_UpdateMethod; // 0x20
	public CinemachineTargetGroup.Target[] m_Targets; // 0x28
	private Bounds <BoundingBox>k__BackingField; // 0x30
	private float mMaxWeight; // 0x48
	private Vector3 mAveragePos; // 0x4C

	// Properties
	public Transform Transform { get; }
	public Bounds BoundingBox { get; set; }
	public BoundingSphere Sphere { get; }
	public bool IsEmpty { get; }

	// Methods
	// RVA: 0x1BF8A0 Offset: 0x1BE0A0 VA: 0x1801BF8A0 Slot: 7
	public Transform get_Transform() { }
	// RVA: 0x237D30 Offset: 0x236530 VA: 0x180237D30 Slot: 8
	public Bounds get_BoundingBox() { }
	// RVA: 0x237D50 Offset: 0x236550 VA: 0x180237D50
	private void set_BoundingBox(Bounds value) { }
	// RVA: 0x237D70 Offset: 0x236570 VA: 0x180237D70 Slot: 4
	public BoundingSphere get_Sphere() { }
	// RVA: 0x237EC0 Offset: 0x2366C0 VA: 0x180237EC0 Slot: 9
	public bool get_IsEmpty() { }
	// RVA: 0x238020 Offset: 0x236820 VA: 0x180238020
	public void AddMember(Transform t, float weight, float radius) { }
	// RVA: 0x238180 Offset: 0x236980 VA: 0x180238180
	public void RemoveMember(Transform t) { }
	// RVA: 0x238350 Offset: 0x236B50 VA: 0x180238350
	public int FindMember(Transform t) { }
	// RVA: 0x238460 Offset: 0x236C60 VA: 0x180238460
	public BoundingSphere GetWeightedBoundsForMember(int index) { }
	// RVA: 0x238650 Offset: 0x236E50 VA: 0x180238650 Slot: 5
	public Bounds GetViewSpaceBoundingBox(Matrix4x4 observer) { }
	// RVA: 0x238B40 Offset: 0x237340 VA: 0x180238B40
	private static BoundingSphere WeightedMemberBounds(CinemachineTargetGroup.Target t, Vector3 avgPos, float maxWeight) { }
	// RVA: 0x238D70 Offset: 0x237570 VA: 0x180238D70
	public void DoUpdate() { }
	// RVA: 0x239100 Offset: 0x237900 VA: 0x180239100
	private Vector3 CalculateAveragePosition(out float maxWeight) { }
	// RVA: 0x239560 Offset: 0x237D60 VA: 0x180239560
	private Quaternion CalculateAverageOrientation() { }
	// RVA: 0x2398D0 Offset: 0x2380D0 VA: 0x1802398D0
	private Bounds CalculateBoundingBox(Vector3 avgPos, float maxWeight) { }
	// RVA: 0x239C80 Offset: 0x238480 VA: 0x180239C80
	private void OnValidate() { }
	// RVA: 0x239E00 Offset: 0x238600 VA: 0x180239E00
	private void FixedUpdate() { }
	// RVA: 0x239E10 Offset: 0x238610 VA: 0x180239E10
	private void Update() { }
	// RVA: 0x239E80 Offset: 0x238680 VA: 0x180239E80
	private void LateUpdate() { }
	// RVA: 0x239E90 Offset: 0x238690 VA: 0x180239E90 Slot: 6
	public void GetViewSpaceAngularBounds(Matrix4x4 observer, out Vector2 minAngles, out Vector2 maxAngles, out Vector2 zRange) { }
	// RVA: 0x23A610 Offset: 0x238E10 VA: 0x18023A610
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct CinemachineTargetGroup.Target // TypeDefIndex: 2653
{
	// Fields
	public Transform target; // 0x0
	public float weight; // 0x8
	public float radius; // 0xC
}

// Namespace: 
public enum CinemachineTargetGroup.PositionMode // TypeDefIndex: 2654
{
	// Fields
	public int value__; // 0x0
	public const CinemachineTargetGroup.PositionMode GroupCenter = 0; // 0x0
	public const CinemachineTargetGroup.PositionMode GroupAverage = 1; // 0x0
}

// Namespace: 
public enum CinemachineTargetGroup.RotationMode // TypeDefIndex: 2655
{
	// Fields
	public int value__; // 0x0
	public const CinemachineTargetGroup.RotationMode Manual = 0; // 0x0
	public const CinemachineTargetGroup.RotationMode GroupAverage = 1; // 0x0
}

// Namespace: 
public enum CinemachineTargetGroup.UpdateMethod // TypeDefIndex: 2656
{
	// Fields
	public int value__; // 0x0
	public const CinemachineTargetGroup.UpdateMethod Update = 0; // 0x0
	public const CinemachineTargetGroup.UpdateMethod FixedUpdate = 1; // 0x0
	public const CinemachineTargetGroup.UpdateMethod LateUpdate = 2; // 0x0
}

// Namespace: Cinemachine
[DisallowMultipleComponent] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineVirtualCamera : CinemachineVirtualCameraBase // TypeDefIndex: 2657
{
	// Fields
	public Transform m_LookAt; // 0x60
	public Transform m_Follow; // 0x68
	[FormerlySerializedAsAttribute] // RVA: 0x103400 Offset: 0x102800 VA: 0x180103400
	public LensSettings m_Lens; // 0x70
	public CinemachineVirtualCameraBase.TransitionParams m_Transitions; // 0xA0
	[SerializeField] // RVA: 0x1034F0 Offset: 0x1028F0 VA: 0x1801034F0
	[FormerlySerializedAsAttribute] // RVA: 0x1034F0 Offset: 0x1028F0 VA: 0x1801034F0
	[FormerlySerializedAsAttribute] // RVA: 0x1034F0 Offset: 0x1028F0 VA: 0x1801034F0
	private CinemachineVirtualCameraBase.BlendHint m_LegacyBlendHint; // 0xB0
	public const string PipelineName = "cm"; // 0x0
	public static CinemachineVirtualCamera.CreatePipelineDelegate CreatePipelineOverride; // 0x0
	public static CinemachineVirtualCamera.DestroyPipelineDelegate DestroyPipelineOverride; // 0x8
	private bool <UserIsDragging>k__BackingField; // 0xB4
	private CameraState m_State; // 0xB8
	private CinemachineComponentBase[] m_ComponentPipeline; // 0x198
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Transform m_ComponentOwner; // 0x1A0
	private Transform mCachedLookAtTarget; // 0x1A8
	private CinemachineVirtualCameraBase mCachedLookAtTargetVcam; // 0x1B0

	// Properties
	public override CameraState State { get; }
	public override Transform LookAt { get; set; }
	public override Transform Follow { get; set; }
	public bool UserIsDragging { get; set; }

	// Methods
	// RVA: 0x23EA80 Offset: 0x23D280 VA: 0x18023EA80 Slot: 19
	public override CameraState get_State() { }
	// RVA: 0x21EFB0 Offset: 0x21D7B0 VA: 0x18021EFB0 Slot: 21
	public override Transform get_LookAt() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0 Slot: 22
	public override void set_LookAt(Transform value) { }
	// RVA: 0x21EFC0 Offset: 0x21D7C0 VA: 0x18021EFC0 Slot: 23
	public override Transform get_Follow() { }
	// RVA: 0x21EFD0 Offset: 0x21D7D0 VA: 0x18021EFD0 Slot: 24
	public override void set_Follow(Transform value) { }
	// RVA: 0x23EB10 Offset: 0x23D310 VA: 0x18023EB10 Slot: 27
	public override void InternalUpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x23EFB0 Offset: 0x23D7B0 VA: 0x18023EFB0 Slot: 32
	protected override void OnEnable() { }
	// RVA: 0x23F2E0 Offset: 0x23DAE0 VA: 0x18023F2E0 Slot: 29
	protected override void OnDestroy() { }
	// RVA: 0x23F580 Offset: 0x23DD80 VA: 0x18023F580 Slot: 31
	protected override void OnValidate() { }
	// RVA: 0x23F5C0 Offset: 0x23DDC0 VA: 0x18023F5C0
	private void OnTransformChildrenChanged() { }
	// RVA: 0x23F5D0 Offset: 0x23DDD0 VA: 0x18023F5D0
	private void Reset() { }
	// RVA: 0x23F5E0 Offset: 0x23DDE0 VA: 0x18023F5E0
	private void DestroyPipeline() { }
	// RVA: 0x23FA10 Offset: 0x23E210 VA: 0x18023FA10
	private Transform CreatePipeline(CinemachineVirtualCamera copyFrom) { }
	// RVA: 0x23F5C0 Offset: 0x23DDC0 VA: 0x18023F5C0
	public void InvalidateComponentPipeline() { }
	// RVA: 0x23FC60 Offset: 0x23E460 VA: 0x18023FC60
	public Transform GetComponentOwner() { }
	// RVA: 0x23FC80 Offset: 0x23E480 VA: 0x18023FC80
	public CinemachineComponentBase[] GetComponentPipeline() { }
	// RVA: 0x23FCA0 Offset: 0x23E4A0 VA: 0x18023FCA0
	public CinemachineComponentBase GetCinemachineComponent(CinemachineCore.Stage stage) { }
	// RVA: 0x52EE30 Offset: 0x52D630 VA: 0x18052EE30
	public T GetCinemachineComponent() { }
	// RVA: 0x52EA40 Offset: 0x52D240 VA: 0x18052EA40
	public T AddCinemachineComponent() { }
	// RVA: 0x52ECC0 Offset: 0x52D4C0 VA: 0x18052ECC0
	public void DestroyCinemachineComponent() { }
	// RVA: 0x23FD40 Offset: 0x23E540 VA: 0x18023FD40
	public bool get_UserIsDragging() { }
	// RVA: 0x23FD50 Offset: 0x23E550 VA: 0x18023FD50
	public void set_UserIsDragging(bool value) { }
	// RVA: 0x23FD60 Offset: 0x23E560 VA: 0x18023FD60
	private void UpdateComponentPipeline() { }
	// RVA: 0x2403F0 Offset: 0x23EBF0 VA: 0x1802403F0
	internal static void SetFlagsForHiddenChild(GameObject child) { }
	// RVA: 0x240570 Offset: 0x23ED70 VA: 0x180240570
	private CameraState CalculateNewState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x240BD0 Offset: 0x23F3D0 VA: 0x180240BD0
	private CinemachineCore.Stage AdvancePipelineStage(ref CameraState state, float deltaTime, CinemachineCore.Stage curStage, int maxStage, bool hasAim) { }
	// RVA: 0x240C70 Offset: 0x23F470 VA: 0x180240C70
	internal void SetStateRawPosition(Vector3 pos) { }
	// RVA: 0x240C90 Offset: 0x23F490 VA: 0x180240C90 Slot: 35
	public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x240FF0 Offset: 0x23F7F0 VA: 0x180240FF0 Slot: 28
	public override void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
	// RVA: 0x2413D0 Offset: 0x23FBD0 VA: 0x1802413D0
	public void .ctor() { }
}

// Namespace: 
public sealed class CinemachineVirtualCamera.CreatePipelineDelegate : MulticastDelegate // TypeDefIndex: 2658
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x63D7E0 Offset: 0x63BFE0 VA: 0x18063D7E0 Slot: 12
	public virtual Transform Invoke(CinemachineVirtualCamera vcam, string name, CinemachineComponentBase[] copyFrom) { }
	// RVA: 0x63DD30 Offset: 0x63C530 VA: 0x18063DD30 Slot: 13
	public virtual IAsyncResult BeginInvoke(CinemachineVirtualCamera vcam, string name, CinemachineComponentBase[] copyFrom, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual Transform EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class CinemachineVirtualCamera.DestroyPipelineDelegate : MulticastDelegate // TypeDefIndex: 2659
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x1D1920 Offset: 0x1D0120 VA: 0x1801D1920 Slot: 12
	public virtual void Invoke(GameObject pipeline) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(GameObject pipeline, AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[Serializable]
private sealed class CinemachineVirtualCamera.<>c // TypeDefIndex: 2660
{
	// Fields
	public static readonly CinemachineVirtualCamera.<>c <>9; // 0x0
	public static Comparison<CinemachineComponentBase> <>9__40_0; // 0x8

	// Methods
	// RVA: 0x6406D0 Offset: 0x63EED0 VA: 0x1806406D0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x640750 Offset: 0x63EF50 VA: 0x180640750
	internal int <UpdateComponentPipeline>b__40_0(CinemachineComponentBase c1, CinemachineComponentBase c2) { }
}

// Namespace: Cinemachine
public class CinemachineBasicMultiChannelPerlin : CinemachineComponentBase // TypeDefIndex: 2661
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0x103550 Offset: 0x102950 VA: 0x180103550
	public NoiseSettings m_NoiseProfile; // 0x50
	public Vector3 m_PivotOffset; // 0x58
	public float m_AmplitudeGain; // 0x64
	public float m_FrequencyGain; // 0x68
	private bool mInitialized; // 0x6C
	private float mNoiseTime; // 0x70
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 mNoiseOffsets; // 0x74

	// Properties
	public override bool IsValid { get; }
	public override CinemachineCore.Stage Stage { get; }

	// Methods
	// RVA: 0x3CC130 Offset: 0x3CA930 VA: 0x1803CC130 Slot: 4
	public override bool get_IsValid() { }
	// RVA: 0x3CC210 Offset: 0x3CAA10 VA: 0x1803CC210 Slot: 6
	public override CinemachineCore.Stage get_Stage() { }
	// RVA: 0x3CC220 Offset: 0x3CAA20 VA: 0x1803CC220 Slot: 7
	public override void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x3CCAB0 Offset: 0x3CB2B0 VA: 0x1803CCAB0
	public void ReSeed() { }
	// RVA: 0x3CCBF0 Offset: 0x3CB3F0 VA: 0x1803CCBF0
	private void Initialize() { }
	// RVA: 0x3CCE30 Offset: 0x3CB630 VA: 0x1803CCE30
	public void .ctor() { }
}

// Namespace: Cinemachine
public class CinemachineComposer : CinemachineComponentBase // TypeDefIndex: 2662
{
	// Fields
	public Vector3 m_TrackedObjectOffset; // 0x50
	public float m_LookaheadTime; // 0x5C
	public float m_LookaheadSmoothing; // 0x60
	public bool m_LookaheadIgnoreY; // 0x64
	public float m_HorizontalDamping; // 0x68
	public float m_VerticalDamping; // 0x6C
	public float m_ScreenX; // 0x70
	public float m_ScreenY; // 0x74
	public float m_DeadZoneWidth; // 0x78
	public float m_DeadZoneHeight; // 0x7C
	public float m_SoftZoneWidth; // 0x80
	public float m_SoftZoneHeight; // 0x84
	public float m_BiasX; // 0x88
	public float m_BiasY; // 0x8C
	public bool m_CenterOnActivate; // 0x90
	private Vector3 <TrackedPoint>k__BackingField; // 0x94
	private Vector3 m_CameraPosPrevFrame; // 0xA0
	private Vector3 m_LookAtPrevFrame; // 0xAC
	private Vector2 m_ScreenOffsetPrevFrame; // 0xB8
	private Quaternion m_CameraOrientationPrevFrame; // 0xC0
	internal PositionPredictor m_Predictor; // 0xD0
	private CinemachineComposer.FovCache mCache; // 0xD8

	// Properties
	public override bool IsValid { get; }
	public override CinemachineCore.Stage Stage { get; }
	public Vector3 TrackedPoint { get; set; }
	internal Rect SoftGuideRect { get; set; }
	internal Rect HardGuideRect { get; set; }

	// Methods
	// RVA: 0x3DDF50 Offset: 0x3DC750 VA: 0x1803DDF50 Slot: 4
	public override bool get_IsValid() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 6
	public override CinemachineCore.Stage get_Stage() { }
	// RVA: 0x3DE040 Offset: 0x3DC840 VA: 0x1803DE040
	public Vector3 get_TrackedPoint() { }
	// RVA: 0x3DE060 Offset: 0x3DC860 VA: 0x1803DE060
	private void set_TrackedPoint(Vector3 value) { }
	// RVA: 0x3DE080 Offset: 0x3DC880 VA: 0x1803DE080 Slot: 10
	protected virtual Vector3 GetLookAtPointAndSetTrackedPoint(Vector3 lookAt, Vector3 up, float deltaTime) { }
	// RVA: 0x3DE3F0 Offset: 0x3DCBF0 VA: 0x1803DE3F0 Slot: 9
	public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x3DE5F0 Offset: 0x3DCDF0 VA: 0x1803DE5F0 Slot: 5
	public override void PrePipelineMutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x3DE6A0 Offset: 0x3DCEA0 VA: 0x1803DE6A0 Slot: 7
	public override void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x3DF5B0 Offset: 0x3DDDB0 VA: 0x1803DF5B0
	internal Rect get_SoftGuideRect() { }
	// RVA: 0x3DF600 Offset: 0x3DDE00 VA: 0x1803DF600
	internal void set_SoftGuideRect(Rect value) { }
	// RVA: 0x3DF770 Offset: 0x3DDF70 VA: 0x1803DF770
	internal Rect get_HardGuideRect() { }
	// RVA: 0x3DF8D0 Offset: 0x3DE0D0 VA: 0x1803DF8D0
	internal void set_HardGuideRect(Rect value) { }
	// RVA: 0x3DFB60 Offset: 0x3DE360 VA: 0x1803DFB60
	private void RotateToScreenBounds(ref CameraState state, Rect screenRect, Vector3 trackedPoint, ref Quaternion rigOrientation, float fov, float fovH, float deltaTime) { }
	// RVA: 0x3DFE50 Offset: 0x3DE650 VA: 0x1803DFE50
	private bool ClampVerticalBounds(ref Rect r, Vector3 dir, Vector3 up, float fov) { }
	// RVA: 0x3E0040 Offset: 0x3DE840 VA: 0x1803E0040
	public void .ctor() { }
}

// Namespace: 
private struct CinemachineComposer.FovCache // TypeDefIndex: 2663
{
	// Fields
	public Rect mFovSoftGuideRect; // 0x0
	public Rect mFovHardGuideRect; // 0x10
	public float mFovH; // 0x20
	public float mFov; // 0x24
	private float mOrthoSizeOverDistance; // 0x28
	private float mAspect; // 0x2C
	private Rect mSoftGuideRect; // 0x30
	private Rect mHardGuideRect; // 0x40

	// Methods
	// RVA: 0x23230 Offset: 0x22630 VA: 0x180023230
	public void UpdateCache(LensSettings lens, Rect softGuide, Rect hardGuide, float targetDistance) { }
	// RVA: 0x232A0 Offset: 0x226A0 VA: 0x1800232A0
	private Rect ScreenToFOV(Rect rScreen, float fov, float fovH, float aspect) { }
}

// Namespace: Cinemachine
public class CinemachineFramingTransposer : CinemachineComponentBase // TypeDefIndex: 2664
{
	// Fields
	public float m_LookaheadTime; // 0x50
	public float m_LookaheadSmoothing; // 0x54
	public bool m_LookaheadIgnoreY; // 0x58
	public float m_XDamping; // 0x5C
	public float m_YDamping; // 0x60
	public float m_ZDamping; // 0x64
	public float m_ScreenX; // 0x68
	public float m_ScreenY; // 0x6C
	public float m_CameraDistance; // 0x70
	public float m_DeadZoneWidth; // 0x74
	public float m_DeadZoneHeight; // 0x78
	[FormerlySerializedAsAttribute] // RVA: 0x103580 Offset: 0x102980 VA: 0x180103580
	public float m_DeadZoneDepth; // 0x7C
	public bool m_UnlimitedSoftZone; // 0x80
	public float m_SoftZoneWidth; // 0x84
	public float m_SoftZoneHeight; // 0x88
	public float m_BiasX; // 0x8C
	public float m_BiasY; // 0x90
	public bool m_CenterOnActivate; // 0x94
	[FormerlySerializedAsAttribute] // RVA: 0x1035B0 Offset: 0x1029B0 VA: 0x1801035B0
	public CinemachineFramingTransposer.FramingMode m_GroupFramingMode; // 0x98
	public CinemachineFramingTransposer.AdjustmentMode m_AdjustmentMode; // 0x9C
	public float m_GroupFramingSize; // 0xA0
	public float m_MaxDollyIn; // 0xA4
	public float m_MaxDollyOut; // 0xA8
	public float m_MinimumDistance; // 0xAC
	public float m_MaximumDistance; // 0xB0
	public float m_MinimumFOV; // 0xB4
	public float m_MaximumFOV; // 0xB8
	public float m_MinimumOrthoSize; // 0xBC
	public float m_MaximumOrthoSize; // 0xC0
	private const float kMinimumCameraDistance = 0.01; // 0x0
	private Vector3 m_PreviousCameraPosition; // 0xC4
	private PositionPredictor m_Predictor; // 0xD0
	private Vector3 <TrackedPoint>k__BackingField; // 0xD8
	private bool <InheritingPosition>k__BackingField; // 0xE4
	private float m_prevFOV; // 0xE8
	private Bounds <LastBounds>k__BackingField; // 0xEC
	private Matrix4x4 <LastBoundsMatrix>k__BackingField; // 0x104

	// Properties
	internal Rect SoftGuideRect { get; set; }
	internal Rect HardGuideRect { get; set; }
	public override bool IsValid { get; }
	public override CinemachineCore.Stage Stage { get; }
	public Vector3 TrackedPoint { get; set; }
	private bool InheritingPosition { get; set; }
	public Bounds LastBounds { get; set; }
	public Matrix4x4 LastBoundsMatrix { get; set; }

	// Methods
	// RVA: 0x3E6230 Offset: 0x3E4A30 VA: 0x1803E6230
	internal Rect get_SoftGuideRect() { }
	// RVA: 0x3E6280 Offset: 0x3E4A80 VA: 0x1803E6280
	internal void set_SoftGuideRect(Rect value) { }
	// RVA: 0x3E63F0 Offset: 0x3E4BF0 VA: 0x1803E63F0
	internal Rect get_HardGuideRect() { }
	// RVA: 0x3E6550 Offset: 0x3E4D50 VA: 0x1803E6550
	internal void set_HardGuideRect(Rect value) { }
	// RVA: 0x3E67E0 Offset: 0x3E4FE0 VA: 0x1803E67E0
	private void OnValidate() { }
	// RVA: 0x3E6960 Offset: 0x3E5160 VA: 0x1803E6960 Slot: 4
	public override bool get_IsValid() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 6
	public override CinemachineCore.Stage get_Stage() { }
	// RVA: 0x3E6A50 Offset: 0x3E5250 VA: 0x1803E6A50
	public Vector3 get_TrackedPoint() { }
	// RVA: 0x3E6A70 Offset: 0x3E5270 VA: 0x1803E6A70
	private void set_TrackedPoint(Vector3 value) { }
	// RVA: 0x3E6A90 Offset: 0x3E5290 VA: 0x1803E6A90 Slot: 9
	public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x3E6C20 Offset: 0x3E5420 VA: 0x1803E6C20 Slot: 8
	public override bool OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime, ref CinemachineVirtualCameraBase.TransitionParams transitionParams) { }
	// RVA: 0x3E6E00 Offset: 0x3E5600 VA: 0x1803E6E00
	private bool get_InheritingPosition() { }
	// RVA: 0x3E6E10 Offset: 0x3E5610 VA: 0x1803E6E10
	private void set_InheritingPosition(bool value) { }
	// RVA: 0x3E6E20 Offset: 0x3E5620 VA: 0x1803E6E20
	private Rect ScreenToOrtho(Rect rScreen, float orthoSize, float aspect) { }
	// RVA: 0x3E6EC0 Offset: 0x3E56C0 VA: 0x1803E6EC0
	private Vector3 OrthoOffsetToScreenBounds(Vector3 targetPos2D, Rect screenRect) { }
	// RVA: 0x3E7010 Offset: 0x3E5810 VA: 0x1803E7010
	public Bounds get_LastBounds() { }
	// RVA: 0x3E7030 Offset: 0x3E5830 VA: 0x1803E7030
	private void set_LastBounds(Bounds value) { }
	// RVA: 0x3E7050 Offset: 0x3E5850 VA: 0x1803E7050
	public Matrix4x4 get_LastBoundsMatrix() { }
	// RVA: 0x3E7080 Offset: 0x3E5880 VA: 0x1803E7080
	private void set_LastBoundsMatrix(Matrix4x4 value) { }
	// RVA: 0x3E70B0 Offset: 0x3E58B0 VA: 0x1803E70B0 Slot: 7
	public override void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x3E8810 Offset: 0x3E7010 VA: 0x1803E8810
	private float GetTargetHeight(Vector2 boundsSize) { }
	// RVA: 0x3E8A70 Offset: 0x3E7270 VA: 0x1803E8A70
	private Vector3 ComputeGroupBounds(ICinemachineTargetGroup group, ref CameraState curState) { }
	// RVA: 0x3E92C0 Offset: 0x3E7AC0 VA: 0x1803E92C0
	private static Bounds GetScreenSpaceGroupBoundingBox(ICinemachineTargetGroup group, ref Vector3 pos, Quaternion orientation) { }
	// RVA: 0x3E9BE0 Offset: 0x3E83E0 VA: 0x1803E9BE0
	public void .ctor() { }
}

// Namespace: 
public enum CinemachineFramingTransposer.FramingMode // TypeDefIndex: 2665
{
	// Fields
	public int value__; // 0x0
	public const CinemachineFramingTransposer.FramingMode Horizontal = 0; // 0x0
	public const CinemachineFramingTransposer.FramingMode Vertical = 1; // 0x0
	public const CinemachineFramingTransposer.FramingMode HorizontalAndVertical = 2; // 0x0
	public const CinemachineFramingTransposer.FramingMode None = 3; // 0x0
}

// Namespace: 
public enum CinemachineFramingTransposer.AdjustmentMode // TypeDefIndex: 2666
{
	// Fields
	public int value__; // 0x0
	public const CinemachineFramingTransposer.AdjustmentMode ZoomOnly = 0; // 0x0
	public const CinemachineFramingTransposer.AdjustmentMode DollyOnly = 1; // 0x0
	public const CinemachineFramingTransposer.AdjustmentMode DollyThenZoom = 2; // 0x0
}

// Namespace: Cinemachine
public class CinemachineGroupComposer : CinemachineComposer // TypeDefIndex: 2667
{
	// Fields
	public float m_GroupFramingSize; // 0x128
	public CinemachineGroupComposer.FramingMode m_FramingMode; // 0x12C
	public float m_FrameDamping; // 0x130
	public CinemachineGroupComposer.AdjustmentMode m_AdjustmentMode; // 0x134
	public float m_MaxDollyIn; // 0x138
	public float m_MaxDollyOut; // 0x13C
	public float m_MinimumDistance; // 0x140
	public float m_MaximumDistance; // 0x144
	public float m_MinimumFOV; // 0x148
	public float m_MaximumFOV; // 0x14C
	public float m_MinimumOrthoSize; // 0x150
	public float m_MaximumOrthoSize; // 0x154
	private float m_prevFramingDistance; // 0x158
	private float m_prevFOV; // 0x15C
	private Bounds <LastBounds>k__BackingField; // 0x160
	private Matrix4x4 <LastBoundsMatrix>k__BackingField; // 0x178

	// Properties
	public Bounds LastBounds { get; set; }
	public Matrix4x4 LastBoundsMatrix { get; set; }

	// Methods
	// RVA: 0x223C60 Offset: 0x222460 VA: 0x180223C60
	private void OnValidate() { }
	// RVA: 0x223DC0 Offset: 0x2225C0 VA: 0x180223DC0
	public Bounds get_LastBounds() { }
	// RVA: 0x223DE0 Offset: 0x2225E0 VA: 0x180223DE0
	private void set_LastBounds(Bounds value) { }
	// RVA: 0x223E00 Offset: 0x222600 VA: 0x180223E00
	public Matrix4x4 get_LastBoundsMatrix() { }
	// RVA: 0x223E30 Offset: 0x222630 VA: 0x180223E30
	private void set_LastBoundsMatrix(Matrix4x4 value) { }
	// RVA: 0x223E60 Offset: 0x222660 VA: 0x180223E60 Slot: 7
	public override void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x225460 Offset: 0x223C60 VA: 0x180225460
	private float GetTargetHeight(Vector2 boundsSize) { }
	// RVA: 0x225720 Offset: 0x223F20 VA: 0x180225720
	private static Bounds GetScreenSpaceGroupBoundingBox(ICinemachineTargetGroup group, Matrix4x4 observer, out Vector3 newFwd) { }
	// RVA: 0x225B40 Offset: 0x224340 VA: 0x180225B40
	public void .ctor() { }
}

// Namespace: 
public enum CinemachineGroupComposer.FramingMode // TypeDefIndex: 2668
{
	// Fields
	public int value__; // 0x0
	public const CinemachineGroupComposer.FramingMode Horizontal = 0; // 0x0
	public const CinemachineGroupComposer.FramingMode Vertical = 1; // 0x0
	public const CinemachineGroupComposer.FramingMode HorizontalAndVertical = 2; // 0x0
}

// Namespace: 
public enum CinemachineGroupComposer.AdjustmentMode // TypeDefIndex: 2669
{
	// Fields
	public int value__; // 0x0
	public const CinemachineGroupComposer.AdjustmentMode ZoomOnly = 0; // 0x0
	public const CinemachineGroupComposer.AdjustmentMode DollyOnly = 1; // 0x0
	public const CinemachineGroupComposer.AdjustmentMode DollyThenZoom = 2; // 0x0
}

// Namespace: Cinemachine
public class CinemachineHardLockToTarget : CinemachineComponentBase // TypeDefIndex: 2670
{
	// Fields
	public float m_Damping; // 0x50
	private Vector3 m_PreviousTargetPosition; // 0x54

	// Properties
	public override bool IsValid { get; }
	public override CinemachineCore.Stage Stage { get; }

	// Methods
	// RVA: 0x225D80 Offset: 0x224580 VA: 0x180225D80 Slot: 4
	public override bool get_IsValid() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 6
	public override CinemachineCore.Stage get_Stage() { }
	// RVA: 0x225E70 Offset: 0x224670 VA: 0x180225E70 Slot: 7
	public override void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: Cinemachine
public class CinemachineHardLookAt : CinemachineComponentBase // TypeDefIndex: 2671
{
	// Properties
	public override bool IsValid { get; }
	public override CinemachineCore.Stage Stage { get; }

	// Methods
	// RVA: 0x226040 Offset: 0x224840 VA: 0x180226040 Slot: 4
	public override bool get_IsValid() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 6
	public override CinemachineCore.Stage get_Stage() { }
	// RVA: 0x226130 Offset: 0x224930 VA: 0x180226130 Slot: 7
	public override void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: Cinemachine
public class CinemachineOrbitalTransposer : CinemachineTransposer // TypeDefIndex: 2672
{
	// Fields
	public CinemachineOrbitalTransposer.Heading m_Heading; // 0xB8
	public AxisState.Recentering m_RecenterToTargetHeading; // 0xC4
	public AxisState m_XAxis; // 0xE0
	[SerializeField] // RVA: 0x1035E0 Offset: 0x1029E0 VA: 0x1801035E0
	[FormerlySerializedAsAttribute] // RVA: 0x1035E0 Offset: 0x1029E0 VA: 0x1801035E0
	private float m_LegacyRadius; // 0x138
	[SerializeField] // RVA: 0x103610 Offset: 0x102A10 VA: 0x180103610
	[FormerlySerializedAsAttribute] // RVA: 0x103610 Offset: 0x102A10 VA: 0x180103610
	private float m_LegacyHeightOffset; // 0x13C
	[FormerlySerializedAsAttribute] // RVA: 0x1034C0 Offset: 0x1028C0 VA: 0x1801034C0
	[SerializeField] // RVA: 0x1034C0 Offset: 0x1028C0 VA: 0x1801034C0
	private float m_LegacyHeadingBias; // 0x140
	public bool m_HeadingIsSlave; // 0x144
	internal CinemachineOrbitalTransposer.UpdateHeadingDelegate HeadingUpdater; // 0x148
	private Vector3 mLastTargetPosition; // 0x150
	private HeadingTracker mHeadingTracker; // 0x160
	private Rigidbody mTargetRigidBody; // 0x168
	private Transform <PreviousTarget>k__BackingField; // 0x170
	private Quaternion mHeadingPrevFrame; // 0x178
	private Vector3 mOffsetPrevFrame; // 0x188
	private float <LastHeading>k__BackingField; // 0x194

	// Properties
	private Transform PreviousTarget { get; set; }
	private float LastHeading { get; set; }

	// Methods
	// RVA: 0x229910 Offset: 0x228110 VA: 0x180229910 Slot: 10
	protected override void OnValidate() { }
	// RVA: 0x229A50 Offset: 0x228250 VA: 0x180229A50
	public float UpdateHeading(float deltaTime, Vector3 up, ref AxisState axis) { }
	// RVA: 0x229A90 Offset: 0x228290 VA: 0x180229A90
	public float UpdateHeading(float deltaTime, Vector3 up, ref AxisState axis, ref AxisState.Recentering recentering, bool isLive) { }
	// RVA: 0x229C10 Offset: 0x228410 VA: 0x180229C10
	private void OnEnable() { }
	// RVA: 0x228AB0 Offset: 0x2272B0 VA: 0x180228AB0
	private Transform get_PreviousTarget() { }
	// RVA: 0x228AC0 Offset: 0x2272C0 VA: 0x180228AC0
	private void set_PreviousTarget(Transform value) { }
	// RVA: 0x229CD0 Offset: 0x2284D0 VA: 0x180229CD0 Slot: 9
	public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x229F40 Offset: 0x228740 VA: 0x180229F40 Slot: 8
	public override bool OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime, ref CinemachineVirtualCameraBase.TransitionParams transitionParams) { }
	// RVA: 0x22A150 Offset: 0x228950 VA: 0x18022A150
	public float GetAxisClosestValue(Vector3 cameraPos, Vector3 up) { }
	// RVA: 0x22A5A0 Offset: 0x228DA0 VA: 0x18022A5A0
	private float get_LastHeading() { }
	// RVA: 0x22A5B0 Offset: 0x228DB0 VA: 0x18022A5B0
	private void set_LastHeading(float value) { }
	// RVA: 0x22A5C0 Offset: 0x228DC0 VA: 0x18022A5C0 Slot: 7
	public override void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x22AC50 Offset: 0x229450 VA: 0x18022AC50 Slot: 11
	public override Vector3 GetTargetCameraPosition(Vector3 worldUp) { }
	// RVA: 0x22AEB0 Offset: 0x2296B0 VA: 0x18022AEB0
	private static string GetFullName(GameObject current) { }
	// RVA: 0x22B180 Offset: 0x229980 VA: 0x18022B180
	private float GetTargetHeading(float currentHeading, Quaternion targetOrientation) { }
	// RVA: 0x22BB10 Offset: 0x22A310 VA: 0x18022BB10
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct CinemachineOrbitalTransposer.Heading // TypeDefIndex: 2673
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0x103640 Offset: 0x102A40 VA: 0x180103640
	public CinemachineOrbitalTransposer.Heading.HeadingDefinition m_Definition; // 0x0
	public int m_VelocityFilterStrength; // 0x4
	[FormerlySerializedAsAttribute] // RVA: 0x1034C0 Offset: 0x1028C0 VA: 0x1801034C0
	public float m_Bias; // 0x8

	// Methods
	// RVA: 0x23580 Offset: 0x22980 VA: 0x180023580
	public void .ctor(CinemachineOrbitalTransposer.Heading.HeadingDefinition def, int filterStrength, float bias) { }
}

// Namespace: 
public enum CinemachineOrbitalTransposer.Heading.HeadingDefinition // TypeDefIndex: 2674
{
	// Fields
	public int value__; // 0x0
	public const CinemachineOrbitalTransposer.Heading.HeadingDefinition PositionDelta = 0; // 0x0
	public const CinemachineOrbitalTransposer.Heading.HeadingDefinition Velocity = 1; // 0x0
	public const CinemachineOrbitalTransposer.Heading.HeadingDefinition TargetForward = 2; // 0x0
	public const CinemachineOrbitalTransposer.Heading.HeadingDefinition WorldForward = 3; // 0x0
}

// Namespace: 
internal sealed class CinemachineOrbitalTransposer.UpdateHeadingDelegate : MulticastDelegate // TypeDefIndex: 2675
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x63F2B0 Offset: 0x63DAB0 VA: 0x18063F2B0 Slot: 12
	public virtual float Invoke(CinemachineOrbitalTransposer orbital, float deltaTime, Vector3 up) { }
	// RVA: 0x63F920 Offset: 0x63E120 VA: 0x18063F920 Slot: 13
	public virtual IAsyncResult BeginInvoke(CinemachineOrbitalTransposer orbital, float deltaTime, Vector3 up, AsyncCallback callback, object object) { }
	// RVA: 0x63CF80 Offset: 0x63B780 VA: 0x18063CF80 Slot: 14
	public virtual float EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[Serializable]
private sealed class CinemachineOrbitalTransposer.<>c // TypeDefIndex: 2676
{
	// Fields
	public static readonly CinemachineOrbitalTransposer.<>c <>9; // 0x0
	public static CinemachineOrbitalTransposer.UpdateHeadingDelegate <>9__34_0; // 0x8

	// Methods
	// RVA: 0x63F100 Offset: 0x63D900 VA: 0x18063F100
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x63F180 Offset: 0x63D980 VA: 0x18063F180
	internal float <.ctor>b__34_0(CinemachineOrbitalTransposer orbital, float deltaTime, Vector3 up) { }
}

// Namespace: Cinemachine
public class CinemachinePOV : CinemachineComponentBase // TypeDefIndex: 2677
{
	// Fields
	public bool m_ApplyBeforeBody; // 0x50
	public CinemachinePOV.RecenterTargetMode m_RecenterTarget; // 0x54
	public AxisState m_VerticalAxis; // 0x58
	public AxisState.Recentering m_VerticalRecentering; // 0xB0
	public AxisState m_HorizontalAxis; // 0xD0
	public AxisState.Recentering m_HorizontalRecentering; // 0x128

	// Properties
	public override bool IsValid { get; }
	public override CinemachineCore.Stage Stage { get; }

	// Methods
	// RVA: 0x22BFA0 Offset: 0x22A7A0 VA: 0x18022BFA0 Slot: 4
	public override bool get_IsValid() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 6
	public override CinemachineCore.Stage get_Stage() { }
	// RVA: 0x22BFF0 Offset: 0x22A7F0 VA: 0x18022BFF0
	private void OnValidate() { }
	// RVA: 0x22C030 Offset: 0x22A830 VA: 0x18022C030 Slot: 5
	public override void PrePipelineMutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x22C040 Offset: 0x22A840 VA: 0x18022C040 Slot: 7
	public override void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x22C050 Offset: 0x22A850 VA: 0x18022C050
	private void ApplyPOV(ref CameraState curState, float deltaTime) { }
	// RVA: 0x22C520 Offset: 0x22AD20 VA: 0x18022C520
	public Vector2 GetRecenterTarget() { }
	// RVA: 0x22C980 Offset: 0x22B180 VA: 0x18022C980 Slot: 8
	public override bool OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime, ref CinemachineVirtualCameraBase.TransitionParams transitionParams) { }
	// RVA: 0x22D1D0 Offset: 0x22B9D0 VA: 0x18022D1D0
	public void .ctor() { }
}

// Namespace: 
public enum CinemachinePOV.RecenterTargetMode // TypeDefIndex: 2678
{
	// Fields
	public int value__; // 0x0
	public const CinemachinePOV.RecenterTargetMode None = 0; // 0x0
	public const CinemachinePOV.RecenterTargetMode FollowTargetForward = 1; // 0x0
	public const CinemachinePOV.RecenterTargetMode LookAtTargetForward = 2; // 0x0
}

// Namespace: Cinemachine
public class CinemachineSameAsFollowTarget : CinemachineComponentBase // TypeDefIndex: 2679
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0x103670 Offset: 0x102A70 VA: 0x180103670
	public float m_Damping; // 0x50
	private Quaternion m_PreviousReferenceOrientation; // 0x54

	// Properties
	public override bool IsValid { get; }
	public override CinemachineCore.Stage Stage { get; }

	// Methods
	// RVA: 0x2312A0 Offset: 0x22FAA0 VA: 0x1802312A0 Slot: 4
	public override bool get_IsValid() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 6
	public override CinemachineCore.Stage get_Stage() { }
	// RVA: 0x231390 Offset: 0x22FB90 VA: 0x180231390 Slot: 7
	public override void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x2315B0 Offset: 0x22FDB0 VA: 0x1802315B0
	public void .ctor() { }
}

// Namespace: Cinemachine
public class CinemachineTrackedDolly : CinemachineComponentBase // TypeDefIndex: 2680
{
	// Fields
	public CinemachinePathBase m_Path; // 0x50
	public float m_PathPosition; // 0x58
	public CinemachinePathBase.PositionUnits m_PositionUnits; // 0x5C
	public Vector3 m_PathOffset; // 0x60
	public float m_XDamping; // 0x6C
	public float m_YDamping; // 0x70
	public float m_ZDamping; // 0x74
	public CinemachineTrackedDolly.CameraUpMode m_CameraUp; // 0x78
	public float m_PitchDamping; // 0x7C
	public float m_YawDamping; // 0x80
	public float m_RollDamping; // 0x84
	public CinemachineTrackedDolly.AutoDolly m_AutoDolly; // 0x88
	private float m_PreviousPathPosition; // 0x98
	private Quaternion m_PreviousOrientation; // 0x9C
	private Vector3 m_PreviousCameraPosition; // 0xAC

	// Properties
	public override bool IsValid { get; }
	public override CinemachineCore.Stage Stage { get; }
	private Vector3 AngularDamping { get; }

	// Methods
	// RVA: 0x23AC00 Offset: 0x239400 VA: 0x18023AC00 Slot: 4
	public override bool get_IsValid() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 6
	public override CinemachineCore.Stage get_Stage() { }
	// RVA: 0x23ACE0 Offset: 0x2394E0 VA: 0x18023ACE0 Slot: 7
	public override void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x23B9E0 Offset: 0x23A1E0 VA: 0x18023B9E0
	private Quaternion GetCameraOrientationAtPathPoint(Quaternion pathOrientation, Vector3 up) { }
	// RVA: 0x23C050 Offset: 0x23A850 VA: 0x18023C050
	private Vector3 get_AngularDamping() { }
	// RVA: 0x23C160 Offset: 0x23A960 VA: 0x18023C160
	public void .ctor() { }
}

// Namespace: 
public enum CinemachineTrackedDolly.CameraUpMode // TypeDefIndex: 2681
{
	// Fields
	public int value__; // 0x0
	public const CinemachineTrackedDolly.CameraUpMode Default = 0; // 0x0
	public const CinemachineTrackedDolly.CameraUpMode Path = 1; // 0x0
	public const CinemachineTrackedDolly.CameraUpMode PathNoRoll = 2; // 0x0
	public const CinemachineTrackedDolly.CameraUpMode FollowTarget = 3; // 0x0
	public const CinemachineTrackedDolly.CameraUpMode FollowTargetNoRoll = 4; // 0x0
}

// Namespace: 
[Serializable]
public struct CinemachineTrackedDolly.AutoDolly // TypeDefIndex: 2682
{
	// Fields
	public bool m_Enabled; // 0x0
	public float m_PositionOffset; // 0x4
	public int m_SearchRadius; // 0x8
	[FormerlySerializedAsAttribute] // RVA: 0x1036A0 Offset: 0x102AA0 VA: 0x1801036A0
	public int m_SearchResolution; // 0xC

	// Methods
	// RVA: 0x23610 Offset: 0x22A10 VA: 0x180023610
	public void .ctor(bool enabled, float positionOffset, int searchRadius, int stepsPerSegment) { }
}

// Namespace: Cinemachine
public class CinemachineTransposer : CinemachineComponentBase // TypeDefIndex: 2683
{
	// Fields
	public CinemachineTransposer.BindingMode m_BindingMode; // 0x50
	public Vector3 m_FollowOffset; // 0x54
	public float m_XDamping; // 0x60
	public float m_YDamping; // 0x64
	public float m_ZDamping; // 0x68
	public CinemachineTransposer.AngularDampingMode m_AngularDampingMode; // 0x6C
	public float m_PitchDamping; // 0x70
	public float m_YawDamping; // 0x74
	public float m_RollDamping; // 0x78
	public float m_AngularDamping; // 0x7C
	private bool <HideOffsetInInspector>k__BackingField; // 0x80
	private Vector3 m_PreviousTargetPosition; // 0x84
	private Quaternion m_PreviousReferenceOrientation; // 0x90
	private Quaternion m_targetOrientationOnAssign; // 0xA0
	private Transform m_previousTarget; // 0xB0

	// Properties
	public bool HideOffsetInInspector { get; set; }
	public Vector3 EffectiveOffset { get; }
	public override bool IsValid { get; }
	public override CinemachineCore.Stage Stage { get; }
	protected Vector3 Damping { get; }
	protected Vector3 AngularDamping { get; }

	// Methods
	// RVA: 0x23C2A0 Offset: 0x23AAA0 VA: 0x18023C2A0 Slot: 10
	protected virtual void OnValidate() { }
	// RVA: 0x23C2D0 Offset: 0x23AAD0 VA: 0x18023C2D0
	public bool get_HideOffsetInInspector() { }
	// RVA: 0x23C2E0 Offset: 0x23AAE0 VA: 0x18023C2E0
	public void set_HideOffsetInInspector(bool value) { }
	// RVA: 0x23C2F0 Offset: 0x23AAF0 VA: 0x18023C2F0
	public Vector3 get_EffectiveOffset() { }
	// RVA: 0x23C3D0 Offset: 0x23ABD0 VA: 0x18023C3D0 Slot: 4
	public override bool get_IsValid() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 6
	public override CinemachineCore.Stage get_Stage() { }
	// RVA: 0x23C4C0 Offset: 0x23ACC0 VA: 0x18023C4C0 Slot: 7
	public override void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x23C700 Offset: 0x23AF00 VA: 0x18023C700 Slot: 9
	public override void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x23C860 Offset: 0x23B060 VA: 0x18023C860
	protected void InitPrevFrameStateInfo(ref CameraState curState, float deltaTime) { }
	// RVA: 0x23CA70 Offset: 0x23B270 VA: 0x18023CA70
	protected void TrackTarget(float deltaTime, Vector3 up, Vector3 desiredCameraOffset, out Vector3 outTargetPosition, out Quaternion outTargetOrient) { }
	// RVA: 0x23D530 Offset: 0x23BD30 VA: 0x18023D530
	protected Vector3 get_Damping() { }
	// RVA: 0x23D570 Offset: 0x23BD70 VA: 0x18023D570
	protected Vector3 get_AngularDamping() { }
	// RVA: 0x23D6C0 Offset: 0x23BEC0 VA: 0x18023D6C0 Slot: 11
	public virtual Vector3 GetTargetCameraPosition(Vector3 worldUp) { }
	// RVA: 0x23D8B0 Offset: 0x23C0B0 VA: 0x18023D8B0
	public Quaternion GetReferenceOrientation(Vector3 worldUp) { }
	// RVA: 0x23E0C0 Offset: 0x23C8C0 VA: 0x18023E0C0
	public void .ctor() { }
}

// Namespace: 
public enum CinemachineTransposer.BindingMode // TypeDefIndex: 2684
{
	// Fields
	public int value__; // 0x0
	public const CinemachineTransposer.BindingMode LockToTargetOnAssign = 0; // 0x0
	public const CinemachineTransposer.BindingMode LockToTargetWithWorldUp = 1; // 0x0
	public const CinemachineTransposer.BindingMode LockToTargetNoRoll = 2; // 0x0
	public const CinemachineTransposer.BindingMode LockToTarget = 3; // 0x0
	public const CinemachineTransposer.BindingMode WorldSpace = 4; // 0x0
	public const CinemachineTransposer.BindingMode SimpleFollowWithWorldUp = 5; // 0x0
}

// Namespace: 
public enum CinemachineTransposer.AngularDampingMode // TypeDefIndex: 2685
{
	// Fields
	public int value__; // 0x0
	public const CinemachineTransposer.AngularDampingMode Euler = 0; // 0x0
	public const CinemachineTransposer.AngularDampingMode Quaternion = 1; // 0x0
}

// Namespace: Cinemachine
[Serializable]
public struct AxisState // TypeDefIndex: 2686
{
	// Fields
	public float Value; // 0x0
	public AxisState.SpeedMode m_SpeedMode; // 0x4
	public float m_MaxSpeed; // 0x8
	public float m_AccelTime; // 0xC
	public float m_DecelTime; // 0x10
	[FormerlySerializedAsAttribute] // RVA: 0x1036D0 Offset: 0x102AD0 VA: 0x1801036D0
	public string m_InputAxisName; // 0x18
	public float m_InputAxisValue; // 0x20
	[FormerlySerializedAsAttribute] // RVA: 0x103700 Offset: 0x102B00 VA: 0x180103700
	public bool m_InvertInput; // 0x24
	public float m_MinValue; // 0x28
	public float m_MaxValue; // 0x2C
	public bool m_Wrap; // 0x30
	public AxisState.Recentering m_Recentering; // 0x34
	private float mCurrentSpeed; // 0x50
	private const float Epsilon = 0.0001; // 0x0
	private bool <ValueRangeLocked>k__BackingField; // 0x54
	private bool <HasRecentering>k__BackingField; // 0x55

	// Properties
	public bool ValueRangeLocked { set; }
	public bool HasRecentering { set; }

	// Methods
	// RVA: 0x13290 Offset: 0x12690 VA: 0x180013290
	public void .ctor(float minValue, float maxValue, bool wrap, bool rangeLocked, float maxSpeed, float accelTime, float decelTime, string name, bool invert) { }
	// RVA: 0x13340 Offset: 0x12740 VA: 0x180013340
	public void Validate() { }
	// RVA: 0x13350 Offset: 0x12750 VA: 0x180013350
	public void Reset() { }
	// RVA: 0x13360 Offset: 0x12760 VA: 0x180013360
	public bool Update(float deltaTime) { }
	// RVA: 0x13370 Offset: 0x12770 VA: 0x180013370
	private float ClampValue(float v) { }
	// RVA: 0x13380 Offset: 0x12780 VA: 0x180013380
	private bool MaxSpeedUpdate(float input, float deltaTime) { }
	// RVA: 0x13390 Offset: 0x12790 VA: 0x180013390
	private float GetMaxSpeed() { }
	// RVA: 0x133A0 Offset: 0x127A0 VA: 0x1800133A0
	public void set_ValueRangeLocked(bool value) { }
	// RVA: 0x133B0 Offset: 0x127B0 VA: 0x1800133B0
	public void set_HasRecentering(bool value) { }
}

// Namespace: 
public enum AxisState.SpeedMode // TypeDefIndex: 2687
{
	// Fields
	public int value__; // 0x0
	public const AxisState.SpeedMode MaxSpeed = 0; // 0x0
	public const AxisState.SpeedMode InputValueGain = 1; // 0x0
}

// Namespace: 
[Serializable]
public struct AxisState.Recentering // TypeDefIndex: 2688
{
	// Fields
	public bool m_enabled; // 0x0
	public float m_WaitTime; // 0x4
	public float m_RecenteringTime; // 0x8
	private float mLastAxisInputTime; // 0xC
	private float mRecenteringVelocity; // 0x10
	[SerializeField] // RVA: 0x103730 Offset: 0x102B30 VA: 0x180103730
	[FormerlySerializedAsAttribute] // RVA: 0x103730 Offset: 0x102B30 VA: 0x180103730
	private int m_LegacyHeadingDefinition; // 0x14
	[SerializeField] // RVA: 0x103760 Offset: 0x102B60 VA: 0x180103760
	[FormerlySerializedAsAttribute] // RVA: 0x103760 Offset: 0x102B60 VA: 0x180103760
	private int m_LegacyVelocityFilterStrength; // 0x18

	// Methods
	// RVA: 0x23020 Offset: 0x22420 VA: 0x180023020
	public void .ctor(bool enabled, float waitTime, float recenteringTime) { }
	// RVA: 0x23040 Offset: 0x22440 VA: 0x180023040
	public void Validate() { }
	// RVA: 0x23050 Offset: 0x22450 VA: 0x180023050
	public void CancelRecentering() { }
	// RVA: 0x230B0 Offset: 0x224B0 VA: 0x1800230B0
	public void DoRecentering(ref AxisState axis, float deltaTime, float recenterTarget) { }
	// RVA: 0x230C0 Offset: 0x224C0 VA: 0x1800230C0
	internal bool LegacyUpgrade(ref int heading, ref int velocityFilter) { }
}

// Namespace: Cinemachine
public struct CameraState // TypeDefIndex: 2689
{
	// Fields
	private LensSettings <Lens>k__BackingField; // 0x0
	private Vector3 <ReferenceUp>k__BackingField; // 0x2C
	private Vector3 <ReferenceLookAt>k__BackingField; // 0x38
	public static Vector3 kNoPoint; // 0x0
	private Vector3 <RawPosition>k__BackingField; // 0x44
	private Quaternion <RawOrientation>k__BackingField; // 0x50
	private Vector3 <PositionDampingBypass>k__BackingField; // 0x60
	private float <ShotQuality>k__BackingField; // 0x6C
	private Vector3 <PositionCorrection>k__BackingField; // 0x70
	private Quaternion <OrientationCorrection>k__BackingField; // 0x7C
	private CameraState.BlendHintValue <BlendHint>k__BackingField; // 0x8C
	private CameraState.CustomBlendable mCustom0; // 0x90
	private CameraState.CustomBlendable mCustom1; // 0xA0
	private CameraState.CustomBlendable mCustom2; // 0xB0
	private CameraState.CustomBlendable mCustom3; // 0xC0
	private List<CameraState.CustomBlendable> m_CustomOverflow; // 0xD0
	private int <NumCustomBlendables>k__BackingField; // 0xD8

	// Properties
	public LensSettings Lens { get; set; }
	public Vector3 ReferenceUp { get; set; }
	public Vector3 ReferenceLookAt { get; set; }
	public bool HasLookAt { get; }
	public Vector3 RawPosition { get; set; }
	public Quaternion RawOrientation { get; set; }
	public Vector3 PositionDampingBypass { get; set; }
	public float ShotQuality { get; set; }
	public Vector3 PositionCorrection { get; set; }
	public Quaternion OrientationCorrection { get; set; }
	public Vector3 CorrectedPosition { get; }
	public Quaternion CorrectedOrientation { get; }
	public Vector3 FinalPosition { get; }
	public Quaternion FinalOrientation { get; }
	public CameraState.BlendHintValue BlendHint { get; set; }
	public static CameraState Default { get; }
	public int NumCustomBlendables { get; set; }

	// Methods
	// RVA: 0x133E0 Offset: 0x127E0 VA: 0x1800133E0
	public LensSettings get_Lens() { }
	// RVA: 0x13410 Offset: 0x12810 VA: 0x180013410
	public void set_Lens(LensSettings value) { }
	// RVA: 0x13430 Offset: 0x12830 VA: 0x180013430
	public Vector3 get_ReferenceUp() { }
	// RVA: 0x13450 Offset: 0x12850 VA: 0x180013450
	public void set_ReferenceUp(Vector3 value) { }
	// RVA: 0x13460 Offset: 0x12860 VA: 0x180013460
	public Vector3 get_ReferenceLookAt() { }
	// RVA: 0x13480 Offset: 0x12880 VA: 0x180013480
	public void set_ReferenceLookAt(Vector3 value) { }
	// RVA: 0x13490 Offset: 0x12890 VA: 0x180013490
	public bool get_HasLookAt() { }
	// RVA: 0x134A0 Offset: 0x128A0 VA: 0x1800134A0
	public Vector3 get_RawPosition() { }
	// RVA: 0x134C0 Offset: 0x128C0 VA: 0x1800134C0
	public void set_RawPosition(Vector3 value) { }
	// RVA: 0x134D0 Offset: 0x128D0 VA: 0x1800134D0
	public Quaternion get_RawOrientation() { }
	// RVA: 0x134E0 Offset: 0x128E0 VA: 0x1800134E0
	public void set_RawOrientation(Quaternion value) { }
	// RVA: 0x134F0 Offset: 0x128F0 VA: 0x1800134F0
	public Vector3 get_PositionDampingBypass() { }
	// RVA: 0x13510 Offset: 0x12910 VA: 0x180013510
	public void set_PositionDampingBypass(Vector3 value) { }
	// RVA: 0x13520 Offset: 0x12920 VA: 0x180013520
	public float get_ShotQuality() { }
	// RVA: 0x13530 Offset: 0x12930 VA: 0x180013530
	public void set_ShotQuality(float value) { }
	// RVA: 0x13540 Offset: 0x12940 VA: 0x180013540
	public Vector3 get_PositionCorrection() { }
	// RVA: 0x13560 Offset: 0x12960 VA: 0x180013560
	public void set_PositionCorrection(Vector3 value) { }
	// RVA: 0x13580 Offset: 0x12980 VA: 0x180013580
	public Quaternion get_OrientationCorrection() { }
	// RVA: 0x13590 Offset: 0x12990 VA: 0x180013590
	public void set_OrientationCorrection(Quaternion value) { }
	// RVA: 0x135A0 Offset: 0x129A0 VA: 0x1800135A0
	public Vector3 get_CorrectedPosition() { }
	// RVA: 0x135C0 Offset: 0x129C0 VA: 0x1800135C0
	public Quaternion get_CorrectedOrientation() { }
	// RVA: 0x135E0 Offset: 0x129E0 VA: 0x1800135E0
	public Vector3 get_FinalPosition() { }
	// RVA: 0x13600 Offset: 0x12A00 VA: 0x180013600
	public Quaternion get_FinalOrientation() { }
	// RVA: 0x13620 Offset: 0x12A20 VA: 0x180013620
	public CameraState.BlendHintValue get_BlendHint() { }
	// RVA: 0x13630 Offset: 0x12A30 VA: 0x180013630
	public void set_BlendHint(CameraState.BlendHintValue value) { }
	// RVA: 0x3C9960 Offset: 0x3C8160 VA: 0x1803C9960
	public static CameraState get_Default() { }
	// RVA: 0x13640 Offset: 0x12A40 VA: 0x180013640
	public int get_NumCustomBlendables() { }
	// RVA: 0x13650 Offset: 0x12A50 VA: 0x180013650
	private void set_NumCustomBlendables(int value) { }
	// RVA: 0x13660 Offset: 0x12A60 VA: 0x180013660
	public CameraState.CustomBlendable GetCustomBlendable(int index) { }
	// RVA: 0x13680 Offset: 0x12A80 VA: 0x180013680
	private int FindCustomBlendable(Object custom) { }
	// RVA: 0x13690 Offset: 0x12A90 VA: 0x180013690
	public void AddCustomBlendable(CameraState.CustomBlendable b) { }
	// RVA: 0x3CA110 Offset: 0x3C8910 VA: 0x1803CA110
	public static CameraState Lerp(CameraState stateA, CameraState stateB, float t) { }
	// RVA: 0x3CB660 Offset: 0x3C9E60 VA: 0x1803CB660
	private static float InterpolateFOV(float fovA, float fovB, float dA, float dB, float t) { }
	// RVA: 0x3CB860 Offset: 0x3CA060 VA: 0x1803CB860
	private static Vector3 ApplyPosBlendHint(Vector3 posA, CameraState.BlendHintValue hintA, Vector3 posB, CameraState.BlendHintValue hintB, Vector3 original, Vector3 blended) { }
	// RVA: 0x3CB8E0 Offset: 0x3CA0E0 VA: 0x1803CB8E0
	private static Quaternion ApplyRotBlendHint(Quaternion rotA, CameraState.BlendHintValue hintA, Quaternion rotB, CameraState.BlendHintValue hintB, Quaternion original, Quaternion blended) { }
	// RVA: 0x136B0 Offset: 0x12AB0 VA: 0x1800136B0
	private Vector3 InterpolatePosition(Vector3 posA, Vector3 pivotA, Vector3 posB, Vector3 pivotB, float t) { }
	// RVA: 0x3CC090 Offset: 0x3CA890 VA: 0x1803CC090
	private static void .cctor() { }
}

// Namespace: 
public enum CameraState.BlendHintValue // TypeDefIndex: 2690
{
	// Fields
	public int value__; // 0x0
	public const CameraState.BlendHintValue Nothing = 0; // 0x0
	public const CameraState.BlendHintValue NoPosition = 1; // 0x0
	public const CameraState.BlendHintValue NoOrientation = 2; // 0x0
	public const CameraState.BlendHintValue NoTransform = 3; // 0x0
	public const CameraState.BlendHintValue SphericalPositionBlend = 4; // 0x0
	public const CameraState.BlendHintValue CylindricalPositionBlend = 8; // 0x0
	public const CameraState.BlendHintValue RadialAimBlend = 16; // 0x0
	public const CameraState.BlendHintValue IgnoreLookAtTarget = 32; // 0x0
	public const CameraState.BlendHintValue NoLens = 64; // 0x0
}

// Namespace: 
public struct CameraState.CustomBlendable // TypeDefIndex: 2691
{
	// Fields
	public Object m_Custom; // 0x0
	public float m_Weight; // 0x8

	// Methods
	// RVA: 0x230F0 Offset: 0x224F0 VA: 0x1800230F0
	public void .ctor(Object custom, float weight) { }
}

// Namespace: Cinemachine
public class CinemachineBlend // TypeDefIndex: 2692
{
	// Fields
	private ICinemachineCamera <CamA>k__BackingField; // 0x10
	private ICinemachineCamera <CamB>k__BackingField; // 0x18
	private AnimationCurve <BlendCurve>k__BackingField; // 0x20
	private float <TimeInBlend>k__BackingField; // 0x28
	private float <Duration>k__BackingField; // 0x2C

	// Properties
	public ICinemachineCamera CamA { get; set; }
	public ICinemachineCamera CamB { get; set; }
	public AnimationCurve BlendCurve { get; set; }
	public float TimeInBlend { get; set; }
	public float BlendWeight { get; }
	public bool IsValid { get; }
	public float Duration { get; set; }
	public bool IsComplete { get; }
	public string Description { get; }
	public CameraState State { get; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public ICinemachineCamera get_CamA() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void set_CamA(ICinemachineCamera value) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public ICinemachineCamera get_CamB() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_CamB(ICinemachineCamera value) { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public AnimationCurve get_BlendCurve() { }
	// RVA: 0x16EEC0 Offset: 0x16D6C0 VA: 0x18016EEC0
	public void set_BlendCurve(AnimationCurve value) { }
	// RVA: 0x28CBB0 Offset: 0x28B3B0 VA: 0x18028CBB0
	public float get_TimeInBlend() { }
	// RVA: 0x29DF30 Offset: 0x29C730 VA: 0x18029DF30
	public void set_TimeInBlend(float value) { }
	// RVA: 0x3CCF10 Offset: 0x3CB710 VA: 0x1803CCF10
	public float get_BlendWeight() { }
	// RVA: 0x3CD090 Offset: 0x3CB890 VA: 0x1803CD090
	public bool get_IsValid() { }
	// RVA: 0x28CC50 Offset: 0x28B450 VA: 0x18028CC50
	public float get_Duration() { }
	// RVA: 0x366670 Offset: 0x364E70 VA: 0x180366670
	public void set_Duration(float value) { }
	// RVA: 0x3CD140 Offset: 0x3CB940 VA: 0x1803CD140
	public bool get_IsComplete() { }
	// RVA: 0x3CD170 Offset: 0x3CB970 VA: 0x1803CD170
	public string get_Description() { }
	// RVA: 0x3CD350 Offset: 0x3CBB50 VA: 0x1803CD350
	public bool Uses(ICinemachineCamera cam) { }
	// RVA: 0x3CD4C0 Offset: 0x3CBCC0 VA: 0x1803CD4C0
	public void .ctor(ICinemachineCamera a, ICinemachineCamera b, AnimationCurve curve, float duration, float t) { }
	// RVA: 0x3CD4F0 Offset: 0x3CBCF0 VA: 0x1803CD4F0
	public void UpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x3CD630 Offset: 0x3CBE30 VA: 0x1803CD630
	public CameraState get_State() { }
}

// Namespace: Cinemachine
[Serializable]
public struct CinemachineBlendDefinition // TypeDefIndex: 2693
{
	// Fields
	public CinemachineBlendDefinition.Style m_Style; // 0x0
	public float m_Time; // 0x4
	public AnimationCurve m_CustomCurve; // 0x8
	private static AnimationCurve[] sStandardCurves; // 0x0

	// Properties
	public AnimationCurve BlendCurve { get; }

	// Methods
	// RVA: 0x13760 Offset: 0x12B60 VA: 0x180013760
	public void .ctor(CinemachineBlendDefinition.Style style, float time) { }
	// RVA: 0x13780 Offset: 0x12B80 VA: 0x180013780
	private void CreateStandardCurves() { }
	// RVA: 0x13790 Offset: 0x12B90 VA: 0x180013790
	public AnimationCurve get_BlendCurve() { }
}

// Namespace: 
public enum CinemachineBlendDefinition.Style // TypeDefIndex: 2694
{
	// Fields
	public int value__; // 0x0
	public const CinemachineBlendDefinition.Style Cut = 0; // 0x0
	public const CinemachineBlendDefinition.Style EaseInOut = 1; // 0x0
	public const CinemachineBlendDefinition.Style EaseIn = 2; // 0x0
	public const CinemachineBlendDefinition.Style EaseOut = 3; // 0x0
	public const CinemachineBlendDefinition.Style HardIn = 4; // 0x0
	public const CinemachineBlendDefinition.Style HardOut = 5; // 0x0
	public const CinemachineBlendDefinition.Style Linear = 6; // 0x0
	public const CinemachineBlendDefinition.Style Custom = 7; // 0x0
}

// Namespace: Cinemachine
internal class StaticPointVirtualCamera : ICinemachineCamera // TypeDefIndex: 2695
{
	// Fields
	private string <Name>k__BackingField; // 0x10
	private int <Priority>k__BackingField; // 0x18
	private Transform <LookAt>k__BackingField; // 0x20
	private Transform <Follow>k__BackingField; // 0x28
	private CameraState <State>k__BackingField; // 0x30

	// Properties
	public string Name { get; set; }
	public int Priority { get; }
	public Transform LookAt { get; }
	public Transform Follow { get; }
	public CameraState State { get; set; }
	public GameObject VirtualCameraGameObject { get; }
	public bool IsValid { get; }
	public ICinemachineCamera ParentCamera { get; }

	// Methods
	// RVA: 0x639410 Offset: 0x637C10 VA: 0x180639410
	public void .ctor(CameraState state, string name) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470 Slot: 4
	public string get_Name() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	private void set_Name(string value) { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 5
	public int get_Priority() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0 Slot: 6
	public Transform get_LookAt() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900 Slot: 7
	public Transform get_Follow() { }
	// RVA: 0x3C9190 Offset: 0x3C7990 VA: 0x1803C9190 Slot: 8
	public CameraState get_State() { }
	// RVA: 0x3C9220 Offset: 0x3C7A20 VA: 0x1803C9220
	private void set_State(CameraState value) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 9
	public GameObject get_VirtualCameraGameObject() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 10
	public bool get_IsValid() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 11
	public ICinemachineCamera get_ParentCamera() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 12
	public bool IsLiveChild(ICinemachineCamera vcam, bool dominantChildOnly = False) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 13
	public void UpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 14
	public void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
}

// Namespace: Cinemachine
internal class BlendSourceVirtualCamera : ICinemachineCamera // TypeDefIndex: 2696
{
	// Fields
	private CinemachineBlend <Blend>k__BackingField; // 0x10
	private int <Priority>k__BackingField; // 0x18
	private Transform <LookAt>k__BackingField; // 0x20
	private Transform <Follow>k__BackingField; // 0x28
	private CameraState <State>k__BackingField; // 0x30

	// Properties
	public CinemachineBlend Blend { get; set; }
	public string Name { get; }
	public int Priority { get; }
	public Transform LookAt { get; }
	public Transform Follow { get; }
	public CameraState State { get; set; }
	public GameObject VirtualCameraGameObject { get; }
	public bool IsValid { get; }
	public ICinemachineCamera ParentCamera { get; }

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(CinemachineBlend blend) { }
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public CinemachineBlend get_Blend() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void set_Blend(CinemachineBlend value) { }
	// RVA: 0x3C9120 Offset: 0x3C7920 VA: 0x1803C9120 Slot: 4
	public string get_Name() { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0 Slot: 5
	public int get_Priority() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0 Slot: 6
	public Transform get_LookAt() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900 Slot: 7
	public Transform get_Follow() { }
	// RVA: 0x3C9190 Offset: 0x3C7990 VA: 0x1803C9190 Slot: 8
	public CameraState get_State() { }
	// RVA: 0x3C9220 Offset: 0x3C7A20 VA: 0x1803C9220
	private void set_State(CameraState value) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 9
	public GameObject get_VirtualCameraGameObject() { }
	// RVA: 0x3C92A0 Offset: 0x3C7AA0 VA: 0x1803C92A0 Slot: 10
	public bool get_IsValid() { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 11
	public ICinemachineCamera get_ParentCamera() { }
	// RVA: 0x3C92C0 Offset: 0x3C7AC0 VA: 0x1803C92C0 Slot: 12
	public bool IsLiveChild(ICinemachineCamera vcam, bool dominantChildOnly = False) { }
	// RVA: 0x3C92E0 Offset: 0x3C7AE0 VA: 0x1803C92E0 Slot: 13
	public void UpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 14
	public void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
}

// Namespace: Cinemachine
[Serializable]
public sealed class CinemachineBlenderSettings : ScriptableObject // TypeDefIndex: 2697
{
	// Fields
	public CinemachineBlenderSettings.CustomBlend[] m_CustomBlends; // 0x18
	public const string kBlendFromAnyCameraLabel = "**ANY CAMERA**"; // 0x0

	// Methods
	// RVA: 0x3CFB30 Offset: 0x3CE330 VA: 0x1803CFB30
	public CinemachineBlendDefinition GetBlendForVirtualCameras(string fromCameraName, string toCameraName, CinemachineBlendDefinition defaultBlend) { }
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct CinemachineBlenderSettings.CustomBlend // TypeDefIndex: 2698
{
	// Fields
	public string m_From; // 0x0
	public string m_To; // 0x8
	public CinemachineBlendDefinition m_Blend; // 0x10
}

// Namespace: Cinemachine
public abstract class CinemachineComponentBase : MonoBehaviour // TypeDefIndex: 2699
{
	// Fields
	protected const float Epsilon = 0.0001; // 0x0
	private CinemachineVirtualCameraBase m_vcamOwner; // 0x18
	private Transform mCachedFollowTarget; // 0x20
	private CinemachineVirtualCameraBase mCachedFollowTargetVcam; // 0x28
	private ICinemachineTargetGroup mCachedFollowTargetGroup; // 0x30
	private Transform mCachedLookAtTarget; // 0x38
	private CinemachineVirtualCameraBase mCachedLookAtTargetVcam; // 0x40
	private ICinemachineTargetGroup mCachedLookAtTargetGroup; // 0x48

	// Properties
	public CinemachineVirtualCameraBase VirtualCamera { get; }
	public Transform FollowTarget { get; }
	public Transform LookAtTarget { get; }
	public ICinemachineTargetGroup AbstractFollowTargetGroup { get; }
	public CinemachineTargetGroup FollowTargetGroup { get; }
	public Vector3 FollowTargetPosition { get; }
	public Quaternion FollowTargetRotation { get; }
	public ICinemachineTargetGroup AbstractLookAtTargetGroup { get; }
	public CinemachineTargetGroup LookAtTargetGroup { get; }
	public Vector3 LookAtTargetPosition { get; }
	public Quaternion LookAtTargetRotation { get; }
	public CameraState VcamState { get; }
	public abstract bool IsValid { get; }
	public abstract CinemachineCore.Stage Stage { get; }

	// Methods
	// RVA: 0x3DC9F0 Offset: 0x3DB1F0 VA: 0x1803DC9F0
	public CinemachineVirtualCameraBase get_VirtualCamera() { }
	// RVA: 0x3DCC60 Offset: 0x3DB460 VA: 0x1803DCC60
	public Transform get_FollowTarget() { }
	// RVA: 0x3DCD30 Offset: 0x3DB530 VA: 0x1803DCD30
	public Transform get_LookAtTarget() { }
	// RVA: 0x3DCE00 Offset: 0x3DB600 VA: 0x1803DCE00
	private void UpdateFollowTargetCache() { }
	// RVA: 0x3DCEF0 Offset: 0x3DB6F0 VA: 0x1803DCEF0
	public ICinemachineTargetGroup get_AbstractFollowTargetGroup() { }
	// RVA: 0x3DCFC0 Offset: 0x3DB7C0 VA: 0x1803DCFC0
	public CinemachineTargetGroup get_FollowTargetGroup() { }
	// RVA: 0x3DD080 Offset: 0x3DB880 VA: 0x1803DD080
	public Vector3 get_FollowTargetPosition() { }
	// RVA: 0x3DD330 Offset: 0x3DBB30 VA: 0x1803DD330
	public Quaternion get_FollowTargetRotation() { }
	// RVA: 0x3DD610 Offset: 0x3DBE10 VA: 0x1803DD610
	private void UpdateLookAtTargetCache() { }
	// RVA: 0x3DD700 Offset: 0x3DBF00 VA: 0x1803DD700
	public ICinemachineTargetGroup get_AbstractLookAtTargetGroup() { }
	// RVA: 0x3DD7D0 Offset: 0x3DBFD0 VA: 0x1803DD7D0
	public CinemachineTargetGroup get_LookAtTargetGroup() { }
	// RVA: 0x3DD890 Offset: 0x3DC090 VA: 0x1803DD890
	public Vector3 get_LookAtTargetPosition() { }
	// RVA: 0x3DDB40 Offset: 0x3DC340 VA: 0x1803DDB40
	public Quaternion get_LookAtTargetRotation() { }
	// RVA: 0x3DDDD0 Offset: 0x3DC5D0 VA: 0x1803DDDD0
	public CameraState get_VcamState() { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract bool get_IsValid() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	public virtual void PrePipelineMutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract CinemachineCore.Stage get_Stage() { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract void MutateCameraState(ref CameraState curState, float deltaTime) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 8
	public virtual bool OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime, ref CinemachineVirtualCameraBase.TransitionParams transitionParams) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 9
	public virtual void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: Cinemachine
public sealed class CinemachineCore // TypeDefIndex: 2700
{
	// Fields
	public static readonly int kStreamingVersion; // 0x0
	public static readonly string kVersionString; // 0x8
	private static CinemachineCore sInstance; // 0x10
	public static bool sShowHiddenObjects; // 0x18
	public static CinemachineCore.AxisInputDelegate GetInputAxis; // 0x20
	public static float UniformDeltaTimeOverride; // 0x28
	public static CinemachineCore.GetBlendOverrideDelegate GetBlendOverride; // 0x30
	public static CinemachineBrain.BrainEvent CameraUpdatedEvent; // 0x38
	public static CinemachineBrain.BrainEvent CameraCutEvent; // 0x40
	private List<CinemachineBrain> mActiveBrains; // 0x10
	private List<CinemachineVirtualCameraBase> mActiveCameras; // 0x18
	private List<List<CinemachineVirtualCameraBase>> mAllCameras; // 0x20
	private CinemachineVirtualCameraBase mRoundRobinVcamLastFrame; // 0x28
	private static float mLastUpdateTime; // 0x48
	private static int <FixedFrameCount>k__BackingField; // 0x4C
	private Dictionary<CinemachineVirtualCameraBase, CinemachineCore.UpdateStatus> mUpdateStatus; // 0x30
	private CinemachineCore.UpdateFilter <CurrentUpdateFilter>k__BackingField; // 0x38

	// Properties
	public static CinemachineCore Instance { get; }
	public int BrainCount { get; }
	public int VirtualCameraCount { get; }
	private static int FixedFrameCount { get; set; }
	internal CinemachineCore.UpdateFilter CurrentUpdateFilter { get; set; }

	// Methods
	// RVA: 0x3E1BD0 Offset: 0x3E03D0 VA: 0x1803E1BD0
	public static CinemachineCore get_Instance() { }
	// RVA: 0x3E1DC0 Offset: 0x3E05C0 VA: 0x1803E1DC0
	public int get_BrainCount() { }
	// RVA: 0x3E1E40 Offset: 0x3E0640 VA: 0x1803E1E40
	public CinemachineBrain GetActiveBrain(int index) { }
	// RVA: 0x3E1EE0 Offset: 0x3E06E0 VA: 0x1803E1EE0
	internal void AddActiveBrain(CinemachineBrain brain) { }
	// RVA: 0x3E1F90 Offset: 0x3E0790 VA: 0x1803E1F90
	internal void RemoveActiveBrain(CinemachineBrain brain) { }
	// RVA: 0x3E2070 Offset: 0x3E0870 VA: 0x1803E2070
	public int get_VirtualCameraCount() { }
	// RVA: 0x3E20F0 Offset: 0x3E08F0 VA: 0x1803E20F0
	public CinemachineVirtualCameraBase GetVirtualCamera(int index) { }
	// RVA: 0x3E2190 Offset: 0x3E0990 VA: 0x1803E2190
	internal void AddActiveCamera(CinemachineVirtualCameraBase vcam) { }
	// RVA: 0x3E2280 Offset: 0x3E0A80 VA: 0x1803E2280
	internal void RemoveActiveCamera(CinemachineVirtualCameraBase vcam) { }
	// RVA: 0x3E2360 Offset: 0x3E0B60 VA: 0x1803E2360
	internal void CameraAwakened(CinemachineVirtualCameraBase vcam) { }
	// RVA: 0x3E2640 Offset: 0x3E0E40 VA: 0x1803E2640
	internal void CameraDestroyed(CinemachineVirtualCameraBase vcam) { }
	// RVA: 0x3E29D0 Offset: 0x3E11D0 VA: 0x1803E29D0
	private static int get_FixedFrameCount() { }
	// RVA: 0x3E2A70 Offset: 0x3E1270 VA: 0x1803E2A70
	private static void set_FixedFrameCount(int value) { }
	// RVA: 0x3E2B10 Offset: 0x3E1310 VA: 0x1803E2B10
	internal void UpdateAllActiveVirtualCameras(int layerMask, Vector3 worldUp, float deltaTime) { }
	// RVA: 0x3E3030 Offset: 0x3E1830 VA: 0x1803E3030
	internal void UpdateVirtualCamera(CinemachineVirtualCameraBase vcam, Vector3 worldUp, float deltaTime) { }
	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xDC810 Offset: 0xDBC10 VA: 0x1800DC810
	// RVA: 0x3E33D0 Offset: 0x3E1BD0 VA: 0x1803E33D0
	private static void InitializeModule() { }
	// RVA: 0x197B80 Offset: 0x196380 VA: 0x180197B80
	internal CinemachineCore.UpdateFilter get_CurrentUpdateFilter() { }
	// RVA: 0x20B460 Offset: 0x209C60 VA: 0x18020B460
	internal void set_CurrentUpdateFilter(CinemachineCore.UpdateFilter value) { }
	// RVA: 0x3E34B0 Offset: 0x3E1CB0 VA: 0x1803E34B0
	private static Transform GetUpdateTarget(CinemachineVirtualCameraBase vcam) { }
	// RVA: 0x3E3690 Offset: 0x3E1E90 VA: 0x1803E3690
	internal UpdateTracker.UpdateClock GetVcamUpdateStatus(CinemachineVirtualCameraBase vcam) { }
	// RVA: 0x3E3780 Offset: 0x3E1F80 VA: 0x1803E3780
	public bool IsLive(ICinemachineCamera vcam) { }
	// RVA: 0x3E3890 Offset: 0x3E2090 VA: 0x1803E3890
	public void GenerateCameraActivationEvent(ICinemachineCamera vcam, ICinemachineCamera vcamFrom) { }
	// RVA: 0x3E39D0 Offset: 0x3E21D0 VA: 0x1803E39D0
	public void GenerateCameraCutEvent(ICinemachineCamera vcam) { }
	// RVA: 0x3E3B90 Offset: 0x3E2390 VA: 0x1803E3B90
	public CinemachineBrain FindPotentialTargetBrain(CinemachineVirtualCameraBase vcam) { }
	// RVA: 0x3E3E90 Offset: 0x3E2690 VA: 0x1803E3E90
	public void .ctor() { }
	// RVA: 0x3E3F70 Offset: 0x3E2770 VA: 0x1803E3F70
	private static void .cctor() { }
}

// Namespace: 
public enum CinemachineCore.Stage // TypeDefIndex: 2701
{
	// Fields
	public int value__; // 0x0
	public const CinemachineCore.Stage Body = 0; // 0x0
	public const CinemachineCore.Stage Aim = 1; // 0x0
	public const CinemachineCore.Stage Noise = 2; // 0x0
	public const CinemachineCore.Stage Finalize = 3; // 0x0
}

// Namespace: 
public sealed class CinemachineCore.AxisInputDelegate : MulticastDelegate // TypeDefIndex: 2702
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x63CBA0 Offset: 0x63B3A0 VA: 0x18063CBA0 Slot: 12
	public virtual float Invoke(string axisName) { }
	// RVA: 0x1D1C20 Offset: 0x1D0420 VA: 0x1801D1C20 Slot: 13
	public virtual IAsyncResult BeginInvoke(string axisName, AsyncCallback callback, object object) { }
	// RVA: 0x63CF80 Offset: 0x63B780 VA: 0x18063CF80 Slot: 14
	public virtual float EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public sealed class CinemachineCore.GetBlendOverrideDelegate : MulticastDelegate // TypeDefIndex: 2703
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x63CFC0 Offset: 0x63B7C0 VA: 0x18063CFC0 Slot: 12
	public virtual CinemachineBlendDefinition Invoke(ICinemachineCamera fromVcam, ICinemachineCamera toVcam, CinemachineBlendDefinition defaultBlend, MonoBehaviour owner) { }
	// RVA: 0x63D6D0 Offset: 0x63BED0 VA: 0x18063D6D0 Slot: 13
	public virtual IAsyncResult BeginInvoke(ICinemachineCamera fromVcam, ICinemachineCamera toVcam, CinemachineBlendDefinition defaultBlend, MonoBehaviour owner, AsyncCallback callback, object object) { }
	// RVA: 0x44E150 Offset: 0x44C950 VA: 0x18044E150 Slot: 14
	public virtual CinemachineBlendDefinition EndInvoke(IAsyncResult result) { }
}

// Namespace: 
private class CinemachineCore.UpdateStatus // TypeDefIndex: 2704
{
	// Fields
	public int lastUpdateFrame; // 0x10
	public int lastUpdateFixedFrame; // 0x14
	public UpdateTracker.UpdateClock lastUpdateMode; // 0x18
	public float lastUpdateDeltaTime; // 0x1C

	// Methods
	// RVA: 0x63D7C0 Offset: 0x63BFC0 VA: 0x18063D7C0
	public void .ctor() { }
}

// Namespace: 
internal enum CinemachineCore.UpdateFilter // TypeDefIndex: 2705
{
	// Fields
	public int value__; // 0x0
	public const CinemachineCore.UpdateFilter Fixed = 0; // 0x0
	public const CinemachineCore.UpdateFilter Late = 1; // 0x0
	public const CinemachineCore.UpdateFilter Smart = 8; // 0x0
	public const CinemachineCore.UpdateFilter SmartFixed = 8; // 0x0
	public const CinemachineCore.UpdateFilter SmartLate = 9; // 0x0
}

// Namespace: Cinemachine
public abstract class CinemachineExtension : MonoBehaviour // TypeDefIndex: 2706
{
	// Fields
	protected const float Epsilon = 0.0001; // 0x0
	private CinemachineVirtualCameraBase m_vcamOwner; // 0x18
	private Dictionary<ICinemachineCamera, object> mExtraState; // 0x20

	// Properties
	public CinemachineVirtualCameraBase VirtualCamera { get; }

	// Methods
	// RVA: 0x3E4B80 Offset: 0x3E3380 VA: 0x1803E4B80
	public CinemachineVirtualCameraBase get_VirtualCamera() { }
	// RVA: 0x384160 Offset: 0x382960 VA: 0x180384160 Slot: 4
	protected virtual void Awake() { }
	// RVA: 0x3E4C40 Offset: 0x3E3440 VA: 0x1803E4C40 Slot: 5
	protected virtual void OnDestroy() { }
	// RVA: 0x3E4C60 Offset: 0x3E3460 VA: 0x1803E4C60 Slot: 6
	protected virtual void ConnectToVcam(bool connect) { }
	// RVA: 0x3E4DF0 Offset: 0x3E35F0 VA: 0x1803E4DF0
	public void InvokePostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime) { }
	// RVA: -1 Offset: -1 Slot: 7
	protected abstract void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 8
	public virtual void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 9
	public virtual bool OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
	// RVA: 0x52E840 Offset: 0x52D040 VA: 0x18052E840
	protected T GetExtraState(ICinemachineCamera vcam) { }
	// RVA: 0x52E580 Offset: 0x52CD80 VA: 0x18052E580
	protected List<T> GetAllExtraStates() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: Cinemachine
public abstract class CinemachinePathBase : MonoBehaviour // TypeDefIndex: 2707
{
	// Fields
	public int m_Resolution; // 0x18
	public CinemachinePathBase.Appearance m_Appearance; // 0x20
	private float[] m_DistanceToPos; // 0x28
	private float[] m_PosToDistance; // 0x30
	private int m_CachedSampleSteps; // 0x38
	private float m_PathLength; // 0x3C
	private float m_cachedPosStepSize; // 0x40
	private float m_cachedDistanceStepSize; // 0x44

	// Properties
	public abstract float MinPos { get; }
	public abstract float MaxPos { get; }
	public abstract bool Looped { get; }
	public abstract int DistanceCacheSampleStepsPerSegment { get; }
	public float PathLength { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	public abstract float get_MinPos() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract float get_MaxPos() { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_Looped() { }
	// RVA: 0x22E770 Offset: 0x22CF70 VA: 0x18022E770 Slot: 7
	public virtual float StandardizePos(float pos) { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract Vector3 EvaluatePosition(float pos) { }
	// RVA: -1 Offset: -1 Slot: 9
	public abstract Vector3 EvaluateTangent(float pos) { }
	// RVA: -1 Offset: -1 Slot: 10
	public abstract Quaternion EvaluateOrientation(float pos) { }
	// RVA: 0x22E8E0 Offset: 0x22D0E0 VA: 0x18022E8E0 Slot: 11
	public virtual float FindClosestPoint(Vector3 p, int startSegment, int searchRadius, int stepsPerSegment) { }
	// RVA: 0x22ED40 Offset: 0x22D540 VA: 0x18022ED40
	public float MinUnit(CinemachinePathBase.PositionUnits units) { }
	// RVA: 0x22ED60 Offset: 0x22D560 VA: 0x18022ED60
	public float MaxUnit(CinemachinePathBase.PositionUnits units) { }
	// RVA: 0x22ED90 Offset: 0x22D590 VA: 0x18022ED90 Slot: 12
	public virtual float StandardizeUnit(float pos, CinemachinePathBase.PositionUnits units) { }
	// RVA: 0x22EE30 Offset: 0x22D630 VA: 0x18022EE30
	public Vector3 EvaluatePositionAtUnit(float pos, CinemachinePathBase.PositionUnits units) { }
	// RVA: 0x22EE90 Offset: 0x22D690 VA: 0x18022EE90
	public Vector3 EvaluateTangentAtUnit(float pos, CinemachinePathBase.PositionUnits units) { }
	// RVA: 0x22EEF0 Offset: 0x22D6F0 VA: 0x18022EEF0
	public Quaternion EvaluateOrientationAtUnit(float pos, CinemachinePathBase.PositionUnits units) { }
	// RVA: -1 Offset: -1 Slot: 13
	public abstract int get_DistanceCacheSampleStepsPerSegment() { }
	// RVA: 0x22EF40 Offset: 0x22D740 VA: 0x18022EF40 Slot: 14
	public virtual void InvalidateDistanceCache() { }
	// RVA: 0x22EF50 Offset: 0x22D750 VA: 0x18022EF50
	public bool DistanceCacheIsValid() { }
	// RVA: 0x22EFE0 Offset: 0x22D7E0 VA: 0x18022EFE0
	public float get_PathLength() { }
	// RVA: 0x22F0B0 Offset: 0x22D8B0 VA: 0x18022F0B0
	public float StandardizePathDistance(float distance) { }
	// RVA: 0x22F1D0 Offset: 0x22D9D0 VA: 0x18022F1D0
	public float ToNativePathUnits(float pos, CinemachinePathBase.PositionUnits units) { }
	// RVA: 0x22F400 Offset: 0x22DC00 VA: 0x18022F400
	public float FromPathNativeUnits(float pos, CinemachinePathBase.PositionUnits units) { }
	// RVA: 0x22F5F0 Offset: 0x22DDF0 VA: 0x18022F5F0
	private void ResamplePath(int stepsPerSegment) { }
	// RVA: 0x22FA10 Offset: 0x22E210 VA: 0x18022FA10
	protected void .ctor() { }
}

// Namespace: 
[Serializable]
public class CinemachinePathBase.Appearance // TypeDefIndex: 2708
{
	// Fields
	public Color pathColor; // 0x10
	public Color inactivePathColor; // 0x20
	public float width; // 0x30

	// Methods
	// RVA: 0x63FA00 Offset: 0x63E200 VA: 0x18063FA00
	public void .ctor() { }
}

// Namespace: 
public enum CinemachinePathBase.PositionUnits // TypeDefIndex: 2709
{
	// Fields
	public int value__; // 0x0
	public const CinemachinePathBase.PositionUnits PathUnits = 0; // 0x0
	public const CinemachinePathBase.PositionUnits Distance = 1; // 0x0
	public const CinemachinePathBase.PositionUnits Normalized = 2; // 0x0
}

// Namespace: Cinemachine
public abstract class CinemachineVirtualCameraBase : MonoBehaviour, ICinemachineCamera // TypeDefIndex: 2710
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public string[] m_ExcludedPropertiesInInspector; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public CinemachineCore.Stage[] m_LockStageInInspector; // 0x20
	private int m_ValidatingStreamVersion; // 0x28
	private bool m_OnValidateCalled; // 0x2C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_StreamingVersion; // 0x30
	public int m_Priority; // 0x34
	public CinemachineVirtualCameraBase.StandbyUpdateMode m_StandbyUpdate; // 0x38
	private List<CinemachineExtension> mExtensions; // 0x40
	private bool <PreviousStateIsValid>k__BackingField; // 0x48
	private bool mSlaveStatusUpdated; // 0x49
	private CinemachineVirtualCameraBase m_parentVcam; // 0x50
	private int m_QueuePriority; // 0x58

	// Properties
	public int ValidatingStreamVersion { get; set; }
	public string Name { get; }
	public virtual string Description { get; }
	public int Priority { get; set; }
	public GameObject VirtualCameraGameObject { get; }
	public bool IsValid { get; }
	public abstract CameraState State { get; }
	public ICinemachineCamera ParentCamera { get; }
	public abstract Transform LookAt { get; set; }
	public abstract Transform Follow { get; set; }
	public virtual bool PreviousStateIsValid { get; set; }

	// Methods
	// RVA: 0x241550 Offset: 0x23FD50 VA: 0x180241550
	public int get_ValidatingStreamVersion() { }
	// RVA: 0x1FC320 Offset: 0x1FAB20 VA: 0x1801FC320
	private void set_ValidatingStreamVersion(int value) { }
	// RVA: 0x241600 Offset: 0x23FE00 VA: 0x180241600 Slot: 15
	public virtual void AddExtension(CinemachineExtension extension) { }
	// RVA: 0x241720 Offset: 0x23FF20 VA: 0x180241720 Slot: 16
	public virtual void RemoveExtension(CinemachineExtension extension) { }
	// RVA: 0x2417F0 Offset: 0x23FFF0 VA: 0x1802417F0
	protected void InvokePostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState newState, float deltaTime) { }
	// RVA: 0x241A30 Offset: 0x240230 VA: 0x180241A30
	protected bool InvokeOnTransitionInExtensions(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
	// RVA: 0x241BF0 Offset: 0x2403F0 VA: 0x180241BF0 Slot: 4
	public string get_Name() { }
	// RVA: 0x241C00 Offset: 0x240400 VA: 0x180241C00 Slot: 17
	public virtual string get_Description() { }
	// RVA: 0x1FEF80 Offset: 0x1FD780 VA: 0x1801FEF80 Slot: 5
	public int get_Priority() { }
	// RVA: 0x1FEF90 Offset: 0x1FD790 VA: 0x1801FEF90 Slot: 18
	public void set_Priority(int value) { }
	// RVA: 0x241C70 Offset: 0x240470 VA: 0x180241C70
	protected void ApplyPositionBlendMethod(ref CameraState state, CinemachineVirtualCameraBase.BlendHint hint) { }
	// RVA: 0x241CA0 Offset: 0x2404A0 VA: 0x180241CA0 Slot: 9
	public GameObject get_VirtualCameraGameObject() { }
	// RVA: 0x241D80 Offset: 0x240580 VA: 0x180241D80 Slot: 10
	public bool get_IsValid() { }
	// RVA: -1 Offset: -1 Slot: 19
	public abstract CameraState get_State() { }
	// RVA: 0x241E20 Offset: 0x240620 VA: 0x180241E20 Slot: 11
	public ICinemachineCamera get_ParentCamera() { }
	// RVA: 0x1F6640 Offset: 0x1F4E40 VA: 0x1801F6640 Slot: 20
	public virtual bool IsLiveChild(ICinemachineCamera vcam, bool dominantChildOnly = False) { }
	// RVA: -1 Offset: -1 Slot: 21
	public abstract Transform get_LookAt() { }
	// RVA: -1 Offset: -1 Slot: 22
	public abstract void set_LookAt(Transform value) { }
	// RVA: -1 Offset: -1 Slot: 23
	public abstract Transform get_Follow() { }
	// RVA: -1 Offset: -1 Slot: 24
	public abstract void set_Follow(Transform value) { }
	// RVA: 0x16F150 Offset: 0x16D950 VA: 0x18016F150 Slot: 25
	public virtual bool get_PreviousStateIsValid() { }
	// RVA: 0x16F160 Offset: 0x16D960 VA: 0x18016F160 Slot: 26
	public virtual void set_PreviousStateIsValid(bool value) { }
	// RVA: 0x241E90 Offset: 0x240690 VA: 0x180241E90 Slot: 13
	public void UpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: -1 Offset: -1 Slot: 27
	public abstract void InternalUpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: 0x241F80 Offset: 0x240780 VA: 0x180241F80 Slot: 28
	public virtual void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
	// RVA: 0x242040 Offset: 0x240840 VA: 0x180242040 Slot: 29
	protected virtual void OnDestroy() { }
	// RVA: 0x2420F0 Offset: 0x2408F0 VA: 0x1802420F0 Slot: 30
	protected virtual void OnTransformParentChanged() { }
	// RVA: 0x2421D0 Offset: 0x2409D0 VA: 0x1802421D0 Slot: 31
	protected virtual void OnValidate() { }
	// RVA: 0x242280 Offset: 0x240A80 VA: 0x180242280 Slot: 32
	protected virtual void OnEnable() { }
	// RVA: 0x2425A0 Offset: 0x240DA0 VA: 0x1802425A0 Slot: 33
	protected virtual void OnDisable() { }
	// RVA: 0x242650 Offset: 0x240E50 VA: 0x180242650 Slot: 34
	protected virtual void Update() { }
	// RVA: 0x242660 Offset: 0x240E60 VA: 0x180242660
	private void UpdateSlaveStatus() { }
	// RVA: 0x2427C0 Offset: 0x240FC0 VA: 0x1802427C0
	protected Transform ResolveLookAt(Transform localLookAt) { }
	// RVA: 0x2428B0 Offset: 0x2410B0 VA: 0x1802428B0
	protected Transform ResolveFollow(Transform localFollow) { }
	// RVA: 0x2429A0 Offset: 0x2411A0 VA: 0x1802429A0
	private void UpdateVcamPoolStatus() { }
	// RVA: 0x242BE0 Offset: 0x2413E0 VA: 0x180242BE0
	public void MoveToTopOfPrioritySubqueue() { }
	// RVA: 0x242BF0 Offset: 0x2413F0 VA: 0x180242BF0 Slot: 35
	public virtual void OnTargetObjectWarped(Transform target, Vector3 positionDelta) { }
	// RVA: 0x242D10 Offset: 0x241510 VA: 0x180242D10
	protected CinemachineBlend CreateBlend(ICinemachineCamera camA, ICinemachineCamera camB, CinemachineBlendDefinition blendDef, CinemachineBlend activeBlend) { }
	// RVA: 0x242FA0 Offset: 0x2417A0 VA: 0x180242FA0
	protected CameraState PullStateFromVirtualCamera(Vector3 worldUp, ref LensSettings lens) { }
	// RVA: 0x243320 Offset: 0x241B20 VA: 0x180243320
	protected void .ctor() { }
}

// Namespace: 
public enum CinemachineVirtualCameraBase.StandbyUpdateMode // TypeDefIndex: 2711
{
	// Fields
	public int value__; // 0x0
	public const CinemachineVirtualCameraBase.StandbyUpdateMode Never = 0; // 0x0
	public const CinemachineVirtualCameraBase.StandbyUpdateMode Always = 1; // 0x0
	public const CinemachineVirtualCameraBase.StandbyUpdateMode RoundRobin = 2; // 0x0
}

// Namespace: 
public enum CinemachineVirtualCameraBase.BlendHint // TypeDefIndex: 2712
{
	// Fields
	public int value__; // 0x0
	public const CinemachineVirtualCameraBase.BlendHint None = 0; // 0x0
	public const CinemachineVirtualCameraBase.BlendHint SphericalPosition = 1; // 0x0
	public const CinemachineVirtualCameraBase.BlendHint CylindricalPosition = 2; // 0x0
	public const CinemachineVirtualCameraBase.BlendHint ScreenSpaceAimWhenTargetsDiffer = 3; // 0x0
}

// Namespace: 
[Serializable]
public struct CinemachineVirtualCameraBase.TransitionParams // TypeDefIndex: 2713
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0x1033A0 Offset: 0x1027A0 VA: 0x1801033A0
	public CinemachineVirtualCameraBase.BlendHint m_BlendHint; // 0x0
	public bool m_InheritPosition; // 0x4
	public CinemachineBrain.VcamActivatedEvent m_OnCameraLive; // 0x8
}

// Namespace: Cinemachine
public interface ICinemachineCamera // TypeDefIndex: 2714
{
	// Properties
	public abstract string Name { get; }
	public abstract int Priority { get; }
	public abstract Transform LookAt { get; }
	public abstract Transform Follow { get; }
	public abstract CameraState State { get; }
	public abstract GameObject VirtualCameraGameObject { get; }
	public abstract bool IsValid { get; }
	public abstract ICinemachineCamera ParentCamera { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract string get_Name() { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract int get_Priority() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract Transform get_LookAt() { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract Transform get_Follow() { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract CameraState get_State() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract GameObject get_VirtualCameraGameObject() { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_IsValid() { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract ICinemachineCamera get_ParentCamera() { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool IsLiveChild(ICinemachineCamera vcam, bool dominantChildOnly = False) { }
	// RVA: -1 Offset: -1 Slot: 9
	public abstract void UpdateCameraState(Vector3 worldUp, float deltaTime) { }
	// RVA: -1 Offset: -1 Slot: 10
	public abstract void OnTransitionFromCamera(ICinemachineCamera fromCam, Vector3 worldUp, float deltaTime) { }
}

// Namespace: Cinemachine
[Serializable]
public struct LensSettings // TypeDefIndex: 2715
{
	// Fields
	public static LensSettings Default; // 0x0
	public float FieldOfView; // 0x0
	public float OrthographicSize; // 0x4
	public float NearClipPlane; // 0x8
	public float FarClipPlane; // 0xC
	public float Dutch; // 0x10
	private bool <Orthographic>k__BackingField; // 0x14
	private Vector2 <SensorSize>k__BackingField; // 0x18
	private bool <IsPhysicalCamera>k__BackingField; // 0x20
	public Vector2 LensShift; // 0x24

	// Properties
	public bool Orthographic { get; set; }
	public Vector2 SensorSize { get; set; }
	public float Aspect { get; }
	public bool IsPhysicalCamera { get; set; }

	// Methods
	// RVA: 0x5D70 Offset: 0x5170 VA: 0x180005D70
	public bool get_Orthographic() { }
	// RVA: 0x5D80 Offset: 0x5180 VA: 0x180005D80
	public void set_Orthographic(bool value) { }
	// RVA: 0x22EF0 Offset: 0x222F0 VA: 0x180022EF0
	public Vector2 get_SensorSize() { }
	// RVA: 0xCFA0 Offset: 0xC3A0 VA: 0x18000CFA0
	public void set_SensorSize(Vector2 value) { }
	// RVA: 0x22F10 Offset: 0x22310 VA: 0x180022F10
	public float get_Aspect() { }
	// RVA: 0x22F40 Offset: 0x22340 VA: 0x180022F40
	public bool get_IsPhysicalCamera() { }
	// RVA: 0x22F50 Offset: 0x22350 VA: 0x180022F50
	public void set_IsPhysicalCamera(bool value) { }
	// RVA: 0x6364B0 Offset: 0x634CB0 VA: 0x1806364B0
	public static LensSettings FromCamera(Camera fromCamera) { }
	// RVA: 0x22F60 Offset: 0x22360 VA: 0x180022F60
	public void SnapshotCameraReadOnlyProperties(Camera camera) { }
	// RVA: 0x22F70 Offset: 0x22370 VA: 0x180022F70
	public void .ctor(float fov, float orthographicSize, float nearClip, float farClip, float dutch) { }
	// RVA: 0x6369B0 Offset: 0x6351B0 VA: 0x1806369B0
	public static LensSettings Lerp(LensSettings lensA, LensSettings lensB, float t) { }
	// RVA: 0x22FB0 Offset: 0x223B0 VA: 0x180022FB0
	public void Validate() { }
	// RVA: 0x636D80 Offset: 0x635580 VA: 0x180636D80
	private static void .cctor() { }
}

// Namespace: Cinemachine
public sealed class NoiseSettings : SignalSourceAsset // TypeDefIndex: 2716
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0x103790 Offset: 0x102B90 VA: 0x180103790
	public NoiseSettings.TransformNoiseParams[] PositionNoise; // 0x18
	[FormerlySerializedAsAttribute] // RVA: 0x1037C0 Offset: 0x102BC0 VA: 0x1801037C0
	public NoiseSettings.TransformNoiseParams[] OrientationNoise; // 0x20

	// Properties
	public override float SignalDuration { get; }

	// Methods
	// RVA: 0x636E30 Offset: 0x635630 VA: 0x180636E30
	public static Vector3 GetCombinedFilterResults(NoiseSettings.TransformNoiseParams[] noiseParams, float time, Vector3 timeOffsets) { }
	// RVA: 0x1BF170 Offset: 0x1BD970 VA: 0x1801BF170 Slot: 5
	public override float get_SignalDuration() { }
	// RVA: 0x637040 Offset: 0x635840 VA: 0x180637040 Slot: 6
	public override void GetSignal(float timeSinceSignalStart, out Vector3 pos, out Quaternion rot) { }
	// RVA: 0x6371D0 Offset: 0x6359D0 VA: 0x1806371D0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct NoiseSettings.NoiseParams // TypeDefIndex: 2717
{
	// Fields
	public float Frequency; // 0x0
	public float Amplitude; // 0x4
	public bool Constant; // 0x8

	// Methods
	// RVA: 0x236D0 Offset: 0x22AD0 VA: 0x1800236D0
	public float GetValueAt(float time, float timeOffset) { }
}

// Namespace: 
[Serializable]
public struct NoiseSettings.TransformNoiseParams // TypeDefIndex: 2718
{
	// Fields
	public NoiseSettings.NoiseParams X; // 0x0
	public NoiseSettings.NoiseParams Y; // 0xC
	public NoiseSettings.NoiseParams Z; // 0x18

	// Methods
	// RVA: 0x237D0 Offset: 0x22BD0 VA: 0x1800237D0
	public Vector3 GetValueAt(float time, Vector3 timeOffsets) { }
}

// Namespace: Cinemachine
public static class RuntimeUtility // TypeDefIndex: 2719
{
	// Methods
	// RVA: 0x637CA0 Offset: 0x6364A0 VA: 0x180637CA0
	public static void DestroyObject(Object obj) { }
}

// Namespace: Cinemachine
public interface ISignalSource6D // TypeDefIndex: 2720
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void GetSignal(float timeSinceSignalStart, out Vector3 pos, out Quaternion rot) { }
}

// Namespace: Cinemachine
public abstract class SignalSourceAsset : ScriptableObject, ISignalSource6D // TypeDefIndex: 2721
{
	// Properties
	public abstract float SignalDuration { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 5
	public abstract float get_SignalDuration() { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract void GetSignal(float timeSinceSignalStart, out Vector3 pos, out Quaternion rot) { }
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	protected void .ctor() { }
}

// Namespace: Cinemachine
internal class UpdateTracker // TypeDefIndex: 2722
{
	// Fields
	private static Dictionary<Transform, UpdateTracker.UpdateStatus> mUpdateStatus; // 0x0
	private static List<Transform> sToDelete; // 0x8
	private static float mLastUpdateTime; // 0x10

	// Methods
	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xDC810 Offset: 0xDBC10 VA: 0x1800DC810
	// RVA: 0x63AB90 Offset: 0x639390 VA: 0x18063AB90
	private static void InitializeModule() { }
	// RVA: 0x63AC40 Offset: 0x639440 VA: 0x18063AC40
	private static void UpdateTargets(UpdateTracker.UpdateClock currentClock) { }
	// RVA: 0x63AFF0 Offset: 0x6397F0 VA: 0x18063AFF0
	public static UpdateTracker.UpdateClock GetPreferredUpdate(Transform target) { }
	// RVA: 0x63B2F0 Offset: 0x639AF0 VA: 0x18063B2F0
	public static void OnUpdate(UpdateTracker.UpdateClock currentClock) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x63B410 Offset: 0x639C10 VA: 0x18063B410
	private static void .cctor() { }
}

// Namespace: 
public enum UpdateTracker.UpdateClock // TypeDefIndex: 2723
{
	// Fields
	public int value__; // 0x0
	public const UpdateTracker.UpdateClock Fixed = 0; // 0x0
	public const UpdateTracker.UpdateClock Late = 1; // 0x0
}

// Namespace: 
private class UpdateTracker.UpdateStatus // TypeDefIndex: 2724
{
	// Fields
	private int windowStart; // 0x10
	private int numWindowLateUpdateMoves; // 0x14
	private int numWindowFixedUpdateMoves; // 0x18
	private int numWindows; // 0x1C
	private int lastFrameUpdated; // 0x20
	private Matrix4x4 lastPos; // 0x24
	private UpdateTracker.UpdateClock <PreferredUpdate>k__BackingField; // 0x64

	// Properties
	public UpdateTracker.UpdateClock PreferredUpdate { get; set; }

	// Methods
	// RVA: 0x6409B0 Offset: 0x63F1B0 VA: 0x1806409B0
	public UpdateTracker.UpdateClock get_PreferredUpdate() { }
	// RVA: 0x6409C0 Offset: 0x63F1C0 VA: 0x1806409C0
	private void set_PreferredUpdate(UpdateTracker.UpdateClock value) { }
	// RVA: 0x6409D0 Offset: 0x63F1D0 VA: 0x1806409D0
	public void .ctor(int currentFrame, Matrix4x4 pos) { }
	// RVA: 0x640A60 Offset: 0x63F260 VA: 0x180640A60
	public void OnUpdate(int currentFrame, UpdateTracker.UpdateClock currentClock, Matrix4x4 pos) { }
}

// Namespace: Cinemachine
public class CinemachineTriggerAction : MonoBehaviour // TypeDefIndex: 2725
{
	// Fields
	public LayerMask m_LayerMask; // 0x18
	public string m_WithTag; // 0x20
	public string m_WithoutTag; // 0x28
	public int m_SkipFirst; // 0x30
	public bool m_Repeating; // 0x34
	public CinemachineTriggerAction.ActionSettings m_OnObjectEnter; // 0x38
	public CinemachineTriggerAction.ActionSettings m_OnObjectExit; // 0x60
	private HashSet<GameObject> m_ActiveTriggerObjects; // 0x88

	// Methods
	// RVA: 0x23E230 Offset: 0x23CA30 VA: 0x18023E230
	private bool Filter(GameObject other) { }
	// RVA: 0x23E350 Offset: 0x23CB50 VA: 0x18023E350
	private void InternalDoTriggerEnter(GameObject other) { }
	// RVA: 0x23E510 Offset: 0x23CD10 VA: 0x18023E510
	private void InternalDoTriggerExit(GameObject other) { }
	// RVA: 0x23E620 Offset: 0x23CE20 VA: 0x18023E620
	private void OnTriggerEnter(Collider other) { }
	// RVA: 0x23E6A0 Offset: 0x23CEA0 VA: 0x18023E6A0
	private void OnTriggerExit(Collider other) { }
	// RVA: 0x23E720 Offset: 0x23CF20 VA: 0x18023E720
	private void OnCollisionEnter(Collision other) { }
	// RVA: 0x23E760 Offset: 0x23CF60 VA: 0x18023E760
	private void OnCollisionExit(Collision other) { }
	// RVA: 0x23E620 Offset: 0x23CE20 VA: 0x18023E620
	private void OnTriggerEnter2D(Collider2D other) { }
	// RVA: 0x23E6A0 Offset: 0x23CEA0 VA: 0x18023E6A0
	private void OnTriggerExit2D(Collider2D other) { }
	// RVA: 0x23E7A0 Offset: 0x23CFA0 VA: 0x18023E7A0
	private void OnCollisionEnter2D(Collision2D other) { }
	// RVA: 0x23E7E0 Offset: 0x23CFE0 VA: 0x18023E7E0
	private void OnCollisionExit2D(Collision2D other) { }
	// RVA: 0x23E820 Offset: 0x23D020 VA: 0x18023E820
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct CinemachineTriggerAction.ActionSettings // TypeDefIndex: 2726
{
	// Fields
	public CinemachineTriggerAction.ActionSettings.Mode m_Action; // 0x0
	public Object m_Target; // 0x8
	public int m_BoostAmount; // 0x10
	public float m_StartTime; // 0x14
	public CinemachineTriggerAction.ActionSettings.TimeMode m_Mode; // 0x18
	public CinemachineTriggerAction.ActionSettings.TriggerEvent m_Event; // 0x20

	// Methods
	// RVA: 0x23650 Offset: 0x22A50 VA: 0x180023650
	public void .ctor(CinemachineTriggerAction.ActionSettings.Mode action) { }
	// RVA: 0x23660 Offset: 0x22A60 VA: 0x180023660
	public void Invoke() { }
}

// Namespace: 
public enum CinemachineTriggerAction.ActionSettings.Mode // TypeDefIndex: 2727
{
	// Fields
	public int value__; // 0x0
	public const CinemachineTriggerAction.ActionSettings.Mode Custom = 0; // 0x0
	public const CinemachineTriggerAction.ActionSettings.Mode PriorityBoost = 1; // 0x0
	public const CinemachineTriggerAction.ActionSettings.Mode Activate = 2; // 0x0
	public const CinemachineTriggerAction.ActionSettings.Mode Deactivate = 3; // 0x0
	public const CinemachineTriggerAction.ActionSettings.Mode Enable = 4; // 0x0
	public const CinemachineTriggerAction.ActionSettings.Mode Disable = 5; // 0x0
	public const CinemachineTriggerAction.ActionSettings.Mode Play = 6; // 0x0
	public const CinemachineTriggerAction.ActionSettings.Mode Stop = 7; // 0x0
}

// Namespace: 
[Serializable]
public class CinemachineTriggerAction.ActionSettings.TriggerEvent : UnityEvent // TypeDefIndex: 2728
{
	// Methods
	// RVA: 0x443D70 Offset: 0x442570 VA: 0x180443D70
	public void .ctor() { }
}

// Namespace: 
public enum CinemachineTriggerAction.ActionSettings.TimeMode // TypeDefIndex: 2729
{
	// Fields
	public int value__; // 0x0
	public const CinemachineTriggerAction.ActionSettings.TimeMode FromStart = 0; // 0x0
	public const CinemachineTriggerAction.ActionSettings.TimeMode FromEnd = 1; // 0x0
	public const CinemachineTriggerAction.ActionSettings.TimeMode BeforeNow = 2; // 0x0
	public const CinemachineTriggerAction.ActionSettings.TimeMode AfterNow = 3; // 0x0
}

// Namespace: Cinemachine
public class CinemachineCollisionImpulseSource : CinemachineImpulseSource // TypeDefIndex: 2730
{
	// Fields
	public LayerMask m_LayerMask; // 0x20
	public string m_IgnoreTag; // 0x28
	public bool m_UseImpactDirection; // 0x30
	public bool m_ScaleImpactWithMass; // 0x31
	public bool m_ScaleImpactWithSpeed; // 0x32
	private Rigidbody mRigidBody; // 0x38
	private Rigidbody2D mRigidBody2D; // 0x40

	// Methods
	// RVA: 0x3DB580 Offset: 0x3D9D80 VA: 0x1803DB580
	private void Start() { }
	// RVA: 0x3DB610 Offset: 0x3D9E10 VA: 0x1803DB610
	private void OnCollisionEnter(Collision c) { }
	// RVA: 0x3DB650 Offset: 0x3D9E50 VA: 0x1803DB650
	private void OnTriggerEnter(Collider c) { }
	// RVA: 0x3DB720 Offset: 0x3D9F20 VA: 0x1803DB720
	private float GetMassAndVelocity(Collider other, ref Vector3 vel) { }
	// RVA: 0x3DBBA0 Offset: 0x3DA3A0 VA: 0x1803DBBA0
	private void GenerateImpactEvent(Collider other, Vector3 vel) { }
	// RVA: 0x3DBF20 Offset: 0x3DA720 VA: 0x1803DBF20
	private void OnCollisionEnter2D(Collision2D c) { }
	// RVA: 0x3DC030 Offset: 0x3DA830 VA: 0x1803DC030
	private void OnTriggerEnter2D(Collider2D c) { }
	// RVA: 0x3DC100 Offset: 0x3DA900 VA: 0x1803DC100
	private float GetMassAndVelocity2D(Collider2D other2d, ref Vector3 vel) { }
	// RVA: 0x3DC500 Offset: 0x3DAD00 VA: 0x1803DC500
	private void GenerateImpactEvent2D(Collider2D other2d, Vector3 vel) { }
	// RVA: 0x3DC880 Offset: 0x3DB080 VA: 0x1803DC880
	public void .ctor() { }
}

// Namespace: Cinemachine
public class CinemachineFixedSignal : SignalSourceAsset // TypeDefIndex: 2731
{
	// Fields
	public AnimationCurve m_XCurve; // 0x18
	public AnimationCurve m_YCurve; // 0x20
	public AnimationCurve m_ZCurve; // 0x28

	// Properties
	public override float SignalDuration { get; }

	// Methods
	// RVA: 0x3E5840 Offset: 0x3E4040 VA: 0x1803E5840 Slot: 5
	public override float get_SignalDuration() { }
	// RVA: 0x3E5930 Offset: 0x3E4130 VA: 0x1803E5930
	private float AxisDuration(AnimationCurve axis) { }
	// RVA: 0x3E5A30 Offset: 0x3E4230 VA: 0x1803E5A30 Slot: 6
	public override void GetSignal(float timeSinceSignalStart, out Vector3 pos, out Quaternion rot) { }
	// RVA: 0x3E5C60 Offset: 0x3E4460 VA: 0x1803E5C60
	private float AxisValue(AnimationCurve axis, float time) { }
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	public void .ctor() { }
}

// Namespace: Cinemachine
[Serializable]
public class CinemachineImpulseDefinition // TypeDefIndex: 2732
{
	// Fields
	public int m_ImpulseChannel; // 0x10
	public SignalSourceAsset m_RawSignal; // 0x18
	public float m_AmplitudeGain; // 0x20
	public float m_FrequencyGain; // 0x24
	public CinemachineImpulseDefinition.RepeatMode m_RepeatMode; // 0x28
	public bool m_Randomize; // 0x2C
	public CinemachineImpulseManager.EnvelopeDefinition m_TimeEnvelope; // 0x30
	public float m_ImpactRadius; // 0x50
	public CinemachineImpulseManager.ImpulseEvent.DirectionMode m_DirectionMode; // 0x54
	public CinemachineImpulseManager.ImpulseEvent.DissipationMode m_DissipationMode; // 0x58
	public float m_DissipationDistance; // 0x5C

	// Methods
	// RVA: 0x2265B0 Offset: 0x224DB0 VA: 0x1802265B0
	public void OnValidate() { }
	// RVA: 0x226670 Offset: 0x224E70 VA: 0x180226670
	public void CreateEvent(Vector3 position, Vector3 velocity) { }
	// RVA: 0x226A30 Offset: 0x225230 VA: 0x180226A30
	public void .ctor() { }
}

// Namespace: 
public enum CinemachineImpulseDefinition.RepeatMode // TypeDefIndex: 2733
{
	// Fields
	public int value__; // 0x0
	public const CinemachineImpulseDefinition.RepeatMode Stretch = 0; // 0x0
	public const CinemachineImpulseDefinition.RepeatMode Loop = 1; // 0x0
}

// Namespace: 
private class CinemachineImpulseDefinition.SignalSource : ISignalSource6D // TypeDefIndex: 2734
{
	// Fields
	private CinemachineImpulseDefinition m_Def; // 0x10
	private Vector3 m_Velocity; // 0x18
	private float m_StartTimeOffset; // 0x24

	// Properties
	public float SignalDuration { get; }

	// Methods
	// RVA: 0x63DD70 Offset: 0x63C570 VA: 0x18063DD70
	public void .ctor(CinemachineImpulseDefinition def, Vector3 velocity) { }
	// RVA: 0x63DDF0 Offset: 0x63C5F0 VA: 0x18063DDF0 Slot: 5
	public float get_SignalDuration() { }
	// RVA: 0x63DE30 Offset: 0x63C630 VA: 0x18063DE30 Slot: 4
	public void GetSignal(float timeSinceSignalStart, out Vector3 pos, out Quaternion rot) { }
}

// Namespace: Cinemachine
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachineImpulseListener : CinemachineExtension // TypeDefIndex: 2735
{
	// Fields
	public int m_ChannelMask; // 0x28
	public float m_Gain; // 0x2C
	public bool m_Use2DDistance; // 0x30

	// Methods
	// RVA: 0x226AB0 Offset: 0x2252B0 VA: 0x180226AB0 Slot: 7
	protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime) { }
	// RVA: 0x226DF0 Offset: 0x2255F0 VA: 0x180226DF0
	public void .ctor() { }
}

// Namespace: Cinemachine
public class CinemachineImpulseManager // TypeDefIndex: 2736
{
	// Fields
	private static CinemachineImpulseManager sInstance; // 0x0
	private List<CinemachineImpulseManager.ImpulseEvent> m_ExpiredEvents; // 0x10
	private List<CinemachineImpulseManager.ImpulseEvent> m_ActiveEvents; // 0x18
	private bool <IgnoreTimeScale>k__BackingField; // 0x20

	// Properties
	public static CinemachineImpulseManager Instance { get; }
	public bool IgnoreTimeScale { get; }
	private float CurrentTime { get; }

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void .ctor() { }
	// RVA: 0x226E10 Offset: 0x225610 VA: 0x180226E10
	public static CinemachineImpulseManager get_Instance() { }
	// RVA: 0x226EB0 Offset: 0x2256B0 VA: 0x180226EB0
	public bool GetImpulseAt(Vector3 listenerLocation, bool distance2D, int channelMask, out Vector3 pos, out Quaternion rot) { }
	// RVA: 0x20B410 Offset: 0x209C10 VA: 0x18020B410
	public bool get_IgnoreTimeScale() { }
	// RVA: 0x227270 Offset: 0x225A70 VA: 0x180227270
	private float get_CurrentTime() { }
	// RVA: 0x227300 Offset: 0x225B00 VA: 0x180227300
	public CinemachineImpulseManager.ImpulseEvent NewImpulseEvent() { }
	// RVA: 0x2273C0 Offset: 0x225BC0 VA: 0x1802273C0
	public void AddImpulseEvent(CinemachineImpulseManager.ImpulseEvent e) { }
}

// Namespace: 
[Serializable]
public struct CinemachineImpulseManager.EnvelopeDefinition // TypeDefIndex: 2737
{
	// Fields
	public AnimationCurve m_AttackShape; // 0x0
	public AnimationCurve m_DecayShape; // 0x8
	public float m_AttackTime; // 0x10
	public float m_SustainTime; // 0x14
	public float m_DecayTime; // 0x18
	public bool m_ScaleWithImpact; // 0x1C
	public bool m_HoldForever; // 0x1D

	// Properties
	public float Duration { get; }

	// Methods
	// RVA: 0x63E270 Offset: 0x63CA70 VA: 0x18063E270
	public static CinemachineImpulseManager.EnvelopeDefinition Default() { }
	// RVA: 0x23500 Offset: 0x22900 VA: 0x180023500
	public float get_Duration() { }
	// RVA: 0x23520 Offset: 0x22920 VA: 0x180023520
	public float GetValueAt(float offset) { }
	// RVA: 0x23530 Offset: 0x22930 VA: 0x180023530
	public void Clear() { }
	// RVA: 0x23550 Offset: 0x22950 VA: 0x180023550
	public void Validate() { }
}

// Namespace: 
public class CinemachineImpulseManager.ImpulseEvent // TypeDefIndex: 2738
{
	// Fields
	public float m_StartTime; // 0x10
	public CinemachineImpulseManager.EnvelopeDefinition m_Envelope; // 0x18
	public ISignalSource6D m_SignalSource; // 0x38
	public Vector3 m_Position; // 0x40
	public float m_Radius; // 0x4C
	public CinemachineImpulseManager.ImpulseEvent.DirectionMode m_DirectionMode; // 0x50
	public int m_Channel; // 0x54
	public CinemachineImpulseManager.ImpulseEvent.DissipationMode m_DissipationMode; // 0x58
	public float m_DissipationDistance; // 0x5C

	// Properties
	public bool Expired { get; }

	// Methods
	// RVA: 0x63E4A0 Offset: 0x63CCA0 VA: 0x18063E4A0
	public bool get_Expired() { }
	// RVA: 0x63E520 Offset: 0x63CD20 VA: 0x18063E520
	public float DistanceDecay(float distance) { }
	// RVA: 0x63E6B0 Offset: 0x63CEB0 VA: 0x18063E6B0
	public bool GetDecayedSignal(Vector3 listenerPosition, bool use2D, out Vector3 pos, out Quaternion rot) { }
	// RVA: 0x63F020 Offset: 0x63D820 VA: 0x18063F020
	public void Clear() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void .ctor() { }
}

// Namespace: 
public enum CinemachineImpulseManager.ImpulseEvent.DirectionMode // TypeDefIndex: 2739
{
	// Fields
	public int value__; // 0x0
	public const CinemachineImpulseManager.ImpulseEvent.DirectionMode Fixed = 0; // 0x0
	public const CinemachineImpulseManager.ImpulseEvent.DirectionMode RotateTowardSource = 1; // 0x0
}

// Namespace: 
public enum CinemachineImpulseManager.ImpulseEvent.DissipationMode // TypeDefIndex: 2740
{
	// Fields
	public int value__; // 0x0
	public const CinemachineImpulseManager.ImpulseEvent.DissipationMode LinearDecay = 0; // 0x0
	public const CinemachineImpulseManager.ImpulseEvent.DissipationMode SoftDecay = 1; // 0x0
	public const CinemachineImpulseManager.ImpulseEvent.DissipationMode ExponentialDecay = 2; // 0x0
}

// Namespace: Cinemachine
public class CinemachineImpulseSource : MonoBehaviour // TypeDefIndex: 2741
{
	// Fields
	public CinemachineImpulseDefinition m_ImpulseDefinition; // 0x18

	// Methods
	// RVA: 0x2274A0 Offset: 0x225CA0 VA: 0x1802274A0
	private void OnValidate() { }
	// RVA: 0x227570 Offset: 0x225D70 VA: 0x180227570
	public void GenerateImpulseAt(Vector3 position, Vector3 velocity) { }
	// RVA: 0x2275C0 Offset: 0x225DC0 VA: 0x1802275C0
	public void GenerateImpulse(Vector3 velocity) { }
	// RVA: 0x2276D0 Offset: 0x225ED0 VA: 0x1802276D0
	public void GenerateImpulse() { }
	// RVA: 0x227790 Offset: 0x225F90 VA: 0x180227790
	public void .ctor() { }
}

// Namespace: Cinemachine.PostFX
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CinemachinePostProcessing : CinemachineExtension // TypeDefIndex: 2742
{
	// Fields
	public bool m_FocusTracksTarget; // 0x28
	public float m_FocusOffset; // 0x2C
	public PostProcessProfile m_Profile; // 0x30
	private static string sVolumeOwnerName; // 0x0
	private static List<PostProcessVolume> sVolumes; // 0x8
	private static Dictionary<CinemachineBrain, PostProcessLayer> mBrainToLayer; // 0x10

	// Properties
	public bool IsValid { get; }

	// Methods
	// RVA: 0x22FAC0 Offset: 0x22E2C0 VA: 0x18022FAC0
	public bool get_IsValid() { }
	// RVA: 0x22FB90 Offset: 0x22E390 VA: 0x18022FB90
	public void InvalidateCachedProfile() { }
	// RVA: 0x22FC60 Offset: 0x22E460 VA: 0x18022FC60 Slot: 5
	protected override void OnDestroy() { }
	// RVA: 0x22FD60 Offset: 0x22E560 VA: 0x18022FD60 Slot: 7
	protected override void PostPipelineStageCallback(CinemachineVirtualCameraBase vcam, CinemachineCore.Stage stage, ref CameraState state, float deltaTime) { }
	// RVA: 0x230090 Offset: 0x22E890 VA: 0x180230090
	private static void OnCameraCut(CinemachineBrain brain) { }
	// RVA: 0x230170 Offset: 0x22E970 VA: 0x180230170
	private static void ApplyPostFX(CinemachineBrain brain) { }
	// RVA: 0x230580 Offset: 0x22ED80 VA: 0x180230580
	private static List<PostProcessVolume> GetDynamicBrainVolumes(CinemachineBrain brain, PostProcessLayer ppLayer, int minVolumes) { }
	// RVA: 0x230AA0 Offset: 0x22F2A0 VA: 0x180230AA0
	private static PostProcessLayer GetPPLayer(CinemachineBrain brain) { }
	// RVA: 0x230D30 Offset: 0x22F530 VA: 0x180230D30
	private static void OnSceneUnloaded(Scene scene) { }
	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xDC810 Offset: 0xDBC10 VA: 0x1800DC810
	// RVA: 0x230F30 Offset: 0x22F730 VA: 0x180230F30
	private static void InitializeModule() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
	// RVA: 0x2311A0 Offset: 0x22F9A0 VA: 0x1802311A0
	private static void .cctor() { }
}

// Namespace: 
private class CinemachinePostProcessing.VcamExtraState // TypeDefIndex: 2743
{
	// Fields
	public PostProcessProfile mProfileCopy; // 0x10

	// Methods
	// RVA: 0x63FA20 Offset: 0x63E220 VA: 0x18063FA20
	public void CreateProfileCopy(PostProcessProfile source) { }
	// RVA: 0x63FC30 Offset: 0x63E430 VA: 0x18063FC30
	public void DestroyProfileCopy() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Cinemachine.PostFX
public class CinemachineVolumeSettings : MonoBehaviour // TypeDefIndex: 2744
{
	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: Cinemachine.Utility
public class CinemachineDebug // TypeDefIndex: 2745
{
	// Fields
	private static HashSet<Object> mClients; // 0x0
	public static CinemachineDebug.OnGUIDelegate OnGUIHandlers; // 0x8
	private static List<StringBuilder> mAvailableStringBuilders; // 0x10

	// Methods
	// RVA: 0x3E40D0 Offset: 0x3E28D0 VA: 0x1803E40D0
	public static void ReleaseScreenPos(Object client) { }
	// RVA: 0x3E41A0 Offset: 0x3E29A0 VA: 0x1803E41A0
	public static Rect GetScreenPos(Object client, string text, GUIStyle style) { }
	// RVA: 0x3E44A0 Offset: 0x3E2CA0 VA: 0x1803E44A0
	public static StringBuilder SBFromPool() { }
	// RVA: 0x3E4590 Offset: 0x3E2D90 VA: 0x1803E4590
	public static void ReturnToPool(StringBuilder sb) { }
}

// Namespace: 
public sealed class CinemachineDebug.OnGUIDelegate : MulticastDelegate // TypeDefIndex: 2746
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: Cinemachine.Utility
internal abstract class GaussianWindow1d<T> // TypeDefIndex: 2747
{
	// Fields
	protected T[] mData; // 0x0
	protected float[] mKernel; // 0x0
	protected int mCurrentPos; // 0x0
	private float <Sigma>k__BackingField; // 0x0

	// Properties
	set; }
	public int KernelSize { get; }

	// Methods
	// RVA: 0x2E4C60 Offset: 0x2E3460 VA: 0x1802E4C60
	private void set_Sigma(float value) { }
	// RVA: 0x7F2530 Offset: 0x7F0D30 VA: 0x1807F2530
	public int get_KernelSize() { }
	// RVA: 0x7F2550 Offset: 0x7F0D50 VA: 0x1807F2550
	private void GenerateKernel(float sigma, int maxKernelRadius) { }
	// RVA: -1 Offset: -1 Slot: 4
	protected abstract T Compute(int windowPos) { }
	// RVA: 0x7F2830 Offset: 0x7F1030 VA: 0x1807F2830
	public void .ctor(float sigma, int maxKernelRadius = 10) { }
	// RVA: 0x335220 Offset: 0x333A20 VA: 0x180335220
	public void Reset() { }
	// RVA: 0x7F28C0 Offset: 0x7F10C0 VA: 0x1807F28C0
	public bool IsEmpty() { }
	// RVA: 0x7F2DB0 Offset: 0x7F15B0 VA: 0x1807F2DB0
	public void AddValue(T v) { }
	// RVA: 0x7F2F50 Offset: 0x7F1750 VA: 0x1807F2F50
	public T Value() { }
}

// Namespace: Cinemachine.Utility
internal class GaussianWindow1D_Vector3 : GaussianWindow1d<Vector3> // TypeDefIndex: 2748
{
	// Methods
	// RVA: 0x635740 Offset: 0x633F40 VA: 0x180635740
	public void .ctor(float sigma, int maxKernelRadius = 10) { }
	// RVA: 0x635850 Offset: 0x634050 VA: 0x180635850 Slot: 4
	protected override Vector3 Compute(int windowPos) { }
}

// Namespace: Cinemachine.Utility
public class PositionPredictor // TypeDefIndex: 2749
{
	// Fields
	private Vector3 m_Position; // 0x10
	private GaussianWindow1D_Vector3 m_Velocity; // 0x20
	private GaussianWindow1D_Vector3 m_Accel; // 0x28
	private float mLastVelAddedTime; // 0x30
	private const float kSmoothingDefault = 10; // 0x0
	private float mSmoothing; // 0x34

	// Properties
	set; }
	public bool IsEmpty { get; }

	// Methods
	// RVA: 0x637270 Offset: 0x635A70 VA: 0x180637270
	public void set_Smoothing(float value) { }
	// RVA: 0x6373A0 Offset: 0x635BA0 VA: 0x1806373A0
	public bool get_IsEmpty() { }
	// RVA: 0x637420 Offset: 0x635C20 VA: 0x180637420
	public void ApplyTransformDelta(Vector3 positionDelta) { }
	// RVA: 0x637520 Offset: 0x635D20 VA: 0x180637520
	public void Reset() { }
	// RVA: 0x6375B0 Offset: 0x635DB0 VA: 0x1806375B0
	public void AddPosition(Vector3 pos, float deltaTime, float lookaheadTime) { }
	// RVA: 0x6379D0 Offset: 0x6361D0 VA: 0x1806379D0
	public Vector3 PredictPositionDelta(float lookaheadTime) { }
	// RVA: 0x637BD0 Offset: 0x6363D0 VA: 0x180637BD0
	public void .ctor() { }
}

// Namespace: Cinemachine.Utility
public static class Damper // TypeDefIndex: 2750
{
	// Methods
	// RVA: 0x6354D0 Offset: 0x633CD0 VA: 0x1806354D0
	public static float Damp(float initial, float dampTime, float deltaTime) { }
	// RVA: 0x635610 Offset: 0x633E10 VA: 0x180635610
	public static Vector3 Damp(Vector3 initial, Vector3 dampTime, float deltaTime) { }
	// RVA: 0x6356B0 Offset: 0x633EB0 VA: 0x1806356B0
	public static Vector3 Damp(Vector3 initial, float dampTime, float deltaTime) { }
}

// Namespace: Cinemachine.Utility
public class HeadingTracker // TypeDefIndex: 2751
{
	// Fields
	private HeadingTracker.Item[] mHistory; // 0x10
	private int mTop; // 0x18
	private int mBottom; // 0x1C
	private int mCount; // 0x20
	private Vector3 mHeadingSum; // 0x24
	private float mWeightSum; // 0x30
	private float mWeightTime; // 0x34
	private Vector3 mLastGoodHeading; // 0x38
	private static float mDecayExponent; // 0x0

	// Properties
	public int FilterSize { get; }

	// Methods
	// RVA: 0x635A70 Offset: 0x634270 VA: 0x180635A70
	public void .ctor(int filterSize) { }
	// RVA: 0x1E7080 Offset: 0x1E5880 VA: 0x1801E7080
	public int get_FilterSize() { }
	// RVA: 0x635BA0 Offset: 0x6343A0 VA: 0x180635BA0
	private void ClearHistory() { }
	// RVA: 0x635C60 Offset: 0x634460 VA: 0x180635C60
	private static float Decay(float time) { }
	// RVA: 0x635D20 Offset: 0x634520 VA: 0x180635D20
	public void Add(Vector3 velocity) { }
	// RVA: 0x635F90 Offset: 0x634790 VA: 0x180635F90
	private void PopBottom() { }
	// RVA: 0x636190 Offset: 0x634990 VA: 0x180636190
	public void DecayHistory() { }
	// RVA: 0x636300 Offset: 0x634B00 VA: 0x180636300
	public Vector3 GetReliableHeading() { }
}

// Namespace: 
private struct HeadingTracker.Item // TypeDefIndex: 2752
{
	// Fields
	public Vector3 velocity; // 0x0
	public float weight; // 0xC
	public float time; // 0x10
}

// Namespace: Cinemachine.Utility
public static class SplineHelpers // TypeDefIndex: 2753
{
	// Methods
	// RVA: 0x637D70 Offset: 0x636570 VA: 0x180637D70
	public static Vector3 Bezier3(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3) { }
	// RVA: 0x638000 Offset: 0x636800 VA: 0x180638000
	public static Vector3 BezierTangent3(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3) { }
	// RVA: 0x638420 Offset: 0x636C20 VA: 0x180638420
	public static float Bezier1(float t, float p0, float p1, float p2, float p3) { }
	// RVA: 0x638560 Offset: 0x636D60 VA: 0x180638560
	public static void ComputeSmoothControlPoints(ref Vector4[] knot, ref Vector4[] ctrl1, ref Vector4[] ctrl2) { }
	// RVA: 0x639020 Offset: 0x637820 VA: 0x180639020
	public static void ComputeSmoothControlPointsLooped(ref Vector4[] knot, ref Vector4[] ctrl1, ref Vector4[] ctrl2) { }
}

// Namespace: Cinemachine.Utility
public static class UnityVectorExtensions // TypeDefIndex: 2754
{
	// Methods
	// RVA: 0x63A1D0 Offset: 0x6389D0 VA: 0x18063A1D0
	public static float ClosestPointOnSegment(Vector3 p, Vector3 s0, Vector3 s1) { }
	// RVA: 0x63A3E0 Offset: 0x638BE0 VA: 0x18063A3E0
	public static float ClosestPointOnSegment(Vector2 p, Vector2 s0, Vector2 s1) { }
	// RVA: 0x63A560 Offset: 0x638D60 VA: 0x18063A560
	public static Vector3 ProjectOntoPlane(Vector3 vector, Vector3 planeNormal) { }
	// RVA: 0x63A6D0 Offset: 0x638ED0 VA: 0x18063A6D0
	public static Vector3 Abs(Vector3 v) { }
	// RVA: 0x63A7B0 Offset: 0x638FB0 VA: 0x18063A7B0
	public static bool AlmostZero(Vector3 v) { }
	// RVA: 0x63A7F0 Offset: 0x638FF0 VA: 0x18063A7F0
	public static float Angle(Vector3 v1, Vector3 v2) { }
	// RVA: 0x63A9A0 Offset: 0x6391A0 VA: 0x18063A9A0
	public static float SignedAngle(Vector3 v1, Vector3 v2, Vector3 up) { }
}

// Namespace: Cinemachine.Utility
public static class UnityQuaternionExtensions // TypeDefIndex: 2755
{
	// Methods
	// RVA: 0x6394A0 Offset: 0x637CA0 VA: 0x1806394A0
	public static Quaternion SlerpWithReferenceUp(Quaternion qA, Quaternion qB, float t, Vector3 up) { }
	// RVA: 0x639A70 Offset: 0x638270 VA: 0x180639A70
	public static Quaternion Normalized(Quaternion q) { }
	// RVA: 0x639B50 Offset: 0x638350 VA: 0x180639B50
	public static Vector2 GetCameraRotationToTarget(Quaternion orient, Vector3 lookAtDir, Vector3 worldUp) { }
	// RVA: 0x63A050 Offset: 0x638850 VA: 0x18063A050
	public static Quaternion ApplyCameraRotation(Quaternion orient, Vector2 rot, Vector3 worldUp) { }
}

// Namespace: 
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 2756
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 78517443912BB49729313EC23065D9970ABC80E3 /*Metadata offset 0x15FD94*/; // 0xABCE0
}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 // TypeDefIndex: 2757
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2758
{}

// Namespace: 
public static class MeshExtension // TypeDefIndex: 2759
{
	// Methods
	// RVA: 0x68C9A0 Offset: 0x68B1A0 VA: 0x18068C9A0
	public static void ApplyVertices(Mesh mesh, Vector3[] vertices, int count) { }
	// RVA: 0x68CB10 Offset: 0x68B310 VA: 0x18068CB10
	public static void ApplyNormals(Mesh mesh, Vector3[] normals, int count) { }
	// RVA: 0x68CC80 Offset: 0x68B480 VA: 0x18068CC80
	public static void ApplyTangents(Mesh mesh, Vector4[] tangents, int count) { }
	// RVA: 0x68CDF0 Offset: 0x68B5F0 VA: 0x18068CDF0
	public static void ApplyUvs(Mesh mesh, Vector2[] uvs, int channel, int count) { }
	// RVA: 0x68D1D0 Offset: 0x68B9D0 VA: 0x18068D1D0
	public static void ApplyColors32(Mesh mesh, Color32[] colors32, int count) { }
	// RVA: 0x68D3C0 Offset: 0x68BBC0 VA: 0x18068D3C0
	public static void ApplyTriangles(Mesh mesh, int[] triangles, int count) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2760
{}

// Namespace: TMPro
public class FastAction // TypeDefIndex: 2761
{
	// Fields
	private LinkedList<Action> delegates; // 0x10
	private Dictionary<Action, LinkedListNode<Action>> lookup; // 0x18

	// Methods
	// RVA: 0x198260 Offset: 0x196A60 VA: 0x180198260
	public void .ctor() { }
}

// Namespace: TMPro
public class FastAction<A> // TypeDefIndex: 2762
{
	// Fields
	private LinkedList<Action<A>> delegates; // 0x0
	private Dictionary<Action<A>, LinkedListNode<Action<A>>> lookup; // 0x0

	// Methods
	// RVA: 0x7EA080 Offset: 0x7E8880 VA: 0x1807EA080
	public void Add(Action<A> rhs) { }
	// RVA: 0x7EA120 Offset: 0x7E8920 VA: 0x1807EA120
	public void Remove(Action<A> rhs) { }
	// RVA: 0x7EA1C0 Offset: 0x7E89C0 VA: 0x1807EA1C0
	public void Call(A a) { }
	// RVA: 0x7EA270 Offset: 0x7E8A70 VA: 0x1807EA270
	public void .ctor() { }
}

// Namespace: TMPro
public class FastAction<A, B> // TypeDefIndex: 2763
{
	// Fields
	private LinkedList<Action<A, B>> delegates; // 0x0
	private Dictionary<Action<A, B>, LinkedListNode<Action<A, B>>> lookup; // 0x0

	// Methods
	// RVA: 0x7EA3E0 Offset: 0x7E8BE0 VA: 0x1807EA3E0
	public void .ctor() { }
}

// Namespace: TMPro
public class FastAction<A, B, C> // TypeDefIndex: 2764
{
	// Fields
	private LinkedList<Action<A, B, C>> delegates; // 0x0
	private Dictionary<Action<A, B, C>, LinkedListNode<Action<A, B, C>>> lookup; // 0x0

	// Methods
	// RVA: 0x7EA3E0 Offset: 0x7E8BE0 VA: 0x1807EA3E0
	public void .ctor() { }
}

// Namespace: TMPro
public interface ITextPreprocessor // TypeDefIndex: 2765
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract string PreprocessText(string text) { }
}

// Namespace: TMPro
public class MaterialReferenceManager // TypeDefIndex: 2766
{
	// Fields
	private static MaterialReferenceManager s_Instance; // 0x0
	private Dictionary<int, Material> m_FontMaterialReferenceLookup; // 0x10
	private Dictionary<int, TMP_FontAsset> m_FontAssetReferenceLookup; // 0x18
	private Dictionary<int, TMP_SpriteAsset> m_SpriteAssetReferenceLookup; // 0x20
	private Dictionary<int, TMP_ColorGradient> m_ColorGradientReferenceLookup; // 0x28

	// Properties
	public static MaterialReferenceManager instance { get; }

	// Methods
	// RVA: 0x198FC0 Offset: 0x1977C0 VA: 0x180198FC0
	public static MaterialReferenceManager get_instance() { }
	// RVA: 0x1991D0 Offset: 0x1979D0 VA: 0x1801991D0
	public static void AddFontAsset(TMP_FontAsset fontAsset) { }
	// RVA: 0x199300 Offset: 0x197B00 VA: 0x180199300
	private void AddFontAssetInternal(TMP_FontAsset fontAsset) { }
	// RVA: 0x199420 Offset: 0x197C20 VA: 0x180199420
	public static void AddSpriteAsset(int hashCode, TMP_SpriteAsset spriteAsset) { }
	// RVA: 0x199560 Offset: 0x197D60 VA: 0x180199560
	private void AddSpriteAssetInternal(int hashCode, TMP_SpriteAsset spriteAsset) { }
	// RVA: 0x199690 Offset: 0x197E90 VA: 0x180199690
	public static void AddFontMaterial(int hashCode, Material material) { }
	// RVA: 0x199760 Offset: 0x197F60 VA: 0x180199760
	private void AddFontMaterialInternal(int hashCode, Material material) { }
	// RVA: 0x199820 Offset: 0x198020 VA: 0x180199820
	public static void AddColorGradientPreset(int hashCode, TMP_ColorGradient spriteAsset) { }
	// RVA: 0x199920 Offset: 0x198120 VA: 0x180199920
	private void AddColorGradientPreset_Internal(int hashCode, TMP_ColorGradient spriteAsset) { }
	// RVA: 0x199A10 Offset: 0x198210 VA: 0x180199A10
	public static bool TryGetFontAsset(int hashCode, out TMP_FontAsset fontAsset) { }
	// RVA: 0x199B20 Offset: 0x198320 VA: 0x180199B20
	private bool TryGetFontAssetInternal(int hashCode, out TMP_FontAsset fontAsset) { }
	// RVA: 0x199C20 Offset: 0x198420 VA: 0x180199C20
	public static bool TryGetSpriteAsset(int hashCode, out TMP_SpriteAsset spriteAsset) { }
	// RVA: 0x199D30 Offset: 0x198530 VA: 0x180199D30
	private bool TryGetSpriteAssetInternal(int hashCode, out TMP_SpriteAsset spriteAsset) { }
	// RVA: 0x199E30 Offset: 0x198630 VA: 0x180199E30
	public static bool TryGetColorGradientPreset(int hashCode, out TMP_ColorGradient gradientPreset) { }
	// RVA: 0x199F40 Offset: 0x198740 VA: 0x180199F40
	private bool TryGetColorGradientPresetInternal(int hashCode, out TMP_ColorGradient gradientPreset) { }
	// RVA: 0x19A040 Offset: 0x198840 VA: 0x18019A040
	public static bool TryGetMaterial(int hashCode, out Material material) { }
	// RVA: 0x19A150 Offset: 0x198950 VA: 0x18019A150
	private bool TryGetMaterialInternal(int hashCode, out Material material) { }
	// RVA: 0x19A250 Offset: 0x198A50 VA: 0x18019A250
	public void .ctor() { }
}

// Namespace: TMPro
public struct MaterialReference // TypeDefIndex: 2767
{
	// Fields
	public int index; // 0x0
	public TMP_FontAsset fontAsset; // 0x8
	public TMP_SpriteAsset spriteAsset; // 0x10
	public Material material; // 0x18
	public bool isDefaultMaterial; // 0x20
	public bool isFallbackMaterial; // 0x21
	public Material fallbackMaterial; // 0x28
	public float padding; // 0x30
	public int referenceCount; // 0x34

	// Methods
	// RVA: 0x6140 Offset: 0x5540 VA: 0x180006140
	public void .ctor(int index, TMP_FontAsset fontAsset, TMP_SpriteAsset spriteAsset, Material material, float padding) { }
	// RVA: 0x198B50 Offset: 0x197350 VA: 0x180198B50
	public static int AddMaterialReference(Material material, TMP_FontAsset fontAsset, MaterialReference[] materialReferences, Dictionary<int, int> materialReferenceIndexLookup) { }
	// RVA: 0x198D90 Offset: 0x197590 VA: 0x180198D90
	public static int AddMaterialReference(Material material, TMP_SpriteAsset spriteAsset, MaterialReference[] materialReferences, Dictionary<int, int> materialReferenceIndexLookup) { }
}

// Namespace: TMPro
[Serializable]
public class TMP_Asset : ScriptableObject // TypeDefIndex: 2768
{
	// Fields
	private int m_InstanceID; // 0x18
	public int hashCode; // 0x1C
	public Material material; // 0x20
	public int materialHashCode; // 0x28

	// Properties
	public int instanceID { get; }

	// Methods
	// RVA: 0x19D5A0 Offset: 0x19BDA0 VA: 0x18019D5A0
	public int get_instanceID() { }
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	public void .ctor() { }
}

// Namespace: TMPro
[Serializable]
public class TMP_Character : TMP_TextElement // TypeDefIndex: 2769
{
	// Methods
	// RVA: 0x19D5C0 Offset: 0x19BDC0 VA: 0x18019D5C0
	public void .ctor() { }
	// RVA: 0x19D5D0 Offset: 0x19BDD0 VA: 0x18019D5D0
	public void .ctor(uint unicode, Glyph glyph) { }
	// RVA: 0x19D600 Offset: 0x19BE00 VA: 0x18019D600
	internal void .ctor(uint unicode, uint glyphIndex) { }
}

// Namespace: TMPro
public struct TMP_Vertex // TypeDefIndex: 2770
{
	// Fields
	public Vector3 position; // 0x0
	public Vector2 uv; // 0xC
	public Vector2 uv2; // 0x14
	public Vector2 uv4; // 0x1C
	public Color32 color; // 0x24
	private static readonly TMP_Vertex k_Zero; // 0x0
}

// Namespace: TMPro
public struct TMP_Offset // TypeDefIndex: 2771
{
	// Fields
	private float m_Left; // 0x0
	private float m_Right; // 0x4
	private float m_Top; // 0x8
	private float m_Bottom; // 0xC
	private static readonly TMP_Offset k_ZeroOffset; // 0x0

	// Properties
	public float left { get; }
	public float right { get; }
	public float top { get; }
	public float bottom { get; }
	public static TMP_Offset zero { get; }

	// Methods
	// RVA: 0x4E80 Offset: 0x4280 VA: 0x180004E80
	public float get_left() { }
	// RVA: 0x4E90 Offset: 0x4290 VA: 0x180004E90
	public float get_right() { }
	// RVA: 0x4EA0 Offset: 0x42A0 VA: 0x180004EA0
	public float get_top() { }
	// RVA: 0x4EB0 Offset: 0x42B0 VA: 0x180004EB0
	public float get_bottom() { }
	// RVA: 0x16A980 Offset: 0x169180 VA: 0x18016A980
	public static TMP_Offset get_zero() { }
	// RVA: 0x4EC0 Offset: 0x42C0 VA: 0x180004EC0
	public void .ctor(float left, float right, float top, float bottom) { }
	// RVA: 0x16AA40 Offset: 0x169240 VA: 0x18016AA40
	public static bool op_Equality(TMP_Offset lhs, TMP_Offset rhs) { }
	// RVA: 0x16AA80 Offset: 0x169280 VA: 0x18016AA80
	public static TMP_Offset op_Multiply(TMP_Offset a, float b) { }
	// RVA: 0x4EE0 Offset: 0x42E0 VA: 0x180004EE0 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x4F80 Offset: 0x4380 VA: 0x180004F80 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x16AAA0 Offset: 0x1692A0 VA: 0x18016AAA0
	private static void .cctor() { }
}

// Namespace: TMPro
public struct HighlightState // TypeDefIndex: 2772
{
	// Fields
	public Color32 color; // 0x0
	public TMP_Offset padding; // 0x4

	// Methods
	// RVA: 0x6060 Offset: 0x5460 VA: 0x180006060
	public void .ctor(Color32 color, TMP_Offset padding) { }
	// RVA: 0x198590 Offset: 0x196D90 VA: 0x180198590
	public static bool op_Equality(HighlightState lhs, HighlightState rhs) { }
	// RVA: 0x1986F0 Offset: 0x196EF0 VA: 0x1801986F0
	public static bool op_Inequality(HighlightState lhs, HighlightState rhs) { }
	// RVA: 0x6070 Offset: 0x5470 VA: 0x180006070 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x6110 Offset: 0x5510 VA: 0x180006110 Slot: 0
	public override bool Equals(object obj) { }
}

// Namespace: TMPro
public struct TMP_CharacterInfo // TypeDefIndex: 2773
{
	// Fields
	public char character; // 0x0
	public int index; // 0x4
	public int stringLength; // 0x8
	public TMP_TextElementType elementType; // 0xC
	public TMP_TextElement textElement; // 0x10
	public TMP_FontAsset fontAsset; // 0x18
	public TMP_SpriteAsset spriteAsset; // 0x20
	public int spriteIndex; // 0x28
	public Material material; // 0x30
	public int materialReferenceIndex; // 0x38
	public bool isUsingAlternateTypeface; // 0x3C
	public float pointSize; // 0x40
	public int lineNumber; // 0x44
	public int pageNumber; // 0x48
	public int vertexIndex; // 0x4C
	public TMP_Vertex vertex_BL; // 0x50
	public TMP_Vertex vertex_TL; // 0x78
	public TMP_Vertex vertex_TR; // 0xA0
	public TMP_Vertex vertex_BR; // 0xC8
	public Vector3 topLeft; // 0xF0
	public Vector3 bottomLeft; // 0xFC
	public Vector3 topRight; // 0x108
	public Vector3 bottomRight; // 0x114
	public float origin; // 0x120
	public float ascender; // 0x124
	public float baseLine; // 0x128
	public float descender; // 0x12C
	public float xAdvance; // 0x130
	public float aspectRatio; // 0x134
	public float scale; // 0x138
	public Color32 color; // 0x13C
	public Color32 underlineColor; // 0x140
	public int underlineVertexIndex; // 0x144
	public Color32 strikethroughColor; // 0x148
	public int strikethroughVertexIndex; // 0x14C
	public Color32 highlightColor; // 0x150
	public HighlightState highlightState; // 0x154
	public FontStyles style; // 0x168
	public bool isVisible; // 0x16C
}

// Namespace: TMPro
public enum ColorMode // TypeDefIndex: 2774
{
	// Fields
	public int value__; // 0x0
	public const ColorMode Single = 0; // 0x0
	public const ColorMode HorizontalGradient = 1; // 0x0
	public const ColorMode VerticalGradient = 2; // 0x0
	public const ColorMode FourCornersGradient = 3; // 0x0
}

// Namespace: TMPro
[Serializable]
public class TMP_ColorGradient : ScriptableObject // TypeDefIndex: 2775
{
	// Fields
	public ColorMode colorMode; // 0x18
	public Color topLeft; // 0x1C
	public Color topRight; // 0x2C
	public Color bottomLeft; // 0x3C
	public Color bottomRight; // 0x4C
	private const ColorMode k_DefaultColorMode = 3; // 0x0
	private static readonly Color k_DefaultColor; // 0x0

	// Methods
	// RVA: 0x19D620 Offset: 0x19BE20 VA: 0x18019D620
	public void .ctor() { }
	// RVA: 0x19D720 Offset: 0x19BF20 VA: 0x18019D720
	public void .ctor(Color color) { }
	// RVA: 0x19D770 Offset: 0x19BF70 VA: 0x18019D770
	public void .ctor(Color color0, Color color1, Color color2, Color color3) { }
	// RVA: 0x19D7E0 Offset: 0x19BFE0 VA: 0x18019D7E0
	private static void .cctor() { }
}

// Namespace: TMPro
public static class TMP_Compatibility // TypeDefIndex: 2776
{
	// Methods
	// RVA: 0x19D860 Offset: 0x19C060 VA: 0x18019D860
	public static TextAlignmentOptions ConvertTextAlignmentEnumValues(TextAlignmentOptions oldValue) { }
}

// Namespace: TMPro
internal interface ITweenValue // TypeDefIndex: 2777
{
	// Properties
	public abstract bool ignoreTimeScale { get; }
	public abstract float duration { get; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 0
	public abstract void TweenValue(float floatPercentage) { }
	// RVA: -1 Offset: -1 Slot: 1
	public abstract bool get_ignoreTimeScale() { }
	// RVA: -1 Offset: -1 Slot: 2
	public abstract float get_duration() { }
	// RVA: -1 Offset: -1 Slot: 3
	public abstract bool ValidTarget() { }
}

// Namespace: TMPro
internal struct FloatTween : ITweenValue // TypeDefIndex: 2778
{
	// Fields
	private FloatTween.FloatTweenCallback m_Target; // 0x0
	private float m_StartValue; // 0x8
	private float m_TargetValue; // 0xC
	private float m_Duration; // 0x10
	private bool m_IgnoreTimeScale; // 0x14

	// Properties
	set; }
	public float targetValue { set; }
	public float duration { get; set; }
	public bool ignoreTimeScale { get; set; }

	// Methods
	// RVA: 0x5D30 Offset: 0x5130 VA: 0x180005D30
	public void set_startValue(float value) { }
	// RVA: 0x5D40 Offset: 0x5140 VA: 0x180005D40
	public void set_targetValue(float value) { }
	// RVA: 0x5D50 Offset: 0x5150 VA: 0x180005D50 Slot: 6
	public float get_duration() { }
	// RVA: 0x5D60 Offset: 0x5160 VA: 0x180005D60
	public void set_duration(float value) { }
	// RVA: 0x5D70 Offset: 0x5170 VA: 0x180005D70 Slot: 5
	public bool get_ignoreTimeScale() { }
	// RVA: 0x5D80 Offset: 0x5180 VA: 0x180005D80
	public void set_ignoreTimeScale(bool value) { }
	// RVA: 0x5D90 Offset: 0x5190 VA: 0x180005D90 Slot: 4
	public void TweenValue(float floatPercentage) { }
	// RVA: 0x5DA0 Offset: 0x51A0 VA: 0x180005DA0
	public void AddOnChangedCallback(UnityAction<float> callback) { }
	// RVA: 0x5DB0 Offset: 0x51B0 VA: 0x180005DB0 Slot: 7
	public bool ValidTarget() { }
}

// Namespace: 
public class FloatTween.FloatTweenCallback : UnityEvent<float> // TypeDefIndex: 2779
{
	// Methods
	// RVA: 0x3C8240 Offset: 0x3C6A40 VA: 0x1803C8240
	public void .ctor() { }
}

// Namespace: TMPro
internal class TweenRunner<T> // TypeDefIndex: 2780
{
	// Fields
	protected MonoBehaviour m_CoroutineContainer; // 0x0
	protected IEnumerator m_Tween; // 0x0

	// Methods
	// RVA: 0x7C4D10 Offset: 0x7C3510 VA: 0x1807C4D10
	private static IEnumerator Start(T tweenInfo) { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void Init(MonoBehaviour coroutineContainer) { }
	// RVA: 0x7C4E00 Offset: 0x7C3600 VA: 0x1807C4E00
	public void StartTween(T info) { }
	// RVA: 0x7C5010 Offset: 0x7C3810 VA: 0x1807C5010
	public void StopTween() { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
}

// Namespace: 
private sealed class TweenRunner.<Start>d__2<T> : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2781
{
	// Fields
	private int <>1__state; // 0x0
	private object <>2__current; // 0x0
	public T tweenInfo; // 0x0
	private float <elapsedTime>5__2; // 0x0

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x7C7A90 Offset: 0x7C6290 VA: 0x1807C7A90
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x7C8D00 Offset: 0x7C7500 VA: 0x1807C8D00 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: TMPro
[RequireComponent] // RVA: 0x103880 Offset: 0x102C80 VA: 0x180103880
public class TMP_Dropdown : Selectable, IPointerClickHandler, IEventSystemHandler, ISubmitHandler, ICancelHandler // TypeDefIndex: 2782
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private RectTransform m_Template; // 0xF0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_Text m_CaptionText; // 0xF8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Image m_CaptionImage; // 0x100
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Graphic m_Placeholder; // 0x108
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_Text m_ItemText; // 0x110
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Image m_ItemImage; // 0x118
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_Value; // 0x120
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_Dropdown.OptionDataList m_Options; // 0x128
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_Dropdown.DropdownEvent m_OnValueChanged; // 0x130
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_AlphaFadeSpeed; // 0x138
	private GameObject m_Dropdown; // 0x140
	private GameObject m_Blocker; // 0x148
	private List<TMP_Dropdown.DropdownItem> m_Items; // 0x150
	private TweenRunner<FloatTween> m_AlphaTweenRunner; // 0x158
	private bool validTemplate; // 0x160
	private Coroutine m_Coroutine; // 0x168
	private static TMP_Dropdown.OptionData s_NoOptionData; // 0x0

	// Properties
	public RectTransform template { get; set; }
	public TMP_Text captionText { get; set; }
	public Image captionImage { get; set; }
	public Graphic placeholder { get; set; }
	public TMP_Text itemText { get; set; }
	public Image itemImage { get; set; }
	public List<TMP_Dropdown.OptionData> options { get; set; }
	public TMP_Dropdown.DropdownEvent onValueChanged { get; set; }
	public float alphaFadeSpeed { get; set; }
	public int value { get; set; }
	public bool IsExpanded { get; }

	// Methods
	// RVA: 0x171030 Offset: 0x16F830 VA: 0x180171030
	public RectTransform get_template() { }
	// RVA: 0x19D970 Offset: 0x19C170 VA: 0x18019D970
	public void set_template(RectTransform value) { }
	// RVA: 0x171080 Offset: 0x16F880 VA: 0x180171080
	public TMP_Text get_captionText() { }
	// RVA: 0x19D980 Offset: 0x19C180 VA: 0x18019D980
	public void set_captionText(TMP_Text value) { }
	// RVA: 0x171250 Offset: 0x16FA50 VA: 0x180171250
	public Image get_captionImage() { }
	// RVA: 0x19D990 Offset: 0x19C190 VA: 0x18019D990
	public void set_captionImage(Image value) { }
	// RVA: 0x173240 Offset: 0x171A40 VA: 0x180173240
	public Graphic get_placeholder() { }
	// RVA: 0x19D9A0 Offset: 0x19C1A0 VA: 0x18019D9A0
	public void set_placeholder(Graphic value) { }
	// RVA: 0x19D9B0 Offset: 0x19C1B0 VA: 0x18019D9B0
	public TMP_Text get_itemText() { }
	// RVA: 0x19D9C0 Offset: 0x19C1C0 VA: 0x18019D9C0
	public void set_itemText(TMP_Text value) { }
	// RVA: 0x19D9D0 Offset: 0x19C1D0 VA: 0x18019D9D0
	public Image get_itemImage() { }
	// RVA: 0x19D9E0 Offset: 0x19C1E0 VA: 0x18019D9E0
	public void set_itemImage(Image value) { }
	// RVA: 0x19D9F0 Offset: 0x19C1F0 VA: 0x18019D9F0
	public List<TMP_Dropdown.OptionData> get_options() { }
	// RVA: 0x19DA10 Offset: 0x19C210 VA: 0x18019DA10
	public void set_options(List<TMP_Dropdown.OptionData> value) { }
	// RVA: 0x19DA40 Offset: 0x19C240 VA: 0x18019DA40
	public TMP_Dropdown.DropdownEvent get_onValueChanged() { }
	// RVA: 0x19DA50 Offset: 0x19C250 VA: 0x18019DA50
	public void set_onValueChanged(TMP_Dropdown.DropdownEvent value) { }
	// RVA: 0x19DA60 Offset: 0x19C260 VA: 0x18019DA60
	public float get_alphaFadeSpeed() { }
	// RVA: 0x19DA70 Offset: 0x19C270 VA: 0x18019DA70
	public void set_alphaFadeSpeed(float value) { }
	// RVA: 0x19DA80 Offset: 0x19C280 VA: 0x18019DA80
	public int get_value() { }
	// RVA: 0x19DA90 Offset: 0x19C290 VA: 0x18019DA90
	public void set_value(int value) { }
	// RVA: 0x19DAA0 Offset: 0x19C2A0 VA: 0x18019DAA0
	public void SetValueWithoutNotify(int input) { }
	// RVA: 0x19DAB0 Offset: 0x19C2B0 VA: 0x18019DAB0
	private void SetValue(int value, bool sendCallback = True) { }
	// RVA: 0x19DC90 Offset: 0x19C490 VA: 0x18019DC90
	public bool get_IsExpanded() { }
	// RVA: 0x19DD30 Offset: 0x19C530 VA: 0x18019DD30
	protected void .ctor() { }
	// RVA: 0x19DF20 Offset: 0x19C720 VA: 0x18019DF20 Slot: 4
	protected override void Awake() { }
	// RVA: 0x19E160 Offset: 0x19C960 VA: 0x18019E160 Slot: 6
	protected override void Start() { }
	// RVA: 0x19E170 Offset: 0x19C970 VA: 0x18019E170 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x19E260 Offset: 0x19CA60 VA: 0x18019E260
	public void RefreshShownValue() { }
	// RVA: 0x19E5C0 Offset: 0x19CDC0 VA: 0x18019E5C0
	public void AddOptions(List<TMP_Dropdown.OptionData> options) { }
	// RVA: 0x19E680 Offset: 0x19CE80 VA: 0x18019E680
	public void AddOptions(List<string> options) { }
	// RVA: 0x19E810 Offset: 0x19D010 VA: 0x18019E810
	public void AddOptions(List<Sprite> options) { }
	// RVA: 0x19E9A0 Offset: 0x19D1A0 VA: 0x18019E9A0
	public void ClearOptions() { }
	// RVA: 0x19EAA0 Offset: 0x19D2A0 VA: 0x18019EAA0
	private void SetupTemplate() { }
	// RVA: 0x429C80 Offset: 0x428480 VA: 0x180429C80
	private static T GetOrAddComponent(GameObject go) { }
	// RVA: 0x19F320 Offset: 0x19DB20 VA: 0x18019F320 Slot: 42
	public virtual void OnPointerClick(PointerEventData eventData) { }
	// RVA: 0x19F320 Offset: 0x19DB20 VA: 0x18019F320 Slot: 43
	public virtual void OnSubmit(BaseEventData eventData) { }
	// RVA: 0x19F330 Offset: 0x19DB30 VA: 0x18019F330 Slot: 44
	public virtual void OnCancel(BaseEventData eventData) { }
	// RVA: 0x19F340 Offset: 0x19DB40 VA: 0x18019F340
	public void Show() { }
	// RVA: 0x1A0680 Offset: 0x19EE80 VA: 0x1801A0680 Slot: 45
	protected virtual GameObject CreateBlocker(Canvas rootCanvas) { }
	// RVA: 0x1A0E00 Offset: 0x19F600 VA: 0x1801A0E00 Slot: 46
	protected virtual void DestroyBlocker(GameObject blocker) { }
	// RVA: 0x1A0E90 Offset: 0x19F690 VA: 0x1801A0E90 Slot: 47
	protected virtual GameObject CreateDropdownList(GameObject template) { }
	// RVA: 0x1A0F30 Offset: 0x19F730 VA: 0x1801A0F30 Slot: 48
	protected virtual void DestroyDropdownList(GameObject dropdownList) { }
	// RVA: 0x1A0FC0 Offset: 0x19F7C0 VA: 0x1801A0FC0 Slot: 49
	protected virtual TMP_Dropdown.DropdownItem CreateItem(TMP_Dropdown.DropdownItem itemTemplate) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 50
	protected virtual void DestroyItem(TMP_Dropdown.DropdownItem item) { }
	// RVA: 0x1A1060 Offset: 0x19F860 VA: 0x1801A1060
	private TMP_Dropdown.DropdownItem AddItem(TMP_Dropdown.OptionData data, bool selected, TMP_Dropdown.DropdownItem itemTemplate, List<TMP_Dropdown.DropdownItem> items) { }
	// RVA: 0x1A14C0 Offset: 0x19FCC0 VA: 0x1801A14C0
	private void AlphaFadeList(float duration, float alpha) { }
	// RVA: 0x1A15E0 Offset: 0x19FDE0 VA: 0x1801A15E0
	private void AlphaFadeList(float duration, float start, float end) { }
	// RVA: 0x1A1780 Offset: 0x19FF80 VA: 0x1801A1780
	private void SetAlpha(float alpha) { }
	// RVA: 0x1A1870 Offset: 0x1A0070 VA: 0x1801A1870
	public void Hide() { }
	// RVA: 0x1A1B40 Offset: 0x1A0340 VA: 0x1801A1B40
	private IEnumerator DelayedDestroyDropdownList(float delay) { }
	// RVA: 0x1A1BE0 Offset: 0x1A03E0 VA: 0x1801A1BE0
	private void ImmediateDestroyDropdownList() { }
	// RVA: 0x1A1DF0 Offset: 0x1A05F0 VA: 0x1801A1DF0
	private void OnSelectItem(Toggle toggle) { }
	// RVA: 0x1A2040 Offset: 0x1A0840 VA: 0x1801A2040
	private static void .cctor() { }
}

// Namespace: 
protected internal class TMP_Dropdown.DropdownItem : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, ICancelHandler // TypeDefIndex: 2783
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_Text m_Text; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Image m_Image; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private RectTransform m_RectTransform; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Toggle m_Toggle; // 0x30

	// Properties
	public TMP_Text text { get; set; }
	public Image image { get; set; }
	public RectTransform rectTransform { get; set; }
	public Toggle toggle { get; set; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public TMP_Text get_text() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_text(TMP_Text value) { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public Image get_image() { }
	// RVA: 0x16EEC0 Offset: 0x16D6C0 VA: 0x18016EEC0
	public void set_image(Image value) { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public RectTransform get_rectTransform() { }
	// RVA: 0x207510 Offset: 0x205D10 VA: 0x180207510
	public void set_rectTransform(RectTransform value) { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public Toggle get_toggle() { }
	// RVA: 0x1A20C0 Offset: 0x1A08C0 VA: 0x1801A20C0
	public void set_toggle(Toggle value) { }
	// RVA: 0x3C8450 Offset: 0x3C6C50 VA: 0x1803C8450 Slot: 6
	public virtual void OnPointerEnter(PointerEventData eventData) { }
	// RVA: 0x3C8550 Offset: 0x3C6D50 VA: 0x1803C8550 Slot: 7
	public virtual void OnCancel(BaseEventData eventData) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class TMP_Dropdown.OptionData // TypeDefIndex: 2784
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_Text; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Sprite m_Image; // 0x18

	// Properties
	public string text { get; set; }
	public Sprite image { get; set; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public string get_text() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void set_text(string value) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public Sprite get_image() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_image(Sprite value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void .ctor(string text) { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void .ctor(Sprite image) { }
}

// Namespace: 
[Serializable]
public class TMP_Dropdown.OptionDataList // TypeDefIndex: 2785
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<TMP_Dropdown.OptionData> m_Options; // 0x10

	// Properties
	public List<TMP_Dropdown.OptionData> options { get; set; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public List<TMP_Dropdown.OptionData> get_options() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	public void set_options(List<TMP_Dropdown.OptionData> value) { }
	// RVA: 0x640C40 Offset: 0x63F440 VA: 0x180640C40
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class TMP_Dropdown.DropdownEvent : UnityEvent<int> // TypeDefIndex: 2786
{
	// Methods
	// RVA: 0x3C83D0 Offset: 0x3C6BD0 VA: 0x1803C83D0
	public void .ctor() { }
}

// Namespace: 
private sealed class TMP_Dropdown.<>c__DisplayClass69_0 // TypeDefIndex: 2787
{
	// Fields
	public TMP_Dropdown.DropdownItem item; // 0x10
	public TMP_Dropdown <>4__this; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x3C82C0 Offset: 0x3C6AC0 VA: 0x1803C82C0
	internal void <Show>b__0(bool x) { }
}

// Namespace: 
private sealed class TMP_Dropdown.<DelayedDestroyDropdownList>d__81 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2788
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public float delay; // 0x20
	public TMP_Dropdown <>4__this; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x3C82F0 Offset: 0x3C6AF0 VA: 0x1803C82F0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: TMPro
public enum AtlasPopulationMode // TypeDefIndex: 2789
{
	// Fields
	public int value__; // 0x0
	public const AtlasPopulationMode Static = 0; // 0x0
	public const AtlasPopulationMode Dynamic = 1; // 0x0
}

// Namespace: TMPro
[Serializable]
public class TMP_FontAsset : TMP_Asset // TypeDefIndex: 2790
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_Version; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal string m_SourceFontFileGUID; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Font m_SourceFontFile; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AtlasPopulationMode m_AtlasPopulationMode; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal FaceInfo m_FaceInfo; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal List<Glyph> m_GlyphTable; // 0xA8
	internal Dictionary<uint, Glyph> m_GlyphLookupDictionary; // 0xB0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal List<TMP_Character> m_CharacterTable; // 0xB8
	internal Dictionary<uint, TMP_Character> m_CharacterLookupDictionary; // 0xC0
	internal Texture2D m_AtlasTexture; // 0xC8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal Texture2D[] m_AtlasTextures; // 0xD0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal int m_AtlasTextureIndex; // 0xD8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_IsMultiAtlasTexturesEnabled; // 0xDC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<GlyphRect> m_UsedGlyphRects; // 0xE0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<GlyphRect> m_FreeGlyphRects; // 0xE8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private FaceInfo_Legacy m_fontInfo; // 0xF0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public Texture2D atlas; // 0xF8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal int m_AtlasWidth; // 0x100
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal int m_AtlasHeight; // 0x104
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal int m_AtlasPadding; // 0x108
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal GlyphRenderMode m_AtlasRenderMode; // 0x10C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal List<TMP_Glyph> m_glyphInfoList; // 0x110
	[SerializeField] // RVA: 0x103900 Offset: 0x102D00 VA: 0x180103900
	[FormerlySerializedAsAttribute] // RVA: 0x103900 Offset: 0x102D00 VA: 0x180103900
	internal KerningTable m_KerningTable; // 0x118
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal TMP_FontFeatureTable m_FontFeatureTable; // 0x120
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<TMP_FontAsset> fallbackFontAssets; // 0x128
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal List<TMP_FontAsset> m_FallbackFontAssetTable; // 0x130
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal FontAssetCreationSettings m_CreationSettings; // 0x138
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_FontWeightPair[] m_FontWeightTable; // 0x190
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_FontWeightPair[] fontWeights; // 0x198
	public float normalStyle; // 0x1A0
	public float normalSpacingOffset; // 0x1A4
	public float boldStyle; // 0x1A8
	public float boldSpacing; // 0x1AC
	public byte italicStyle; // 0x1B0
	public byte tabSize; // 0x1B1
	private byte m_oldTabSize; // 0x1B2
	internal bool m_IsFontAssetLookupTablesDirty; // 0x1B3
	private static HashSet<int> k_SearchedFontAssetLookup; // 0x0
	private static List<TMP_FontAsset> k_FontAssets_FontFeaturesUpdateQueue; // 0x8
	private static HashSet<int> k_FontAssets_FontFeaturesUpdateQueueLookup; // 0x10
	private static List<TMP_FontAsset> k_FontAssets_AtlasTexturesUpdateQueue; // 0x18
	private static HashSet<int> k_FontAssets_AtlasTexturesUpdateQueueLookup; // 0x20
	private List<Glyph> m_GlyphsToRender; // 0x1B8
	private List<Glyph> m_GlyphsRendered; // 0x1C0
	private List<uint> m_GlyphIndexList; // 0x1C8
	private List<uint> m_GlyphIndexListNewlyAdded; // 0x1D0
	internal List<uint> m_GlyphsToAdd; // 0x1D8
	internal HashSet<uint> m_GlyphsToAddLookup; // 0x1E0
	internal List<TMP_Character> m_CharactersToAdd; // 0x1E8
	internal HashSet<uint> m_CharactersToAddLookup; // 0x1F0
	internal List<uint> s_MissingCharacterList; // 0x1F8
	internal HashSet<uint> m_MissingUnicodesFromFontFile; // 0x200
	internal static uint[] k_GlyphIndexArray; // 0x28

	// Properties
	public string version { get; set; }
	public Font sourceFontFile { get; set; }
	public AtlasPopulationMode atlasPopulationMode { get; set; }
	public FaceInfo faceInfo { get; set; }
	public List<Glyph> glyphTable { get; set; }
	public Dictionary<uint, Glyph> glyphLookupTable { get; }
	public List<TMP_Character> characterTable { get; set; }
	public Dictionary<uint, TMP_Character> characterLookupTable { get; }
	public Texture2D atlasTexture { get; }
	public Texture2D[] atlasTextures { get; set; }
	public int atlasTextureCount { get; }
	public bool isMultiAtlasTexturesEnabled { get; set; }
	internal List<GlyphRect> usedGlyphRects { get; set; }
	internal List<GlyphRect> freeGlyphRects { get; set; }
	[ObsoleteAttribute] // RVA: 0x103930 Offset: 0x102D30 VA: 0x180103930
	public FaceInfo_Legacy fontInfo { get; }
	public int atlasWidth { get; set; }
	public int atlasHeight { get; set; }
	public int atlasPadding { get; set; }
	public GlyphRenderMode atlasRenderMode { get; set; }
	public TMP_FontFeatureTable fontFeatureTable { get; set; }
	public List<TMP_FontAsset> fallbackFontAssetTable { get; set; }
	public FontAssetCreationSettings creationSettings { get; set; }
	public TMP_FontWeightPair[] fontWeightTable { get; set; }

	// Methods
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public string get_version() { }
	// RVA: 0x1A20C0 Offset: 0x1A08C0 VA: 0x1801A20C0
	internal void set_version(string value) { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public Font get_sourceFontFile() { }
	// RVA: 0x16F140 Offset: 0x16D940 VA: 0x18016F140
	internal void set_sourceFontFile(Font value) { }
	// RVA: 0x1A20D0 Offset: 0x1A08D0 VA: 0x1801A20D0
	public AtlasPopulationMode get_atlasPopulationMode() { }
	// RVA: 0x1A20E0 Offset: 0x1A08E0 VA: 0x1801A20E0
	public void set_atlasPopulationMode(AtlasPopulationMode value) { }
	// RVA: 0x16C1C0 Offset: 0x16A9C0 VA: 0x18016C1C0
	public FaceInfo get_faceInfo() { }
	// RVA: 0x16C200 Offset: 0x16AA00 VA: 0x18016C200
	public void set_faceInfo(FaceInfo value) { }
	// RVA: 0x1A20F0 Offset: 0x1A08F0 VA: 0x1801A20F0
	public List<Glyph> get_glyphTable() { }
	// RVA: 0x1A2100 Offset: 0x1A0900 VA: 0x1801A2100
	internal void set_glyphTable(List<Glyph> value) { }
	// RVA: 0x1A2110 Offset: 0x1A0910 VA: 0x1801A2110
	public Dictionary<uint, Glyph> get_glyphLookupTable() { }
	// RVA: 0x16C290 Offset: 0x16AA90 VA: 0x18016C290
	public List<TMP_Character> get_characterTable() { }
	// RVA: 0x16C2A0 Offset: 0x16AAA0 VA: 0x18016C2A0
	internal void set_characterTable(List<TMP_Character> value) { }
	// RVA: 0x1A2140 Offset: 0x1A0940 VA: 0x1801A2140
	public Dictionary<uint, TMP_Character> get_characterLookupTable() { }
	// RVA: 0x1A2170 Offset: 0x1A0970 VA: 0x1801A2170
	public Texture2D get_atlasTexture() { }
	// RVA: 0x1A2260 Offset: 0x1A0A60 VA: 0x1801A2260
	public Texture2D[] get_atlasTextures() { }
	// RVA: 0x1A2270 Offset: 0x1A0A70 VA: 0x1801A2270
	public void set_atlasTextures(Texture2D[] value) { }
	// RVA: 0x1A2280 Offset: 0x1A0A80 VA: 0x1801A2280
	public int get_atlasTextureCount() { }
	// RVA: 0x1A2290 Offset: 0x1A0A90 VA: 0x1801A2290
	public bool get_isMultiAtlasTexturesEnabled() { }
	// RVA: 0x1A22A0 Offset: 0x1A0AA0 VA: 0x1801A22A0
	public void set_isMultiAtlasTexturesEnabled(bool value) { }
	// RVA: 0x170D90 Offset: 0x16F590 VA: 0x180170D90
	internal List<GlyphRect> get_usedGlyphRects() { }
	// RVA: 0x170DA0 Offset: 0x16F5A0 VA: 0x180170DA0
	internal void set_usedGlyphRects(List<GlyphRect> value) { }
	// RVA: 0x1A22B0 Offset: 0x1A0AB0 VA: 0x1801A22B0
	internal List<GlyphRect> get_freeGlyphRects() { }
	// RVA: 0x1A22C0 Offset: 0x1A0AC0 VA: 0x1801A22C0
	internal void set_freeGlyphRects(List<GlyphRect> value) { }
	// RVA: 0x171030 Offset: 0x16F830 VA: 0x180171030
	public FaceInfo_Legacy get_fontInfo() { }
	// RVA: 0x1A22D0 Offset: 0x1A0AD0 VA: 0x1801A22D0
	public int get_atlasWidth() { }
	// RVA: 0x1A22E0 Offset: 0x1A0AE0 VA: 0x1801A22E0
	internal void set_atlasWidth(int value) { }
	// RVA: 0x1A22F0 Offset: 0x1A0AF0 VA: 0x1801A22F0
	public int get_atlasHeight() { }
	// RVA: 0x1A2300 Offset: 0x1A0B00 VA: 0x1801A2300
	internal void set_atlasHeight(int value) { }
	// RVA: 0x1A2310 Offset: 0x1A0B10 VA: 0x1801A2310
	public int get_atlasPadding() { }
	// RVA: 0x1A2320 Offset: 0x1A0B20 VA: 0x1801A2320
	internal void set_atlasPadding(int value) { }
	// RVA: 0x1A2330 Offset: 0x1A0B30 VA: 0x1801A2330
	public GlyphRenderMode get_atlasRenderMode() { }
	// RVA: 0x1A2340 Offset: 0x1A0B40 VA: 0x1801A2340
	internal void set_atlasRenderMode(GlyphRenderMode value) { }
	// RVA: 0x197B40 Offset: 0x196340 VA: 0x180197B40
	public TMP_FontFeatureTable get_fontFeatureTable() { }
	// RVA: 0x1A2350 Offset: 0x1A0B50 VA: 0x1801A2350
	internal void set_fontFeatureTable(TMP_FontFeatureTable value) { }
	// RVA: 0x19DA40 Offset: 0x19C240 VA: 0x18019DA40
	public List<TMP_FontAsset> get_fallbackFontAssetTable() { }
	// RVA: 0x19DA50 Offset: 0x19C250 VA: 0x18019DA50
	public void set_fallbackFontAssetTable(List<TMP_FontAsset> value) { }
	// RVA: 0x1A2360 Offset: 0x1A0B60 VA: 0x1801A2360
	public FontAssetCreationSettings get_creationSettings() { }
	// RVA: 0x1A23B0 Offset: 0x1A0BB0 VA: 0x1801A23B0
	public void set_creationSettings(FontAssetCreationSettings value) { }
	// RVA: 0x1A2400 Offset: 0x1A0C00 VA: 0x1801A2400
	public TMP_FontWeightPair[] get_fontWeightTable() { }
	// RVA: 0x1A2410 Offset: 0x1A0C10 VA: 0x1801A2410
	internal void set_fontWeightTable(TMP_FontWeightPair[] value) { }
	// RVA: 0x1A2420 Offset: 0x1A0C20 VA: 0x1801A2420
	public static TMP_FontAsset CreateFontAsset(Font font) { }
	// RVA: 0x1A24F0 Offset: 0x1A0CF0 VA: 0x1801A24F0
	public static TMP_FontAsset CreateFontAsset(Font font, int samplingPointSize, int atlasPadding, GlyphRenderMode renderMode, int atlasWidth, int atlasHeight, AtlasPopulationMode atlasPopulationMode = 1, bool enableMultiAtlasSupport = True) { }
	// RVA: 0x1A2F30 Offset: 0x1A1730 VA: 0x1801A2F30
	private void Awake() { }
	// RVA: 0x1A2FF0 Offset: 0x1A17F0 VA: 0x1801A2FF0
	public void ReadFontAssetDefinition() { }
	// RVA: 0x1A3270 Offset: 0x1A1A70 VA: 0x1801A3270
	internal void InitializeDictionaryLookupTables() { }
	// RVA: 0x1A32A0 Offset: 0x1A1AA0 VA: 0x1801A32A0
	internal void InitializeGlyphLookupDictionary() { }
	// RVA: 0x1A3520 Offset: 0x1A1D20 VA: 0x1801A3520
	internal void InitializeCharacterLookupDictionary() { }
	// RVA: 0x1A3740 Offset: 0x1A1F40 VA: 0x1801A3740
	internal void InitializeGlyphPaidAdjustmentRecordsLookupDictionary() { }
	// RVA: 0x1A3950 Offset: 0x1A2150 VA: 0x1801A3950
	internal void AddSynthesizedCharactersAndFaceMetrics() { }
	// RVA: 0x1A3C30 Offset: 0x1A2430 VA: 0x1801A3C30
	private void AddSynthesizedCharacter(uint unicode, bool addImmediately = False) { }
	// RVA: 0x1A4040 Offset: 0x1A2840 VA: 0x1801A4040
	internal void SortCharacterTable() { }
	// RVA: 0x1A4190 Offset: 0x1A2990 VA: 0x1801A4190
	internal void SortGlyphTable() { }
	// RVA: 0x1A42E0 Offset: 0x1A2AE0 VA: 0x1801A42E0
	internal void SortFontFeatureTable() { }
	// RVA: 0x1A4310 Offset: 0x1A2B10 VA: 0x1801A4310
	internal void SortAllTables() { }
	// RVA: 0x1A45B0 Offset: 0x1A2DB0 VA: 0x1801A45B0
	public bool HasCharacter(int character) { }
	// RVA: 0x1A4660 Offset: 0x1A2E60 VA: 0x1801A4660
	public bool HasCharacter(char character, bool searchFallbacks = False, bool tryAddCharacter = False) { }
	// RVA: 0x1A4CE0 Offset: 0x1A34E0 VA: 0x1801A4CE0
	private bool HasCharacter_Internal(uint character, bool searchFallbacks = False, bool tryAddCharacter = False) { }
	// RVA: 0x1A4F70 Offset: 0x1A3770 VA: 0x1801A4F70
	public bool HasCharacters(string text, out List<char> missingCharacters) { }
	// RVA: 0x1A5180 Offset: 0x1A3980 VA: 0x1801A5180
	public bool HasCharacters(string text, out uint[] missingCharacters, bool searchFallbacks = False, bool tryAddCharacter = False) { }
	// RVA: 0x1A58B0 Offset: 0x1A40B0 VA: 0x1801A58B0
	public bool HasCharacters(string text) { }
	// RVA: 0x1A59A0 Offset: 0x1A41A0 VA: 0x1801A59A0
	public static string GetCharacters(TMP_FontAsset fontAsset) { }
	// RVA: 0x1A5D70 Offset: 0x1A4570 VA: 0x1801A5D70
	public static int[] GetCharactersArray(TMP_FontAsset fontAsset) { }
	// RVA: 0x1A5E70 Offset: 0x1A4670 VA: 0x1801A5E70
	internal uint GetGlyphIndex(uint unicode) { }
	// RVA: 0x1A6000 Offset: 0x1A4800 VA: 0x1801A6000
	internal static void RegisterFontAssetForFontFeatureUpdate(TMP_FontAsset fontAsset) { }
	// RVA: 0x1A6140 Offset: 0x1A4940 VA: 0x1801A6140
	internal static void UpdateFontFeaturesForFontAssetsInQueue() { }
	// RVA: 0x1A6300 Offset: 0x1A4B00 VA: 0x1801A6300
	internal static void RegisterFontAssetForAtlasTextureUpdate(TMP_FontAsset fontAsset) { }
	// RVA: 0x1A6440 Offset: 0x1A4C40 VA: 0x1801A6440
	internal static void UpdateAtlasTexturesForFontAssetsInQueue() { }
	// RVA: 0x1A65F0 Offset: 0x1A4DF0 VA: 0x1801A65F0
	public bool TryAddCharacters(uint[] unicodes, bool includeFontFeatures = False) { }
	// RVA: 0x1A6620 Offset: 0x1A4E20 VA: 0x1801A6620
	public bool TryAddCharacters(uint[] unicodes, out uint[] missingUnicodes, bool includeFontFeatures = False) { }
	// RVA: 0x1A70D0 Offset: 0x1A58D0 VA: 0x1801A70D0
	public bool TryAddCharacters(string characters, bool includeFontFeatures = False) { }
	// RVA: 0x1A7100 Offset: 0x1A5900 VA: 0x1801A7100
	public bool TryAddCharacters(string characters, out string missingCharacters, bool includeFontFeatures = False) { }
	// RVA: 0x1A7C80 Offset: 0x1A6480 VA: 0x1801A7C80
	internal bool TryAddCharacterInternal(uint unicode, out TMP_Character character) { }
	// RVA: 0x1A8690 Offset: 0x1A6E90 VA: 0x1801A8690
	internal bool TryGetCharacter_and_QueueRenderToTexture(uint unicode, out TMP_Character character) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	internal void TryAddGlyphsToAtlasTextures() { }
	// RVA: 0x1A8DA0 Offset: 0x1A75A0 VA: 0x1801A8DA0
	private bool TryAddGlyphsToNewAtlasTexture() { }
	// RVA: 0x1A92D0 Offset: 0x1A7AD0 VA: 0x1801A92D0
	private void SetupNewAtlasTexture() { }
	// RVA: 0x1A95E0 Offset: 0x1A7DE0 VA: 0x1801A95E0
	internal void UpdateAtlasTexture() { }
	// RVA: 0x1A9850 Offset: 0x1A8050 VA: 0x1801A9850
	internal void UpdateGlyphAdjustmentRecords() { }
	// RVA: 0x1A9BF0 Offset: 0x1A83F0 VA: 0x1801A9BF0
	internal void UpdateGlyphAdjustmentRecords(uint[] glyphIndexes) { }
	// RVA: 0x429E40 Offset: 0x428640 VA: 0x180429E40
	private void CopyListDataToArray(List<T> srcList, ref T[] dstArray) { }
	// RVA: 0x1A9E60 Offset: 0x1A8660 VA: 0x1801A9E60
	public void ClearFontAssetData(bool setAtlasSizeToZero = False) { }
	// RVA: 0x1A9EA0 Offset: 0x1A86A0 VA: 0x1801A9EA0
	internal void UpdateFontAssetData() { }
	// RVA: 0x1AA020 Offset: 0x1A8820 VA: 0x1801AA020
	internal void ClearFontAssetTables() { }
	// RVA: 0x1AA290 Offset: 0x1A8A90 VA: 0x1801AA290
	internal void ClearAtlasTextures(bool setAtlasSizeToZero = False) { }
	// RVA: 0x1AA580 Offset: 0x1A8D80 VA: 0x1801AA580
	internal void UpgradeFontAsset() { }
	// RVA: 0x1AB170 Offset: 0x1A9970 VA: 0x1801AB170
	private void UpgradeGlyphAdjustmentTableToFontFeatureTable() { }
	// RVA: 0x1AB540 Offset: 0x1A9D40 VA: 0x1801AB540
	public void .ctor() { }
	// RVA: 0x1AB8E0 Offset: 0x1AA0E0 VA: 0x1801AB8E0
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class TMP_FontAsset.<>c // TypeDefIndex: 2791
{
	// Fields
	public static readonly TMP_FontAsset.<>c <>9; // 0x0
	public static Func<TMP_Character, uint> <>9__111_0; // 0x8
	public static Func<Glyph, uint> <>9__112_0; // 0x10

	// Methods
	// RVA: 0x640CE0 Offset: 0x63F4E0 VA: 0x180640CE0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x640D60 Offset: 0x63F560 VA: 0x180640D60
	internal uint <SortCharacterTable>b__111_0(TMP_Character c) { }
	// RVA: 0x640D80 Offset: 0x63F580 VA: 0x180640D80
	internal uint <SortGlyphTable>b__112_0(Glyph c) { }
}

// Namespace: TMPro
[Serializable]
public class FaceInfo_Legacy // TypeDefIndex: 2792
{
	// Fields
	public string Name; // 0x10
	public float PointSize; // 0x18
	public float Scale; // 0x1C
	public int CharacterCount; // 0x20
	public float LineHeight; // 0x24
	public float Baseline; // 0x28
	public float Ascender; // 0x2C
	public float CapHeight; // 0x30
	public float Descender; // 0x34
	public float CenterLine; // 0x38
	public float SuperscriptOffset; // 0x3C
	public float SubscriptOffset; // 0x40
	public float SubSize; // 0x44
	public float Underline; // 0x48
	public float UnderlineThickness; // 0x4C
	public float strikethrough; // 0x50
	public float strikethroughThickness; // 0x54
	public float TabWidth; // 0x58
	public float Padding; // 0x5C
	public float AtlasWidth; // 0x60
	public float AtlasHeight; // 0x64

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: TMPro
[Serializable]
public class TMP_Glyph : TMP_TextElement_Legacy // TypeDefIndex: 2793
{
	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: TMPro
[Serializable]
public struct FontAssetCreationSettings // TypeDefIndex: 2794
{
	// Fields
	public string sourceFontFileName; // 0x0
	public string sourceFontFileGUID; // 0x8
	public int pointSizeSamplingMode; // 0x10
	public int pointSize; // 0x14
	public int padding; // 0x18
	public int packingMode; // 0x1C
	public int atlasWidth; // 0x20
	public int atlasHeight; // 0x24
	public int characterSetSelectionMode; // 0x28
	public string characterSequence; // 0x30
	public string referencedFontAssetGUID; // 0x38
	public string referencedTextAssetGUID; // 0x40
	public int fontStyle; // 0x48
	public float fontStyleModifier; // 0x4C
	public int renderMode; // 0x50
	public bool includeFontFeatures; // 0x54
}

// Namespace: TMPro
[Serializable]
public struct TMP_FontWeightPair // TypeDefIndex: 2795
{
	// Fields
	public TMP_FontAsset regularTypeface; // 0x0
	public TMP_FontAsset italicTypeface; // 0x8
}

// Namespace: TMPro
[Serializable]
public struct GlyphValueRecord_Legacy // TypeDefIndex: 2796
{
	// Fields
	public float xPlacement; // 0x0
	public float yPlacement; // 0x4
	public float xAdvance; // 0x8
	public float yAdvance; // 0xC
}

// Namespace: TMPro
[Serializable]
public class KerningPair // TypeDefIndex: 2797
{
	// Fields
	[FormerlySerializedAsAttribute] // RVA: 0x103960 Offset: 0x102D60 VA: 0x180103960
	[SerializeField] // RVA: 0x103960 Offset: 0x102D60 VA: 0x180103960
	private uint m_FirstGlyph; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GlyphValueRecord_Legacy m_FirstGlyphAdjustments; // 0x14
	[SerializeField] // RVA: 0x103990 Offset: 0x102D90 VA: 0x180103990
	[FormerlySerializedAsAttribute] // RVA: 0x103990 Offset: 0x102D90 VA: 0x180103990
	private uint m_SecondGlyph; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GlyphValueRecord_Legacy m_SecondGlyphAdjustments; // 0x28
	[FormerlySerializedAsAttribute] // RVA: 0x1039C0 Offset: 0x102DC0 VA: 0x1801039C0
	public float xOffset; // 0x38
	internal static KerningPair empty; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_IgnoreSpacingAdjustments; // 0x3C

	// Properties
	public uint firstGlyph { get; }
	public GlyphValueRecord_Legacy firstGlyphAdjustments { get; }
	public uint secondGlyph { get; }
	public GlyphValueRecord_Legacy secondGlyphAdjustments { get; }

	// Methods
	// RVA: 0x198900 Offset: 0x197100 VA: 0x180198900
	public uint get_firstGlyph() { }
	// RVA: 0x198910 Offset: 0x197110 VA: 0x180198910
	public GlyphValueRecord_Legacy get_firstGlyphAdjustments() { }
	// RVA: 0x198920 Offset: 0x197120 VA: 0x180198920
	public uint get_secondGlyph() { }
	// RVA: 0x198930 Offset: 0x197130 VA: 0x180198930
	public GlyphValueRecord_Legacy get_secondGlyphAdjustments() { }
	// RVA: 0x198940 Offset: 0x197140 VA: 0x180198940
	public void .ctor() { }
	// RVA: 0x198960 Offset: 0x197160 VA: 0x180198960
	public void .ctor(uint firstGlyph, GlyphValueRecord_Legacy firstGlyphAdjustments, uint secondGlyph, GlyphValueRecord_Legacy secondGlyphAdjustments) { }
	// RVA: 0x198980 Offset: 0x197180 VA: 0x180198980
	private static void .cctor() { }
}

// Namespace: TMPro
[Serializable]
public class KerningTable // TypeDefIndex: 2798
{
	// Fields
	public List<KerningPair> kerningPairs; // 0x10

	// Methods
	// RVA: 0x198A20 Offset: 0x197220 VA: 0x180198A20
	public void .ctor() { }
}

// Namespace: TMPro
public class TMP_FontAssetUtilities // TypeDefIndex: 2799
{
	// Fields
	private static readonly TMP_FontAssetUtilities s_Instance; // 0x0
	private static List<int> k_SearchedFontAssets; // 0x8

	// Methods
	// RVA: 0x1ABA70 Offset: 0x1AA270 VA: 0x1801ABA70
	private static void .cctor() { }
	// RVA: 0x1ABAF0 Offset: 0x1AA2F0 VA: 0x1801ABAF0
	public static TMP_Character GetCharacterFromFontAsset(uint unicode, TMP_FontAsset sourceFontAsset, bool includeFallbacks, FontStyles fontStyle, FontWeight fontWeight, out bool isAlternativeTypeface, out TMP_FontAsset fontAsset) { }
	// RVA: 0x1ABCA0 Offset: 0x1AA4A0 VA: 0x1801ABCA0
	private static TMP_Character GetCharacterFromFontAsset_Internal(uint unicode, TMP_FontAsset sourceFontAsset, bool includeFallbacks, FontStyles fontStyle, FontWeight fontWeight, out bool isAlternativeTypeface, out TMP_FontAsset fontAsset) { }
	// RVA: 0x1AC1F0 Offset: 0x1AA9F0 VA: 0x1801AC1F0
	public static TMP_Character GetCharacterFromFontAssets(uint unicode, List<TMP_FontAsset> fontAssets, bool includeFallbacks, FontStyles fontStyle, FontWeight fontWeight, out bool isAlternativeTypeface, out TMP_FontAsset fontAsset) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: TMPro
[Serializable]
public class TMP_FontFeatureTable // TypeDefIndex: 2800
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal List<TMP_GlyphPairAdjustmentRecord> m_GlyphPairAdjustmentRecords; // 0x10
	internal Dictionary<uint, TMP_GlyphPairAdjustmentRecord> m_GlyphPairAdjustmentRecordLookupDictionary; // 0x18

	// Properties
	public List<TMP_GlyphPairAdjustmentRecord> glyphPairAdjustmentRecords { get; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public List<TMP_GlyphPairAdjustmentRecord> get_glyphPairAdjustmentRecords() { }
	// RVA: 0x1AC480 Offset: 0x1AAC80 VA: 0x1801AC480
	public void .ctor() { }
	// RVA: 0x1AC560 Offset: 0x1AAD60 VA: 0x1801AC560
	public void SortGlyphPairAdjustmentRecords() { }
}

// Namespace: 
[Serializable]
private sealed class TMP_FontFeatureTable.<>c // TypeDefIndex: 2801
{
	// Fields
	public static readonly TMP_FontFeatureTable.<>c <>9; // 0x0
	public static Func<TMP_GlyphPairAdjustmentRecord, uint> <>9__6_0; // 0x8
	public static Func<TMP_GlyphPairAdjustmentRecord, uint> <>9__6_1; // 0x10

	// Methods
	// RVA: 0x640DA0 Offset: 0x63F5A0 VA: 0x180640DA0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x640E20 Offset: 0x63F620 VA: 0x180640E20
	internal uint <SortGlyphPairAdjustmentRecords>b__6_0(TMP_GlyphPairAdjustmentRecord s) { }
	// RVA: 0x640E40 Offset: 0x63F640 VA: 0x180640E40
	internal uint <SortGlyphPairAdjustmentRecords>b__6_1(TMP_GlyphPairAdjustmentRecord s) { }
}

// Namespace: TMPro
public enum FontFeatureLookupFlags // TypeDefIndex: 2802
{
	// Fields
	public int value__; // 0x0
	public const FontFeatureLookupFlags None = 0; // 0x0
	public const FontFeatureLookupFlags IgnoreLigatures = 4; // 0x0
	public const FontFeatureLookupFlags IgnoreSpacingAdjustments = 256; // 0x0
}

// Namespace: TMPro
[Serializable]
public struct TMP_GlyphValueRecord // TypeDefIndex: 2803
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal float m_XPlacement; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal float m_YPlacement; // 0x4
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal float m_XAdvance; // 0x8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal float m_YAdvance; // 0xC

	// Properties
	public float xPlacement { get; }
	public float yPlacement { get; }
	public float xAdvance { get; }
	public float yAdvance { get; }

	// Methods
	// RVA: 0x4E80 Offset: 0x4280 VA: 0x180004E80
	public float get_xPlacement() { }
	// RVA: 0x4E90 Offset: 0x4290 VA: 0x180004E90
	public float get_yPlacement() { }
	// RVA: 0x4EA0 Offset: 0x42A0 VA: 0x180004EA0
	public float get_xAdvance() { }
	// RVA: 0x4EB0 Offset: 0x42B0 VA: 0x180004EB0
	public float get_yAdvance() { }
	// RVA: 0x4EC0 Offset: 0x42C0 VA: 0x180004EC0
	public void .ctor(float xPlacement, float yPlacement, float xAdvance, float yAdvance) { }
	// RVA: 0x62A0 Offset: 0x56A0 VA: 0x1800062A0
	internal void .ctor(GlyphValueRecord valueRecord) { }
	// RVA: 0x1ACB20 Offset: 0x1AB320 VA: 0x1801ACB20
	public static TMP_GlyphValueRecord op_Addition(TMP_GlyphValueRecord a, TMP_GlyphValueRecord b) { }
}

// Namespace: TMPro
[Serializable]
public struct TMP_GlyphAdjustmentRecord // TypeDefIndex: 2804
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal uint m_GlyphIndex; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal TMP_GlyphValueRecord m_GlyphValueRecord; // 0x4

	// Properties
	public uint glyphIndex { get; }
	public TMP_GlyphValueRecord glyphValueRecord { get; }

	// Methods
	// RVA: 0x1E10 Offset: 0x1210 VA: 0x180001E10
	public uint get_glyphIndex() { }
	// RVA: 0x6240 Offset: 0x5640 VA: 0x180006240
	public TMP_GlyphValueRecord get_glyphValueRecord() { }
	// RVA: 0x6060 Offset: 0x5460 VA: 0x180006060
	public void .ctor(uint glyphIndex, TMP_GlyphValueRecord glyphValueRecord) { }
	// RVA: 0x6250 Offset: 0x5650 VA: 0x180006250
	internal void .ctor(GlyphAdjustmentRecord adjustmentRecord) { }
}

// Namespace: TMPro
[Serializable]
public class TMP_GlyphPairAdjustmentRecord // TypeDefIndex: 2805
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal TMP_GlyphAdjustmentRecord m_FirstAdjustmentRecord; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal TMP_GlyphAdjustmentRecord m_SecondAdjustmentRecord; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal FontFeatureLookupFlags m_FeatureLookupFlags; // 0x38

	// Properties
	public TMP_GlyphAdjustmentRecord firstAdjustmentRecord { get; }
	public TMP_GlyphAdjustmentRecord secondAdjustmentRecord { get; }
	public FontFeatureLookupFlags featureLookupFlags { get; }

	// Methods
	// RVA: 0x197B50 Offset: 0x196350 VA: 0x180197B50
	public TMP_GlyphAdjustmentRecord get_firstAdjustmentRecord() { }
	// RVA: 0x197B90 Offset: 0x196390 VA: 0x180197B90
	public TMP_GlyphAdjustmentRecord get_secondAdjustmentRecord() { }
	// RVA: 0x197B80 Offset: 0x196380 VA: 0x180197B80
	public FontFeatureLookupFlags get_featureLookupFlags() { }
	// RVA: 0x1ACA20 Offset: 0x1AB220 VA: 0x1801ACA20
	public void .ctor(TMP_GlyphAdjustmentRecord firstAdjustmentRecord, TMP_GlyphAdjustmentRecord secondAdjustmentRecord) { }
	// RVA: 0x1ACA50 Offset: 0x1AB250 VA: 0x1801ACA50
	internal void .ctor(GlyphPairAdjustmentRecord glyphPairAdjustmentRecord) { }
}

// Namespace: TMPro
public struct GlyphPairKey // TypeDefIndex: 2806
{
	// Fields
	public uint firstGlyphIndex; // 0x0
	public uint secondGlyphIndex; // 0x4
	public uint key; // 0x8

	// Methods
	// RVA: 0x6010 Offset: 0x5410 VA: 0x180006010
	public void .ctor(uint firstGlyphIndex, uint secondGlyphIndex) { }
	// RVA: 0x6030 Offset: 0x5430 VA: 0x180006030
	internal void .ctor(TMP_GlyphPairAdjustmentRecord record) { }
}

// Namespace: TMPro
public class TMP_InputField : Selectable, IUpdateSelectedHandler, IEventSystemHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, ICanvasElement, ILayoutElement, IScrollHandler // TypeDefIndex: 2807
{
	// Fields
	protected TouchScreenKeyboard m_SoftKeyboard; // 0xF0
	private static readonly char[] kSeparators; // 0x0
	protected RectTransform m_RectTransform; // 0xF8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected RectTransform m_TextViewport; // 0x100
	protected RectMask2D m_TextComponentRectMask; // 0x108
	protected RectMask2D m_TextViewportRectMask; // 0x110
	private Rect m_CachedViewportRect; // 0x118
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TMP_Text m_TextComponent; // 0x128
	protected RectTransform m_TextComponentRectTransform; // 0x130
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Graphic m_Placeholder; // 0x138
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Scrollbar m_VerticalScrollbar; // 0x140
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TMP_ScrollbarEventHandler m_VerticalScrollbarEventHandler; // 0x148
	private bool m_IsDrivenByLayoutComponents; // 0x150
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private LayoutGroup m_LayoutGroup; // 0x158
	private float m_ScrollPosition; // 0x160
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_ScrollSensitivity; // 0x164
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.ContentType m_ContentType; // 0x168
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.InputType m_InputType; // 0x16C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private char m_AsteriskChar; // 0x170
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TouchScreenKeyboardType m_KeyboardType; // 0x174
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.LineType m_LineType; // 0x178
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_HideMobileInput; // 0x17C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_HideSoftKeyboard; // 0x17D
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.CharacterValidation m_CharacterValidation; // 0x180
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_RegexValue; // 0x188
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_GlobalPointSize; // 0x190
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_CharacterLimit; // 0x194
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.SubmitEvent m_OnEndEdit; // 0x198
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.SubmitEvent m_OnSubmit; // 0x1A0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.SelectionEvent m_OnSelect; // 0x1A8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.SelectionEvent m_OnDeselect; // 0x1B0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.TextSelectionEvent m_OnTextSelection; // 0x1B8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.TextSelectionEvent m_OnEndTextSelection; // 0x1C0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.OnChangeEvent m_OnValueChanged; // 0x1C8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.TouchScreenKeyboardEvent m_OnTouchScreenKeyboardStatusChanged; // 0x1D0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_InputField.OnValidateInput m_OnValidateInput; // 0x1D8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Color m_CaretColor; // 0x1E0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_CustomCaretColor; // 0x1F0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Color m_SelectionColor; // 0x1F4
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected string m_Text; // 0x208
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_CaretBlinkRate; // 0x210
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_CaretWidth; // 0x214
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_ReadOnly; // 0x218
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_RichText; // 0x219
	protected int m_StringPosition; // 0x21C
	protected int m_StringSelectPosition; // 0x220
	protected int m_CaretPosition; // 0x224
	protected int m_CaretSelectPosition; // 0x228
	private RectTransform caretRectTrans; // 0x230
	protected UIVertex[] m_CursorVerts; // 0x238
	private CanvasRenderer m_CachedInputRenderer; // 0x240
	private Vector2 m_LastPosition; // 0x248
	protected Mesh m_Mesh; // 0x250
	private bool m_AllowInput; // 0x258
	private bool m_ShouldActivateNextUpdate; // 0x259
	private bool m_UpdateDrag; // 0x25A
	private bool m_DragPositionOutOfBounds; // 0x25B
	private const float kHScrollSpeed = 0.05; // 0x0
	private const float kVScrollSpeed = 0.1; // 0x0
	protected bool m_CaretVisible; // 0x25C
	private Coroutine m_BlinkCoroutine; // 0x260
	private float m_BlinkStartTime; // 0x268
	private Coroutine m_DragCoroutine; // 0x270
	private string m_OriginalText; // 0x278
	private bool m_WasCanceled; // 0x280
	private bool m_HasDoneFocusTransition; // 0x281
	private WaitForSecondsRealtime m_WaitForSecondsRealtime; // 0x288
	private bool m_PreventCallback; // 0x290
	private bool m_TouchKeyboardAllowsInPlaceEditing; // 0x291
	private bool m_IsTextComponentUpdateRequired; // 0x292
	private bool m_IsScrollbarUpdateRequired; // 0x293
	private bool m_IsUpdatingScrollbarValues; // 0x294
	private bool m_isLastKeyBackspace; // 0x295
	private float m_PointerDownClickStartTime; // 0x298
	private float m_KeyDownStartTime; // 0x29C
	private float m_DoubleClickDelay; // 0x2A0
	private const string kEmailSpecialCharacters = "!#$%&\'*+-/=?^_`{|}~"; // 0x0
	private bool m_IsCompositionActive; // 0x2A4
	private bool m_ShouldUpdateIMEWindowPosition; // 0x2A5
	private int m_PreviousIMEInsertionLine; // 0x2A8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TMP_FontAsset m_GlobalFontAsset; // 0x2B0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_OnFocusSelectAll; // 0x2B8
	protected bool m_isSelectAll; // 0x2B9
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_ResetOnDeActivation; // 0x2BA
	private bool m_SelectionStillActive; // 0x2BB
	private bool m_ReleaseSelection; // 0x2BC
	private GameObject m_PreviouslySelectedObject; // 0x2C0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_RestoreOriginalTextOnEscape; // 0x2C8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_isRichTextEditingAllowed; // 0x2C9
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected int m_LineLimit; // 0x2CC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TMP_InputValidator m_InputValidator; // 0x2D0
	private bool m_isSelected; // 0x2D8
	private bool m_IsStringPositionDirty; // 0x2D9
	private bool m_IsCaretPositionDirty; // 0x2DA
	private bool m_forceRectTransformAdjustment; // 0x2DB
	private Event m_ProcessingEvent; // 0x2E0

	// Properties
	private BaseInput inputSystem { get; }
	private string compositionString { get; }
	private int compositionLength { get; }
	protected Mesh mesh { get; }
	public bool shouldHideMobileInput { get; set; }
	public bool shouldHideSoftKeyboard { get; set; }
	public string text { get; set; }
	public bool isFocused { get; }
	public float caretBlinkRate { get; set; }
	public int caretWidth { get; set; }
	public RectTransform textViewport { get; set; }
	public TMP_Text textComponent { get; set; }
	public Graphic placeholder { get; set; }
	public Scrollbar verticalScrollbar { get; set; }
	public float scrollSensitivity { get; set; }
	public Color caretColor { get; set; }
	public bool customCaretColor { get; set; }
	public Color selectionColor { get; set; }
	public TMP_InputField.SubmitEvent onEndEdit { get; set; }
	public TMP_InputField.SubmitEvent onSubmit { get; set; }
	public TMP_InputField.SelectionEvent onSelect { get; set; }
	public TMP_InputField.SelectionEvent onDeselect { get; set; }
	public TMP_InputField.TextSelectionEvent onTextSelection { get; set; }
	public TMP_InputField.TextSelectionEvent onEndTextSelection { get; set; }
	public TMP_InputField.OnChangeEvent onValueChanged { get; set; }
	public TMP_InputField.TouchScreenKeyboardEvent onTouchScreenKeyboardStatusChanged { get; set; }
	public TMP_InputField.OnValidateInput onValidateInput { get; set; }
	public int characterLimit { get; set; }
	public float pointSize { get; set; }
	public TMP_FontAsset fontAsset { get; set; }
	public bool onFocusSelectAll { get; set; }
	public bool resetOnDeActivation { get; set; }
	public bool restoreOriginalTextOnEscape { get; set; }
	public bool isRichTextEditingAllowed { get; set; }
	public TMP_InputField.ContentType contentType { get; set; }
	public TMP_InputField.LineType lineType { get; set; }
	public int lineLimit { get; set; }
	public TMP_InputField.InputType inputType { get; set; }
	public TouchScreenKeyboardType keyboardType { get; set; }
	public TMP_InputField.CharacterValidation characterValidation { get; set; }
	public TMP_InputValidator inputValidator { get; set; }
	public bool readOnly { get; set; }
	public bool richText { get; set; }
	public bool multiLine { get; }
	public char asteriskChar { get; set; }
	public bool wasCanceled { get; }
	protected int caretPositionInternal { get; set; }
	protected int stringPositionInternal { get; set; }
	protected int caretSelectPositionInternal { get; set; }
	protected int stringSelectPositionInternal { get; set; }
	private bool hasSelection { get; }
	public int caretPosition { get; set; }
	public int selectionAnchorPosition { get; set; }
	public int selectionFocusPosition { get; set; }
	public int stringPosition { get; set; }
	public int selectionStringAnchorPosition { get; set; }
	public int selectionStringFocusPosition { get; set; }
	private static string clipboard { get; set; }
	public virtual float minWidth { get; }
	public virtual float preferredWidth { get; }
	public virtual float flexibleWidth { get; }
	public virtual float minHeight { get; }
	public virtual float preferredHeight { get; }
	public virtual float flexibleHeight { get; }
	public virtual int layoutPriority { get; }

	// Methods
	// RVA: 0x1ACB40 Offset: 0x1AB340 VA: 0x1801ACB40
	private BaseInput get_inputSystem() { }
	// RVA: 0x1ACCA0 Offset: 0x1AB4A0 VA: 0x1801ACCA0
	private string get_compositionString() { }
	// RVA: 0x1ACDC0 Offset: 0x1AB5C0 VA: 0x1801ACDC0
	private int get_compositionLength() { }
	// RVA: 0x1ACDF0 Offset: 0x1AB5F0 VA: 0x1801ACDF0
	protected void .ctor() { }
	// RVA: 0x1AD160 Offset: 0x1AB960 VA: 0x1801AD160
	protected Mesh get_mesh() { }
	// RVA: 0x1AD240 Offset: 0x1ABA40 VA: 0x1801AD240
	public bool get_shouldHideMobileInput() { }
	// RVA: 0x1AD2B0 Offset: 0x1ABAB0 VA: 0x1801AD2B0
	public void set_shouldHideMobileInput(bool value) { }
	// RVA: 0x1AD3A0 Offset: 0x1ABBA0 VA: 0x1801AD3A0
	public bool get_shouldHideSoftKeyboard() { }
	// RVA: 0x1AD420 Offset: 0x1ABC20 VA: 0x1801AD420
	public void set_shouldHideSoftKeyboard(bool value) { }
	// RVA: 0x1AD5E0 Offset: 0x1ABDE0 VA: 0x1801AD5E0
	private bool isKeyboardUsingEvents() { }
	// RVA: 0x1AD650 Offset: 0x1ABE50 VA: 0x1801AD650
	public string get_text() { }
	// RVA: 0x1AD660 Offset: 0x1ABE60 VA: 0x1801AD660
	public void set_text(string value) { }
	// RVA: 0x1AD670 Offset: 0x1ABE70 VA: 0x1801AD670
	public void SetTextWithoutNotify(string input) { }
	// RVA: 0x1AD680 Offset: 0x1ABE80 VA: 0x1801AD680
	private void SetText(string value, bool sendCallback = True) { }
	// RVA: 0x1AD850 Offset: 0x1AC050 VA: 0x1801AD850
	public bool get_isFocused() { }
	// RVA: 0x1AD860 Offset: 0x1AC060 VA: 0x1801AD860
	public float get_caretBlinkRate() { }
	// RVA: 0x1AD870 Offset: 0x1AC070 VA: 0x1801AD870
	public void set_caretBlinkRate(float value) { }
	// RVA: 0x1AD910 Offset: 0x1AC110 VA: 0x1801AD910
	public int get_caretWidth() { }
	// RVA: 0x1AD920 Offset: 0x1AC120 VA: 0x1801AD920
	public void set_caretWidth(int value) { }
	// RVA: 0x171250 Offset: 0x16FA50 VA: 0x180171250
	public RectTransform get_textViewport() { }
	// RVA: 0x1AD9B0 Offset: 0x1AC1B0 VA: 0x1801AD9B0
	public void set_textViewport(RectTransform value) { }
	// RVA: 0x1ADA70 Offset: 0x1AC270 VA: 0x1801ADA70
	public TMP_Text get_textComponent() { }
	// RVA: 0x1ADA80 Offset: 0x1AC280 VA: 0x1801ADA80
	public void set_textComponent(TMP_Text value) { }
	// RVA: 0x1ADB30 Offset: 0x1AC330 VA: 0x1801ADB30
	public Graphic get_placeholder() { }
	// RVA: 0x1ADB40 Offset: 0x1AC340 VA: 0x1801ADB40
	public void set_placeholder(Graphic value) { }
	// RVA: 0x1ADC00 Offset: 0x1AC400 VA: 0x1801ADC00
	public Scrollbar get_verticalScrollbar() { }
	// RVA: 0x1ADC10 Offset: 0x1AC410 VA: 0x1801ADC10
	public void set_verticalScrollbar(Scrollbar value) { }
	// RVA: 0x1ADE10 Offset: 0x1AC610 VA: 0x1801ADE10
	public float get_scrollSensitivity() { }
	// RVA: 0x1ADE20 Offset: 0x1AC620 VA: 0x1801ADE20
	public void set_scrollSensitivity(float value) { }
	// RVA: 0x1ADEC0 Offset: 0x1AC6C0 VA: 0x1801ADEC0
	public Color get_caretColor() { }
	// RVA: 0x1ADF20 Offset: 0x1AC720 VA: 0x1801ADF20
	public void set_caretColor(Color value) { }
	// RVA: 0x1ADF90 Offset: 0x1AC790 VA: 0x1801ADF90
	public bool get_customCaretColor() { }
	// RVA: 0x1ADFA0 Offset: 0x1AC7A0 VA: 0x1801ADFA0
	public void set_customCaretColor(bool value) { }
	// RVA: 0x1ADFC0 Offset: 0x1AC7C0 VA: 0x1801ADFC0
	public Color get_selectionColor() { }
	// RVA: 0x1ADFD0 Offset: 0x1AC7D0 VA: 0x1801ADFD0
	public void set_selectionColor(Color value) { }
	// RVA: 0x1AE040 Offset: 0x1AC840 VA: 0x1801AE040
	public TMP_InputField.SubmitEvent get_onEndEdit() { }
	// RVA: 0x1AE050 Offset: 0x1AC850 VA: 0x1801AE050
	public void set_onEndEdit(TMP_InputField.SubmitEvent value) { }
	// RVA: 0x1AE110 Offset: 0x1AC910 VA: 0x1801AE110
	public TMP_InputField.SubmitEvent get_onSubmit() { }
	// RVA: 0x1AE120 Offset: 0x1AC920 VA: 0x1801AE120
	public void set_onSubmit(TMP_InputField.SubmitEvent value) { }
	// RVA: 0x1AE1E0 Offset: 0x1AC9E0 VA: 0x1801AE1E0
	public TMP_InputField.SelectionEvent get_onSelect() { }
	// RVA: 0x1AE1F0 Offset: 0x1AC9F0 VA: 0x1801AE1F0
	public void set_onSelect(TMP_InputField.SelectionEvent value) { }
	// RVA: 0x1AE2B0 Offset: 0x1ACAB0 VA: 0x1801AE2B0
	public TMP_InputField.SelectionEvent get_onDeselect() { }
	// RVA: 0x1AE2C0 Offset: 0x1ACAC0 VA: 0x1801AE2C0
	public void set_onDeselect(TMP_InputField.SelectionEvent value) { }
	// RVA: 0x1AE380 Offset: 0x1ACB80 VA: 0x1801AE380
	public TMP_InputField.TextSelectionEvent get_onTextSelection() { }
	// RVA: 0x1AE390 Offset: 0x1ACB90 VA: 0x1801AE390
	public void set_onTextSelection(TMP_InputField.TextSelectionEvent value) { }
	// RVA: 0x1AE450 Offset: 0x1ACC50 VA: 0x1801AE450
	public TMP_InputField.TextSelectionEvent get_onEndTextSelection() { }
	// RVA: 0x1AE460 Offset: 0x1ACC60 VA: 0x1801AE460
	public void set_onEndTextSelection(TMP_InputField.TextSelectionEvent value) { }
	// RVA: 0x1AE520 Offset: 0x1ACD20 VA: 0x1801AE520
	public TMP_InputField.OnChangeEvent get_onValueChanged() { }
	// RVA: 0x1AE530 Offset: 0x1ACD30 VA: 0x1801AE530
	public void set_onValueChanged(TMP_InputField.OnChangeEvent value) { }
	// RVA: 0x1AE5F0 Offset: 0x1ACDF0 VA: 0x1801AE5F0
	public TMP_InputField.TouchScreenKeyboardEvent get_onTouchScreenKeyboardStatusChanged() { }
	// RVA: 0x1AE600 Offset: 0x1ACE00 VA: 0x1801AE600
	public void set_onTouchScreenKeyboardStatusChanged(TMP_InputField.TouchScreenKeyboardEvent value) { }
	// RVA: 0x1AE6C0 Offset: 0x1ACEC0 VA: 0x1801AE6C0
	public TMP_InputField.OnValidateInput get_onValidateInput() { }
	// RVA: 0x1AE6D0 Offset: 0x1ACED0 VA: 0x1801AE6D0
	public void set_onValidateInput(TMP_InputField.OnValidateInput value) { }
	// RVA: 0x1AE790 Offset: 0x1ACF90 VA: 0x1801AE790
	public int get_characterLimit() { }
	// RVA: 0x1AE7A0 Offset: 0x1ACFA0 VA: 0x1801AE7A0
	public void set_characterLimit(int value) { }
	// RVA: 0x1AE880 Offset: 0x1AD080 VA: 0x1801AE880
	public float get_pointSize() { }
	// RVA: 0x1AE890 Offset: 0x1AD090 VA: 0x1801AE890
	public void set_pointSize(float value) { }
	// RVA: 0x1AEA60 Offset: 0x1AD260 VA: 0x1801AEA60
	public TMP_FontAsset get_fontAsset() { }
	// RVA: 0x1AEA70 Offset: 0x1AD270 VA: 0x1801AEA70
	public void set_fontAsset(TMP_FontAsset value) { }
	// RVA: 0x1AEC30 Offset: 0x1AD430 VA: 0x1801AEC30
	public bool get_onFocusSelectAll() { }
	// RVA: 0x1AEC40 Offset: 0x1AD440 VA: 0x1801AEC40
	public void set_onFocusSelectAll(bool value) { }
	// RVA: 0x1AEC50 Offset: 0x1AD450 VA: 0x1801AEC50
	public bool get_resetOnDeActivation() { }
	// RVA: 0x1AEC60 Offset: 0x1AD460 VA: 0x1801AEC60
	public void set_resetOnDeActivation(bool value) { }
	// RVA: 0x1AEC70 Offset: 0x1AD470 VA: 0x1801AEC70
	public bool get_restoreOriginalTextOnEscape() { }
	// RVA: 0x1AEC80 Offset: 0x1AD480 VA: 0x1801AEC80
	public void set_restoreOriginalTextOnEscape(bool value) { }
	// RVA: 0x1AEC90 Offset: 0x1AD490 VA: 0x1801AEC90
	public bool get_isRichTextEditingAllowed() { }
	// RVA: 0x1AECA0 Offset: 0x1AD4A0 VA: 0x1801AECA0
	public void set_isRichTextEditingAllowed(bool value) { }
	// RVA: 0x1AECB0 Offset: 0x1AD4B0 VA: 0x1801AECB0
	public TMP_InputField.ContentType get_contentType() { }
	// RVA: 0x1AECC0 Offset: 0x1AD4C0 VA: 0x1801AECC0
	public void set_contentType(TMP_InputField.ContentType value) { }
	// RVA: 0x1AEEB0 Offset: 0x1AD6B0 VA: 0x1801AEEB0
	public TMP_InputField.LineType get_lineType() { }
	// RVA: 0x1AEEC0 Offset: 0x1AD6C0 VA: 0x1801AEEC0
	public void set_lineType(TMP_InputField.LineType value) { }
	// RVA: 0x1AEFF0 Offset: 0x1AD7F0 VA: 0x1801AEFF0
	public int get_lineLimit() { }
	// RVA: 0x1AF000 Offset: 0x1AD800 VA: 0x1801AF000
	public void set_lineLimit(int value) { }
	// RVA: 0x1AF0A0 Offset: 0x1AD8A0 VA: 0x1801AF0A0
	public TMP_InputField.InputType get_inputType() { }
	// RVA: 0x1AF0B0 Offset: 0x1AD8B0 VA: 0x1801AF0B0
	public void set_inputType(TMP_InputField.InputType value) { }
	// RVA: 0x1AF160 Offset: 0x1AD960 VA: 0x1801AF160
	public TouchScreenKeyboardType get_keyboardType() { }
	// RVA: 0x1AF170 Offset: 0x1AD970 VA: 0x1801AF170
	public void set_keyboardType(TouchScreenKeyboardType value) { }
	// RVA: 0x1AF220 Offset: 0x1ADA20 VA: 0x1801AF220
	public TMP_InputField.CharacterValidation get_characterValidation() { }
	// RVA: 0x1AF230 Offset: 0x1ADA30 VA: 0x1801AF230
	public void set_characterValidation(TMP_InputField.CharacterValidation value) { }
	// RVA: 0x1AF2E0 Offset: 0x1ADAE0 VA: 0x1801AF2E0
	public TMP_InputValidator get_inputValidator() { }
	// RVA: 0x1AF2F0 Offset: 0x1ADAF0 VA: 0x1801AF2F0
	public void set_inputValidator(TMP_InputValidator value) { }
	// RVA: 0x1AF3B0 Offset: 0x1ADBB0 VA: 0x1801AF3B0
	public bool get_readOnly() { }
	// RVA: 0x1AF3C0 Offset: 0x1ADBC0 VA: 0x1801AF3C0
	public void set_readOnly(bool value) { }
	// RVA: 0x1AF3D0 Offset: 0x1ADBD0 VA: 0x1801AF3D0
	public bool get_richText() { }
	// RVA: 0x1AF3E0 Offset: 0x1ADBE0 VA: 0x1801AF3E0
	public void set_richText(bool value) { }
	// RVA: 0x1AF4F0 Offset: 0x1ADCF0 VA: 0x1801AF4F0
	public bool get_multiLine() { }
	// RVA: 0x1AF510 Offset: 0x1ADD10 VA: 0x1801AF510
	public char get_asteriskChar() { }
	// RVA: 0x1AF520 Offset: 0x1ADD20 VA: 0x1801AF520
	public void set_asteriskChar(char value) { }
	// RVA: 0x1AF600 Offset: 0x1ADE00 VA: 0x1801AF600
	public bool get_wasCanceled() { }
	// RVA: 0x1AF610 Offset: 0x1ADE10 VA: 0x1801AF610
	protected void ClampStringPos(ref int pos) { }
	// RVA: 0x1AF650 Offset: 0x1ADE50 VA: 0x1801AF650
	protected void ClampCaretPos(ref int pos) { }
	// RVA: 0x1AF6A0 Offset: 0x1ADEA0 VA: 0x1801AF6A0
	protected int get_caretPositionInternal() { }
	// RVA: 0x1AF6E0 Offset: 0x1ADEE0 VA: 0x1801AF6E0
	protected void set_caretPositionInternal(int value) { }
	// RVA: 0x1AF740 Offset: 0x1ADF40 VA: 0x1801AF740
	protected int get_stringPositionInternal() { }
	// RVA: 0x1AF780 Offset: 0x1ADF80 VA: 0x1801AF780
	protected void set_stringPositionInternal(int value) { }
	// RVA: 0x1AF7D0 Offset: 0x1ADFD0 VA: 0x1801AF7D0
	protected int get_caretSelectPositionInternal() { }
	// RVA: 0x1AF810 Offset: 0x1AE010 VA: 0x1801AF810
	protected void set_caretSelectPositionInternal(int value) { }
	// RVA: 0x1AF870 Offset: 0x1AE070 VA: 0x1801AF870
	protected int get_stringSelectPositionInternal() { }
	// RVA: 0x1AF8B0 Offset: 0x1AE0B0 VA: 0x1801AF8B0
	protected void set_stringSelectPositionInternal(int value) { }
	// RVA: 0x1AF900 Offset: 0x1AE100 VA: 0x1801AF900
	private bool get_hasSelection() { }
	// RVA: 0x1AF7D0 Offset: 0x1ADFD0 VA: 0x1801AF7D0
	public int get_caretPosition() { }
	// RVA: 0x1AF990 Offset: 0x1AE190 VA: 0x1801AF990
	public void set_caretPosition(int value) { }
	// RVA: 0x1AF6A0 Offset: 0x1ADEA0 VA: 0x1801AF6A0
	public int get_selectionAnchorPosition() { }
	// RVA: 0x1AFA90 Offset: 0x1AE290 VA: 0x1801AFA90
	public void set_selectionAnchorPosition(int value) { }
	// RVA: 0x1AF7D0 Offset: 0x1ADFD0 VA: 0x1801AF7D0
	public int get_selectionFocusPosition() { }
	// RVA: 0x1AFB20 Offset: 0x1AE320 VA: 0x1801AFB20
	public void set_selectionFocusPosition(int value) { }
	// RVA: 0x1AF870 Offset: 0x1AE070 VA: 0x1801AF870
	public int get_stringPosition() { }
	// RVA: 0x1AFBB0 Offset: 0x1AE3B0 VA: 0x1801AFBB0
	public void set_stringPosition(int value) { }
	// RVA: 0x1AF740 Offset: 0x1ADF40 VA: 0x1801AF740
	public int get_selectionStringAnchorPosition() { }
	// RVA: 0x1AFC90 Offset: 0x1AE490 VA: 0x1801AFC90
	public void set_selectionStringAnchorPosition(int value) { }
	// RVA: 0x1AF870 Offset: 0x1AE070 VA: 0x1801AF870
	public int get_selectionStringFocusPosition() { }
	// RVA: 0x1AFD20 Offset: 0x1AE520 VA: 0x1801AFD20
	public void set_selectionStringFocusPosition(int value) { }
	// RVA: 0x1AFDB0 Offset: 0x1AE5B0 VA: 0x1801AFDB0 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x1B0500 Offset: 0x1AED00 VA: 0x1801B0500 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x1B0920 Offset: 0x1AF120 VA: 0x1801B0920
	private void ON_TEXT_CHANGED(Object obj) { }
	// RVA: 0x1B0BA0 Offset: 0x1AF3A0 VA: 0x1801B0BA0
	private IEnumerator CaretBlink() { }
	// RVA: 0x1B0C30 Offset: 0x1AF430 VA: 0x1801B0C30
	private void SetCaretVisible() { }
	// RVA: 0x1B0CB0 Offset: 0x1AF4B0 VA: 0x1801B0CB0
	private void SetCaretActive() { }
	// RVA: 0x1B0D90 Offset: 0x1AF590 VA: 0x1801B0D90
	protected void OnFocus() { }
	// RVA: 0x1B0DB0 Offset: 0x1AF5B0 VA: 0x1801B0DB0
	protected void SelectAll() { }
	// RVA: 0x1B0E10 Offset: 0x1AF610 VA: 0x1801B0E10
	public void MoveTextEnd(bool shift) { }
	// RVA: 0x1B1000 Offset: 0x1AF800 VA: 0x1801B1000
	public void MoveTextStart(bool shift) { }
	// RVA: 0x1B11B0 Offset: 0x1AF9B0 VA: 0x1801B11B0
	public void MoveToEndOfLine(bool shift, bool ctrl) { }
	// RVA: 0x1B1480 Offset: 0x1AFC80 VA: 0x1801B1480
	public void MoveToStartOfLine(bool shift, bool ctrl) { }
	// RVA: 0x1B1740 Offset: 0x1AFF40 VA: 0x1801B1740
	private static string get_clipboard() { }
	// RVA: 0x1B1790 Offset: 0x1AFF90 VA: 0x1801B1790
	private static void set_clipboard(string value) { }
	// RVA: 0x1B17E0 Offset: 0x1AFFE0 VA: 0x1801B17E0
	private bool InPlaceEditing() { }
	// RVA: 0x1B18B0 Offset: 0x1B00B0 VA: 0x1801B18B0
	private void UpdateStringPositionFromKeyboard() { }
	// RVA: 0x1B1C20 Offset: 0x1B0420 VA: 0x1801B1C20 Slot: 60
	protected virtual void LateUpdate() { }
	// RVA: 0x1B2490 Offset: 0x1B0C90 VA: 0x1801B2490
	private bool MayDrag(PointerEventData eventData) { }
	// RVA: 0x1B25D0 Offset: 0x1B0DD0 VA: 0x1801B25D0 Slot: 61
	public virtual void OnBeginDrag(PointerEventData eventData) { }
	// RVA: 0x1B2600 Offset: 0x1B0E00 VA: 0x1801B2600 Slot: 62
	public virtual void OnDrag(PointerEventData eventData) { }
	// RVA: 0x1B2BD0 Offset: 0x1B13D0 VA: 0x1801B2BD0
	private IEnumerator MouseDragOutsideRect(PointerEventData eventData) { }
	// RVA: 0x1B2C70 Offset: 0x1B1470 VA: 0x1801B2C70 Slot: 63
	public virtual void OnEndDrag(PointerEventData eventData) { }
	// RVA: 0x1B2CA0 Offset: 0x1B14A0 VA: 0x1801B2CA0 Slot: 32
	public override void OnPointerDown(PointerEventData eventData) { }
	// RVA: 0x1B3880 Offset: 0x1B2080 VA: 0x1801B3880
	protected TMP_InputField.EditState KeyPressed(Event evt) { }
	// RVA: 0x1B3E70 Offset: 0x1B2670 VA: 0x1801B3E70 Slot: 64
	protected virtual bool IsValidChar(char c) { }
	// RVA: 0x1B3E90 Offset: 0x1B2690 VA: 0x1801B3E90
	public void ProcessEvent(Event e) { }
	// RVA: 0x1B3EA0 Offset: 0x1B26A0 VA: 0x1801B3EA0 Slot: 65
	public virtual void OnUpdateSelected(BaseEventData eventData) { }
	// RVA: 0x1B41A0 Offset: 0x1B29A0 VA: 0x1801B41A0 Slot: 66
	public virtual void OnScroll(PointerEventData eventData) { }
	// RVA: 0x1B43F0 Offset: 0x1B2BF0 VA: 0x1801B43F0
	private string GetSelectedString() { }
	// RVA: 0x1B4510 Offset: 0x1B2D10 VA: 0x1801B4510
	private int FindNextWordBegin() { }
	// RVA: 0x1B4680 Offset: 0x1B2E80 VA: 0x1801B4680
	private void MoveRight(bool shift, bool ctrl) { }
	// RVA: 0x1B4E30 Offset: 0x1B3630 VA: 0x1801B4E30
	private int FindPrevWordBegin() { }
	// RVA: 0x1B4F90 Offset: 0x1B3790 VA: 0x1801B4F90
	private void MoveLeft(bool shift, bool ctrl) { }
	// RVA: 0x1B5890 Offset: 0x1B4090 VA: 0x1801B5890
	private int LineUpCharacterPosition(int originalPos, bool goToFirstChar) { }
	// RVA: 0x1B5BA0 Offset: 0x1B43A0 VA: 0x1801B5BA0
	private int LineDownCharacterPosition(int originalPos, bool goToLastChar) { }
	// RVA: 0x1B5E90 Offset: 0x1B4690 VA: 0x1801B5E90
	private int PageUpCharacterPosition(int originalPos, bool goToFirstChar) { }
	// RVA: 0x1B6270 Offset: 0x1B4A70 VA: 0x1801B6270
	private int PageDownCharacterPosition(int originalPos, bool goToLastChar) { }
	// RVA: 0x1B6660 Offset: 0x1B4E60 VA: 0x1801B6660
	private void MoveDown(bool shift) { }
	// RVA: 0x1B6670 Offset: 0x1B4E70 VA: 0x1801B6670
	private void MoveDown(bool shift, bool goToLastChar) { }
	// RVA: 0x1B6A00 Offset: 0x1B5200 VA: 0x1801B6A00
	private void MoveUp(bool shift) { }
	// RVA: 0x1B6A10 Offset: 0x1B5210 VA: 0x1801B6A10
	private void MoveUp(bool shift, bool goToFirstChar) { }
	// RVA: 0x1B6D80 Offset: 0x1B5580 VA: 0x1801B6D80
	private void MovePageUp(bool shift) { }
	// RVA: 0x1B6D90 Offset: 0x1B5590 VA: 0x1801B6D90
	private void MovePageUp(bool shift, bool goToFirstChar) { }
	// RVA: 0x1B7420 Offset: 0x1B5C20 VA: 0x1801B7420
	private void MovePageDown(bool shift) { }
	// RVA: 0x1B7430 Offset: 0x1B5C30 VA: 0x1801B7430
	private void MovePageDown(bool shift, bool goToLastChar) { }
	// RVA: 0x1B7AD0 Offset: 0x1B62D0 VA: 0x1801B7AD0
	private void Delete() { }
	// RVA: 0x1B7D90 Offset: 0x1B6590 VA: 0x1801B7D90
	private void DeleteKey() { }
	// RVA: 0x1B80B0 Offset: 0x1B68B0 VA: 0x1801B80B0
	private void Backspace() { }
	// RVA: 0x1B8550 Offset: 0x1B6D50 VA: 0x1801B8550 Slot: 67
	protected virtual void Append(string input) { }
	// RVA: 0x1B8600 Offset: 0x1B6E00 VA: 0x1801B8600 Slot: 68
	protected virtual void Append(char input) { }
	// RVA: 0x1B8760 Offset: 0x1B6F60 VA: 0x1801B8760
	private void Insert(char c) { }
	// RVA: 0x1B88F0 Offset: 0x1B70F0 VA: 0x1801B88F0
	private void UpdateTouchKeyboardFromEditChanges() { }
	// RVA: 0x1B8940 Offset: 0x1B7140 VA: 0x1801B8940
	private void SendOnValueChangedAndUpdateLabel() { }
	// RVA: 0x1B8960 Offset: 0x1B7160 VA: 0x1801B8960
	private void SendOnValueChanged() { }
	// RVA: 0x1B89F0 Offset: 0x1B71F0 VA: 0x1801B89F0
	protected void SendOnEndEdit() { }
	// RVA: 0x1B8A80 Offset: 0x1B7280 VA: 0x1801B8A80
	protected void SendOnSubmit() { }
	// RVA: 0x1B8B10 Offset: 0x1B7310 VA: 0x1801B8B10
	protected void SendOnFocus() { }
	// RVA: 0x1B8BA0 Offset: 0x1B73A0 VA: 0x1801B8BA0
	protected void SendOnFocusLost() { }
	// RVA: 0x1B8C30 Offset: 0x1B7430 VA: 0x1801B8C30
	protected void SendOnTextSelection() { }
	// RVA: 0x1B8D50 Offset: 0x1B7550 VA: 0x1801B8D50
	protected void SendOnEndTextSelection() { }
	// RVA: 0x1B8E80 Offset: 0x1B7680 VA: 0x1801B8E80
	protected void SendTouchScreenKeyboardStatusChanged() { }
	// RVA: 0x1B8F60 Offset: 0x1B7760 VA: 0x1801B8F60
	protected void UpdateLabel() { }
	// RVA: 0x1B9610 Offset: 0x1B7E10 VA: 0x1801B9610
	private void UpdateScrollbar() { }
	// RVA: 0x1B9870 Offset: 0x1B8070 VA: 0x1801B9870
	private void OnScrollbarValueChange(float value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	private void UpdateMaskRegions() { }
	// RVA: 0x1B98D0 Offset: 0x1B80D0 VA: 0x1801B98D0
	private void AdjustTextPositionRelativeToViewport(float relativePosition) { }
	// RVA: 0x1B9AE0 Offset: 0x1B82E0 VA: 0x1801B9AE0
	private int GetCaretPositionFromStringIndex(int stringIndex) { }
	// RVA: 0x1B9B60 Offset: 0x1B8360 VA: 0x1801B9B60
	private int GetMinCaretPositionFromStringIndex(int stringIndex) { }
	// RVA: 0x1B9AE0 Offset: 0x1B82E0 VA: 0x1801B9AE0
	private int GetMaxCaretPositionFromStringIndex(int stringIndex) { }
	// RVA: 0x1B9BE0 Offset: 0x1B83E0 VA: 0x1801B9BE0
	private int GetStringIndexFromCaretPosition(int caretPosition) { }
	// RVA: 0x1B9C60 Offset: 0x1B8460 VA: 0x1801B9C60
	public void ForceLabelUpdate() { }
	// RVA: 0x1B9C70 Offset: 0x1B8470 VA: 0x1801B9C70
	private void MarkGeometryAsDirty() { }
	// RVA: 0x1B9D00 Offset: 0x1B8500 VA: 0x1801B9D00 Slot: 69
	public virtual void Rebuild(CanvasUpdate update) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 70
	public virtual void LayoutComplete() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 71
	public virtual void GraphicUpdateComplete() { }
	// RVA: 0x1B9E00 Offset: 0x1B8600 VA: 0x1801B9E00
	private void UpdateGeometry() { }
	// RVA: 0x1B9F00 Offset: 0x1B8700 VA: 0x1801B9F00
	private void AssignPositioningIfNeeded() { }
	// RVA: 0x1BA9F0 Offset: 0x1B91F0 VA: 0x1801BA9F0
	private void OnFillVBO(Mesh vbo) { }
	// RVA: 0x1BAF80 Offset: 0x1B9780 VA: 0x1801BAF80
	private void GenerateCaret(VertexHelper vbo, Vector2 roundingOffset) { }
	// RVA: 0x1BBD00 Offset: 0x1BA500 VA: 0x1801BBD00
	private void CreateCursorVerts() { }
	// RVA: 0x1BBED0 Offset: 0x1BA6D0 VA: 0x1801BBED0
	private void GenerateHightlight(VertexHelper vbo, Vector2 roundingOffset) { }
	// RVA: 0x1BC8F0 Offset: 0x1BB0F0 VA: 0x1801BC8F0
	private void AdjustRectTransformRelativeToViewport(Vector2 startPosition, float height, bool isCharVisible) { }
	// RVA: 0x1BD9A0 Offset: 0x1BC1A0 VA: 0x1801BD9A0
	protected char Validate(string text, int pos, char ch) { }
	// RVA: 0x1BE220 Offset: 0x1BCA20 VA: 0x1801BE220
	public void ActivateInputField() { }
	// RVA: 0x1BE3B0 Offset: 0x1BCBB0 VA: 0x1801BE3B0
	private void ActivateInputFieldInternal() { }
	// RVA: 0x1BE830 Offset: 0x1BD030 VA: 0x1801BE830 Slot: 36
	public override void OnSelect(BaseEventData eventData) { }
	// RVA: 0x1BE8D0 Offset: 0x1BD0D0 VA: 0x1801BE8D0 Slot: 72
	public virtual void OnPointerClick(PointerEventData eventData) { }
	// RVA: 0x1BE900 Offset: 0x1BD100 VA: 0x1801BE900
	public void ReleaseSelection() { }
	// RVA: 0x1BE9B0 Offset: 0x1BD1B0 VA: 0x1801BE9B0
	public void DeactivateInputField(bool clearSelection = False) { }
	// RVA: 0x1BEC20 Offset: 0x1BD420 VA: 0x1801BEC20 Slot: 37
	public override void OnDeselect(BaseEventData eventData) { }
	// RVA: 0x1BECD0 Offset: 0x1BD4D0 VA: 0x1801BECD0 Slot: 73
	public virtual void OnSubmit(BaseEventData eventData) { }
	// RVA: 0x1BED30 Offset: 0x1BD530 VA: 0x1801BED30
	private void EnforceContentType() { }
	// RVA: 0x1BEEA0 Offset: 0x1BD6A0 VA: 0x1801BEEA0
	private void SetTextComponentWrapMode() { }
	// RVA: 0x1BEFA0 Offset: 0x1BD7A0 VA: 0x1801BEFA0
	private void SetTextComponentRichTextMode() { }
	// RVA: 0x1BF0B0 Offset: 0x1BD8B0 VA: 0x1801BF0B0
	private void SetToCustomIfContentTypeIsNot(TMP_InputField.ContentType[] allowedContentTypes) { }
	// RVA: 0x1BF120 Offset: 0x1BD920 VA: 0x1801BF120
	private void SetToCustom() { }
	// RVA: 0x1BF120 Offset: 0x1BD920 VA: 0x1801BF120
	private void SetToCustom(TMP_InputField.CharacterValidation characterValidation) { }
	// RVA: 0x1BF140 Offset: 0x1BD940 VA: 0x1801BF140 Slot: 26
	protected override void DoStateTransition(Selectable.SelectionState state, bool instant) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 74
	public virtual void CalculateLayoutInputHorizontal() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 75
	public virtual void CalculateLayoutInputVertical() { }
	// RVA: 0x1BF170 Offset: 0x1BD970 VA: 0x1801BF170 Slot: 76
	public virtual float get_minWidth() { }
	// RVA: 0x1BF180 Offset: 0x1BD980 VA: 0x1801BF180 Slot: 77
	public virtual float get_preferredWidth() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 78
	public virtual float get_flexibleWidth() { }
	// RVA: 0x1BF170 Offset: 0x1BD970 VA: 0x1801BF170 Slot: 79
	public virtual float get_minHeight() { }
	// RVA: 0x1BF3A0 Offset: 0x1BDBA0 VA: 0x1801BF3A0 Slot: 80
	public virtual float get_preferredHeight() { }
	// RVA: 0x1BF390 Offset: 0x1BDB90 VA: 0x1801BF390 Slot: 81
	public virtual float get_flexibleHeight() { }
	// RVA: 0x1BF5B0 Offset: 0x1BDDB0 VA: 0x1801BF5B0 Slot: 82
	public virtual int get_layoutPriority() { }
	// RVA: 0x1BF5C0 Offset: 0x1BDDC0 VA: 0x1801BF5C0
	public void SetGlobalPointSize(float pointSize) { }
	// RVA: 0x1BF6E0 Offset: 0x1BDEE0 VA: 0x1801BF6E0
	public void SetGlobalFontAsset(TMP_FontAsset fontAsset) { }
	// RVA: 0x1BF800 Offset: 0x1BE000 VA: 0x1801BF800
	private static void .cctor() { }
	// RVA: 0x1BF8A0 Offset: 0x1BE0A0 VA: 0x1801BF8A0 Slot: 46
	private Transform UnityEngine.UI.ICanvasElement.get_transform() { }
}

// Namespace: 
public enum TMP_InputField.ContentType // TypeDefIndex: 2808
{
	// Fields
	public int value__; // 0x0
	public const TMP_InputField.ContentType Standard = 0; // 0x0
	public const TMP_InputField.ContentType Autocorrected = 1; // 0x0
	public const TMP_InputField.ContentType IntegerNumber = 2; // 0x0
	public const TMP_InputField.ContentType DecimalNumber = 3; // 0x0
	public const TMP_InputField.ContentType Alphanumeric = 4; // 0x0
	public const TMP_InputField.ContentType Name = 5; // 0x0
	public const TMP_InputField.ContentType EmailAddress = 6; // 0x0
	public const TMP_InputField.ContentType Password = 7; // 0x0
	public const TMP_InputField.ContentType Pin = 8; // 0x0
	public const TMP_InputField.ContentType Custom = 9; // 0x0
}

// Namespace: 
public enum TMP_InputField.InputType // TypeDefIndex: 2809
{
	// Fields
	public int value__; // 0x0
	public const TMP_InputField.InputType Standard = 0; // 0x0
	public const TMP_InputField.InputType AutoCorrect = 1; // 0x0
	public const TMP_InputField.InputType Password = 2; // 0x0
}

// Namespace: 
public enum TMP_InputField.CharacterValidation // TypeDefIndex: 2810
{
	// Fields
	public int value__; // 0x0
	public const TMP_InputField.CharacterValidation None = 0; // 0x0
	public const TMP_InputField.CharacterValidation Digit = 1; // 0x0
	public const TMP_InputField.CharacterValidation Integer = 2; // 0x0
	public const TMP_InputField.CharacterValidation Decimal = 3; // 0x0
	public const TMP_InputField.CharacterValidation Alphanumeric = 4; // 0x0
	public const TMP_InputField.CharacterValidation Name = 5; // 0x0
	public const TMP_InputField.CharacterValidation Regex = 6; // 0x0
	public const TMP_InputField.CharacterValidation EmailAddress = 7; // 0x0
	public const TMP_InputField.CharacterValidation CustomValidator = 8; // 0x0
}

// Namespace: 
public enum TMP_InputField.LineType // TypeDefIndex: 2811
{
	// Fields
	public int value__; // 0x0
	public const TMP_InputField.LineType SingleLine = 0; // 0x0
	public const TMP_InputField.LineType MultiLineSubmit = 1; // 0x0
	public const TMP_InputField.LineType MultiLineNewline = 2; // 0x0
}

// Namespace: 
public sealed class TMP_InputField.OnValidateInput : MulticastDelegate // TypeDefIndex: 2812
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x4DB700 Offset: 0x4D9F00 VA: 0x1804DB700 Slot: 12
	public virtual char Invoke(string text, int charIndex, char addedChar) { }
	// RVA: 0x6412F0 Offset: 0x63FAF0 VA: 0x1806412F0 Slot: 13
	public virtual IAsyncResult BeginInvoke(string text, int charIndex, char addedChar, AsyncCallback callback, object object) { }
	// RVA: 0x4DBB80 Offset: 0x4DA380 VA: 0x1804DBB80 Slot: 14
	public virtual char EndInvoke(IAsyncResult result) { }
}

// Namespace: 
[Serializable]
public class TMP_InputField.SubmitEvent : UnityEvent<string> // TypeDefIndex: 2813
{
	// Methods
	// RVA: 0x641450 Offset: 0x63FC50 VA: 0x180641450
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class TMP_InputField.OnChangeEvent : UnityEvent<string> // TypeDefIndex: 2814
{
	// Methods
	// RVA: 0x641270 Offset: 0x63FA70 VA: 0x180641270
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class TMP_InputField.SelectionEvent : UnityEvent<string> // TypeDefIndex: 2815
{
	// Methods
	// RVA: 0x6413D0 Offset: 0x63FBD0 VA: 0x1806413D0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class TMP_InputField.TextSelectionEvent : UnityEvent<string, int, int> // TypeDefIndex: 2816
{
	// Methods
	// RVA: 0x6414D0 Offset: 0x63FCD0 VA: 0x1806414D0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class TMP_InputField.TouchScreenKeyboardEvent : UnityEvent<TouchScreenKeyboard.Status> // TypeDefIndex: 2817
{
	// Methods
	// RVA: 0x641550 Offset: 0x63FD50 VA: 0x180641550
	public void .ctor() { }
}

// Namespace: 
protected enum TMP_InputField.EditState // TypeDefIndex: 2818
{
	// Fields
	public int value__; // 0x0
	public const TMP_InputField.EditState Continue = 0; // 0x0
	public const TMP_InputField.EditState Finish = 1; // 0x0
}

// Namespace: 
private sealed class TMP_InputField.<CaretBlink>d__277 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2819
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public TMP_InputField <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x640E60 Offset: 0x63F660 VA: 0x180640E60 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class TMP_InputField.<MouseDragOutsideRect>d__295 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2820
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public TMP_InputField <>4__this; // 0x20
	public PointerEventData eventData; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x640F90 Offset: 0x63F790 VA: 0x180640F90 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: TMPro
internal static class SetPropertyUtility // TypeDefIndex: 2821
{
	// Methods
	// RVA: 0x19A3C0 Offset: 0x198BC0 VA: 0x18019A3C0
	public static bool SetColor(ref Color currentValue, Color newValue) { }
	// RVA: 0x4296E0 Offset: 0x427EE0 VA: 0x1804296E0
	public static bool SetStruct(ref T currentValue, T newValue) { }
	// RVA: 0x429510 Offset: 0x427D10 VA: 0x180429510
	public static bool SetClass(ref T currentValue, T newValue) { }
}

// Namespace: TMPro
[Serializable]
public abstract class TMP_InputValidator : ScriptableObject // TypeDefIndex: 2822
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	public abstract char Validate(ref string text, ref int pos, char ch) { }
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	protected void .ctor() { }
}

// Namespace: TMPro
public struct TMP_LineInfo // TypeDefIndex: 2823
{
	// Fields
	internal int controlCharacterCount; // 0x0
	public int characterCount; // 0x4
	public int visibleCharacterCount; // 0x8
	public int spaceCount; // 0xC
	public int wordCount; // 0x10
	public int firstCharacterIndex; // 0x14
	public int firstVisibleCharacterIndex; // 0x18
	public int lastCharacterIndex; // 0x1C
	public int lastVisibleCharacterIndex; // 0x20
	public float length; // 0x24
	public float lineHeight; // 0x28
	public float ascender; // 0x2C
	public float baseline; // 0x30
	public float descender; // 0x34
	public float maxAdvance; // 0x38
	public float width; // 0x3C
	public float marginLeft; // 0x40
	public float marginRight; // 0x44
	public HorizontalAlignmentOptions alignment; // 0x48
	public Extents lineExtents; // 0x4C
}

// Namespace: TMPro
internal static class TMP_ListPool<T> // TypeDefIndex: 2824
{
	// Fields
	private static readonly TMP_ObjectPool<List<T>> s_ListPool; // 0x0

	// Methods
	// RVA: 0x7C03F0 Offset: 0x7BEBF0 VA: 0x1807C03F0
	public static List<T> Get() { }
	// RVA: 0x7C0560 Offset: 0x7BED60 VA: 0x1807C0560
	public static void Release(List<T> toRelease) { }
	// RVA: 0x7C06E0 Offset: 0x7BEEE0 VA: 0x1807C06E0
	private static void .cctor() { }
}

// Namespace: 
[Serializable]
private sealed class TMP_ListPool.<>c<T> // TypeDefIndex: 2825
{
	// Fields
	public static readonly TMP_ListPool.<>c<T> <>9; // 0x0

	// Methods
	// RVA: 0x7C66A0 Offset: 0x7C4EA0 VA: 0x1807C66A0
	private static void .cctor() { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
	// RVA: 0x7C6BD0 Offset: 0x7C53D0 VA: 0x1807C6BD0
	internal void <.cctor>b__3_0(List<T> l) { }
}

// Namespace: TMPro
public static class TMP_MaterialManager // TypeDefIndex: 2826
{
	// Fields
	private static List<TMP_MaterialManager.MaskingMaterial> m_materialList; // 0x0
	private static Dictionary<long, TMP_MaterialManager.FallbackMaterial> m_fallbackMaterials; // 0x8
	private static Dictionary<int, long> m_fallbackMaterialLookup; // 0x10
	private static List<TMP_MaterialManager.FallbackMaterial> m_fallbackCleanupList; // 0x18
	private static bool isFallbackListDirty; // 0x20

	// Methods
	// RVA: 0x165130 Offset: 0x163930 VA: 0x180165130
	private static void .cctor() { }
	// RVA: 0x165350 Offset: 0x163B50 VA: 0x180165350
	private static void OnPreRender(Camera cam) { }
	// RVA: 0x165420 Offset: 0x163C20 VA: 0x180165420
	private static void OnPreRenderCanvas() { }
	// RVA: 0x1654F0 Offset: 0x163CF0 VA: 0x1801654F0
	public static Material GetStencilMaterial(Material baseMaterial, int stencilID) { }
	// RVA: 0x165970 Offset: 0x164170 VA: 0x180165970
	public static void ReleaseStencilMaterial(Material stencilMaterial) { }
	// RVA: 0x165C30 Offset: 0x164430 VA: 0x180165C30
	public static int GetStencilID(GameObject obj) { }
	// RVA: 0x165FC0 Offset: 0x1647C0 VA: 0x180165FC0
	public static Material GetMaterialForRendering(MaskableGraphic graphic, Material baseMaterial) { }
	// RVA: 0x1661D0 Offset: 0x1649D0 VA: 0x1801661D0
	private static Transform FindRootSortOverrideCanvas(Transform start) { }
	// RVA: 0x166430 Offset: 0x164C30 VA: 0x180166430
	internal static Material GetFallbackMaterial(TMP_FontAsset fontAsset, Material sourceMaterial, int atlasIndex) { }
	// RVA: 0x166770 Offset: 0x164F70 VA: 0x180166770
	public static Material GetFallbackMaterial(Material sourceMaterial, Material targetMaterial) { }
	// RVA: 0x166C90 Offset: 0x165490 VA: 0x180166C90
	public static void AddFallbackMaterialReference(Material targetMaterial) { }
	// RVA: 0x166E80 Offset: 0x165680 VA: 0x180166E80
	public static void CleanupFallbackMaterials() { }
	// RVA: 0x167110 Offset: 0x165910 VA: 0x180167110
	public static void ReleaseFallbackMaterial(Material fallackMaterial) { }
}

// Namespace: 
private class TMP_MaterialManager.FallbackMaterial // TypeDefIndex: 2827
{
	// Fields
	public int baseID; // 0x10
	public Material baseMaterial; // 0x18
	public long fallbackID; // 0x20
	public Material fallbackMaterial; // 0x28
	public int count; // 0x30

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private class TMP_MaterialManager.MaskingMaterial // TypeDefIndex: 2828
{
	// Fields
	public Material baseMaterial; // 0x10
	public Material stencilMaterial; // 0x18
	public int count; // 0x20
	public int stencilID; // 0x24

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: TMPro
public enum VertexSortingOrder // TypeDefIndex: 2829
{
	// Fields
	public int value__; // 0x0
	public const VertexSortingOrder Normal = 0; // 0x0
	public const VertexSortingOrder Reverse = 1; // 0x0
}

// Namespace: TMPro
public struct TMP_MeshInfo // TypeDefIndex: 2830
{
	// Fields
	private static readonly Color32 s_DefaultColor; // 0x0
	private static readonly Vector3 s_DefaultNormal; // 0x4
	private static readonly Vector4 s_DefaultTangent; // 0x10
	private static readonly Bounds s_DefaultBounds; // 0x20
	public Mesh mesh; // 0x0
	public int vertexCount; // 0x8
	public Vector3[] vertices; // 0x10
	public Vector3[] normals; // 0x18
	public Vector4[] tangents; // 0x20
	public Vector2[] uvs0; // 0x28
	public Vector2[] uvs2; // 0x30
	public Color32[] colors32; // 0x38
	public int[] triangles; // 0x40
	public Material material; // 0x48

	// Methods
	// RVA: 0x4DC0 Offset: 0x41C0 VA: 0x180004DC0
	public void .ctor(Mesh mesh, int size) { }
	// RVA: 0x4DD0 Offset: 0x41D0 VA: 0x180004DD0
	public void .ctor(Mesh mesh, int size, bool isVolumetric) { }
	// RVA: 0x4DE0 Offset: 0x41E0 VA: 0x180004DE0
	public void ResizeMeshInfo(int size) { }
	// RVA: 0x4DF0 Offset: 0x41F0 VA: 0x180004DF0
	public void ResizeMeshInfo(int size, bool isVolumetric) { }
	// RVA: 0x4E00 Offset: 0x4200 VA: 0x180004E00
	public void Clear(bool uploadChanges) { }
	// RVA: 0x4E10 Offset: 0x4210 VA: 0x180004E10
	public void ClearUnusedVertices() { }
	// RVA: 0x4E50 Offset: 0x4250 VA: 0x180004E50
	public void ClearUnusedVertices(int startIndex, bool updateMesh) { }
	// RVA: 0x4E60 Offset: 0x4260 VA: 0x180004E60
	public void SortGeometry(VertexSortingOrder order) { }
	// RVA: 0x4E70 Offset: 0x4270 VA: 0x180004E70
	public void SwapVertexData(int src, int dst) { }
	// RVA: 0x16A890 Offset: 0x169090 VA: 0x18016A890
	private static void .cctor() { }
}

// Namespace: TMPro
internal class TMP_ObjectPool<T> // TypeDefIndex: 2831
{
	// Fields
	private readonly Stack<T> m_Stack; // 0x0
	private readonly UnityAction<T> m_ActionOnGet; // 0x0
	private readonly UnityAction<T> m_ActionOnRelease; // 0x0
	private int <countAll>k__BackingField; // 0x0

	// Properties
	public int countAll { get; set; }

	// Methods
	// RVA: 0x1FC310 Offset: 0x1FAB10 VA: 0x1801FC310
	public int get_countAll() { }
	// RVA: 0x1FC320 Offset: 0x1FAB20 VA: 0x1801FC320
	private void set_countAll(int value) { }
	// RVA: 0x7C0970 Offset: 0x7BF170 VA: 0x1807C0970
	public void .ctor(UnityAction<T> actionOnGet, UnityAction<T> actionOnRelease) { }
	// RVA: 0x7C0A00 Offset: 0x7BF200 VA: 0x1807C0A00
	public T Get() { }
	// RVA: 0x7C0AF0 Offset: 0x7BF2F0 VA: 0x1807C0AF0
	public void Release(T element) { }
}

// Namespace: TMPro
public struct TMP_FontStyleStack // TypeDefIndex: 2832
{
	// Fields
	public byte bold; // 0x0
	public byte italic; // 0x1
	public byte underline; // 0x2
	public byte strikethrough; // 0x3
	public byte highlight; // 0x4
	public byte superscript; // 0x5
	public byte subscript; // 0x6
	public byte uppercase; // 0x7
	public byte lowercase; // 0x8
	public byte smallcaps; // 0x9

	// Methods
	// RVA: 0x61F0 Offset: 0x55F0 VA: 0x1800061F0
	public void Clear() { }
	// RVA: 0x6200 Offset: 0x5600 VA: 0x180006200
	public byte Add(FontStyles style) { }
	// RVA: 0x6210 Offset: 0x5610 VA: 0x180006210
	public byte Remove(FontStyles style) { }
}

// Namespace: TMPro
public struct TMP_RichTextTagStack<T> // TypeDefIndex: 2833
{
	// Fields
	public T[] itemStack; // 0x0
	public int index; // 0x0
	private int m_Capacity; // 0x0
	private T m_DefaultItem; // 0x0
	private const int k_DefaultCapacity = 4; // 0x0

	// Properties
	public T current { get; }

	// Methods
	// RVA: 0x12FBA0 Offset: 0x12EFA0 VA: 0x18012FBA0
	public T get_current() { }
	// RVA: 0x12FED0 Offset: 0x12F2D0 VA: 0x18012FED0
	public void .ctor(T[] tagStack) { }
	// RVA: 0x12FC30 Offset: 0x12F030 VA: 0x18012FC30
	public void .ctor(int capacity) { }
	// RVA: 0x12FCB0 Offset: 0x12F0B0 VA: 0x18012FCB0
	public void Clear() { }
	// RVA: 0x130230 Offset: 0x12F630 VA: 0x180130230
	public void SetDefault(T item) { }
	// RVA: 0x12FCD0 Offset: 0x12F0D0 VA: 0x18012FCD0
	public void Add(T item) { }
	// RVA: 0x130240 Offset: 0x12F640 VA: 0x180130240
	public T Remove() { }
	// RVA: 0x12FD20 Offset: 0x12F120 VA: 0x18012FD20
	public void Push(T item) { }
	// RVA: 0x12FE00 Offset: 0x12F200 VA: 0x18012FE00
	public T Pop() { }
	// RVA: 0x12FE60 Offset: 0x12F260 VA: 0x18012FE60
	public T Peek() { }
	// RVA: 0x12FBA0 Offset: 0x12EFA0 VA: 0x18012FBA0
	public T CurrentItem() { }
}

// Namespace: TMPro
public enum TagValueType // TypeDefIndex: 2834
{
	// Fields
	public int value__; // 0x0
	public const TagValueType None = 0; // 0x0
	public const TagValueType NumericalValue = 1; // 0x0
	public const TagValueType StringValue = 2; // 0x0
	public const TagValueType ColorValue = 4; // 0x0
}

// Namespace: TMPro
public enum TagUnitType // TypeDefIndex: 2835
{
	// Fields
	public int value__; // 0x0
	public const TagUnitType Pixels = 0; // 0x0
	public const TagUnitType FontUnits = 1; // 0x0
	public const TagUnitType Percentage = 2; // 0x0
}

// Namespace: TMPro
public class TMP_ScrollbarEventHandler : MonoBehaviour, IPointerClickHandler, IEventSystemHandler, ISelectHandler, IDeselectHandler // TypeDefIndex: 2836
{
	// Fields
	public bool isSelected; // 0x18

	// Methods
	// RVA: 0x16AB20 Offset: 0x169320 VA: 0x18016AB20 Slot: 4
	public void OnPointerClick(PointerEventData eventData) { }
	// RVA: 0x16ABB0 Offset: 0x1693B0 VA: 0x18016ABB0 Slot: 5
	public void OnSelect(BaseEventData eventData) { }
	// RVA: 0x16AC50 Offset: 0x169450 VA: 0x18016AC50 Slot: 6
	public void OnDeselect(BaseEventData eventData) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: TMPro
[RequireComponent] // RVA: 0x1039F0 Offset: 0x102DF0 VA: 0x1801039F0
public class TMP_SelectionCaret : MaskableGraphic // TypeDefIndex: 2837
{
	// Methods
	// RVA: 0x16AD00 Offset: 0x169500 VA: 0x18016AD00 Slot: 56
	public override void Cull(Rect clipRect, bool validRect) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 41
	protected override void UpdateGeometry() { }
	// RVA: 0x16AE20 Offset: 0x169620 VA: 0x18016AE20
	public void .ctor() { }
}

// Namespace: TMPro
[Serializable]
public class TMP_Settings : ScriptableObject // TypeDefIndex: 2838
{
	// Fields
	private static TMP_Settings s_Instance; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_enableWordWrapping; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_enableKerning; // 0x19
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_enableExtraPadding; // 0x1A
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_enableTintAllSprites; // 0x1B
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_enableParseEscapeCharacters; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_EnableRaycastTarget; // 0x1D
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_GetFontFeaturesAtRuntime; // 0x1E
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_missingGlyphCharacter; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_warningsDisabled; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_FontAsset m_defaultFontAsset; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_defaultFontAssetPath; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_defaultFontSize; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_defaultAutoSizeMinRatio; // 0x3C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_defaultAutoSizeMaxRatio; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector2 m_defaultTextMeshProTextContainerSize; // 0x44
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector2 m_defaultTextMeshProUITextContainerSize; // 0x4C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_autoSizeTextContainer; // 0x54
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<TMP_FontAsset> m_fallbackFontAssets; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_matchMaterialPreset; // 0x60
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_SpriteAsset m_defaultSpriteAsset; // 0x68
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_defaultSpriteAssetPath; // 0x70
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_enableEmojiSupport; // 0x78
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_defaultColorGradientPresetsPath; // 0x80
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_StyleSheet m_defaultStyleSheet; // 0x88
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_StyleSheetsResourcePath; // 0x90
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TextAsset m_leadingCharacters; // 0x98
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TextAsset m_followingCharacters; // 0xA0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_Settings.LineBreakingTable m_linebreakingRules; // 0xA8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_UseModernHangulLineBreakingRules; // 0xB0

	// Properties
	public static string version { get; }
	public static bool enableWordWrapping { get; }
	public static bool enableKerning { get; }
	public static bool enableExtraPadding { get; }
	public static bool enableTintAllSprites { get; }
	public static bool enableParseEscapeCharacters { get; }
	public static bool enableRaycastTarget { get; }
	public static bool getFontFeaturesAtRuntime { get; }
	public static int missingGlyphCharacter { get; set; }
	public static bool warningsDisabled { get; }
	public static TMP_FontAsset defaultFontAsset { get; }
	public static string defaultFontAssetPath { get; }
	public static float defaultFontSize { get; }
	public static float defaultTextAutoSizingMinRatio { get; }
	public static float defaultTextAutoSizingMaxRatio { get; }
	public static Vector2 defaultTextMeshProTextContainerSize { get; }
	public static Vector2 defaultTextMeshProUITextContainerSize { get; }
	public static bool autoSizeTextContainer { get; }
	public static List<TMP_FontAsset> fallbackFontAssets { get; }
	public static bool matchMaterialPreset { get; }
	public static TMP_SpriteAsset defaultSpriteAsset { get; }
	public static string defaultSpriteAssetPath { get; }
	public static bool enableEmojiSupport { get; set; }
	public static string defaultColorGradientPresetsPath { get; }
	public static TMP_StyleSheet defaultStyleSheet { get; }
	public static string styleSheetsResourcePath { get; }
	public static TextAsset leadingCharacters { get; }
	public static TextAsset followingCharacters { get; }
	public static TMP_Settings.LineBreakingTable linebreakingRules { get; }
	public static bool useModernHangulLineBreakingRules { get; set; }
	public static TMP_Settings instance { get; }

	// Methods
	// RVA: 0x16AE30 Offset: 0x169630 VA: 0x18016AE30
	public static string get_version() { }
	// RVA: 0x16AEA0 Offset: 0x1696A0 VA: 0x18016AEA0
	public static bool get_enableWordWrapping() { }
	// RVA: 0x16AEC0 Offset: 0x1696C0 VA: 0x18016AEC0
	public static bool get_enableKerning() { }
	// RVA: 0x16AEE0 Offset: 0x1696E0 VA: 0x18016AEE0
	public static bool get_enableExtraPadding() { }
	// RVA: 0x16AF00 Offset: 0x169700 VA: 0x18016AF00
	public static bool get_enableTintAllSprites() { }
	// RVA: 0x16AF20 Offset: 0x169720 VA: 0x18016AF20
	public static bool get_enableParseEscapeCharacters() { }
	// RVA: 0x16AF40 Offset: 0x169740 VA: 0x18016AF40
	public static bool get_enableRaycastTarget() { }
	// RVA: 0x16AF60 Offset: 0x169760 VA: 0x18016AF60
	public static bool get_getFontFeaturesAtRuntime() { }
	// RVA: 0x16AF80 Offset: 0x169780 VA: 0x18016AF80
	public static int get_missingGlyphCharacter() { }
	// RVA: 0x16AFA0 Offset: 0x1697A0 VA: 0x18016AFA0
	public static void set_missingGlyphCharacter(int value) { }
	// RVA: 0x16AFD0 Offset: 0x1697D0 VA: 0x18016AFD0
	public static bool get_warningsDisabled() { }
	// RVA: 0x16AFF0 Offset: 0x1697F0 VA: 0x18016AFF0
	public static TMP_FontAsset get_defaultFontAsset() { }
	// RVA: 0x16B010 Offset: 0x169810 VA: 0x18016B010
	public static string get_defaultFontAssetPath() { }
	// RVA: 0x16B030 Offset: 0x169830 VA: 0x18016B030
	public static float get_defaultFontSize() { }
	// RVA: 0x16B050 Offset: 0x169850 VA: 0x18016B050
	public static float get_defaultTextAutoSizingMinRatio() { }
	// RVA: 0x16B070 Offset: 0x169870 VA: 0x18016B070
	public static float get_defaultTextAutoSizingMaxRatio() { }
	// RVA: 0x16B090 Offset: 0x169890 VA: 0x18016B090
	public static Vector2 get_defaultTextMeshProTextContainerSize() { }
	// RVA: 0x16B0C0 Offset: 0x1698C0 VA: 0x18016B0C0
	public static Vector2 get_defaultTextMeshProUITextContainerSize() { }
	// RVA: 0x16B0F0 Offset: 0x1698F0 VA: 0x18016B0F0
	public static bool get_autoSizeTextContainer() { }
	// RVA: 0x16B110 Offset: 0x169910 VA: 0x18016B110
	public static List<TMP_FontAsset> get_fallbackFontAssets() { }
	// RVA: 0x16B130 Offset: 0x169930 VA: 0x18016B130
	public static bool get_matchMaterialPreset() { }
	// RVA: 0x16B150 Offset: 0x169950 VA: 0x18016B150
	public static TMP_SpriteAsset get_defaultSpriteAsset() { }
	// RVA: 0x16B170 Offset: 0x169970 VA: 0x18016B170
	public static string get_defaultSpriteAssetPath() { }
	// RVA: 0x16B190 Offset: 0x169990 VA: 0x18016B190
	public static bool get_enableEmojiSupport() { }
	// RVA: 0x16B1B0 Offset: 0x1699B0 VA: 0x18016B1B0
	public static void set_enableEmojiSupport(bool value) { }
	// RVA: 0x16B1E0 Offset: 0x1699E0 VA: 0x18016B1E0
	public static string get_defaultColorGradientPresetsPath() { }
	// RVA: 0x16B210 Offset: 0x169A10 VA: 0x18016B210
	public static TMP_StyleSheet get_defaultStyleSheet() { }
	// RVA: 0x16B240 Offset: 0x169A40 VA: 0x18016B240
	public static string get_styleSheetsResourcePath() { }
	// RVA: 0x16B270 Offset: 0x169A70 VA: 0x18016B270
	public static TextAsset get_leadingCharacters() { }
	// RVA: 0x16B2A0 Offset: 0x169AA0 VA: 0x18016B2A0
	public static TextAsset get_followingCharacters() { }
	// RVA: 0x16B2D0 Offset: 0x169AD0 VA: 0x18016B2D0
	public static TMP_Settings.LineBreakingTable get_linebreakingRules() { }
	// RVA: 0x16B450 Offset: 0x169C50 VA: 0x18016B450
	public static bool get_useModernHangulLineBreakingRules() { }
	// RVA: 0x16B480 Offset: 0x169C80 VA: 0x18016B480
	public static void set_useModernHangulLineBreakingRules(bool value) { }
	// RVA: 0x16B4B0 Offset: 0x169CB0 VA: 0x18016B4B0
	public static TMP_Settings get_instance() { }
	// RVA: 0x16B590 Offset: 0x169D90 VA: 0x18016B590
	public static TMP_Settings LoadDefaultSettings() { }
	// RVA: 0x16B6A0 Offset: 0x169EA0 VA: 0x18016B6A0
	public static TMP_Settings GetSettings() { }
	// RVA: 0x16B750 Offset: 0x169F50 VA: 0x18016B750
	public static TMP_FontAsset GetFontAsset() { }
	// RVA: 0x16B810 Offset: 0x16A010 VA: 0x18016B810
	public static TMP_SpriteAsset GetSpriteAsset() { }
	// RVA: 0x16B8D0 Offset: 0x16A0D0 VA: 0x18016B8D0
	public static TMP_StyleSheet GetStyleSheet() { }
	// RVA: 0x16B990 Offset: 0x16A190 VA: 0x18016B990
	public static void LoadLinebreakingRules() { }
	// RVA: 0x16BAE0 Offset: 0x16A2E0 VA: 0x18016BAE0
	private static Dictionary<int, char> GetCharacters(TextAsset file) { }
	// RVA: 0x16BC80 Offset: 0x16A480 VA: 0x18016BC80
	public void .ctor() { }
}

// Namespace: 
public class TMP_Settings.LineBreakingTable // TypeDefIndex: 2839
{
	// Fields
	public Dictionary<int, char> leadingCharacters; // 0x10
	public Dictionary<int, char> followingCharacters; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: TMPro
public static class ShaderUtilities // TypeDefIndex: 2840
{
	// Fields
	public static int ID_MainTex; // 0x0
	public static int ID_FaceTex; // 0x4
	public static int ID_FaceColor; // 0x8
	public static int ID_FaceDilate; // 0xC
	public static int ID_Shininess; // 0x10
	public static int ID_UnderlayColor; // 0x14
	public static int ID_UnderlayOffsetX; // 0x18
	public static int ID_UnderlayOffsetY; // 0x1C
	public static int ID_UnderlayDilate; // 0x20
	public static int ID_UnderlaySoftness; // 0x24
	public static int ID_WeightNormal; // 0x28
	public static int ID_WeightBold; // 0x2C
	public static int ID_OutlineTex; // 0x30
	public static int ID_OutlineWidth; // 0x34
	public static int ID_OutlineSoftness; // 0x38
	public static int ID_OutlineColor; // 0x3C
	public static int ID_Outline2Color; // 0x40
	public static int ID_Outline2Width; // 0x44
	public static int ID_Padding; // 0x48
	public static int ID_GradientScale; // 0x4C
	public static int ID_ScaleX; // 0x50
	public static int ID_ScaleY; // 0x54
	public static int ID_PerspectiveFilter; // 0x58
	public static int ID_Sharpness; // 0x5C
	public static int ID_TextureWidth; // 0x60
	public static int ID_TextureHeight; // 0x64
	public static int ID_BevelAmount; // 0x68
	public static int ID_GlowColor; // 0x6C
	public static int ID_GlowOffset; // 0x70
	public static int ID_GlowPower; // 0x74
	public static int ID_GlowOuter; // 0x78
	public static int ID_GlowInner; // 0x7C
	public static int ID_LightAngle; // 0x80
	public static int ID_EnvMap; // 0x84
	public static int ID_EnvMatrix; // 0x88
	public static int ID_EnvMatrixRotation; // 0x8C
	public static int ID_MaskCoord; // 0x90
	public static int ID_ClipRect; // 0x94
	public static int ID_MaskSoftnessX; // 0x98
	public static int ID_MaskSoftnessY; // 0x9C
	public static int ID_VertexOffsetX; // 0xA0
	public static int ID_VertexOffsetY; // 0xA4
	public static int ID_UseClipRect; // 0xA8
	public static int ID_StencilID; // 0xAC
	public static int ID_StencilOp; // 0xB0
	public static int ID_StencilComp; // 0xB4
	public static int ID_StencilReadMask; // 0xB8
	public static int ID_StencilWriteMask; // 0xBC
	public static int ID_ShaderFlags; // 0xC0
	public static int ID_ScaleRatio_A; // 0xC4
	public static int ID_ScaleRatio_B; // 0xC8
	public static int ID_ScaleRatio_C; // 0xCC
	public static string Keyword_Bevel; // 0xD0
	public static string Keyword_Glow; // 0xD8
	public static string Keyword_Underlay; // 0xE0
	public static string Keyword_Ratios; // 0xE8
	public static string Keyword_MASK_SOFT; // 0xF0
	public static string Keyword_MASK_HARD; // 0xF8
	public static string Keyword_MASK_TEX; // 0x100
	public static string Keyword_Outline; // 0x108
	public static string ShaderTag_ZTestMode; // 0x110
	public static string ShaderTag_CullMode; // 0x118
	private static float m_clamp; // 0x120
	public static bool isInitialized; // 0x124
	private static Shader k_ShaderRef_MobileSDF; // 0x128
	private static Shader k_ShaderRef_MobileBitmap; // 0x130

	// Properties
	internal static Shader ShaderRef_MobileSDF { get; }
	internal static Shader ShaderRef_MobileBitmap { get; }

	// Methods
	// RVA: 0x19A400 Offset: 0x198C00 VA: 0x18019A400
	internal static Shader get_ShaderRef_MobileSDF() { }
	// RVA: 0x19A580 Offset: 0x198D80 VA: 0x18019A580
	internal static Shader get_ShaderRef_MobileBitmap() { }
	// RVA: 0x19A700 Offset: 0x198F00 VA: 0x18019A700
	private static void .cctor() { }
	// RVA: 0x19A8B0 Offset: 0x1990B0 VA: 0x18019A8B0
	public static void GetShaderPropertyIDs() { }
	// RVA: 0x19BE10 Offset: 0x19A610 VA: 0x18019BE10
	public static void UpdateShaderRatios(Material mat) { }
	// RVA: 0x19C840 Offset: 0x19B040 VA: 0x18019C840
	public static bool IsMaskingEnabled(Material material) { }
	// RVA: 0x19CAB0 Offset: 0x19B2B0 VA: 0x18019CAB0
	public static float GetPadding(Material material, bool enableExtraPadding, bool isBold) { }
}

// Namespace: TMPro
[Serializable]
public class TMP_Sprite : TMP_TextElement_Legacy // TypeDefIndex: 2841
{
	// Fields
	public string name; // 0x38
	public int hashCode; // 0x40
	public int unicode; // 0x44
	public Vector2 pivot; // 0x48
	public Sprite sprite; // 0x50

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: TMPro
[DisallowMultipleComponent] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class TMP_SpriteAnimator : MonoBehaviour // TypeDefIndex: 2842
{
	// Fields
	private Dictionary<int, bool> m_animations; // 0x18
	private TMP_Text m_TextComponent; // 0x20

	// Methods
	// RVA: 0x16BC90 Offset: 0x16A490 VA: 0x18016BC90
	private void Awake() { }
	// RVA: 0x16BD10 Offset: 0x16A510 VA: 0x18016BD10
	public void StopAllAnimations() { }
	// RVA: 0x16BE50 Offset: 0x16A650 VA: 0x18016BE50
	public void DoSpriteAnimation(int currentCharacter, TMP_SpriteAsset spriteAsset, int start, int end, int framerate) { }
	// RVA: 0x16C010 Offset: 0x16A810 VA: 0x18016C010
	private IEnumerator DoSpriteAnimationInternal(int currentCharacter, TMP_SpriteAsset spriteAsset, int start, int end, int framerate) { }
	// RVA: 0x16C0E0 Offset: 0x16A8E0 VA: 0x18016C0E0
	public void .ctor() { }
}

// Namespace: 
private sealed class TMP_SpriteAnimator.<DoSpriteAnimationInternal>d__7 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2843
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public TMP_SpriteAnimator <>4__this; // 0x20
	public int start; // 0x28
	public int end; // 0x2C
	public TMP_SpriteAsset spriteAsset; // 0x30
	public int currentCharacter; // 0x38
	public int framerate; // 0x3C
	private int <currentFrame>5__2; // 0x40
	private TMP_CharacterInfo <charInfo>5__3; // 0x48
	private int <materialIndex>5__4; // 0x1B8
	private int <vertexIndex>5__5; // 0x1BC
	private TMP_MeshInfo <meshInfo>5__6; // 0x1C0
	private float <elapsedTime>5__7; // 0x210
	private float <targetTime>5__8; // 0x214

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6415D0 Offset: 0x63FDD0 VA: 0x1806415D0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: TMPro
public class TMP_SpriteAsset : TMP_Asset // TypeDefIndex: 2844
{
	// Fields
	internal Dictionary<uint, int> m_UnicodeLookup; // 0x30
	internal Dictionary<int, int> m_NameLookup; // 0x38
	internal Dictionary<uint, int> m_GlyphIndexLookup; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_Version; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal FaceInfo m_FaceInfo; // 0x50
	public Texture spriteSheet; // 0xA8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<TMP_SpriteCharacter> m_SpriteCharacterTable; // 0xB0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<TMP_SpriteGlyph> m_SpriteGlyphTable; // 0xB8
	public List<TMP_Sprite> spriteInfoList; // 0xC0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public List<TMP_SpriteAsset> fallbackSpriteAssets; // 0xC8
	internal bool m_IsSpriteAssetLookupTablesDirty; // 0xD0
	private static List<int> k_searchedSpriteAssets; // 0x0

	// Properties
	public string version { get; set; }
	public FaceInfo faceInfo { get; set; }
	public List<TMP_SpriteCharacter> spriteCharacterTable { get; set; }
	public List<TMP_SpriteGlyph> spriteGlyphTable { get; set; }

	// Methods
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0
	public string get_version() { }
	// RVA: 0x16C1B0 Offset: 0x16A9B0 VA: 0x18016C1B0
	internal void set_version(string value) { }
	// RVA: 0x16C1C0 Offset: 0x16A9C0 VA: 0x18016C1C0
	public FaceInfo get_faceInfo() { }
	// RVA: 0x16C200 Offset: 0x16AA00 VA: 0x18016C200
	internal void set_faceInfo(FaceInfo value) { }
	// RVA: 0x16C240 Offset: 0x16AA40 VA: 0x18016C240
	public List<TMP_SpriteCharacter> get_spriteCharacterTable() { }
	// RVA: 0x16C280 Offset: 0x16AA80 VA: 0x18016C280
	internal void set_spriteCharacterTable(List<TMP_SpriteCharacter> value) { }
	// RVA: 0x16C290 Offset: 0x16AA90 VA: 0x18016C290
	public List<TMP_SpriteGlyph> get_spriteGlyphTable() { }
	// RVA: 0x16C2A0 Offset: 0x16AAA0 VA: 0x18016C2A0
	internal void set_spriteGlyphTable(List<TMP_SpriteGlyph> value) { }
	// RVA: 0x16C2B0 Offset: 0x16AAB0 VA: 0x18016C2B0
	private void Awake() { }
	// RVA: 0x16C370 Offset: 0x16AB70 VA: 0x18016C370
	private Material GetDefaultSpriteMaterial() { }
	// RVA: 0x16C540 Offset: 0x16AD40 VA: 0x18016C540
	public void UpdateLookupTables() { }
	// RVA: 0x16CA10 Offset: 0x16B210 VA: 0x18016CA10
	public int GetSpriteIndexFromHashcode(int hashCode) { }
	// RVA: 0x16CB20 Offset: 0x16B320 VA: 0x18016CB20
	public int GetSpriteIndexFromUnicode(uint unicode) { }
	// RVA: 0x16CC30 Offset: 0x16B430 VA: 0x18016CC30
	public int GetSpriteIndexFromName(string name) { }
	// RVA: 0x16CCF0 Offset: 0x16B4F0 VA: 0x18016CCF0
	public static TMP_SpriteAsset SearchForSpriteByUnicode(TMP_SpriteAsset spriteAsset, uint unicode, bool includeFallbacks, out int spriteIndex) { }
	// RVA: 0x16CF30 Offset: 0x16B730 VA: 0x18016CF30
	private static TMP_SpriteAsset SearchForSpriteByUnicodeInternal(List<TMP_SpriteAsset> spriteAssets, uint unicode, bool includeFallbacks, out int spriteIndex) { }
	// RVA: 0x16D100 Offset: 0x16B900 VA: 0x18016D100
	private static TMP_SpriteAsset SearchForSpriteByUnicodeInternal(TMP_SpriteAsset spriteAsset, uint unicode, bool includeFallbacks, out int spriteIndex) { }
	// RVA: 0x16D1F0 Offset: 0x16B9F0 VA: 0x18016D1F0
	public static TMP_SpriteAsset SearchForSpriteByHashCode(TMP_SpriteAsset spriteAsset, int hashCode, bool includeFallbacks, out int spriteIndex) { }
	// RVA: 0x16D430 Offset: 0x16BC30 VA: 0x18016D430
	private static TMP_SpriteAsset SearchForSpriteByHashCodeInternal(List<TMP_SpriteAsset> spriteAssets, int hashCode, bool searchFallbacks, out int spriteIndex) { }
	// RVA: 0x16D600 Offset: 0x16BE00 VA: 0x18016D600
	private static TMP_SpriteAsset SearchForSpriteByHashCodeInternal(TMP_SpriteAsset spriteAsset, int hashCode, bool searchFallbacks, out int spriteIndex) { }
	// RVA: 0x16D6F0 Offset: 0x16BEF0 VA: 0x18016D6F0
	public void SortGlyphTable() { }
	// RVA: 0x16D840 Offset: 0x16C040 VA: 0x18016D840
	internal void SortCharacterTable() { }
	// RVA: 0x16D990 Offset: 0x16C190 VA: 0x18016D990
	internal void SortGlyphAndCharacterTables() { }
	// RVA: 0x16DC10 Offset: 0x16C410 VA: 0x18016DC10
	private void UpgradeSpriteAsset() { }
	// RVA: 0x16E2A0 Offset: 0x16CAA0 VA: 0x18016E2A0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
private sealed class TMP_SpriteAsset.<>c // TypeDefIndex: 2845
{
	// Fields
	public static readonly TMP_SpriteAsset.<>c <>9; // 0x0
	public static Func<TMP_SpriteGlyph, uint> <>9__36_0; // 0x8
	public static Func<TMP_SpriteCharacter, uint> <>9__37_0; // 0x10

	// Methods
	// RVA: 0x641F90 Offset: 0x640790 VA: 0x180641F90
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x640D80 Offset: 0x63F580 VA: 0x180640D80
	internal uint <SortGlyphTable>b__36_0(TMP_SpriteGlyph item) { }
	// RVA: 0x640D60 Offset: 0x63F560 VA: 0x180640D60
	internal uint <SortCharacterTable>b__37_0(TMP_SpriteCharacter c) { }
}

// Namespace: TMPro
[Serializable]
public class TMP_SpriteCharacter : TMP_TextElement // TypeDefIndex: 2846
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_Name; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_HashCode; // 0x30

	// Properties
	set; }
	public int hashCode { get; }

	// Methods
	// RVA: 0x16E370 Offset: 0x16CB70 VA: 0x18016E370
	public void set_name(string value) { }
	// RVA: 0x16E4D0 Offset: 0x16CCD0 VA: 0x18016E4D0
	public int get_hashCode() { }
	// RVA: 0x16E4E0 Offset: 0x16CCE0 VA: 0x18016E4E0
	public void .ctor() { }
	// RVA: 0x16E4F0 Offset: 0x16CCF0 VA: 0x18016E4F0
	public void .ctor(uint unicode, TMP_SpriteGlyph glyph) { }
}

// Namespace: TMPro
[Serializable]
public class TMP_SpriteGlyph : Glyph // TypeDefIndex: 2847
{
	// Fields
	public Sprite sprite; // 0x40

	// Methods
	// RVA: 0x16E520 Offset: 0x16CD20 VA: 0x18016E520
	public void .ctor() { }
}

// Namespace: TMPro
[Serializable]
public class TMP_Style // TypeDefIndex: 2848
{
	// Fields
	internal static TMP_Style k_NormalStyle; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_Name; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_HashCode; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_OpeningDefinition; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string m_ClosingDefinition; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int[] m_OpeningTagArray; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int[] m_ClosingTagArray; // 0x38

	// Properties
	public static TMP_Style NormalStyle { get; }
	public int hashCode { get; }
	public int[] styleOpeningTagArray { get; }
	public int[] styleClosingTagArray { get; }

	// Methods
	// RVA: 0x16E540 Offset: 0x16CD40 VA: 0x18016E540
	public static TMP_Style get_NormalStyle() { }
	// RVA: 0x16E6C0 Offset: 0x16CEC0 VA: 0x18016E6C0
	public int get_hashCode() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public int[] get_styleOpeningTagArray() { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0
	public int[] get_styleClosingTagArray() { }
	// RVA: 0x16E6F0 Offset: 0x16CEF0 VA: 0x18016E6F0
	internal void .ctor(string styleName, string styleOpeningDefinition, string styleClosingDefinition) { }
	// RVA: 0x16E7C0 Offset: 0x16CFC0 VA: 0x18016E7C0
	public void RefreshStyle() { }
}

// Namespace: TMPro
[Serializable]
public class TMP_StyleSheet : ScriptableObject // TypeDefIndex: 2849
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<TMP_Style> m_StyleList; // 0x18
	private Dictionary<int, TMP_Style> m_StyleLookupDictionary; // 0x20

	// Properties
	internal List<TMP_Style> styles { get; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	internal List<TMP_Style> get_styles() { }
	// RVA: 0x16E9A0 Offset: 0x16D1A0 VA: 0x18016E9A0
	public TMP_Style GetStyle(int hashCode) { }
	// RVA: 0x16EAA0 Offset: 0x16D2A0 VA: 0x18016EAA0
	public TMP_Style GetStyle(string name) { }
	// RVA: 0x16EBC0 Offset: 0x16D3C0 VA: 0x18016EBC0
	public void RefreshStyles() { }
	// RVA: 0x16EBD0 Offset: 0x16D3D0 VA: 0x18016EBD0
	private void LoadStyleDictionaryInternal() { }
	// RVA: 0x16EDC0 Offset: 0x16D5C0 VA: 0x18016EDC0
	public void .ctor() { }
}

// Namespace: TMPro
[RequireComponent] // RVA: 0x103A70 Offset: 0x102E70 VA: 0x180103A70
[ExecuteAlways] // RVA: 0x103A70 Offset: 0x102E70 VA: 0x180103A70
[RequireComponent] // RVA: 0x103A70 Offset: 0x102E70 VA: 0x180103A70
public class TMP_SubMesh : MonoBehaviour // TypeDefIndex: 2850
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_FontAsset m_fontAsset; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_SpriteAsset m_spriteAsset; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Material m_material; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Material m_sharedMaterial; // 0x30
	private Material m_fallbackMaterial; // 0x38
	private Material m_fallbackSourceMaterial; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_isDefaultMaterial; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_padding; // 0x4C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Renderer m_renderer; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private MeshFilter m_meshFilter; // 0x58
	private Mesh m_mesh; // 0x60
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TextMeshPro m_TextComponent; // 0x68
	private bool m_isRegisteredForEvents; // 0x70

	// Properties
	public TMP_FontAsset fontAsset { get; set; }
	public TMP_SpriteAsset spriteAsset { get; set; }
	public Material material { get; set; }
	public Material sharedMaterial { get; set; }
	public Material fallbackMaterial { get; set; }
	public Material fallbackSourceMaterial { get; set; }
	public bool isDefaultMaterial { get; set; }
	public float padding { get; set; }
	public Renderer renderer { get; }
	public MeshFilter meshFilter { get; }
	public Mesh mesh { get; set; }
	public TMP_Text textComponent { get; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public TMP_FontAsset get_fontAsset() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_fontAsset(TMP_FontAsset value) { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public TMP_SpriteAsset get_spriteAsset() { }
	// RVA: 0x16EEC0 Offset: 0x16D6C0 VA: 0x18016EEC0
	public void set_spriteAsset(TMP_SpriteAsset value) { }
	// RVA: 0x16EED0 Offset: 0x16D6D0 VA: 0x18016EED0
	public Material get_material() { }
	// RVA: 0x16EEE0 Offset: 0x16D6E0 VA: 0x18016EEE0
	public void set_material(Material value) { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public Material get_sharedMaterial() { }
	// RVA: 0x16EF60 Offset: 0x16D760 VA: 0x18016EF60
	public void set_sharedMaterial(Material value) { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0
	public Material get_fallbackMaterial() { }
	// RVA: 0x16EF90 Offset: 0x16D790 VA: 0x18016EF90
	public void set_fallbackMaterial(Material value) { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public Material get_fallbackSourceMaterial() { }
	// RVA: 0x16F140 Offset: 0x16D940 VA: 0x18016F140
	public void set_fallbackSourceMaterial(Material value) { }
	// RVA: 0x16F150 Offset: 0x16D950 VA: 0x18016F150
	public bool get_isDefaultMaterial() { }
	// RVA: 0x16F160 Offset: 0x16D960 VA: 0x18016F160
	public void set_isDefaultMaterial(bool value) { }
	// RVA: 0x16F170 Offset: 0x16D970 VA: 0x18016F170
	public float get_padding() { }
	// RVA: 0x16F180 Offset: 0x16D980 VA: 0x18016F180
	public void set_padding(float value) { }
	// RVA: 0x16F190 Offset: 0x16D990 VA: 0x18016F190
	public Renderer get_renderer() { }
	// RVA: 0x16F250 Offset: 0x16DA50 VA: 0x18016F250
	public MeshFilter get_meshFilter() { }
	// RVA: 0x16F310 Offset: 0x16DB10 VA: 0x18016F310
	public Mesh get_mesh() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0
	public void set_mesh(Mesh value) { }
	// RVA: 0x16F4B0 Offset: 0x16DCB0 VA: 0x18016F4B0
	public TMP_Text get_textComponent() { }
	// RVA: 0x16F570 Offset: 0x16DD70 VA: 0x18016F570
	private void OnEnable() { }
	// RVA: 0x16F730 Offset: 0x16DF30 VA: 0x18016F730
	private void OnDisable() { }
	// RVA: 0x16F870 Offset: 0x16E070 VA: 0x18016F870
	private void OnDestroy() { }
	// RVA: 0x16FA00 Offset: 0x16E200 VA: 0x18016FA00
	public static TMP_SubMesh AddSubTextObject(TextMeshPro textComponent, MaterialReference materialReference) { }
	// RVA: 0x1701B0 Offset: 0x16E9B0 VA: 0x1801701B0
	public void DestroySelf() { }
	// RVA: 0x1702D0 Offset: 0x16EAD0 VA: 0x1801702D0
	private Material GetMaterial(Material mat) { }
	// RVA: 0x170580 Offset: 0x16ED80 VA: 0x180170580
	private Material CreateMaterialInstance(Material source) { }
	// RVA: 0x1706E0 Offset: 0x16EEE0 VA: 0x1801706E0
	private Material GetSharedMaterial() { }
	// RVA: 0x16EF60 Offset: 0x16D760 VA: 0x18016EF60
	private void SetSharedMaterial(Material mat) { }
	// RVA: 0x1707F0 Offset: 0x16EFF0 VA: 0x1801707F0
	public float GetPaddingForMaterial() { }
	// RVA: 0x1708C0 Offset: 0x16F0C0 VA: 0x1801708C0
	public void UpdateMeshPadding(bool isExtraPadding, bool isUsingBold) { }
	// RVA: 0x170990 Offset: 0x16F190 VA: 0x180170990
	public void SetVerticesDirty() { }
	// RVA: 0x170AD0 Offset: 0x16F2D0 VA: 0x180170AD0
	public void SetMaterialDirty() { }
	// RVA: 0x170AE0 Offset: 0x16F2E0 VA: 0x180170AE0
	protected void UpdateMaterial() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: TMPro
[ExecuteAlways] // RVA: 0x103B10 Offset: 0x102F10 VA: 0x180103B10
[RequireComponent] // RVA: 0x103B10 Offset: 0x102F10 VA: 0x180103B10
public class TMP_SubMeshUI : MaskableGraphic, IClippable, IMaskable, IMaterialModifier // TypeDefIndex: 2851
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_FontAsset m_fontAsset; // 0xD8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_SpriteAsset m_spriteAsset; // 0xE0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Material m_material; // 0xE8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Material m_sharedMaterial; // 0xF0
	private Material m_fallbackMaterial; // 0xF8
	private Material m_fallbackSourceMaterial; // 0x100
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_isDefaultMaterial; // 0x108
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float m_padding; // 0x10C
	private Mesh m_mesh; // 0x110
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TextMeshProUGUI m_TextComponent; // 0x118
	private bool m_isRegisteredForEvents; // 0x120
	private bool m_materialDirty; // 0x121
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int m_materialReferenceIndex; // 0x124

	// Properties
	public TMP_FontAsset fontAsset { get; set; }
	public TMP_SpriteAsset spriteAsset { get; set; }
	public override Texture mainTexture { get; }
	public override Material material { get; set; }
	public Material sharedMaterial { get; set; }
	public Material fallbackMaterial { get; set; }
	public Material fallbackSourceMaterial { get; set; }
	public override Material materialForRendering { get; }
	public bool isDefaultMaterial { get; set; }
	public float padding { get; set; }
	public Mesh mesh { get; set; }
	public TMP_Text textComponent { get; }

	// Methods
	// RVA: 0x170D70 Offset: 0x16F570 VA: 0x180170D70
	public TMP_FontAsset get_fontAsset() { }
	// RVA: 0x170D80 Offset: 0x16F580 VA: 0x180170D80
	public void set_fontAsset(TMP_FontAsset value) { }
	// RVA: 0x170D90 Offset: 0x16F590 VA: 0x180170D90
	public TMP_SpriteAsset get_spriteAsset() { }
	// RVA: 0x170DA0 Offset: 0x16F5A0 VA: 0x180170DA0
	public void set_spriteAsset(TMP_SpriteAsset value) { }
	// RVA: 0x170DB0 Offset: 0x16F5B0 VA: 0x180170DB0 Slot: 35
	public override Texture get_mainTexture() { }
	// RVA: 0x170EF0 Offset: 0x16F6F0 VA: 0x180170EF0 Slot: 32
	public override Material get_material() { }
	// RVA: 0x170F00 Offset: 0x16F700 VA: 0x180170F00 Slot: 33
	public override void set_material(Material value) { }
	// RVA: 0x171030 Offset: 0x16F830 VA: 0x180171030
	public Material get_sharedMaterial() { }
	// RVA: 0x171040 Offset: 0x16F840 VA: 0x180171040
	public void set_sharedMaterial(Material value) { }
	// RVA: 0x171080 Offset: 0x16F880 VA: 0x180171080
	public Material get_fallbackMaterial() { }
	// RVA: 0x171090 Offset: 0x16F890 VA: 0x180171090
	public void set_fallbackMaterial(Material value) { }
	// RVA: 0x171250 Offset: 0x16FA50 VA: 0x180171250
	public Material get_fallbackSourceMaterial() { }
	// RVA: 0x171260 Offset: 0x16FA60 VA: 0x180171260
	public void set_fallbackSourceMaterial(Material value) { }
	// RVA: 0x171270 Offset: 0x16FA70 VA: 0x180171270 Slot: 34
	public override Material get_materialForRendering() { }
	// RVA: 0x171320 Offset: 0x16FB20 VA: 0x180171320
	public bool get_isDefaultMaterial() { }
	// RVA: 0x171330 Offset: 0x16FB30 VA: 0x180171330
	public void set_isDefaultMaterial(bool value) { }
	// RVA: 0x171340 Offset: 0x16FB40 VA: 0x180171340
	public float get_padding() { }
	// RVA: 0x171350 Offset: 0x16FB50 VA: 0x180171350
	public void set_padding(float value) { }
	// RVA: 0x171360 Offset: 0x16FB60 VA: 0x180171360
	public Mesh get_mesh() { }
	// RVA: 0x171480 Offset: 0x16FC80 VA: 0x180171480
	public void set_mesh(Mesh value) { }
	// RVA: 0x171490 Offset: 0x16FC90 VA: 0x180171490
	public TMP_Text get_textComponent() { }
	// RVA: 0x171560 Offset: 0x16FD60 VA: 0x180171560
	public static TMP_SubMeshUI AddSubTextObject(TextMeshProUGUI textComponent, MaterialReference materialReference) { }
	// RVA: 0x171B70 Offset: 0x170370 VA: 0x180171B70 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x171BC0 Offset: 0x1703C0 VA: 0x180171BC0 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x171D20 Offset: 0x170520 VA: 0x180171D20 Slot: 8
	protected override void OnDestroy() { }
	// RVA: 0x171F40 Offset: 0x170740 VA: 0x180171F40 Slot: 12
	protected override void OnTransformParentChanged() { }
	// RVA: 0x171FA0 Offset: 0x1707A0 VA: 0x180171FA0 Slot: 55
	public override Material GetModifiedMaterial(Material baseMaterial) { }
	// RVA: 0x1721D0 Offset: 0x1709D0 VA: 0x1801721D0
	public float GetPaddingForMaterial() { }
	// RVA: 0x1722B0 Offset: 0x170AB0 VA: 0x1801722B0
	public float GetPaddingForMaterial(Material mat) { }
	// RVA: 0x172380 Offset: 0x170B80 VA: 0x180172380
	public void UpdateMeshPadding(bool isExtraPadding, bool isUsingBold) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 26
	public override void SetAllDirty() { }
	// RVA: 0x172450 Offset: 0x170C50 VA: 0x180172450 Slot: 28
	public override void SetVerticesDirty() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 27
	public override void SetLayoutDirty() { }
	// RVA: 0x172570 Offset: 0x170D70 VA: 0x180172570 Slot: 29
	public override void SetMaterialDirty() { }
	// RVA: 0x1725B0 Offset: 0x170DB0 VA: 0x1801725B0
	public void SetPivotDirty() { }
	// RVA: 0x172670 Offset: 0x170E70 VA: 0x180172670 Slot: 56
	public override void Cull(Rect clipRect, bool validRect) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 41
	protected override void UpdateGeometry() { }
	// RVA: 0x1727C0 Offset: 0x170FC0 VA: 0x1801727C0 Slot: 37
	public override void Rebuild(CanvasUpdate update) { }
	// RVA: 0x172800 Offset: 0x171000 VA: 0x180172800
	public void RefreshMaterial() { }
	// RVA: 0x172820 Offset: 0x171020 VA: 0x180172820 Slot: 40
	protected override void UpdateMaterial() { }
	// RVA: 0x172B40 Offset: 0x171340 VA: 0x180172B40 Slot: 59
	public override void RecalculateClipping() { }
	// RVA: 0x172B50 Offset: 0x171350 VA: 0x180172B50 Slot: 60
	public override void RecalculateMasking() { }
	// RVA: 0x171030 Offset: 0x16F830 VA: 0x180171030
	private Material GetMaterial() { }
	// RVA: 0x172B70 Offset: 0x171370 VA: 0x180172B70
	private Material GetMaterial(Material mat) { }
	// RVA: 0x172E00 Offset: 0x171600 VA: 0x180172E00
	private Material CreateMaterialInstance(Material source) { }
	// RVA: 0x172F60 Offset: 0x171760 VA: 0x180172F60
	private Material GetSharedMaterial() { }
	// RVA: 0x171040 Offset: 0x16F840 VA: 0x180171040
	private void SetSharedMaterial(Material mat) { }
	// RVA: 0x16AE20 Offset: 0x169620 VA: 0x18016AE20
	public void .ctor() { }
}

// Namespace: TMPro
public enum TextAlignmentOptions // TypeDefIndex: 2852
{
	// Fields
	public int value__; // 0x0
	public const TextAlignmentOptions TopLeft = 257; // 0x0
	public const TextAlignmentOptions Top = 258; // 0x0
	public const TextAlignmentOptions TopRight = 260; // 0x0
	public const TextAlignmentOptions TopJustified = 264; // 0x0
	public const TextAlignmentOptions TopFlush = 272; // 0x0
	public const TextAlignmentOptions TopGeoAligned = 288; // 0x0
	public const TextAlignmentOptions Left = 513; // 0x0
	public const TextAlignmentOptions Center = 514; // 0x0
	public const TextAlignmentOptions Right = 516; // 0x0
	public const TextAlignmentOptions Justified = 520; // 0x0
	public const TextAlignmentOptions Flush = 528; // 0x0
	public const TextAlignmentOptions CenterGeoAligned = 544; // 0x0
	public const TextAlignmentOptions BottomLeft = 1025; // 0x0
	public const TextAlignmentOptions Bottom = 1026; // 0x0
	public const TextAlignmentOptions BottomRight = 1028; // 0x0
	public const TextAlignmentOptions BottomJustified = 1032; // 0x0
	public const TextAlignmentOptions BottomFlush = 1040; // 0x0
	public const TextAlignmentOptions BottomGeoAligned = 1056; // 0x0
	public const TextAlignmentOptions BaselineLeft = 2049; // 0x0
	public const TextAlignmentOptions Baseline = 2050; // 0x0
	public const TextAlignmentOptions BaselineRight = 2052; // 0x0
	public const TextAlignmentOptions BaselineJustified = 2056; // 0x0
	public const TextAlignmentOptions BaselineFlush = 2064; // 0x0
	public const TextAlignmentOptions BaselineGeoAligned = 2080; // 0x0
	public const TextAlignmentOptions MidlineLeft = 4097; // 0x0
	public const TextAlignmentOptions Midline = 4098; // 0x0
	public const TextAlignmentOptions MidlineRight = 4100; // 0x0
	public const TextAlignmentOptions MidlineJustified = 4104; // 0x0
	public const TextAlignmentOptions MidlineFlush = 4112; // 0x0
	public const TextAlignmentOptions MidlineGeoAligned = 4128; // 0x0
	public const TextAlignmentOptions CaplineLeft = 8193; // 0x0
	public const TextAlignmentOptions Capline = 8194; // 0x0
	public const TextAlignmentOptions CaplineRight = 8196; // 0x0
	public const TextAlignmentOptions CaplineJustified = 8200; // 0x0
	public const TextAlignmentOptions CaplineFlush = 8208; // 0x0
	public const TextAlignmentOptions CaplineGeoAligned = 8224; // 0x0
	public const TextAlignmentOptions Converted = 65535; // 0x0
}

// Namespace: TMPro
public enum HorizontalAlignmentOptions // TypeDefIndex: 2853
{
	// Fields
	public int value__; // 0x0
	public const HorizontalAlignmentOptions Left = 1; // 0x0
	public const HorizontalAlignmentOptions Center = 2; // 0x0
	public const HorizontalAlignmentOptions Right = 4; // 0x0
	public const HorizontalAlignmentOptions Justified = 8; // 0x0
	public const HorizontalAlignmentOptions Flush = 16; // 0x0
	public const HorizontalAlignmentOptions Geometry = 32; // 0x0
}

// Namespace: TMPro
public enum VerticalAlignmentOptions // TypeDefIndex: 2854
{
	// Fields
	public int value__; // 0x0
	public const VerticalAlignmentOptions Top = 256; // 0x0
	public const VerticalAlignmentOptions Middle = 512; // 0x0
	public const VerticalAlignmentOptions Bottom = 1024; // 0x0
	public const VerticalAlignmentOptions Baseline = 2048; // 0x0
	public const VerticalAlignmentOptions Geometry = 4096; // 0x0
	public const VerticalAlignmentOptions Capline = 8192; // 0x0
}

// Namespace: TMPro
public enum TextRenderFlags // TypeDefIndex: 2855
{
	// Fields
	public int value__; // 0x0
	public const TextRenderFlags DontRender = 0; // 0x0
	public const TextRenderFlags Render = 255; // 0x0
}

// Namespace: TMPro
public enum TMP_TextElementType // TypeDefIndex: 2856
{
	// Fields
	public int value__; // 0x0
	public const TMP_TextElementType Character = 0; // 0x0
	public const TMP_TextElementType Sprite = 1; // 0x0
}

// Namespace: TMPro
public enum MaskingTypes // TypeDefIndex: 2857
{
	// Fields
	public int value__; // 0x0
	public const MaskingTypes MaskOff = 0; // 0x0
	public const MaskingTypes MaskHard = 1; // 0x0
	public const MaskingTypes MaskSoft = 2; // 0x0
}

// Namespace: TMPro
public enum TextOverflowModes // TypeDefIndex: 2858
{
	// Fields
	public int value__; // 0x0
	public const TextOverflowModes Overflow = 0; // 0x0
	public const TextOverflowModes Ellipsis = 1; // 0x0
	public const TextOverflowModes Masking = 2; // 0x0
	public const TextOverflowModes Truncate = 3; // 0x0
	public const TextOverflowModes ScrollRect = 4; // 0x0
	public const TextOverflowModes Page = 5; // 0x0
	public const TextOverflowModes Linked = 6; // 0x0
}

// Namespace: TMPro
public enum TextureMappingOptions // TypeDefIndex: 2859
{
	// Fields
	public int value__; // 0x0
	public const TextureMappingOptions Character = 0; // 0x0
	public const TextureMappingOptions Line = 1; // 0x0
	public const TextureMappingOptions Paragraph = 2; // 0x0
	public const TextureMappingOptions MatchAspect = 3; // 0x0
}

// Namespace: TMPro
[FlagsAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public enum FontStyles // TypeDefIndex: 2860
{
	// Fields
	public int value__; // 0x0
	public const FontStyles Normal = 0; // 0x0
	public const FontStyles Bold = 1; // 0x0
	public const FontStyles Italic = 2; // 0x0
	public const FontStyles Underline = 4; // 0x0
	public const FontStyles LowerCase = 8; // 0x0
	public const FontStyles UpperCase = 16; // 0x0
	public const FontStyles SmallCaps = 32; // 0x0
	public const FontStyles Strikethrough = 64; // 0x0
	public const FontStyles Superscript = 128; // 0x0
	public const FontStyles Subscript = 256; // 0x0
	public const FontStyles Highlight = 512; // 0x0
}

// Namespace: TMPro
public enum FontWeight // TypeDefIndex: 2861
{
	// Fields
	public int value__; // 0x0
	public const FontWeight Thin = 100; // 0x0
	public const FontWeight ExtraLight = 200; // 0x0
	public const FontWeight Light = 300; // 0x0
	public const FontWeight Regular = 400; // 0x0
	public const FontWeight Medium = 500; // 0x0
	public const FontWeight SemiBold = 600; // 0x0
	public const FontWeight Bold = 700; // 0x0
	public const FontWeight Heavy = 800; // 0x0
	public const FontWeight Black = 900; // 0x0
}

// Namespace: TMPro
public abstract class TMP_Text : MaskableGraphic // TypeDefIndex: 2862
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected string m_text; // 0xD8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected ITextPreprocessor m_TextPreprocessor; // 0xE0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_isRightToLeft; // 0xE8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TMP_FontAsset m_fontAsset; // 0xF0
	protected TMP_FontAsset m_currentFontAsset; // 0xF8
	protected bool m_isSDFShader; // 0x100
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Material m_sharedMaterial; // 0x108
	protected Material m_currentMaterial; // 0x110
	protected MaterialReference[] m_materialReferences; // 0x118
	protected Dictionary<int, int> m_materialReferenceIndexLookup; // 0x120
	protected TMP_RichTextTagStack<MaterialReference> m_materialReferenceStack; // 0x128
	protected int m_currentMaterialIndex; // 0x170
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Material[] m_fontSharedMaterials; // 0x178
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Material m_fontMaterial; // 0x180
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Material[] m_fontMaterials; // 0x188
	protected bool m_isMaterialDirty; // 0x190
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Color32 m_fontColor32; // 0x194
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Color m_fontColor; // 0x198
	protected static Color32 s_colorWhite; // 0x0
	protected Color32 m_underlineColor; // 0x1A8
	protected Color32 m_strikethroughColor; // 0x1AC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_enableVertexGradient; // 0x1B0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected ColorMode m_colorMode; // 0x1B4
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected VertexGradient m_fontColorGradient; // 0x1B8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TMP_ColorGradient m_fontColorGradientPreset; // 0x1F8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TMP_SpriteAsset m_spriteAsset; // 0x200
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_tintAllSprites; // 0x208
	protected bool m_tintSprite; // 0x209
	protected Color32 m_spriteColor; // 0x20C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TMP_StyleSheet m_StyleSheet; // 0x210
	internal TMP_Style m_TextStyle; // 0x218
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected int m_TextStyleHashCode; // 0x220
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_overrideHtmlColors; // 0x224
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Color32 m_faceColor; // 0x228
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Color32 m_outlineColor; // 0x22C
	protected float m_outlineWidth; // 0x230
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_fontSize; // 0x234
	protected float m_currentFontSize; // 0x238
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_fontSizeBase; // 0x23C
	protected TMP_RichTextTagStack<float> m_sizeStack; // 0x240
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected FontWeight m_fontWeight; // 0x258
	protected FontWeight m_FontWeightInternal; // 0x25C
	protected TMP_RichTextTagStack<FontWeight> m_FontWeightStack; // 0x260
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_enableAutoSizing; // 0x278
	protected float m_maxFontSize; // 0x27C
	protected float m_minFontSize; // 0x280
	protected int m_AutoSizeIterationCount; // 0x284
	protected int m_AutoSizeMaxIterationCount; // 0x288
	protected bool m_IsAutoSizePointSizeSet; // 0x28C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_fontSizeMin; // 0x290
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_fontSizeMax; // 0x294
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected FontStyles m_fontStyle; // 0x298
	protected FontStyles m_FontStyleInternal; // 0x29C
	protected TMP_FontStyleStack m_fontStyleStack; // 0x2A0
	protected bool m_isUsingBold; // 0x2AA
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected HorizontalAlignmentOptions m_HorizontalAlignment; // 0x2AC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected VerticalAlignmentOptions m_VerticalAlignment; // 0x2B0
	[FormerlySerializedAsAttribute] // RVA: 0x103B90 Offset: 0x102F90 VA: 0x180103B90
	[SerializeField] // RVA: 0x103B90 Offset: 0x102F90 VA: 0x180103B90
	protected TextAlignmentOptions m_textAlignment; // 0x2B4
	protected HorizontalAlignmentOptions m_lineJustification; // 0x2B8
	protected TMP_RichTextTagStack<HorizontalAlignmentOptions> m_lineJustificationStack; // 0x2C0
	protected Vector3[] m_textContainerLocalCorners; // 0x2D8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_characterSpacing; // 0x2E0
	protected float m_cSpacing; // 0x2E4
	protected float m_monoSpacing; // 0x2E8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_wordSpacing; // 0x2EC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_lineSpacing; // 0x2F0
	protected float m_lineSpacingDelta; // 0x2F4
	protected float m_lineHeight; // 0x2F8
	protected bool m_IsDrivenLineSpacing; // 0x2FC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_lineSpacingMax; // 0x300
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_paragraphSpacing; // 0x304
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_charWidthMaxAdj; // 0x308
	protected float m_charWidthAdjDelta; // 0x30C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_enableWordWrapping; // 0x310
	protected bool m_isCharacterWrappingEnabled; // 0x311
	protected bool m_isNonBreakingSpace; // 0x312
	protected bool m_isIgnoringAlignment; // 0x313
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_wordWrappingRatios; // 0x314
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TextOverflowModes m_overflowMode; // 0x318
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected int m_firstOverflowCharacterIndex; // 0x31C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TMP_Text m_linkedTextComponent; // 0x320
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal TMP_Text parentLinkedComponent; // 0x328
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_isTextTruncated; // 0x330
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_enableKerning; // 0x331
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_enableExtraPadding; // 0x332
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool checkPaddingRequired; // 0x333
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_isRichText; // 0x334
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_parseCtrlCharacters; // 0x335
	protected bool m_isOverlay; // 0x336
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_isOrthographic; // 0x337
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_isCullingEnabled; // 0x338
	protected bool m_isMaskingEnabled; // 0x339
	protected bool isMaskUpdateRequired; // 0x33A
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_ignoreCulling; // 0x33B
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TextureMappingOptions m_horizontalMapping; // 0x33C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TextureMappingOptions m_verticalMapping; // 0x340
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float m_uvLineOffset; // 0x344
	protected TextRenderFlags m_renderMode; // 0x348
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected VertexSortingOrder m_geometrySortingOrder; // 0x34C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_IsTextObjectScaleStatic; // 0x350
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_VertexBufferAutoSizeReduction; // 0x351
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected int m_firstVisibleCharacter; // 0x354
	protected int m_maxVisibleCharacters; // 0x358
	protected int m_maxVisibleWords; // 0x35C
	protected int m_maxVisibleLines; // 0x360
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_useMaxVisibleDescender; // 0x364
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected int m_pageToDisplay; // 0x368
	protected bool m_isNewPage; // 0x36C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Vector4 m_margin; // 0x370
	protected float m_marginLeft; // 0x380
	protected float m_marginRight; // 0x384
	protected float m_marginWidth; // 0x388
	protected float m_marginHeight; // 0x38C
	protected float m_width; // 0x390
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TMP_TextInfo m_textInfo; // 0x398
	protected bool m_havePropertiesChanged; // 0x3A0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_isUsingLegacyAnimationComponent; // 0x3A1
	protected Transform m_transform; // 0x3A8
	protected RectTransform m_rectTransform; // 0x3B0
	protected Rect m_RectTransformRect; // 0x3B8
	private bool <autoSizeTextContainer>k__BackingField; // 0x3C8
	protected bool m_autoSizeTextContainer; // 0x3C9
	protected Mesh m_mesh; // 0x3D0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool m_isVolumetricText; // 0x3D8
	private static Func<int, string, TMP_FontAsset> onFontAssetRequest; // 0x8
	private static Func<int, string, TMP_SpriteAsset> onSpriteAssetRequest; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TMP_SpriteAnimator m_spriteAnimator; // 0x3E0
	protected float m_flexibleHeight; // 0x3E8
	protected float m_flexibleWidth; // 0x3EC
	protected float m_minWidth; // 0x3F0
	protected float m_minHeight; // 0x3F4
	protected float m_maxWidth; // 0x3F8
	protected float m_maxHeight; // 0x3FC
	protected LayoutElement m_LayoutElement; // 0x400
	protected float m_preferredWidth; // 0x408
	protected float m_renderedWidth; // 0x40C
	protected bool m_isPreferredWidthDirty; // 0x410
	protected float m_preferredHeight; // 0x414
	protected float m_renderedHeight; // 0x418
	protected bool m_isPreferredHeightDirty; // 0x41C
	protected bool m_isCalculatingPreferredValues; // 0x41D
	protected int m_layoutPriority; // 0x420
	protected bool m_isCalculateSizeRequired; // 0x424
	protected bool m_isLayoutDirty; // 0x425
	protected bool m_isAwake; // 0x426
	internal bool m_isWaitingOnResourceLoad; // 0x427
	internal bool m_isInputParsingRequired; // 0x428
	internal TMP_Text.TextInputSources m_inputSource; // 0x42C
	protected float m_fontScale; // 0x430
	protected float m_fontScaleMultiplier; // 0x434
	protected char[] m_htmlTag; // 0x438
	protected RichTextTagAttribute[] m_xmlAttribute; // 0x440
	protected float[] m_attributeParameterValues; // 0x448
	protected float tag_LineIndent; // 0x450
	protected float tag_Indent; // 0x454
	protected TMP_RichTextTagStack<float> m_indentStack; // 0x458
	protected bool tag_NoParsing; // 0x470
	protected bool m_isParsingText; // 0x471
	protected Matrix4x4 m_FXMatrix; // 0x474
	protected bool m_isFXMatrixSet; // 0x4B4
	protected TMP_Text.UnicodeChar[] m_InternalParsingBuffer; // 0x4B8
	protected int m_InternalParsingBufferSize; // 0x4C0
	private TMP_CharacterInfo[] m_internalCharacterInfo; // 0x4C8
	protected char[] m_input_CharArray; // 0x4D0
	private int m_charArray_Length; // 0x4D8
	protected int m_totalCharacterCount; // 0x4DC
	protected WordWrapState m_SavedWordWrapState; // 0x4E0
	protected WordWrapState m_SavedLineState; // 0x7D0
	protected WordWrapState m_SavedEllipsisState; // 0xAC0
	protected WordWrapState m_SavedLastValidState; // 0xDB0
	protected WordWrapState m_SavedSoftLineBreakState; // 0x10A0
	protected int m_characterCount; // 0x1390
	protected int m_firstCharacterOfLine; // 0x1394
	protected int m_firstVisibleCharacterOfLine; // 0x1398
	protected int m_lastCharacterOfLine; // 0x139C
	protected int m_lastVisibleCharacterOfLine; // 0x13A0
	protected int m_lineNumber; // 0x13A4
	protected int m_lineVisibleCharacterCount; // 0x13A8
	protected int m_pageNumber; // 0x13AC
	protected float m_PageAscender; // 0x13B0
	protected float m_maxAscender; // 0x13B4
	protected float m_maxCapHeight; // 0x13B8
	protected float m_ElementAscender; // 0x13BC
	protected float m_ElementDescender; // 0x13C0
	protected float m_maxLineAscender; // 0x13C4
	protected float m_maxLineDescender; // 0x13C8
	protected float m_startOfLineAscender; // 0x13CC
	protected float m_lineOffset; // 0x13D0
	protected Extents m_meshExtents; // 0x13D4
	protected Color32 m_htmlColor; // 0x13E4
	protected TMP_RichTextTagStack<Color32> m_colorStack; // 0x13E8
	protected TMP_RichTextTagStack<Color32> m_underlineColorStack; // 0x1400
	protected TMP_RichTextTagStack<Color32> m_strikethroughColorStack; // 0x1418
	protected TMP_RichTextTagStack<HighlightState> m_HighlightStateStack; // 0x1430
	protected TMP_ColorGradient m_colorGradientPreset; // 0x1458
	protected TMP_RichTextTagStack<TMP_ColorGradient> m_colorGradientStack; // 0x1460
	protected bool m_colorGradientPresetIsTinted; // 0x1478
	protected float m_tabSpacing; // 0x147C
	protected float m_spacing; // 0x1480
	protected TMP_RichTextTagStack<int>[] m_TextStyleStacks; // 0x1488
	protected int m_TextStyleStackDepth; // 0x1490
	protected TMP_RichTextTagStack<int> m_ItalicAngleStack; // 0x1498
	protected int m_ItalicAngle; // 0x14B0
	protected TMP_RichTextTagStack<int> m_actionStack; // 0x14B8
	protected float m_padding; // 0x14D0
	protected float m_baselineOffset; // 0x14D4
	protected TMP_RichTextTagStack<float> m_baselineOffsetStack; // 0x14D8
	protected float m_xAdvance; // 0x14F0
	protected TMP_TextElementType m_textElementType; // 0x14F4
	protected TMP_TextElement m_cached_TextElement; // 0x14F8
	protected TMP_Text.SpecialCharacter m_Ellipsis; // 0x1500
	protected TMP_Text.SpecialCharacter m_Underline; // 0x1520
	protected TMP_SpriteAsset m_defaultSpriteAsset; // 0x1540
	protected TMP_SpriteAsset m_currentSpriteAsset; // 0x1548
	protected int m_spriteCount; // 0x1550
	protected int m_spriteIndex; // 0x1554
	protected int m_spriteAnimationID; // 0x1558
	internal bool ignoreClipping; // 0x155C
	protected bool m_ignoreActiveState; // 0x155D
	private readonly Decimal[] k_Power; // 0x1560
	protected static Vector2 k_LargePositiveVector2; // 0x18
	protected static Vector2 k_LargeNegativeVector2; // 0x20
	protected static float k_LargePositiveFloat; // 0x28
	protected static float k_LargeNegativeFloat; // 0x2C
	protected static int k_LargePositiveInt; // 0x30
	protected static int k_LargeNegativeInt; // 0x34

	// Properties
	public virtual string text { get; set; }
	public ITextPreprocessor textPreprocessor { get; set; }
	public bool isRightToLeftText { get; set; }
	public TMP_FontAsset font { get; set; }
	public virtual Material fontSharedMaterial { get; set; }
	public virtual Material[] fontSharedMaterials { get; set; }
	public Material fontMaterial { get; set; }
	public virtual Material[] fontMaterials { get; set; }
	public override Color color { get; set; }
	public float alpha { get; set; }
	public bool enableVertexGradient { get; set; }
	public VertexGradient colorGradient { get; set; }
	public TMP_ColorGradient colorGradientPreset { get; set; }
	public TMP_SpriteAsset spriteAsset { get; set; }
	public bool tintAllSprites { get; set; }
	public TMP_StyleSheet styleSheet { get; set; }
	public TMP_Style textStyle { get; set; }
	public bool overrideColorTags { get; set; }
	public Color32 faceColor { get; set; }
	public Color32 outlineColor { get; set; }
	public float outlineWidth { get; set; }
	public float fontSize { get; set; }
	public float fontScale { get; }
	public FontWeight fontWeight { get; set; }
	public float pixelsPerUnit { get; }
	public bool enableAutoSizing { get; set; }
	public float fontSizeMin { get; set; }
	public float fontSizeMax { get; set; }
	public FontStyles fontStyle { get; set; }
	public bool isUsingBold { get; }
	public HorizontalAlignmentOptions horizontalAlignment { get; set; }
	public VerticalAlignmentOptions verticalAlignment { get; set; }
	public TextAlignmentOptions alignment { get; set; }
	public float characterSpacing { get; set; }
	public float wordSpacing { get; set; }
	public float lineSpacing { get; set; }
	public float lineSpacingAdjustment { get; set; }
	public float paragraphSpacing { get; set; }
	public float characterWidthAdjustment { get; set; }
	public bool enableWordWrapping { get; set; }
	public float wordWrappingRatios { get; set; }
	public TextOverflowModes overflowMode { get; set; }
	public bool isTextOverflowing { get; }
	public int firstOverflowCharacterIndex { get; }
	public TMP_Text linkedTextComponent { get; set; }
	public bool isTextTruncated { get; }
	public bool enableKerning { get; set; }
	public bool extraPadding { get; set; }
	public bool richText { get; set; }
	public bool parseCtrlCharacters { get; set; }
	public bool isOverlay { get; set; }
	public bool isOrthographic { get; set; }
	public bool enableCulling { get; set; }
	public bool ignoreVisibility { get; set; }
	public TextureMappingOptions horizontalMapping { get; set; }
	public TextureMappingOptions verticalMapping { get; set; }
	public float mappingUvLineOffset { get; set; }
	public TextRenderFlags renderMode { get; set; }
	public VertexSortingOrder geometrySortingOrder { get; set; }
	public bool isTextObjectScaleStatic { get; set; }
	public bool vertexBufferAutoSizeReduction { get; set; }
	public int firstVisibleCharacter { get; set; }
	public int maxVisibleCharacters { get; set; }
	public int maxVisibleWords { get; set; }
	public int maxVisibleLines { get; set; }
	public bool useMaxVisibleDescender { get; set; }
	public int pageToDisplay { get; set; }
	public virtual Vector4 margin { get; set; }
	public TMP_TextInfo textInfo { get; }
	public bool havePropertiesChanged { get; set; }
	public bool isUsingLegacyAnimationComponent { get; set; }
	public Transform transform { get; }
	public RectTransform rectTransform { get; }
	public virtual bool autoSizeTextContainer { get; set; }
	public virtual Mesh mesh { get; }
	public bool isVolumetricText { get; set; }
	public Bounds bounds { get; }
	public Bounds textBounds { get; }
	protected TMP_SpriteAnimator spriteAnimator { get; }
	public float flexibleHeight { get; }
	public float flexibleWidth { get; }
	public float minWidth { get; }
	public float minHeight { get; }
	public float maxWidth { get; }
	public float maxHeight { get; }
	protected LayoutElement layoutElement { get; }
	public virtual float preferredWidth { get; }
	public virtual float preferredHeight { get; }
	public virtual float renderedWidth { get; }
	public virtual float renderedHeight { get; }
	public int layoutPriority { get; }

	// Methods
	// RVA: 0x170D70 Offset: 0x16F570 VA: 0x180170D70 Slot: 61
	public virtual string get_text() { }
	// RVA: 0x172FD0 Offset: 0x1717D0 VA: 0x180172FD0 Slot: 62
	public virtual void set_text(string value) { }
	// RVA: 0x170D90 Offset: 0x16F590 VA: 0x180170D90
	public ITextPreprocessor get_textPreprocessor() { }
	// RVA: 0x170DA0 Offset: 0x16F5A0 VA: 0x180170DA0
	public void set_textPreprocessor(ITextPreprocessor value) { }
	// RVA: 0x1730C0 Offset: 0x1718C0 VA: 0x1801730C0
	public bool get_isRightToLeftText() { }
	// RVA: 0x1730D0 Offset: 0x1718D0 VA: 0x1801730D0
	public void set_isRightToLeftText(bool value) { }
	// RVA: 0x171030 Offset: 0x16F830 VA: 0x180171030
	public TMP_FontAsset get_font() { }
	// RVA: 0x173130 Offset: 0x171930 VA: 0x180173130
	public void set_font(TMP_FontAsset value) { }
	// RVA: 0x173240 Offset: 0x171A40 VA: 0x180173240 Slot: 63
	public virtual Material get_fontSharedMaterial() { }
	// RVA: 0x173250 Offset: 0x171A50 VA: 0x180173250 Slot: 64
	public virtual void set_fontSharedMaterial(Material value) { }
	// RVA: 0x173350 Offset: 0x171B50 VA: 0x180173350 Slot: 65
	public virtual Material[] get_fontSharedMaterials() { }
	// RVA: 0x173370 Offset: 0x171B70 VA: 0x180173370 Slot: 66
	public virtual void set_fontSharedMaterials(Material[] value) { }
	// RVA: 0x1733D0 Offset: 0x171BD0 VA: 0x1801733D0
	public Material get_fontMaterial() { }
	// RVA: 0x1733F0 Offset: 0x171BF0 VA: 0x1801733F0
	public void set_fontMaterial(Material value) { }
	// RVA: 0x173530 Offset: 0x171D30 VA: 0x180173530 Slot: 67
	public virtual Material[] get_fontMaterials() { }
	// RVA: 0x173370 Offset: 0x171B70 VA: 0x180173370 Slot: 68
	public virtual void set_fontMaterials(Material[] value) { }
	// RVA: 0x173550 Offset: 0x171D50 VA: 0x180173550 Slot: 22
	public override Color get_color() { }
	// RVA: 0x173560 Offset: 0x171D60 VA: 0x180173560 Slot: 23
	public override void set_color(Color value) { }
	// RVA: 0x1735D0 Offset: 0x171DD0 VA: 0x1801735D0
	public float get_alpha() { }
	// RVA: 0x1735E0 Offset: 0x171DE0 VA: 0x1801735E0
	public void set_alpha(float value) { }
	// RVA: 0x173610 Offset: 0x171E10 VA: 0x180173610
	public bool get_enableVertexGradient() { }
	// RVA: 0x173620 Offset: 0x171E20 VA: 0x180173620
	public void set_enableVertexGradient(bool value) { }
	// RVA: 0x173650 Offset: 0x171E50 VA: 0x180173650
	public VertexGradient get_colorGradient() { }
	// RVA: 0x173680 Offset: 0x171E80 VA: 0x180173680
	public void set_colorGradient(VertexGradient value) { }
	// RVA: 0x1736D0 Offset: 0x171ED0 VA: 0x1801736D0
	public TMP_ColorGradient get_colorGradientPreset() { }
	// RVA: 0x1736E0 Offset: 0x171EE0 VA: 0x1801736E0
	public void set_colorGradientPreset(TMP_ColorGradient value) { }
	// RVA: 0x173700 Offset: 0x171F00 VA: 0x180173700
	public TMP_SpriteAsset get_spriteAsset() { }
	// RVA: 0x173710 Offset: 0x171F10 VA: 0x180173710
	public void set_spriteAsset(TMP_SpriteAsset value) { }
	// RVA: 0x173760 Offset: 0x171F60 VA: 0x180173760
	public bool get_tintAllSprites() { }
	// RVA: 0x173770 Offset: 0x171F70 VA: 0x180173770
	public void set_tintAllSprites(bool value) { }
	// RVA: 0x1737A0 Offset: 0x171FA0 VA: 0x1801737A0
	public TMP_StyleSheet get_styleSheet() { }
	// RVA: 0x1737B0 Offset: 0x171FB0 VA: 0x1801737B0
	public void set_styleSheet(TMP_StyleSheet value) { }
	// RVA: 0x173800 Offset: 0x172000 VA: 0x180173800
	public TMP_Style get_textStyle() { }
	// RVA: 0x1739D0 Offset: 0x1721D0 VA: 0x1801739D0
	public void set_textStyle(TMP_Style value) { }
	// RVA: 0x173A40 Offset: 0x172240 VA: 0x180173A40
	public bool get_overrideColorTags() { }
	// RVA: 0x173A50 Offset: 0x172250 VA: 0x180173A50
	public void set_overrideColorTags(bool value) { }
	// RVA: 0x173A80 Offset: 0x172280 VA: 0x180173A80
	public Color32 get_faceColor() { }
	// RVA: 0x173C00 Offset: 0x172400 VA: 0x180173C00
	public void set_faceColor(Color32 value) { }
	// RVA: 0x173CA0 Offset: 0x1724A0 VA: 0x180173CA0
	public Color32 get_outlineColor() { }
	// RVA: 0x173E20 Offset: 0x172620 VA: 0x180173E20
	public void set_outlineColor(Color32 value) { }
	// RVA: 0x173EB0 Offset: 0x1726B0 VA: 0x180173EB0
	public float get_outlineWidth() { }
	// RVA: 0x174010 Offset: 0x172810 VA: 0x180174010
	public void set_outlineWidth(float value) { }
	// RVA: 0x174070 Offset: 0x172870 VA: 0x180174070
	public float get_fontSize() { }
	// RVA: 0x174080 Offset: 0x172880 VA: 0x180174080
	public void set_fontSize(float value) { }
	// RVA: 0x1740F0 Offset: 0x1728F0 VA: 0x1801740F0
	public float get_fontScale() { }
	// RVA: 0x174100 Offset: 0x172900 VA: 0x180174100
	public FontWeight get_fontWeight() { }
	// RVA: 0x174110 Offset: 0x172910 VA: 0x180174110
	public void set_fontWeight(FontWeight value) { }
	// RVA: 0x174170 Offset: 0x172970 VA: 0x180174170
	public float get_pixelsPerUnit() { }
	// RVA: 0x174330 Offset: 0x172B30 VA: 0x180174330
	public bool get_enableAutoSizing() { }
	// RVA: 0x174340 Offset: 0x172B40 VA: 0x180174340
	public void set_enableAutoSizing(bool value) { }
	// RVA: 0x174390 Offset: 0x172B90 VA: 0x180174390
	public float get_fontSizeMin() { }
	// RVA: 0x1743A0 Offset: 0x172BA0 VA: 0x1801743A0
	public void set_fontSizeMin(float value) { }
	// RVA: 0x1743F0 Offset: 0x172BF0 VA: 0x1801743F0
	public float get_fontSizeMax() { }
	// RVA: 0x174400 Offset: 0x172C00 VA: 0x180174400
	public void set_fontSizeMax(float value) { }
	// RVA: 0x174450 Offset: 0x172C50 VA: 0x180174450
	public FontStyles get_fontStyle() { }
	// RVA: 0x174460 Offset: 0x172C60 VA: 0x180174460
	public void set_fontStyle(FontStyles value) { }
	// RVA: 0x1744C0 Offset: 0x172CC0 VA: 0x1801744C0
	public bool get_isUsingBold() { }
	// RVA: 0x1744D0 Offset: 0x172CD0 VA: 0x1801744D0
	public HorizontalAlignmentOptions get_horizontalAlignment() { }
	// RVA: 0x1744E0 Offset: 0x172CE0 VA: 0x1801744E0
	public void set_horizontalAlignment(HorizontalAlignmentOptions value) { }
	// RVA: 0x174510 Offset: 0x172D10 VA: 0x180174510
	public VerticalAlignmentOptions get_verticalAlignment() { }
	// RVA: 0x174520 Offset: 0x172D20 VA: 0x180174520
	public void set_verticalAlignment(VerticalAlignmentOptions value) { }
	// RVA: 0x174550 Offset: 0x172D50 VA: 0x180174550
	public TextAlignmentOptions get_alignment() { }
	// RVA: 0x174560 Offset: 0x172D60 VA: 0x180174560
	public void set_alignment(TextAlignmentOptions value) { }
	// RVA: 0x1745A0 Offset: 0x172DA0 VA: 0x1801745A0
	public float get_characterSpacing() { }
	// RVA: 0x1745B0 Offset: 0x172DB0 VA: 0x1801745B0
	public void set_characterSpacing(float value) { }
	// RVA: 0x174610 Offset: 0x172E10 VA: 0x180174610
	public float get_wordSpacing() { }
	// RVA: 0x174620 Offset: 0x172E20 VA: 0x180174620
	public void set_wordSpacing(float value) { }
	// RVA: 0x174680 Offset: 0x172E80 VA: 0x180174680
	public float get_lineSpacing() { }
	// RVA: 0x174690 Offset: 0x172E90 VA: 0x180174690
	public void set_lineSpacing(float value) { }
	// RVA: 0x1746F0 Offset: 0x172EF0 VA: 0x1801746F0
	public float get_lineSpacingAdjustment() { }
	// RVA: 0x174700 Offset: 0x172F00 VA: 0x180174700
	public void set_lineSpacingAdjustment(float value) { }
	// RVA: 0x174760 Offset: 0x172F60 VA: 0x180174760
	public float get_paragraphSpacing() { }
	// RVA: 0x174770 Offset: 0x172F70 VA: 0x180174770
	public void set_paragraphSpacing(float value) { }
	// RVA: 0x1747D0 Offset: 0x172FD0 VA: 0x1801747D0
	public float get_characterWidthAdjustment() { }
	// RVA: 0x1747E0 Offset: 0x172FE0 VA: 0x1801747E0
	public void set_characterWidthAdjustment(float value) { }
	// RVA: 0x174840 Offset: 0x173040 VA: 0x180174840
	public bool get_enableWordWrapping() { }
	// RVA: 0x174850 Offset: 0x173050 VA: 0x180174850
	public void set_enableWordWrapping(bool value) { }
	// RVA: 0x1748B0 Offset: 0x1730B0 VA: 0x1801748B0
	public float get_wordWrappingRatios() { }
	// RVA: 0x1748C0 Offset: 0x1730C0 VA: 0x1801748C0
	public void set_wordWrappingRatios(float value) { }
	// RVA: 0x174920 Offset: 0x173120 VA: 0x180174920
	public TextOverflowModes get_overflowMode() { }
	// RVA: 0x174930 Offset: 0x173130 VA: 0x180174930
	public void set_overflowMode(TextOverflowModes value) { }
	// RVA: 0x174990 Offset: 0x173190 VA: 0x180174990
	public bool get_isTextOverflowing() { }
	// RVA: 0x1749A0 Offset: 0x1731A0 VA: 0x1801749A0
	public int get_firstOverflowCharacterIndex() { }
	// RVA: 0x1749B0 Offset: 0x1731B0 VA: 0x1801749B0
	public TMP_Text get_linkedTextComponent() { }
	// RVA: 0x1749C0 Offset: 0x1731C0 VA: 0x1801749C0
	public void set_linkedTextComponent(TMP_Text value) { }
	// RVA: 0x174AF0 Offset: 0x1732F0 VA: 0x180174AF0
	public bool get_isTextTruncated() { }
	// RVA: 0x174B00 Offset: 0x173300 VA: 0x180174B00
	public bool get_enableKerning() { }
	// RVA: 0x174B10 Offset: 0x173310 VA: 0x180174B10
	public void set_enableKerning(bool value) { }
	// RVA: 0x174B70 Offset: 0x173370 VA: 0x180174B70
	public bool get_extraPadding() { }
	// RVA: 0x174B80 Offset: 0x173380 VA: 0x180174B80
	public void set_extraPadding(bool value) { }
	// RVA: 0x174BD0 Offset: 0x1733D0 VA: 0x180174BD0
	public bool get_richText() { }
	// RVA: 0x174BE0 Offset: 0x1733E0 VA: 0x180174BE0
	public void set_richText(bool value) { }
	// RVA: 0x174C40 Offset: 0x173440 VA: 0x180174C40
	public bool get_parseCtrlCharacters() { }
	// RVA: 0x174C50 Offset: 0x173450 VA: 0x180174C50
	public void set_parseCtrlCharacters(bool value) { }
	// RVA: 0x174CB0 Offset: 0x1734B0 VA: 0x180174CB0
	public bool get_isOverlay() { }
	// RVA: 0x174CC0 Offset: 0x1734C0 VA: 0x180174CC0
	public void set_isOverlay(bool value) { }
	// RVA: 0x174D10 Offset: 0x173510 VA: 0x180174D10
	public bool get_isOrthographic() { }
	// RVA: 0x174D20 Offset: 0x173520 VA: 0x180174D20
	public void set_isOrthographic(bool value) { }
	// RVA: 0x174D50 Offset: 0x173550 VA: 0x180174D50
	public bool get_enableCulling() { }
	// RVA: 0x174D60 Offset: 0x173560 VA: 0x180174D60
	public void set_enableCulling(bool value) { }
	// RVA: 0x174DA0 Offset: 0x1735A0 VA: 0x180174DA0
	public bool get_ignoreVisibility() { }
	// RVA: 0x174DB0 Offset: 0x1735B0 VA: 0x180174DB0
	public void set_ignoreVisibility(bool value) { }
	// RVA: 0x174DD0 Offset: 0x1735D0 VA: 0x180174DD0
	public TextureMappingOptions get_horizontalMapping() { }
	// RVA: 0x174DE0 Offset: 0x1735E0 VA: 0x180174DE0
	public void set_horizontalMapping(TextureMappingOptions value) { }
	// RVA: 0x174E10 Offset: 0x173610 VA: 0x180174E10
	public TextureMappingOptions get_verticalMapping() { }
	// RVA: 0x174E20 Offset: 0x173620 VA: 0x180174E20
	public void set_verticalMapping(TextureMappingOptions value) { }
	// RVA: 0x174E50 Offset: 0x173650 VA: 0x180174E50
	public float get_mappingUvLineOffset() { }
	// RVA: 0x174E60 Offset: 0x173660 VA: 0x180174E60
	public void set_mappingUvLineOffset(float value) { }
	// RVA: 0x174E90 Offset: 0x173690 VA: 0x180174E90
	public TextRenderFlags get_renderMode() { }
	// RVA: 0x174EA0 Offset: 0x1736A0 VA: 0x180174EA0
	public void set_renderMode(TextRenderFlags value) { }
	// RVA: 0x174EC0 Offset: 0x1736C0 VA: 0x180174EC0
	public VertexSortingOrder get_geometrySortingOrder() { }
	// RVA: 0x174ED0 Offset: 0x1736D0 VA: 0x180174ED0
	public void set_geometrySortingOrder(VertexSortingOrder value) { }
	// RVA: 0x174EF0 Offset: 0x1736F0 VA: 0x180174EF0
	public bool get_isTextObjectScaleStatic() { }
	// RVA: 0x174F00 Offset: 0x173700 VA: 0x180174F00
	public void set_isTextObjectScaleStatic(bool value) { }
	// RVA: 0x174F50 Offset: 0x173750 VA: 0x180174F50
	public bool get_vertexBufferAutoSizeReduction() { }
	// RVA: 0x174F60 Offset: 0x173760 VA: 0x180174F60
	public void set_vertexBufferAutoSizeReduction(bool value) { }
	// RVA: 0x174F80 Offset: 0x173780 VA: 0x180174F80
	public int get_firstVisibleCharacter() { }
	// RVA: 0x174F90 Offset: 0x173790 VA: 0x180174F90
	public void set_firstVisibleCharacter(int value) { }
	// RVA: 0x174FC0 Offset: 0x1737C0 VA: 0x180174FC0
	public int get_maxVisibleCharacters() { }
	// RVA: 0x174FD0 Offset: 0x1737D0 VA: 0x180174FD0
	public void set_maxVisibleCharacters(int value) { }
	// RVA: 0x175000 Offset: 0x173800 VA: 0x180175000
	public int get_maxVisibleWords() { }
	// RVA: 0x175010 Offset: 0x173810 VA: 0x180175010
	public void set_maxVisibleWords(int value) { }
	// RVA: 0x175040 Offset: 0x173840 VA: 0x180175040
	public int get_maxVisibleLines() { }
	// RVA: 0x175050 Offset: 0x173850 VA: 0x180175050
	public void set_maxVisibleLines(int value) { }
	// RVA: 0x175080 Offset: 0x173880 VA: 0x180175080
	public bool get_useMaxVisibleDescender() { }
	// RVA: 0x175090 Offset: 0x173890 VA: 0x180175090
	public void set_useMaxVisibleDescender(bool value) { }
	// RVA: 0x1750C0 Offset: 0x1738C0 VA: 0x1801750C0
	public int get_pageToDisplay() { }
	// RVA: 0x1750D0 Offset: 0x1738D0 VA: 0x1801750D0
	public void set_pageToDisplay(int value) { }
	// RVA: 0x175100 Offset: 0x173900 VA: 0x180175100 Slot: 69
	public virtual Vector4 get_margin() { }
	// RVA: 0x175110 Offset: 0x173910 VA: 0x180175110 Slot: 70
	public virtual void set_margin(Vector4 value) { }
	// RVA: 0x175250 Offset: 0x173A50 VA: 0x180175250
	public TMP_TextInfo get_textInfo() { }
	// RVA: 0x175260 Offset: 0x173A60 VA: 0x180175260
	public bool get_havePropertiesChanged() { }
	// RVA: 0x175270 Offset: 0x173A70 VA: 0x180175270
	public void set_havePropertiesChanged(bool value) { }
	// RVA: 0x1752A0 Offset: 0x173AA0 VA: 0x1801752A0
	public bool get_isUsingLegacyAnimationComponent() { }
	// RVA: 0x1752B0 Offset: 0x173AB0 VA: 0x1801752B0
	public void set_isUsingLegacyAnimationComponent(bool value) { }
	// RVA: 0x1752C0 Offset: 0x173AC0 VA: 0x1801752C0
	public Transform get_transform() { }
	// RVA: 0x175390 Offset: 0x173B90 VA: 0x180175390
	public RectTransform get_rectTransform() { }
	// RVA: 0x175460 Offset: 0x173C60 VA: 0x180175460 Slot: 71
	public virtual bool get_autoSizeTextContainer() { }
	// RVA: 0x175470 Offset: 0x173C70 VA: 0x180175470 Slot: 72
	public virtual void set_autoSizeTextContainer(bool value) { }
	// RVA: 0x175480 Offset: 0x173C80 VA: 0x180175480 Slot: 73
	public virtual Mesh get_mesh() { }
	// RVA: 0x175490 Offset: 0x173C90 VA: 0x180175490
	public bool get_isVolumetricText() { }
	// RVA: 0x1754A0 Offset: 0x173CA0 VA: 0x1801754A0
	public void set_isVolumetricText(bool value) { }
	// RVA: 0x175590 Offset: 0x173D90 VA: 0x180175590
	public Bounds get_bounds() { }
	// RVA: 0x1756A0 Offset: 0x173EA0 VA: 0x1801756A0
	public Bounds get_textBounds() { }
	// RVA: 0x175700 Offset: 0x173F00 VA: 0x180175700
	public static void add_onFontAssetRequest(Func<int, string, TMP_FontAsset> value) { }
	// RVA: 0x175840 Offset: 0x174040 VA: 0x180175840
	public static void remove_onFontAssetRequest(Func<int, string, TMP_FontAsset> value) { }
	// RVA: 0x175980 Offset: 0x174180 VA: 0x180175980
	public static void add_onSpriteAssetRequest(Func<int, string, TMP_SpriteAsset> value) { }
	// RVA: 0x175AC0 Offset: 0x1742C0 VA: 0x180175AC0
	public static void remove_onSpriteAssetRequest(Func<int, string, TMP_SpriteAsset> value) { }
	// RVA: 0x175C00 Offset: 0x174400 VA: 0x180175C00
	protected TMP_SpriteAnimator get_spriteAnimator() { }
	// RVA: 0x175D60 Offset: 0x174560 VA: 0x180175D60 Slot: 74
	public float get_flexibleHeight() { }
	// RVA: 0x175D70 Offset: 0x174570 VA: 0x180175D70 Slot: 75
	public float get_flexibleWidth() { }
	// RVA: 0x175D80 Offset: 0x174580 VA: 0x180175D80 Slot: 76
	public float get_minWidth() { }
	// RVA: 0x175D90 Offset: 0x174590 VA: 0x180175D90 Slot: 77
	public float get_minHeight() { }
	// RVA: 0x175DA0 Offset: 0x1745A0 VA: 0x180175DA0
	public float get_maxWidth() { }
	// RVA: 0x175DB0 Offset: 0x1745B0 VA: 0x180175DB0
	public float get_maxHeight() { }
	// RVA: 0x175DC0 Offset: 0x1745C0 VA: 0x180175DC0
	protected LayoutElement get_layoutElement() { }
	// RVA: 0x175E90 Offset: 0x174690 VA: 0x180175E90 Slot: 78
	public virtual float get_preferredWidth() { }
	// RVA: 0x175ED0 Offset: 0x1746D0 VA: 0x180175ED0 Slot: 79
	public virtual float get_preferredHeight() { }
	// RVA: 0x175F10 Offset: 0x174710 VA: 0x180175F10 Slot: 80
	public virtual float get_renderedWidth() { }
	// RVA: 0x175F30 Offset: 0x174730 VA: 0x180175F30 Slot: 81
	public virtual float get_renderedHeight() { }
	// RVA: 0x175F50 Offset: 0x174750 VA: 0x180175F50 Slot: 82
	public int get_layoutPriority() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 83
	protected virtual void LoadFontAsset() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 84
	protected virtual void SetSharedMaterial(Material mat) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 85
	protected virtual Material GetMaterial(Material mat) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 86
	protected virtual Material[] GetSharedMaterials() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 87
	protected virtual void SetSharedMaterials(Material[] materials) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 88
	protected virtual Material[] GetMaterials(Material[] mats) { }
	// RVA: 0x175F70 Offset: 0x174770 VA: 0x180175F70 Slot: 89
	protected virtual Material CreateMaterialInstance(Material source) { }
	// RVA: 0x1760D0 Offset: 0x1748D0 VA: 0x1801760D0
	protected void SetVertexColorGradient(TMP_ColorGradient gradient) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 90
	protected virtual void SetFaceColor(Color32 color) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 91
	protected virtual void SetOutlineColor(Color32 color) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 92
	protected virtual void SetOutlineThickness(float thickness) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 93
	protected virtual void SetShaderDepth() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 94
	protected virtual void SetCulling() { }
	// RVA: 0x1761C0 Offset: 0x1749C0 VA: 0x1801761C0 Slot: 95
	protected virtual float GetPaddingForMaterial() { }
	// RVA: 0x176380 Offset: 0x174B80 VA: 0x180176380 Slot: 96
	protected virtual float GetPaddingForMaterial(Material mat) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 97
	protected virtual Vector3[] GetTextContainerLocalCorners() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 98
	public virtual void ForceMeshUpdate(bool ignoreActiveState = False, bool forceTextReparsing = False) { }
	// RVA: 0x176510 Offset: 0x174D10 VA: 0x180176510
	internal void SetTextInternal(string text) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 99
	public virtual void UpdateGeometry(Mesh mesh, int index) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 100
	public virtual void UpdateVertexData(TMP_VertexDataUpdateFlags flags) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 101
	public virtual void UpdateVertexData() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 102
	public virtual void UpdateMeshPadding() { }
	// RVA: 0x176560 Offset: 0x174D60 VA: 0x180176560 Slot: 46
	public override void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) { }
	// RVA: 0x176610 Offset: 0x174E10 VA: 0x180176610 Slot: 48
	public override void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 103
	protected virtual void InternalCrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 104
	protected virtual void InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) { }
	// RVA: 0x176740 Offset: 0x174F40 VA: 0x180176740
	protected void ParseInputText() { }
	// RVA: 0x176850 Offset: 0x175050 VA: 0x180176850
	public void SetText(string text, bool syncTextInputBox = True) { }
	// RVA: 0x176870 Offset: 0x175070 VA: 0x180176870
	public void SetText(string text, float arg0) { }
	// RVA: 0x1768B0 Offset: 0x1750B0 VA: 0x1801768B0
	public void SetText(string text, float arg0, float arg1) { }
	// RVA: 0x1768F0 Offset: 0x1750F0 VA: 0x1801768F0
	public void SetText(string text, float arg0, float arg1, float arg2) { }
	// RVA: 0x176940 Offset: 0x175140 VA: 0x180176940
	public void SetText(string text, float arg0, float arg1, float arg2, float arg3) { }
	// RVA: 0x176990 Offset: 0x175190 VA: 0x180176990
	public void SetText(string text, float arg0, float arg1, float arg2, float arg3, float arg4) { }
	// RVA: 0x1769F0 Offset: 0x1751F0 VA: 0x1801769F0
	public void SetText(string text, float arg0, float arg1, float arg2, float arg3, float arg4, float arg5) { }
	// RVA: 0x176A50 Offset: 0x175250 VA: 0x180176A50
	public void SetText(string text, float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6) { }
	// RVA: 0x176AC0 Offset: 0x1752C0 VA: 0x180176AC0
	public void SetText(string text, float arg0, float arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7) { }
	// RVA: 0x176DB0 Offset: 0x1755B0 VA: 0x180176DB0
	public void SetText(StringBuilder text) { }
	// RVA: 0x176E20 Offset: 0x175620 VA: 0x180176E20
	public void SetText(char[] text) { }
	// RVA: 0x176E30 Offset: 0x175630 VA: 0x180176E30
	public void SetText(char[] text, int start, int length) { }
	// RVA: 0x176E40 Offset: 0x175640 VA: 0x180176E40
	public void SetCharArray(char[] sourceText) { }
	// RVA: 0x177640 Offset: 0x175E40 VA: 0x180177640
	public void SetCharArray(char[] sourceText, int start, int length) { }
	// RVA: 0x177EE0 Offset: 0x1766E0 VA: 0x180177EE0
	public void SetCharArray(int[] sourceText, int start, int length) { }
	// RVA: 0x1786A0 Offset: 0x176EA0 VA: 0x1801786A0
	protected int CharArrayToInternalParsingBuffer(char[] sourceText, ref TMP_Text.UnicodeChar[] internalParsingArray) { }
	// RVA: 0x178E30 Offset: 0x177630 VA: 0x180178E30
	protected int StringToInternalParsingBuffer(string sourceText, ref TMP_Text.UnicodeChar[] internalParsingArray) { }
	// RVA: 0x179DF0 Offset: 0x1785F0 VA: 0x180179DF0
	protected int StringBuilderToInternalParsingBuffer(StringBuilder sourceText, ref TMP_Text.UnicodeChar[] internalParsingArray) { }
	// RVA: 0x17A960 Offset: 0x179160 VA: 0x18017A960
	private bool ReplaceOpeningStyleTag(ref string sourceText, int srcIndex, out int srcOffset, ref TMP_Text.UnicodeChar[] charBuffer, ref int writeIndex) { }
	// RVA: 0x17AF40 Offset: 0x179740 VA: 0x18017AF40
	private bool ReplaceOpeningStyleTag(ref int[] sourceText, int srcIndex, out int srcOffset, ref TMP_Text.UnicodeChar[] charBuffer, ref int writeIndex) { }
	// RVA: 0x17B500 Offset: 0x179D00 VA: 0x18017B500
	private bool ReplaceOpeningStyleTag(ref char[] sourceText, int srcIndex, out int srcOffset, ref TMP_Text.UnicodeChar[] charBuffer, ref int writeIndex) { }
	// RVA: 0x17BAD0 Offset: 0x17A2D0 VA: 0x18017BAD0
	private bool ReplaceOpeningStyleTag(ref StringBuilder sourceText, int srcIndex, out int srcOffset, ref TMP_Text.UnicodeChar[] charBuffer, ref int writeIndex) { }
	// RVA: 0x17C0C0 Offset: 0x17A8C0 VA: 0x18017C0C0
	private bool ReplaceClosingStyleTag(ref string sourceText, int srcIndex, ref TMP_Text.UnicodeChar[] charBuffer, ref int writeIndex) { }
	// RVA: 0x17C590 Offset: 0x17AD90 VA: 0x18017C590
	private bool ReplaceClosingStyleTag(ref int[] sourceText, int srcIndex, ref TMP_Text.UnicodeChar[] charBuffer, ref int writeIndex) { }
	// RVA: 0x17CA60 Offset: 0x17B260 VA: 0x18017CA60
	private bool ReplaceClosingStyleTag(ref char[] sourceText, int srcIndex, ref TMP_Text.UnicodeChar[] charBuffer, ref int writeIndex) { }
	// RVA: 0x17CF30 Offset: 0x17B730 VA: 0x18017CF30
	private bool ReplaceClosingStyleTag(ref StringBuilder sourceText, int srcIndex, ref TMP_Text.UnicodeChar[] charBuffer, ref int writeIndex) { }
	// RVA: 0x17D400 Offset: 0x17BC00 VA: 0x18017D400
	private TMP_Style GetStyle(int hashCode) { }
	// RVA: 0x17D550 Offset: 0x17BD50 VA: 0x18017D550
	private bool InsertOpeningStyleTag(TMP_Style style, int srcIndex, ref TMP_Text.UnicodeChar[] charBuffer, ref int writeIndex) { }
	// RVA: 0x17D9E0 Offset: 0x17C1E0 VA: 0x18017D9E0
	private bool InsertClosingStyleTag(ref TMP_Text.UnicodeChar[] charBuffer, ref int writeIndex) { }
	// RVA: 0x17DEA0 Offset: 0x17C6A0 VA: 0x18017DEA0
	private bool IsTagName(ref string text, string tag, int index) { }
	// RVA: 0x17DFC0 Offset: 0x17C7C0 VA: 0x18017DFC0
	private bool IsTagName(ref char[] text, string tag, int index) { }
	// RVA: 0x17E100 Offset: 0x17C900 VA: 0x18017E100
	private bool IsTagName(ref int[] text, string tag, int index) { }
	// RVA: 0x17E240 Offset: 0x17CA40 VA: 0x18017E240
	private bool IsTagName(ref StringBuilder text, string tag, int index) { }
	// RVA: 0x17E370 Offset: 0x17CB70 VA: 0x18017E370
	private int GetTagHashCode(ref string text, int index, out int closeIndex) { }
	// RVA: 0x17E4C0 Offset: 0x17CCC0 VA: 0x18017E4C0
	private int GetTagHashCode(ref char[] text, int index, out int closeIndex) { }
	// RVA: 0x17E5F0 Offset: 0x17CDF0 VA: 0x18017E5F0
	private int GetTagHashCode(ref int[] text, int index, out int closeIndex) { }
	// RVA: 0x17E720 Offset: 0x17CF20 VA: 0x18017E720
	private int GetTagHashCode(ref StringBuilder text, int index, out int closeIndex) { }
	// RVA: 0x429F20 Offset: 0x428720 VA: 0x180429F20
	private void ResizeInternalArray(ref T[] array) { }
	// RVA: 0x42A140 Offset: 0x428940 VA: 0x18042A140
	private void ResizeInternalArray(ref T[] array, int size) { }
	// RVA: 0x17E880 Offset: 0x17D080 VA: 0x18017E880
	private void AddFloatToCharArray(float value, int padding, int precision, ref int writeIndex) { }
	// RVA: 0x17F2C0 Offset: 0x17DAC0 VA: 0x18017F2C0
	private void AddIntegerToCharArray(double number, int padding, ref int writeIndex) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 105
	protected virtual int SetArraySizes(TMP_Text.UnicodeChar[] unicodeChars) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 106
	protected virtual void GenerateTextMesh() { }
	// RVA: 0x17F460 Offset: 0x17DC60 VA: 0x18017F460
	public Vector2 GetPreferredValues() { }
	// RVA: 0x17F4C0 Offset: 0x17DCC0 VA: 0x18017F4C0
	public Vector2 GetPreferredValues(float width, float height) { }
	// RVA: 0x17F550 Offset: 0x17DD50 VA: 0x18017F550
	public Vector2 GetPreferredValues(string text) { }
	// RVA: 0x17F690 Offset: 0x17DE90 VA: 0x18017F690
	public Vector2 GetPreferredValues(string text, float width, float height) { }
	// RVA: 0x17F740 Offset: 0x17DF40 VA: 0x18017F740
	protected float GetPreferredWidth() { }
	// RVA: 0x17F900 Offset: 0x17E100 VA: 0x18017F900
	private float GetPreferredWidth(Vector2 margin) { }
	// RVA: 0x17F990 Offset: 0x17E190 VA: 0x18017F990
	protected float GetPreferredHeight() { }
	// RVA: 0x17FBE0 Offset: 0x17E3E0 VA: 0x18017FBE0
	private float GetPreferredHeight(Vector2 margin) { }
	// RVA: 0x17FCB0 Offset: 0x17E4B0 VA: 0x18017FCB0
	public Vector2 GetRenderedValues() { }
	// RVA: 0x17FD90 Offset: 0x17E590 VA: 0x18017FD90
	public Vector2 GetRenderedValues(bool onlyVisibleCharacters) { }
	// RVA: 0x175F10 Offset: 0x174710 VA: 0x180175F10
	private float GetRenderedWidth() { }
	// RVA: 0x17FE80 Offset: 0x17E680 VA: 0x18017FE80
	protected float GetRenderedWidth(bool onlyVisibleCharacters) { }
	// RVA: 0x175F30 Offset: 0x174730 VA: 0x180175F30
	private float GetRenderedHeight() { }
	// RVA: 0x17FEA0 Offset: 0x17E6A0 VA: 0x18017FEA0
	protected float GetRenderedHeight(bool onlyVisibleCharacters) { }
	// RVA: 0x17FEC0 Offset: 0x17E6C0 VA: 0x18017FEC0 Slot: 107
	protected virtual Vector2 CalculatePreferredValues(ref float fontSize, Vector2 marginSize, bool isTextAutoSizingEnabled, bool isWordWrappingEnabled) { }
	// RVA: 0x183D90 Offset: 0x182590 VA: 0x180183D90 Slot: 108
	protected virtual Bounds GetCompoundBounds() { }
	// RVA: 0x183DA0 Offset: 0x1825A0 VA: 0x180183DA0
	protected Bounds GetTextBounds() { }
	// RVA: 0x184170 Offset: 0x182970 VA: 0x180184170
	protected Bounds GetTextBounds(bool onlyVisibleCharacters) { }
	// RVA: 0x1845D0 Offset: 0x182DD0 VA: 0x1801845D0
	protected void AdjustLineOffset(int startIndex, int endIndex, float offset) { }
	// RVA: 0x184BF0 Offset: 0x1833F0 VA: 0x180184BF0
	protected void ResizeLineExtents(int size) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 109
	public virtual TMP_TextInfo GetTextInfo(string text) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 110
	public virtual void ComputeMarginSize() { }
	// RVA: 0x184EF0 Offset: 0x1836F0 VA: 0x180184EF0
	protected void InsertNewLine(int i, float baseScale, float currentEmScale, float characterSpacingAdjustment, float width, float lineGap, ref bool isMaxVisibleDescenderSet, ref float maxVisibleDescender) { }
	// RVA: 0x185830 Offset: 0x184030 VA: 0x180185830
	protected void SaveWordWrappingState(ref WordWrapState state, int index, int count) { }
	// RVA: 0x185C60 Offset: 0x184460 VA: 0x180185C60
	protected int RestoreWordWrappingState(ref WordWrapState state) { }
	// RVA: 0x1860E0 Offset: 0x1848E0 VA: 0x1801860E0 Slot: 111
	protected virtual void SaveGlyphVertexInfo(float padding, float style_padding, Color32 vertexColor) { }
	// RVA: 0x187540 Offset: 0x185D40 VA: 0x180187540 Slot: 112
	protected virtual void SaveSpriteVertexInfo(Color32 vertexColor) { }
	// RVA: 0x187F10 Offset: 0x186710 VA: 0x180187F10 Slot: 113
	protected virtual void FillCharacterVertexBuffers(int i, int index_X4) { }
	// RVA: 0x188A70 Offset: 0x187270 VA: 0x180188A70 Slot: 114
	protected virtual void FillCharacterVertexBuffers(int i, int index_X4, bool isVolumetric) { }
	// RVA: 0x18A050 Offset: 0x188850 VA: 0x18018A050 Slot: 115
	protected virtual void FillSpriteVertexBuffers(int i, int index_X4) { }
	// RVA: 0x18ABB0 Offset: 0x1893B0 VA: 0x18018ABB0 Slot: 116
	protected virtual void DrawUnderlineMesh(Vector3 start, Vector3 end, ref int index, float startScale, float endScale, float maxScale, float sdfScale, Color32 underlineColor) { }
	// RVA: 0x18BE30 Offset: 0x18A630 VA: 0x18018BE30 Slot: 117
	protected virtual void DrawTextHighlight(Vector3 start, Vector3 end, ref int index, Color32 highlightColor) { }
	// RVA: 0x18C4A0 Offset: 0x18ACA0 VA: 0x18018C4A0
	protected void LoadDefaultSettings() { }
	// RVA: 0x18CA60 Offset: 0x18B260 VA: 0x18018CA60
	protected void GetSpecialCharacters(TMP_FontAsset fontAsset) { }
	// RVA: 0x18CA90 Offset: 0x18B290 VA: 0x18018CA90
	protected void GetEllipsisSpecialCharacter(TMP_FontAsset fontAsset) { }
	// RVA: 0x18CE60 Offset: 0x18B660 VA: 0x18018CE60
	protected void GetUnderlineSpecialCharacter(TMP_FontAsset fontAsset) { }
	// RVA: 0x18D090 Offset: 0x18B890 VA: 0x18018D090
	protected void ReplaceTagWithCharacter(int[] chars, int insertionIndex, int tagLength, char c) { }
	// RVA: 0x18D110 Offset: 0x18B910 VA: 0x18018D110
	protected TMP_FontAsset GetFontAssetForWeight(int fontWeight) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 118
	protected virtual void SetActiveSubMeshes(bool state) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 119
	protected virtual void ClearSubMeshObjects() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 120
	public virtual void ClearMesh() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 121
	public virtual void ClearMesh(bool uploadGeometry) { }
	// RVA: 0x18D1D0 Offset: 0x18B9D0 VA: 0x18018D1D0 Slot: 122
	public virtual string GetParsedText() { }
	// RVA: 0x18D310 Offset: 0x18BB10 VA: 0x18018D310
	internal bool IsSelfOrLinkedAncestor(TMP_Text targetTextComponent) { }
	// RVA: 0x18D450 Offset: 0x18BC50 VA: 0x18018D450
	internal void ReleaseLinkedTextComponent(TMP_Text targetTextComponent) { }
	// RVA: 0x18D5C0 Offset: 0x18BDC0 VA: 0x18018D5C0
	protected Vector2 PackUV(float x, float y, float scale) { }
	// RVA: 0x18D600 Offset: 0x18BE00 VA: 0x18018D600
	protected float PackUV(float x, float y) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 123
	internal virtual void InternalUpdate() { }
	// RVA: 0x18D640 Offset: 0x18BE40 VA: 0x18018D640
	protected int HexToInt(char hex) { }
	// RVA: 0x18D750 Offset: 0x18BF50 VA: 0x18018D750
	protected int GetUTF16(string text, int i) { }
	// RVA: 0x18D830 Offset: 0x18C030 VA: 0x18018D830
	protected int GetUTF16(int[] text, int i) { }
	// RVA: 0x18D950 Offset: 0x18C150 VA: 0x18018D950
	protected int GetUTF16(StringBuilder text, int i) { }
	// RVA: 0x18DA30 Offset: 0x18C230 VA: 0x18018DA30
	protected int GetUTF32(string text, int i) { }
	// RVA: 0x18DBC0 Offset: 0x18C3C0 VA: 0x18018DBC0
	protected int GetUTF32(int[] text, int i) { }
	// RVA: 0x18DDE0 Offset: 0x18C5E0 VA: 0x18018DDE0
	protected int GetUTF32(StringBuilder text, int i) { }
	// RVA: 0x18DF70 Offset: 0x18C770 VA: 0x18018DF70
	protected Color32 HexCharsToColor(char[] hexChars, int tagCount) { }
	// RVA: 0x18E7F0 Offset: 0x18CFF0 VA: 0x18018E7F0
	protected Color32 HexCharsToColor(char[] hexChars, int startIndex, int length) { }
	// RVA: 0x18EC10 Offset: 0x18D410 VA: 0x18018EC10
	private int GetAttributeParameters(char[] chars, int startIndex, int length, ref float[] parameters) { }
	// RVA: 0x18ECF0 Offset: 0x18D4F0 VA: 0x18018ECF0
	protected float ConvertToFloat(char[] chars, int startIndex, int length) { }
	// RVA: 0x18ED20 Offset: 0x18D520 VA: 0x18018ED20
	protected float ConvertToFloat(char[] chars, int startIndex, int length, out int lastIndex) { }
	// RVA: 0x18EEE0 Offset: 0x18D6E0 VA: 0x18018EEE0
	protected bool ValidateHtmlTag(TMP_Text.UnicodeChar[] chars, int startIndex, out int endIndex) { }
	// RVA: 0x196CD0 Offset: 0x1954D0 VA: 0x180196CD0
	protected void .ctor() { }
	// RVA: 0x1979B0 Offset: 0x1961B0 VA: 0x1801979B0
	private static void .cctor() { }
}

// Namespace: 
protected struct TMP_Text.CharacterSubstitution // TypeDefIndex: 2863
{
	// Fields
	public int index; // 0x0
	public uint unicode; // 0x4

	// Methods
	// RVA: 0x16B00 Offset: 0x15F00 VA: 0x180016B00
	public void .ctor(int index, uint unicode) { }
}

// Namespace: 
internal enum TMP_Text.TextInputSources // TypeDefIndex: 2864
{
	// Fields
	public int value__; // 0x0
	public const TMP_Text.TextInputSources Text = 0; // 0x0
	public const TMP_Text.TextInputSources SetText = 1; // 0x0
	public const TMP_Text.TextInputSources SetCharArray = 2; // 0x0
	public const TMP_Text.TextInputSources String = 3; // 0x0
}

// Namespace: 
protected struct TMP_Text.UnicodeChar // TypeDefIndex: 2865
{
	// Fields
	public int unicode; // 0x0
	public int stringIndex; // 0x4
	public int length; // 0x8
}

// Namespace: 
protected struct TMP_Text.SpecialCharacter // TypeDefIndex: 2866
{
	// Fields
	public TMP_Character character; // 0x0
	public TMP_FontAsset fontAsset; // 0x8
	public Material material; // 0x10
	public int materialIndex; // 0x18
}

// Namespace: TMPro
public enum TextElementType // TypeDefIndex: 2867
{
	// Fields
	public byte value__; // 0x0
	public const TextElementType Character = 1; // 0x0
	public const TextElementType Sprite = 2; // 0x0
}

// Namespace: TMPro
[Serializable]
public class TMP_TextElement // TypeDefIndex: 2868
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected TextElementType m_ElementType; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal uint m_Unicode; // 0x14
	internal Glyph m_Glyph; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal uint m_GlyphIndex; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	internal float m_Scale; // 0x24

	// Properties
	public uint unicode { get; set; }
	public Glyph glyph { get; set; }
	public uint glyphIndex { get; set; }
	public float scale { get; set; }

	// Methods
	// RVA: 0x2E4C30 Offset: 0x2E3430 VA: 0x1802E4C30
	public uint get_unicode() { }
	// RVA: 0x2E4C40 Offset: 0x2E3440 VA: 0x1802E4C40
	public void set_unicode(uint value) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public Glyph get_glyph() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void set_glyph(Glyph value) { }
	// RVA: 0x197B20 Offset: 0x196320 VA: 0x180197B20
	public uint get_glyphIndex() { }
	// RVA: 0x2E4C50 Offset: 0x2E3450 VA: 0x1802E4C50
	public void set_glyphIndex(uint value) { }
	// RVA: 0x197B30 Offset: 0x196330 VA: 0x180197B30
	public float get_scale() { }
	// RVA: 0x2E4C60 Offset: 0x2E3460 VA: 0x1802E4C60
	public void set_scale(float value) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: TMPro
[Serializable]
public class TMP_TextElement_Legacy // TypeDefIndex: 2869
{
	// Fields
	public int id; // 0x10
	public float x; // 0x14
	public float y; // 0x18
	public float width; // 0x1C
	public float height; // 0x20
	public float xOffset; // 0x24
	public float yOffset; // 0x28
	public float xAdvance; // 0x2C
	public float scale; // 0x30

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: TMPro
[Serializable]
public class TMP_TextInfo // TypeDefIndex: 2870
{
	// Fields
	internal static Vector2 k_InfinityVectorPositive; // 0x0
	internal static Vector2 k_InfinityVectorNegative; // 0x8
	public TMP_Text textComponent; // 0x10
	public int characterCount; // 0x18
	public int spriteCount; // 0x1C
	public int spaceCount; // 0x20
	public int wordCount; // 0x24
	public int linkCount; // 0x28
	public int lineCount; // 0x2C
	public int pageCount; // 0x30
	public int materialCount; // 0x34
	public TMP_CharacterInfo[] characterInfo; // 0x38
	public TMP_WordInfo[] wordInfo; // 0x40
	public TMP_LinkInfo[] linkInfo; // 0x48
	public TMP_LineInfo[] lineInfo; // 0x50
	public TMP_PageInfo[] pageInfo; // 0x58
	public TMP_MeshInfo[] meshInfo; // 0x60
	private TMP_MeshInfo[] m_CachedMeshInfo; // 0x68

	// Methods
	// RVA: 0x2E4C70 Offset: 0x2E3470 VA: 0x1802E4C70
	public void .ctor() { }
	// RVA: 0x2E4D60 Offset: 0x2E3560 VA: 0x1802E4D60
	internal void .ctor(int characterCount) { }
	// RVA: 0x2E4E50 Offset: 0x2E3650 VA: 0x1802E4E50
	public void .ctor(TMP_Text textComponent) { }
	// RVA: 0x2E4FA0 Offset: 0x2E37A0 VA: 0x1802E4FA0
	public void Clear() { }
	// RVA: 0x2E5020 Offset: 0x2E3820 VA: 0x1802E5020
	public void ClearMeshInfo(bool updateMesh) { }
	// RVA: 0x2E50B0 Offset: 0x2E38B0 VA: 0x1802E50B0
	public void ResetVertexLayout(bool isVolumetric) { }
	// RVA: 0x2E5140 Offset: 0x2E3940 VA: 0x1802E5140
	public void ClearLineInfo() { }
	// RVA: 0x2E54A0 Offset: 0x2E3CA0 VA: 0x1802E54A0
	internal void ClearPageInfo() { }
	// RVA: 0x42A320 Offset: 0x428B20 VA: 0x18042A320
	public static void Resize(ref T[] array, int size) { }
	// RVA: 0x42A620 Offset: 0x428E20 VA: 0x18042A620
	public static void Resize(ref T[] array, int size, bool isBlockAllocated) { }
	// RVA: 0x2E5620 Offset: 0x2E3E20 VA: 0x1802E5620
	private static void .cctor() { }
}

// Namespace: TMPro
public class TMP_TextParsingUtilities // TypeDefIndex: 2871
{
	// Fields
	private static readonly TMP_TextParsingUtilities s_Instance; // 0xABD14

	// Methods
	// RVA: 0x2E56C0 Offset: 0x2E3EC0 VA: 0x1802E56C0
	private static void .cctor() { }
	// RVA: 0x2E5740 Offset: 0x2E3F40 VA: 0x1802E5740
	public static int GetHashCode(string s) { }
	// RVA: 0x2E5820 Offset: 0x2E4020 VA: 0x1802E5820
	public static int GetHashCodeCaseSensitive(string s) { }
	// RVA: 0x2E5930 Offset: 0x2E4130 VA: 0x1802E5930
	public static char ToUpperASCIIFast(char c) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: TMPro
public enum CaretPosition // TypeDefIndex: 2872
{
	// Fields
	public int value__; // 0x0
	public const CaretPosition None = 0; // 0x0
	public const CaretPosition Left = 1; // 0x0
	public const CaretPosition Right = 2; // 0x0
}

// Namespace: TMPro
public static class TMP_TextUtilities // TypeDefIndex: 2873
{
	// Fields
	private static Vector3[] m_rectWorldCorners; // 0xA17960

	// Methods
	// RVA: 0x2E59D0 Offset: 0x2E41D0 VA: 0x1802E59D0
	public static int GetCursorIndexFromPosition(TMP_Text textComponent, Vector3 position, Camera camera, out CaretPosition cursor) { }
	// RVA: 0x2E5D30 Offset: 0x2E4530 VA: 0x1802E5D30
	public static int FindNearestLine(TMP_Text text, Vector3 position, Camera camera) { }
	// RVA: 0x2E60A0 Offset: 0x2E48A0 VA: 0x1802E60A0
	public static int FindNearestCharacterOnLine(TMP_Text text, Vector3 position, int line, Camera camera, bool visibleOnly) { }
	// RVA: 0x2E6710 Offset: 0x2E4F10 VA: 0x1802E6710
	public static int FindIntersectingWord(TMP_Text text, Vector3 position, Camera camera) { }
	// RVA: 0x2E7320 Offset: 0x2E5B20 VA: 0x1802E7320
	private static bool PointIntersectRectangle(Vector3 m, Vector3 a, Vector3 b, Vector3 c, Vector3 d) { }
	// RVA: 0x2E7620 Offset: 0x2E5E20 VA: 0x1802E7620
	public static bool ScreenPointToWorldPointInRectangle(Transform transform, Vector2 screenPoint, Camera cam, out Vector3 worldPoint) { }
	// RVA: 0x2E79D0 Offset: 0x2E61D0 VA: 0x1802E79D0
	public static float DistanceToLine(Vector3 a, Vector3 b, Vector3 point) { }
	// RVA: 0x2E7D00 Offset: 0x2E6500 VA: 0x1802E7D00
	public static char ToUpperFast(char c) { }
	// RVA: 0x2E5820 Offset: 0x2E4020 VA: 0x1802E5820
	public static int GetSimpleHashCode(string s) { }
	// RVA: 0x2E7DA0 Offset: 0x2E65A0 VA: 0x1802E7DA0
	private static void .cctor() { }
}

// Namespace: TMPro
public class TMP_UpdateManager // TypeDefIndex: 2874
{
	// Fields
	private static TMP_UpdateManager s_Instance; // 0x0
	private readonly List<TMP_Text> m_LayoutRebuildQueue; // 0x10
	private readonly HashSet<int> m_LayoutQueueLookup; // 0x18
	private readonly List<TMP_Text> m_GraphicRebuildQueue; // 0x20
	private readonly HashSet<int> m_GraphicQueueLookup; // 0x28
	private readonly List<TMP_Text> m_InternalUpdateQueue; // 0x30
	private readonly HashSet<int> m_InternalUpdateLookup; // 0x38

	// Properties
	private static TMP_UpdateManager instance { get; }

	// Methods
	// RVA: 0x2E7E30 Offset: 0x2E6630 VA: 0x1802E7E30
	private static TMP_UpdateManager get_instance() { }
	// RVA: 0x2E7EE0 Offset: 0x2E66E0 VA: 0x1802E7EE0
	private void .ctor() { }
	// RVA: 0x2E80F0 Offset: 0x2E68F0 VA: 0x1802E80F0
	internal static void RegisterTextObjectForUpdate(TMP_Text textObject) { }
	// RVA: 0x2E81F0 Offset: 0x2E69F0 VA: 0x1802E81F0
	private void InternalRegisterTextObjectForUpdate(TMP_Text textObject) { }
	// RVA: 0x2E82E0 Offset: 0x2E6AE0 VA: 0x1802E82E0
	public static void RegisterTextElementForLayoutRebuild(TMP_Text element) { }
	// RVA: 0x2E83E0 Offset: 0x2E6BE0 VA: 0x1802E83E0
	private void InternalRegisterTextElementForLayoutRebuild(TMP_Text element) { }
	// RVA: 0x2E84D0 Offset: 0x2E6CD0 VA: 0x1802E84D0
	public static void RegisterTextElementForGraphicRebuild(TMP_Text element) { }
	// RVA: 0x2E85D0 Offset: 0x2E6DD0 VA: 0x1802E85D0
	private void InternalRegisterTextElementForGraphicRebuild(TMP_Text element) { }
	// RVA: 0x2E86C0 Offset: 0x2E6EC0 VA: 0x1802E86C0
	private void DoRebuilds() { }
	// RVA: 0x2E8990 Offset: 0x2E7190 VA: 0x1802E8990
	internal static void UnRegisterTextObjectForUpdate(TMP_Text textObject) { }
	// RVA: 0x2E89C0 Offset: 0x2E71C0 VA: 0x1802E89C0
	public static void UnRegisterTextElementForRebuild(TMP_Text element) { }
	// RVA: 0x2E8C10 Offset: 0x2E7410 VA: 0x1802E8C10
	private void InternalUnRegisterTextElementForGraphicRebuild(TMP_Text element) { }
	// RVA: 0x2E8D30 Offset: 0x2E7530 VA: 0x1802E8D30
	private void InternalUnRegisterTextElementForLayoutRebuild(TMP_Text element) { }
	// RVA: 0x2E8E50 Offset: 0x2E7650 VA: 0x1802E8E50
	private void InternalUnRegisterTextObjectForUpdate(TMP_Text textObject) { }
}

// Namespace: TMPro
public static class TMPro_EventManager // TypeDefIndex: 2875
{
	// Fields
	public static readonly FastAction<object, Compute_DT_EventArgs> COMPUTE_DT_EVENT; // 0x0
	public static readonly FastAction<bool, Material> MATERIAL_PROPERTY_EVENT; // 0x8
	public static readonly FastAction<bool, TMP_FontAsset> FONT_PROPERTY_EVENT; // 0x10
	public static readonly FastAction<bool, Object> SPRITE_ASSET_PROPERTY_EVENT; // 0x18
	public static readonly FastAction<bool, TextMeshPro> TEXTMESHPRO_PROPERTY_EVENT; // 0x20
	public static readonly FastAction<GameObject, Material, Material> DRAG_AND_DROP_MATERIAL_EVENT; // 0x28
	public static readonly FastAction<bool> TEXT_STYLE_PROPERTY_EVENT; // 0x30
	public static readonly FastAction<TMP_ColorGradient> COLOR_GRADIENT_PROPERTY_EVENT; // 0x38
	public static readonly FastAction TMP_SETTINGS_PROPERTY_EVENT; // 0x40
	public static readonly FastAction RESOURCE_LOAD_EVENT; // 0x48
	public static readonly FastAction<bool, TextMeshProUGUI> TEXTMESHPRO_UGUI_PROPERTY_EVENT; // 0x50
	public static readonly FastAction OnPreRenderObject_Event; // 0x58
	public static readonly FastAction<Object> TEXT_CHANGED_EVENT; // 0x60

	// Methods
	// RVA: 0x2E8F70 Offset: 0x2E7770 VA: 0x1802E8F70
	public static void ON_TEXT_CHANGED(Object obj) { }
	// RVA: 0x2E90C0 Offset: 0x2E78C0 VA: 0x1802E90C0
	private static void .cctor() { }
}

// Namespace: TMPro
public class Compute_DT_EventArgs // TypeDefIndex: 2876
{}

// Namespace: TMPro
public static class TMPro_ExtensionMethods // TypeDefIndex: 2877
{
	// Methods
	// RVA: 0x2E9530 Offset: 0x2E7D30 VA: 0x1802E9530
	internal static string UintToString(List<uint> unicodes) { }
	// RVA: 0x2E9620 Offset: 0x2E7E20 VA: 0x1802E9620
	public static bool Compare(Color32 a, Color32 b) { }
	// RVA: 0x2E9660 Offset: 0x2E7E60 VA: 0x1802E9660
	public static Color32 Multiply(Color32 c1, Color32 c2) { }
	// RVA: 0x2E9740 Offset: 0x2E7F40 VA: 0x1802E9740
	public static Color MinAlpha(Color c1, Color c2) { }
}

// Namespace: TMPro
public static class TMP_Math // TypeDefIndex: 2878
{
	// Fields
	public static Vector2 MAX_16BIT; // 0x0
	public static Vector2 MIN_16BIT; // 0x8

	// Methods
	// RVA: 0x167390 Offset: 0x165B90 VA: 0x180167390
	public static bool Approximately(float a, float b) { }
	// RVA: 0x1673C0 Offset: 0x165BC0 VA: 0x1801673C0
	private static void .cctor() { }
}

// Namespace: TMPro
public enum TMP_VertexDataUpdateFlags // TypeDefIndex: 2879
{
	// Fields
	public int value__; // 0x0
	public const TMP_VertexDataUpdateFlags None = 0; // 0x0
	public const TMP_VertexDataUpdateFlags Vertices = 1; // 0x0
	public const TMP_VertexDataUpdateFlags Uv0 = 2; // 0x0
	public const TMP_VertexDataUpdateFlags Uv2 = 4; // 0x0
	public const TMP_VertexDataUpdateFlags Uv4 = 8; // 0x0
	public const TMP_VertexDataUpdateFlags Colors32 = 16; // 0x0
	public const TMP_VertexDataUpdateFlags All = 255; // 0x0
}

// Namespace: TMPro
[Serializable]
public struct VertexGradient // TypeDefIndex: 2880
{
	// Fields
	public Color topLeft; // 0x0
	public Color topRight; // 0x10
	public Color bottomLeft; // 0x20
	public Color bottomRight; // 0x30

	// Methods
	// RVA: 0x12EA0 Offset: 0x122A0 VA: 0x180012EA0
	public void .ctor(Color color) { }
}

// Namespace: TMPro
public struct TMP_PageInfo // TypeDefIndex: 2881
{
	// Fields
	public int firstCharacterIndex; // 0x0
	public int lastCharacterIndex; // 0x4
	public float ascender; // 0x8
	public float baseLine; // 0xC
	public float descender; // 0x10
}

// Namespace: TMPro
public struct TMP_LinkInfo // TypeDefIndex: 2882
{
	// Fields
	public TMP_Text textComponent; // 0x0
	public int hashCode; // 0x8
	public int linkIdFirstCharacterIndex; // 0xC
	public int linkIdLength; // 0x10
	public int linkTextfirstCharacterIndex; // 0x14
	public int linkTextLength; // 0x18
	internal char[] linkID; // 0x20

	// Methods
	// RVA: 0x4D90 Offset: 0x4190 VA: 0x180004D90
	internal void SetLinkID(char[] text, int startIndex, int length) { }
}

// Namespace: TMPro
public struct TMP_WordInfo // TypeDefIndex: 2883
{
	// Fields
	public TMP_Text textComponent; // 0x0
	public int firstCharacterIndex; // 0x8
	public int lastCharacterIndex; // 0xC
	public int characterCount; // 0x10
}

// Namespace: TMPro
public struct Extents // TypeDefIndex: 2884
{
	// Fields
	internal static Extents zero; // 0x0
	internal static Extents uninitialized; // 0x10
	public Vector2 min; // 0x0
	public Vector2 max; // 0x8

	// Methods
	// RVA: 0x5CF0 Offset: 0x50F0 VA: 0x180005CF0
	public void .ctor(Vector2 min, Vector2 max) { }
	// RVA: 0x5D00 Offset: 0x5100 VA: 0x180005D00 Slot: 3
	public override string ToString() { }
	// RVA: 0x198160 Offset: 0x196960 VA: 0x180198160
	private static void .cctor() { }
}

// Namespace: TMPro
public struct WordWrapState // TypeDefIndex: 2885
{
	// Fields
	public int previous_WordBreak; // 0x0
	public int total_CharacterCount; // 0x4
	public int visible_CharacterCount; // 0x8
	public int visible_SpriteCount; // 0xC
	public int visible_LinkCount; // 0x10
	public int firstCharacterIndex; // 0x14
	public int firstVisibleCharacterIndex; // 0x18
	public int lastCharacterIndex; // 0x1C
	public int lastVisibleCharIndex; // 0x20
	public int lineNumber; // 0x24
	public float maxCapHeight; // 0x28
	public float maxAscender; // 0x2C
	public float maxDescender; // 0x30
	public float startOfLineAscender; // 0x34
	public float maxLineAscender; // 0x38
	public float maxLineDescender; // 0x3C
	public float pageAscender; // 0x40
	public HorizontalAlignmentOptions horizontalAlignment; // 0x44
	public float marginLeft; // 0x48
	public float marginRight; // 0x4C
	public float xAdvance; // 0x50
	public float preferredWidth; // 0x54
	public float preferredHeight; // 0x58
	public float previousLineScale; // 0x5C
	public int wordCount; // 0x60
	public FontStyles fontStyle; // 0x64
	public int italicAngle; // 0x68
	public float fontScale; // 0x6C
	public float fontScaleMultiplier; // 0x70
	public float currentFontSize; // 0x74
	public float baselineOffset; // 0x78
	public float lineOffset; // 0x7C
	public bool isDrivenLineSpacing; // 0x80
	public float cSpace; // 0x84
	public float mSpace; // 0x88
	public TMP_TextInfo textInfo; // 0x90
	public TMP_LineInfo lineInfo; // 0x98
	public Color32 vertexColor; // 0xF4
	public Color32 underlineColor; // 0xF8
	public Color32 strikethroughColor; // 0xFC
	public Color32 highlightColor; // 0x100
	public TMP_FontStyleStack basicStyleStack; // 0x104
	public TMP_RichTextTagStack<int> italicAngleStack; // 0x110
	public TMP_RichTextTagStack<Color32> colorStack; // 0x128
	public TMP_RichTextTagStack<Color32> underlineColorStack; // 0x140
	public TMP_RichTextTagStack<Color32> strikethroughColorStack; // 0x158
	public TMP_RichTextTagStack<Color32> highlightColorStack; // 0x170
	public TMP_RichTextTagStack<HighlightState> highlightStateStack; // 0x188
	public TMP_RichTextTagStack<TMP_ColorGradient> colorGradientStack; // 0x1B0
	public TMP_RichTextTagStack<float> sizeStack; // 0x1C8
	public TMP_RichTextTagStack<float> indentStack; // 0x1E0
	public TMP_RichTextTagStack<FontWeight> fontWeightStack; // 0x1F8
	public TMP_RichTextTagStack<int> styleStack; // 0x210
	public TMP_RichTextTagStack<float> baselineStack; // 0x228
	public TMP_RichTextTagStack<int> actionStack; // 0x240
	public TMP_RichTextTagStack<MaterialReference> materialReferenceStack; // 0x258
	public TMP_RichTextTagStack<HorizontalAlignmentOptions> lineJustificationStack; // 0x2A0
	public int spriteAnimationID; // 0x2B8
	public TMP_FontAsset currentFontAsset; // 0x2C0
	public TMP_SpriteAsset currentSpriteAsset; // 0x2C8
	public Material currentMaterial; // 0x2D0
	public int currentMaterialIndex; // 0x2D8
	public Extents meshExtents; // 0x2DC
	public bool tagNoParsing; // 0x2EC
	public bool isNonBreakingSpace; // 0x2ED
}

// Namespace: TMPro
public struct RichTextTagAttribute // TypeDefIndex: 2886
{
	// Fields
	public int nameHashCode; // 0x0
	public int valueHashCode; // 0x4
	public TagValueType valueType; // 0x8
	public int valueStartIndex; // 0xC
	public int valueLength; // 0x10
	public TagUnitType unitType; // 0x14
}

// Namespace: TMPro
[RequireComponent] // RVA: 0x103BC0 Offset: 0x102FC0 VA: 0x180103BC0
[DisallowMultipleComponent] // RVA: 0x103BC0 Offset: 0x102FC0 VA: 0x180103BC0
[ExecuteAlways] // RVA: 0x103BC0 Offset: 0x102FC0 VA: 0x180103BC0
[RequireComponent] // RVA: 0x103BC0 Offset: 0x102FC0 VA: 0x180103BC0
public class TextMeshPro : TMP_Text, ILayoutElement // TypeDefIndex: 2887
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_hasFontAssetChanged; // 0x1568
	private float m_previousLossyScaleY; // 0x156C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Renderer m_renderer; // 0x1570
	private MeshFilter m_meshFilter; // 0x1578
	private bool m_isFirstAllocation; // 0x1580
	private int m_max_characters; // 0x1584
	private int m_max_numberOfLines; // 0x1588
	protected TMP_SubMesh[] m_subTextObjects; // 0x1590
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private MaskingTypes m_maskType; // 0x1598
	private Matrix4x4 m_EnvMapMatrix; // 0x159C
	private Vector3[] m_RectTransformCorners; // 0x15E0
	private bool m_isRegisteredForEvents; // 0x15E8
	private bool m_currentAutoSizeMode; // 0x15E9

	// Properties
	public int sortingLayerID { get; set; }
	public int sortingOrder { get; set; }
	public override bool autoSizeTextContainer { get; set; }
	[ObsoleteAttribute] // RVA: 0x103C60 Offset: 0x103060 VA: 0x180103C60
	public TextContainer textContainer { get; }
	public Transform transform { get; }
	public Renderer renderer { get; }
	public override Mesh mesh { get; }
	public MeshFilter meshFilter { get; }
	public MaskingTypes maskType { get; set; }

	// Methods
	// RVA: 0x2EB0B0 Offset: 0x2E98B0 VA: 0x1802EB0B0 Slot: 4
	protected override void Awake() { }
	// RVA: 0x2EB690 Offset: 0x2E9E90 VA: 0x1802EB690 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x2EB7A0 Offset: 0x2E9FA0 VA: 0x1802EB7A0 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x2EB850 Offset: 0x2EA050 VA: 0x1802EB850 Slot: 8
	protected override void OnDestroy() { }
	// RVA: 0x2EB960 Offset: 0x2EA160 VA: 0x1802EB960 Slot: 83
	protected override void LoadFontAsset() { }
	// RVA: 0x2EC0B0 Offset: 0x2EA8B0 VA: 0x1802EC0B0
	private void UpdateEnvMapMatrix() { }
	// RVA: 0x2EC5F0 Offset: 0x2EADF0 VA: 0x1802EC5F0
	private void SetMask(MaskingTypes maskType) { }
	// RVA: 0x2EC7F0 Offset: 0x2EAFF0 VA: 0x1802EC7F0
	private void SetMaskCoordinates(Vector4 coords) { }
	// RVA: 0x2EC940 Offset: 0x2EB140 VA: 0x1802EC940
	private void SetMaskCoordinates(Vector4 coords, float softX, float softY) { }
	// RVA: 0x2ECB80 Offset: 0x2EB380 VA: 0x1802ECB80
	private void EnableMasking() { }
	// RVA: 0x2ECE10 Offset: 0x2EB610 VA: 0x1802ECE10
	private void DisableMasking() { }
	// RVA: 0x2ED0A0 Offset: 0x2EB8A0 VA: 0x1802ED0A0
	private void UpdateMask() { }
	// RVA: 0x2ED2C0 Offset: 0x2EBAC0 VA: 0x1802ED2C0 Slot: 85
	protected override Material GetMaterial(Material mat) { }
	// RVA: 0x2ED420 Offset: 0x2EBC20 VA: 0x1802ED420 Slot: 88
	protected override Material[] GetMaterials(Material[] mats) { }
	// RVA: 0x2ED660 Offset: 0x2EBE60 VA: 0x1802ED660 Slot: 84
	protected override void SetSharedMaterial(Material mat) { }
	// RVA: 0x2ED6B0 Offset: 0x2EBEB0 VA: 0x1802ED6B0 Slot: 86
	protected override Material[] GetSharedMaterials() { }
	// RVA: 0x2ED8D0 Offset: 0x2EC0D0 VA: 0x1802ED8D0 Slot: 87
	protected override void SetSharedMaterials(Material[] materials) { }
	// RVA: 0x2EDD80 Offset: 0x2EC580 VA: 0x1802EDD80 Slot: 92
	protected override void SetOutlineThickness(float thickness) { }
	// RVA: 0x2EE030 Offset: 0x2EC830 VA: 0x1802EE030 Slot: 90
	protected override void SetFaceColor(Color32 color) { }
	// RVA: 0x2EE2A0 Offset: 0x2ECAA0 VA: 0x1802EE2A0 Slot: 91
	protected override void SetOutlineColor(Color32 color) { }
	// RVA: 0x2EE510 Offset: 0x2ECD10 VA: 0x1802EE510
	private void CreateMaterialInstance() { }
	// RVA: 0x2EE690 Offset: 0x2ECE90 VA: 0x1802EE690 Slot: 93
	protected override void SetShaderDepth() { }
	// RVA: 0x2EE9B0 Offset: 0x2ED1B0 VA: 0x1802EE9B0 Slot: 94
	protected override void SetCulling() { }
	// RVA: 0x2EEE10 Offset: 0x2ED610 VA: 0x1802EEE10
	private void SetPerspectiveCorrection() { }
	// RVA: 0x2EEFA0 Offset: 0x2ED7A0 VA: 0x1802EEFA0 Slot: 105
	protected override int SetArraySizes(TMP_Text.UnicodeChar[] unicodeChars) { }
	// RVA: 0x2F1DF0 Offset: 0x2F05F0 VA: 0x1802F1DF0 Slot: 110
	public override void ComputeMarginSize() { }
	// RVA: 0x2F1FC0 Offset: 0x2F07C0 VA: 0x1802F1FC0 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }
	// RVA: 0x2F1FE0 Offset: 0x2F07E0 VA: 0x1802F1FE0 Slot: 12
	protected override void OnTransformParentChanged() { }
	// RVA: 0x2F2020 Offset: 0x2F0820 VA: 0x1802F2020 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }
	// RVA: 0x2F22F0 Offset: 0x2F0AF0 VA: 0x1802F22F0 Slot: 123
	internal override void InternalUpdate() { }
	// RVA: 0x2F23D0 Offset: 0x2F0BD0 VA: 0x1802F23D0
	private void OnPreRenderObject() { }
	// RVA: 0x2F26A0 Offset: 0x2F0EA0 VA: 0x1802F26A0 Slot: 106
	protected override void GenerateTextMesh() { }
	// RVA: 0x3049A0 Offset: 0x3031A0 VA: 0x1803049A0 Slot: 97
	protected override Vector3[] GetTextContainerLocalCorners() { }
	// RVA: 0x304A80 Offset: 0x303280 VA: 0x180304A80
	private void SetMeshFilters(bool state) { }
	// RVA: 0x304D60 Offset: 0x303560 VA: 0x180304D60 Slot: 118
	protected override void SetActiveSubMeshes(bool state) { }
	// RVA: 0x304F50 Offset: 0x303750 VA: 0x180304F50 Slot: 119
	protected override void ClearSubMeshObjects() { }
	// RVA: 0x305120 Offset: 0x303920 VA: 0x180305120 Slot: 108
	protected override Bounds GetCompoundBounds() { }
	// RVA: 0x3056E0 Offset: 0x303EE0 VA: 0x1803056E0
	private void UpdateSDFScale(float scaleDelta) { }
	// RVA: 0x3059D0 Offset: 0x3041D0 VA: 0x1803059D0
	public int get_sortingLayerID() { }
	// RVA: 0x305AE0 Offset: 0x3042E0 VA: 0x180305AE0
	public void set_sortingLayerID(int value) { }
	// RVA: 0x305BF0 Offset: 0x3043F0 VA: 0x180305BF0
	public int get_sortingOrder() { }
	// RVA: 0x305D00 Offset: 0x304500 VA: 0x180305D00
	public void set_sortingOrder(int value) { }
	// RVA: 0x305E10 Offset: 0x304610 VA: 0x180305E10 Slot: 71
	public override bool get_autoSizeTextContainer() { }
	// RVA: 0x305E20 Offset: 0x304620 VA: 0x180305E20 Slot: 72
	public override void set_autoSizeTextContainer(bool value) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60
	public TextContainer get_textContainer() { }
	// RVA: 0x305F50 Offset: 0x304750 VA: 0x180305F50
	public Transform get_transform() { }
	// RVA: 0x306020 Offset: 0x304820 VA: 0x180306020
	public Renderer get_renderer() { }
	// RVA: 0x3060F0 Offset: 0x3048F0 VA: 0x1803060F0 Slot: 73
	public override Mesh get_mesh() { }
	// RVA: 0x306280 Offset: 0x304A80 VA: 0x180306280
	public MeshFilter get_meshFilter() { }
	// RVA: 0x306350 Offset: 0x304B50 VA: 0x180306350
	public MaskingTypes get_maskType() { }
	// RVA: 0x306360 Offset: 0x304B60 VA: 0x180306360
	public void set_maskType(MaskingTypes value) { }
	// RVA: 0x306370 Offset: 0x304B70 VA: 0x180306370
	public void SetMask(MaskingTypes type, Vector4 maskCoords) { }
	// RVA: 0x3064C0 Offset: 0x304CC0 VA: 0x1803064C0
	public void SetMask(MaskingTypes type, Vector4 maskCoords, float softnessX, float softnessY) { }
	// RVA: 0x306520 Offset: 0x304D20 VA: 0x180306520 Slot: 28
	public override void SetVerticesDirty() { }
	// RVA: 0x3066C0 Offset: 0x304EC0 VA: 0x1803066C0 Slot: 27
	public override void SetLayoutDirty() { }
	// RVA: 0x172800 Offset: 0x171000 VA: 0x180172800 Slot: 29
	public override void SetMaterialDirty() { }
	// RVA: 0x306790 Offset: 0x304F90 VA: 0x180306790 Slot: 26
	public override void SetAllDirty() { }
	// RVA: 0x3067E0 Offset: 0x304FE0 VA: 0x1803067E0 Slot: 37
	public override void Rebuild(CanvasUpdate update) { }
	// RVA: 0x306910 Offset: 0x305110 VA: 0x180306910 Slot: 40
	protected override void UpdateMaterial() { }
	// RVA: 0x306AE0 Offset: 0x3052E0 VA: 0x180306AE0 Slot: 102
	public override void UpdateMeshPadding() { }
	// RVA: 0x306D00 Offset: 0x305500 VA: 0x180306D00 Slot: 98
	public override void ForceMeshUpdate(bool ignoreActiveState = False, bool forceTextReparsing = False) { }
	// RVA: 0x306D30 Offset: 0x305530 VA: 0x180306D30 Slot: 109
	public override TMP_TextInfo GetTextInfo(string text) { }
	// RVA: 0x306DC0 Offset: 0x3055C0 VA: 0x180306DC0 Slot: 121
	public override void ClearMesh(bool updateMesh) { }
	// RVA: 0x306F60 Offset: 0x305760 VA: 0x180306F60 Slot: 99
	public override void UpdateGeometry(Mesh mesh, int index) { }
	// RVA: 0x306F80 Offset: 0x305780 VA: 0x180306F80 Slot: 100
	public override void UpdateVertexData(TMP_VertexDataUpdateFlags flags) { }
	// RVA: 0x3071C0 Offset: 0x3059C0 VA: 0x1803071C0 Slot: 101
	public override void UpdateVertexData() { }
	// RVA: 0x307420 Offset: 0x305C20 VA: 0x180307420
	public void UpdateFontAsset() { }
	// RVA: 0x307440 Offset: 0x305C40 VA: 0x180307440 Slot: 124
	public void CalculateLayoutInputHorizontal() { }
	// RVA: 0x307690 Offset: 0x305E90 VA: 0x180307690 Slot: 125
	public void CalculateLayoutInputVertical() { }
	// RVA: 0x3078C0 Offset: 0x3060C0 VA: 0x1803078C0
	public void .ctor() { }
}

// Namespace: TMPro
[ExecuteAlways] // RVA: 0x103C90 Offset: 0x103090 VA: 0x180103C90
[DisallowMultipleComponent] // RVA: 0x103C90 Offset: 0x103090 VA: 0x180103C90
[RequireComponent] // RVA: 0x103C90 Offset: 0x103090 VA: 0x180103C90
[RequireComponent] // RVA: 0x103C90 Offset: 0x103090 VA: 0x180103C90
public class TextMeshProUGUI : TMP_Text, ILayoutElement // TypeDefIndex: 2888
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool m_hasFontAssetChanged; // 0x1568
	protected TMP_SubMeshUI[] m_subTextObjects; // 0x1570
	private float m_previousLossyScaleY; // 0x1578
	private Vector3[] m_RectTransformCorners; // 0x1580
	private CanvasRenderer m_canvasRenderer; // 0x1588
	private Canvas m_canvas; // 0x1590
	private bool m_isFirstAllocation; // 0x1598
	private int m_max_characters; // 0x159C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Material m_baseMaterial; // 0x15A0
	private bool m_isScrollRegionSet; // 0x15A8
	private int m_stencilID; // 0x15AC
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector4 m_maskOffset; // 0x15B0
	private Matrix4x4 m_EnvMapMatrix; // 0x15C0
	private bool m_isRegisteredForEvents; // 0x1600
	private bool m_isRebuildingLayout; // 0x1601
	private Coroutine m_DelayedGraphicRebuild; // 0x1608
	private Coroutine m_DelayedMaterialRebuild; // 0x1610

	// Properties
	public override Material materialForRendering { get; }
	public override bool autoSizeTextContainer { get; set; }
	public override Mesh mesh { get; }
	public CanvasRenderer canvasRenderer { get; }
	public Vector4 maskOffset { get; set; }

	// Methods
	// RVA: 0x3AB190 Offset: 0x3A9990 VA: 0x1803AB190 Slot: 4
	protected override void Awake() { }
	// RVA: 0x3AB670 Offset: 0x3A9E70 VA: 0x1803AB670 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x3AB7C0 Offset: 0x3A9FC0 VA: 0x1803AB7C0 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x3ABA10 Offset: 0x3AA210 VA: 0x1803ABA10 Slot: 8
	protected override void OnDestroy() { }
	// RVA: 0x3ABBC0 Offset: 0x3AA3C0 VA: 0x1803ABBC0 Slot: 83
	protected override void LoadFontAsset() { }
	// RVA: 0x3AC390 Offset: 0x3AAB90 VA: 0x1803AC390
	private Canvas GetCanvas() { }
	// RVA: 0x3AC590 Offset: 0x3AAD90 VA: 0x1803AC590
	private void UpdateEnvMapMatrix() { }
	// RVA: 0x3ACAD0 Offset: 0x3AB2D0 VA: 0x1803ACAD0
	private void EnableMasking() { }
	// RVA: 0x3ACE70 Offset: 0x3AB670 VA: 0x1803ACE70
	private void DisableMasking() { }
	// RVA: 0x3AD030 Offset: 0x3AB830 VA: 0x1803AD030
	private void UpdateMask() { }
	// RVA: 0x3AD730 Offset: 0x3ABF30 VA: 0x1803AD730 Slot: 85
	protected override Material GetMaterial(Material mat) { }
	// RVA: 0x3AD8C0 Offset: 0x3AC0C0 VA: 0x1803AD8C0 Slot: 88
	protected override Material[] GetMaterials(Material[] mats) { }
	// RVA: 0x2ED660 Offset: 0x2EBE60 VA: 0x1802ED660 Slot: 84
	protected override void SetSharedMaterial(Material mat) { }
	// RVA: 0x3ADB10 Offset: 0x3AC310 VA: 0x1803ADB10 Slot: 86
	protected override Material[] GetSharedMaterials() { }
	// RVA: 0x3ADD30 Offset: 0x3AC530 VA: 0x1803ADD30 Slot: 87
	protected override void SetSharedMaterials(Material[] materials) { }
	// RVA: 0x3AE2D0 Offset: 0x3ACAD0 VA: 0x1803AE2D0 Slot: 92
	protected override void SetOutlineThickness(float thickness) { }
	// RVA: 0x3AE580 Offset: 0x3ACD80 VA: 0x1803AE580 Slot: 90
	protected override void SetFaceColor(Color32 color) { }
	// RVA: 0x3AE780 Offset: 0x3ACF80 VA: 0x1803AE780 Slot: 91
	protected override void SetOutlineColor(Color32 color) { }
	// RVA: 0x3AE980 Offset: 0x3AD180 VA: 0x1803AE980 Slot: 93
	protected override void SetShaderDepth() { }
	// RVA: 0x3AEB70 Offset: 0x3AD370 VA: 0x1803AEB70 Slot: 94
	protected override void SetCulling() { }
	// RVA: 0x3AEFA0 Offset: 0x3AD7A0 VA: 0x1803AEFA0
	private void SetPerspectiveCorrection() { }
	// RVA: 0x3AF130 Offset: 0x3AD930 VA: 0x1803AF130
	private void SetMeshArrays(int size) { }
	// RVA: 0x3AF200 Offset: 0x3ADA00 VA: 0x1803AF200 Slot: 105
	protected override int SetArraySizes(TMP_Text.UnicodeChar[] unicodeChars) { }
	// RVA: 0x3B2100 Offset: 0x3B0900 VA: 0x1803B2100 Slot: 110
	public override void ComputeMarginSize() { }
	// RVA: 0x3B22D0 Offset: 0x3B0AD0 VA: 0x1803B22D0 Slot: 13
	protected override void OnDidApplyAnimationProperties() { }
	// RVA: 0x3B2310 Offset: 0x3B0B10 VA: 0x1803B2310 Slot: 15
	protected override void OnCanvasHierarchyChanged() { }
	// RVA: 0x3B2480 Offset: 0x3B0C80 VA: 0x1803B2480 Slot: 12
	protected override void OnTransformParentChanged() { }
	// RVA: 0x3B2600 Offset: 0x3B0E00 VA: 0x1803B2600 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }
	// RVA: 0x3B2980 Offset: 0x3B1180 VA: 0x1803B2980 Slot: 123
	internal override void InternalUpdate() { }
	// RVA: 0x3B2A60 Offset: 0x3B1260 VA: 0x1803B2A60
	private void OnPreRenderCanvas() { }
	// RVA: 0x3B2D90 Offset: 0x3B1590 VA: 0x1803B2D90 Slot: 106
	protected override void GenerateTextMesh() { }
	// RVA: 0x3C5370 Offset: 0x3C3B70 VA: 0x1803C5370 Slot: 97
	protected override Vector3[] GetTextContainerLocalCorners() { }
	// RVA: 0x3C5450 Offset: 0x3C3C50 VA: 0x1803C5450 Slot: 118
	protected override void SetActiveSubMeshes(bool state) { }
	// RVA: 0x3C5640 Offset: 0x3C3E40 VA: 0x1803C5640 Slot: 108
	protected override Bounds GetCompoundBounds() { }
	// RVA: 0x3C5C00 Offset: 0x3C4400 VA: 0x1803C5C00
	private void UpdateSDFScale(float scaleDelta) { }
	// RVA: 0x3C5FA0 Offset: 0x3C47A0 VA: 0x1803C5FA0 Slot: 34
	public override Material get_materialForRendering() { }
	// RVA: 0x305E10 Offset: 0x304610 VA: 0x180305E10 Slot: 71
	public override bool get_autoSizeTextContainer() { }
	// RVA: 0x3C6050 Offset: 0x3C4850 VA: 0x1803C6050 Slot: 72
	public override void set_autoSizeTextContainer(bool value) { }
	// RVA: 0x175480 Offset: 0x173C80 VA: 0x180175480 Slot: 73
	public override Mesh get_mesh() { }
	// RVA: 0x3C6120 Offset: 0x3C4920 VA: 0x1803C6120
	public CanvasRenderer get_canvasRenderer() { }
	// RVA: 0x3C61F0 Offset: 0x3C49F0 VA: 0x1803C61F0 Slot: 124
	public void CalculateLayoutInputHorizontal() { }
	// RVA: 0x3C6330 Offset: 0x3C4B30 VA: 0x1803C6330 Slot: 125
	public void CalculateLayoutInputVertical() { }
	// RVA: 0x3C6480 Offset: 0x3C4C80 VA: 0x1803C6480 Slot: 28
	public override void SetVerticesDirty() { }
	// RVA: 0x3C6640 Offset: 0x3C4E40 VA: 0x1803C6640 Slot: 27
	public override void SetLayoutDirty() { }
	// RVA: 0x3C6760 Offset: 0x3C4F60 VA: 0x1803C6760 Slot: 29
	public override void SetMaterialDirty() { }
	// RVA: 0x306790 Offset: 0x304F90 VA: 0x180306790 Slot: 26
	public override void SetAllDirty() { }
	// RVA: 0x3C6920 Offset: 0x3C5120 VA: 0x1803C6920
	private IEnumerator DelayedGraphicRebuild() { }
	// RVA: 0x3C69B0 Offset: 0x3C51B0 VA: 0x1803C69B0
	private IEnumerator DelayedMaterialRebuild() { }
	// RVA: 0x3C6A40 Offset: 0x3C5240 VA: 0x1803C6A40 Slot: 37
	public override void Rebuild(CanvasUpdate update) { }
	// RVA: 0x3C6B70 Offset: 0x3C5370 VA: 0x1803C6B70
	private void UpdateSubObjectPivot() { }
	// RVA: 0x3C6E30 Offset: 0x3C5630 VA: 0x1803C6E30 Slot: 55
	public override Material GetModifiedMaterial(Material baseMaterial) { }
	// RVA: 0x3C7060 Offset: 0x3C5860 VA: 0x1803C7060 Slot: 40
	protected override void UpdateMaterial() { }
	// RVA: 0x3C7240 Offset: 0x3C5A40 VA: 0x1803C7240
	public Vector4 get_maskOffset() { }
	// RVA: 0x3C7250 Offset: 0x3C5A50 VA: 0x1803C7250
	public void set_maskOffset(Vector4 value) { }
	// RVA: 0x172B40 Offset: 0x171340 VA: 0x180172B40 Slot: 59
	public override void RecalculateClipping() { }
	// RVA: 0x172B50 Offset: 0x171350 VA: 0x180172B50 Slot: 60
	public override void RecalculateMasking() { }
	// RVA: 0x3C7280 Offset: 0x3C5A80 VA: 0x1803C7280 Slot: 56
	public override void Cull(Rect clipRect, bool validRect) { }
	// RVA: 0x3C73C0 Offset: 0x3C5BC0 VA: 0x1803C73C0 Slot: 102
	public override void UpdateMeshPadding() { }
	// RVA: 0x3C75F0 Offset: 0x3C5DF0 VA: 0x1803C75F0 Slot: 103
	protected override void InternalCrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) { }
	// RVA: 0x3C76D0 Offset: 0x3C5ED0 VA: 0x1803C76D0 Slot: 104
	protected override void InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) { }
	// RVA: 0x3C7790 Offset: 0x3C5F90 VA: 0x1803C7790 Slot: 98
	public override void ForceMeshUpdate(bool ignoreActiveState = False, bool forceTextReparsing = False) { }
	// RVA: 0x3C77C0 Offset: 0x3C5FC0 VA: 0x1803C77C0 Slot: 109
	public override TMP_TextInfo GetTextInfo(string text) { }
	// RVA: 0x3C7900 Offset: 0x3C6100 VA: 0x1803C7900 Slot: 120
	public override void ClearMesh() { }
	// RVA: 0x3C7B00 Offset: 0x3C6300 VA: 0x1803C7B00 Slot: 99
	public override void UpdateGeometry(Mesh mesh, int index) { }
	// RVA: 0x3C7C10 Offset: 0x3C6410 VA: 0x1803C7C10 Slot: 100
	public override void UpdateVertexData(TMP_VertexDataUpdateFlags flags) { }
	// RVA: 0x3C7EB0 Offset: 0x3C66B0 VA: 0x1803C7EB0 Slot: 101
	public override void UpdateVertexData() { }
	// RVA: 0x307420 Offset: 0x305C20 VA: 0x180307420
	public void UpdateFontAsset() { }
	// RVA: 0x3C8160 Offset: 0x3C6960 VA: 0x1803C8160
	public void .ctor() { }
}

// Namespace: 
private sealed class TextMeshProUGUI.<DelayedGraphicRebuild>d__67 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2889
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public TextMeshProUGUI <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x642020 Offset: 0x640820 VA: 0x180642020 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class TextMeshProUGUI.<DelayedMaterialRebuild>d__68 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2890
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public TextMeshProUGUI <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x642120 Offset: 0x640920 VA: 0x180642120 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: TMPro
public enum TextContainerAnchors // TypeDefIndex: 2891
{
	// Fields
	public int value__; // 0x0
	public const TextContainerAnchors TopLeft = 0; // 0x0
	public const TextContainerAnchors Top = 1; // 0x0
	public const TextContainerAnchors TopRight = 2; // 0x0
	public const TextContainerAnchors Left = 3; // 0x0
	public const TextContainerAnchors Middle = 4; // 0x0
	public const TextContainerAnchors Right = 5; // 0x0
	public const TextContainerAnchors BottomLeft = 6; // 0x0
	public const TextContainerAnchors Bottom = 7; // 0x0
	public const TextContainerAnchors BottomRight = 8; // 0x0
	public const TextContainerAnchors Custom = 9; // 0x0
}

// Namespace: TMPro
[RequireComponent] // RVA: 0x103D40 Offset: 0x103140 VA: 0x180103D40
public class TextContainer : UIBehaviour // TypeDefIndex: 2892
{
	// Fields
	private bool m_hasChanged; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector2 m_pivot; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TextContainerAnchors m_anchorPosition; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Rect m_rect; // 0x28
	private bool m_isDefaultWidth; // 0x38
	private bool m_isDefaultHeight; // 0x39
	private bool m_isAutoFitting; // 0x3A
	private Vector3[] m_corners; // 0x40
	private Vector3[] m_worldCorners; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector4 m_margins; // 0x50
	private RectTransform m_rectTransform; // 0x60
	private static Vector2 k_defaultSize; // 0x0
	private TextMeshPro m_textMeshPro; // 0x68

	// Properties
	public bool hasChanged { get; set; }
	public Vector2 pivot { get; set; }
	public TextContainerAnchors anchorPosition { get; set; }
	public Rect rect { get; set; }
	public Vector2 size { get; set; }
	public float width { get; set; }
	public float height { get; set; }
	public bool isDefaultWidth { get; }
	public bool isDefaultHeight { get; }
	public bool isAutoFitting { get; set; }
	public Vector3[] corners { get; }
	public Vector3[] worldCorners { get; }
	public Vector4 margins { get; set; }
	public RectTransform rectTransform { get; }
	public TextMeshPro textMeshPro { get; }

	// Methods
	// RVA: 0x28C960 Offset: 0x28B160 VA: 0x18028C960
	public bool get_hasChanged() { }
	// RVA: 0x2E9780 Offset: 0x2E7F80 VA: 0x1802E9780
	public void set_hasChanged(bool value) { }
	// RVA: 0x2E9790 Offset: 0x2E7F90 VA: 0x1802E9790
	public Vector2 get_pivot() { }
	// RVA: 0x2E97B0 Offset: 0x2E7FB0 VA: 0x1802E97B0
	public void set_pivot(Vector2 value) { }
	// RVA: 0x198920 Offset: 0x197120 VA: 0x180198920
	public TextContainerAnchors get_anchorPosition() { }
	// RVA: 0x2E98B0 Offset: 0x2E80B0 VA: 0x1802E98B0
	public void set_anchorPosition(TextContainerAnchors value) { }
	// RVA: 0x198930 Offset: 0x197130 VA: 0x180198930
	public Rect get_rect() { }
	// RVA: 0x2E9A30 Offset: 0x2E8230 VA: 0x1802E9A30
	public void set_rect(Rect value) { }
	// RVA: 0x2E9A90 Offset: 0x2E8290 VA: 0x1802E9A90
	public Vector2 get_size() { }
	// RVA: 0x2E9AB0 Offset: 0x2E82B0 VA: 0x1802E9AB0
	public void set_size(Vector2 value) { }
	// RVA: 0x2E9BC0 Offset: 0x2E83C0 VA: 0x1802E9BC0
	public float get_width() { }
	// RVA: 0x2E9BD0 Offset: 0x2E83D0 VA: 0x1802E9BD0
	public void set_width(float value) { }
	// RVA: 0x2E9C20 Offset: 0x2E8420 VA: 0x1802E9C20
	public float get_height() { }
	// RVA: 0x2E9C30 Offset: 0x2E8430 VA: 0x1802E9C30
	public void set_height(float value) { }
	// RVA: 0x2E9C80 Offset: 0x2E8480 VA: 0x1802E9C80
	public bool get_isDefaultWidth() { }
	// RVA: 0x2E9C90 Offset: 0x2E8490 VA: 0x1802E9C90
	public bool get_isDefaultHeight() { }
	// RVA: 0x2E9CA0 Offset: 0x2E84A0 VA: 0x1802E9CA0
	public bool get_isAutoFitting() { }
	// RVA: 0x2E9CB0 Offset: 0x2E84B0 VA: 0x1802E9CB0
	public void set_isAutoFitting(bool value) { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public Vector3[] get_corners() { }
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0
	public Vector3[] get_worldCorners() { }
	// RVA: 0x2E9CC0 Offset: 0x2E84C0 VA: 0x1802E9CC0
	public Vector4 get_margins() { }
	// RVA: 0x2E9CD0 Offset: 0x2E84D0 VA: 0x1802E9CD0
	public void set_margins(Vector4 value) { }
	// RVA: 0x2E9DB0 Offset: 0x2E85B0 VA: 0x1802E9DB0
	public RectTransform get_rectTransform() { }
	// RVA: 0x2E9E70 Offset: 0x2E8670 VA: 0x1802E9E70
	public TextMeshPro get_textMeshPro() { }
	// RVA: 0x2E9F30 Offset: 0x2E8730 VA: 0x1802E9F30 Slot: 4
	protected override void Awake() { }
	// RVA: 0x2EA040 Offset: 0x2E8840 VA: 0x1802EA040 Slot: 5
	protected override void OnEnable() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	protected override void OnDisable() { }
	// RVA: 0x2EA050 Offset: 0x2E8850 VA: 0x1802EA050
	private void OnContainerChanged() { }
	// RVA: 0x2EA2F0 Offset: 0x2E8AF0 VA: 0x1802EA2F0 Slot: 10
	protected override void OnRectTransformDimensionsChange() { }
	// RVA: 0x2EA7B0 Offset: 0x2E8FB0 VA: 0x1802EA7B0
	private void SetRect(Vector2 size) { }
	// RVA: 0x2EA800 Offset: 0x2E9000 VA: 0x1802EA800
	private void UpdateCorners() { }
	// RVA: 0x2EAAC0 Offset: 0x2E92C0 VA: 0x1802EAAC0
	private Vector2 GetPivot(TextContainerAnchors anchor) { }
	// RVA: 0x2EAC70 Offset: 0x2E9470 VA: 0x1802EAC70
	private TextContainerAnchors GetAnchorPosition(Vector2 pivot) { }
	// RVA: 0x2EAF80 Offset: 0x2E9780 VA: 0x1802EAF80
	public void .ctor() { }
	// RVA: 0x2EB030 Offset: 0x2E9830 VA: 0x1802EB030
	private static void .cctor() { }
}

// Namespace: 
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 2893
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 7BBE37982E6C057ED87163CAFC7FD6E5E42EEA46 /*Metadata offset 0x160055*/; // 0xABD20
}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=12 // TypeDefIndex: 2894
{}

// Namespace: 
internal class <Module> // TypeDefIndex: 2895
{}

// Namespace: VisualDesignCafe.Rendering
public class FrustumCuller // TypeDefIndex: 2896
{
	// Fields
	private const int PlaneCount = 6; // 0x0
	private Plane[] _planes; // 0x10
	private Vector3[] _absNormals; // 0x18
	private Vector3[] _planeNormal; // 0x20
	private float[] _planeDistance; // 0x28

	// Methods
	// RVA: 0x358C90 Offset: 0x357490 VA: 0x180358C90
	public void SetPlanes(Plane[] planes) { }
	// RVA: 0x358EA0 Offset: 0x3576A0 VA: 0x180358EA0
	public bool IsInFrustum(FrustumCuller.Box box) { }
	// RVA: 0x359510 Offset: 0x357D10 VA: 0x180359510
	public void .ctor() { }
}

// Namespace: 
public struct FrustumCuller.Box // TypeDefIndex: 2897
{
	// Fields
	public Vector3 Center; // 0x0
	public Vector3 Extends; // 0xC
}

// Namespace: VisualDesignCafe.Rendering.Nature
internal class BuildQueue // TypeDefIndex: 2898
{
	// Fields
	private Action OnFinished; // 0x10
	private readonly List<BuildQueue.CellBuildData> _cellsToRebuild; // 0x18
	private bool _log; // 0x20
	private bool _abort; // 0x21
	private int _processorCount; // 0x24

	// Properties
	public int ThreadCount { set; }

	// Methods
	// RVA: 0x348D90 Offset: 0x347590 VA: 0x180348D90
	public void add_OnFinished(Action value) { }
	// RVA: 0x348E70 Offset: 0x347670 VA: 0x180348E70
	public void remove_OnFinished(Action value) { }
	// RVA: 0x348F50 Offset: 0x347750 VA: 0x180348F50
	public void set_ThreadCount(int value) { }
	// RVA: 0x348FF0 Offset: 0x3477F0 VA: 0x180348FF0
	public void .ctor() { }
	// RVA: 0x3491B0 Offset: 0x3479B0 VA: 0x1803491B0
	public BuildQueue.CellBuildData[] GetQueue() { }
	// RVA: 0x349400 Offset: 0x347C00 VA: 0x180349400
	public void Clear() { }
	// RVA: 0x3495E0 Offset: 0x347DE0 VA: 0x1803495E0
	public void Dispose() { }
	// RVA: 0x3495F0 Offset: 0x347DF0 VA: 0x1803495F0
	public void AddRange(IEnumerable<BuildQueue.CellBuildData> cells) { }
	// RVA: 0x3497F0 Offset: 0x347FF0 VA: 0x1803497F0
	public void Sort(Vector3 referencePosition) { }
	// RVA: 0x349A50 Offset: 0x348250 VA: 0x180349A50
	public void Build() { }
	// RVA: 0x349B60 Offset: 0x348360 VA: 0x180349B60
	private void BuildAll(Action<int> finishedCallback) { }
	// RVA: 0x349C20 Offset: 0x348420 VA: 0x180349C20
	private bool BuildNext() { }
	// RVA: 0x349DC0 Offset: 0x3485C0 VA: 0x180349DC0
	private bool RebuildCellIfChanged(BuildQueue.CellBuildData cell) { }
	// RVA: 0x349E60 Offset: 0x348660 VA: 0x180349E60
	private BuildQueue.CellBuildData GetNextCell() { }
}

// Namespace: 
public struct BuildQueue.CellBuildData // TypeDefIndex: 2899
{
	// Fields
	public CachedTerrainData TerrainData; // 0x0
	public Cell Cell; // 0x8
	public bool[] DirtyLayers; // 0x10
	public TerrainChangedFlags Flags; // 0x18

	// Properties
	public bool RebuildAll { get; }
	public bool RebuildHeightmap { get; }

	// Methods
	// RVA: 0x26B50 Offset: 0x25F50 VA: 0x180026B50
	public bool get_RebuildAll() { }
	// RVA: 0x26B60 Offset: 0x25F60 VA: 0x180026B60
	public bool get_RebuildHeightmap() { }
	// RVA: 0x26B70 Offset: 0x25F70 VA: 0x180026B70
	public void .ctor(CachedTerrainData terrainData, Cell cell, bool[] dirtyLayers, TerrainChangedFlags flags) { }
}

// Namespace: 
private sealed class BuildQueue.<>c__DisplayClass16_0 // TypeDefIndex: 2900
{
	// Fields
	public Vector3 referencePosition; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x67B480 Offset: 0x679C80 VA: 0x18067B480
	internal int <Sort>b__0(BuildQueue.CellBuildData x, BuildQueue.CellBuildData y) { }
}

// Namespace: 
private sealed class BuildQueue.<>c__DisplayClass17_0 // TypeDefIndex: 2901
{
	// Fields
	public int usedThreads; // 0x10
	public int rebuiltCells; // 0x14
	public int finishedCount; // 0x18
	public int threadCount; // 0x1C
	public BuildQueue <>4__this; // 0x20
	public Stopwatch timer; // 0x28
	public WaitCallback <>9__1; // 0x30

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x67B640 Offset: 0x679E40 VA: 0x18067B640
	internal void <Build>g__onFinished|0(int count) { }
	// RVA: 0x67B6A0 Offset: 0x679EA0 VA: 0x18067B6A0
	internal void <Build>b__1(object obj) { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
public class CachedTerrainData // TypeDefIndex: 2902
{
	// Fields
	private float <Density>k__BackingField; // 0x10
	private Bounds <Bounds>k__BackingField; // 0x14
	private Vector3 <Position>k__BackingField; // 0x2C
	private Vector3 <Size>k__BackingField; // 0x38
	private int <DetailWidth>k__BackingField; // 0x44
	private int <DetailHeight>k__BackingField; // 0x48
	private TerrainDetail[] <DetailPrototypes>k__BackingField; // 0x50
	private int[,][] <DetailTextures>k__BackingField; // 0x58
	private int[,][] <PreviousDetailTextures>k__BackingField; // 0x60
	private int <HeightmapHeight>k__BackingField; // 0x68
	private int <HeightmapWidth>k__BackingField; // 0x6C
	private float[,] <Heights>k__BackingField; // 0x70
	private float[,] <PreviousHeights>k__BackingField; // 0x78
	private Vector3 <HeightmapScale>k__BackingField; // 0x80
	private Material <GrassBillboardMaterial>k__BackingField; // 0x90
	private readonly object _lock; // 0x98

	// Properties
	public float Density { get; set; }
	public Bounds Bounds { get; set; }
	public Vector3 Position { get; set; }
	public Vector3 Size { get; set; }
	public int DetailWidth { get; set; }
	public int DetailHeight { get; set; }
	public TerrainDetail[] DetailPrototypes { get; set; }
	public int[,][] DetailTextures { get; set; }
	public int[,][] PreviousDetailTextures { get; set; }
	public int HeightmapHeight { get; set; }
	public int HeightmapWidth { get; set; }
	public float[,] Heights { get; set; }
	public float[,] PreviousHeights { get; set; }
	public Vector3 HeightmapScale { get; set; }

	// Methods
	// RVA: 0x34A110 Offset: 0x348910 VA: 0x18034A110
	public float get_Density() { }
	// RVA: 0x2B3E10 Offset: 0x2B2610 VA: 0x1802B3E10
	private void set_Density(float value) { }
	// RVA: 0x34A120 Offset: 0x348920 VA: 0x18034A120
	public Bounds get_Bounds() { }
	// RVA: 0x34A140 Offset: 0x348940 VA: 0x18034A140
	private void set_Bounds(Bounds value) { }
	// RVA: 0x34A160 Offset: 0x348960 VA: 0x18034A160
	public Vector3 get_Position() { }
	// RVA: 0x34A180 Offset: 0x348980 VA: 0x18034A180
	private void set_Position(Vector3 value) { }
	// RVA: 0x34A190 Offset: 0x348990 VA: 0x18034A190
	public Vector3 get_Size() { }
	// RVA: 0x34A1B0 Offset: 0x3489B0 VA: 0x18034A1B0
	private void set_Size(Vector3 value) { }
	// RVA: 0x34A1C0 Offset: 0x3489C0 VA: 0x18034A1C0
	public int get_DetailWidth() { }
	// RVA: 0x34A1D0 Offset: 0x3489D0 VA: 0x18034A1D0
	private void set_DetailWidth(int value) { }
	// RVA: 0x1A20D0 Offset: 0x1A08D0 VA: 0x1801A20D0
	public int get_DetailHeight() { }
	// RVA: 0x1A20E0 Offset: 0x1A08E0 VA: 0x1801A20E0
	private void set_DetailHeight(int value) { }
	// RVA: 0x1E31F0 Offset: 0x1E19F0 VA: 0x1801E31F0
	public TerrainDetail[] get_DetailPrototypes() { }
	// RVA: 0x2701B0 Offset: 0x26E9B0 VA: 0x1802701B0
	private void set_DetailPrototypes(TerrainDetail[] value) { }
	// RVA: 0x3120C0 Offset: 0x3108C0 VA: 0x1803120C0
	public int[,][] get_DetailTextures() { }
	// RVA: 0x3120D0 Offset: 0x3108D0 VA: 0x1803120D0
	private void set_DetailTextures(int[,][] value) { }
	// RVA: 0x29E380 Offset: 0x29CB80 VA: 0x18029E380
	public int[,][] get_PreviousDetailTextures() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0
	private void set_PreviousDetailTextures(int[,][] value) { }
	// RVA: 0x34A1E0 Offset: 0x3489E0 VA: 0x18034A1E0
	public int get_HeightmapHeight() { }
	// RVA: 0x34A1F0 Offset: 0x3489F0 VA: 0x18034A1F0
	private void set_HeightmapHeight(int value) { }
	// RVA: 0x34A200 Offset: 0x348A00 VA: 0x18034A200
	public int get_HeightmapWidth() { }
	// RVA: 0x34A210 Offset: 0x348A10 VA: 0x18034A210
	private void set_HeightmapWidth(int value) { }
	// RVA: 0x262A80 Offset: 0x261280 VA: 0x180262A80
	public float[,] get_Heights() { }
	// RVA: 0x345180 Offset: 0x343980 VA: 0x180345180
	private void set_Heights(float[,] value) { }
	// RVA: 0x34A220 Offset: 0x348A20 VA: 0x18034A220
	public float[,] get_PreviousHeights() { }
	// RVA: 0x34A230 Offset: 0x348A30 VA: 0x18034A230
	private void set_PreviousHeights(float[,] value) { }
	// RVA: 0x34A240 Offset: 0x348A40 VA: 0x18034A240
	public Vector3 get_HeightmapScale() { }
	// RVA: 0x34A260 Offset: 0x348A60 VA: 0x18034A260
	private void set_HeightmapScale(Vector3 value) { }
	// RVA: 0x34A280 Offset: 0x348A80 VA: 0x18034A280
	public void .ctor(CachedTerrainData other) { }
	// RVA: 0x34A570 Offset: 0x348D70 VA: 0x18034A570
	public void .ctor(Terrain terrain, Material billboardMaterial) { }
	// RVA: 0x34A630 Offset: 0x348E30 VA: 0x18034A630
	internal void Dispose() { }
	// RVA: 0x34A690 Offset: 0x348E90 VA: 0x18034A690
	internal void RefreshPrototypes(Terrain terrain, Camera camera, Material billboardMaterial, out bool flushEverything) { }
	// RVA: 0x34A8F0 Offset: 0x3490F0 VA: 0x18034A8F0
	internal void CopyFrom(Terrain terrain, Material billboardMaterial, out bool flushEverything) { }
	// RVA: 0x34B850 Offset: 0x34A050 VA: 0x18034B850
	internal Rect GetModifiedHeightmapRect(bool exact) { }
	// RVA: 0x34BB60 Offset: 0x34A360 VA: 0x18034BB60
	internal Rect GetModifiedDetailMapRect(bool[] dirtyLayers, bool exact) { }
	// RVA: 0x34BDE0 Offset: 0x34A5E0 VA: 0x18034BDE0
	internal Rect GetModifiedDetailMapRect(int layer, bool exact) { }
	// RVA: 0x34C1B0 Offset: 0x34A9B0 VA: 0x18034C1B0
	internal float GetHeight(int x, int y) { }
	// RVA: 0x34C2E0 Offset: 0x34AAE0 VA: 0x18034C2E0
	internal float GetInterpolatedHeight(float x, float y) { }
	// RVA: 0x34C420 Offset: 0x34AC20 VA: 0x18034C420
	internal Vector3 GetInterpolatedNormal(float x, float y) { }
	// RVA: 0x34C750 Offset: 0x34AF50 VA: 0x18034C750
	internal bool[] GetDirtyLayers() { }
	// RVA: 0x34C8B0 Offset: 0x34B0B0 VA: 0x18034C8B0
	private void CopyDetailTextureFrom(TerrainData data, int layer) { }
	// RVA: 0x34CB50 Offset: 0x34B350 VA: 0x18034CB50
	private void CopyHeightmapFrom(TerrainData data) { }
	// RVA: 0x34CCA0 Offset: 0x34B4A0 VA: 0x18034CCA0
	private int Hash(int[,] array) { }
}

// Namespace: 
private sealed class CachedTerrainData.<>c__DisplayClass66_0 // TypeDefIndex: 2903
{
	// Fields
	public CachedTerrainData <>4__this; // 0x10
	public float minX; // 0x18
	public float minY; // 0x1C
	public float maxX; // 0x20
	public float maxY; // 0x24
	public bool hasModifications; // 0x28

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x67B7E0 Offset: 0x679FE0 VA: 0x18067B7E0
	internal void <GetModifiedHeightmapRect>b__0(int x) { }
}

// Namespace: 
private sealed class CachedTerrainData.<>c__DisplayClass68_0 // TypeDefIndex: 2904
{
	// Fields
	public int[,] detailTexture; // 0x10
	public int[,] previousDetailTexture; // 0x18
	public CachedTerrainData <>4__this; // 0x20
	public float minX; // 0x28
	public float minY; // 0x2C
	public float maxX; // 0x30
	public float maxY; // 0x34
	public bool hasModifications; // 0x38

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x67BAE0 Offset: 0x67A2E0 VA: 0x18067BAE0
	internal void <GetModifiedDetailMapRect>b__0(int x) { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
public class Cell // TypeDefIndex: 2905
{
	// Fields
	private Cell.BuildStatus <IsBuilt>k__BackingField; // 0x10
	private bool <BuildIsDirty>k__BackingField; // 0x14
	private bool <IsBuilding>k__BackingField; // 0x15
	private Dictionary<int, Cell.VisibilityState> <IsRendered>k__BackingField; // 0x18
	private Bounds <WorldBounds>k__BackingField; // 0x20
	private Bounds <LocalBounds>k__BackingField; // 0x38
	private float <LocalBoundsExtends>k__BackingField; // 0x50
	private Rect <Rect>k__BackingField; // 0x54
	private DetailLayer[] <DetailLayers>k__BackingField; // 0x68
	public readonly object DetailLayersLock; // 0x70
	private float <SqrDistanceToCamera>k__BackingField; // 0x78
	private readonly PlacementAlgorithm _placementAlgorithm; // 0x80
	private CachedTerrainData _terrainData; // 0x88
	private Vector3 _pixelToTerrain; // 0x90
	private bool _hasHeightBounds; // 0x9C
	private float[,] _cachedDistances; // 0xA0
	private float _cachedDistanceToCenter; // 0xA8

	// Properties
	public Cell.BuildStatus IsBuilt { get; set; }
	public bool BuildIsDirty { get; set; }
	public bool IsBuilding { get; set; }
	public Dictionary<int, Cell.VisibilityState> IsRendered { get; set; }
	public Bounds WorldBounds { get; set; }
	public Bounds LocalBounds { get; set; }
	public float LocalBoundsExtends { get; set; }
	public Rect Rect { get; set; }
	internal DetailLayer[] DetailLayers { get; set; }
	public float SqrDistanceToCamera { get; set; }

	// Methods
	// RVA: 0x198900 Offset: 0x197100 VA: 0x180198900
	public Cell.BuildStatus get_IsBuilt() { }
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	private void set_IsBuilt(Cell.BuildStatus value) { }
	// RVA: 0x34CE20 Offset: 0x34B620 VA: 0x18034CE20
	public bool get_BuildIsDirty() { }
	// RVA: 0x2DA320 Offset: 0x2D8B20 VA: 0x1802DA320
	public void set_BuildIsDirty(bool value) { }
	// RVA: 0x34CE30 Offset: 0x34B630 VA: 0x18034CE30
	public bool get_IsBuilding() { }
	// RVA: 0x2DA330 Offset: 0x2D8B30 VA: 0x1802DA330
	internal void set_IsBuilding(bool value) { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public Dictionary<int, Cell.VisibilityState> get_IsRendered() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	internal void set_IsRendered(Dictionary<int, Cell.VisibilityState> value) { }
	// RVA: 0x34CE40 Offset: 0x34B640 VA: 0x18034CE40
	public Bounds get_WorldBounds() { }
	// RVA: 0x34CE60 Offset: 0x34B660 VA: 0x18034CE60
	private void set_WorldBounds(Bounds value) { }
	// RVA: 0x34CE80 Offset: 0x34B680 VA: 0x18034CE80
	public Bounds get_LocalBounds() { }
	// RVA: 0x34CEA0 Offset: 0x34B6A0 VA: 0x18034CEA0
	private void set_LocalBounds(Bounds value) { }
	// RVA: 0x34CEC0 Offset: 0x34B6C0 VA: 0x18034CEC0
	public float get_LocalBoundsExtends() { }
	// RVA: 0x34CED0 Offset: 0x34B6D0 VA: 0x18034CED0
	private void set_LocalBoundsExtends(float value) { }
	// RVA: 0x34CEE0 Offset: 0x34B6E0 VA: 0x18034CEE0
	public Rect get_Rect() { }
	// RVA: 0x34CEF0 Offset: 0x34B6F0 VA: 0x18034CEF0
	private void set_Rect(Rect value) { }
	// RVA: 0x262A70 Offset: 0x261270 VA: 0x180262A70
	internal DetailLayer[] get_DetailLayers() { }
	// RVA: 0x21EFD0 Offset: 0x21D7D0 VA: 0x18021EFD0
	private void set_DetailLayers(DetailLayer[] value) { }
	// RVA: 0x34CF00 Offset: 0x34B700 VA: 0x18034CF00
	public float get_SqrDistanceToCamera() { }
	// RVA: 0x34CF10 Offset: 0x34B710 VA: 0x18034CF10
	public void set_SqrDistanceToCamera(float value) { }
	// RVA: 0x34CF20 Offset: 0x34B720 VA: 0x18034CF20
	public void .ctor(CachedTerrainData terrainData, Bounds bounds) { }
	// RVA: 0x34D7B0 Offset: 0x34BFB0 VA: 0x18034D7B0
	internal Cell.VisibilityState GetIsRendered(int cameraHash) { }
	// RVA: 0x34D890 Offset: 0x34C090 VA: 0x18034D890
	internal void ClearCachedDistances() { }
	// RVA: 0x34D980 Offset: 0x34C180 VA: 0x18034D980
	internal float GetCachedDistance(Vector3 cameraPosition, Vector3 terrainPosition) { }
	// RVA: 0x34DAD0 Offset: 0x34C2D0 VA: 0x18034DAD0
	internal float GetCachedDistanceSqr(int x, int z, Bounds localBounds, Vector3 cameraPosition, Vector3 terrainPosition) { }
	// RVA: 0x34DD20 Offset: 0x34C520 VA: 0x18034DD20
	internal void OnDrawGizmos() { }
	// RVA: 0x34DED0 Offset: 0x34C6D0 VA: 0x18034DED0
	internal void Dispose() { }
	// RVA: 0x34E110 Offset: 0x34C910 VA: 0x18034E110
	internal void Clear() { }
	// RVA: 0x34E330 Offset: 0x34CB30 VA: 0x18034E330
	internal void Refresh() { }
	// RVA: 0x34E510 Offset: 0x34CD10 VA: 0x18034E510
	internal int Build(int[,][] detailTextures, bool[] dirtyLayers, float density) { }
	// RVA: 0x34F030 Offset: 0x34D830 VA: 0x18034F030
	private bool BuildDetailLayer(int[,] detailTexture, Rect pixelRange, int layer, float density, ref float minHeight, ref float maxHeight) { }
	// RVA: 0x34F720 Offset: 0x34DF20 VA: 0x18034F720
	private bool BuildDetail(TerrainDetail detail, float pixelX, float pixelY, Rect pixelRange, int[,] detailTexture, int layer, DetailLayer detailLayer, float density, out float height) { }
}

// Namespace: 
public enum Cell.VisibilityState // TypeDefIndex: 2906
{
	// Fields
	public int value__; // 0x0
	public const Cell.VisibilityState Hidden = 0; // 0x0
	public const Cell.VisibilityState VisibleOrChanged = 1; // 0x0
	public const Cell.VisibilityState Rendered = 2; // 0x0
}

// Namespace: 
public enum Cell.BuildStatus // TypeDefIndex: 2907
{
	// Fields
	public int value__; // 0x0
	public const Cell.BuildStatus None = 0; // 0x0
	public const Cell.BuildStatus Partial = 1; // 0x0
	public const Cell.BuildStatus Full = 2; // 0x0
}

// Namespace: VisualDesignCafe.Rendering.Nature
public class CellStreamer // TypeDefIndex: 2908
{
	// Fields
	public CellStreamer.StreamSettings Settings; // 0x10
	private readonly List<Camera> _cameras; // 0x28
	private readonly Cell[] _cellsToStream; // 0x30
	private readonly Grid _terrainCells; // 0x38
	private readonly CachedTerrainData _terrainData; // 0x40
	private Camera[] _sceneCameras; // 0x48
	private List<Camera> _sceneViewCameras; // 0x50
	private int _totalCellsInRange; // 0x58
	private int _totalCellsBuilt; // 0x5C
	private Dictionary<Camera, string> _cameraNameLookup; // 0x60

	// Methods
	// RVA: 0x34FC60 Offset: 0x34E460 VA: 0x18034FC60
	public void .ctor(Grid cells, CachedTerrainData terrainData) { }
	// RVA: 0x34FE10 Offset: 0x34E610 VA: 0x18034FE10
	public float GetVisibleCellBuildProgress() { }
	// RVA: 0x34FE30 Offset: 0x34E630 VA: 0x18034FE30
	public void Stream(Camera camera) { }
	// RVA: 0x350370 Offset: 0x34EB70 VA: 0x180350370
	private void Stream(List<Camera> cameras, Cell[,] cells) { }
	// RVA: 0x350C30 Offset: 0x34F430 VA: 0x180350C30
	private string CameraName(Camera camera) { }
}

// Namespace: 
public struct CellStreamer.StreamSettings // TypeDefIndex: 2909
{
	// Fields
	public bool Stream; // 0x0
	public Vector2 ReferencePosition; // 0x4
	public float StreamInDistance; // 0xC
	public float StreamOutDistance; // 0x10
	public float ProcessorLimit; // 0x14
}

// Namespace: VisualDesignCafe.Rendering.Nature
internal class CpuCuller // TypeDefIndex: 2910
{
	// Fields
	private bool <IsCached>k__BackingField; // 0x10
	private readonly Cell _cell; // 0x18
	private readonly FrustumCuller _frustumCuller; // 0x20
	private float _distanceToCamera; // 0x28
	private float _closestPoint; // 0x2C
	private float _furthestPoint; // 0x30

	// Properties
	public bool IsCached { get; set; }

	// Methods
	// RVA: 0x1E30F0 Offset: 0x1E18F0 VA: 0x1801E30F0
	public bool get_IsCached() { }
	// RVA: 0x350D70 Offset: 0x34F570 VA: 0x180350D70
	private void set_IsCached(bool value) { }
	// RVA: 0x350D80 Offset: 0x34F580 VA: 0x180350D80
	public void .ctor(Cell cell, FrustumCuller frustumCuller) { }
	// RVA: 0x350E90 Offset: 0x34F690 VA: 0x180350E90
	public CpuCuller Cache(Vector3 terrainPosition, Vector3 cameraPosition) { }
	// RVA: 0x351030 Offset: 0x34F830 VA: 0x180351030
	public bool CellIsInFadeOutRange(float cullDistance, float fadeOutRange) { }
	// RVA: 0x351040 Offset: 0x34F840 VA: 0x180351040
	public bool CellIsInRange(float cullDistance) { }
	// RVA: 0x351050 Offset: 0x34F850 VA: 0x180351050
	public float MinDistanceToChangeLod(TerrainDetail detail) { }
	// RVA: 0x351150 Offset: 0x34F950 VA: 0x180351150
	public bool GetLodRange(TerrainDetail detail, float cullDistance, out int minLod, out int maxLod) { }
	// RVA: 0x351290 Offset: 0x34FA90 VA: 0x180351290
	public int SelectWithinRange(DetailLayer detailLayer, Vector3 cameraPosition, Vector3 terrainPosition, float minDistance, float maxDistance, List<InstanceBufferSlice> groups) { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
internal class CpuStream // TypeDefIndex: 2911
{
	// Fields
	private readonly CpuCuller <Culler>k__BackingField; // 0x10
	private readonly RendererFactory _rendererFactory; // 0x18
	private readonly object _lock; // 0x20
	private readonly Dictionary<InstanceRenderer, List<InstanceBuffer>> _groups; // 0x28
	private List<InstanceBuffer> _slices; // 0x30
	private List<InstanceBufferSlice> _groupsToAdd; // 0x38

	// Properties
	public CpuCuller Culler { get; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public CpuCuller get_Culler() { }
	// RVA: 0x351950 Offset: 0x350150 VA: 0x180351950
	public void .ctor(CpuCuller culler, RendererFactory rendererFactory) { }
	// RVA: 0x351B50 Offset: 0x350350 VA: 0x180351B50
	public void Dispose() { }
	// RVA: 0x351E40 Offset: 0x350640 VA: 0x180351E40
	public void RemoveDetailLayersFromRenderers() { }
	// RVA: 0x352110 Offset: 0x350910 VA: 0x180352110
	public void CopyDetailLayerToRenderer(Cell cell, DetailLayer detailLayer, CpuStream.RenderSettings data) { }
	// RVA: 0x352780 Offset: 0x350F80 VA: 0x180352780
	private bool CopyLodToRenderer(DetailLayer detailLayer, int lod, CpuCuller culler, ref CpuStream.RenderSettings data) { }
	// RVA: 0x352A70 Offset: 0x351270 VA: 0x180352A70
	private void CopyInstancesToRenderer(DetailLayer detailLayer, TerrainDetail.LodGroup lod, InstanceBufferSlice group) { }
}

// Namespace: 
internal struct CpuStream.RenderSettings // TypeDefIndex: 2912
{
	// Fields
	public Vector3 TerrainPosition; // 0x0
	public Vector3 CameraPosition; // 0xC
	public float CullDistance; // 0x18
}

// Namespace: VisualDesignCafe.Rendering.Nature
internal class DetailLayer // TypeDefIndex: 2913
{
	// Fields
	private const int _BATCH_SIZE = 1023; // 0x0
	private DetailLayer.Tile[,] <Tiles>k__BackingField; // 0x10
	private TerrainDetail <Detail>k__BackingField; // 0x18
	private float <SqrDeltaDistanceThreshold>k__BackingField; // 0x20
	private Vector3 <PositionOfLastFlush>k__BackingField; // 0x24
	private readonly Cell _cell; // 0x30
	private readonly int _tileCount; // 0x38
	private Matrix4x4[] _instances; // 0x40
	private Vector4[] _colors; // 0x48
	private int _instanceIndex; // 0x50
	private Dictionary<int, InstanceRenderer> _cachedRenderers; // 0x58
	private int _renderedTiles; // 0x60
	private int _gizmoRenderCall; // 0x64

	// Properties
	public DetailLayer.Tile[,] Tiles { get; set; }
	public int InstanceCount { get; }
	public Matrix4x4[] Instances { get; }
	public Vector4[] Colors { get; }
	public TerrainDetail Detail { get; set; }
	public float SqrDeltaDistanceThreshold { get; set; }
	public Vector3 PositionOfLastFlush { get; set; }
	public int Capacity { get; }
	public long Memory { get; }

	// Methods
	// RVA: 0x1AC470 Offset: 0x1AAC70 VA: 0x1801AC470
	public DetailLayer.Tile[,] get_Tiles() { }
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	private void set_Tiles(DetailLayer.Tile[,] value) { }
	// RVA: 0x352D50 Offset: 0x351550 VA: 0x180352D50
	public int get_InstanceCount() { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public Matrix4x4[] get_Instances() { }
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0
	public Vector4[] get_Colors() { }
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public TerrainDetail get_Detail() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	private void set_Detail(TerrainDetail value) { }
	// RVA: 0x1FED10 Offset: 0x1FD510 VA: 0x1801FED10
	public float get_SqrDeltaDistanceThreshold() { }
	// RVA: 0x352D60 Offset: 0x351560 VA: 0x180352D60
	public void set_SqrDeltaDistanceThreshold(float value) { }
	// RVA: 0x352D70 Offset: 0x351570 VA: 0x180352D70
	public Vector3 get_PositionOfLastFlush() { }
	// RVA: 0x352D90 Offset: 0x351590 VA: 0x180352D90
	public void set_PositionOfLastFlush(Vector3 value) { }
	// RVA: 0x352DA0 Offset: 0x3515A0 VA: 0x180352DA0
	public int get_Capacity() { }
	// RVA: 0x352DC0 Offset: 0x3515C0 VA: 0x180352DC0
	public long get_Memory() { }
	// RVA: 0x352DF0 Offset: 0x3515F0 VA: 0x180352DF0
	public void .ctor(TerrainDetail detail, Cell cell) { }
	// RVA: 0x352EE0 Offset: 0x3516E0 VA: 0x180352EE0
	public void OnDrawGizmos() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	public void UpdateReference(TerrainDetail detail) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void Dispose() { }
	// RVA: 0x353090 Offset: 0x351890 VA: 0x180353090
	public void AddInstance(Matrix4x4 matrix, Vector3 samplePosition) { }
	// RVA: 0x353B80 Offset: 0x352380 VA: 0x180353B80
	public void PostBuild() { }
	// RVA: 0x353E30 Offset: 0x352630 VA: 0x180353E30
	private Vector4 CalculateColor(Vector3 position) { }
}

// Namespace: 
internal struct DetailLayer.Tile // TypeDefIndex: 2914
{
	// Fields
	public int X; // 0x0
	public int Z; // 0x4
	public bool HasInstances; // 0x8
	public Bounds LocalBounds; // 0xC
	public Bounds WorldBounds; // 0x24
	public Matrix4x4[] Instances; // 0x40
	public Vector4[] Colors; // 0x48
	public int InstanceCount; // 0x50
}

// Namespace: VisualDesignCafe.Rendering.Nature
public class DetailRenderer : IDisposable // TypeDefIndex: 2915
{
	// Fields
	private static object _sharedLock; // 0x0
	private EventHandler<DetailRenderer> Disposed; // 0x10
	public readonly Camera Camera; // 0x18
	internal readonly int CameraId; // 0x20
	private Camera <ReferenceCamera>k__BackingField; // 0x28
	public readonly RendererFactory RendererFactory; // 0x30
	private bool <VisibleCellsChanged>k__BackingField; // 0x38
	private Dictionary<int, InstanceRenderer> <Renderers>k__BackingField; // 0x40
	private RenderDiagnostics <Diagnostics>k__BackingField; // 0x48
	private int <ThreadCount>k__BackingField; // 0x80
	private readonly Grid _grid; // 0x88
	private Vector3 _cameraPosition; // 0x90
	private Vector3 _terrainPosition; // 0x9C
	private float _cullDistance; // 0xA8
	private FrustumCuller _frustumCuller; // 0xB0
	private Plane[] _frustumPlanes; // 0xB8
	private Dictionary<Cell, CpuStream> _cachedStreams; // 0xC0
	private Stopwatch _renderTimer; // 0xC8
	private int _culledCellInstances; // 0xD0
	private int _outOfRangeInstances; // 0xD4
	private int _builtCells; // 0xD8
	private long _memoryUsage; // 0xE0
	private RenderThread[] _renderThreads; // 0xE8
	private RenderThreadSyncer _syncer; // 0xF0
	private CancellationTokenSource _cancellationTokenSource; // 0xF8
	private RenderThread.ThreadInfo _mnainThread; // 0x100
	private bool _isStarted; // 0x108

	// Properties
	public Camera ReferenceCamera { get; set; }
	public bool VisibleCellsChanged { get; set; }
	public Dictionary<int, InstanceRenderer> Renderers { get; set; }
	private RenderDiagnostics Diagnostics { set; }
	public int ThreadCount { get; set; }

	// Methods
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public Camera get_ReferenceCamera() { }
	// RVA: 0x207510 Offset: 0x205D10 VA: 0x180207510
	public void set_ReferenceCamera(Camera value) { }
	// RVA: 0x2E9C80 Offset: 0x2E8480 VA: 0x1802E9C80
	public bool get_VisibleCellsChanged() { }
	// RVA: 0x354270 Offset: 0x352A70 VA: 0x180354270
	private void set_VisibleCellsChanged(bool value) { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public Dictionary<int, InstanceRenderer> get_Renderers() { }
	// RVA: 0x16F140 Offset: 0x16D940 VA: 0x18016F140
	private void set_Renderers(Dictionary<int, InstanceRenderer> value) { }
	// RVA: 0x354280 Offset: 0x352A80 VA: 0x180354280
	private void set_Diagnostics(RenderDiagnostics value) { }
	// RVA: 0x3542B0 Offset: 0x352AB0 VA: 0x1803542B0
	public int get_ThreadCount() { }
	// RVA: 0x3542C0 Offset: 0x352AC0 VA: 0x1803542C0
	private void set_ThreadCount(int value) { }
	// RVA: 0x3542D0 Offset: 0x352AD0 VA: 0x1803542D0
	public void .ctor(Camera camera, Grid grid, bool isScriptableRenderPipeline) { }
	// RVA: 0x354590 Offset: 0x352D90 VA: 0x180354590
	public void Start(int threadCount) { }
	// RVA: 0x354E10 Offset: 0x353610 VA: 0x180354E10 Slot: 4
	public void Dispose() { }
	// RVA: 0x355240 Offset: 0x353A40 VA: 0x180355240
	public bool Render(bool useCache, bool allowPartialRender) { }
	// RVA: 0x3558A0 Offset: 0x3540A0 VA: 0x1803558A0
	public void PrepareNextFrame(RenderSettings settings, bool async = True) { }
	// RVA: 0x355EB0 Offset: 0x3546B0 VA: 0x180355EB0
	protected void OnCalculateDiagnostics(RenderThread.ThreadInfo thread, RenderThreadSyncer syncer) { }
	// RVA: 0x356360 Offset: 0x354B60 VA: 0x180356360
	protected bool OnCullCells(RenderThread.ThreadInfo thread, RenderThreadSyncer syncer) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	protected void OnBeginBatch(RenderThread.ThreadInfo thread, RenderThreadSyncer syncer) { }
	// RVA: 0x3565F0 Offset: 0x354DF0 VA: 0x1803565F0
	protected void OnCopyDetailLayersToRenderers(RenderThread.ThreadInfo thread, RenderThreadSyncer syncer) { }
	// RVA: 0x356C30 Offset: 0x355430 VA: 0x180356C30
	protected void OnFinalize(RenderThread.ThreadInfo thread, RenderThreadSyncer syncer) { }
	// RVA: 0x356EE0 Offset: 0x3556E0 VA: 0x180356EE0
	private void RemoveDetailLayersFromRenderers(RenderThread.ThreadInfo thread, Cell cell) { }
	// RVA: 0x356FD0 Offset: 0x3557D0 VA: 0x180356FD0
	private void AddDetailLayersToRenderers(RenderThread.ThreadInfo thread, Cell cell) { }
	// RVA: 0x3574B0 Offset: 0x355CB0 VA: 0x1803574B0
	private bool CellIsHiddenOrDirty(Cell cell) { }
	// RVA: 0x3575C0 Offset: 0x355DC0 VA: 0x1803575C0
	private bool CellIsVisibleOrDirty(Cell cell) { }
	// RVA: 0x3576E0 Offset: 0x355EE0 VA: 0x1803576E0
	private void AddCellToRenderers(RenderThread.ThreadInfo thread, Cell cell) { }
	// RVA: 0x357980 Offset: 0x356180 VA: 0x180357980
	private bool LayerIsCulled(Camera camera, int layer) { }
	// RVA: 0x357A50 Offset: 0x356250 VA: 0x180357A50
	private bool InstancingEnabled(Material[] materials) { }
	// RVA: 0x357B60 Offset: 0x356360 VA: 0x180357B60
	private double MaxFillTime(RenderThread[] array) { }
	// RVA: 0x357BD0 Offset: 0x3563D0 VA: 0x180357BD0
	private void CullCell(RenderThread.ThreadInfo thread, Cell cell, Vector3 cameraPosition, ref bool visibleCellsChanged, FrustumCuller frustumCuller) { }
	// RVA: 0x3583E0 Offset: 0x356BE0 VA: 0x1803583E0
	private CpuCuller GetCellCuller(Cell cell) { }
	// RVA: 0x3584D0 Offset: 0x356CD0 VA: 0x1803584D0
	private void CheckMovementThresholds(Cell cell, Vector3 cameraPosition, CpuCuller cpuCuller, ref bool visibleCellsChanged) { }
	// RVA: 0x358700 Offset: 0x356F00 VA: 0x180358700
	private void OnCellLodChanged(Cell cell, ref bool visibleCellsChanged) { }
	// RVA: 0x358720 Offset: 0x356F20 VA: 0x180358720
	private void SetCellVisibleOrChanged(Cell cell, ref bool visibleCellsChanged) { }
	// RVA: 0x358790 Offset: 0x356F90 VA: 0x180358790
	private void SetCellInvisible(Cell cell, ref bool visibleCellsChanged) { }
	// RVA: 0x3587F0 Offset: 0x356FF0 VA: 0x1803587F0
	private void OnCellVisibilityChanged(Cell cell, Cell.VisibilityState state, ref bool visibleCellsChanged) { }
	// RVA: 0x3588C0 Offset: 0x3570C0 VA: 0x1803588C0
	private bool DistanceCull(Cell cell, Vector3 cameraPosition, float cullDistance) { }
	// RVA: 0x358A20 Offset: 0x357220 VA: 0x180358A20
	private bool FrustumCull(Cell cell, Vector3 position, FrustumCuller frustumCuller) { }
	// RVA: 0x358B90 Offset: 0x357390 VA: 0x180358B90
	private static void .cctor() { }
	// RVA: 0x358C10 Offset: 0x357410 VA: 0x180358C10
	private void <PrepareNextFrame>b__49_0() { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
public class Grid // TypeDefIndex: 2916
{
	// Fields
	private Action<TerrainChangedFlags> WillBuild; // 0x10
	public readonly Terrain Terrain; // 0x18
	private bool <IsBuiltOrBuilding>k__BackingField; // 0x20
	private bool <IsBuilding>k__BackingField; // 0x21
	private TerrainChangedFlags <CurrentBuildFlags>k__BackingField; // 0x24
	private CachedTerrainData <TerrainData>k__BackingField; // 0x28
	private Cell[,] <Cells>k__BackingField; // 0x30
	private readonly float _cellSize; // 0x38
	private Camera _camera; // 0x40
	private Vector3 _cameraPosition; // 0x48
	private BuildQueue _buildQueue; // 0x58

	// Properties
	internal bool IsBuiltOrBuilding { get; set; }
	internal bool IsBuilding { get; set; }
	private TerrainChangedFlags CurrentBuildFlags { set; }
	internal CachedTerrainData TerrainData { get; set; }
	internal Bounds Bounds { get; }
	public Cell[,] Cells { get; set; }
	internal float CellSize { get; }
	internal float TileSize { get; }

	// Methods
	// RVA: 0x3595D0 Offset: 0x357DD0 VA: 0x1803595D0
	public void add_WillBuild(Action<TerrainChangedFlags> value) { }
	// RVA: 0x3596B0 Offset: 0x357EB0 VA: 0x1803596B0
	public void remove_WillBuild(Action<TerrainChangedFlags> value) { }
	// RVA: 0x20B410 Offset: 0x209C10 VA: 0x18020B410
	internal bool get_IsBuiltOrBuilding() { }
	// RVA: 0x20B420 Offset: 0x209C20 VA: 0x18020B420
	private void set_IsBuiltOrBuilding(bool value) { }
	// RVA: 0x29DF10 Offset: 0x29C710 VA: 0x18029DF10
	internal bool get_IsBuilding() { }
	// RVA: 0x29DF20 Offset: 0x29C720 VA: 0x18029DF20
	private void set_IsBuilding(bool value) { }
	// RVA: 0x20B430 Offset: 0x209C30 VA: 0x18020B430
	private void set_CurrentBuildFlags(TerrainChangedFlags value) { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	internal CachedTerrainData get_TerrainData() { }
	// RVA: 0x207510 Offset: 0x205D10 VA: 0x180207510
	private void set_TerrainData(CachedTerrainData value) { }
	// RVA: 0x359790 Offset: 0x357F90 VA: 0x180359790
	internal Bounds get_Bounds() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public Cell[,] get_Cells() { }
	// RVA: 0x1A20C0 Offset: 0x1A08C0 VA: 0x1801A20C0
	private void set_Cells(Cell[,] value) { }
	// RVA: 0x1FEFA0 Offset: 0x1FD7A0 VA: 0x1801FEFA0
	internal float get_CellSize() { }
	// RVA: 0x3597E0 Offset: 0x357FE0 VA: 0x1803597E0
	internal float get_TileSize() { }
	// RVA: 0x3597F0 Offset: 0x357FF0 VA: 0x1803597F0
	public void .ctor(Terrain terrain, float cellSize) { }
	// RVA: 0x359800 Offset: 0x358000 VA: 0x180359800
	public void Dispose() { }
	// RVA: 0x359CB0 Offset: 0x3584B0 VA: 0x180359CB0
	public void RefreshPrototypes(Camera camera, Material billboardMaterial, out bool requiresRebuild) { }
	// RVA: 0x359CF0 Offset: 0x3584F0 VA: 0x180359CF0
	public void Initialize(Material billboardMaterial) { }
	// RVA: 0x359DF0 Offset: 0x3585F0 VA: 0x180359DF0
	internal void Build(Cell[] cells, int count, CachedTerrainData terrainData, CellStreamer.StreamSettings streamInfo) { }
	// RVA: 0x35A0D0 Offset: 0x3588D0 VA: 0x18035A0D0
	public void Rebuild(TerrainChangedFlags flags, Camera priorityCamera, Material billboardMaterial, CellStreamer.StreamSettings streamInfo) { }
	// RVA: 0x35A240 Offset: 0x358A40 VA: 0x18035A240
	public void WaitUntilBuildFinished() { }
	// RVA: 0x35A420 Offset: 0x358C20 VA: 0x18035A420
	public void Clear() { }
	// RVA: 0x35A5C0 Offset: 0x358DC0 VA: 0x18035A5C0
	private void OnBuildFinished() { }
	// RVA: 0x35A5D0 Offset: 0x358DD0 VA: 0x18035A5D0
	private void CacheTerrainData(Material billboardMaterial, out bool flushEverything) { }
	// RVA: 0x35A880 Offset: 0x359080 VA: 0x18035A880
	private PooledList<BuildQueue.CellBuildData> GetCellsInRect(Rect rect, bool[] dirtyLayers, TerrainChangedFlags flags, CachedTerrainData terrainData) { }
	// RVA: 0x35AB60 Offset: 0x359360 VA: 0x18035AB60
	private void ValidateCells(CachedTerrainData terrainData, float cellSize) { }
	// RVA: 0x35B090 Offset: 0x359890 VA: 0x18035B090
	private void PushAllCellsToBuildQueue(CachedTerrainData terrainData, CellStreamer.StreamSettings streamInfo) { }
	// RVA: 0x35B4D0 Offset: 0x359CD0 VA: 0x18035B4D0
	private void PushModifiedCellsToBuildQueue(CachedTerrainData terrainData, TerrainChangedFlags flags, bool[] dirtyLayers, CellStreamer.StreamSettings streamInfo) { }
	// RVA: 0x35B830 Offset: 0x35A030 VA: 0x18035B830
	private bool[] GetDirtyLayers(CachedTerrainData terrainData, TerrainChangedFlags flags) { }
	// RVA: 0x35BB80 Offset: 0x35A380 VA: 0x18035BB80
	private void RebuildCells(float size, TerrainChangedFlags flags, CachedTerrainData terrainData, Camera priorityCamera, CellStreamer.StreamSettings streamInfo) { }
}

// Namespace: 
private sealed class Grid.<>c__DisplayClass51_0 // TypeDefIndex: 2917
{
	// Fields
	public Grid <>4__this; // 0x10
	public CachedTerrainData terrainDataCopy; // 0x18
	public TerrainChangedFlags flags; // 0x20
	public CellStreamer.StreamSettings streamInfo; // 0x24
	public Camera priorityCamera; // 0x40

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x67BDE0 Offset: 0x67A5E0 VA: 0x18067BDE0
	internal void <RebuildCells>b__0(object obj) { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
public class MeshGenerator : IDisposable // TypeDefIndex: 2918
{
	// Fields
	private List<Object> _managedResources; // 0x10

	// Methods
	// RVA: 0x35BF00 Offset: 0x35A700 VA: 0x18035BF00 Slot: 4
	public void Dispose() { }
	// RVA: 0x35C0D0 Offset: 0x35A8D0 VA: 0x18035C0D0
	public GameObject CreateGrassMesh(Material material) { }
	// RVA: 0x35CF20 Offset: 0x35B720 VA: 0x18035CF20
	public Material CreateGrassMaterial(Texture2D texture, Material sourceMaterial) { }
	// RVA: 0x35D2F0 Offset: 0x35BAF0 VA: 0x18035D2F0
	private void SetupMaterialKeywordsAndPass(Material material) { }
	// RVA: 0x35DD50 Offset: 0x35C550 VA: 0x18035DD50
	private void FixMaskMap(Material material) { }
	// RVA: 0x35DE60 Offset: 0x35C660 VA: 0x18035DE60
	private Texture2D FixGrayscaleTexture(Texture2D texture) { }
	// RVA: 0x35E250 Offset: 0x35CA50 VA: 0x18035E250
	private Texture CreateDefaultMaskMap() { }
	// RVA: 0x35E500 Offset: 0x35CD00 VA: 0x18035E500
	private Color CalculateMainColorFromTex(Texture2D texture) { }
	// RVA: 0x35E870 Offset: 0x35D070 VA: 0x18035E870
	public void .ctor() { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[ExecuteInEditMode] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
[DisallowMultipleComponent] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public class NatureRenderer : MonoBehaviour // TypeDefIndex: 2919
{
	// Fields
	private static MethodInfo _isInPrefabMode; // 0x0
	private static readonly List<NatureRenderer> _renderers; // 0x8
	private EventHandler<DetailRenderer> PreRender; // 0x18
	private EventHandler<DetailRenderer> PostRender; // 0x20
	private EventHandler<DetailRenderer> RendererCreated; // 0x28
	private Camera <PriorityCamera>k__BackingField; // 0x30
	private Camera <ReferenceCamera>k__BackingField; // 0x38
	private bool _allowPartialRender; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float _renderProcessorLimit; // 0x44
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool _stream; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float _streamProcessorLimit; // 0x4C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float _streamInDistance; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float _streamOutDistance; // 0x54
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float _detailDistance; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Material _billboardGrassMaterial; // 0x60
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float _cellSize; // 0x68
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool _drawCells; // 0x6C
	private Terrain _unityTerrain; // 0x70
	private int _isDirty; // 0x78
	private int _heightIsDirty; // 0x7C
	private int _flushAll; // 0x80
	private Grid _grid; // 0x88
	private bool _isRendered; // 0x90
	private Dictionary<Camera, DetailRenderer> _renderersPerCamera; // 0x98
	private Plane[] _frustumPlanes; // 0xA0
	private NatureRendererGizmos _gizmos; // 0xA8
	private int _rebuildInterval; // 0xB0
	private bool _isVisible; // 0xB4
	private CellStreamer _streamer; // 0xB8
	private Type <RenderPipelineManager>k__BackingField; // 0xC0

	// Properties
	public static IEnumerable<NatureRenderer> Renderers { get; }
	public DetailRenderer[] DetailRenderers { get; }
	public float DetailDistance { get; set; }
	public Camera PriorityCamera { get; set; }
	public Camera ReferenceCamera { get; set; }
	public Material BillboardGrassMaterial { get; set; }
	public DetailRenderer Item { get; }
	public CachedTerrainData TerrainData { get; }
	public Grid Grid { get; }
	protected Type RenderPipelineManager { get; set; }

	// Methods
	// RVA: 0x35E910 Offset: 0x35D110 VA: 0x18035E910
	public static IEnumerable<NatureRenderer> get_Renderers() { }
	// RVA: 0x35E9B0 Offset: 0x35D1B0 VA: 0x18035E9B0
	public void add_PreRender(EventHandler<DetailRenderer> value) { }
	// RVA: 0x35EA90 Offset: 0x35D290 VA: 0x18035EA90
	public void remove_PreRender(EventHandler<DetailRenderer> value) { }
	// RVA: 0x35EB70 Offset: 0x35D370 VA: 0x18035EB70
	public void add_PostRender(EventHandler<DetailRenderer> value) { }
	// RVA: 0x35EC50 Offset: 0x35D450 VA: 0x18035EC50
	public void remove_PostRender(EventHandler<DetailRenderer> value) { }
	// RVA: 0x35ED30 Offset: 0x35D530 VA: 0x18035ED30
	public void add_RendererCreated(EventHandler<DetailRenderer> value) { }
	// RVA: 0x35EE10 Offset: 0x35D610 VA: 0x18035EE10
	public void remove_RendererCreated(EventHandler<DetailRenderer> value) { }
	// RVA: 0x35EEF0 Offset: 0x35D6F0 VA: 0x18035EEF0
	public DetailRenderer[] get_DetailRenderers() { }
	// RVA: 0x213F30 Offset: 0x212730 VA: 0x180213F30
	public float get_DetailDistance() { }
	// RVA: 0x35F050 Offset: 0x35D850 VA: 0x18035F050
	public void set_DetailDistance(float value) { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public Camera get_PriorityCamera() { }
	// RVA: 0x1A20C0 Offset: 0x1A08C0 VA: 0x1801A20C0
	public void set_PriorityCamera(Camera value) { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0
	public Camera get_ReferenceCamera() { }
	// RVA: 0x1FCBF0 Offset: 0x1FB3F0 VA: 0x1801FCBF0
	public void set_ReferenceCamera(Camera value) { }
	// RVA: 0x29E380 Offset: 0x29CB80 VA: 0x18029E380
	public Material get_BillboardGrassMaterial() { }
	// RVA: 0x16F4A0 Offset: 0x16DCA0 VA: 0x18016F4A0
	public void set_BillboardGrassMaterial(Material value) { }
	// RVA: 0x35F060 Offset: 0x35D860 VA: 0x18035F060
	public DetailRenderer get_Item(Camera camera) { }
	// RVA: 0x35F180 Offset: 0x35D980 VA: 0x18035F180
	public CachedTerrainData get_TerrainData() { }
	// RVA: 0x262A60 Offset: 0x261260 VA: 0x180262A60
	public Grid get_Grid() { }
	// RVA: 0x35F1A0 Offset: 0x35D9A0 VA: 0x18035F1A0
	public float GetVisibleCellBuildProgress() { }
	// RVA: 0x35F1E0 Offset: 0x35D9E0 VA: 0x18035F1E0
	public void FlushMaterials() { }
	// RVA: 0x35F4C0 Offset: 0x35DCC0 VA: 0x18035F4C0
	public void RebuildBuffersDelayed() { }
	// RVA: 0x35F4E0 Offset: 0x35DCE0 VA: 0x18035F4E0
	public void RebuildBuffers(TerrainChangedFlags flags) { }
	// RVA: 0x35F960 Offset: 0x35E160 VA: 0x18035F960
	private void OnEnable() { }
	// RVA: 0x35FA80 Offset: 0x35E280 VA: 0x18035FA80
	private void Subscribe() { }
	// RVA: 0x35FBF0 Offset: 0x35E3F0 VA: 0x18035FBF0
	private void Unsubscribe() { }
	// RVA: 0x35FCE0 Offset: 0x35E4E0 VA: 0x18035FCE0
	private void RenderPipelineManager_beginCameraRendering(object context, Camera camera) { }
	// RVA: 0x35FCF0 Offset: 0x35E4F0 VA: 0x18035FCF0
	private void OnDisable() { }
	// RVA: 0x35FE90 Offset: 0x35E690 VA: 0x18035FE90
	private void Awake() { }
	// RVA: 0x35FF00 Offset: 0x35E700 VA: 0x18035FF00
	private void Start() { }
	// RVA: 0x360020 Offset: 0x35E820 VA: 0x180360020
	private void OnDestroy() { }
	// RVA: 0x360040 Offset: 0x35E840 VA: 0x180360040
	private void Dispose() { }
	// RVA: 0x3601D0 Offset: 0x35E9D0 VA: 0x1803601D0
	private void DisposeRenderers() { }
	// RVA: 0x360340 Offset: 0x35EB40 VA: 0x180360340
	private void Initialize() { }
	// RVA: 0x3608B0 Offset: 0x35F0B0 VA: 0x1803608B0
	private void _terrainCells_OnWillBuild(TerrainChangedFlags flags) { }
	// RVA: 0x3608C0 Offset: 0x35F0C0 VA: 0x1803608C0
	private void OnCameraRender(Camera camera) { }
	// RVA: 0x360C50 Offset: 0x35F450 VA: 0x180360C50
	private void OnTerrainChanged(TerrainChangedFlags flags) { }
	// RVA: 0x360C80 Offset: 0x35F480 VA: 0x180360C80
	private void OnDrawGizmos() { }
	// RVA: 0x360DA0 Offset: 0x35F5A0 VA: 0x180360DA0
	private bool TerrainIsInRange(Camera camera) { }
	// RVA: 0x3611A0 Offset: 0x35F9A0 VA: 0x1803611A0
	public void Stream(Camera camera) { }
	// RVA: 0x3612F0 Offset: 0x35FAF0 VA: 0x1803612F0
	public void Render(Camera camera) { }
	// RVA: 0x2937A0 Offset: 0x291FA0 VA: 0x1802937A0
	protected Type get_RenderPipelineManager() { }
	// RVA: 0x2937B0 Offset: 0x291FB0 VA: 0x1802937B0
	private void set_RenderPipelineManager(Type value) { }
	// RVA: 0x361AE0 Offset: 0x3602E0 VA: 0x180361AE0
	private Type FindType(string fullname) { }
	// RVA: 0x361C50 Offset: 0x360450 VA: 0x180361C50
	private void SetupHdrp() { }
	// RVA: 0x361CE0 Offset: 0x3604E0 VA: 0x180361CE0
	public void .ctor() { }
	// RVA: 0x361E00 Offset: 0x360600 VA: 0x180361E00
	private static void .cctor() { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
internal class NatureRendererGizmos // TypeDefIndex: 2920
{
	// Fields
	private readonly NatureRenderer _renderer; // 0x10
	private readonly Grid _terrainCells; // 0x18
	private readonly Dictionary<Camera, DetailRenderer> _cameras; // 0x20
	private readonly Terrain _unityTerrain; // 0x28

	// Methods
	// RVA: 0x361EA0 Offset: 0x3606A0 VA: 0x180361EA0
	public void .ctor(Terrain terrain, NatureRenderer renderer, Grid buffer, Dictionary<Camera, DetailRenderer> cameras) { }
	// RVA: 0x361EC0 Offset: 0x3606C0 VA: 0x180361EC0
	public void DrawCells(bool isInRange) { }
}

// Namespace: 
[Serializable]
private sealed class NatureRendererGizmos.<>c // TypeDefIndex: 2921
{
	// Fields
	public static readonly NatureRendererGizmos.<>c <>9; // 0x0
	public static Func<Camera, bool> <>9__5_0; // 0x8

	// Methods
	// RVA: 0x67BF90 Offset: 0x67A790 VA: 0x18067BF90
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x67C010 Offset: 0x67A810 VA: 0x18067C010
	internal bool <DrawCells>b__5_0(Camera c) { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
internal class PlacementAlgorithm // TypeDefIndex: 2922
{
	// Fields
	public readonly CachedTerrainData TerrainData; // 0x10
	private Vector2 _areaSize; // 0x18
	private Vector2 _divideByTerrainSize; // 0x20
	private Random _random; // 0x28
	private static float[] _randomCache; // 0x0

	// Methods
	// RVA: 0x3628D0 Offset: 0x3610D0 VA: 0x1803628D0
	public void .ctor(CachedTerrainData terrainData) { }
	// RVA: 0x362A20 Offset: 0x361220 VA: 0x180362A20
	public Matrix4x4 Place(TerrainDetail detail, Vector3 position, Vector3 terrainPosition, int seed) { }
	// RVA: 0x363610 Offset: 0x361E10 VA: 0x180363610
	private static void .cctor() { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
public struct RenderDiagnostics // TypeDefIndex: 2923
{
	// Fields
	public int Instances; // 0x0
	public int Batches; // 0x4
	public int Culled; // 0x8
	public int CulledCells; // 0xC
	public int BuiltCells; // 0x10
	public int OutOfRangeCells; // 0x14
	public int RenderersCpu; // 0x18
	public int RenderersGpu; // 0x1C
	public double FillTime; // 0x20
	public double RenderTime; // 0x28
	public long Memory; // 0x30
}

// Namespace: VisualDesignCafe.Rendering.Nature
public class RendererFactory // TypeDefIndex: 2924
{
	// Fields
	private EventHandler<InstanceRenderer> RendererCreated; // 0x10
	private readonly Dictionary<int, InstanceRenderer> _rendererCollection; // 0x18
	private readonly bool _isScriptableRenderPipeline; // 0x20
	private readonly bool _supportsComputeShaders; // 0x21
	private readonly object _lockObject; // 0x28

	// Methods
	// RVA: 0x365F90 Offset: 0x364790 VA: 0x180365F90
	public void .ctor(Dictionary<int, InstanceRenderer> renderers, bool isScriptableRenderPipeline, object lockObject) { }
	// RVA: 0x3660B0 Offset: 0x3648B0 VA: 0x1803660B0
	public InstanceRenderer GetRenderer(TerrainDetail.LodGroup lodGroup, bool useComputeShaders) { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
public struct RenderSettings // TypeDefIndex: 2925
{
	// Fields
	public float DetailDistance; // 0x0

	// Methods
	// RVA: 0xE990 Offset: 0xDD90 VA: 0x18000E990
	public void .ctor(float detailDistance) { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
public class RenderThread // TypeDefIndex: 2926
{
	// Fields
	private static object _sharedLock; // 0x0
	private static bool _visibleCellsChanged; // 0x8
	private Action<RenderThread.ThreadInfo, RenderThreadSyncer> CalculateDiagnostics; // 0x10
	private Func<RenderThread.ThreadInfo, RenderThreadSyncer, bool> CullCells; // 0x18
	private Action<RenderThread.ThreadInfo, RenderThreadSyncer> BeginBatch; // 0x20
	private Action<RenderThread.ThreadInfo, RenderThreadSyncer> CopyDetailLayersToRenderers; // 0x28
	private Action<RenderThread.ThreadInfo, RenderThreadSyncer> Finalize; // 0x30
	private RenderThread.ThreadInfo <Thread>k__BackingField; // 0x38
	private long <ElapsedMilliseconds>k__BackingField; // 0x40
	private readonly Stopwatch _fillTimer; // 0x48
	private readonly Stopwatch _renderTimer; // 0x50
	private readonly FrustumCuller _culler; // 0x58
	private readonly RenderThreadSyncer _syncer; // 0x60
	private bool _doNextLoop; // 0x68

	// Properties
	public bool DoNextLoop { set; }
	public RenderThread.ThreadInfo Thread { get; set; }
	public long ElapsedMilliseconds { get; set; }

	// Methods
	// RVA: 0x363690 Offset: 0x361E90 VA: 0x180363690
	public void add_CalculateDiagnostics(Action<RenderThread.ThreadInfo, RenderThreadSyncer> value) { }
	// RVA: 0x363770 Offset: 0x361F70 VA: 0x180363770
	public void remove_CalculateDiagnostics(Action<RenderThread.ThreadInfo, RenderThreadSyncer> value) { }
	// RVA: 0x363850 Offset: 0x362050 VA: 0x180363850
	public void add_CullCells(Func<RenderThread.ThreadInfo, RenderThreadSyncer, bool> value) { }
	// RVA: 0x363930 Offset: 0x362130 VA: 0x180363930
	public void remove_CullCells(Func<RenderThread.ThreadInfo, RenderThreadSyncer, bool> value) { }
	// RVA: 0x363A10 Offset: 0x362210 VA: 0x180363A10
	public void add_BeginBatch(Action<RenderThread.ThreadInfo, RenderThreadSyncer> value) { }
	// RVA: 0x363AF0 Offset: 0x3622F0 VA: 0x180363AF0
	public void remove_BeginBatch(Action<RenderThread.ThreadInfo, RenderThreadSyncer> value) { }
	// RVA: 0x363BD0 Offset: 0x3623D0 VA: 0x180363BD0
	public void add_CopyDetailLayersToRenderers(Action<RenderThread.ThreadInfo, RenderThreadSyncer> value) { }
	// RVA: 0x363CB0 Offset: 0x3624B0 VA: 0x180363CB0
	public void remove_CopyDetailLayersToRenderers(Action<RenderThread.ThreadInfo, RenderThreadSyncer> value) { }
	// RVA: 0x363D90 Offset: 0x362590 VA: 0x180363D90
	public void add_Finalize(Action<RenderThread.ThreadInfo, RenderThreadSyncer> value) { }
	// RVA: 0x363E70 Offset: 0x362670 VA: 0x180363E70
	public void remove_Finalize(Action<RenderThread.ThreadInfo, RenderThreadSyncer> value) { }
	// RVA: 0x363F50 Offset: 0x362750 VA: 0x180363F50
	public void set_DoNextLoop(bool value) { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0
	public RenderThread.ThreadInfo get_Thread() { }
	// RVA: 0x1FCBF0 Offset: 0x1FB3F0 VA: 0x1801FCBF0
	private void set_Thread(RenderThread.ThreadInfo value) { }
	// RVA: 0x16F130 Offset: 0x16D930 VA: 0x18016F130
	public long get_ElapsedMilliseconds() { }
	// RVA: 0x16F140 Offset: 0x16D940 VA: 0x18016F140
	private void set_ElapsedMilliseconds(long value) { }
	// RVA: 0x363F60 Offset: 0x362760 VA: 0x180363F60
	public void .ctor(RenderThreadSyncer syncer, RenderThread.ThreadInfo threadInfo) { }
	// RVA: 0x364200 Offset: 0x362A00 VA: 0x180364200
	public void Start(int threadNumber, int threadCount, CancellationToken cancellationToken) { }
	// RVA: 0x3643B0 Offset: 0x362BB0 VA: 0x1803643B0
	public void Render(bool async) { }
	// RVA: 0x3649D0 Offset: 0x3631D0 VA: 0x1803649D0
	private void OnDomainUnload(object sender, EventArgs e) { }
	// RVA: 0x364D10 Offset: 0x363510 VA: 0x180364D10
	private void RenderLoop(object arg) { }
	// RVA: 0x364EF0 Offset: 0x3636F0 VA: 0x180364EF0
	private static void .cctor() { }
}

// Namespace: 
public class RenderThread.ThreadInfo // TypeDefIndex: 2927
{
	// Fields
	public int ThreadNumber; // 0x10
	public int ThreadCount; // 0x14
	public CancellationToken CancellationToken; // 0x18
	public Stopwatch Timer; // 0x20
	public Thread Thread; // 0x28
	public int LoopIndex; // 0x30

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: VisualDesignCafe.Rendering.Nature
[DefaultMemberAttribute] // RVA: 0xD9290 Offset: 0xD8690 VA: 0x1800D9290
public class RenderThreadSyncer // TypeDefIndex: 2928
{
	// Fields
	private readonly RenderThreadSyncer.Task[] _tasks; // 0x10
	private readonly object _lock; // 0x18
	private Barrier _barrier; // 0x20
	private int[] _parallelIndices; // 0x28

	// Methods
	// RVA: 0x364F80 Offset: 0x363780 VA: 0x180364F80
	public void .ctor(int threadCount, int syncPoints, CancellationToken cancellationToken) { }
	// RVA: 0x365060 Offset: 0x363860 VA: 0x180365060
	public void BeginParallel(RenderThread.ThreadInfo thread) { }
	// RVA: 0x3650A0 Offset: 0x3638A0 VA: 0x1803650A0
	public bool ParallelNext(RenderThread.ThreadInfo thread) { }
	// RVA: 0x365100 Offset: 0x363900 VA: 0x180365100
	public void Lock(Action action) { }
	// RVA: 0x365280 Offset: 0x363A80 VA: 0x180365280
	public bool WaitSelf(RenderThread.ThreadInfo thread, ref bool condition, CancellationToken cancellationToken) { }
	// RVA: 0x3654D0 Offset: 0x363CD0 VA: 0x1803654D0
	public void PulseAll() { }
	// RVA: 0x365640 Offset: 0x363E40 VA: 0x180365640
	public void Pulse(RenderThread.ThreadInfo thread, RenderThreadSyncer.Task task) { }
	// RVA: 0x365820 Offset: 0x364020 VA: 0x180365820
	public void Sync(RenderThread.ThreadInfo thread, RenderThreadSyncer.Task task, int syncPointNumber, CancellationToken cancellationToken, int timeout = 1500) { }
	// RVA: 0x365860 Offset: 0x364060 VA: 0x180365860
	public bool Wait(RenderThread.ThreadInfo thread, RenderThreadSyncer.Task task, int timeout = 1500) { }
	// RVA: 0x365B40 Offset: 0x364340 VA: 0x180365B40
	private bool IsTrue(RenderThreadSyncer.Task task, RenderThread.ThreadInfo currentThread) { }
	// RVA: 0x365BC0 Offset: 0x3643C0 VA: 0x180365BC0 Slot: 3
	public override string ToString() { }
}

// Namespace: 
public enum RenderThreadSyncer.Task // TypeDefIndex: 2929
{
	// Fields
	public int value__; // 0x0
	public const RenderThreadSyncer.Task None = 0; // 0x0
	public const RenderThreadSyncer.Task Diagnostics = 1; // 0x0
	public const RenderThreadSyncer.Task Cull = 2; // 0x0
	public const RenderThreadSyncer.Task EndCull = 3; // 0x0
	public const RenderThreadSyncer.Task Copy = 4; // 0x0
	public const RenderThreadSyncer.Task Done = 5; // 0x0
}

// Namespace: VisualDesignCafe.Rendering.Nature
public class TerrainDetail // TypeDefIndex: 2930
{
	// Fields
	private string <Name>k__BackingField; // 0x10
	private Exception <Exception>k__BackingField; // 0x18
	private TerrainDetail.ErrorCode <Error>k__BackingField; // 0x20
	private bool <IsValid>k__BackingField; // 0x24
	public readonly int Index; // 0x28
	private float <MinHeight>k__BackingField; // 0x2C
	private float <MaxHeight>k__BackingField; // 0x30
	private float <MinWidth>k__BackingField; // 0x34
	private float <MaxWidth>k__BackingField; // 0x38
	private float <NoiseSpread>k__BackingField; // 0x3C
	private bool <HasColor>k__BackingField; // 0x40
	private Color <DryColor>k__BackingField; // 0x44
	private Color <HealthyColor>k__BackingField; // 0x54
	private Color[] <MainColors>k__BackingField; // 0x68
	private bool <SupportsIndirectInstancing>k__BackingField; // 0x70
	private bool <HasLoD>k__BackingField; // 0x71
	private TerrainDetail.LodGroup[] <LodGroups>k__BackingField; // 0x78
	private Quaternion <Orientation>k__BackingField; // 0x80
	private Vector3 <Offset>k__BackingField; // 0x90
	private readonly CachedTerrainData _terrainData; // 0xA0
	private MeshRenderer _cachedMeshRenderer; // 0xA8
	private GameObject _cachedPrototype; // 0xB0
	private LODGroup _cachedLodGroup; // 0xB8
	private MeshFilter[] _cachedLodMeshFilters; // 0xC0
	private Texture[] _cachedMainTextures; // 0xC8
	private GameObject _texturePrototype; // 0xD0
	private Material _material; // 0xD8
	private Material _cachedBillboardMaterial; // 0xE0
	private MeshGenerator _meshGenerator; // 0xE8
	private Nullable<float> _previousFieldOfView; // 0xF0

	// Properties
	set; }
	private Exception Exception { set; }
	private TerrainDetail.ErrorCode Error { set; }
	public bool IsValid { get; set; }
	public float MinHeight { get; set; }
	public float MaxHeight { get; set; }
	public float MinWidth { get; set; }
	public float MaxWidth { get; set; }
	public float NoiseSpread { get; set; }
	public bool HasColor { get; set; }
	public Color DryColor { get; set; }
	public Color HealthyColor { get; set; }
	public Color[] MainColors { get; set; }
	public bool SupportsIndirectInstancing { get; set; }
	public bool HasLoD { get; set; }
	public TerrainDetail.LodGroup[] LodGroups { get; set; }
	public Quaternion Orientation { get; set; }
	public Vector3 Offset { get; set; }

	// Methods
	// RVA: 0x1D8DD0 Offset: 0x1D75D0 VA: 0x1801D8DD0
	private void set_Name(string value) { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0
	private void set_Exception(Exception value) { }
	// RVA: 0x2E4C50 Offset: 0x2E3450 VA: 0x1802E4C50
	private void set_Error(TerrainDetail.ErrorCode value) { }
	// RVA: 0x366650 Offset: 0x364E50 VA: 0x180366650
	public bool get_IsValid() { }
	// RVA: 0x366660 Offset: 0x364E60 VA: 0x180366660
	private void set_IsValid(bool value) { }
	// RVA: 0x28CC50 Offset: 0x28B450 VA: 0x18028CC50
	public float get_MinHeight() { }
	// RVA: 0x366670 Offset: 0x364E70 VA: 0x180366670
	private void set_MinHeight(float value) { }
	// RVA: 0x1FEF60 Offset: 0x1FD760 VA: 0x1801FEF60
	public float get_MaxHeight() { }
	// RVA: 0x1FEF70 Offset: 0x1FD770 VA: 0x1801FEF70
	private void set_MaxHeight(float value) { }
	// RVA: 0x29DF60 Offset: 0x29C760 VA: 0x18029DF60
	public float get_MinWidth() { }
	// RVA: 0x29DF70 Offset: 0x29C770 VA: 0x18029DF70
	private void set_MinWidth(float value) { }
	// RVA: 0x1FEFA0 Offset: 0x1FD7A0 VA: 0x1801FEFA0
	public float get_MaxWidth() { }
	// RVA: 0x1FEFB0 Offset: 0x1FD7B0 VA: 0x1801FEFB0
	private void set_MaxWidth(float value) { }
	// RVA: 0x1FEFC0 Offset: 0x1FD7C0 VA: 0x1801FEFC0
	public float get_NoiseSpread() { }
	// RVA: 0x20B470 Offset: 0x209C70 VA: 0x18020B470
	private void set_NoiseSpread(float value) { }
	// RVA: 0x207520 Offset: 0x205D20 VA: 0x180207520
	public bool get_HasColor() { }
	// RVA: 0x208850 Offset: 0x207050 VA: 0x180208850
	private void set_HasColor(bool value) { }
	// RVA: 0x366680 Offset: 0x364E80 VA: 0x180366680
	public Color get_DryColor() { }
	// RVA: 0x366690 Offset: 0x364E90 VA: 0x180366690
	private void set_DryColor(Color value) { }
	// RVA: 0x34CEE0 Offset: 0x34B6E0 VA: 0x18034CEE0
	public Color get_HealthyColor() { }
	// RVA: 0x34CEF0 Offset: 0x34B6F0 VA: 0x18034CEF0
	private void set_HealthyColor(Color value) { }
	// RVA: 0x262A70 Offset: 0x261270 VA: 0x180262A70
	public Color[] get_MainColors() { }
	// RVA: 0x21EFD0 Offset: 0x21D7D0 VA: 0x18021EFD0
	private void set_MainColors(Color[] value) { }
	// RVA: 0x3666A0 Offset: 0x364EA0 VA: 0x1803666A0
	public bool get_SupportsIndirectInstancing() { }
	// RVA: 0x3666B0 Offset: 0x364EB0 VA: 0x1803666B0
	private void set_SupportsIndirectInstancing(bool value) { }
	// RVA: 0x3666C0 Offset: 0x364EC0 VA: 0x1803666C0
	public bool get_HasLoD() { }
	// RVA: 0x3666D0 Offset: 0x364ED0 VA: 0x1803666D0
	private void set_HasLoD(bool value) { }
	// RVA: 0x34A220 Offset: 0x348A20 VA: 0x18034A220
	public TerrainDetail.LodGroup[] get_LodGroups() { }
	// RVA: 0x34A230 Offset: 0x348A30 VA: 0x18034A230
	private void set_LodGroups(TerrainDetail.LodGroup[] value) { }
	// RVA: 0x3666E0 Offset: 0x364EE0 VA: 0x1803666E0
	public Quaternion get_Orientation() { }
	// RVA: 0x3666F0 Offset: 0x364EF0 VA: 0x1803666F0
	private void set_Orientation(Quaternion value) { }
	// RVA: 0x366700 Offset: 0x364F00 VA: 0x180366700
	public Vector3 get_Offset() { }
	// RVA: 0x366720 Offset: 0x364F20 VA: 0x180366720
	private void set_Offset(Vector3 value) { }
	// RVA: 0x366740 Offset: 0x364F40 VA: 0x180366740
	public void .ctor(CachedTerrainData terrainData, DetailPrototype detail, int layer, float fieldOfView, Material billboardMaterial) { }
	// RVA: 0x366780 Offset: 0x364F80 VA: 0x180366780
	public void Dispose() { }
	// RVA: 0x3668F0 Offset: 0x3650F0 VA: 0x1803668F0
	public void FlushMaterials(DetailPrototype detail, Material billboardMaterial) { }
	// RVA: 0x3669B0 Offset: 0x3651B0 VA: 0x1803669B0
	public void CopyFrom(DetailPrototype detail, float fieldOfView, out bool flushEverything, Material billboardMaterial) { }
	// RVA: 0x368180 Offset: 0x366980 VA: 0x180368180
	private bool MaterialSupportsIndirectInstancing() { }
	// RVA: 0x368260 Offset: 0x366A60 VA: 0x180368260
	private bool MaterialSupportsIndirectInstancing(Material material) { }
	// RVA: 0x368340 Offset: 0x366B40 VA: 0x180368340
	private bool CopyLevel(int i, MeshRenderer renderer, GameObject prototype, float lodDistance, float transitionHeight, float fieldOfView, LODFadeMode fadeMode, bool isLastLod) { }
	// RVA: 0x369170 Offset: 0x367970 VA: 0x180369170
	private bool MaterialsChanged(TerrainDetail.LodGroup level, MeshRenderer renderer) { }
	// RVA: 0x369420 Offset: 0x367C20 VA: 0x180369420
	private bool ShaderChanged(Material a, Material b) { }
	// RVA: 0x3695D0 Offset: 0x367DD0 VA: 0x1803695D0
	private InstanceData.ColorType GetColorMethod(Material material) { }
	// RVA: 0x369710 Offset: 0x367F10 VA: 0x180369710
	private float RelativeHeightToDistance(float relativeHeight, float size, float fieldOfView) { }
	// RVA: 0x3697E0 Offset: 0x367FE0 VA: 0x1803697E0
	private Color CalculateMainColorFromTex(int materialIndex) { }
	// RVA: 0x369C50 Offset: 0x368450 VA: 0x180369C50
	private Color CalculateMainColorFromTex(Texture2D texture) { }
	// RVA: 0x369FC0 Offset: 0x3687C0 VA: 0x180369FC0
	private Texture GetMainTexture(Material material) { }
}

// Namespace: 
public enum TerrainDetail.ErrorCode // TypeDefIndex: 2931
{
	// Fields
	public int value__; // 0x0
	public const TerrainDetail.ErrorCode PrototypeIsNull = 0; // 0x0
	public const TerrainDetail.ErrorCode MeshRendererIsNull = 1; // 0x0
	public const TerrainDetail.ErrorCode MeshFilterIsNull = 2; // 0x0
	public const TerrainDetail.ErrorCode MeshIsNull = 3; // 0x0
	public const TerrainDetail.ErrorCode Exception = 4; // 0x0
}

// Namespace: 
public struct TerrainDetail.LodGroup // TypeDefIndex: 2932
{
	// Fields
	public readonly int InstanceId; // 0x0
	public readonly Mesh Mesh; // 0x8
	public readonly Material[] Materials; // 0x10
	public readonly Material[] SharedMaterials; // 0x18
	public readonly float CullDistance; // 0x20
	public readonly float SqrCullDistance; // 0x24
	public readonly ShadowCastingMode ShadowCasting; // 0x28
	public readonly bool ReceiveShadow; // 0x2C
	public readonly Bounds Bounds; // 0x30
	public readonly LODFadeMode FadeMode; // 0x48
	public readonly float ScreenRelativeTransitionHeight; // 0x4C
	public readonly InstanceData.ColorType Coloring; // 0x50
	public readonly int Layer; // 0x54
	public readonly bool IsLastLod; // 0x58
	public readonly bool LightProbes; // 0x59
	public readonly bool OcclusionProbes; // 0x5A

	// Methods
	// RVA: 0x67C1D0 Offset: 0x67A9D0 VA: 0x18067C1D0
	public static InstanceData op_Explicit(TerrainDetail.LodGroup detail) { }
	// RVA: 0x26F00 Offset: 0x26300 VA: 0x180026F00
	public void .ctor(GameObject prototype, Mesh mesh, Material[] materials, Material[] sharedMaterials, Bounds bounds, float distance, ShadowCastingMode shadowCasting, bool receiveShadows, LODFadeMode fadeMode, float screenRelativeTransitionHeight, InstanceData.ColorType coloring, int layer, bool isLastLod, bool lightProbes, bool occlusionProbes) { }
}

// Namespace: 
[Serializable]
private sealed class TerrainDetail.<>c // TypeDefIndex: 2933
{
	// Fields
	public static readonly TerrainDetail.<>c <>9; // 0x0
	public static Func<Material, bool> <>9__91_0; // 0x8

	// Methods
	// RVA: 0x67C0B0 Offset: 0x67A8B0 VA: 0x18067C0B0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x67C130 Offset: 0x67A930 VA: 0x18067C130
	internal bool <CopyLevel>b__91_0(Material m) { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2934
{}

// Namespace: VisualDesignCafe.Nature
[ExecuteAlways] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class GlobalWind : MonoBehaviour // TypeDefIndex: 2935
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private WindSettings _windSettings; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private WindZone _sourceWindZone; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Texture2D _gustNoise; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Texture2D _shiverNoise; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int _selectedPreset; // 0x48
	private Quaternion _cachedRotation; // 0x4C
	private float _cachedWindMain; // 0x5C
	private float _cachedWindPulseFrequency; // 0x60
	private float _cachedWindTurbulence; // 0x64

	// Properties
	public WindSettings Settings { get; set; }
	public WindZone Zone { get; set; }
	public Texture2D GustNoise { get; set; }
	public Texture2D ShiverNoise { get; set; }

	// Methods
	// RVA: 0x6858E0 Offset: 0x6840E0 VA: 0x1806858E0
	public WindSettings get_Settings() { }
	// RVA: 0x685900 Offset: 0x684100 VA: 0x180685900
	public void set_Settings(WindSettings value) { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public WindZone get_Zone() { }
	// RVA: 0x685920 Offset: 0x684120 VA: 0x180685920
	public void set_Zone(WindZone value) { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0
	public Texture2D get_GustNoise() { }
	// RVA: 0x685A10 Offset: 0x684210 VA: 0x180685A10
	public void set_GustNoise(Texture2D value) { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0
	public Texture2D get_ShiverNoise() { }
	// RVA: 0x685A30 Offset: 0x684230 VA: 0x180685A30
	public void set_ShiverNoise(Texture2D value) { }
	// RVA: 0x685A50 Offset: 0x684250 VA: 0x180685A50
	private void OnEnable() { }
	// RVA: 0x685B50 Offset: 0x684350 VA: 0x180685B50
	private void Update() { }
	// RVA: 0x685C40 Offset: 0x684440 VA: 0x180685C40
	private void CopyAndApply() { }
	// RVA: 0x685C80 Offset: 0x684480 VA: 0x180685C80
	private void CopyFromWindZone() { }
	// RVA: 0x685CC0 Offset: 0x6844C0 VA: 0x180685CC0
	private bool WindZoneHasChanged() { }
	// RVA: 0x685F30 Offset: 0x684730 VA: 0x180685F30
	private void CacheWindZoneProperties() { }
	// RVA: 0x686100 Offset: 0x684900 VA: 0x180686100
	private void ValidateWindZone() { }
	// RVA: 0x686270 Offset: 0x684A70 VA: 0x180686270
	public void .ctor() { }
}

// Namespace: VisualDesignCafe.Nature
internal class RuntimeGlobalWindInitializer // TypeDefIndex: 2936
{
	// Methods
	[RuntimeInitializeOnLoadMethodAttribute] // RVA: 0xDC810 Offset: 0xDBC10 VA: 0x1800DC810
	// RVA: 0x6862A0 Offset: 0x684AA0 VA: 0x1806862A0
	private static void Initialize() { }
	// RVA: 0x6865C0 Offset: 0x684DC0 VA: 0x1806865C0
	private static void OnActiveSceneChanged(Scene previousScene, Scene activeScene) { }
	// RVA: 0x686750 Offset: 0x684F50 VA: 0x180686750
	private static void ApplyDefaultWind() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
[Serializable]
private sealed class RuntimeGlobalWindInitializer.<>c // TypeDefIndex: 2937
{
	// Fields
	public static readonly RuntimeGlobalWindInitializer.<>c <>9; // 0x0
	public static Func<GameObject, bool> <>9__1_0; // 0x8

	// Methods
	// RVA: 0x686DE0 Offset: 0x6855E0 VA: 0x180686DE0
	private static void .cctor() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x686E60 Offset: 0x685660 VA: 0x180686E60
	internal bool <OnActiveSceneChanged>b__1_0(GameObject g) { }
}

// Namespace: VisualDesignCafe.Nature
[Serializable]
public struct WindSettings // TypeDefIndex: 2938
{
	// Fields
	public Vector2 GustDirection; // 0x0
	public float GustStrength; // 0x8
	public float GustSpeed; // 0xC
	public float ShiverSpeed; // 0x10
	public float ShiverStrength; // 0x14

	// Properties
	public static WindSettings Calm { get; }

	// Methods
	// RVA: 0x686790 Offset: 0x684F90 VA: 0x180686790
	public static WindSettings get_Calm() { }
	// RVA: 0x6867C0 Offset: 0x684FC0 VA: 0x1806867C0
	public static WindSettings FromWindZone(WindZone windZone) { }
	// RVA: 0x686AE0 Offset: 0x6852E0 VA: 0x180686AE0
	public static Vector2 RotationToDirection(Quaternion quaternion) { }
	// RVA: 0x28380 Offset: 0x27780 VA: 0x180028380
	public void Apply(Texture2D gustNoise, Texture2D shiverNoise) { }
	// RVA: 0x28390 Offset: 0x27790 VA: 0x180028390
	public void Apply() { }
}

// Namespace: 
internal class <Module> // TypeDefIndex: 2939
{}

// Namespace: 
public class BGMusic : MonoBehaviour // TypeDefIndex: 2940
{
	// Fields
	public float volume; // 0x18
	private AudioSource audioData; // 0x20
	private int awoken; // 0x28

	// Methods
	// RVA: 0x6F89C0 Offset: 0x6F71C0 VA: 0x1806F89C0
	private void Start() { }
	// RVA: 0x6F8BA0 Offset: 0x6F73A0 VA: 0x1806F8BA0
	private void Awake() { }
	// RVA: 0x6F8D20 Offset: 0x6F7520 VA: 0x1806F8D20
	public void pauseAudio() { }
	// RVA: 0x6F8E10 Offset: 0x6F7610 VA: 0x1806F8E10
	public void playAudio() { }
	// RVA: 0x6F8F00 Offset: 0x6F7700 VA: 0x1806F8F00
	public void setAudioVolume(float volume) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class Ladder : MonoBehaviour // TypeDefIndex: 2941
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool showGizmos; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Transform topExit; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Transform bottomExit; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int stepsNumber; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 topLocalPosition; // 0x34
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 bottomLocalPosition; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Ladder.FacingDirection facingDirection; // 0x4C
	private Vector3 facingDirectionVector; // 0x50
	private List<Vector3> steps; // 0x60

	// Properties
	public List<Vector3> Steps { get; }
	public Transform TopExit { get; }
	public Transform BottomExit { get; }
	public Vector3 TopPosition { get; }
	public Vector3 BottomPosition { get; }
	public Vector3 BottomToTop { get; }
	public Vector3 FacingDirectionVector { get; }

	// Methods
	// RVA: 0x29E380 Offset: 0x29CB80 VA: 0x18029E380
	public List<Vector3> get_Steps() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public Transform get_TopExit() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public Transform get_BottomExit() { }
	// RVA: 0x6A55A0 Offset: 0x6A3DA0 VA: 0x1806A55A0
	public Vector3 get_TopPosition() { }
	// RVA: 0x6A5740 Offset: 0x6A3F40 VA: 0x1806A5740
	public Vector3 get_BottomPosition() { }
	// RVA: 0x6A58E0 Offset: 0x6A40E0 VA: 0x1806A58E0
	public Vector3 get_BottomToTop() { }
	// RVA: 0x6A5B50 Offset: 0x6A4350 VA: 0x1806A5B50
	public Vector3 get_FacingDirectionVector() { }
	// RVA: 0x6A5B70 Offset: 0x6A4370 VA: 0x1806A5B70
	public int GetClosestStepIndex(Vector3 referencePosition) { }
	// RVA: 0x6A5D30 Offset: 0x6A4530 VA: 0x1806A5D30
	private void Awake() { }
	// RVA: 0x6A6030 Offset: 0x6A4830 VA: 0x1806A6030
	private void OnDrawGizmos() { }
	// RVA: 0x6A6CA0 Offset: 0x6A54A0 VA: 0x1806A6CA0
	public void .ctor() { }
}

// Namespace: 
private enum Ladder.FacingDirection // TypeDefIndex: 2942
{
	// Fields
	public int value__; // 0x0
	public const Ladder.FacingDirection PositiveZ = 0; // 0x0
	public const Ladder.FacingDirection NegativeZ = 1; // 0x0
	public const Ladder.FacingDirection PositiveX = 2; // 0x0
	public const Ladder.FacingDirection NegativeX = 3; // 0x0
}

// Namespace: 
public class CapsuleColliderComponent2D : ColliderComponent2D // TypeDefIndex: 2943
{
	// Fields
	private CapsuleCollider2D capsuleCollider; // 0x20

	// Properties
	public override Vector3 Size { get; set; }
	public override Vector3 Offset { get; set; }

	// Methods
	// RVA: 0x6FED60 Offset: 0x6FD560 VA: 0x1806FED60 Slot: 4
	public override Vector3 get_Size() { }
	// RVA: 0x6FEE80 Offset: 0x6FD680 VA: 0x1806FEE80 Slot: 5
	public override void set_Size(Vector3 value) { }
	// RVA: 0x6FEF90 Offset: 0x6FD790 VA: 0x1806FEF90 Slot: 6
	public override Vector3 get_Offset() { }
	// RVA: 0x6FF0B0 Offset: 0x6FD8B0 VA: 0x1806FF0B0 Slot: 7
	public override void set_Offset(Vector3 value) { }
	// RVA: 0x6FF1C0 Offset: 0x6FD9C0 VA: 0x1806FF1C0 Slot: 8
	protected override void Awake() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class CapsuleColliderComponent3D : ColliderComponent3D // TypeDefIndex: 2944
{
	// Fields
	private CapsuleCollider capsuleCollider; // 0x20

	// Properties
	public override Vector3 Size { get; set; }
	public override Vector3 Offset { get; set; }

	// Methods
	// RVA: 0x6FF290 Offset: 0x6FDA90 VA: 0x1806FF290 Slot: 4
	public override Vector3 get_Size() { }
	// RVA: 0x6FF410 Offset: 0x6FDC10 VA: 0x1806FF410 Slot: 5
	public override void set_Size(Vector3 value) { }
	// RVA: 0x6FF500 Offset: 0x6FDD00 VA: 0x1806FF500 Slot: 6
	public override Vector3 get_Offset() { }
	// RVA: 0x6FF590 Offset: 0x6FDD90 VA: 0x1806FF590 Slot: 7
	public override void set_Offset(Vector3 value) { }
	// RVA: 0x6FF610 Offset: 0x6FDE10 VA: 0x1806FF610 Slot: 8
	protected override void Awake() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public abstract class ColliderComponent : MonoBehaviour // TypeDefIndex: 2945
{
	// Properties
	public abstract Vector3 Size { get; set; }
	public abstract Vector3 Offset { get; set; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	public abstract Vector3 get_Size() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract void set_Size(Vector3 value) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract Vector3 get_Offset() { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract void set_Offset(Vector3 value) { }
	// RVA: 0x6C3C90 Offset: 0x6C2490 VA: 0x1806C3C90 Slot: 8
	protected virtual void Awake() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: 
public abstract class ColliderComponent2D : ColliderComponent // TypeDefIndex: 2946
{
	// Fields
	protected Collider2D collider; // 0x18

	// Properties
	public PhysicsMaterial2D Material { get; set; }

	// Methods
	// RVA: 0x717490 Offset: 0x715C90 VA: 0x180717490
	public PhysicsMaterial2D get_Material() { }
	// RVA: 0x7174F0 Offset: 0x715CF0 VA: 0x1807174F0
	public void set_Material(PhysicsMaterial2D value) { }
	// RVA: 0x717560 Offset: 0x715D60 VA: 0x180717560 Slot: 8
	protected override void Awake() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: 
public abstract class ColliderComponent3D : ColliderComponent // TypeDefIndex: 2947
{
	// Fields
	protected Collider collider; // 0x18

	// Properties
	public PhysicMaterial Material { get; set; }

	// Methods
	// RVA: 0x717840 Offset: 0x716040 VA: 0x180717840
	public PhysicMaterial get_Material() { }
	// RVA: 0x7178A0 Offset: 0x7160A0 VA: 0x1807178A0
	public void set_Material(PhysicMaterial value) { }
	// RVA: 0x717910 Offset: 0x716110 VA: 0x180717910 Slot: 8
	protected override void Awake() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: 
public class SphereColliderComponent2D : ColliderComponent2D // TypeDefIndex: 2948
{
	// Fields
	private CircleCollider2D circleCollider; // 0x20

	// Properties
	public override Vector3 Size { get; set; }
	public override Vector3 Offset { get; set; }

	// Methods
	// RVA: 0x6D99E0 Offset: 0x6D81E0 VA: 0x1806D99E0 Slot: 4
	public override Vector3 get_Size() { }
	// RVA: 0x6D9B20 Offset: 0x6D8320 VA: 0x1806D9B20 Slot: 5
	public override void set_Size(Vector3 value) { }
	// RVA: 0x6D9BA0 Offset: 0x6D83A0 VA: 0x1806D9BA0 Slot: 6
	public override Vector3 get_Offset() { }
	// RVA: 0x6D9CC0 Offset: 0x6D84C0 VA: 0x1806D9CC0 Slot: 7
	public override void set_Offset(Vector3 value) { }
	// RVA: 0x6D9DD0 Offset: 0x6D85D0 VA: 0x1806D9DD0 Slot: 8
	protected override void Awake() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class SphereColliderComponent3D : ColliderComponent3D // TypeDefIndex: 2949
{
	// Fields
	private SphereCollider sphereCollider; // 0x20

	// Properties
	public override Vector3 Size { get; set; }
	public override Vector3 Offset { get; set; }

	// Methods
	// RVA: 0x6D9EA0 Offset: 0x6D86A0 VA: 0x1806D9EA0 Slot: 4
	public override Vector3 get_Size() { }
	// RVA: 0x6DA020 Offset: 0x6D8820 VA: 0x1806DA020 Slot: 5
	public override void set_Size(Vector3 value) { }
	// RVA: 0x6DA0A0 Offset: 0x6D88A0 VA: 0x1806DA0A0 Slot: 6
	public override Vector3 get_Offset() { }
	// RVA: 0x6DA130 Offset: 0x6D8930 VA: 0x1806DA130 Slot: 7
	public override void set_Offset(Vector3 value) { }
	// RVA: 0x6DA1B0 Offset: 0x6D89B0 VA: 0x1806DA1B0 Slot: 8
	protected override void Awake() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class CheckLayer : MonoBehaviour // TypeDefIndex: 2950
{
	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class DisableOnLoad : MonoBehaviour // TypeDefIndex: 2951
{
	// Fields
	public bool stateOnLoad; // 0x18

	// Methods
	// RVA: 0x6943E0 Offset: 0x692BE0 VA: 0x1806943E0
	private void Start() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class Animations : MonoBehaviour // TypeDefIndex: 2952
{
	// Fields
	private Animator MyAnimator; // 0x18

	// Methods
	// RVA: 0x6F80C0 Offset: 0x6F68C0 VA: 0x1806F80C0
	private void Awake() { }
	// RVA: 0x6F8140 Offset: 0x6F6940 VA: 0x1806F8140
	public void Walk() { }
	// RVA: 0x6F8210 Offset: 0x6F6A10 VA: 0x1806F8210
	public void WalkLeft() { }
	// RVA: 0x6F82E0 Offset: 0x6F6AE0 VA: 0x1806F82E0
	public void WalkRight() { }
	// RVA: 0x6F83B0 Offset: 0x6F6BB0 VA: 0x1806F83B0
	public void Idle() { }
	// RVA: 0x6F8480 Offset: 0x6F6C80 VA: 0x1806F8480
	public void Run() { }
	// RVA: 0x6F8550 Offset: 0x6F6D50 VA: 0x1806F8550
	public void RunLeft() { }
	// RVA: 0x6F8620 Offset: 0x6F6E20 VA: 0x1806F8620
	public void RunRight() { }
	// RVA: 0x6F86F0 Offset: 0x6F6EF0 VA: 0x1806F86F0
	public void Jump() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class APITest : MonoBehaviour // TypeDefIndex: 2953
{
	// Fields
	public GameObject Follower1; // 0x18
	public GameObject Follower2; // 0x20
	private SPData SPData; // 0x28

	// Methods
	// RVA: 0x6F6B00 Offset: 0x6F5300 VA: 0x1806F6B00
	public void Start() { }
	// RVA: 0x6F6CD0 Offset: 0x6F54D0 VA: 0x1806F6CD0
	private void FollowerSettings(SPData SPData) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class OvalShape : MonoBehaviour // TypeDefIndex: 2954
{
	// Fields
	public float Power; // 0x18
	private SPData SPData; // 0x20

	// Methods
	// RVA: 0x6BFEB0 Offset: 0x6BE6B0 VA: 0x1806BFEB0
	private void Start() { }
	// RVA: 0x6C01E0 Offset: 0x6BE9E0 VA: 0x1806C01E0
	public void .ctor() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class RuntimeControl : MonoBehaviour // TypeDefIndex: 2955
{
	// Fields
	private SPData SPData; // 0x18
	private Transform SelectedPathPoint; // 0x20
	private RuntimeControl.action _transform; // 0x28
	private Vector3 screenPoint; // 0x2C
	private Vector3 offset; // 0x38
	private float rotSpeed; // 0x44

	// Methods
	// RVA: 0x6D0F10 Offset: 0x6CF710 VA: 0x1806D0F10
	private void Start() { }
	// RVA: 0x6D0FA0 Offset: 0x6CF7A0 VA: 0x1806D0FA0
	private void Update() { }
	// RVA: 0x6D0FC0 Offset: 0x6CF7C0 VA: 0x1806D0FC0
	private void SelectPathPoint() { }
	// RVA: 0x6D1600 Offset: 0x6CFE00 VA: 0x1806D1600
	private void ChangeTransform() { }
	// RVA: 0x6D18A0 Offset: 0x6D00A0 VA: 0x1806D18A0
	private void OnMouseDown() { }
	// RVA: 0x6D1C90 Offset: 0x6D0490 VA: 0x1806D1C90
	private void OnMouseDrag() { }
	// RVA: 0x6D20C0 Offset: 0x6D08C0 VA: 0x1806D20C0
	public void .ctor() { }
}

// Namespace: 
public enum RuntimeControl.action // TypeDefIndex: 2956
{
	// Fields
	public int value__; // 0x0
	public const RuntimeControl.action Translation = 0; // 0x0
	public const RuntimeControl.action Rotation = 1; // 0x0
}

// Namespace: 
public class SplinePlusWheel : MonoBehaviour // TypeDefIndex: 2957
{
	// Fields
	public SplinePlus SplinePlus; // 0x18
	public Transform wheel1; // 0x20
	public Transform wheel2; // 0x28

	// Methods
	// RVA: 0x6E0EA0 Offset: 0x6DF6A0 VA: 0x1806E0EA0
	private void Update() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public static class BranchesClass // TypeDefIndex: 2958
{
	// Methods
	// RVA: 0x6F9200 Offset: 0x6F7A00 VA: 0x1806F9200
	public static void BranchWeldSt(SPData SPData) { }
	// RVA: 0x6F9530 Offset: 0x6F7D30 VA: 0x1806F9530
	public static void ConnectedBranches(SPData SPData) { }
	// RVA: 0x6F9920 Offset: 0x6F8120 VA: 0x1806F9920
	public static void AddRefreshSharedNode(SPData SPData, Node node) { }
	// RVA: 0x6F9B20 Offset: 0x6F8320 VA: 0x1806F9B20
	public static void ReverseBranch(SPData SPData, int branchKey) { }
	// RVA: 0x6F9CA0 Offset: 0x6F84A0 VA: 0x1806F9CA0
	public static void FlipHandles(SPData SPData, int branchKey, int nodeIndex) { }
}

// Namespace: 
private sealed class BranchesClass.<>c__DisplayClass2_0 // TypeDefIndex: 2959
{
	// Fields
	public Node pathPoint1; // 0x10
	public SPData SPData; // 0x18
	public Node pathPoint2; // 0x20
	public Predicate<SharedNode> <>9__3; // 0x28

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6E9000 Offset: 0x6E7800 VA: 0x1806E9000
	internal bool <BranchWeldSt>b__0(SharedNode v) { }
	// RVA: 0x6E9120 Offset: 0x6E7920 VA: 0x1806E9120
	internal bool <BranchWeldSt>b__3(SharedNode x) { }
	// RVA: 0x6E9120 Offset: 0x6E7920 VA: 0x1806E9120
	internal bool <BranchWeldSt>b__1(SharedNode x) { }
	// RVA: 0x6E9160 Offset: 0x6E7960 VA: 0x1806E9160
	internal bool <BranchWeldSt>b__2(SharedNode x) { }
}

// Namespace: 
private sealed class BranchesClass.<>c__DisplayClass5_0 // TypeDefIndex: 2960
{
	// Fields
	public SPData SPData; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private sealed class BranchesClass.<>c__DisplayClass5_1 // TypeDefIndex: 2961
{
	// Fields
	public int ii; // 0x10
	public BranchesClass.<>c__DisplayClass5_0 CS$<>8__locals1; // 0x18
	public Predicate<Node> <>9__0; // 0x20

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6E91A0 Offset: 0x6E79A0 VA: 0x1806E91A0
	internal bool <ConnectedBranches>b__0(Node x) { }
}

// Namespace: 
private sealed class BranchesClass.<>c__DisplayClass6_0 // TypeDefIndex: 2962
{
	// Fields
	public Node node; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6E9160 Offset: 0x6E7960 VA: 0x1806E9160
	internal bool <AddRefreshSharedNode>b__0(SharedNode x) { }
}

// Namespace: 
public static class DistanceDataClass // TypeDefIndex: 2963
{
	// Methods
	// RVA: 0x694490 Offset: 0x692C90 VA: 0x180694490
	public static DistanceData DataExtraction(SPData SPData, Follower follower, bool isForward, bool flipDirection) { }
}

// Namespace: 
public class EventClass // TypeDefIndex: 2964
{
	// Methods
	// RVA: 0x69B1E0 Offset: 0x6999E0 VA: 0x18069B1E0
	public void EventsTriggering(Follower follower, int PreviousBranchKey, int CurrentBranchKey) { }
	// RVA: 0x69B450 Offset: 0x699C50 VA: 0x18069B450
	public void EventsTriggering(Train train, int PreviousBranchKey, int CurrentBranchKey) { }
}

// Namespace: 
public class FollowerClass // TypeDefIndex: 2965
{
	// Methods
	// RVA: 0x69BA80 Offset: 0x69A280 VA: 0x18069BA80
	public void Follow(SPData SPData) { }
	// RVA: 0x69BC10 Offset: 0x69A410 VA: 0x18069BC10
	public void AnimationType(SPData SPData, Follower follower) { }
	// RVA: 0x69C180 Offset: 0x69A980 VA: 0x18069C180
	public void AutoAnimated(SPData SPData, Follower follower) { }
	// RVA: 0x69C410 Offset: 0x69AC10 VA: 0x18069C410
	public void IsAtBranchFork(SPData SPData, Follower follower) { }
	// RVA: 0x69C6C0 Offset: 0x69AEC0 VA: 0x18069C6C0
	public bool ProgressCheck(SPData SPData, Follower follower) { }
	// RVA: 0x69C790 Offset: 0x69AF90 VA: 0x18069C790
	public void KeyboardAnimationType(SPData SPData, Follower follower) { }
	// RVA: 0x69CBA0 Offset: 0x69B3A0 VA: 0x18069CBA0
	public void TransformFollower(SPData SPData, Follower follower) { }
	// RVA: 0x69D140 Offset: 0x69B940 VA: 0x18069D140
	public void FollowerProjection(Follower follower) { }
	// RVA: 0x69DB70 Offset: 0x69C370 VA: 0x18069DB70
	public float InputGravity(Follower follower, string state) { }
	// RVA: 0x69E120 Offset: 0x69C920 VA: 0x18069E120
	public static bool IsBranchValid(SPData SPData, int previousBranchIndex, int newBranchKey, Node node) { }
	// RVA: 0x69E480 Offset: 0x69CC80 VA: 0x18069E480
	private void BranchPicking(SPData SPData, SharedNode sharedNode, Follower follower) { }
	// RVA: 0x69E740 Offset: 0x69CF40 VA: 0x18069E740
	public void Branch_Picking_SharedNode(SPData SPData, SharedNode sharedNode, Follower follower, List<int> connectedBranches) { }
	// RVA: 0x69E8C0 Offset: 0x69D0C0 VA: 0x18069E8C0
	public void SetFollowerBranchKey(SPData SPData, SharedNode sharedNode, Follower follower, int branchKey) { }
	// RVA: 0x69EB00 Offset: 0x69D300 VA: 0x18069EB00
	public int DefinedSharedNodeType(SPData SPData, List<int> connectedBranches, SharedNode sharedNode, Follower follower) { }
}

// Namespace: 
private sealed class FollowerClass.<>c__DisplayClass14_0 // TypeDefIndex: 2966
{
	// Fields
	public SharedNode sharedNode; // 0x10
	public SPData SPData; // 0x18
	public Follower follower; // 0x20

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6EB370 Offset: 0x6E9B70 VA: 0x1806EB370
	internal int <DefinedSharedNodeType>b__0() { }
}

// Namespace: 
public class GizmosClass // TypeDefIndex: 2967
{
	// Methods
	// RVA: 0x6A0DA0 Offset: 0x69F5A0 VA: 0x1806A0DA0
	public void FollowerProjectionLines(Follower follower) { }
	// RVA: 0x6A1330 Offset: 0x69FB30 VA: 0x1806A1330
	public void DrawBranch(SPData SPData, Branch branch, int branchInd) { }
	// RVA: 0x6A1D80 Offset: 0x6A0580 VA: 0x1806A1D80
	public void NodesGizmos(SPData SPData) { }
}

// Namespace: 
private sealed class GizmosClass.<>c__DisplayClass1_0 // TypeDefIndex: 2968
{
	// Fields
	public int branchInd; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6EB530 Offset: 0x6E9D30 VA: 0x1806EB530
	internal bool <DrawBranch>b__0(PathFindingPathPoint x) { }
}

// Namespace: 
public class Info : MonoBehaviour // TypeDefIndex: 2969
{
	// Fields
	public string Text; // 0x18

	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class PathGenerator : MonoBehaviour // TypeDefIndex: 2970
{
	// Fields
	public List<GameObject> Points; // 0x18
	public float Radius; // 0x20

	// Methods
	// RVA: 0x6C2BF0 Offset: 0x6C13F0 VA: 0x1806C2BF0
	public void CreatePath() { }
	// RVA: 0x6C2FB0 Offset: 0x6C17B0 VA: 0x1806C2FB0
	public void .ctor() { }
}

// Namespace: 
public class ProjectionClass // TypeDefIndex: 2971
{
	// Methods
	// RVA: 0x6C7350 Offset: 0x6C5B50 VA: 0x1806C7350
	public void ProjectSpline(SPData SPData) { }
}

// Namespace: 
public enum FollowerAnimation // TypeDefIndex: 2972
{
	// Fields
	public int value__; // 0x0
	public const FollowerAnimation AutoAnimated = 0; // 0x0
	public const FollowerAnimation KeyboardInput = 1; // 0x0
	public const FollowerAnimation SceneClick = 2; // 0x0
}

// Namespace: 
public enum SharedNodeType // TypeDefIndex: 2973
{
	// Fields
	public int value__; // 0x0
	public const SharedNodeType Random = 0; // 0x0
	public const SharedNodeType Defined = 1; // 0x0
}

// Namespace: 
public enum RefAxis // TypeDefIndex: 2974
{
	// Fields
	public int value__; // 0x0
	public const RefAxis X = 0; // 0x0
	public const RefAxis Y = 1; // 0x0
	public const RefAxis Z = 2; // 0x0
}

// Namespace: 
public enum NodeType // TypeDefIndex: 2975
{
	// Fields
	public int value__; // 0x0
	public const NodeType Free = 0; // 0x0
	public const NodeType Smooth = 1; // 0x0
	public const NodeType Broken = 2; // 0x0
}

// Namespace: 
public enum BranchWeldState // TypeDefIndex: 2976
{
	// Fields
	public int value__; // 0x0
	public const BranchWeldState none = 0; // 0x0
	public const BranchWeldState First = 1; // 0x0
	public const BranchWeldState Last = 2; // 0x0
	public const BranchWeldState Both = 3; // 0x0
}

// Namespace: 
public enum Modifiers // TypeDefIndex: 2977
{
	// Fields
	public int value__; // 0x0
	public const Modifiers None = 0; // 0x0
	public const Modifiers MeshDeformer = 1; // 0x0
	public const Modifiers Extrude = 2; // 0x0
	public const Modifiers PlaneMesh = 3; // 0x0
	public const Modifiers TubeMesh = 4; // 0x0
}

// Namespace: 
public enum FollowerType // TypeDefIndex: 2978
{
	// Fields
	public int value__; // 0x0
	public const FollowerType Simple = 0; // 0x0
	public const FollowerType Train = 1; // 0x0
	public const FollowerType PathFinding = 2; // 0x0
}

// Namespace: 
public enum UpdateType // TypeDefIndex: 2979
{
	// Fields
	public int value__; // 0x0
	public const UpdateType None = 0; // 0x0
	public const UpdateType SharedNodes = 1; // 0x0
}

// Namespace: 
public enum PathFollowingType // TypeDefIndex: 2980
{
	// Fields
	public int value__; // 0x0
	public const PathFollowingType Strict = 0; // 0x0
	public const PathFollowingType Projected = 1; // 0x0
}

// Namespace: 
[Serializable]
public class SPData : ISerializationCallbackReceiver // TypeDefIndex: 2981
{
	// Fields
	public RefAxis ReferenceAxis; // 0x10
	public Modifiers Modifiers; // 0x14
	public FollowerType FollowerType; // 0x18
	public List<Follower> Followers; // 0x20
	public List<Train> Trains; // 0x28
	public List<PathFindingGoal> PFFollowers; // 0x30
	public List<SharedNode> SharedNodes; // 0x38
	public SmoothData SmoothData; // 0x40
	public Selections Selections; // 0x48
	public static SharedSettings SharedSettings; // 0x0
	public int Smoothness; // 0x50
	public int PathPointCount; // 0x54
	public int BranchesCount; // 0x58
	public float Offset; // 0x5C
	public static float KeyboardInputValue; // 0x40
	public float RaycastLength; // 0x60
	public float SmoothRadius; // 0x64
	public bool InterpolateRotation; // 0x68
	public bool ShowProjectionRays; // 0x69
	public bool ContinuosProjectionUpdate; // 0x6A
	public bool HandlesProjection; // 0x6B
	public bool MeshOrientation; // 0x6C
	public bool ConstantSpeed; // 0x6D
	public bool EditSpline; // 0x6E
	public bool ShowNodeSettings; // 0x6F
	public bool ShowProjectionSettings; // 0x70
	public bool ShowSplineSettings; // 0x71
	public bool ShowSplineModifiers; // 0x72
	public bool ShowEvents; // 0x73
	public bool IsEditingPivot; // 0x74
	public bool IsLooped; // 0x75
	public Vector3 Pivot; // 0x78
	public SplinePlus AttachedSplinePlus; // 0x88
	public GameObject DataParent; // 0x90
	public SplinePlus SplinePlus; // 0x98
	public Dictionary<int, Branch> DictBranches; // 0xA0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<int> Keys; // 0xA8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<Branch> Values; // 0xB0

	// Methods
	// RVA: 0x6D20D0 Offset: 0x6D08D0 VA: 0x1806D20D0 Slot: 4
	public void OnBeforeSerialize() { }
	// RVA: 0x6D2320 Offset: 0x6D0B20 VA: 0x1806D2320 Slot: 5
	public void OnAfterDeserialize() { }
	// RVA: 0x6D2500 Offset: 0x6D0D00 VA: 0x1806D2500
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct SharedSettings // TypeDefIndex: 2982
{
	// Fields
	public bool ShowHelper; // 0x0
	public bool ShowGizmos; // 0x1
	public bool ShowSecondaryHandles; // 0x2
	public float HelperSize; // 0x4
	public float GizmosSize; // 0x8
	public Color StandardPathPointColor; // 0xC
	public Color RandomSharedNodeColor; // 0x1C
	public Color DefinedSharedNodeColor; // 0x2C
	public NodeType NodeType; // 0x3C
}

// Namespace: 
[Serializable]
public class Selections // TypeDefIndex: 2983
{
	// Fields
	public int _BranchKey; // 0x10
	public int _Follower; // 0x14
	public int _Agent; // 0x18
	public int _SharedPathPointIndex; // 0x1C
	public BranchWeldState _BranchWeldState; // 0x20
	public int _LocalNodeIndex; // 0x24

	// Methods
	// RVA: 0x6D41D0 Offset: 0x6D29D0 VA: 0x1806D41D0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class Branch // TypeDefIndex: 2984
{
	// Fields
	public List<Vector3> Vertices; // 0x10
	public List<Vector3> Tangents; // 0x18
	public List<Vector3> Normals; // 0x20
	public List<Quaternion> VerticesRotation; // 0x28
	public List<Node> Nodes; // 0x30
	public List<float> SpeedFactor; // 0x38
	public List<float> VerticesDistance; // 0x40
	public float BranchDistance; // 0x48

	// Methods
	// RVA: 0x6F9000 Offset: 0x6F7800 VA: 0x1806F9000
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class SharedNode // TypeDefIndex: 2985
{
	// Fields
	public Node Node; // 0x10
	public List<int> ConnectedBranches; // 0x18
	public SharedNodeType _Type; // 0x20
	public int _Left; // 0x24
	public int _Right; // 0x28
	public int _Forward; // 0x2C
	public int _Backward; // 0x30

	// Methods
	// RVA: 0x6D9620 Offset: 0x6D7E20 VA: 0x1806D9620
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public struct DistanceData // TypeDefIndex: 2986
{
	// Fields
	public int Index; // 0x0
	public Vector3 Position; // 0x4
	public Quaternion Rotation; // 0x10
}

// Namespace: 
[Serializable]
public class Follower // TypeDefIndex: 2987
{
	// Fields
	public int _BranchKey; // 0x10
	public GameObject FollowerGO; // 0x18
	public float Progress; // 0x20
	public float Acceleration; // 0x24
	public float BrakesForce; // 0x28
	public float UpdateTime; // 0x2C
	public FollowerAnimation _FollowerAnimation; // 0x30
	public UpdateType UpdateType; // 0x34
	public PathFollowingType PathFollowingType; // 0x38
	public Vector3 Position; // 0x3C
	public Vector3 Rotation; // 0x48
	public float Speed; // 0x54
	public float KeyGravity; // 0x58
	public float MinDistance; // 0x5C
	public float OnAwakeDelayTime; // 0x60
	public float Delta; // 0x64
	public bool IsForward; // 0x68
	public bool Reverse; // 0x69
	public bool Rot; // 0x6A
	public bool LocalTranslation; // 0x6B
	public bool FlipDirection; // 0x6C
	public bool IsActive; // 0x6D
	public bool AnimationEvents; // 0x6E
	public bool Show; // 0x6F
	public bool GoalReached; // 0x70
	public bool GoalFound; // 0x71
	public bool IsMinDist; // 0x72
	public bool ConsiderTangents; // 0x73
	public DistanceData DistanceData; // 0x74
	public UnityEvent OnMoveEvent; // 0x98
	public UnityEvent IDLEEvent; // 0xA0
	public UnityEvent SpaceEvent; // 0xA8
	public UnityEvent OnAwakeEvent; // 0xB0
	public FollowerProjection FollowerProjection; // 0xB8
	public List<SplinePlusEvent> Events; // 0xC0
	public List<PathFindingPathPoint> PathFindingPath; // 0xC8

	// Methods
	// RVA: 0x69B8D0 Offset: 0x69A0D0 VA: 0x18069B8D0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PathFindingGoal // TypeDefIndex: 2988
{
	// Fields
	public Follower Goal; // 0x10
	public List<Follower> Agents; // 0x18
	public bool Show; // 0x20

	// Methods
	// RVA: 0x6C2B50 Offset: 0x6C1350 VA: 0x1806C2B50
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class Train // TypeDefIndex: 2989
{
	// Fields
	public string Name; // 0x10
	public List<Follower> Wagons; // 0x18
	public float Step; // 0x20
	public bool Show; // 0x24
	public bool IsForward; // 0x25
	public bool IsActive; // 0x26
	public bool IsEndRoad; // 0x27
	public bool AnimationEvents; // 0x28
	public int _BranchKey; // 0x2C
	public float Progress; // 0x30
	public float Speed; // 0x34
	public float KeyGravity; // 0x38
	public float OnAwakeDelayTime; // 0x3C
	public float Acceleration; // 0x40
	public float BrakesForce; // 0x44
	public FollowerAnimation _FollowerAnimation; // 0x48
	public Vector3 Position; // 0x4C
	public Vector3 Rotation; // 0x58
	public UnityEvent OnMoveEvent; // 0x68
	public UnityEvent IDLEEvent; // 0x70
	public UnityEvent SpaceEvent; // 0x78
	public UnityEvent OnAwakeEvent; // 0x80
	public List<SplinePlusEvent> Events; // 0x88

	// Methods
	// RVA: 0x6E1D40 Offset: 0x6E0540 VA: 0x1806E1D40
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class Node // TypeDefIndex: 2990
{
	// Fields
	public Transform Point; // 0x10
	public Transform Point1; // 0x18
	public Transform Point2; // 0x20
	public NodeType _Type; // 0x28
	public int SpeedFactor; // 0x2C
	public int NormalFactor; // 0x30
	public float Distance; // 0x34
	public Vector3 Normal; // 0x38
	public Vector3 Tangent; // 0x44

	// Methods
	// RVA: 0x6B9D10 Offset: 0x6B8510 VA: 0x1806B9D10
	public int LocalIndex(SPData SPData, int branchKey) { }
	// RVA: 0x6B9E70 Offset: 0x6B8670 VA: 0x1806B9E70 Slot: 0
	public override bool Equals(object obj) { }
	// RVA: 0x33B380 Offset: 0x339B80 VA: 0x18033B380 Slot: 2
	public override int GetHashCode() { }
	// RVA: 0x6BA020 Offset: 0x6B8820 VA: 0x1806BA020
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class SplinePlusEvent // TypeDefIndex: 2991
{
	// Fields
	public string EventName; // 0x10
	public UnityEvent MyEvents; // 0x18
	public string BranchIndexEndStr; // 0x20
	public string BranchIndexStartStr; // 0x28
	public int _Condition; // 0x30
	public List<string> Conditions; // 0x38
	public bool AnimationEvents; // 0x40

	// Methods
	// RVA: 0x6E0DD0 Offset: 0x6DF5D0 VA: 0x1806E0DD0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class SmoothData // TypeDefIndex: 2992
{
	// Fields
	public bool IsShared; // 0x10
	public bool SmoothNode; // 0x11
	public Vector3 InitNodePos; // 0x14
	public Vector3 InitNodePoint1Pos; // 0x20
	public Node[] Nodes; // 0x30
	public int[] BranchesIndices; // 0x38
	public List<int> newBranchesIndices; // 0x40
	public bool[] FlippedPathPoint; // 0x48
	public int InitBranchesCount; // 0x50

	// Methods
	// RVA: 0x6D9910 Offset: 0x6D8110 VA: 0x1806D9910
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class PathFindingPathPoint // TypeDefIndex: 2993
{
	// Fields
	public Node Curr; // 0x10
	public int BranchIndex; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class FollowerProjection // TypeDefIndex: 2994
{
	// Fields
	public float GroundRayLength; // 0x10
	public float ObstacleRayLength; // 0x14
	public Transform RayTransform; // 0x18
	public bool GroundColDetect; // 0x20
	public bool ObstacleColDetect; // 0x21
	public bool FollowGroundNormal; // 0x22

	// Methods
	// RVA: 0x69EE70 Offset: 0x69D670 VA: 0x18069EE70
	public void .ctor() { }
}

// Namespace: 
public class SplineCreationClass // TypeDefIndex: 2995
{
	// Methods
	// RVA: 0x6DB480 Offset: 0x6D9C80 VA: 0x1806DB480
	public void UpdateAllBranches(SPData SPData) { }
	// RVA: 0x6DB780 Offset: 0x6D9F80 VA: 0x1806DB780
	public void UpdateBranch(SPData SPData, Branch branch) { }
	// RVA: 0x6DBA00 Offset: 0x6DA200 VA: 0x1806DBA00
	public void CubicBezier(SPData SPData, Branch branch, Node pointA, Node pointB) { }
	// RVA: 0x6DCCC0 Offset: 0x6DB4C0 VA: 0x1806DCCC0
	public void UpdateComponents(SPData SPData) { }
	// RVA: 0x6DCD90 Offset: 0x6DB590 VA: 0x1806DCD90
	private void FindSubPackages(SPData SPData, string type) { }
	// RVA: 0x6DD000 Offset: 0x6DB800 VA: 0x1806DD000
	private Vector3 CalculateCubicBezier(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3) { }
	// RVA: 0x6DD250 Offset: 0x6DBA50 VA: 0x1806DD250
	private Vector3 CalculateTangent(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3) { }
}

// Namespace: 
public class SplinePlus : MonoBehaviour // TypeDefIndex: 2996
{
	// Fields
	public SPData SPData; // 0x18
	public FollowerClass FollowerClass; // 0x20
	public TrainClass TrainClass; // 0x28
	public SplineCreationClass SplineCreationClass; // 0x30
	public EventClass EventClass; // 0x38
	public ProjectionClass ProjectionClass; // 0x40
	public GizmosClass GizmosClass; // 0x48

	// Methods
	// RVA: 0x6DD570 Offset: 0x6DBD70 VA: 0x1806DD570
	public void .ctor() { }
	// RVA: 0x6DD740 Offset: 0x6DBF40 VA: 0x1806DD740
	private void Start() { }
	// RVA: 0x6DD9C0 Offset: 0x6DC1C0 VA: 0x1806DD9C0
	private IEnumerator OnAwakeFollowerEvent(Follower follower) { }
	// RVA: 0x6DDA60 Offset: 0x6DC260 VA: 0x1806DDA60
	private void Update() { }
	// RVA: 0x6DDAB0 Offset: 0x6DC2B0 VA: 0x1806DDAB0
	public void PFFollow() { }
	// RVA: 0x6DDCD0 Offset: 0x6DC4D0 VA: 0x1806DDCD0
	public void PFFindPath(Follower agent, PathFindingGoal pFGoal) { }
	// RVA: 0x6DE010 Offset: 0x6DC810 VA: 0x1806DE010
	public void PFFindAllShortestPaths() { }
	// RVA: 0x6DE290 Offset: 0x6DCA90 VA: 0x1806DE290
	public void SelectFollower(int followerIndex) { }
	// RVA: 0x6DE2C0 Offset: 0x6DCAC0 VA: 0x1806DE2C0
	public void SetSpeed(float Speed) { }
	// RVA: 0x6DE380 Offset: 0x6DCB80 VA: 0x1806DE380
	public void SetProgress(float Progress) { }
	// RVA: 0x6DE440 Offset: 0x6DCC40 VA: 0x1806DE440
	public void GoToNewBranch(int Index) { }
	// RVA: 0x429C60 Offset: 0x428460 VA: 0x180429C60
	public static T CreateInstance(T type) { }
	// RVA: 0x6DE540 Offset: 0x6DCD40 VA: 0x1806DE540
	private void OnDrawGizmosSelected() { }
}

// Namespace: 
private sealed class SplinePlus.<OnAwakeFollowerEvent>d__9 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 2997
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public Follower follower; // 0x20
	public SplinePlus <>4__this; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F6980 Offset: 0x6F5180 VA: 0x1806F6980 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
public static class SplinePlusAPI // TypeDefIndex: 2998
{
	// Methods
	// RVA: 0x6DE7B0 Offset: 0x6DCFB0 VA: 0x1806DE7B0
	public static SPData CreateSplinePlus(Vector3 pos) { }
	// RVA: 0x6DE930 Offset: 0x6DD130 VA: 0x1806DE930
	public static void SmoothAllSharedNodes(SPData SPData, float radius) { }
	// RVA: 0x6DEA40 Offset: 0x6DD240 VA: 0x1806DEA40
	public static void SmoothSharedNode(SPData SPData, SharedNode sharedNode, float radius) { }
	// RVA: 0x6DF410 Offset: 0x6DDC10 VA: 0x1806DF410
	public static int ConnectTwoNodes(SPData SPData, Node pathPoint1, Node pathPoint2) { }
	// RVA: 0x6DF870 Offset: 0x6DE070 VA: 0x1806DF870
	public static void IsSharedPathPoint(SPData SPData, Node node, int currentBranchIndex) { }
	// RVA: 0x6DFAA0 Offset: 0x6DE2A0 VA: 0x1806DFAA0
	public static Node CreateNode(SPData SPData, Vector3 position, bool weld = True) { }
	// RVA: 0x6E03E0 Offset: 0x6DEBE0 VA: 0x1806E03E0
	public static Node DuplicatePathPoint(SPData SPData, Node originPathPoint) { }
}

// Namespace: 
private sealed class SplinePlusAPI.<>c__DisplayClass6_0 // TypeDefIndex: 2999
{
	// Fields
	public Node node; // 0x10
	public Predicate<Node> <>9__0; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6F6AD0 Offset: 0x6F52D0 VA: 0x1806F6AD0
	internal bool <IsSharedPathPoint>b__0(Node x) { }
}

// Namespace: 
public class SplinePlusAnimation : MonoBehaviour // TypeDefIndex: 3000
{
	// Fields
	private Animator Animator; // 0x18
	private SplinePlus SplinePlus; // 0x20

	// Methods
	// RVA: 0x6E0C00 Offset: 0x6DF400 VA: 0x1806E0C00
	private void Start() { }
	// RVA: 0x6E0C90 Offset: 0x6DF490 VA: 0x1806E0C90
	private void Update() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class TrainClass // TypeDefIndex: 3001
{
	// Methods
	// RVA: 0x6E1EB0 Offset: 0x6E06B0 VA: 0x1806E1EB0
	public void Follow(SPData SPData) { }
	// RVA: 0x6E2190 Offset: 0x6E0990 VA: 0x1806E2190
	public void AnimationType(SPData SPData, TrainClass.data data) { }
	// RVA: 0x6E23B0 Offset: 0x6E0BB0 VA: 0x1806E23B0
	public bool ProgressCheck(SPData SPData, TrainClass.data data) { }
	// RVA: 0x6E24A0 Offset: 0x6E0CA0 VA: 0x1806E24A0
	public void AutoAnimated(SPData SPData, TrainClass.data data) { }
	// RVA: 0x6E2990 Offset: 0x6E1190 VA: 0x1806E2990
	public void KeyboardAnimationType(SPData SPData, TrainClass.data data) { }
	// RVA: 0x6E2F60 Offset: 0x6E1760 VA: 0x1806E2F60
	public static void TransformFollower(SPData SPData, TrainClass.data data) { }
	// RVA: 0x6E3600 Offset: 0x6E1E00 VA: 0x1806E3600
	public void InputGravity(TrainClass.data data, string state, int trainHeadIndex) { }
	// RVA: 0x6E41D0 Offset: 0x6E29D0 VA: 0x1806E41D0
	public void AtBranchFork(SPData SPData, TrainClass.data data) { }
	// RVA: 0x6E4800 Offset: 0x6E3000 VA: 0x1806E4800
	private void BranchPicking(SPData SPData, SharedNode sharedNode, TrainClass.data data) { }
	// RVA: 0x6E4B40 Offset: 0x6E3340 VA: 0x1806E4B40
	public static void SetTrainBranchKey(SPData SPData, SharedNode sharedNode, TrainClass.data data, int branchKey) { }
	// RVA: 0x6E4EB0 Offset: 0x6E36B0 VA: 0x1806E4EB0
	public int Branch_Picking_SharedNode(SPData SPData, SharedNode sharedNode, TrainClass.data data, List<int> connectedBranches) { }
}

// Namespace: 
public struct TrainClass.data // TypeDefIndex: 3002
{
	// Fields
	public Follower wagon; // 0x0
	public Train train; // 0x8
	public int i; // 0x10
}

// Namespace: 
public class ETFXProjectileScript : MonoBehaviour // TypeDefIndex: 3003
{
	// Fields
	public GameObject impactParticle; // 0x18
	public GameObject projectileParticle; // 0x20
	public GameObject muzzleParticle; // 0x28
	public float colliderRadius; // 0x30
	public float collideOffset; // 0x34

	// Methods
	// RVA: 0x697C00 Offset: 0x696400 VA: 0x180697C00
	private void Start() { }
	// RVA: 0x6980C0 Offset: 0x6968C0 VA: 0x1806980C0
	private void FixedUpdate() { }
	// RVA: 0x698F80 Offset: 0x697780 VA: 0x180698F80
	public void .ctor() { }
}

// Namespace: 
public class ETFXSceneManager : MonoBehaviour // TypeDefIndex: 3004
{
	// Fields
	public bool GUIHide; // 0x18
	public bool GUIHide2; // 0x19
	public bool GUIHide3; // 0x1A
	public bool GUIHide4; // 0x1B

	// Methods
	// RVA: 0x699310 Offset: 0x697B10 VA: 0x180699310
	public void LoadScene2DDemo() { }
	// RVA: 0x699390 Offset: 0x697B90 VA: 0x180699390
	public void LoadSceneCards() { }
	// RVA: 0x699410 Offset: 0x697C10 VA: 0x180699410
	public void LoadSceneCombat() { }
	// RVA: 0x699490 Offset: 0x697C90 VA: 0x180699490
	public void LoadSceneDecals() { }
	// RVA: 0x699510 Offset: 0x697D10 VA: 0x180699510
	public void LoadSceneDecals2() { }
	// RVA: 0x699590 Offset: 0x697D90 VA: 0x180699590
	public void LoadSceneEmojis() { }
	// RVA: 0x699610 Offset: 0x697E10 VA: 0x180699610
	public void LoadSceneEmojis2() { }
	// RVA: 0x699690 Offset: 0x697E90 VA: 0x180699690
	public void LoadSceneExplosions() { }
	// RVA: 0x699710 Offset: 0x697F10 VA: 0x180699710
	public void LoadSceneExplosions2() { }
	// RVA: 0x699790 Offset: 0x697F90 VA: 0x180699790
	public void LoadSceneFire() { }
	// RVA: 0x699810 Offset: 0x698010 VA: 0x180699810
	public void LoadSceneFire2() { }
	// RVA: 0x699890 Offset: 0x698090 VA: 0x180699890
	public void LoadSceneFire3() { }
	// RVA: 0x699910 Offset: 0x698110 VA: 0x180699910
	public void LoadSceneFireworks() { }
	// RVA: 0x699990 Offset: 0x698190 VA: 0x180699990
	public void LoadSceneFlares() { }
	// RVA: 0x699A10 Offset: 0x698210 VA: 0x180699A10
	public void LoadSceneMagic() { }
	// RVA: 0x699A90 Offset: 0x698290 VA: 0x180699A90
	public void LoadSceneMagic2() { }
	// RVA: 0x699B10 Offset: 0x698310 VA: 0x180699B10
	public void LoadSceneMagic3() { }
	// RVA: 0x699B90 Offset: 0x698390 VA: 0x180699B90
	public void LoadSceneMainDemo() { }
	// RVA: 0x699C10 Offset: 0x698410 VA: 0x180699C10
	public void LoadSceneMissiles() { }
	// RVA: 0x699C90 Offset: 0x698490 VA: 0x180699C90
	public void LoadScenePortals() { }
	// RVA: 0x699D10 Offset: 0x698510 VA: 0x180699D10
	public void LoadScenePortals2() { }
	// RVA: 0x699D90 Offset: 0x698590 VA: 0x180699D90
	public void LoadScenePowerups() { }
	// RVA: 0x699E10 Offset: 0x698610 VA: 0x180699E10
	public void LoadScenePowerups2() { }
	// RVA: 0x699E90 Offset: 0x698690 VA: 0x180699E90
	public void LoadSceneSparkles() { }
	// RVA: 0x699F10 Offset: 0x698710 VA: 0x180699F10
	public void LoadSceneSwordCombat() { }
	// RVA: 0x699F90 Offset: 0x698790 VA: 0x180699F90
	public void LoadSceneSwordCombat2() { }
	// RVA: 0x69A010 Offset: 0x698810 VA: 0x18069A010
	public void LoadSceneMoney() { }
	// RVA: 0x69A090 Offset: 0x698890 VA: 0x18069A090
	public void LoadSceneHealing() { }
	// RVA: 0x69A110 Offset: 0x698910 VA: 0x18069A110
	public void LoadSceneWind() { }
	// RVA: 0x69A190 Offset: 0x698990 VA: 0x18069A190
	private void Update() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public enum ButtonTypes // TypeDefIndex: 3005
{
	// Fields
	public int value__; // 0x0
	public const ButtonTypes NotDefined = 0; // 0x0
	public const ButtonTypes Previous = 1; // 0x0
	public const ButtonTypes Next = 2; // 0x0
}

// Namespace: 
public class PEButtonScript : MonoBehaviour, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler // TypeDefIndex: 3006
{
	// Fields
	private Button myButton; // 0x18
	public ButtonTypes ButtonType; // 0x20

	// Methods
	// RVA: 0x6C01F0 Offset: 0x6BE9F0 VA: 0x1806C01F0
	private void Start() { }
	// RVA: 0x6C02C0 Offset: 0x6BEAC0 VA: 0x1806C02C0 Slot: 4
	public void OnPointerEnter(PointerEventData eventData) { }
	// RVA: 0x6C0450 Offset: 0x6BEC50 VA: 0x1806C0450 Slot: 5
	public void OnPointerExit(PointerEventData eventData) { }
	// RVA: 0x6C05B0 Offset: 0x6BEDB0 VA: 0x1806C05B0
	public void OnButtonClicked() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class ParticleEffectsLibrary : MonoBehaviour // TypeDefIndex: 3007
{
	// Fields
	public static ParticleEffectsLibrary GlobalAccess; // 0x0
	public int TotalEffects; // 0x18
	public int CurrentParticleEffectIndex; // 0x1C
	public int CurrentParticleEffectNum; // 0x20
	public Vector3[] ParticleEffectSpawnOffsets; // 0x28
	public float[] ParticleEffectLifetimes; // 0x30
	public GameObject[] ParticleEffectPrefabs; // 0x38
	private string effectNameString; // 0x40
	private List<Transform> currentActivePEList; // 0x48
	private Vector3 spawnPosition; // 0x50

	// Methods
	// RVA: 0x6C0960 Offset: 0x6BF160 VA: 0x1806C0960
	private void Awake() { }
	// RVA: 0x6C0D40 Offset: 0x6BF540 VA: 0x1806C0D40
	public string GetCurrentPENameString() { }
	// RVA: 0x6C1040 Offset: 0x6BF840 VA: 0x1806C1040
	public void PreviousParticleEffect() { }
	// RVA: 0x6C14B0 Offset: 0x6BFCB0 VA: 0x1806C14B0
	public void NextParticleEffect() { }
	// RVA: 0x6C1930 Offset: 0x6C0130 VA: 0x1806C1930
	public void SpawnParticleEffect(Vector3 positionInWorldToSpawn) { }
	// RVA: 0x6C1D70 Offset: 0x6C0570 VA: 0x1806C1D70
	public void .ctor() { }
}

// Namespace: 
public class UICanvasManager : MonoBehaviour // TypeDefIndex: 3008
{
	// Fields
	public static UICanvasManager GlobalAccess; // 0x0
	public bool MouseOverButton; // 0x18
	public Text PENameText; // 0x20
	public Text ToolTipText; // 0x28
	private RaycastHit rayHit; // 0x30

	// Methods
	// RVA: 0x6E5090 Offset: 0x6E3890 VA: 0x1806E5090
	private void Awake() { }
	// RVA: 0x6E5110 Offset: 0x6E3910 VA: 0x1806E5110
	private void Start() { }
	// RVA: 0x6E5200 Offset: 0x6E3A00 VA: 0x1806E5200
	private void Update() { }
	// RVA: 0x6E5310 Offset: 0x6E3B10 VA: 0x1806E5310
	public void UpdateToolTip(ButtonTypes toolTipType) { }
	// RVA: 0x6E5410 Offset: 0x6E3C10 VA: 0x1806E5410
	public void ClearToolTip() { }
	// RVA: 0x6E54E0 Offset: 0x6E3CE0 VA: 0x1806E54E0
	private void SelectPreviousPE() { }
	// RVA: 0x6E55F0 Offset: 0x6E3DF0 VA: 0x1806E55F0
	private void SelectNextPE() { }
	// RVA: 0x6E5700 Offset: 0x6E3F00 VA: 0x1806E5700
	private void SpawnCurrentParticleEffect() { }
	// RVA: 0x6E5940 Offset: 0x6E4140 VA: 0x1806E5940
	public void UIButtonClick(ButtonTypes buttonTypeClicked) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class GameSettings : MonoBehaviour // TypeDefIndex: 3009
{
	// Fields
	public static GameSettings instance; // 0x0
	public static GameObject Ocean; // 0x8
	public static GameObject OceanLevel; // 0x10
	public static GameObject PostProcessing; // 0x18
	public static GameObject Camera; // 0x20
	public static bool renderOcean; // 0x28
	public static bool renderTrees; // 0x29
	public static bool otherPlayers; // 0x2A
	public static bool postProcessing; // 0x2B
	public static bool renderFancyLights; // 0x2C
	public static float detailDensity; // 0x30
	public static int screenwidth; // 0x34
	public static int screenheight; // 0x38
	public static bool fullscreen; // 0x3C
	public static float audioVolume; // 0x40
	public static float mouseSensitivity; // 0x44
	public static bool cursorVisible; // 0x48

	// Methods
	// RVA: 0x69F230 Offset: 0x69DA30 VA: 0x18069F230
	private void Awake() { }
	// RVA: 0x69F2D0 Offset: 0x69DAD0 VA: 0x18069F2D0
	private void Start() { }
	// RVA: 0x69FF40 Offset: 0x69E740 VA: 0x18069FF40
	public static void SetPostProcessing(bool state) { }
	// RVA: 0x6A00E0 Offset: 0x69E8E0 VA: 0x1806A00E0
	public static void SetOtherPlayers(bool state) { }
	// RVA: 0x6A0190 Offset: 0x69E990 VA: 0x1806A0190
	public static void RenderTrees(bool state) { }
	// RVA: 0x6A0460 Offset: 0x69EC60 VA: 0x1806A0460
	public static void DetailDensity(float density) { }
	// RVA: 0x6A0600 Offset: 0x69EE00 VA: 0x1806A0600
	public static void AudioVolume(float volume) { }
	// RVA: 0x6A07A0 Offset: 0x69EFA0 VA: 0x1806A07A0
	public static void MouseSensitivity(float sensitivity) { }
	// RVA: 0x6A0960 Offset: 0x69F160 VA: 0x1806A0960
	public static void UpdateScreen(int width, int height, bool _fullscreen) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
	// RVA: 0x6A0B10 Offset: 0x69F310 VA: 0x1806A0B10
	private static void .cctor() { }
}

// Namespace: 
public class GenerateMaze : MonoBehaviour // TypeDefIndex: 3010
{
	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class Highscore : MonoBehaviour // TypeDefIndex: 3011
{
	// Fields
	public TMP_Text[] t_highscores; // 0x18
	public TMP_Text[] t_personal_highscores; // 0x20
	public ServerManager serverManager; // 0x28

	// Methods
	// RVA: 0x6A29D0 Offset: 0x6A11D0 VA: 0x1806A29D0
	private void Start() { }
	// RVA: 0x6A2B30 Offset: 0x6A1330 VA: 0x1806A2B30
	private IEnumerator updateHighscoreLoop() { }
	// RVA: 0x6A2BC0 Offset: 0x6A13C0 VA: 0x1806A2BC0
	public IEnumerator updateHighscore() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
private sealed class Highscore.<updateHighscoreLoop>d__4 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3012
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public Highscore <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6EBB40 Offset: 0x6EA340 VA: 0x1806EBB40 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class Highscore.<updateHighscore>d__5 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3013
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public Highscore <>4__this; // 0x20
	private UnityWebRequest <www>5__2; // 0x28
	private string <apihost>5__3; // 0x30

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6EB550 Offset: 0x6E9D50 VA: 0x1806EB550 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
public class HoverEffect : MonoBehaviour // TypeDefIndex: 3014
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float rangeFactor; // 0x18
	private Vector3 initialPosition; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float speed; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ServerManager server; // 0x30

	// Methods
	// RVA: 0x6A2C50 Offset: 0x6A1450 VA: 0x1806A2C50
	private void Start() { }
	// RVA: 0x6A2D20 Offset: 0x6A1520 VA: 0x1806A2D20
	private void FixedUpdate() { }
	// RVA: 0x6A2F50 Offset: 0x6A1750 VA: 0x1806A2F50
	public void .ctor() { }
}

// Namespace: 
public class InformTrigger : MonoBehaviour // TypeDefIndex: 3015
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private UnityEvent triggerEvent; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool triggerOnce; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private InformTrigger dependsOn; // 0x28
	public bool triggered; // 0x30
	public bool ready_to_fire; // 0x31

	// Methods
	// RVA: 0x6A2F70 Offset: 0x6A1770 VA: 0x1806A2F70
	private void emitEvent() { }
	// RVA: 0x6A3090 Offset: 0x6A1890 VA: 0x1806A3090
	private void OnTriggerStay(Collider other) { }
	// RVA: 0x6A3090 Offset: 0x6A1890 VA: 0x1806A3090
	private void OnTriggerEnter(Collider other) { }
	// RVA: 0x6A30A0 Offset: 0x6A18A0 VA: 0x1806A30A0
	public void .ctor() { }
}

// Namespace: 
public class ScrollingUVs_Layers : MonoBehaviour // TypeDefIndex: 3016
{
	// Fields
	public Vector2 uvAnimationRate; // 0x18
	public string textureName; // 0x20
	private Vector2 uvOffset; // 0x28

	// Methods
	// RVA: 0x6D3E20 Offset: 0x6D2620 VA: 0x1806D3E20
	private void LateUpdate() { }
	// RVA: 0x6D4100 Offset: 0x6D2900 VA: 0x1806D4100
	public void .ctor() { }
}

// Namespace: 
public class MainMenu : MonoBehaviour // TypeDefIndex: 3017
{
	// Fields
	private int port_min; // 0x18
	private int port_max; // 0x1C
	private string hostname; // 0x20
	private string username; // 0x28
	private string userpassword; // 0x30
	private int controlledby; // 0x38
	private string[] name; // 0x40
	public TMP_InputField i_hostname; // 0x48
	public TMP_InputField i_userpassword; // 0x50
	public TMP_InputField i_username; // 0x58
	public TMP_InputField i_port_min; // 0x60
	public TMP_InputField i_port_max; // 0x68
	public TMP_Text t_status; // 0x70
	public TMP_Text t_welcome; // 0x78
	public GameObject loginButton; // 0x80
	public GameObject retryButton; // 0x88
	public TMP_Dropdown i_controlledby; // 0x90
	private Random random; // 0x98

	// Methods
	// RVA: 0x6AAFF0 Offset: 0x6A97F0 VA: 0x1806AAFF0
	public string RandomString(int length) { }
	// RVA: 0x6AB220 Offset: 0x6A9A20 VA: 0x1806AB220
	private IEnumerator getConfig() { }
	// RVA: 0x6AB2B0 Offset: 0x6A9AB0 VA: 0x1806AB2B0
	private void Start() { }
	// RVA: 0x6AB7D0 Offset: 0x6A9FD0 VA: 0x1806AB7D0
	public void retryServer() { }
	// RVA: 0x6AB920 Offset: 0x6AA120 VA: 0x1806AB920
	private void initUI() { }
	// RVA: 0x6ABBD0 Offset: 0x6AA3D0 VA: 0x1806ABBD0
	private void startGame() { }
	// RVA: 0x6ABD90 Offset: 0x6AA590 VA: 0x1806ABD90
	public void setMazeHostname() { }
	// RVA: 0x6AC130 Offset: 0x6AA930 VA: 0x1806AC130
	public void setInputHostname() { }
	// RVA: 0x6AC1D0 Offset: 0x6AA9D0 VA: 0x1806AC1D0
	public void .ctor() { }
	// RVA: 0x6AD390 Offset: 0x6ABB90 VA: 0x1806AD390
	private char <RandomString>b__18_0(string s) { }
}

// Namespace: 
private sealed class MainMenu.<getConfig>d__19 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3018
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public MainMenu <>4__this; // 0x20
	private bool <server_healthy>5__2; // 0x28
	private UnityWebRequest <www>5__3; // 0x30
	private string[] <>7__wrap3; // 0x38
	private int <>7__wrap4; // 0x40
	private string <apihost>5__6; // 0x48

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6EBC20 Offset: 0x6EA420 VA: 0x1806EBC20 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class ListMeshVertCount : MonoBehaviour // TypeDefIndex: 3019
{
	// Fields
	public bool includeInActive; // 0x18
	public bool listVertCount; // 0x19

	// Methods
	// RVA: 0x6A6DB0 Offset: 0x6A55B0 VA: 0x1806A6DB0
	private void Update() { }
	// RVA: 0x6A6DD0 Offset: 0x6A55D0 VA: 0x1806A6DD0
	private void ListVertCount() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
[ExecuteInEditMode] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class EnableChildrenMeshRenderers : MonoBehaviour // TypeDefIndex: 3020
{
	// Fields
	public bool execute; // 0x18

	// Methods
	// RVA: 0x69AF90 Offset: 0x699790 VA: 0x18069AF90
	private void Update() { }
	// RVA: 0x69B0C0 Offset: 0x6998C0 VA: 0x18069B0C0
	private void Execute() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class NPCController : MonoBehaviour // TypeDefIndex: 3021
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 current_position; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 next_position; // 0x24
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private SkinnedMeshRenderer rabbitRenderer; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TMP_Text hoverName; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Canvas hoverCanvas; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ServerManager serverManager; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string npc_name; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ushort unlocks; // 0x58
	private bool new_info; // 0x5A
	public uint uid; // 0x5C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Material[] materials; // 0x60
	private float current_groundblend; // 0x68
	private float next_groundblend; // 0x6C
	public float lastUpdatedTime; // 0x70
	private float current_notgroundblend; // 0x74
	private float next_notgroundblend; // 0x78
	private bool disable_position_updates; // 0x7C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 current_rotation; // 0x80
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 next_rotation; // 0x8C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Quaternion current_quaternion; // 0x98
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Quaternion next_quaternion; // 0xA8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject animation; // 0xB8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TrailRenderer trail; // 0xC0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject[] emojiAnimation; // 0xC8
	public uint last_emoji; // 0xD0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float transitionSpeed; // 0xD4
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float animationSpeed; // 0xD8
	private float transition; // 0xDC
	private float animationTransition; // 0xE0
	private bool candestroy; // 0xE4
	private Animator animator; // 0xE8
	private bool destroyStarted; // 0xF0

	// Methods
	// RVA: 0x6B7EB0 Offset: 0x6B66B0 VA: 0x1806B7EB0
	private void Start() { }
	// RVA: 0x6B83F0 Offset: 0x6B6BF0 VA: 0x1806B83F0
	private IEnumerator requestInfo() { }
	// RVA: 0x6B8480 Offset: 0x6B6C80 VA: 0x1806B8480
	public void setNewInfo(string _name, ushort _unlocks) { }
	// RVA: 0x6B84A0 Offset: 0x6B6CA0 VA: 0x1806B84A0
	public void triggerGrounded() { }
	// RVA: 0x6B8570 Offset: 0x6B6D70 VA: 0x1806B8570
	public void triggerAttack1() { }
	// RVA: 0x6B8640 Offset: 0x6B6E40 VA: 0x1806B8640
	public void triggerAttack2() { }
	// RVA: 0x6B8710 Offset: 0x6B6F10 VA: 0x1806B8710
	public void triggerGroundedWall() { }
	// RVA: 0x6B87E0 Offset: 0x6B6FE0 VA: 0x1806B87E0
	public void triggerNotGrounded() { }
	// RVA: 0x6B88B0 Offset: 0x6B70B0 VA: 0x1806B88B0
	public void triggerDeath() { }
	// RVA: 0x6B8A20 Offset: 0x6B7220 VA: 0x1806B8A20
	private IEnumerator disablePositionUpdatesFor4s() { }
	// RVA: 0x6B8AB0 Offset: 0x6B72B0 VA: 0x1806B8AB0
	public void setGroundedBlend(float blend) { }
	// RVA: 0x6B8AD0 Offset: 0x6B72D0 VA: 0x1806B8AD0
	public void setNotGroundedBlend(float blend) { }
	// RVA: 0x6B8AF0 Offset: 0x6B72F0 VA: 0x1806B8AF0
	private void setPosition(Vector3 new_position) { }
	// RVA: 0x6B8BD0 Offset: 0x6B73D0 VA: 0x1806B8BD0
	public void newPosition(Vector3 new_position, Vector3 new_rotation) { }
	// RVA: 0x6B8F40 Offset: 0x6B7740 VA: 0x1806B8F40
	private IEnumerator showAnimation() { }
	// RVA: 0x6B8FD0 Offset: 0x6B77D0 VA: 0x1806B8FD0
	public IEnumerator showEmoji(ushort _emoji) { }
	// RVA: 0x6B9070 Offset: 0x6B7870 VA: 0x1806B9070
	private void FixedUpdate() { }
	// RVA: 0x6B9CF0 Offset: 0x6B84F0 VA: 0x1806B9CF0
	public void .ctor() { }
}

// Namespace: 
private sealed class NPCController.<requestInfo>d__32 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3022
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public NPCController <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F1E00 Offset: 0x6F0600 VA: 0x1806F1E00 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class NPCController.<disablePositionUpdatesFor4s>d__40 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3023
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public NPCController <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F1CE0 Offset: 0x6F04E0 VA: 0x1806F1CE0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class NPCController.<showAnimation>d__45 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3024
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public NPCController <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F1EC0 Offset: 0x6F06C0 VA: 0x1806F1EC0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class NPCController.<showEmoji>d__46 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3025
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ushort _emoji; // 0x20
	public NPCController <>4__this; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F2000 Offset: 0x6F0800 VA: 0x1806F2000 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
public class RaceManager : MonoBehaviour // TypeDefIndex: 3026
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject[] checkpoints; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ServerManager serverManager; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Highscore highscore; // 0x28
	private float last_checkpoint; // 0x30
	private int last_checkpoint_id; // 0x34
	private bool raceRunning; // 0x38
	private bool reachedFinishline; // 0x39

	// Methods
	// RVA: 0x6C7E40 Offset: 0x6C6640 VA: 0x1806C7E40
	private void Start() { }
	// RVA: 0x6C7F80 Offset: 0x6C6780 VA: 0x1806C7F80
	public void gotCheckpoint(int checkpoint_id, float time) { }
	// RVA: 0x6C8070 Offset: 0x6C6870 VA: 0x1806C8070
	private void Update() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class SceneLoader : MonoBehaviour // TypeDefIndex: 3027
{
	// Fields
	public TMP_Text t_progress; // 0x18

	// Methods
	// RVA: 0x6D3D00 Offset: 0x6D2500 VA: 0x1806D3D00
	private void Start() { }
	// RVA: 0x6D3D90 Offset: 0x6D2590 VA: 0x1806D3D90
	private IEnumerator LoadYourAsyncScene() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
private sealed class SceneLoader.<LoadYourAsyncScene>d__3 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3028
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public SceneLoader <>4__this; // 0x20
	private AsyncOperation <asyncLoad>5__2; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F45B0 Offset: 0x6F2DB0 VA: 0x1806F45B0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
public class UILoader : MonoBehaviour // TypeDefIndex: 3029
{
	// Fields
	public GameObject toggle1; // 0x18
	public GameObject toggle2; // 0x20
	public ServerManager serverManager; // 0x28

	// Methods
	// RVA: 0x6E5F00 Offset: 0x6E4700 VA: 0x1806E5F00
	private void Start() { }
	// RVA: 0x6E5F80 Offset: 0x6E4780 VA: 0x1806E5F80
	private void Update() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
public class ServerManager : MonoBehaviour // TypeDefIndex: 3030
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameSettings gameSettings; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CharacterBrain brain; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject playerCharacter; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject playerCharacterGraphics; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Animator playerAnimator; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private SkinnedMeshRenderer rabbitRenderer; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Material[] materials; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TrailRenderer trail; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject[] teleporters; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject[] locked_teleporters; // 0x60
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject npcPrefab; // 0x68
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private RaceManager racemanager; // 0x70
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TextMeshProUGUI t_server; // 0x78
	private string t_server_text; // 0x80
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TextMeshProUGUI t_fps; // 0x88
	private string t_fps_text; // 0x90
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject gameOver; // 0x98
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject emojibar; // 0xA0
	private bool emojibar_active; // 0xA8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject flagScreen; // 0xB0
	private string flag_text; // 0xB8
	private float flag_duration; // 0xC0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject discoverScreen; // 0xC8
	private string discover_text; // 0xD0
	private bool uglyCode; // 0xD8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject black_screen; // 0xE0
	private bool black_screen_active; // 0xE8
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private byte version; // 0xE9
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TextMeshProUGUI t_error; // 0xF0
	private string t_error_text; // 0xF8
	public bool loggedIn; // 0x100
	private bool play_death_animation; // 0x101
	private bool disable_gameover; // 0x102
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Dictionary<uint, NPCController> players; // 0x108
	private float heartbeat_roundtrip; // 0x110
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool onlinePlay; // 0x114
	public float rate_limit; // 0x118
	private ConcurrentQueue<ServerManager.NPCInit> instantiateQueue; // 0x120
	private ConcurrentDictionary<uint, ServerManager.NPCInit> instantiateDict; // 0x128
	private ConcurrentQueue<ServerManager.NPCInit> eventQueue; // 0x130
	private UdpClient client; // 0x138
	private IPEndPoint anyIP; // 0x140
	private string host; // 0x148
	private int port; // 0x150
	private Thread threadRecv; // 0x158
	private bool recvLoop; // 0x160
	private string username; // 0x168
	private uint uid; // 0x170
	public ushort unlocks; // 0x174
	private bool got_new_unlock; // 0x176
	public byte[] usersecret; // 0x178
	public float time; // 0x180
	public float server_time; // 0x184
	private long start_server_time; // 0x188
	private float lastUpdate; // 0x190
	public float lastServerPacket; // 0x194
	public float loginAttempt; // 0x198
	public float lastHeartbeat; // 0x19C
	private byte trigger; // 0x1A0
	private short groundedblend; // 0x1A2
	private short notgroundedblend; // 0x1A4
	private float teleport_player_x; // 0x1A8
	private float teleport_player_y; // 0x1AC
	private float teleport_player_z; // 0x1B0
	private byte teleport_instant; // 0x1B4
	private bool teleport_ready; // 0x1B5
	private bool blocking_position_updates; // 0x1B6
	public bool enable_movement; // 0x1B7
	public bool disable_movement; // 0x1B8
	private Random rand; // 0x1C0
	private bool otherPlayers; // 0x1C8
	private Vector3 position; // 0x1CC
	private Vector3 eulerAngles; // 0x1D8
	private Vector3 current_position; // 0x1E4
	private Vector3 current_eulerAngles; // 0x1F0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject unlockAnimation; // 0x200
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject[] emojiAnimation; // 0x208
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject[] emojiUI; // 0x210
	private ushort emoji; // 0x218
	private uint new_emoji; // 0x21C
	private uint last_emoji; // 0x220
	public float teleport_x; // 0x224
	public float teleport_y; // 0x228
	public float teleport_z; // 0x22C
	private Color fps_color; // 0x230
	private float noPlayerMultiplier; // 0x240
	private bool movementEnabled; // 0x244

	// Methods
	// RVA: 0x6D41E0 Offset: 0x6D29E0 VA: 0x1806D41E0
	private void Start() { }
	// RVA: 0x6D4420 Offset: 0x6D2C20 VA: 0x1806D4420
	private IEnumerator showAnimation() { }
	// RVA: 0x6D44B0 Offset: 0x6D2CB0 VA: 0x1806D44B0
	private IEnumerator delayedStart() { }
	// RVA: 0x6D4540 Offset: 0x6D2D40 VA: 0x1806D4540
	private void OnDestroy() { }
	// RVA: 0x6D4590 Offset: 0x6D2D90 VA: 0x1806D4590
	public void teleportForward() { }
	// RVA: 0x6D4810 Offset: 0x6D3010 VA: 0x1806D4810
	public void toggleAIHuman() { }
	// RVA: 0x6D48B0 Offset: 0x6D30B0 VA: 0x1806D48B0
	private void Login() { }
	// RVA: 0x6D4F90 Offset: 0x6D3790 VA: 0x1806D4F90
	private IEnumerator LoginLoop() { }
	// RVA: 0x6D5020 Offset: 0x6D3820 VA: 0x1806D5020
	private string ByteToHex(byte[] ba) { }
	// RVA: 0x6D50E0 Offset: 0x6D38E0 VA: 0x1806D50E0
	public string getSecret() { }
	// RVA: 0x6D50F0 Offset: 0x6D38F0 VA: 0x1806D50F0
	private void UpdateServerPosition(bool force) { }
	// RVA: 0x6D5720 Offset: 0x6D3F20 VA: 0x1806D5720
	public void sendEmoji(ushort _emoji) { }
	// RVA: 0x6D5880 Offset: 0x6D4080 VA: 0x1806D5880
	private bool sendData(byte[] pkt) { }
	// RVA: 0x6D5B00 Offset: 0x6D4300 VA: 0x1806D5B00
	public void SendInfoRequest(uint uid) { }
	// RVA: 0x6D5CD0 Offset: 0x6D44D0 VA: 0x1806D5CD0
	private void sendHeartbeat() { }
	// RVA: 0x6D5E80 Offset: 0x6D4680 VA: 0x1806D5E80
	public void setGroundedBlend(float blend) { }
	// RVA: 0x6D5EA0 Offset: 0x6D46A0 VA: 0x1806D5EA0
	public void setNotGroundedBlend(float blend) { }
	// RVA: 0x6D5EC0 Offset: 0x6D46C0 VA: 0x1806D5EC0
	public void setAnimatorBlend(float blendgrounded, float blendnotgrounded) { }
	// RVA: 0x6D5EF0 Offset: 0x6D46F0 VA: 0x1806D5EF0
	private bool compareBytes(byte[] b1, byte[] b2) { }
	// RVA: 0x6D5F70 Offset: 0x6D4770 VA: 0x1806D5F70
	private void RecieveDataThread() { }
	// RVA: 0x6D7440 Offset: 0x6D5C40 VA: 0x1806D7440
	public void showText(string msg) { }
	// RVA: 0x6D7520 Offset: 0x6D5D20 VA: 0x1806D7520
	public void setTriggerGrounded() { }
	// RVA: 0x6D7540 Offset: 0x6D5D40 VA: 0x1806D7540
	public void setTriggerNotGrounded() { }
	// RVA: 0x6D7560 Offset: 0x6D5D60 VA: 0x1806D7560
	public void setTriggerAttack1() { }
	// RVA: 0x6D7580 Offset: 0x6D5D80 VA: 0x1806D7580
	public void setTriggerAttack2() { }
	// RVA: 0x6D75A0 Offset: 0x6D5DA0 VA: 0x1806D75A0
	public void setTriggerGroundedWall() { }
	// RVA: 0x6D75C0 Offset: 0x6D5DC0 VA: 0x1806D75C0
	public void setTriggerDeath() { }
	// RVA: 0x6D75E0 Offset: 0x6D5DE0 VA: 0x1806D75E0
	private IEnumerator ShowFlag() { }
	// RVA: 0x6D7670 Offset: 0x6D5E70 VA: 0x1806D7670
	private IEnumerator ShowDiscover() { }
	// RVA: 0x6D7700 Offset: 0x6D5F00 VA: 0x1806D7700
	private IEnumerator DeathAnimation() { }
	// RVA: 0x6D7790 Offset: 0x6D5F90 VA: 0x1806D7790
	private IEnumerator showEmoji(ushort _emoji) { }
	// RVA: 0x6D7830 Offset: 0x6D6030 VA: 0x1806D7830
	public void removePlayer(uint uid) { }
	// RVA: 0x6D7900 Offset: 0x6D6100 VA: 0x1806D7900
	private IEnumerator consumePlayerQueue() { }
	// RVA: 0x6D7990 Offset: 0x6D6190 VA: 0x1806D7990
	private IEnumerator consumeEventQueue() { }
	// RVA: 0x6D7A20 Offset: 0x6D6220 VA: 0x1806D7A20
	private void Update() { }
	// RVA: 0x6D93E0 Offset: 0x6D7BE0 VA: 0x1806D93E0
	public void .ctor() { }
}

// Namespace: 
private class ServerManager.NPCInit // TypeDefIndex: 3031
{
	// Fields
	public uint uid; // 0x10
	public ulong time; // 0x18
	public Vector3 position; // 0x20
	public Vector3 eulerAngle; // 0x2C
	public GameObject obj; // 0x38
	public byte player_trigger; // 0x40
	public float player_grounded; // 0x44
	public float player_notgrounded; // 0x48
	public ushort emoji; // 0x4C
	public uint emoji_time; // 0x50

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
private sealed class ServerManager.<showAnimation>d__83 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3032
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ServerManager <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F5F10 Offset: 0x6F4710 VA: 0x1806F5F10 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class ServerManager.<delayedStart>d__84 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3033
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ServerManager <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F5E40 Offset: 0x6F4640 VA: 0x1806F5E40 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class ServerManager.<LoginLoop>d__92 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3034
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ServerManager <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F4AD0 Offset: 0x6F32D0 VA: 0x1806F4AD0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class ServerManager.<ShowFlag>d__112 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3035
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ServerManager <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F5130 Offset: 0x6F3930 VA: 0x1806F5130 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class ServerManager.<ShowDiscover>d__113 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3036
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ServerManager <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F4F90 Offset: 0x6F3790 VA: 0x1806F4F90 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class ServerManager.<DeathAnimation>d__114 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3037
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ServerManager <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F49A0 Offset: 0x6F31A0 VA: 0x1806F49A0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class ServerManager.<showEmoji>d__115 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3038
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ushort _emoji; // 0x20
	public ServerManager <>4__this; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F6050 Offset: 0x6F4850 VA: 0x1806F6050 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class ServerManager.<consumePlayerQueue>d__120 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3039
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ServerManager <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F5570 Offset: 0x6F3D70 VA: 0x1806F5570 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class ServerManager.<consumeEventQueue>d__121 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3040
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ServerManager <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F52F0 Offset: 0x6F3AF0 VA: 0x1806F52F0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
public class ShowText : MonoBehaviour // TypeDefIndex: 3041
{
	// Fields
	private TMP_Text text; // 0x18
	public string showText; // 0x20

	// Methods
	// RVA: 0x6D96E0 Offset: 0x6D7EE0 VA: 0x1806D96E0
	private void Start() { }
	// RVA: 0x6D9760 Offset: 0x6D7F60 VA: 0x1806D9760
	public void startAnimatingText() { }
	// RVA: 0x6D97F0 Offset: 0x6D7FF0 VA: 0x1806D97F0
	private IEnumerator AnimateText() { }
	// RVA: 0x6D9880 Offset: 0x6D8080 VA: 0x1806D9880
	public void .ctor() { }
}

// Namespace: 
private sealed class ShowText.<AnimateText>d__5 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3042
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ShowText <>4__this; // 0x20
	private int <i>5__2; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F6250 Offset: 0x6F4A50 VA: 0x1806F6250 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
[Serializable]
public class SplineEvent // TypeDefIndex: 3043
{
	// Fields
	public float progress; // 0x10
	public UnityEvent triggerEvent; // 0x18
	public bool triggered; // 0x20

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
public class SplineController : MonoBehaviour // TypeDefIndex: 3044
{
	// Fields
	private SplinePlus sp; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Animator animator; // 0x20
	public string initTrigger; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<SplineEvent> EventList; // 0x30
	public InformTrigger state2_to_3_trigger; // 0x38
	public InformTrigger state3_to_4_trigger; // 0x40

	// Methods
	// RVA: 0x6DA280 Offset: 0x6D8A80 VA: 0x1806DA280
	public void EnableTrigger(InformTrigger trigger) { }
	// RVA: 0x6DA2A0 Offset: 0x6D8AA0 VA: 0x1806DA2A0
	private void Start() { }
	// RVA: 0x6DA410 Offset: 0x6D8C10 VA: 0x1806DA410
	private void Update() { }
	// RVA: 0x6DA880 Offset: 0x6D9080 VA: 0x1806DA880
	public void state1_start_walking() { }
	// RVA: 0x6DA9C0 Offset: 0x6D91C0 VA: 0x1806DA9C0
	public void state5_dig_down() { }
	// RVA: 0x6DABA0 Offset: 0x6D93A0 VA: 0x1806DABA0
	private IEnumerator state5_delay3s_walk() { }
	// RVA: 0x6DAC30 Offset: 0x6D9430 VA: 0x1806DAC30
	public void state5_dig_up() { }
	// RVA: 0x6DADE0 Offset: 0x6D95E0 VA: 0x1806DADE0
	private IEnumerator state5_continue_walk() { }
	// RVA: 0x6DAE70 Offset: 0x6D9670 VA: 0x1806DAE70
	public void state2_first_pause() { }
	// RVA: 0x6DAFC0 Offset: 0x6D97C0 VA: 0x1806DAFC0
	public void state3_before_jump() { }
	// RVA: 0x6DB1A0 Offset: 0x6D99A0 VA: 0x1806DB1A0
	public void state7_disappear() { }
	// RVA: 0x6DB340 Offset: 0x6D9B40 VA: 0x1806DB340
	private IEnumerator state3_to_4_delayed() { }
	// RVA: 0x6DB3D0 Offset: 0x6D9BD0 VA: 0x1806DB3D0
	public void .ctor() { }
}

// Namespace: 
private sealed class SplineController.<state5_delay3s_walk>d__11 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3045
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public SplineController <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F6880 Offset: 0x6F5080 VA: 0x1806F6880 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class SplineController.<state5_continue_walk>d__13 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3046
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public SplineController <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F6760 Offset: 0x6F4F60 VA: 0x1806F6760 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
private sealed class SplineController.<state3_to_4_delayed>d__17 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3047
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public SplineController <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6F64A0 Offset: 0x6F4CA0 VA: 0x1806F64A0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: 
public class UIMenu : MonoBehaviour // TypeDefIndex: 3048
{
	// Fields
	public GameObject SubMenuSettings; // 0x18
	public GameObject MainMenu; // 0x20
	public Slider DensitySlider; // 0x28
	public Slider VolumeSlider; // 0x30
	public Slider SensitivitySlider; // 0x38
	public Toggle FullscreenToggle; // 0x40
	public Toggle ToggleOceanRender; // 0x48
	public Toggle ToggleTreeGrass; // 0x50
	public Toggle ToggleFancyLight; // 0x58
	public Toggle TogglePostProcessing; // 0x60
	public Toggle ToggleOtherPlayers; // 0x68
	public TMP_Dropdown ResolutionDropdown; // 0x70
	public GameObject Ocean; // 0x78
	public GameObject OceanLevel; // 0x80
	public GameObject PostProcessing; // 0x88
	public GameObject Camera; // 0x90
	private List<Resolution> resolutions; // 0x98
	public bool renderOcean; // 0xA0
	public bool renderTrees; // 0xA1
	public bool postProcessing; // 0xA2
	public bool renderFancyLights; // 0xA3
	public bool otherPlayers; // 0xA4
	public float detailDensity; // 0xA8
	public int screenwidth; // 0xAC
	public int screenheight; // 0xB0
	public bool fullscreen; // 0xB4
	private string XaxisName; // 0xB8
	private string YaxisName; // 0xC0
	private bool ignoreEvents; // 0xC8
	private int lastScreenWidth; // 0xCC
	private int lastScreenHeight; // 0xD0

	// Methods
	// RVA: 0x6E6850 Offset: 0x6E5050 VA: 0x1806E6850
	private void EnableInputs(bool state) { }
	// RVA: 0x6E6B80 Offset: 0x6E5380 VA: 0x1806E6B80
	private void OnDestroy() { }
	// RVA: 0x6E6C20 Offset: 0x6E5420 VA: 0x1806E6C20
	private void Start() { }
	// RVA: 0x6E7760 Offset: 0x6E5F60 VA: 0x1806E7760
	public void NewGame() { }
	// RVA: 0x6E77E0 Offset: 0x6E5FE0 VA: 0x1806E77E0
	public void SettingsClicked() { }
	// RVA: 0x6E78F0 Offset: 0x6E60F0 VA: 0x1806E78F0
	public void PostProcessingEvent() { }
	// RVA: 0x6E79B0 Offset: 0x6E61B0 VA: 0x1806E79B0
	public void OtherPlayersEvent() { }
	// RVA: 0x6E7A70 Offset: 0x6E6270 VA: 0x1806E7A70
	public void RenderTreesEvent() { }
	// RVA: 0x6E7B30 Offset: 0x6E6330 VA: 0x1806E7B30
	public void DetailDensityEvent() { }
	// RVA: 0x6E7C00 Offset: 0x6E6400 VA: 0x1806E7C00
	public void VolumeEvent() { }
	// RVA: 0x6E7CD0 Offset: 0x6E64D0 VA: 0x1806E7CD0
	public void MouseSensitivityEvent() { }
	// RVA: 0x6E7DA0 Offset: 0x6E65A0 VA: 0x1806E7DA0
	public void UpdateScreenEvent() { }
	// RVA: 0x537110 Offset: 0x535910 VA: 0x180537110
	public void Exit() { }
	// RVA: 0x6E7ED0 Offset: 0x6E66D0 VA: 0x1806E7ED0
	public void .ctor() { }
}

// Namespace: 
public class Windmill : MonoBehaviour // TypeDefIndex: 3049
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float speed; // 0x18
	private Vector3 initialPosition; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ServerManager server; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 rotationDirection; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 current; // 0x3C

	// Methods
	// RVA: 0x6E8850 Offset: 0x6E7050 VA: 0x1806E8850
	private void Start() { }
	// RVA: 0x6E8930 Offset: 0x6E7130 VA: 0x1806E8930
	private void FixedUpdate() { }
	// RVA: 0x6E8CD0 Offset: 0x6E74D0 VA: 0x1806E8CD0
	public void .ctor() { }
}

// Namespace: Nicrom.PM
public enum HandlesPos // TypeDefIndex: 3050
{
	// Fields
	public int value__; // 0x0
	public const HandlesPos OnGridMainRect = 0; // 0x0
	public const HandlesPos OnHorizontalLines = 1; // 0x0
	public const HandlesPos OnVerticalLines = 2; // 0x0
}

// Namespace: Nicrom.PM
[Serializable]
public class CustomGrid // TypeDefIndex: 3051
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private HandlesPos handlesPos; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<float> vLinesOnCanvasGrid; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<float> hLinesOnCanvasGrid; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private TextureGrid tg; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Rect gridOnCanvas; // 0x30
	public Vector2Int mouseInsideRectPos; // 0x40
	public Color32 gridColor; // 0x48
	public string gridLabel; // 0x50
	public bool editGridName; // 0x58
	public bool isSelected; // 0x59
	public bool showGridOptions; // 0x5A
	public bool isSelectionLocked; // 0x5B
	public bool isHandleSelected; // 0x5C
	private bool isDragged; // 0x5D
	public bool isGridPosLocked; // 0x5E
	public bool isOverlapping; // 0x5F
	public int handleID; // 0x60
	public List<int> vLinesOnTexGrid; // 0x68
	public List<int> hLinesOnTexGrid; // 0x70
	public Color32 tintColor; // 0x78
	public Color32 emptySpaceColor; // 0x7C
	public Vector2Int gridPos; // 0x80
	public int gridWidth; // 0x88
	public int gridHeight; // 0x8C
	public int gridColumns; // 0x90
	public int gridRows; // 0x94
	public bool hasEmptySpace; // 0x98
	public bool isTexPattern; // 0x99

	// Methods
	// RVA: 0x691480 Offset: 0x68FC80 VA: 0x180691480
	public void .ctor() { }
}

// Namespace: Nicrom.PM
public enum ColorNumbering // TypeDefIndex: 3052
{
	// Fields
	public int value__; // 0x0
	public const ColorNumbering Continuous = 0; // 0x0
	public const ColorNumbering PerPalette = 1; // 0x0
}

// Namespace: Nicrom.PM
public enum TextureUpdate // TypeDefIndex: 3053
{
	// Fields
	public int value__; // 0x0
	public const TextureUpdate Auto = 0; // 0x0
	public const TextureUpdate Manual = 1; // 0x0
}

// Namespace: Nicrom.PM
public class PaletteModifier : MonoBehaviour // TypeDefIndex: 3054
{
	// Fields
	public ColorNumbering colorNumbering; // 0x18
	public TextureUpdate textureUpdate; // 0x1C
	public List<Palette> palettesList; // 0x20
	public List<CellData> cellStorage; // 0x28
	public TextureGrid texGrid; // 0x30
	public Color32 gradStartColor; // 0x38
	public Color32 gradEndColor; // 0x3C
	public Color32 highlightColor; // 0x40
	public bool highlightSelectedColor; // 0x44
	public bool debug; // 0x45
	public bool generatePaletteModifierData; // 0x46
	public float colorBlend; // 0x48
	public int gradientStart; // 0x4C
	public int gradientEnd; // 0x50
	public int flatColorsOnObject; // 0x54
	public int texPatternsOnObject; // 0x58
	public int colorFieldsInInspector; // 0x5C
	public int flatColorsInInspector; // 0x60
	public string[] toolBarTitles; // 0x68
	public int selectedToolBar; // 0x70

	// Methods
	// RVA: 0x6C0710 Offset: 0x6BEF10 VA: 0x1806C0710
	public void .ctor() { }
}

// Namespace: Nicrom.PM
[Serializable]
public class Palette // TypeDefIndex: 3055
{
	// Fields
	public List<CellData> cellsList; // 0x10
	public string paletteName; // 0x18
	public bool editPaletteName; // 0x20
	public bool isColorListExpanded; // 0x21
	public int elementHeight; // 0x24
	public int propFieldHeight; // 0x28

	// Methods
	// RVA: 0x6C0660 Offset: 0x6BEE60 VA: 0x1806C0660
	public void .ctor() { }
}

// Namespace: Nicrom.PM
[Serializable]
public class CellData // TypeDefIndex: 3056
{
	// Fields
	public List<int> uvIndex; // 0x10
	public Color32 currentCellColor; // 0x18
	public Color32 previousCellColor; // 0x1C
	public Rect gridCell; // 0x20
	public bool isSelected; // 0x30
	public bool highlightColorApplied; // 0x31
	public bool isTexture; // 0x32
}

// Namespace: Nicrom.PM
public enum GridColorMode // TypeDefIndex: 3057
{
	// Fields
	public int value__; // 0x0
	public const GridColorMode RandomColor = 0; // 0x0
	public const GridColorMode SingleColor = 1; // 0x0
}

// Namespace: Nicrom.PM
public class TextureGrid : ScriptableObject // TypeDefIndex: 3058
{
	// Fields
	public GridColorMode gridColorMode; // 0x18
	public Color gridColor; // 0x1C
	public List<CustomGrid> gridsList; // 0x30
	public List<CustomGrid> copyList; // 0x38
	public Texture2D texAtlas; // 0x40
	public Texture2D originTexAtlas; // 0x48
	public Vector2 originOffset; // 0x50
	public Vector2Int sizeOffset; // 0x58
	public bool showShortcuts; // 0x60
	public int zoomSpeed; // 0x64
	public int handleSize; // 0x68
	public int canvasBorder; // 0x6C
	public int panelDefaultWidth; // 0x70
	public int sidePanelWidth; // 0x74
	public bool showPanel; // 0x78
	public bool drawAxes; // 0x79
	public bool drawGrid; // 0x7A
	public Vector2Int texAtlasSize; // 0x7C

	// Methods
	// RVA: 0x6E1C20 Offset: 0x6E0420 VA: 0x1806E1C20
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class DisabledLODGroup : MonoBehaviour // TypeDefIndex: 3059
{
	// Fields
	public MeshCombiner meshCombiner; // 0x18
	public LODGroup lodGroup; // 0x20

	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
[ExecuteInEditMode] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class FindLodGroups : MonoBehaviour // TypeDefIndex: 3060
{
	// Fields
	public bool find; // 0x18

	// Methods
	// RVA: 0x69B6C0 Offset: 0x699EC0 VA: 0x18069B6C0
	private void Start() { }
	// RVA: 0x69B6D0 Offset: 0x699ED0 VA: 0x18069B6D0
	private void Update() { }
	// RVA: 0x69B6F0 Offset: 0x699EF0 VA: 0x18069B6F0
	private void FindLods() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class LODGroupSetup : MonoBehaviour // TypeDefIndex: 3061
{
	// Fields
	public MeshCombiner meshCombiner; // 0x18
	public LODGroup lodGroup; // 0x20
	public int lodGroupParentIndex; // 0x28
	public int lodCount; // 0x2C
	private LODGroup[] lodGroups; // 0x30

	// Methods
	// RVA: 0x6A4900 Offset: 0x6A3100 VA: 0x1806A4900
	public void Init(MeshCombiner meshCombiner, int lodGroupParentIndex) { }
	// RVA: 0x6A4A30 Offset: 0x6A3230 VA: 0x1806A4A30
	private void GetSetup() { }
	// RVA: 0x6A4BF0 Offset: 0x6A33F0 VA: 0x1806A4BF0
	public void ApplySetup() { }
	// RVA: 0x6A5090 Offset: 0x6A3890 VA: 0x1806A5090
	public void AddLODGroupsToChildren() { }
	// RVA: 0x6A53A0 Offset: 0x6A3BA0 VA: 0x1806A53A0
	public void RemoveLODGroupFromChildren() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class CamGeometryCapture : MonoBehaviour // TypeDefIndex: 3062
{
	// Fields
	public ComputeShader computeDepthToArray; // 0x18
	public Int2 resolution; // 0x20
	public Camera cam; // 0x28
	public Transform t; // 0x30
	public RenderTexture rtCapture; // 0x38
	private float[] heights; // 0x40
	private Bounds bounds; // 0x48
	private float maxSize; // 0x60

	// Methods
	// RVA: 0x6F9F80 Offset: 0x6F8780 VA: 0x1806F9F80
	public void Init() { }
	// RVA: 0x6FA130 Offset: 0x6F8930 VA: 0x1806FA130
	private void OnDestroy() { }
	// RVA: 0x6FA140 Offset: 0x6F8940 VA: 0x1806FA140
	private void DisposeRenderTexture(ref RenderTexture rt) { }
	// RVA: 0x6FA270 Offset: 0x6F8A70 VA: 0x1806FA270
	public void DisposeRTCapture() { }
	// RVA: 0x6FA400 Offset: 0x6F8C00 VA: 0x1806FA400
	public void RemoveTrianglesBelowSurface(Transform t, MeshCombineJobManager.MeshCombineJob meshCombineJob, MeshCache.SubMeshCache newMeshCache, ref byte[] vertexIsBelow) { }
	// RVA: 0x6FA8F0 Offset: 0x6F90F0 VA: 0x1806FA8F0
	public void Capture(Bounds bounds, int collisionMask, Vector3 direction, Int2 resolution) { }
	// RVA: 0x6FAFF0 Offset: 0x6F97F0 VA: 0x1806FAFF0
	public void SetCamera(Vector3 direction) { }
	// RVA: 0x6FB5D0 Offset: 0x6F9DD0 VA: 0x1806FB5D0
	public float GetHeight(Vector3 pos) { }
	// RVA: 0x6FBAF0 Offset: 0x6FA2F0 VA: 0x1806FBAF0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class CombinedLODManager : MonoBehaviour // TypeDefIndex: 3063
{
	// Fields
	public bool drawGizmos; // 0x18
	public CombinedLODManager.LOD[] lods; // 0x20
	public float[] distances; // 0x28
	public CombinedLODManager.LodDistanceMode lodDistanceMode; // 0x30
	public CombinedLODManager.LodMode lodMode; // 0x34
	public int showLod; // 0x38
	public bool lodCulled; // 0x3C
	public float lodCullDistance; // 0x40
	public Vector3 octreeCenter; // 0x44
	public Vector3 octreeSize; // 0x50
	public int maxLevels; // 0x5C
	public bool search; // 0x60
	private CombinedLODManager.Cell octree; // 0x68
	private Transform cameraMainT; // 0x70

	// Methods
	// RVA: 0x717CD0 Offset: 0x7164D0 VA: 0x180717CD0
	private void Awake() { }
	// RVA: 0x717D80 Offset: 0x716580 VA: 0x180717D80
	private void InitOctree() { }
	// RVA: 0x717F20 Offset: 0x716720 VA: 0x180717F20
	private void Start() { }
	// RVA: 0x7180E0 Offset: 0x7168E0 VA: 0x1807180E0
	private void Update() { }
	// RVA: 0x718110 Offset: 0x716910 VA: 0x180718110
	public void UpdateLods(MeshCombiner meshCombiner, int lodAmount) { }
	// RVA: 0x718380 Offset: 0x716B80 VA: 0x180718380
	public void UpdateDistances(MeshCombiner meshCombiner) { }
	// RVA: 0x718400 Offset: 0x716C00 VA: 0x180718400
	public void Search() { }
	// RVA: 0x718710 Offset: 0x716F10 VA: 0x180718710
	public void ResetOctree() { }
	// RVA: 0x7188C0 Offset: 0x7170C0 VA: 0x1807188C0
	public void Lod(CombinedLODManager.LodMode lodMode) { }
	// RVA: 0x718A80 Offset: 0x717280 VA: 0x180718A80
	private void OnDrawGizmosSelected() { }
	// RVA: 0x718AB0 Offset: 0x7172B0 VA: 0x180718AB0
	public void .ctor() { }
}

// Namespace: 
public enum CombinedLODManager.LodMode // TypeDefIndex: 3064
{
	// Fields
	public int value__; // 0x0
	public const CombinedLODManager.LodMode Automatic = 0; // 0x0
	public const CombinedLODManager.LodMode DebugLod = 1; // 0x0
}

// Namespace: 
public enum CombinedLODManager.LodDistanceMode // TypeDefIndex: 3065
{
	// Fields
	public int value__; // 0x0
	public const CombinedLODManager.LodDistanceMode Automatic = 0; // 0x0
	public const CombinedLODManager.LodDistanceMode Manual = 1; // 0x0
}

// Namespace: 
[Serializable]
public class CombinedLODManager.LOD // TypeDefIndex: 3066
{
	// Fields
	public Transform searchParent; // 0x10
	public Sphere3 sphere; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
public class CombinedLODManager.Cell : BaseOctree.Cell // TypeDefIndex: 3067
{
	// Fields
	public CombinedLODManager.Cell[] cells; // 0x50
	private AABB3 box; // 0x58

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6E8CE0 Offset: 0x6E74E0 VA: 0x1806E8CE0
	public void .ctor(Vector3 position, Vector3 size, int maxLevels) { }
	// RVA: 0x6E9280 Offset: 0x6E7A80 VA: 0x1806E9280
	public void AddMeshRenderer(MeshRenderer mr, Vector3 position, int lodLevel, int lodLevels) { }
	// RVA: 0x6E9310 Offset: 0x6E7B10 VA: 0x1806E9310
	private void AddMeshRendererInternal(MeshRenderer mr, Vector3 position, int lodLevel, int lodLevels) { }
	// RVA: 0x6E9670 Offset: 0x6E7E70 VA: 0x1806E9670
	public void AutoLodInternal(CombinedLODManager.LOD[] lods, float lodCulledDistance) { }
	// RVA: 0x6E9AC0 Offset: 0x6E82C0 VA: 0x1806E9AC0
	public void LodInternal(CombinedLODManager.LOD[] lods, int lodLevel) { }
	// RVA: 0x6E9CC0 Offset: 0x6E84C0 VA: 0x1806E9CC0
	public void DrawGizmos(CombinedLODManager.LOD[] lods) { }
	// RVA: 0x6E9EF0 Offset: 0x6E86F0 VA: 0x1806E9EF0
	public void DrawGizmosInternal() { }
}

// Namespace: 
public class CombinedLODManager.MaxCell : CombinedLODManager.Cell // TypeDefIndex: 3068
{
	// Fields
	public List<MeshRenderer>[] mrList; // 0x70
	public int currentLod; // 0x78

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
[ExecuteInEditMode] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class MeshCombineJobManager : MonoBehaviour // TypeDefIndex: 3069
{
	// Fields
	public static MeshCombineJobManager instance; // 0x0
	public MeshCombineJobManager.JobSettings jobSettings; // 0x18
	public FastList<MeshCombineJobManager.NewMeshObject> newMeshObjectsPool; // 0x20
	public Dictionary<Mesh, MeshCache> meshCacheDictionary; // 0x28
	public int totalNewMeshObjects; // 0x30
	public Queue<MeshCombineJobManager.MeshCombineJob> meshCombineJobs; // 0x38
	public MeshCombineJobManager.MeshCombineJobsThread[] meshCombineJobsThreads; // 0x40
	public CamGeometryCapture camGeometryCapture; // 0x48
	public int cores; // 0x50
	public int threadAmount; // 0x54
	public int startThreadId; // 0x58
	public int endThreadId; // 0x5C
	public bool abort; // 0x60
	private MeshCache.SubMeshCache tempMeshCache; // 0x68
	private Ray ray; // 0x70
	private RaycastHit hitInfo; // 0x88

	// Methods
	// RVA: 0x6AE850 Offset: 0x6AD050 VA: 0x1806AE850
	public static MeshCombineJobManager CreateInstance(MeshCombiner meshCombiner, GameObject instantiatePrefab) { }
	// RVA: 0x6AEAB0 Offset: 0x6AD2B0 VA: 0x1806AEAB0
	public static void ResetMeshCache() { }
	// RVA: 0x6AEB90 Offset: 0x6AD390 VA: 0x1806AEB90
	private void Awake() { }
	// RVA: 0x6AEC10 Offset: 0x6AD410 VA: 0x1806AEC10
	private void OnEnable() { }
	// RVA: 0x6AED30 Offset: 0x6AD530 VA: 0x1806AED30
	public void Init() { }
	// RVA: 0x6AEFA0 Offset: 0x6AD7A0 VA: 0x1806AEFA0
	private void OnDestroy() { }
	// RVA: 0x6AF030 Offset: 0x6AD830 VA: 0x1806AF030
	private void Update() { }
	// RVA: 0x6AF090 Offset: 0x6AD890 VA: 0x1806AF090
	private void MyUpdate() { }
	// RVA: 0x6AF0A0 Offset: 0x6AD8A0 VA: 0x1806AF0A0
	public void SetJobMode(MeshCombineJobManager.JobSettings newJobSettings) { }
	// RVA: 0x6AF310 Offset: 0x6ADB10 VA: 0x1806AF310
	public void AddJob(MeshCombiner meshCombiner, MeshObjectsHolder meshObjectsHolder, Transform parent, Vector3 position) { }
	// RVA: 0x6AF800 Offset: 0x6AE000 VA: 0x1806AF800
	private void EnqueueJob(MeshCombiner meshCombiner, MeshCombineJobManager.MeshCombineJob meshCombineJob) { }
	// RVA: 0x6AF8E0 Offset: 0x6AE0E0 VA: 0x1806AF8E0
	public int MeshIntersectsSurface(MeshCombiner meshCombiner, CachedGameObject cachedGO) { }
	// RVA: 0x6AFC80 Offset: 0x6AE480 VA: 0x1806AFC80
	public void AbortJobs() { }
	// RVA: 0x6B00C0 Offset: 0x6AE8C0 VA: 0x1806B00C0
	public void ExecuteJobs() { }
	// RVA: 0x6B0670 Offset: 0x6AEE70 VA: 0x1806B0670
	public void CombineMeshesDone(MeshCombineJobManager.MeshCombineJobsThread meshCombineJobThread) { }
	// RVA: 0x6B09E0 Offset: 0x6AF1E0 VA: 0x1806B09E0
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class MeshCombineJobManager.JobSettings // TypeDefIndex: 3070
{
	// Fields
	public MeshCombineJobManager.CombineJobMode combineJobMode; // 0x10
	public MeshCombineJobManager.ThreadAmountMode threadAmountMode; // 0x14
	public int combineMeshesPerFrame; // 0x18
	public bool useMultiThreading; // 0x1C
	public bool useMainThread; // 0x1D
	public int customThreadAmount; // 0x20
	public bool showStats; // 0x24

	// Methods
	// RVA: 0x6EDB80 Offset: 0x6EC380 VA: 0x1806EDB80
	public void CopySettings(MeshCombineJobManager.JobSettings source) { }
	// RVA: 0x6EDBC0 Offset: 0x6EC3C0 VA: 0x1806EDBC0
	public void .ctor() { }
}

// Namespace: 
public enum MeshCombineJobManager.CombineJobMode // TypeDefIndex: 3071
{
	// Fields
	public int value__; // 0x0
	public const MeshCombineJobManager.CombineJobMode CombineAtOnce = 0; // 0x0
	public const MeshCombineJobManager.CombineJobMode CombinePerFrame = 1; // 0x0
}

// Namespace: 
public enum MeshCombineJobManager.ThreadAmountMode // TypeDefIndex: 3072
{
	// Fields
	public int value__; // 0x0
	public const MeshCombineJobManager.ThreadAmountMode AllThreads = 0; // 0x0
	public const MeshCombineJobManager.ThreadAmountMode HalfThreads = 1; // 0x0
	public const MeshCombineJobManager.ThreadAmountMode Custom = 2; // 0x0
}

// Namespace: 
public enum MeshCombineJobManager.ThreadState // TypeDefIndex: 3073
{
	// Fields
	public int value__; // 0x0
	public const MeshCombineJobManager.ThreadState isFree = 0; // 0x0
	public const MeshCombineJobManager.ThreadState isReady = 1; // 0x0
	public const MeshCombineJobManager.ThreadState isRunning = 2; // 0x0
	public const MeshCombineJobManager.ThreadState hasError = 3; // 0x0
}

// Namespace: 
public class MeshCombineJobManager.MeshCombineJobsThread // TypeDefIndex: 3074
{
	// Fields
	public int threadId; // 0x10
	public MeshCombineJobManager.ThreadState threadState; // 0x14
	public Queue<MeshCombineJobManager.MeshCombineJob> meshCombineJobs; // 0x18
	public Queue<MeshCombineJobManager.NewMeshObject> newMeshObjectsDone; // 0x20

	// Methods
	// RVA: 0x6EDC80 Offset: 0x6EC480 VA: 0x1806EDC80
	public void .ctor(int threadId) { }
	// RVA: 0x6EDD50 Offset: 0x6EC550 VA: 0x1806EDD50
	public void ExecuteJobsThread(object state) { }
}

// Namespace: 
public class MeshCombineJobManager.MeshCombineJob // TypeDefIndex: 3075
{
	// Fields
	public MeshCombiner meshCombiner; // 0x10
	public MeshObjectsHolder meshObjectsHolder; // 0x18
	public Transform parent; // 0x20
	public Vector3 position; // 0x28
	public int startIndex; // 0x34
	public int endIndex; // 0x38
	public bool firstMesh; // 0x3C
	public bool intersectsSurface; // 0x3D
	public int backFaceTrianglesRemoved; // 0x40
	public int trianglesRemoved; // 0x44
	public bool abort; // 0x48
	public string name; // 0x50

	// Methods
	// RVA: 0x6EDBE0 Offset: 0x6EC3E0 VA: 0x1806EDBE0
	public void .ctor(MeshCombiner meshCombiner, MeshObjectsHolder meshObjectsHolder, Transform parent, Vector3 position, int startIndex, int length, bool firstMesh, bool intersectsSurface) { }
}

// Namespace: 
public class MeshCombineJobManager.NewMeshObject // TypeDefIndex: 3076
{
	// Fields
	public MeshCombineJobManager.MeshCombineJob meshCombineJob; // 0x10
	public MeshCache.SubMeshCache newMeshCache; // 0x18
	public bool allSkipped; // 0x20
	public Vector3 newPosition; // 0x24
	private byte[] vertexIsBelow; // 0x30
	private const byte belowSurface = 1; // 0x0
	private const byte aboveSurface = 2; // 0x0

	// Methods
	// RVA: 0x6EE660 Offset: 0x6ECE60 VA: 0x1806EE660
	public void .ctor() { }
	// RVA: 0x6EE6F0 Offset: 0x6ECEF0 VA: 0x1806EE6F0
	public void Combine(MeshCombineJobManager.MeshCombineJob meshCombineJob) { }
	// RVA: 0x432A00 Offset: 0x431200 VA: 0x180432A00
	private void HasArray(ref bool hasNewArray, bool hasArray, ref T[] newArray, Array array, int vertexCount, int totalVertices, bool useDefaultValue = False, T defaultValue) { }
	// RVA: 0x432850 Offset: 0x431050 VA: 0x180432850
	private void FillArray(T[] array, int offset, int length, T value) { }
	// RVA: 0x6EFA10 Offset: 0x6EE210 VA: 0x1806EFA10
	public void RemoveTrianglesBelowSurface(Transform t, MeshCombineJobManager.MeshCombineJob meshCombineJob) { }
	// RVA: 0x6EFF00 Offset: 0x6EE700 VA: 0x1806EFF00
	public void RemoveBackFaceTriangles() { }
	// RVA: 0x6F04F0 Offset: 0x6EECF0 VA: 0x1806F04F0
	private void ArrangeTriangles() { }
	// RVA: 0x6F0630 Offset: 0x6EEE30 VA: 0x1806F0630
	public void CreateMesh() { }
}

// Namespace: MeshCombineStudio
public class MeshCache // TypeDefIndex: 3077
{
	// Fields
	public Mesh mesh; // 0x10
	public MeshCache.SubMeshCache[] subMeshCache; // 0x18
	public int subMeshCount; // 0x20

	// Methods
	// RVA: 0x6AE550 Offset: 0x6ACD50 VA: 0x1806AE550
	public void .ctor(Mesh mesh) { }
}

// Namespace: 
public class MeshCache.SubMeshCache // TypeDefIndex: 3078
{
	// Fields
	public Vector3[] vertices; // 0x10
	public Vector3[] normals; // 0x18
	public Vector4[] tangents; // 0x20
	public Vector2[] uv; // 0x28
	public Vector2[] uv2; // 0x30
	public Vector2[] uv3; // 0x38
	public Vector2[] uv4; // 0x40
	public Color32[] colors32; // 0x48
	public int[] triangles; // 0x50
	public bool hasNormals; // 0x58
	public bool hasTangents; // 0x59
	public bool hasUv; // 0x5A
	public bool hasUv2; // 0x5B
	public bool hasUv3; // 0x5C
	public bool hasUv4; // 0x5D
	public bool hasColors; // 0x5E
	public int vertexCount; // 0x60
	public int triangleCount; // 0x64

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6ECFA0 Offset: 0x6EB7A0 VA: 0x1806ECFA0
	public void CopySubMeshCache(MeshCache.SubMeshCache source) { }
	// RVA: 0x4327C0 Offset: 0x430FC0 VA: 0x1804327C0
	public void CopyArray(Array sourceArray, ref T[] destinationArray, int vertexCount) { }
	// RVA: 0x6ED210 Offset: 0x6EBA10 VA: 0x1806ED210
	public void .ctor(Mesh mesh, int subMeshIndex) { }
	// RVA: 0x6ED250 Offset: 0x6EBA50 VA: 0x1806ED250
	public void .ctor(Mesh mesh, bool assignTriangles) { }
	// RVA: 0x6ED3C0 Offset: 0x6EBBC0 VA: 0x1806ED3C0
	public void CheckHasArrays() { }
	// RVA: 0x6ED450 Offset: 0x6EBC50 VA: 0x1806ED450
	public void ResetHasBooleans() { }
	// RVA: 0x6ED470 Offset: 0x6EBC70 VA: 0x1806ED470
	public void Init(bool initTriangles = True) { }
	// RVA: 0x6ED520 Offset: 0x6EBD20 VA: 0x1806ED520
	public void RebuildVertexBuffer(MeshCache.SubMeshCache sub, bool resizeArrays) { }
}

// Namespace: MeshCombineStudio
[ExecuteInEditMode] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class MeshCombiner : MonoBehaviour // TypeDefIndex: 3079
{
	// Fields
	public static List<MeshCombiner> instances; // 0x0
	private MeshCombiner.DefaultMethod OnCombiningReady; // 0x18
	public MeshCombineJobManager.JobSettings jobSettings; // 0x20
	public MeshCombiner.LODGroupSettings[] lodGroupsSettings; // 0x28
	public ComputeShader computeDepthToArray; // 0x30
	public GameObject instantiatePrefab; // 0x38
	public const int maxLodCount = 8; // 0x0
	public string saveMeshesFolder; // 0x40
	public ObjectOctree.Cell octree; // 0x48
	public List<ObjectOctree.MaxCell> changedCells; // 0x50
	public bool octreeContainsObjects; // 0x58
	public bool useCells; // 0x59
	public int cellSize; // 0x5C
	public Vector3 cellOffset; // 0x60
	public bool useVertexOutputLimit; // 0x6C
	public int vertexOutputLimit; // 0x70
	public MeshCombiner.RebakeLightingMode rebakeLightingMode; // 0x74
	public bool copyBakedLighting; // 0x78
	public bool validCopyBakedLighting; // 0x79
	public bool rebakeLighting; // 0x7A
	public bool validRebakeLighting; // 0x7B
	public LightProbeUsage lightProbeUsage; // 0x7C
	public ReflectionProbeUsage reflectionProbeUsage; // 0x80
	public MotionVectorGenerationMode motionVectorGenerationMode; // 0x84
	public bool receiveShadows; // 0x88
	public ShadowCastingMode shadowCastingMode; // 0x8C
	public int outputLayer; // 0x90
	public int outputStatic; // 0x94
	public float scaleInLightmap; // 0x98
	public bool addMeshColliders; // 0x9C
	public bool addMeshCollidersInRange; // 0x9D
	public Bounds addMeshCollidersBounds; // 0xA0
	public bool makeMeshesUnreadable; // 0xB8
	public bool removeTrianglesBelowSurface; // 0xB9
	public bool noColliders; // 0xBA
	public LayerMask surfaceLayerMask; // 0xBC
	public float maxSurfaceHeight; // 0xC0
	public bool removeOverlappingTriangles; // 0xC4
	public GameObject overlappingCollidersGO; // 0xC8
	public LayerMask overlapLayerMask; // 0xD0
	public int voxelizeLayer; // 0xD4
	public int lodGroupLayer; // 0xD8
	public bool removeBackFaceTriangles; // 0xDC
	public MeshCombiner.BackFaceTriangleMode backFaceTriangleMode; // 0xE0
	public Vector3 backFaceDirection; // 0xE4
	public Bounds backFaceBounds; // 0xF0
	public bool twoSidedShadows; // 0x108
	public bool combineInRuntime; // 0x109
	public bool combineOnStart; // 0x10A
	public bool useCombineSwapKey; // 0x10B
	public KeyCode combineSwapKey; // 0x10C
	public MeshCombiner.HandleComponent originalMeshRenderers; // 0x110
	public MeshCombiner.HandleComponent originalLODGroups; // 0x114
	public MeshCombiner.SearchOptions searchOptions; // 0x118
	public Vector3 oldPosition; // 0x120
	public Vector3 oldScale; // 0x12C
	public MeshCombiner.LodParentHolder[] lodParentHolders; // 0x138
	public List<CachedGameObject> foundObjects; // 0x140
	public List<CachedLodGameObject> foundLodObjects; // 0x148
	public List<LODGroup> foundLodGroups; // 0x150
	public List<Collider> foundColliders; // 0x158
	public HashSet<LODGroup> uniqueFoundLodGroups; // 0x160
	public List<Mesh> unreadableMeshes; // 0x168
	public HashSet<Mesh> selectImportSettingsMeshes; // 0x170
	public HashSet<MeshCombineJobManager.MeshCombineJob> meshCombineJobs; // 0x178
	public int totalMeshCombineJobs; // 0x180
	public int mrDisabledCount; // 0x184
	public bool combined; // 0x188
	public bool activeOriginal; // 0x189
	public bool combinedActive; // 0x18A
	public bool drawGizmos; // 0x18B
	public bool drawMeshBounds; // 0x18C
	public int originalTotalVertices; // 0x190
	public int originalTotalTriangles; // 0x194
	public int totalVertices; // 0x198
	public int totalTriangles; // 0x19C
	public int originalDrawCalls; // 0x1A0
	public int newDrawCalls; // 0x1A4
	public int foundMaterialsCount; // 0x1A8
	public float combineTime; // 0x1AC
	public FastList<MeshColliderAdd> addMeshCollidersList; // 0x1B0
	private HashSet<Transform> uniqueLodObjects; // 0x1B8
	private HashSet<Material> foundMaterials; // 0x1C0
	private MeshCombiner thisInstance; // 0x1C8
	private bool hasFoundFirstObject; // 0x1D0
	private Bounds bounds; // 0x1D4
	private Stopwatch stopwatch; // 0x1F0

	// Methods
	// RVA: 0x6B0C90 Offset: 0x6AF490 VA: 0x1806B0C90
	public void add_OnCombiningReady(MeshCombiner.DefaultMethod value) { }
	// RVA: 0x6B0D70 Offset: 0x6AF570 VA: 0x1806B0D70
	public void remove_OnCombiningReady(MeshCombiner.DefaultMethod value) { }
	// RVA: 0x6B0E50 Offset: 0x6AF650 VA: 0x1806B0E50
	public void AddMeshColliders() { }
	// RVA: 0x6B0FD0 Offset: 0x6AF7D0 VA: 0x1806B0FD0
	public void ExecuteOnCombiningReady() { }
	// RVA: 0x6B10E0 Offset: 0x6AF8E0 VA: 0x1806B10E0
	private void Awake() { }
	// RVA: 0x6B11A0 Offset: 0x6AF9A0 VA: 0x1806B11A0
	private void OnEnable() { }
	// RVA: 0x6B12A0 Offset: 0x6AFAA0 VA: 0x1806B12A0
	private void Start() { }
	// RVA: 0x6B1640 Offset: 0x6AFE40 VA: 0x1806B1640
	private void OnDestroy() { }
	// RVA: 0x6B1910 Offset: 0x6B0110 VA: 0x1806B1910
	public static MeshCombiner GetInstance(string name) { }
	// RVA: 0x6B1B20 Offset: 0x6B0320 VA: 0x1806B1B20
	public void CopyJobSettingsToAllInstances() { }
	// RVA: 0x6B1C80 Offset: 0x6B0480 VA: 0x1806B1C80
	public void InitMeshCombineJobManager() { }
	// RVA: 0x6B1D40 Offset: 0x6B0540 VA: 0x1806B1D40
	public void CreateLodGroupsSettings() { }
	// RVA: 0x6B1EF0 Offset: 0x6B06F0 VA: 0x1806B1EF0
	private void StartRuntime() { }
	// RVA: 0x6B2040 Offset: 0x6B0840 VA: 0x1806B2040
	public void DestroyCombinedObjects() { }
	// RVA: 0x6B2270 Offset: 0x6B0A70 VA: 0x1806B2270
	private void Reset() { }
	// RVA: 0x6B2590 Offset: 0x6B0D90 VA: 0x1806B2590
	public void AbortAndClearMeshCombineJobs() { }
	// RVA: 0x6B26D0 Offset: 0x6B0ED0 VA: 0x1806B26D0
	public void ClearMeshCombineJobs() { }
	// RVA: 0x6B27E0 Offset: 0x6B0FE0 VA: 0x1806B27E0
	public void AddObjects(List<Transform> transforms, bool useSearchOptions, bool checkForLODGroups = True) { }
	// RVA: 0x6B29A0 Offset: 0x6B11A0 VA: 0x1806B29A0
	public void AddObjectsAutomatically() { }
	// RVA: 0x6B2AA0 Offset: 0x6B12A0 VA: 0x1806B2AA0
	public void AddFoundObjectsToOctree() { }
	// RVA: 0x6B2F10 Offset: 0x6B1710 VA: 0x1806B2F10
	private void AddFoundMaterials(MeshRenderer mr) { }
	// RVA: 0x6B30A0 Offset: 0x6B18A0 VA: 0x1806B30A0
	public void ResetOctree() { }
	// RVA: 0x6B3140 Offset: 0x6B1940 VA: 0x1806B3140
	public void CalcOctreeSize(Bounds bounds) { }
	// RVA: 0x6B34C0 Offset: 0x6B1CC0 VA: 0x1806B34C0
	public void ApplyChanges() { }
	// RVA: 0x6B3630 Offset: 0x6B1E30 VA: 0x1806B3630
	public void CombineAll() { }
	// RVA: 0x6B3A00 Offset: 0x6B2200 VA: 0x1806B3A00
	private void InitAndResetLodParentsCount() { }
	// RVA: 0x6B3B80 Offset: 0x6B2380 VA: 0x1806B3B80
	public void AddObjectsFromSearchParent() { }
	// RVA: 0x6B3EC0 Offset: 0x6B26C0 VA: 0x1806B3EC0
	private void AddLodGroups(LODGroup[] lodGroups, bool useSearchOptions = True) { }
	// RVA: 0x6B4780 Offset: 0x6B2F80 VA: 0x1806B4780
	private void AddTransforms(Transform[] transforms, bool useSearchOptions = True) { }
	// RVA: 0x6B4AF0 Offset: 0x6B32F0 VA: 0x1806B4AF0
	private int ValidObject(Transform t, MeshCombiner.ObjectType objectType, bool useSearchOptions, ref CachedGameObject cachedGameObject) { }
	// RVA: 0x6B56B0 Offset: 0x6B3EB0 VA: 0x1806B56B0
	public void RestoreOriginalRenderersAndLODGroups() { }
	// RVA: 0x6B56F0 Offset: 0x6B3EF0 VA: 0x1806B56F0
	public void SwapCombine() { }
	// RVA: 0x6B5750 Offset: 0x6B3F50 VA: 0x1806B5750
	private void SetOriginalCollidersActive(bool active) { }
	// RVA: 0x6B58A0 Offset: 0x6B40A0 VA: 0x1806B58A0
	public void ExecuteHandleObjects(bool active, MeshCombiner.HandleComponent handleOriginalObjects, MeshCombiner.HandleComponent handleOriginalLodGroups, bool includeColliders = True) { }
	// RVA: 0x6B6160 Offset: 0x6B4960 VA: 0x1806B6160
	private void DrawGizmosCube(Bounds bounds, Color color) { }
	// RVA: 0x6B6380 Offset: 0x6B4B80 VA: 0x1806B6380
	private void OnDrawGizmosSelected() { }
	// RVA: 0x6B65D0 Offset: 0x6B4DD0 VA: 0x1806B65D0
	private void LogOctreeInfo() { }
	// RVA: 0x6B67E0 Offset: 0x6B4FE0 VA: 0x1806B67E0
	public void .ctor() { }
	// RVA: 0x6B6C10 Offset: 0x6B5410 VA: 0x1806B6C10
	private static void .cctor() { }
}

// Namespace: 
public enum MeshCombiner.ObjectType // TypeDefIndex: 3080
{
	// Fields
	public int value__; // 0x0
	public const MeshCombiner.ObjectType Normal = 0; // 0x0
	public const MeshCombiner.ObjectType LodGroup = 1; // 0x0
	public const MeshCombiner.ObjectType LodRenderer = 2; // 0x0
}

// Namespace: 
public enum MeshCombiner.HandleComponent // TypeDefIndex: 3081
{
	// Fields
	public int value__; // 0x0
	public const MeshCombiner.HandleComponent Disable = 0; // 0x0
	public const MeshCombiner.HandleComponent Destroy = 1; // 0x0
}

// Namespace: 
public enum MeshCombiner.ObjectCenter // TypeDefIndex: 3082
{
	// Fields
	public int value__; // 0x0
	public const MeshCombiner.ObjectCenter BoundsCenter = 0; // 0x0
	public const MeshCombiner.ObjectCenter TransformPosition = 1; // 0x0
}

// Namespace: 
public enum MeshCombiner.BackFaceTriangleMode // TypeDefIndex: 3083
{
	// Fields
	public int value__; // 0x0
	public const MeshCombiner.BackFaceTriangleMode Box = 0; // 0x0
	public const MeshCombiner.BackFaceTriangleMode Direction = 1; // 0x0
}

// Namespace: 
public sealed class MeshCombiner.DefaultMethod : MulticastDelegate // TypeDefIndex: 3084
{
	// Methods
	// RVA: 0x1D1910 Offset: 0x1D0110 VA: 0x1801D1910
	public void .ctor(object object, IntPtr method) { }
	// RVA: 0x26BB20 Offset: 0x26A320 VA: 0x18026BB20 Slot: 12
	public virtual void Invoke() { }
	// RVA: 0x26BCD0 Offset: 0x26A4D0 VA: 0x18026BCD0 Slot: 13
	public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object) { }
	// RVA: 0x1D1C50 Offset: 0x1D0450 VA: 0x1801D1C50 Slot: 14
	public virtual void EndInvoke(IAsyncResult result) { }
}

// Namespace: 
public enum MeshCombiner.RebakeLightingMode // TypeDefIndex: 3085
{
	// Fields
	public int value__; // 0x0
	public const MeshCombiner.RebakeLightingMode CopyLightmapUvs = 0; // 0x0
	public const MeshCombiner.RebakeLightingMode RegenarateLightmapUvs = 1; // 0x0
}

// Namespace: 
[Serializable]
public class MeshCombiner.SearchOptions // TypeDefIndex: 3086
{
	// Fields
	public GameObject parent; // 0x10
	public MeshCombiner.ObjectCenter objectCenter; // 0x18
	public MeshCombiner.SearchOptions.LODGroupSearchMode lodGroupSearchMode; // 0x1C
	public bool useSearchBox; // 0x20
	public Bounds searchBoxBounds; // 0x24
	public bool searchBoxSquare; // 0x3C
	public Vector3 searchBoxPivot; // 0x40
	public Vector3 searchBoxSize; // 0x4C
	public bool useMaxBoundsFactor; // 0x58
	public float maxBoundsFactor; // 0x5C
	public bool useVertexInputLimit; // 0x60
	public int vertexInputLimit; // 0x64
	public bool useLayerMask; // 0x68
	public LayerMask layerMask; // 0x6C
	public bool useTag; // 0x70
	public string tag; // 0x78
	public bool useNameContains; // 0x80
	public List<string> nameContainList; // 0x88
	public bool onlyActive; // 0x90
	public bool onlyStatic; // 0x91
	public bool useComponentsFilter; // 0x92
	public MeshCombiner.SearchOptions.ComponentCondition componentCondition; // 0x94
	public List<string> componentNameList; // 0x98

	// Methods
	// RVA: 0x6F1B00 Offset: 0x6F0300 VA: 0x1806F1B00
	public void GetSearchBoxBounds() { }
}

// Namespace: 
public enum MeshCombiner.SearchOptions.ComponentCondition // TypeDefIndex: 3087
{
	// Fields
	public int value__; // 0x0
	public const MeshCombiner.SearchOptions.ComponentCondition And = 0; // 0x0
	public const MeshCombiner.SearchOptions.ComponentCondition Or = 1; // 0x0
	public const MeshCombiner.SearchOptions.ComponentCondition Not = 2; // 0x0
}

// Namespace: 
public enum MeshCombiner.SearchOptions.LODGroupSearchMode // TypeDefIndex: 3088
{
	// Fields
	public int value__; // 0x0
	public const MeshCombiner.SearchOptions.LODGroupSearchMode LodGroup = 0; // 0x0
	public const MeshCombiner.SearchOptions.LODGroupSearchMode LodRenderers = 1; // 0x0
}

// Namespace: 
[Serializable]
public class MeshCombiner.LODGroupSettings // TypeDefIndex: 3089
{
	// Fields
	public MeshCombiner.LODSettings[] lodSettings; // 0x10

	// Methods
	// RVA: 0x6F14F0 Offset: 0x6EFCF0 VA: 0x1806F14F0
	public void .ctor(int lodParentIndex) { }
}

// Namespace: 
[Serializable]
public class MeshCombiner.LODSettings // TypeDefIndex: 3090
{
	// Fields
	public float screenRelativeTransitionHeight; // 0x10
	public float fadeTransitionWidth; // 0x14

	// Methods
	// RVA: 0x2B3E10 Offset: 0x2B2610 VA: 0x1802B3E10
	public void .ctor(float screenRelativeTransitionHeight) { }
}

// Namespace: 
public class MeshCombiner.LodParentHolder // TypeDefIndex: 3091
{
	// Fields
	public GameObject go; // 0x10
	public Transform t; // 0x18
	public bool found; // 0x20
	public int[] lods; // 0x28

	// Methods
	// RVA: 0x6F16E0 Offset: 0x6EFEE0 VA: 0x1806F16E0
	public void .ctor(int lodCount) { }
	// RVA: 0x6F1770 Offset: 0x6EFF70 VA: 0x1806F1770
	public void Create(MeshCombiner meshCombiner, int lodParentIndex) { }
	// RVA: 0x6F1AD0 Offset: 0x6F02D0 VA: 0x1806F1AD0
	public void Reset() { }
}

// Namespace: MeshCombineStudio
public struct MeshColliderAdd // TypeDefIndex: 3092
{
	// Fields
	public GameObject go; // 0x0
	public Mesh mesh; // 0x8

	// Methods
	// RVA: 0x5CF0 Offset: 0x50F0 VA: 0x180005CF0
	public void .ctor(GameObject go, Mesh mesh) { }
}

// Namespace: MeshCombineStudio
[ExecuteInEditMode] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class ObjectSpawner : MonoBehaviour // TypeDefIndex: 3093
{
	// Fields
	public GameObject[] objects; // 0x18
	public float density; // 0x20
	public Vector2 scaleRange; // 0x24
	public Vector3 rotationRange; // 0x2C
	public Vector2 heightRange; // 0x38
	public float scaleMulti; // 0x40
	public float resolutionPerMeter; // 0x44
	public bool spawnInRuntime; // 0x48
	public bool spawn; // 0x49
	public bool deleteChildren; // 0x4A
	private Transform t; // 0x50

	// Methods
	// RVA: 0x6BEBF0 Offset: 0x6BD3F0 VA: 0x1806BEBF0
	private void Awake() { }
	// RVA: 0x6BECA0 Offset: 0x6BD4A0 VA: 0x1806BECA0
	private void Update() { }
	// RVA: 0x6BECE0 Offset: 0x6BD4E0 VA: 0x1806BECE0
	public void DeleteChildren() { }
	// RVA: 0x6BEEB0 Offset: 0x6BD6B0 VA: 0x1806BEEB0
	public void Spawn() { }
	// RVA: 0x6BF710 Offset: 0x6BDF10 VA: 0x1806BF710
	private void OnDrawGizmosSelected() { }
	// RVA: 0x6BFA40 Offset: 0x6BE240 VA: 0x1806BFA40
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class RemoveGeometryBelowTerrain : MonoBehaviour // TypeDefIndex: 3094
{
	// Fields
	private int totalTriangles; // 0x18
	private int removeTriangles; // 0x1C
	private int skippedObjects; // 0x20
	public List<Transform> terrains; // 0x28
	public List<Transform> meshTerrains; // 0x30
	public Bounds[] terrainBounds; // 0x38
	public Bounds[] meshBounds; // 0x40
	private Terrain[] terrainComponents; // 0x48
	private Terrain[] terrainArray; // 0x50
	private Bounds[] terrainBoundsArray; // 0x58
	private MeshRenderer[] mrs; // 0x60
	private Mesh[] meshTerrainComponents; // 0x68
	private Mesh[] meshArray; // 0x70
	public bool runOnStart; // 0x78

	// Methods
	// RVA: 0x6C88F0 Offset: 0x6C70F0 VA: 0x1806C88F0
	private void Start() { }
	// RVA: 0x6C8960 Offset: 0x6C7160 VA: 0x1806C8960
	public void Remove(GameObject go) { }
	// RVA: 0x6C9650 Offset: 0x6C7E50 VA: 0x1806C9650
	public void RemoveMesh(Transform t, Mesh mesh) { }
	// RVA: 0x6C98B0 Offset: 0x6C80B0 VA: 0x1806C98B0
	public bool IsMeshUnderTerrain(Transform t, Mesh mesh) { }
	// RVA: 0x6C9AC0 Offset: 0x6C82C0 VA: 0x1806C9AC0
	public void GetTerrainComponents() { }
	// RVA: 0x6C9CB0 Offset: 0x6C84B0 VA: 0x1806C9CB0
	public void GetMeshRenderersAndComponents() { }
	// RVA: 0x6CA010 Offset: 0x6C8810 VA: 0x1806CA010
	public void CreateTerrainBounds() { }
	// RVA: 0x6CA520 Offset: 0x6C8D20 VA: 0x1806CA520
	public void MakeIntersectLists(Bounds bounds) { }
	// RVA: 0x6CADC0 Offset: 0x6C95C0 VA: 0x1806CADC0
	public int InterectTerrain(Vector3 pos) { }
	// RVA: 0x6CAEC0 Offset: 0x6C96C0 VA: 0x1806CAEC0
	public int InterectMesh(Vector3 pos) { }
	// RVA: 0x6CAFC0 Offset: 0x6C97C0 VA: 0x1806CAFC0
	public float GetTerrainHeight(Vector3 pos) { }
	// RVA: 0x6CB160 Offset: 0x6C9960 VA: 0x1806CB160
	public void RemoveTriangles(Transform t, List<int> newTriangles, Vector3[] vertices) { }
	// RVA: 0x6CB6E0 Offset: 0x6C9EE0 VA: 0x1806CB6E0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class SwapCombineKey : MonoBehaviour // TypeDefIndex: 3095
{
	// Fields
	public static SwapCombineKey instance; // 0x0
	public List<MeshCombiner> meshCombinerList; // 0x18
	private MeshCombiner meshCombiner; // 0x20
	private GUIStyle textStyle; // 0x28

	// Methods
	// RVA: 0x6E1450 Offset: 0x6DFC50 VA: 0x1806E1450
	private void Awake() { }
	// RVA: 0x6E1500 Offset: 0x6DFD00 VA: 0x1806E1500
	private void OnDestroy() { }
	// RVA: 0x6E1580 Offset: 0x6DFD80 VA: 0x1806E1580
	private void Update() { }
	// RVA: 0x6E1680 Offset: 0x6DFE80 VA: 0x1806E1680
	private void OnGUI() { }
	// RVA: 0x6E1B80 Offset: 0x6E0380 VA: 0x1806E1B80
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class CachedComponents : MonoBehaviour // TypeDefIndex: 3096
{
	// Fields
	public GameObject go; // 0x18
	public Transform t; // 0x20
	public MeshRenderer mr; // 0x28
	public MeshFilter mf; // 0x30
	public GarbageCollectMesh garbageCollectMesh; // 0x38

	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class Console : MonoBehaviour // TypeDefIndex: 3097
{
	// Fields
	public static Console instance; // 0x0
	public KeyCode consoleKey; // 0x18
	public bool logActive; // 0x1C
	public bool showConsole; // 0x1D
	public bool showOnError; // 0x1E
	public bool combineAutomatic; // 0x1F
	private bool showLast; // 0x20
	private bool setFocus; // 0x21
	private GameObject selectGO; // 0x28
	public List<Console.LogEntry> logs; // 0x30
	private Rect window; // 0x38
	private Rect inputRect; // 0x48
	private Rect logRect; // 0x58
	private Rect vScrollRect; // 0x68
	private string inputText; // 0x78
	private float scrollPos; // 0x80
	private int lines; // 0x84
	private bool showUnityLog; // 0x88
	private bool showInputLog; // 0x89
	private MeshCombiner[] meshCombiners; // 0x90
	private MeshCombiner selectedMeshCombiner; // 0x98

	// Methods
	// RVA: 0x718BA0 Offset: 0x7173A0 VA: 0x180718BA0
	private void Awake() { }
	// RVA: 0x718CD0 Offset: 0x7174D0 VA: 0x180718CD0
	private void ReportStartup() { }
	// RVA: 0x718E70 Offset: 0x717670 VA: 0x180718E70
	private void FindMeshCombiners() { }
	// RVA: 0x718F10 Offset: 0x717710 VA: 0x180718F10
	private void ReportMeshCombiners(bool reportSelected = True) { }
	// RVA: 0x7192A0 Offset: 0x717AA0 VA: 0x1807192A0
	private void ReportMeshCombiner(MeshCombiner meshCombiner, bool foundText = False) { }
	// RVA: 0x7196E0 Offset: 0x717EE0 VA: 0x1807196E0
	public int SelectMeshCombiner(string name) { }
	// RVA: 0x719A80 Offset: 0x718280 VA: 0x180719A80
	private void OnEnable() { }
	// RVA: 0x719C10 Offset: 0x718410 VA: 0x180719C10
	private void OnDisable() { }
	// RVA: 0x719D60 Offset: 0x718560 VA: 0x180719D60
	private void OnDestroy() { }
	// RVA: 0x719DE0 Offset: 0x7185E0 VA: 0x180719DE0
	public static void Log(string logString, int commandType = 0, GameObject go, MeshCombiner meshCombiner) { }
	// RVA: 0x719EE0 Offset: 0x7186E0 VA: 0x180719EE0
	private void HandleLog(string logString, string stackTrace, LogType logType) { }
	// RVA: 0x719FF0 Offset: 0x7187F0 VA: 0x180719FF0
	private void Update() { }
	// RVA: 0x71A070 Offset: 0x718870 VA: 0x18071A070
	private void SetConsoleActive(bool active) { }
	// RVA: 0x71A080 Offset: 0x718880 VA: 0x18071A080
	private void ExecuteCommand(string cmd) { }
	// RVA: 0x71B1B0 Offset: 0x7199B0 VA: 0x18071B1B0
	private void DirSort() { }
	// RVA: 0x71B240 Offset: 0x719A40 VA: 0x18071B240
	private void DirSort(string name) { }
	// RVA: 0x71B410 Offset: 0x719C10 VA: 0x18071B410
	public void SortLog(GameObject[] gos, bool showMeshInfo = False) { }
	// RVA: 0x71C460 Offset: 0x71AC60 VA: 0x18071C460
	private string GetMeshInfo(GameObject go, ref int meshCount) { }
	// RVA: 0x71C890 Offset: 0x71B090 VA: 0x18071C890
	private void TimeStep(string cmd) { }
	// RVA: 0x71C900 Offset: 0x71B100 VA: 0x18071C900
	private void TimeScale(string cmd) { }
	// RVA: 0x71C970 Offset: 0x71B170 VA: 0x18071C970
	private void Clear(Console.LogEntry log, string cmd) { }
	// RVA: 0x71CCE0 Offset: 0x71B4E0 VA: 0x18071CCE0
	private void DirAll() { }
	// RVA: 0x71D920 Offset: 0x71C120 VA: 0x18071D920
	private void Dir() { }
	// RVA: 0x71EF80 Offset: 0x71D780 VA: 0x18071EF80
	private void Components(Console.LogEntry log) { }
	// RVA: 0x71F170 Offset: 0x71D970 VA: 0x18071F170
	private void ShowPath(bool showLines = True) { }
	// RVA: 0x71F2C0 Offset: 0x71DAC0 VA: 0x18071F2C0
	private string GetPath(GameObject go) { }
	// RVA: 0x71F760 Offset: 0x71DF60 VA: 0x18071F760
	private void CD(Console.LogEntry log, string name) { }
	// RVA: 0x71FB40 Offset: 0x71E340 VA: 0x18071FB40
	public void SetActiveContains(string textContains, bool active) { }
	// RVA: 0x720020 Offset: 0x71E820 VA: 0x180720020
	public void DirContains(string textContains) { }
	// RVA: 0x720590 Offset: 0x71ED90 VA: 0x180720590
	private void OnGUI() { }
	// RVA: 0x7213A0 Offset: 0x71FBA0 VA: 0x1807213A0
	private void AnimateColor(Color col, Console.LogEntry log, float multi) { }
	// RVA: 0x721540 Offset: 0x71FD40 VA: 0x180721540
	public void .ctor() { }
}

// Namespace: 
public class Console.LogEntry // TypeDefIndex: 3098
{
	// Fields
	public string logString; // 0x10
	public string stackTrace; // 0x18
	public LogType logType; // 0x20
	public int commandType; // 0x24
	public bool unityLog; // 0x28
	public float tStamp; // 0x2C
	public GameObject go; // 0x30
	public MeshCombiner meshCombiner; // 0x38

	// Methods
	// RVA: 0x6EA2B0 Offset: 0x6E8AB0 VA: 0x1806EA2B0
	public void .ctor(string logString, string stackTrace, LogType logType, bool unityLog = False, int commandType = 0, GameObject go, MeshCombiner meshCombiner) { }
}

// Namespace: MeshCombineStudio
public class DirectDraw : MonoBehaviour // TypeDefIndex: 3099
{
	// Fields
	private MeshRenderer[] mrs; // 0x18
	private Mesh[] meshes; // 0x20
	private Material[] mats; // 0x28
	private Vector3[] positions; // 0x30
	private Quaternion[] rotations; // 0x38

	// Methods
	// RVA: 0x693A00 Offset: 0x692200 VA: 0x180693A00
	private void Awake() { }
	// RVA: 0x694120 Offset: 0x692920 VA: 0x180694120
	private void SetMeshRenderersEnabled(bool enabled) { }
	// RVA: 0x6941F0 Offset: 0x6929F0 VA: 0x1806941F0
	private void Update() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class DisabledLodMeshRender : MonoBehaviour // TypeDefIndex: 3100
{
	// Fields
	public MeshCombiner meshCombiner; // 0x18
	public CachedLodGameObject cachedLodGO; // 0x20

	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class DisabledMeshRenderer : MonoBehaviour // TypeDefIndex: 3101
{
	// Fields
	public MeshCombiner meshCombiner; // 0x18
	public CachedGameObject cachedGO; // 0x20

	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class FastListBase // TypeDefIndex: 3102
{
	// Fields
	protected const int defaultCapacity = 4; // 0x0
	public int Count; // 0x10
	protected int _count; // 0x14
	protected int arraySize; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class FastListBase<T> : FastListBase // TypeDefIndex: 3103
{
	// Fields
	public T[] items; // 0x0

	// Methods
	// RVA: 0x7EA4A0 Offset: 0x7E8CA0 VA: 0x1807EA4A0
	protected void DoubleCapacity() { }
	// RVA: 0x614030 Offset: 0x612830 VA: 0x180614030
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
[Serializable]
public class FastList<T> : FastListBase<T> // TypeDefIndex: 3104
{
	// Methods
	// RVA: 0x7EA510 Offset: 0x7E8D10 VA: 0x1807EA510
	public void .ctor() { }
	// RVA: 0x7EA590 Offset: 0x7E8D90 VA: 0x1807EA590
	public void .ctor(int capacity) { }
	// RVA: 0x7EA620 Offset: 0x7E8E20 VA: 0x1807EA620
	protected void SetCapacity(int capacity) { }
	// RVA: 0x7EA6A0 Offset: 0x7E8EA0 VA: 0x1807EA6A0
	public void SetCount(int count) { }
	// RVA: 0x7EA6F0 Offset: 0x7E8EF0 VA: 0x1807EA6F0 Slot: 4
	public virtual int Add(T item) { }
	// RVA: 0x7EA770 Offset: 0x7E8F70 VA: 0x1807EA770 Slot: 5
	public virtual void AddRange(T[] arrayItems) { }
	// RVA: 0x7EA800 Offset: 0x7E9000 VA: 0x1807EA800 Slot: 6
	public virtual void RemoveAt(int index) { }
	// RVA: 0x7EAB10 Offset: 0x7E9310 VA: 0x1807EAB10 Slot: 7
	public virtual void RemoveLast() { }
	// RVA: 0x7EAB70 Offset: 0x7E9370 VA: 0x1807EAB70 Slot: 8
	public virtual T Dequeue() { }
	// RVA: 0x7EAC80 Offset: 0x7E9480 VA: 0x1807EAC80 Slot: 9
	public virtual void Clear() { }
	// RVA: 0x7EACB0 Offset: 0x7E94B0 VA: 0x1807EACB0 Slot: 10
	public virtual T[] ToArray() { }
}

// Namespace: MeshCombineStudio
[ExecuteInEditMode] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class GarbageCollectMesh : MonoBehaviour // TypeDefIndex: 3105
{
	// Fields
	public Mesh mesh; // 0x18

	// Methods
	// RVA: 0x6A0CD0 Offset: 0x69F4D0 VA: 0x1806A0CD0
	private void OnDestroy() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class MCS_CameraController : MonoBehaviour // TypeDefIndex: 3106
{
	// Fields
	public float speed; // 0x18
	public float mouseMoveSpeed; // 0x1C
	public float shiftMulti; // 0x20
	public float controlMulti; // 0x24
	private Vector3 oldMousePosition; // 0x28
	private GameObject cameraMountGO; // 0x38
	private GameObject cameraChildGO; // 0x40
	private Transform cameraMountT; // 0x48
	private Transform cameraChildT; // 0x50
	private Transform t; // 0x58

	// Methods
	// RVA: 0x6A74F0 Offset: 0x6A5CF0 VA: 0x1806A74F0
	private void Awake() { }
	// RVA: 0x6A7550 Offset: 0x6A5D50 VA: 0x1806A7550
	private void CreateParents() { }
	// RVA: 0x6A7900 Offset: 0x6A6100 VA: 0x1806A7900
	private void Update() { }
	// RVA: 0x6A8180 Offset: 0x6A6980 VA: 0x1806A8180
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class MCS_FPSCounter : MonoBehaviour // TypeDefIndex: 3107
{
	// Fields
	public static MCS_FPSCounter instance; // 0x0
	public float interval; // 0x18
	public MCS_FPSCounter.GUIType displayType; // 0x1C
	public Vector2 gradientRange; // 0x20
	public Font fontRun; // 0x28
	public Font fontResult; // 0x30
	public Texture logo; // 0x38
	public bool showLogoOnResultsScreen; // 0x40
	public KeyCode showHideButton; // 0x44
	public bool acceptInput; // 0x48
	public bool reset; // 0x49
	public float currentFPS; // 0x4C
	public float averageFPS; // 0x50
	public float minimumFPS; // 0x54
	public float maximumFPS; // 0x58
	private int totalFrameCount; // 0x5C
	private int tempFrameCount; // 0x60
	private double tStamp; // 0x68
	private double tStampTemp; // 0x70
	private string currentFPSText; // 0x78
	private string avgFPSText; // 0x80
	private string minFPSText; // 0x88
	private string maxFSPText; // 0x90
	private GUIStyle bigStyle; // 0x98
	private GUIStyle bigStyleShadow; // 0xA0
	private GUIStyle smallStyle; // 0xA8
	private GUIStyle smallStyleShadow; // 0xB0
	private GUIStyle smallStyleLabel; // 0xB8
	private GUIStyle headerStyle; // 0xC0
	private Rect[] rectsRun; // 0xC8
	private Rect[] rectsResult; // 0xD0
	private Gradient gradient; // 0xD8
	private const float line1 = 4; // 0x0
	private const float line2 = 30; // 0x0
	private const float line3 = 44; // 0x0
	private const float line4 = 58; // 0x0
	private const float labelWidth = 26; // 0x0
	private const float paddingH = 8; // 0x0
	private const float lineHeight = 22; // 0x0
	private float columnRight; // 0xE0
	private float columnLeft; // 0xE4
	private Color fontShadow; // 0xE8
	private Color label; // 0xF8
	private Color colorCurrent; // 0x108
	private Color colorAvg; // 0x118
	private const string resultHeader = "BENCHMARK RESULTS"; // 0x0
	private const string resultLabelAvg = "AVERAGE FPS:"; // 0x0
	private const string resultLabelMin = "MINIMUM FPS:"; // 0x0
	private const string resultLabelMax = "MAXIMUM FPS:"; // 0x0
	private GUIContent resultHeaderGUI; // 0x128
	private GUIContent reslutLabelAvgGUI; // 0x130
	private GUIContent avgTextGUI; // 0x138
	private GUIContent instructions; // 0x140
	private const string runLabelAvg = "Avg:"; // 0x0
	private const string runLabelMin = "Min:"; // 0x0
	private const string runLabelMax = "Max:"; // 0x0
	private Vector2 screenSize; // 0x148
	private MCS_FPSCounter.GUIType oldDisplayType; // 0x150

	// Methods
	// RVA: 0x6A81B0 Offset: 0x6A69B0 VA: 0x1806A81B0
	private void Awake() { }
	// RVA: 0x6A8350 Offset: 0x6A6B50 VA: 0x1806A8350
	private void OnDestroy() { }
	// RVA: 0x6A8420 Offset: 0x6A6C20 VA: 0x1806A8420
	private void OnGUI() { }
	// RVA: 0x6A8DE0 Offset: 0x6A75E0 VA: 0x1806A8DE0
	private void SetRectsRun() { }
	// RVA: 0x6A93A0 Offset: 0x6A7BA0 VA: 0x1806A93A0
	private void SetRectsResult() { }
	// RVA: 0x6A9E60 Offset: 0x6A8660 VA: 0x1806A9E60
	private void Start() { }
	// RVA: 0x6AA570 Offset: 0x6A8D70 VA: 0x1806AA570
	private void Update() { }
	// RVA: 0x6AA710 Offset: 0x6A8F10 VA: 0x1806AA710
	public void StartBenchmark() { }
	// RVA: 0x6AA740 Offset: 0x6A8F40 VA: 0x1806AA740
	public void StopBenchmark() { }
	// RVA: 0x6AA800 Offset: 0x6A9000 VA: 0x1806AA800
	private void GetFPS() { }
	// RVA: 0x6AAB70 Offset: 0x6A9370 VA: 0x1806AAB70
	public void Reset() { }
	// RVA: 0x6AAC30 Offset: 0x6A9430 VA: 0x1806AAC30
	private Color EvaluateGradient(float f) { }
	// RVA: 0x6AAD90 Offset: 0x6A9590 VA: 0x1806AAD90
	public void .ctor() { }
}

// Namespace: 
public enum MCS_FPSCounter.GUIType // TypeDefIndex: 3108
{
	// Fields
	public int value__; // 0x0
	public const MCS_FPSCounter.GUIType DisplayRunning = 0; // 0x0
	public const MCS_FPSCounter.GUIType DisplayResults = 1; // 0x0
	public const MCS_FPSCounter.GUIType DisplayNothing = 2; // 0x0
}

// Namespace: MeshCombineStudio
public struct AABB3 // TypeDefIndex: 3109
{
	// Fields
	public Vector3 min; // 0x0
	public Vector3 max; // 0xC

	// Methods
	// RVA: 0x105040 Offset: 0x104440 VA: 0x180105040
	public void .ctor(Vector3 min, Vector3 max) { }
}

// Namespace: MeshCombineStudio
public struct Triangle3 // TypeDefIndex: 3110
{
	// Fields
	public Vector3 a; // 0x0
	public Vector3 b; // 0xC
	public Vector3 c; // 0x18
	public Vector3 dirAb; // 0x24
	public Vector3 dirAc; // 0x30
	public Vector3 dirBc; // 0x3C
	public Vector3 h1; // 0x48
	public float ab; // 0x54
	public float ac; // 0x58
	public float bc; // 0x5C
	public float area; // 0x60
	public float h; // 0x64
	public float ah; // 0x68
	public float hb; // 0x6C
}

// Namespace: MeshCombineStudio
public struct Sphere3 // TypeDefIndex: 3111
{
	// Fields
	public Vector3 center; // 0x0
	public float radius; // 0xC
}

// Namespace: MeshCombineStudio
public struct Int2 // TypeDefIndex: 3112
{
	// Fields
	public int x; // 0x0
	public int y; // 0x4

	// Methods
	// RVA: 0x16B00 Offset: 0x15F00 VA: 0x180016B00
	public void .ctor(int x, int y) { }
}

// Namespace: MeshCombineStudio
public static class Mathw // TypeDefIndex: 3113
{
	// Fields
	public static readonly int[] bits; // 0xABD73

	// Methods
	// RVA: 0x6ADE10 Offset: 0x6AC610 VA: 0x1806ADE10
	public static float GetMax(Vector3 v) { }
	// RVA: 0x6ADE60 Offset: 0x6AC660 VA: 0x1806ADE60
	public static Vector3 Snap(Vector3 v, float snapSize) { }
	// RVA: 0x6ADF90 Offset: 0x6AC790 VA: 0x1806ADF90
	public static Vector3 Abs(Vector3 v) { }
	// RVA: 0x6AE010 Offset: 0x6AC810 VA: 0x1806AE010
	public static bool IntersectAABB3Sphere3(AABB3 box, Sphere3 sphere) { }
	// RVA: 0x6AE0D0 Offset: 0x6AC8D0 VA: 0x1806AE0D0
	private static void .cctor() { }
}

// Namespace: MeshCombineStudio
public static class Methods // TypeDefIndex: 3114
{
	// Methods
	// RVA: 0x6B7010 Offset: 0x6B5810 VA: 0x1806B7010
	public static bool LayerMaskContainsLayer(int layerMask, int layer) { }
	// RVA: 0x6B7030 Offset: 0x6B5830 VA: 0x1806B7030
	public static int GetFirstLayerInLayerMask(int layerMask) { }
	// RVA: 0x6B7120 Offset: 0x6B5920 VA: 0x1806B7120
	public static bool Contains(string compare, string name) { }
	// RVA: 0x535520 Offset: 0x533D20 VA: 0x180535520
	public static T[] Search(GameObject parentGO) { }
	// RVA: 0x6B72B0 Offset: 0x6B5AB0 VA: 0x1806B72B0
	public static FastList<GameObject> GetAllRootGameObjects() { }
	// RVA: 0x5359D0 Offset: 0x5341D0 VA: 0x1805359D0
	public static T[] SearchParent(GameObject parentGO, bool searchInActiveGameObjects) { }
	// RVA: 0x5358E0 Offset: 0x5340E0 VA: 0x1805358E0
	public static FastList<T> SearchAllScenes(bool searchInActiveGameObjects) { }
	// RVA: 0x535350 Offset: 0x533B50 VA: 0x180535350
	public static T Find(GameObject parentGO, string name) { }
	// RVA: 0x6B7470 Offset: 0x6B5C70 VA: 0x1806B7470
	public static void DestroyChildren(Transform t) { }
	// RVA: 0x6B7610 Offset: 0x6B5E10 VA: 0x1806B7610
	public static void Destroy(GameObject go) { }
	// RVA: 0x6B76E0 Offset: 0x6B5EE0 VA: 0x1806B76E0
	public static void SetChildrenActive(Transform t, bool active) { }
	// RVA: 0x6B7870 Offset: 0x6B6070 VA: 0x1806B7870
	public static void SnapBoundsAndPreserveArea(ref Bounds bounds, float snapSize, Vector3 offset) { }
	// RVA: 0x535490 Offset: 0x533C90 VA: 0x180535490
	public static void ListRemoveAt(List<T> list, int index) { }
}

// Namespace: MeshCombineStudio
public class ReadMe : MonoBehaviour // TypeDefIndex: 3115
{
	// Fields
	public bool buttonEdit; // 0x18
	public string readme; // 0x20

	// Methods
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public class BaseOctree // TypeDefIndex: 3116
{}

// Namespace: 
public class BaseOctree.Cell // TypeDefIndex: 3117
{
	// Fields
	public BaseOctree.Cell mainParent; // 0x10
	public BaseOctree.Cell parent; // 0x18
	public bool[] cellsUsed; // 0x20
	public Bounds bounds; // 0x28
	public int cellIndex; // 0x40
	public int cellCount; // 0x44
	public int level; // 0x48
	public int maxLevels; // 0x4C

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6E8CE0 Offset: 0x6E74E0 VA: 0x1806E8CE0
	public void .ctor(Vector3 position, Vector3 size, int maxLevels) { }
	// RVA: 0x6E8E10 Offset: 0x6E7610 VA: 0x1806E8E10
	public void SetCell(BaseOctree.Cell parent, int cellIndex, Bounds bounds) { }
	// RVA: 0x432170 Offset: 0x430970 VA: 0x180432170
	protected int AddCell(ref T[] cells, Vector3 position, out bool maxCellCreated) { }
	// RVA: 0x4322D0 Offset: 0x430AD0 VA: 0x1804322D0
	protected void AddCell(ref T[] cells, int index, int x, int y, int z, out bool maxCellCreated) { }
	// RVA: 0x6E8E50 Offset: 0x6E7650 VA: 0x1806E8E50
	public bool InsideBounds(Vector3 position) { }
	// RVA: 0x6E8FF0 Offset: 0x6E77F0 VA: 0x1806E8FF0
	public void Reset(ref BaseOctree.Cell[] cells) { }
}

// Namespace: MeshCombineStudio
public class ObjectOctree // TypeDefIndex: 3118
{}

// Namespace: 
public class ObjectOctree.LODParent // TypeDefIndex: 3119
{
	// Fields
	public GameObject cellGO; // 0x10
	public Transform cellT; // 0x18
	public LODGroup lodGroup; // 0x20
	public ObjectOctree.LODLevel[] lodLevels; // 0x28
	public bool hasChanged; // 0x30
	public int jobsPending; // 0x34

	// Methods
	// RVA: 0x6F3CB0 Offset: 0x6F24B0 VA: 0x1806F3CB0
	public void .ctor(int lodCount) { }
	// RVA: 0x6F3EF0 Offset: 0x6F26F0 VA: 0x1806F3EF0
	public void AssignLODGroup(MeshCombiner meshCombiner) { }
	// RVA: 0x6F4220 Offset: 0x6F2A20 VA: 0x1806F4220
	public void ApplyChanges(MeshCombiner meshCombiner) { }
}

// Namespace: 
public class ObjectOctree.LODLevel // TypeDefIndex: 3120
{
	// Fields
	public List<CachedGameObject> cachedGOs; // 0x10
	public List<MeshObjectsHolder> meshObjectsHolders; // 0x18
	public List<MeshObjectsHolder> changedMeshObjectsHolders; // 0x20
	public List<MeshRenderer> newMeshRenderers; // 0x28
	public int vertCount; // 0x30
	public int objectCount; // 0x34

	// Methods
	// RVA: 0x6F3970 Offset: 0x6F2170 VA: 0x1806F3970
	public int GetSortMeshIndex(Material mat, bool shadowCastingModeTwoSided, int lightmapIndex) { }
	// RVA: 0x6F3AF0 Offset: 0x6F22F0 VA: 0x1806F3AF0
	public void ApplyChanges(MeshCombiner meshCombiner) { }
	// RVA: 0x6F3BF0 Offset: 0x6F23F0 VA: 0x1806F3BF0
	public void .ctor() { }
}

// Namespace: 
public class ObjectOctree.MaxCell : ObjectOctree.Cell // TypeDefIndex: 3121
{
	// Fields
	public static int maxCellCount; // 0x0
	public ObjectOctree.LODParent[] lodParents; // 0x58
	public List<ObjectOctree.LODParent> changedLodParents; // 0x60
	public bool hasChanged; // 0x68

	// Methods
	// RVA: 0x6F4380 Offset: 0x6F2B80 VA: 0x1806F4380
	public void ApplyChanges(MeshCombiner meshCombiner) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
public class ObjectOctree.Cell : BaseOctree.Cell // TypeDefIndex: 3122
{
	// Fields
	public ObjectOctree.Cell[] cells; // 0x50

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
	// RVA: 0x6F2200 Offset: 0x6F0A00 VA: 0x1806F2200
	public CachedGameObject AddObject(Vector3 position, MeshCombiner meshCombiner, CachedGameObject cachedGO, int lodParentIndex, int lodLevel, bool isChangeMode = False) { }
	// RVA: 0x6F22B0 Offset: 0x6F0AB0 VA: 0x1806F22B0
	private void AddObjectInternal(MeshCombiner meshCombiner, CachedGameObject cachedGO, Vector3 position, int lodParentIndex, int lodLevel, bool isChangeMode) { }
	// RVA: 0x6F26E0 Offset: 0x6F0EE0 VA: 0x1806F26E0
	public void SortObjects(MeshCombiner meshCombiner) { }
	// RVA: 0x6F29D0 Offset: 0x6F11D0 VA: 0x1806F29D0
	public bool SortObject(MeshCombiner meshCombiner, ObjectOctree.LODLevel lod, CachedGameObject cachedGO, bool isChangeMode = False) { }
	// RVA: 0x6F2D90 Offset: 0x6F1590 VA: 0x1806F2D90
	public void CombineMeshes(MeshCombiner meshCombiner, int lodParentIndex) { }
	// RVA: 0x6F33C0 Offset: 0x6F1BC0 VA: 0x1806F33C0
	public void Draw(MeshCombiner meshCombiner, bool onlyMaxLevel, bool drawLevel0) { }
}

// Namespace: MeshCombineStudio
[Serializable]
public class MeshObjectsHolder // TypeDefIndex: 3123
{
	// Fields
	public Material mat; // 0x10
	public List<MeshObject> meshObjects; // 0x18
	public ObjectOctree.LODParent lodParent; // 0x20
	public List<CachedGameObject> newCachedGOs; // 0x28
	public int lodLevel; // 0x30
	public int lightmapIndex; // 0x34
	public bool shadowCastingModeTwoSided; // 0x38
	public bool hasChanged; // 0x39

	// Methods
	// RVA: 0x6B6F00 Offset: 0x6B5700 VA: 0x1806B6F00
	public void .ctor(CachedGameObject cachedGO, Material mat, int subMeshIndex, bool shadowCastingModeTwoSided, int lightmapIndex) { }
}

// Namespace: MeshCombineStudio
[Serializable]
public class MeshObject // TypeDefIndex: 3124
{
	// Fields
	public CachedGameObject cachedGO; // 0x10
	public MeshCache meshCache; // 0x18
	public int subMeshIndex; // 0x20
	public Vector3 position; // 0x24
	public Vector3 scale; // 0x30
	public Quaternion rotation; // 0x3C
	public Vector4 lightmapScaleOffset; // 0x4C
	public bool intersectsSurface; // 0x5C
	public int startNewTriangleIndex; // 0x60
	public int newTriangleCount; // 0x64
	public bool skip; // 0x68

	// Methods
	// RVA: 0x6B6D30 Offset: 0x6B5530 VA: 0x1806B6D30
	public void .ctor(CachedGameObject cachedGO, int subMeshIndex) { }
}

// Namespace: MeshCombineStudio
[Serializable]
public class CachedGameObject // TypeDefIndex: 3125
{
	// Fields
	public GameObject go; // 0x10
	public Transform t; // 0x18
	public MeshRenderer mr; // 0x20
	public MeshFilter mf; // 0x28
	public Mesh mesh; // 0x30

	// Methods
	// RVA: 0x24D960 Offset: 0x24C160 VA: 0x18024D960
	public void .ctor(GameObject go, Transform t, MeshRenderer mr, MeshFilter mf, Mesh mesh) { }
	// RVA: 0x6F9E90 Offset: 0x6F8690 VA: 0x1806F9E90
	public void .ctor(CachedComponents cachedComponent) { }
}

// Namespace: MeshCombineStudio
[Serializable]
public class CachedLodGameObject : CachedGameObject // TypeDefIndex: 3126
{
	// Fields
	public Vector3 center; // 0x38
	public int lodCount; // 0x44
	public int lodLevel; // 0x48

	// Methods
	// RVA: 0x6F9F20 Offset: 0x6F8720 VA: 0x1806F9F20
	public void .ctor(CachedGameObject cachedGO, int lodCount, int lodLevel) { }
}

// Namespace: MeshCombineStudio
[ExecuteInEditMode] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class CreateOverlapColliders : MonoBehaviour // TypeDefIndex: 3127
{
	// Fields
	public LayerMask layerMask; // 0x18
	public bool create; // 0x1C
	public bool destroy; // 0x1D
	public GameObject newGO; // 0x20
	public int lodLevel; // 0x28
	public bool setLayer; // 0x2C
	public static bool foundLodGroup; // 0x0
	public static Dictionary<GameObject, GameObject> lookupOrigCollider; // 0x8
	public static Dictionary<GameObject, GameObject> lookupColliderOrig; // 0x10
	public static Dictionary<Collider, CreateOverlapColliders.LodInfo> lodInfoLookup; // 0x18
	private static FastList<CreateOverlapColliders.LodInfo> lodInfos; // 0x20
	private static FastList<GameObject> selectGos; // 0x28
	private static HashSet<Mesh> lodGroupMeshes; // 0x30
	private static int overlapLayer; // 0x38
	private static FastList<Collider> colliders; // 0x40

	// Methods
	// RVA: 0x68F790 Offset: 0x68DF90 VA: 0x18068F790
	private void Update() { }
	// RVA: 0x68F930 Offset: 0x68E130 VA: 0x18068F930
	public static void SaveCollidersState(LayerMask layerMask) { }
	// RVA: 0x68FB50 Offset: 0x68E350 VA: 0x18068FB50
	public static void RestoreCollidersState() { }
	// RVA: 0x68FD00 Offset: 0x68E500 VA: 0x18068FD00
	public static void EnableLodLevelCollider(int lodLevel, int lodGroupLayer) { }
	// RVA: 0x68FE80 Offset: 0x68E680 VA: 0x18068FE80
	public static bool IsAnythingOnFreeLayers(int insideLayer, int lodGroupLayer) { }
	// RVA: 0x690180 Offset: 0x68E980 VA: 0x180690180
	public static void Create(Transform parentT, LayerMask overlapLayerMask, int lodGroupLayer, ref GameObject overlapCollidersGO) { }
	// RVA: 0x690A00 Offset: 0x68F200 VA: 0x180690A00
	private static MeshCollider CreateMeshCollider(MeshFilter mf, Transform parentT, string prefixName) { }
	// RVA: 0x690E20 Offset: 0x68F620 VA: 0x180690E20
	public static void DestroyOverlapColliders(GameObject go) { }
	// RVA: 0x690F00 Offset: 0x68F700 VA: 0x180690F00
	public static void CopyTransform(Transform st, Transform dt) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
	// RVA: 0x691140 Offset: 0x68F940 VA: 0x180691140
	private static void .cctor() { }
}

// Namespace: 
public class CreateOverlapColliders.LodInfo // TypeDefIndex: 3128
{
	// Fields
	public FastList<CreateOverlapColliders.LodLevel> lodLevels; // 0x10

	// Methods
	// RVA: 0x6EA2E0 Offset: 0x6E8AE0 VA: 0x1806EA2E0
	public void SetActiveOnlyLodLevel(int lodLevel) { }
	// RVA: 0x6EA380 Offset: 0x6E8B80 VA: 0x1806EA380
	public void SetActiveOtherLodLevels(int excludeLevel) { }
	// RVA: 0x6EA420 Offset: 0x6E8C20 VA: 0x1806EA420
	public void SetLayerLodLevel(int lodLevel, int layer, int otherLayer) { }
	// RVA: 0x6EA4E0 Offset: 0x6E8CE0 VA: 0x1806EA4E0
	public void CreateLodGroupColliders(LODGroup lodGroup, Transform parentT) { }
	// RVA: 0x6EAB00 Offset: 0x6E9300 VA: 0x1806EAB00
	public void .ctor() { }
}

// Namespace: 
public class CreateOverlapColliders.LodLevel // TypeDefIndex: 3129
{
	// Fields
	public FastList<Collider> colliders; // 0x10
	public FastList<GameObject> gos; // 0x18

	// Methods
	// RVA: 0x6EABF0 Offset: 0x6E93F0 VA: 0x1806EABF0
	public void SetCollidersActive(bool active) { }
	// RVA: 0x6EACD0 Offset: 0x6E94D0 VA: 0x1806EACD0
	public void SetLayer(int layer) { }
	// RVA: 0x6EADB0 Offset: 0x6E95B0 VA: 0x1806EADB0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
[ExecuteInEditMode] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
public class RandomizeTransform : MonoBehaviour // TypeDefIndex: 3130
{
	// Fields
	public Vector2 scaleRange; // 0x18

	// Methods
	// RVA: 0x6C85C0 Offset: 0x6C6DC0 VA: 0x1806C85C0
	private void OnEnable() { }
	// RVA: 0x6C88D0 Offset: 0x6C70D0 VA: 0x1806C88D0
	public void .ctor() { }
}

// Namespace: MeshCombineStudio
public static class RemoveOverlappingTris // TypeDefIndex: 3131
{
	// Fields
	public static FastList<Triangle3> triangles; // 0x0
	private static FastList<RemoveOverlappingTris.ColliderInfo> collidersInfo; // 0x8
	private static FastList<Collider> colliders; // 0x10
	private static FastList<RaycastHit> hitInfos; // 0x18
	private static FastList<RaycastHit> hitInfos2; // 0x20
	private static RaycastHit hitInfo; // 0x28
	private static HashSet<GameObject> toCombineGos; // 0x58
	private static Triangle3 tri; // 0x60

	// Methods
	// RVA: 0x6CB7A0 Offset: 0x6C9FA0 VA: 0x1806CB7A0
	public static void RemoveOverlap(Transform t, MeshCombineJobManager.MeshCombineJob meshCombineJob, MeshCache.SubMeshCache newMeshCache, ref byte[] vertexIsInsideCollider) { }
	// RVA: 0x6CCBB0 Offset: 0x6CB3B0 VA: 0x1806CCBB0
	private static bool CheckAnyInsideOfLodGroups(int layerMask, int lodLevel) { }
	// RVA: 0x6CD370 Offset: 0x6CBB70 VA: 0x1806CD370
	private static bool IsOneColliderGOInToCombineGos() { }
	// RVA: 0x6CD590 Offset: 0x6CBD90 VA: 0x1806CD590
	private static bool AreAllHitInfosALodGroup() { }
	// RVA: 0x6CD6E0 Offset: 0x6CBEE0 VA: 0x1806CD6E0
	private static bool AnythingInside() { }
	// RVA: 0x6CD920 Offset: 0x6CC120 VA: 0x1806CD920
	private static bool Linecast(Vector3 p1, Vector3 p2, int layerMask) { }
	// RVA: 0x6CDAD0 Offset: 0x6CC2D0 VA: 0x1806CDAD0
	private static bool LinecastAll(Vector3 p1, Vector3 p2, int layerMask) { }
	// RVA: 0x6CDD30 Offset: 0x6CC530 VA: 0x1806CDD30
	private static bool IntersectAny() { }
	// RVA: 0x6CE010 Offset: 0x6CC810 VA: 0x1806CE010
	private static void .cctor() { }
}

// Namespace: 
private struct RemoveOverlappingTris.ColliderInfo // TypeDefIndex: 3132
{
	// Fields
	public GameObject go; // 0x0
	public int layer; // 0x8
}

// Namespace: MalbersAnimations
public class Readme : ScriptableObject // TypeDefIndex: 3133
{
	// Fields
	public Texture2D icon; // 0x18
	public string title; // 0x20
	public Readme.Section[] sections; // 0x28

	// Methods
	// RVA: 0x165000 Offset: 0x163800 VA: 0x180165000
	public void .ctor() { }
}

// Namespace: 
[Serializable]
public class Readme.Section // TypeDefIndex: 3134
{
	// Fields
	public string heading; // 0x10
	public string text; // 0x18
	public string linkText; // 0x20
	public string url; // 0x28

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: MalbersAnimations
public class UseTransform : MonoBehaviour // TypeDefIndex: 3135
{
	// Fields
	public Transform Reference; // 0x18
	public bool rotation; // 0x20
	public UseTransform.UpdateMode updateMode; // 0x24

	// Methods
	// RVA: 0x6E8350 Offset: 0x6E6B50 VA: 0x1806E8350
	private void Update() { }
	// RVA: 0x6E8360 Offset: 0x6E6B60 VA: 0x1806E8360
	private void LateUpdate() { }
	// RVA: 0x6E8370 Offset: 0x6E6B70 VA: 0x1806E8370
	private void FixedUpdate() { }
	// RVA: 0x6E8380 Offset: 0x6E6B80 VA: 0x1806E8380
	private void SetTransformReference() { }
	// RVA: 0x6E8650 Offset: 0x6E6E50 VA: 0x1806E8650
	public void .ctor() { }
}

// Namespace: 
public enum UseTransform.UpdateMode // TypeDefIndex: 3136
{
	// Fields
	public int value__; // 0x0
	public const UseTransform.UpdateMode Update = 1; // 0x0
	public const UseTransform.UpdateMode FixedUpdate = 2; // 0x0
	public const UseTransform.UpdateMode LateUpdate = 4; // 0x0
}

// Namespace: MalbersAnimations.Events
public class UnityEventRaiser : MonoBehaviour // TypeDefIndex: 3137
{
	// Fields
	public float Delayed; // 0x18
	public UnityEvent OnEnableEvent; // 0x20

	// Methods
	// RVA: 0x6E8010 Offset: 0x6E6810 VA: 0x1806E8010
	public void OnEnable() { }
	// RVA: 0x6E80D0 Offset: 0x6E68D0 VA: 0x1806E80D0
	private void StartEvent() { }
	// RVA: 0x6E80F0 Offset: 0x6E68F0 VA: 0x1806E80F0
	public void DestroyMe(float time) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: EpicToonFX
public class ETFXButtonScript : MonoBehaviour // TypeDefIndex: 3138
{
	// Fields
	public GameObject Button; // 0x18
	private Text MyButtonText; // 0x20
	private string projectileParticleName; // 0x28
	private ETFXFireProjectile effectScript; // 0x30
	private ETFXProjectileScript projectileScript; // 0x38
	public float buttonsX; // 0x40
	public float buttonsY; // 0x44
	public float buttonsSizeX; // 0x48
	public float buttonsSizeY; // 0x4C
	public float buttonsDistance; // 0x50

	// Methods
	// RVA: 0x695340 Offset: 0x693B40 VA: 0x180695340
	private void Start() { }
	// RVA: 0x6954C0 Offset: 0x693CC0 VA: 0x1806954C0
	private void Update() { }
	// RVA: 0x6954F0 Offset: 0x693CF0 VA: 0x1806954F0
	public void getProjectileNames() { }
	// RVA: 0x6955C0 Offset: 0x693DC0 VA: 0x1806955C0
	public bool overButton() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: EpicToonFX
public class ETFXFireProjectile : MonoBehaviour // TypeDefIndex: 3139
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public GameObject[] projectiles; // 0x18
	public Transform spawnPosition; // 0x20
	public int currentProjectile; // 0x28
	public float speed; // 0x2C
	private ETFXButtonScript selectedProjectileButton; // 0x30
	private RaycastHit hit; // 0x38

	// Methods
	// RVA: 0x6958A0 Offset: 0x6940A0 VA: 0x1806958A0
	private void Start() { }
	// RVA: 0x695980 Offset: 0x694180 VA: 0x180695980
	private void Update() { }
	// RVA: 0x696470 Offset: 0x694C70 VA: 0x180696470
	public void nextEffect() { }
	// RVA: 0x6964C0 Offset: 0x694CC0 VA: 0x1806964C0
	public void previousEffect() { }
	// RVA: 0x366670 Offset: 0x364E70 VA: 0x180366670
	public void AdjustSpeed(float newSpeed) { }
	// RVA: 0x696500 Offset: 0x694D00 VA: 0x180696500
	public void .ctor() { }
}

// Namespace: EpicToonFX
public class ETFXLoopScript : MonoBehaviour // TypeDefIndex: 3140
{
	// Fields
	public GameObject chosenEffect; // 0x18
	public float loopTimeLimit; // 0x20
	public bool spawnWithoutLight; // 0x24
	public bool spawnWithoutSound; // 0x25

	// Methods
	// RVA: 0x696AB0 Offset: 0x6952B0 VA: 0x180696AB0
	private void Start() { }
	// RVA: 0x696AC0 Offset: 0x6952C0 VA: 0x180696AC0
	public void PlayEffect() { }
	// RVA: 0x696CA0 Offset: 0x6954A0 VA: 0x180696CA0
	private IEnumerator EffectLoop() { }
	// RVA: 0x696D30 Offset: 0x695530 VA: 0x180696D30
	public void .ctor() { }
}

// Namespace: 
private sealed class ETFXLoopScript.<EffectLoop>d__6 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3141
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ETFXLoopScript <>4__this; // 0x20
	private GameObject <effectPlayer>5__2; // 0x28

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6EAF20 Offset: 0x6E9720 VA: 0x1806EAF20 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: EpicToonFX
public class ETFXMouseOrbit : MonoBehaviour // TypeDefIndex: 3142
{
	// Fields
	public Transform target; // 0x18
	public float distance; // 0x20
	public float xSpeed; // 0x24
	public float ySpeed; // 0x28
	public float yMinLimit; // 0x2C
	public float yMaxLimit; // 0x30
	public float distanceMin; // 0x34
	public float distanceMax; // 0x38
	public float smoothTime; // 0x3C
	private float rotationYAxis; // 0x40
	private float rotationXAxis; // 0x44
	private float velocityX; // 0x48
	private float velocityY; // 0x4C

	// Methods
	// RVA: 0x696D50 Offset: 0x695550 VA: 0x180696D50
	private void Start() { }
	// RVA: 0x696F30 Offset: 0x695730 VA: 0x180696F30
	private void LateUpdate() { }
	// RVA: 0x697900 Offset: 0x696100 VA: 0x180697900
	public static float ClampAngle(float angle, float min, float max) { }
	// RVA: 0x6979F0 Offset: 0x6961F0 VA: 0x1806979F0
	public void .ctor() { }
}

// Namespace: EpicToonFX
public class ETFXTarget : MonoBehaviour // TypeDefIndex: 3143
{
	// Fields
	public GameObject hitParticle; // 0x18
	public GameObject respawnParticle; // 0x20
	private Renderer targetRenderer; // 0x28
	private Collider targetCollider; // 0x30

	// Methods
	// RVA: 0x69A6F0 Offset: 0x698EF0 VA: 0x18069A6F0
	private void Start() { }
	// RVA: 0x69A780 Offset: 0x698F80 VA: 0x18069A780
	private void SpawnTarget() { }
	// RVA: 0x69AA90 Offset: 0x699290 VA: 0x18069AA90
	private void OnTriggerEnter(Collider col) { }
	// RVA: 0x69AF00 Offset: 0x699700 VA: 0x18069AF00
	private IEnumerator Respawn() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: 
private sealed class ETFXTarget.<Respawn>d__7 : IEnumerator<object>, IEnumerator, IDisposable // TypeDefIndex: 3144
{
	// Fields
	private int <>1__state; // 0x10
	private object <>2__current; // 0x18
	public ETFXTarget <>4__this; // 0x20

	// Properties
	private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Methods
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x245800 Offset: 0x244000 VA: 0x180245800
	public void .ctor(int <>1__state) { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	private void System.IDisposable.Dispose() { }
	// RVA: 0x6EB2B0 Offset: 0x6E9AB0 VA: 0x1806EB2B0 Slot: 6
	private bool MoveNext() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 4
	private object System.Collections.Generic.IEnumerator<System.Object>.get_Current() { }
	[DebuggerHiddenAttribute] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990 Slot: 7
	private object System.Collections.IEnumerator.get_Current() { }
}

// Namespace: EpicToonFX
public class ETFXLightFade : MonoBehaviour // TypeDefIndex: 3145
{
	// Fields
	public float life; // 0x18
	public bool killAfterLife; // 0x1C
	private Light li; // 0x20
	private float initIntensity; // 0x28

	// Methods
	// RVA: 0x696510 Offset: 0x694D10 VA: 0x180696510
	private void Start() { }
	// RVA: 0x6967C0 Offset: 0x694FC0 VA: 0x1806967C0
	private void Update() { }
	// RVA: 0x696A90 Offset: 0x695290 VA: 0x180696A90
	public void .ctor() { }
}

// Namespace: EpicToonFX
public class ETFXPitchRandomizer : MonoBehaviour // TypeDefIndex: 3146
{
	// Fields
	public float randomPercent; // 0x18

	// Methods
	// RVA: 0x697A30 Offset: 0x696230 VA: 0x180697A30
	private void Start() { }
	// RVA: 0x697BF0 Offset: 0x6963F0 VA: 0x180697BF0
	public void .ctor() { }
}

// Namespace: EpicToonFX
public class ETFXRotation : MonoBehaviour // TypeDefIndex: 3147
{
	// Fields
	public Vector3 rotateVector; // 0x18
	public ETFXRotation.spaceEnum rotateSpace; // 0x24

	// Methods
	// RVA: 0x698FA0 Offset: 0x6977A0 VA: 0x180698FA0
	private void Update() { }
	// RVA: 0x699260 Offset: 0x697A60 VA: 0x180699260
	public void .ctor() { }
}

// Namespace: 
public enum ETFXRotation.spaceEnum // TypeDefIndex: 3148
{
	// Fields
	public int value__; // 0x0
	public const ETFXRotation.spaceEnum Local = 0; // 0x0
	public const ETFXRotation.spaceEnum World = 1; // 0x0
}

// Namespace: Lightbug.Utilities
public struct Contact // TypeDefIndex: 3149
{
	// Fields
	public bool firstContact; // 0x0
	public Vector3 point; // 0x4
	public Vector3 normal; // 0x10
	public Collider2D collider2D; // 0x20
	public Collider collider3D; // 0x28
	public bool isRigidbody; // 0x30
	public bool isKinematicRigidbody; // 0x31
	public Vector3 pointVelocity; // 0x34
	public GameObject gameObject; // 0x40
}

// Namespace: Lightbug.Utilities
public struct HitInfo // TypeDefIndex: 3150
{
	// Fields
	public bool hit; // 0x0
	public Vector3 normal; // 0x4
	public Vector3 point; // 0x10
	public float distance; // 0x1C
	public Vector3 direction; // 0x20
	public Transform transform; // 0x30
	public Collider2D collider2D; // 0x38
	public Collider collider3D; // 0x40
	public Rigidbody2D rigidbody2D; // 0x48
	public Rigidbody rigidbody3D; // 0x50
}

// Namespace: Lightbug.Utilities
public struct OrthonormalReference // TypeDefIndex: 3151
{
	// Fields
	public Vector3 forward; // 0x0
	public Vector3 up; // 0xC
	public Vector3 right; // 0x18

	// Methods
	// RVA: 0x104C80 Offset: 0x104080 VA: 0x180104C80
	public void Update(Transform transform) { }
	// RVA: 0x104D00 Offset: 0x104100 VA: 0x180104D00
	public void Update(Transform transform, Vector3 planeNormal) { }
	// RVA: 0x104D30 Offset: 0x104130 VA: 0x180104D30
	public void Update(Vector3 right, Vector3 up, Vector3 forward) { }
}

// Namespace: Lightbug.Utilities
public abstract class PhysicsComponent : MonoBehaviour // TypeDefIndex: 3152
{
	// Fields
	protected int hits; // 0x18
	public List<Contact> contactsList; // 0x20
	protected List<GameObject> triggers; // 0x28
	private Action<Contact> OnCollisionEnterEvent; // 0x30
	private Action<GameObject> OnTriggerEnterEvent; // 0x38
	private Action<GameObject> OnTriggerExitEvent; // 0x40

	// Properties
	public List<GameObject> Triggers { get; }

	// Methods
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public List<GameObject> get_Triggers() { }
	// RVA: 0x6C3750 Offset: 0x6C1F50 VA: 0x1806C3750
	public void add_OnCollisionEnterEvent(Action<Contact> value) { }
	// RVA: 0x6C3830 Offset: 0x6C2030 VA: 0x1806C3830
	public void remove_OnCollisionEnterEvent(Action<Contact> value) { }
	// RVA: 0x6C3910 Offset: 0x6C2110 VA: 0x1806C3910
	public void add_OnTriggerEnterEvent(Action<GameObject> value) { }
	// RVA: 0x6C39F0 Offset: 0x6C21F0 VA: 0x1806C39F0
	public void remove_OnTriggerEnterEvent(Action<GameObject> value) { }
	// RVA: 0x6C3AD0 Offset: 0x6C22D0 VA: 0x1806C3AD0
	public void add_OnTriggerExitEvent(Action<GameObject> value) { }
	// RVA: 0x6C3BB0 Offset: 0x6C23B0 VA: 0x1806C3BB0
	public void remove_OnTriggerExitEvent(Action<GameObject> value) { }
	// RVA: 0x6C3C90 Offset: 0x6C2490 VA: 0x1806C3C90 Slot: 4
	protected virtual void Awake() { }
	// RVA: 0x6C3CF0 Offset: 0x6C24F0 VA: 0x1806C3CF0
	protected void OnCollisionEnterMethod(Contact contact) { }
	// RVA: 0x6C3DC0 Offset: 0x6C25C0 VA: 0x1806C3DC0
	protected void OnTriggerEnterMethod(GameObject trigger) { }
	// RVA: 0x6C3E70 Offset: 0x6C2670 VA: 0x1806C3E70
	protected void OnTriggerExitMethod(GameObject trigger) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract void IgnoreLayerCollision(int layerA, int layerB, bool ignore) { }
	// RVA: 0x6C3F90 Offset: 0x6C2790 VA: 0x1806C3F90
	public void ClearContacts() { }
	// RVA: -1 Offset: -1 Slot: 6
	protected abstract void AddContacts(int bufferHits, bool firstContact) { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract int Raycast(out HitInfo hitInfo, Vector3 origin, Vector3 castDisplacement, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract int SphereCast(out HitInfo hitInfo, Vector3 center, float radius, Vector3 castDisplacement, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: -1 Offset: -1 Slot: 9
	public abstract int CapsuleCast(out HitInfo hitInfo, Vector3 bottom, Vector3 top, float radius, Vector3 castDisplacement, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: -1 Offset: -1 Slot: 10
	public abstract bool OverlapSphere(Vector3 center, float radius, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: -1 Offset: -1 Slot: 11
	public abstract bool OverlapCapsule(Vector3 bottom, Vector3 top, float radius, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: 0x6C4030 Offset: 0x6C2830 VA: 0x1806C4030
	protected void .ctor() { }
}

// Namespace: Lightbug.Utilities
public sealed class PhysicsComponent2D : PhysicsComponent // TypeDefIndex: 3153
{
	// Fields
	private RaycastHit2D[] raycastHits; // 0x48
	private Collider2D[] overlappedColliders; // 0x50
	private ContactPoint2D[] contactsBuffer; // 0x58

	// Methods
	// RVA: 0x6C40F0 Offset: 0x6C28F0 VA: 0x1806C40F0
	private void OnTriggerEnter2D(Collider2D other) { }
	// RVA: 0x6C4170 Offset: 0x6C2970 VA: 0x1806C4170
	private void OnTriggerExit2D(Collider2D other) { }
	// RVA: 0x6C41F0 Offset: 0x6C29F0 VA: 0x1806C41F0
	private void OnCollisionEnter2D(Collision2D collision) { }
	// RVA: 0x6C4240 Offset: 0x6C2A40 VA: 0x1806C4240
	private void OnCollisionStay2D(Collision2D collision) { }
	// RVA: 0x6C4290 Offset: 0x6C2A90 VA: 0x1806C4290 Slot: 5
	public override void IgnoreLayerCollision(int layerA, int layerB, bool ignore) { }
	// RVA: 0x6C4480 Offset: 0x6C2C80 VA: 0x1806C4480 Slot: 6
	protected override void AddContacts(int bufferHits, bool firstContact) { }
	// RVA: 0x6C4740 Offset: 0x6C2F40 VA: 0x1806C4740 Slot: 7
	public override int Raycast(out HitInfo hitInfo, Vector3 origin, Vector3 castDisplacement, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: 0x6C4A50 Offset: 0x6C3250 VA: 0x1806C4A50 Slot: 9
	public override int CapsuleCast(out HitInfo hitInfo, Vector3 bottom, Vector3 top, float radius, Vector3 castDisplacement, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: 0x6C5040 Offset: 0x6C3840 VA: 0x1806C5040 Slot: 8
	public override int SphereCast(out HitInfo hitInfo, Vector3 center, float radius, Vector3 castDisplacement, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: 0x6C5370 Offset: 0x6C3B70 VA: 0x1806C5370 Slot: 10
	public override bool OverlapSphere(Vector3 center, float radius, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: 0x6C55F0 Offset: 0x6C3DF0 VA: 0x1806C55F0 Slot: 11
	public override bool OverlapCapsule(Vector3 bottom, Vector3 top, float radius, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: 0x6C5A50 Offset: 0x6C4250 VA: 0x1806C5A50
	private void GetHitInfo(ref HitInfo hitInfo, RaycastHit2D raycastHit, Vector3 castDirection) { }
	// RVA: 0x6C5BC0 Offset: 0x6C43C0 VA: 0x1806C5BC0
	private void GetClosestHit(out HitInfo hitInfo, Vector3 castDisplacement, LayerMask layerMask) { }
	// RVA: 0x6C5E50 Offset: 0x6C4650 VA: 0x1806C5E50
	public void .ctor() { }
}

// Namespace: Lightbug.Utilities
public sealed class PhysicsComponent3D : PhysicsComponent // TypeDefIndex: 3154
{
	// Fields
	private RaycastHit[] raycastHits; // 0x48
	private Collider[] overlappedColliders; // 0x50
	private ContactPoint[] contactsBuffer; // 0x58

	// Methods
	// RVA: 0x6C40F0 Offset: 0x6C28F0 VA: 0x1806C40F0
	private void OnTriggerEnter(Collider other) { }
	// RVA: 0x6C4170 Offset: 0x6C2970 VA: 0x1806C4170
	private void OnTriggerExit(Collider other) { }
	// RVA: 0x6C5F00 Offset: 0x6C4700 VA: 0x1806C5F00
	private void OnCollisionEnter(Collision collision) { }
	// RVA: 0x6C5F50 Offset: 0x6C4750 VA: 0x1806C5F50
	private void OnCollisionStay(Collision collision) { }
	// RVA: 0x6C5FA0 Offset: 0x6C47A0 VA: 0x1806C5FA0 Slot: 5
	public override void IgnoreLayerCollision(int layerA, int layerB, bool ignore) { }
	// RVA: 0x6C6010 Offset: 0x6C4810 VA: 0x1806C6010 Slot: 6
	protected override void AddContacts(int bufferHits, bool firstContact) { }
	// RVA: 0x6C6350 Offset: 0x6C4B50 VA: 0x1806C6350 Slot: 7
	public override int Raycast(out HitInfo hitInfo, Vector3 origin, Vector3 castDisplacement, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: 0x6C64D0 Offset: 0x6C4CD0 VA: 0x1806C64D0 Slot: 9
	public override int CapsuleCast(out HitInfo hitInfo, Vector3 bottom, Vector3 top, float radius, Vector3 castDisplacement, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: 0x6C66B0 Offset: 0x6C4EB0 VA: 0x1806C66B0 Slot: 8
	public override int SphereCast(out HitInfo hitInfo, Vector3 center, float radius, Vector3 castDisplacement, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: 0x6C67C0 Offset: 0x6C4FC0 VA: 0x1806C67C0 Slot: 10
	public override bool OverlapSphere(Vector3 center, float radius, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: 0x6C6810 Offset: 0x6C5010 VA: 0x1806C6810 Slot: 11
	public override bool OverlapCapsule(Vector3 bottom, Vector3 top, float radius, LayerMask layerMask, bool ignoreTrigger = True) { }
	// RVA: 0x6C6960 Offset: 0x6C5160 VA: 0x1806C6960
	private void GetHitInfo(ref HitInfo hitInfo, RaycastHit raycastHit, Vector3 castDirection) { }
	// RVA: 0x6C6A80 Offset: 0x6C5280 VA: 0x1806C6A80
	private void GetClosestHit(out HitInfo hitInfo, Vector3 castDisplacement, LayerMask layerMask) { }
	// RVA: 0x6C6CC0 Offset: 0x6C54C0 VA: 0x1806C6CC0
	public void .ctor() { }
}

// Namespace: Lightbug.Utilities
public static class PhysicsUtilities // TypeDefIndex: 3155
{
	// Methods
	// RVA: 0x6C6D70 Offset: 0x6C5570 VA: 0x1806C6D70
	public static bool SphereCast(Vector3 center, float radius, Vector3 castDisplacement, LayerMask layerMask, out RaycastHit raycastHit, bool ignoreTrigger = True) { }
	// RVA: 0x6C6EB0 Offset: 0x6C56B0 VA: 0x1806C6EB0
	public static bool SphereCast(Vector3 center, float radius, Vector3 castDisplacement, LayerMask layerMask, out RaycastHit2D raycastHit, bool ignoreTrigger = True) { }
}

// Namespace: Lightbug.Utilities
public abstract class RigidbodyComponent : MonoBehaviour // TypeDefIndex: 3156
{
	// Properties
	public abstract float Mass { get; set; }
	public abstract bool IsKinematic { get; set; }
	public abstract bool UseGravity { get; set; }
	public abstract bool UseInterpolation { get; set; }
	public abstract bool ContinuousCollisionDetection { get; set; }
	public abstract RigidbodyConstraints Constraints { get; set; }
	public Vector3 Up { get; }
	public Vector3 Forward { get; }
	public Vector3 Right { get; }
	public abstract Vector3 Position { get; set; }
	public abstract Quaternion Rotation { get; set; }
	public abstract Vector3 Velocity { get; set; }

	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	public abstract float get_Mass() { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract void set_Mass(float value) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool get_IsKinematic() { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract void set_IsKinematic(bool value) { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract bool get_UseGravity() { }
	// RVA: -1 Offset: -1 Slot: 9
	public abstract void set_UseGravity(bool value) { }
	// RVA: -1 Offset: -1 Slot: 10
	public abstract bool get_UseInterpolation() { }
	// RVA: -1 Offset: -1 Slot: 11
	public abstract void set_UseInterpolation(bool value) { }
	// RVA: -1 Offset: -1 Slot: 12
	public abstract bool get_ContinuousCollisionDetection() { }
	// RVA: -1 Offset: -1 Slot: 13
	public abstract void set_ContinuousCollisionDetection(bool value) { }
	// RVA: -1 Offset: -1 Slot: 14
	public abstract RigidbodyConstraints get_Constraints() { }
	// RVA: -1 Offset: -1 Slot: 15
	public abstract void set_Constraints(RigidbodyConstraints value) { }
	// RVA: 0x6CE3A0 Offset: 0x6CCBA0 VA: 0x1806CE3A0
	public Vector3 get_Up() { }
	// RVA: 0x6CE4E0 Offset: 0x6CCCE0 VA: 0x1806CE4E0
	public Vector3 get_Forward() { }
	// RVA: 0x6CE620 Offset: 0x6CCE20 VA: 0x1806CE620
	public Vector3 get_Right() { }
	// RVA: -1 Offset: -1 Slot: 16
	public abstract Vector3 get_Position() { }
	// RVA: -1 Offset: -1 Slot: 17
	public abstract void set_Position(Vector3 value) { }
	// RVA: -1 Offset: -1 Slot: 18
	public abstract Quaternion get_Rotation() { }
	// RVA: -1 Offset: -1 Slot: 19
	public abstract void set_Rotation(Quaternion value) { }
	// RVA: -1 Offset: -1 Slot: 20
	public abstract Vector3 get_Velocity() { }
	// RVA: -1 Offset: -1 Slot: 21
	public abstract void set_Velocity(Vector3 value) { }
	// RVA: -1 Offset: -1 Slot: 22
	public abstract void SetPositionAndRotation(Vector3 position, Quaternion rotation) { }
	// RVA: -1 Offset: -1 Slot: 23
	public abstract void Interpolate(Vector3 position) { }
	// RVA: -1 Offset: -1 Slot: 24
	public abstract void Interpolate(Vector3 position, Quaternion rotation) { }
	// RVA: -1 Offset: -1 Slot: 25
	public abstract Vector3 GetPointVelocity(Vector3 point) { }
	// RVA: -1 Offset: -1 Slot: 26
	public abstract void AddForceToRigidbody(Vector3 force, ForceMode forceMode = 0) { }
	// RVA: 0x6C3C90 Offset: 0x6C2490 VA: 0x1806C3C90 Slot: 27
	protected virtual void Awake() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: Lightbug.Utilities
public sealed class RigidbodyComponent2D : RigidbodyComponent // TypeDefIndex: 3157
{
	// Fields
	private Rigidbody2D rigidbody; // 0x18

	// Properties
	public override float Mass { get; set; }
	public override bool IsKinematic { get; set; }
	public override bool UseGravity { get; set; }
	public override bool UseInterpolation { get; set; }
	public override bool ContinuousCollisionDetection { get; set; }
	public override RigidbodyConstraints Constraints { get; set; }
	public override Vector3 Position { get; set; }
	public override Quaternion Rotation { get; set; }
	public override Vector3 Velocity { get; set; }

	// Methods
	// RVA: 0x6CE760 Offset: 0x6CCF60 VA: 0x1806CE760 Slot: 27
	protected override void Awake() { }
	// RVA: 0x6CE8D0 Offset: 0x6CD0D0 VA: 0x1806CE8D0 Slot: 4
	public override float get_Mass() { }
	// RVA: 0x6CE930 Offset: 0x6CD130 VA: 0x1806CE930 Slot: 5
	public override void set_Mass(float value) { }
	// RVA: 0x6CE9A0 Offset: 0x6CD1A0 VA: 0x1806CE9A0 Slot: 6
	public override bool get_IsKinematic() { }
	// RVA: 0x6CEA10 Offset: 0x6CD210 VA: 0x1806CEA10 Slot: 7
	public override void set_IsKinematic(bool value) { }
	// RVA: 0x6CEA80 Offset: 0x6CD280 VA: 0x1806CEA80 Slot: 8
	public override bool get_UseGravity() { }
	// RVA: 0x6CEAF0 Offset: 0x6CD2F0 VA: 0x1806CEAF0 Slot: 9
	public override void set_UseGravity(bool value) { }
	// RVA: 0x6CEB70 Offset: 0x6CD370 VA: 0x1806CEB70 Slot: 10
	public override bool get_UseInterpolation() { }
	// RVA: 0x6CEBE0 Offset: 0x6CD3E0 VA: 0x1806CEBE0 Slot: 11
	public override void set_UseInterpolation(bool value) { }
	// RVA: 0x6CEC50 Offset: 0x6CD450 VA: 0x1806CEC50 Slot: 12
	public override bool get_ContinuousCollisionDetection() { }
	// RVA: 0x6CECC0 Offset: 0x6CD4C0 VA: 0x1806CECC0 Slot: 13
	public override void set_ContinuousCollisionDetection(bool value) { }
	// RVA: 0x6CED30 Offset: 0x6CD530 VA: 0x1806CED30 Slot: 14
	public override RigidbodyConstraints get_Constraints() { }
	// RVA: 0x6CEE10 Offset: 0x6CD610 VA: 0x1806CEE10 Slot: 15
	public override void set_Constraints(RigidbodyConstraints value) { }
	// RVA: 0x6CEEF0 Offset: 0x6CD6F0 VA: 0x1806CEEF0 Slot: 16
	public override Vector3 get_Position() { }
	// RVA: 0x6CF010 Offset: 0x6CD810 VA: 0x1806CF010 Slot: 17
	public override void set_Position(Vector3 value) { }
	// RVA: 0x6CF120 Offset: 0x6CD920 VA: 0x1806CF120 Slot: 18
	public override Quaternion get_Rotation() { }
	// RVA: 0x6CF240 Offset: 0x6CDA40 VA: 0x1806CF240 Slot: 19
	public override void set_Rotation(Quaternion value) { }
	// RVA: 0x6CF2C0 Offset: 0x6CDAC0 VA: 0x1806CF2C0 Slot: 20
	public override Vector3 get_Velocity() { }
	// RVA: 0x6CF3E0 Offset: 0x6CDBE0 VA: 0x1806CF3E0 Slot: 21
	public override void set_Velocity(Vector3 value) { }
	// RVA: 0x6CF4F0 Offset: 0x6CDCF0 VA: 0x1806CF4F0 Slot: 23
	public override void Interpolate(Vector3 position) { }
	// RVA: 0x6CF600 Offset: 0x6CDE00 VA: 0x1806CF600 Slot: 24
	public override void Interpolate(Vector3 position, Quaternion rotation) { }
	// RVA: 0x6CF790 Offset: 0x6CDF90 VA: 0x1806CF790 Slot: 22
	public override void SetPositionAndRotation(Vector3 position, Quaternion rotation) { }
	// RVA: 0x6CF920 Offset: 0x6CE120 VA: 0x1806CF920 Slot: 25
	public override Vector3 GetPointVelocity(Vector3 point) { }
	// RVA: 0x6CFA30 Offset: 0x6CE230 VA: 0x1806CFA30 Slot: 26
	public override void AddForceToRigidbody(Vector3 force, ForceMode forceMode = 0) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: Lightbug.Utilities
public sealed class RigidbodyComponent3D : RigidbodyComponent // TypeDefIndex: 3158
{
	// Fields
	private Rigidbody rigidbody; // 0x18

	// Properties
	public override float Mass { get; set; }
	public override bool IsKinematic { get; set; }
	public override bool UseGravity { get; set; }
	public override bool UseInterpolation { get; set; }
	public override bool ContinuousCollisionDetection { get; set; }
	public override RigidbodyConstraints Constraints { get; set; }
	public override Vector3 Position { get; set; }
	public override Quaternion Rotation { get; set; }
	public override Vector3 Velocity { get; set; }

	// Methods
	// RVA: 0x6CFB60 Offset: 0x6CE360 VA: 0x1806CFB60 Slot: 27
	protected override void Awake() { }
	// RVA: 0x6CFCD0 Offset: 0x6CE4D0 VA: 0x1806CFCD0 Slot: 4
	public override float get_Mass() { }
	// RVA: 0x6CFD30 Offset: 0x6CE530 VA: 0x1806CFD30 Slot: 5
	public override void set_Mass(float value) { }
	// RVA: 0x6CFDA0 Offset: 0x6CE5A0 VA: 0x1806CFDA0 Slot: 6
	public override bool get_IsKinematic() { }
	// RVA: 0x6CFE00 Offset: 0x6CE600 VA: 0x1806CFE00 Slot: 7
	public override void set_IsKinematic(bool value) { }
	// RVA: 0x6CFE70 Offset: 0x6CE670 VA: 0x1806CFE70 Slot: 8
	public override bool get_UseGravity() { }
	// RVA: 0x6CFED0 Offset: 0x6CE6D0 VA: 0x1806CFED0 Slot: 9
	public override void set_UseGravity(bool value) { }
	// RVA: 0x6CFF40 Offset: 0x6CE740 VA: 0x1806CFF40 Slot: 10
	public override bool get_UseInterpolation() { }
	// RVA: 0x6CFFB0 Offset: 0x6CE7B0 VA: 0x1806CFFB0 Slot: 11
	public override void set_UseInterpolation(bool value) { }
	// RVA: 0x6D0020 Offset: 0x6CE820 VA: 0x1806D0020 Slot: 12
	public override bool get_ContinuousCollisionDetection() { }
	// RVA: 0x6D0090 Offset: 0x6CE890 VA: 0x1806D0090 Slot: 13
	public override void set_ContinuousCollisionDetection(bool value) { }
	// RVA: 0x6D0100 Offset: 0x6CE900 VA: 0x1806D0100 Slot: 14
	public override RigidbodyConstraints get_Constraints() { }
	// RVA: 0x6D0160 Offset: 0x6CE960 VA: 0x1806D0160 Slot: 15
	public override void set_Constraints(RigidbodyConstraints value) { }
	// RVA: 0x6D01D0 Offset: 0x6CE9D0 VA: 0x1806D01D0 Slot: 16
	public override Vector3 get_Position() { }
	// RVA: 0x6D0260 Offset: 0x6CEA60 VA: 0x1806D0260 Slot: 17
	public override void set_Position(Vector3 value) { }
	// RVA: 0x6D02E0 Offset: 0x6CEAE0 VA: 0x1806D02E0 Slot: 18
	public override Quaternion get_Rotation() { }
	// RVA: 0x6D0360 Offset: 0x6CEB60 VA: 0x1806D0360 Slot: 19
	public override void set_Rotation(Quaternion value) { }
	// RVA: 0x6D03D0 Offset: 0x6CEBD0 VA: 0x1806D03D0 Slot: 20
	public override Vector3 get_Velocity() { }
	// RVA: 0x6D0460 Offset: 0x6CEC60 VA: 0x1806D0460 Slot: 21
	public override void set_Velocity(Vector3 value) { }
	// RVA: 0x6D04E0 Offset: 0x6CECE0 VA: 0x1806D04E0 Slot: 23
	public override void Interpolate(Vector3 position) { }
	// RVA: 0x6D0560 Offset: 0x6CED60 VA: 0x1806D0560 Slot: 24
	public override void Interpolate(Vector3 position, Quaternion rotation) { }
	// RVA: 0x6D0650 Offset: 0x6CEE50 VA: 0x1806D0650 Slot: 22
	public override void SetPositionAndRotation(Vector3 position, Quaternion rotation) { }
	// RVA: 0x6D0740 Offset: 0x6CEF40 VA: 0x1806D0740 Slot: 25
	public override Vector3 GetPointVelocity(Vector3 point) { }
	// RVA: 0x6D07F0 Offset: 0x6CEFF0 VA: 0x1806D07F0 Slot: 26
	public override void AddForceToRigidbody(Vector3 force, ForceMode forceMode = 0) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: Lightbug.Utilities
public static class CustomUtilities // TypeDefIndex: 3159
{
	// Methods
	// RVA: 0x691610 Offset: 0x68FE10 VA: 0x180691610
	public static Vector3 ProjectVectorOnPlane(Vector3 vector, Vector3 planeNormal, Vector3 rotationAxis, bool mantainMagnitud = True) { }
	// RVA: 0x6918E0 Offset: 0x6900E0 VA: 0x1806918E0
	public static Vector3 RemoveComponent(Vector3 vector, Vector3 component) { }
	// RVA: 0x691A20 Offset: 0x690220 VA: 0x180691A20
	public static Vector3 DeflectVector(Vector3 vector, Vector3 groundNormal, Vector3 planeNormal, bool mantainMagnitude = False) { }
	// RVA: 0x691CA0 Offset: 0x6904A0 VA: 0x180691CA0
	public static bool isBetween(float target, float a, float b, bool inclusive = False) { }
	// RVA: 0x52FC90 Offset: 0x52E490 VA: 0x18052FC90
	public static T GetOrAddComponent(GameObject targetGameObject) { }
	// RVA: 0x691D00 Offset: 0x690500 VA: 0x180691D00
	public static bool BelongsToLayerMask(int layer, int layerMask) { }
	// RVA: 0x691D10 Offset: 0x690510 VA: 0x180691D10
	public static void DrawArrowGizmo(Vector3 start, Vector3 end, Color color, float radius = 0.25) { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public enum CameraPositionMode // TypeDefIndex: 3160
{
	// Fields
	public int value__; // 0x0
	public const CameraPositionMode Bounds = 0; // 0x0
	public const CameraPositionMode Point = 1; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class Camera2D : KinematicCamera // TypeDefIndex: 3161
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Transform target; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector2 cameraAABBSize; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector2 targetAABBSize; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CameraPositionMode mode; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 offset; // 0x44
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float smoothTargetTime; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool followRotation; // 0x54
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float slerpFactor; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float lookAheadSpeed; // 0x5C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float xLookAheadAmount; // 0x60
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float yLookAheadAmount; // 0x64
	private float xCurrentLookAheadAmount; // 0x68
	private float yCurrentLookAheadAmount; // 0x6C
	private Vector3 targetCameraPosition; // 0x70
	private Vector3 smoothDampVelocity; // 0x7C
	private Bounds cameraAABB; // 0x88
	private Bounds targetBounds; // 0xA0
	private CharacterActor characterActor; // 0xB8

	// Methods
	// RVA: 0x6FBB10 Offset: 0x6FA310 VA: 0x1806FBB10 Slot: 8
	protected override void Start() { }
	// RVA: 0x6FC060 Offset: 0x6FA860 VA: 0x1806FC060
	private void OnDrawGizmos() { }
	// RVA: 0x6FC350 Offset: 0x6FAB50 VA: 0x1806FC350 Slot: 5
	public override void UpdateKinematicActor(float dt) { }
	// RVA: 0x6FC4B0 Offset: 0x6FACB0 VA: 0x1806FC4B0
	private void UpdateTargetAABB() { }
	// RVA: 0x6FC540 Offset: 0x6FAD40 VA: 0x1806FC540
	private void UpdateCameraAABB(float dt) { }
	// RVA: 0x6FCB60 Offset: 0x6FB360 VA: 0x1806FCB60
	private void UpdatePosition(float dt) { }
	// RVA: 0x6FCE00 Offset: 0x6FB600 VA: 0x1806FCE00
	private void UpdateRotation(float dt) { }
	// RVA: 0x6FD1A0 Offset: 0x6FB9A0 VA: 0x1806FD1A0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[RequireComponent] // RVA: 0x103DC0 Offset: 0x1031C0 VA: 0x180103DC0
public class Camera3D : KinematicCamera // TypeDefIndex: 3162
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CharacterActor characterActor; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 offsetFromHead; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool interpolatePosition; // 0x3C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float positionLerpUpSpeed; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float positionLerpPlanarSpeed; // 0x44
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool updatePitch; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float initialPitch; // 0x4C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float pitchSpeed; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool updateYaw; // 0x54
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float yawSpeed; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool updateZoom; // 0x5C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float distanceToTarget; // 0x60
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float zoomInOutSpeed; // 0x64
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float zoomInOutLerpSpeed; // 0x68
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float minZoom; // 0x6C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float maxZoom; // 0x70
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool collisionDetection; // 0x74
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float detectionRadius; // 0x78
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private LayerMask layerMask; // 0x7C
	private CharacterBrain characterBrain; // 0x80
	private float pitch; // 0x88
	private float currentDistanceToTarget; // 0x8C
	private float smoothedDistanceToTarget; // 0x90
	private OrthonormalReference orthonormalReference; // 0x94
	private float deltaYaw; // 0xB8
	private float deltaPitch; // 0xBC
	private float deltaZoom; // 0xC0
	private Vector3 previousTargetPosition; // 0xC4
	private Vector3 characterPosition; // 0xD0

	// Properties
	public OrthonormalReference OrthonormalReference { get; }

	// Methods
	// RVA: 0x6FD220 Offset: 0x6FBA20 VA: 0x1806FD220
	public OrthonormalReference get_OrthonormalReference() { }
	// RVA: 0x6FD250 Offset: 0x6FBA50 VA: 0x1806FD250 Slot: 8
	protected override void Start() { }
	// RVA: 0x6FD880 Offset: 0x6FC080 VA: 0x1806FD880
	private void Update() { }
	// RVA: 0x6FD890 Offset: 0x6FC090 VA: 0x1806FD890
	private void GetInputs() { }
	// RVA: 0x6FD910 Offset: 0x6FC110 VA: 0x1806FD910 Slot: 5
	public override void UpdateKinematicActor(float dt) { }
	// RVA: 0x6FE5A0 Offset: 0x6FCDA0 VA: 0x1806FE5A0
	private void GetTargetPosition(ref Vector3 targetPosition, float dt) { }
	// RVA: 0x6FEA00 Offset: 0x6FD200 VA: 0x1806FEA00
	private void DetectCollisions(ref Vector3 displacement, Vector3 lookAtPosition) { }
	// RVA: 0x6FEC00 Offset: 0x6FD400 VA: 0x1806FEC00
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public enum SequenceType // TypeDefIndex: 3163
{
	// Fields
	public int value__; // 0x0
	public const SequenceType Duration = 0; // 0x0
	public const SequenceType OnWallHit = 1; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class CharacterAIAction // TypeDefIndex: 3164
{
	// Fields
	public SequenceType sequenceType; // 0x10
	public float duration; // 0x14
	public CharacterActionsInfo action; // 0x18

	// Methods
	// RVA: 0x6FF6E0 Offset: 0x6FDEE0 VA: 0x1806FF6E0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class CharacterAISequenceBehaviour : ScriptableObject // TypeDefIndex: 3165
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<CharacterAIAction> actionSequence; // 0x18

	// Properties
	public List<CharacterAIAction> ActionSequence { get; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public List<CharacterAIAction> get_ActionSequence() { }
	// RVA: 0x6FF6F0 Offset: 0x6FDEF0 VA: 0x1806FF6F0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public struct CharacterActionsInfo // TypeDefIndex: 3166
{
	// Fields
	public AxesCompositeAction inputAxes; // 0x0
	public ButtonAction run; // 0x8
	public ButtonAction jump; // 0xB
	public ButtonAction shrink; // 0xE
	public ButtonAction dash; // 0x11
	public ButtonAction jetPack; // 0x14
	public ButtonAction interact; // 0x17
	public AxesCompositeAction cameraAxes; // 0x1C
	public AxisAction zoomAxis; // 0x24

	// Methods
	// RVA: 0x105460 Offset: 0x104860 VA: 0x180105460
	public void Reset() { }
	// RVA: 0x1054A0 Offset: 0x1048A0 VA: 0x1801054A0
	public void InitializeActions() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public struct ButtonAction // TypeDefIndex: 3167
{
	// Fields
	public bool isHeldDown; // 0x0
	public bool isPressed; // 0x1
	public bool isReleased; // 0x2

	// Methods
	// RVA: 0x105210 Offset: 0x104610 VA: 0x180105210
	public void Reset() { }
	// RVA: 0x105220 Offset: 0x104620 VA: 0x180105220
	public void Update(bool getState, bool getDownState, bool getUpState) { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public struct AxisAction // TypeDefIndex: 3168
{
	// Fields
	public float axisValue; // 0x0

	// Methods
	// RVA: 0x7930 Offset: 0x6D30 VA: 0x180007930
	public void Reset() { }
	// RVA: 0xE990 Offset: 0xDD90 VA: 0x18000E990
	public void Update(float getAxisState) { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public struct AxesCompositeAction // TypeDefIndex: 3169
{
	// Fields
	public Vector2 axesValue; // 0x0

	// Properties
	public bool AxesDetected { get; }

	// Methods
	// RVA: 0x105070 Offset: 0x104470 VA: 0x180105070
	public void Reset() { }
	// RVA: 0x105080 Offset: 0x104480 VA: 0x180105080
	public void Update(float getHorizontalAxisState, float getVerticalAxisState) { }
	// RVA: 0x105090 Offset: 0x104490 VA: 0x180105090
	public bool get_AxesDetected() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public enum AIBehaviourType // TypeDefIndex: 3170
{
	// Fields
	public int value__; // 0x0
	public const AIBehaviourType Sequence = 0; // 0x0
	public const AIBehaviourType FollowTarget = 1; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public enum HumanInputType // TypeDefIndex: 3171
{
	// Fields
	public int value__; // 0x0
	public const HumanInputType UnityInputManager = 0; // 0x0
	public const HumanInputType UI_Mobile = 1; // 0x0
	public const HumanInputType Custom = 2; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[RequireComponent] // RVA: 0x103E40 Offset: 0x103240 VA: 0x180103E40
public class CharacterBrain : MonoBehaviour // TypeDefIndex: 3172
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	public bool isAI; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private InputHandler inputHandler; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private HumanInputType humanInputType; // 0x28
	public CharacterInputData inputData; // 0x30
	public AIBehaviourType behaviourType; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool useRawAxes; // 0x3C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CharacterAISequenceBehaviour sequenceBehaviour; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Transform followTarget; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float reachDistance; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float refreshTime; // 0x54
	private CharacterActionsInfo characterActions; // 0x58
	private int currentActionIndex; // 0x80
	private float waitTime; // 0x84
	private float time; // 0x88
	private bool dirty; // 0x8C
	private CharacterActor characterActor; // 0x90
	private NavMeshPath navMeshPath; // 0x98
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool yAxisToXAxis2D; // 0xA0

	// Properties
	public bool IsAI { get; set; }
	public CharacterActionsInfo CharacterActions { get; }

	// Methods
	// RVA: 0x28C960 Offset: 0x28B160 VA: 0x18028C960
	public bool get_IsAI() { }
	// RVA: 0x2E9780 Offset: 0x2E7F80 VA: 0x1802E9780
	public void set_IsAI(bool value) { }
	// RVA: 0x70FAC0 Offset: 0x70E2C0 VA: 0x18070FAC0
	public CharacterActionsInfo get_CharacterActions() { }
	// RVA: 0x70FAE0 Offset: 0x70E2E0 VA: 0x18070FAE0 Slot: 4
	protected virtual void Awake() { }
	// RVA: 0x70FD20 Offset: 0x70E520 VA: 0x18070FD20
	private void OnEnable() { }
	// RVA: 0x70FED0 Offset: 0x70E6D0 VA: 0x18070FED0
	private void OnDisable() { }
	// RVA: 0x7100B0 Offset: 0x70E8B0 VA: 0x1807100B0
	private void Start() { }
	// RVA: 0x7100C0 Offset: 0x70E8C0 VA: 0x1807100C0
	public void SetAction(CharacterActionsInfo characterAction) { }
	// RVA: 0x7100E0 Offset: 0x70E8E0 VA: 0x1807100E0
	public void SetSequence(CharacterAISequenceBehaviour sequenceBehaviour, bool forceUpdate = True) { }
	// RVA: 0x7101C0 Offset: 0x70E9C0 VA: 0x1807101C0
	public void SetFollowTarget(Transform followTarget, bool forceUpdate = True) { }
	// RVA: 0x7102A0 Offset: 0x70EAA0 VA: 0x1807102A0
	public void SetBrainType(bool AI) { }
	// RVA: 0x7103D0 Offset: 0x70EBD0 VA: 0x1807103D0
	public void SetAIBehaviour(AIBehaviourType type) { }
	// RVA: 0x710670 Offset: 0x70EE70 VA: 0x180710670
	private void Update() { }
	// RVA: 0x710830 Offset: 0x70F030 VA: 0x180710830
	private void OnSimulationEnd(float dt) { }
	// RVA: 0x710840 Offset: 0x70F040 VA: 0x180710840
	public void UpdateBrain(float dt = 0) { }
	// RVA: 0x7109A0 Offset: 0x70F1A0 VA: 0x1807109A0
	private void UpdateHumanBrain(float dt) { }
	// RVA: 0x711020 Offset: 0x70F820 VA: 0x180711020
	private void OnWallHit(CollisionInfo collisionInfo) { }
	// RVA: 0x7110E0 Offset: 0x70F8E0 VA: 0x1807110E0
	private void UpdateAIBrain(float dt) { }
	// RVA: 0x711230 Offset: 0x70FA30 VA: 0x180711230
	private void SelectNextSequenceElement() { }
	// RVA: 0x7113E0 Offset: 0x70FBE0 VA: 0x1807113E0
	private void UpdateFollowTargetBehaviour() { }
	// RVA: 0x711A60 Offset: 0x710260 VA: 0x180711A60
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class CharacterInputData : ScriptableObject // TypeDefIndex: 3173
{
	// Fields
	public string horizontalAxis; // 0x18
	public string verticalAxis; // 0x20
	public string cameraHorizontalAxis; // 0x28
	public string cameraVerticalAxis; // 0x30
	public string cameraZoomAxis; // 0x38
	public string run; // 0x40
	public string jump; // 0x48
	public string shrink; // 0x50
	public string dash; // 0x58
	public string jetPack; // 0x60
	public string interact; // 0x68

	// Methods
	// RVA: 0x713ED0 Offset: 0x7126D0 VA: 0x180713ED0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[RequireComponent] // RVA: 0x103EC0 Offset: 0x1032C0 VA: 0x180103EC0
public abstract class CharacterState : MonoBehaviour // TypeDefIndex: 3174
{
	// Fields
	private CharacterActor characterActor; // 0x18
	private CharacterBrain characterBrain; // 0x20
	private CharacterStateController characterStateController; // 0x28

	// Properties
	public CharacterActor CharacterActor { get; }
	public CharacterBrain CharacterBrain { get; }
	public CharacterActionsInfo CharacterActions { get; }
	public CharacterStateController CharacterStateController { get; }
	public abstract string Name { get; }

	// Methods
	// RVA: 0x714E90 Offset: 0x713690 VA: 0x180714E90
	public CharacterActor get_CharacterActor() { }
	// RVA: 0x714F50 Offset: 0x713750 VA: 0x180714F50
	public CharacterBrain get_CharacterBrain() { }
	// RVA: 0x715010 Offset: 0x713810 VA: 0x180715010
	public CharacterActionsInfo get_CharacterActions() { }
	// RVA: 0x715100 Offset: 0x713900 VA: 0x180715100
	public CharacterStateController get_CharacterStateController() { }
	// RVA: -1 Offset: -1 Slot: 4
	public abstract string get_Name() { }
	// RVA: 0x7151C0 Offset: 0x7139C0 VA: 0x1807151C0 Slot: 5
	protected virtual void Awake() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 6
	public virtual void EnterBehaviour(float dt) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 7
	public virtual void PreUpdateBehaviour(float dt) { }
	// RVA: -1 Offset: -1 Slot: 8
	public abstract void UpdateBehaviour(float dt) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 9
	public virtual void PostUpdateBehaviour(float dt) { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 10
	public virtual void ExitBehaviour(float dt) { }
	// RVA: 0x175F60 Offset: 0x174760 VA: 0x180175F60 Slot: 11
	public virtual CharacterState CheckExitTransition() { }
	// RVA: 0x1FDB20 Offset: 0x1FC320 VA: 0x1801FDB20 Slot: 12
	public virtual bool CheckEnterTransition(CharacterState fromState) { }
	// RVA: 0x715260 Offset: 0x713A60 VA: 0x180715260 Slot: 13
	public virtual string GetInfo() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[RequireComponent] // RVA: 0x103F40 Offset: 0x103340 VA: 0x180103F40
public sealed class CharacterStateController : CharacterActorBehaviour // TypeDefIndex: 3175
{
	// Fields
	private const float MaxControlValue = 100; // 0x0
	private const string UntaggedTag = "Untagged"; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CharacterState currentState; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private EnvironmentParameters environmentParameters; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private MovementReferenceParameters movementReferenceParameters; // 0x30
	private CharacterBrain characterBrain; // 0x38
	private Dictionary<string, CharacterState> states; // 0x40
	private CharacterState previousState; // 0x48
	private Action<CharacterState, CharacterState> OnStateChange; // 0x50
	private Action<Volume> OnVolumeEnter; // 0x58
	private Action<Volume> OnVolumeExit; // 0x60
	private Action<Surface> OnSurfaceEnter; // 0x68
	private Action<Surface> OnSurfaceExit; // 0x70
	private OrthonormalReference movementReference; // 0x78
	private Vector3 inputMovementReference; // 0x9C
	private Volume currentVolume; // 0xA8
	private Surface currentSurface; // 0xB0

	// Properties
	public EnvironmentParameters EnvironmentParameters { get; }
	public CharacterBrain CharacterBrain { get; }
	public CharacterState CurrentState { get; }
	public CharacterState PreviousState { get; }
	public OrthonormalReference MovementOrthonormalReference { get; }
	public Vector3 InputMovementReference { get; }
	public Surface CurrentSurface { get; }
	public float CurrentSurfaceSpeedMultiplier { get; }
	public float CurrentSurfaceControl { get; }
	public float RemainingSurfaceControl { get; }
	public Volume CurrentVolume { get; }
	public float CurrentVolumeSpeedMultiplier { get; }
	public float CurrentVolumeControl { get; }
	public float RemainingVolumeControl { get; }
	public float CurrentGravityPositiveMultiplier { get; }
	public float CurrentGravityNegativeMultiplier { get; }

	// Methods
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public EnvironmentParameters get_EnvironmentParameters() { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0
	public CharacterBrain get_CharacterBrain() { }
	// RVA: 0x7152D0 Offset: 0x713AD0 VA: 0x1807152D0
	public void add_OnStateChange(Action<CharacterState, CharacterState> value) { }
	// RVA: 0x7153B0 Offset: 0x713BB0 VA: 0x1807153B0
	public void remove_OnStateChange(Action<CharacterState, CharacterState> value) { }
	// RVA: 0x715490 Offset: 0x713C90 VA: 0x180715490
	public void add_OnVolumeEnter(Action<Volume> value) { }
	// RVA: 0x715570 Offset: 0x713D70 VA: 0x180715570
	public void remove_OnVolumeEnter(Action<Volume> value) { }
	// RVA: 0x715650 Offset: 0x713E50 VA: 0x180715650
	public void add_OnVolumeExit(Action<Volume> value) { }
	// RVA: 0x715730 Offset: 0x713F30 VA: 0x180715730
	public void remove_OnVolumeExit(Action<Volume> value) { }
	// RVA: 0x715810 Offset: 0x714010 VA: 0x180715810
	public void add_OnSurfaceEnter(Action<Surface> value) { }
	// RVA: 0x7158F0 Offset: 0x7140F0 VA: 0x1807158F0
	public void remove_OnSurfaceEnter(Action<Surface> value) { }
	// RVA: 0x7159D0 Offset: 0x7141D0 VA: 0x1807159D0
	public void add_OnSurfaceExit(Action<Surface> value) { }
	// RVA: 0x715AB0 Offset: 0x7142B0 VA: 0x180715AB0
	public void remove_OnSurfaceExit(Action<Surface> value) { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public CharacterState get_CurrentState() { }
	// RVA: 0x16C1A0 Offset: 0x16A9A0 VA: 0x18016C1A0
	public CharacterState get_PreviousState() { }
	// RVA: 0x715B90 Offset: 0x714390 VA: 0x180715B90
	public CharacterState GetState(string stateName) { }
	// RVA: 0x715C70 Offset: 0x714470 VA: 0x180715C70 Slot: 4
	public override void Initialize(CharacterActor characterActor) { }
	// RVA: 0x715EA0 Offset: 0x7146A0 VA: 0x180715EA0
	private void GetStates() { }
	// RVA: 0x716020 Offset: 0x714820 VA: 0x180716020 Slot: 5
	public override void UpdateBehaviour(float dt) { }
	// RVA: 0x716260 Offset: 0x714A60 VA: 0x180716260
	private bool CheckForTransitions() { }
	// RVA: 0x716380 Offset: 0x714B80 VA: 0x180716380
	public OrthonormalReference get_MovementOrthonormalReference() { }
	// RVA: 0x7163A0 Offset: 0x714BA0 VA: 0x1807163A0
	private void UpdateMovementReference() { }
	// RVA: 0x716650 Offset: 0x714E50 VA: 0x180716650
	public Vector3 get_InputMovementReference() { }
	// RVA: 0x716670 Offset: 0x714E70 VA: 0x180716670
	private void GetInputMovementReference() { }
	// RVA: 0x232FF0 Offset: 0x2317F0 VA: 0x180232FF0
	public Surface get_CurrentSurface() { }
	// RVA: 0x7168D0 Offset: 0x7150D0 VA: 0x1807168D0
	public float get_CurrentSurfaceSpeedMultiplier() { }
	// RVA: 0x7168F0 Offset: 0x7150F0 VA: 0x1807168F0
	public float get_CurrentSurfaceControl() { }
	// RVA: 0x716920 Offset: 0x715120 VA: 0x180716920
	public float get_RemainingSurfaceControl() { }
	// RVA: 0x1A20F0 Offset: 0x1A08F0 VA: 0x1801A20F0
	public Volume get_CurrentVolume() { }
	// RVA: 0x716950 Offset: 0x715150 VA: 0x180716950
	public float get_CurrentVolumeSpeedMultiplier() { }
	// RVA: 0x716970 Offset: 0x715170 VA: 0x180716970
	public float get_CurrentVolumeControl() { }
	// RVA: 0x7169A0 Offset: 0x7151A0 VA: 0x1807169A0
	public float get_RemainingVolumeControl() { }
	// RVA: 0x7169D0 Offset: 0x7151D0 VA: 0x1807169D0
	public float get_CurrentGravityPositiveMultiplier() { }
	// RVA: 0x7169F0 Offset: 0x7151F0 VA: 0x1807169F0
	public float get_CurrentGravityNegativeMultiplier() { }
	// RVA: 0x716A10 Offset: 0x715210 VA: 0x180716A10
	private void GetSurfaceData() { }
	// RVA: 0x716D30 Offset: 0x715530 VA: 0x180716D30
	private void SetCurrentSurface(Surface surface) { }
	// RVA: 0x716DF0 Offset: 0x7155F0 VA: 0x180716DF0
	private void GetVolumeData() { }
	// RVA: 0x717270 Offset: 0x715A70 VA: 0x180717270
	private void SetCurrentVolume(Volume volume) { }
	// RVA: 0x717330 Offset: 0x715B30 VA: 0x180717330
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class EnvironmentParameters // TypeDefIndex: 3176
{
	// Fields
	public MaterialsProperties materials; // 0x10

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class MovementReferenceParameters // TypeDefIndex: 3177
{
	// Fields
	public MovementReferenceParameters.MovementReferenceMode movementReferenceMode; // 0x10
	public Transform externalForwardReference; // 0x18

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10
	public void .ctor() { }
}

// Namespace: 
public enum MovementReferenceParameters.MovementReferenceMode // TypeDefIndex: 3178
{
	// Fields
	public int value__; // 0x0
	public const MovementReferenceParameters.MovementReferenceMode World = 0; // 0x0
	public const MovementReferenceParameters.MovementReferenceMode External = 1; // 0x0
	public const MovementReferenceParameters.MovementReferenceMode Character = 2; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class CharacterAnimation : MonoBehaviour // TypeDefIndex: 3179
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CharacterAnimation.AnimatorPlayMode animatorPlayMode; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ServerManager serverManager; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string groundedName; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string notGroundedName; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string slideName; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string dashName; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string jetPackName; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string notGroundedBlendName; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string groundBlendName; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float notGroundedBlendSensitivity; // 0x60
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float groundBlendLerpFactor; // 0x64
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool ikFootPlacement; // 0x68
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float footRadius; // 0x6C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float ikExtraCastDistance; // 0x70
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string ikLeftFootWeightCurveName; // 0x78
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string ikRightFootWeightCurveName; // 0x80
	private int slideHash; // 0x88
	private int groundedHash; // 0x8C
	private int notGroundedHash; // 0x90
	private int dashHash; // 0x94
	private int jetPackHash; // 0x98
	private float speedBlendValue; // 0x9C
	private float verticalVelocityBlendValue; // 0xA0
	private int currentStateHash; // 0xA4
	private CharacterStateController characterStateController; // 0xA8
	private CharacterActor CharacterActor; // 0xB0
	private CharacterBrain characterBrain; // 0xB8
	private Animator animator; // 0xC0

	// Methods
	// RVA: 0x70DD90 Offset: 0x70C590 VA: 0x18070DD90 Slot: 4
	protected virtual void Awake() { }
	// RVA: 0x70E4D0 Offset: 0x70CCD0 VA: 0x18070E4D0
	private void FixedUpdate() { }
	// RVA: 0x70E910 Offset: 0x70D110 VA: 0x18070E910 Slot: 5
	protected virtual bool isCurrentlyOnState(string stateName) { }
	// RVA: 0x70EA00 Offset: 0x70D200 VA: 0x18070EA00 Slot: 6
	protected virtual void PlayAnimation(int stateHash) { }
	// RVA: 0x70EBC0 Offset: 0x70D3C0 VA: 0x18070EBC0 Slot: 7
	protected virtual void UpdateBlendTreeValues(string notGroundedBlendName, string groundBlendName, float notGroundedBlendValue, float groundBlendValue) { }
	// RVA: 0x70EC50 Offset: 0x70D450 VA: 0x18070EC50
	private void OnAnimatorIK(int layerIndex) { }
	// RVA: 0x70ED30 Offset: 0x70D530 VA: 0x18070ED30
	private void AlignFoot(AvatarIKGoal footAvatar, string ikVariableName) { }
	// RVA: 0x70F750 Offset: 0x70DF50 VA: 0x18070F750
	public void .ctor() { }
}

// Namespace: 
public enum CharacterAnimation.AnimatorPlayMode // TypeDefIndex: 3180
{
	// Fields
	public int value__; // 0x0
	public const CharacterAnimation.AnimatorPlayMode Trigger = 0; // 0x0
	public const CharacterAnimation.AnimatorPlayMode PlayState = 1; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class CharacterParticles : MonoBehaviour // TypeDefIndex: 3181
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject groundParticlesPrefab; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationCurve groundParticlesSpeed; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationCurve footstepParticleSpeed; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationCurve footstepParticleSize; // 0x30
	private ParticleSystem[] groundParticlesArray; // 0x38
	private ParticleSystemPooler particlesPooler; // 0x40
	private CharacterStateController characterStateController; // 0x48
	private CharacterActor CharacterActor; // 0x50

	// Methods
	// RVA: 0x713FC0 Offset: 0x7127C0 VA: 0x180713FC0
	private void Awake() { }
	// RVA: 0x714470 Offset: 0x712C70 VA: 0x180714470
	private void OnEnable() { }
	// RVA: 0x714520 Offset: 0x712D20 VA: 0x180714520
	private void OnDisable() { }
	// RVA: 0x7145D0 Offset: 0x712DD0 VA: 0x1807145D0
	private void OnGroundedStateEnter(Vector3 localVelocity) { }
	// RVA: 0x714880 Offset: 0x713080 VA: 0x180714880
	public void PlayFootstep() { }
	// RVA: 0x714C00 Offset: 0x713400 VA: 0x180714C00
	private void Update() { }
	// RVA: 0x714D70 Offset: 0x713570 VA: 0x180714D70
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class ParticleSystemPooler // TypeDefIndex: 3182
{
	// Fields
	private List<ParticleSystem> activeList; // 0x10
	private List<ParticleSystem> inactiveList; // 0x18

	// Methods
	// RVA: 0x6C1E30 Offset: 0x6C0630 VA: 0x1806C1E30
	public void .ctor(GameObject particlePrefab, Vector3 position, Quaternion rotation, int bufferLength) { }
	// RVA: 0x6C2030 Offset: 0x6C0830 VA: 0x1806C2030
	private ParticleSystem SelectParticle() { }
	// RVA: 0x6C2120 Offset: 0x6C0920 VA: 0x1806C2120
	public void Instantiate(Vector3 position, Quaternion rotation, Color color, float startSpeed) { }
	// RVA: 0x6C2540 Offset: 0x6C0D40 VA: 0x1806C2540
	public void Instantiate(Vector3 position, Quaternion rotation, Color color, float startSpeed, float startSize) { }
	// RVA: 0x6C29F0 Offset: 0x6C11F0 VA: 0x1806C29F0
	public void Update() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class Dash : CharacterState // TypeDefIndex: 3183
{
	// Fields
	private Action<Vector3> OnDashStart; // 0x30
	private Action<Vector3> OnDashEnd; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float initialVelocity; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float duration; // 0x44
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AnimationCurve movementCurve; // 0x48
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int availableNotGroundedDashes; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool ignoreSpeedMultipliers; // 0x54
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool forceNotGrounded; // 0x55
	private int airDashesLeft; // 0x58
	private float dashCursor; // 0x5C
	private Vector3 dashDirection; // 0x60
	private bool isDone; // 0x6C
	private float currentSpeedMultiplier; // 0x70

	// Properties
	public override string Name { get; }

	// Methods
	// RVA: 0x6923C0 Offset: 0x690BC0 VA: 0x1806923C0
	public void add_OnDashStart(Action<Vector3> value) { }
	// RVA: 0x6924A0 Offset: 0x690CA0 VA: 0x1806924A0
	public void remove_OnDashStart(Action<Vector3> value) { }
	// RVA: 0x692580 Offset: 0x690D80 VA: 0x180692580
	public void add_OnDashEnd(Action<Vector3> value) { }
	// RVA: 0x692660 Offset: 0x690E60 VA: 0x180692660
	public void remove_OnDashEnd(Action<Vector3> value) { }
	// RVA: 0x692740 Offset: 0x690F40 VA: 0x180692740 Slot: 4
	public override string get_Name() { }
	// RVA: 0x6927B0 Offset: 0x690FB0 VA: 0x1806927B0
	private void OnEnable() { }
	// RVA: 0x692870 Offset: 0x691070 VA: 0x180692870
	private void OnDisable() { }
	// RVA: 0x692930 Offset: 0x691130 VA: 0x180692930 Slot: 13
	public override string GetInfo() { }
	// RVA: 0x6929A0 Offset: 0x6911A0 VA: 0x1806929A0
	private void OnGroundedStateEnter(Vector3 localVelocity) { }
	// RVA: 0x6929B0 Offset: 0x6911B0 VA: 0x1806929B0 Slot: 12
	public override bool CheckEnterTransition(CharacterState fromState) { }
	// RVA: 0x6929F0 Offset: 0x6911F0 VA: 0x1806929F0 Slot: 11
	public override CharacterState CheckExitTransition() { }
	// RVA: 0x692AE0 Offset: 0x6912E0 VA: 0x180692AE0 Slot: 6
	public override void EnterBehaviour(float dt) { }
	// RVA: 0x692D50 Offset: 0x691550 VA: 0x180692D50 Slot: 8
	public override void UpdateBehaviour(float dt) { }
	// RVA: 0x692F20 Offset: 0x691720 VA: 0x180692F20
	private void ResetDash() { }
	// RVA: 0x693000 Offset: 0x691800 VA: 0x180693000
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class JetPack : CharacterState // TypeDefIndex: 3184
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float targetSpeed; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float duration; // 0x34
	private Vector3 smoothDampVelocity; // 0x38
	private Vector3 jetPackVelocity; // 0x44
	private Vector3 planarVelocity; // 0x50

	// Properties
	public override string Name { get; }

	// Methods
	// RVA: 0x6A38F0 Offset: 0x6A20F0 VA: 0x1806A38F0 Slot: 4
	public override string get_Name() { }
	// RVA: 0x6A3960 Offset: 0x6A2160 VA: 0x1806A3960 Slot: 13
	public override string GetInfo() { }
	// RVA: 0x6A39D0 Offset: 0x6A21D0 VA: 0x1806A39D0 Slot: 6
	public override void EnterBehaviour(float dt) { }
	// RVA: 0x6A3C50 Offset: 0x6A2450 VA: 0x1806A3C50 Slot: 8
	public override void UpdateBehaviour(float dt) { }
	// RVA: 0x6A3E90 Offset: 0x6A2690 VA: 0x1806A3E90 Slot: 11
	public override CharacterState CheckExitTransition() { }
	// RVA: 0x6A3F70 Offset: 0x6A2770 VA: 0x1806A3F70
	private void StableMovement(float dt) { }
	// RVA: 0x6A4350 Offset: 0x6A2B50 VA: 0x1806A4350
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class NormalMovement : CharacterState // TypeDefIndex: 3185
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private PlanarMovementParameters planarMovementParameters; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private VerticalMovementParameters verticalMovementParameters; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ShrinkParameters shrinkParameters; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private RigidbodyResponseParameters rigidbodyResponseParameters; // 0x48
	private Action OnJumpPerformed; // 0x50
	private Action OnGroundedJumpPerformed; // 0x58
	private Action<int> OnNotGroundedJumpPerformed; // 0x60
	private Vector3 planarVelocity; // 0x68
	private Vector3 verticalVelocity; // 0x74
	private Vector3 externalVelocity; // 0x80
	private int notGroundedJumpsLeft; // 0x8C
	private float jumpTimer; // 0x90
	private bool isJumping; // 0x94
	private Vector3 jumpVelocity; // 0x98
	private float targetHeight; // 0xA4
	private bool wantToShrink; // 0xA8

	// Properties
	public override string Name { get; }
	public bool UseGravity { get; set; }

	// Methods
	// RVA: 0x6BB120 Offset: 0x6B9920 VA: 0x1806BB120
	public void add_OnJumpPerformed(Action value) { }
	// RVA: 0x6BB200 Offset: 0x6B9A00 VA: 0x1806BB200
	public void remove_OnJumpPerformed(Action value) { }
	// RVA: 0x6BB2E0 Offset: 0x6B9AE0 VA: 0x1806BB2E0
	public void add_OnGroundedJumpPerformed(Action value) { }
	// RVA: 0x6BB3C0 Offset: 0x6B9BC0 VA: 0x1806BB3C0
	public void remove_OnGroundedJumpPerformed(Action value) { }
	// RVA: 0x6BB4A0 Offset: 0x6B9CA0 VA: 0x1806BB4A0
	public void add_OnNotGroundedJumpPerformed(Action<int> value) { }
	// RVA: 0x6BB580 Offset: 0x6B9D80 VA: 0x1806BB580
	public void remove_OnNotGroundedJumpPerformed(Action<int> value) { }
	// RVA: 0x6BB660 Offset: 0x6B9E60 VA: 0x1806BB660
	public void ResetVelocities() { }
	// RVA: 0x6BB7A0 Offset: 0x6B9FA0 VA: 0x1806BB7A0 Slot: 4
	public override string get_Name() { }
	// RVA: 0x6BB810 Offset: 0x6BA010 VA: 0x1806BB810 Slot: 5
	protected override void Awake() { }
	// RVA: 0x6BB8C0 Offset: 0x6BA0C0 VA: 0x1806BB8C0
	private void Start() { }
	// RVA: 0x6BB9E0 Offset: 0x6BA1E0 VA: 0x1806BB9E0
	private void OnEnable() { }
	// RVA: 0x6BBBE0 Offset: 0x6BA3E0 VA: 0x1806BBBE0
	private void OnDisable() { }
	// RVA: 0x6BBDE0 Offset: 0x6BA5E0 VA: 0x1806BBDE0 Slot: 13
	public override string GetInfo() { }
	// RVA: 0x6BBE50 Offset: 0x6BA650 VA: 0x1806BBE50
	private void OnHeadHit(CollisionInfo collisionInfo) { }
	// RVA: 0x6BB660 Offset: 0x6B9E60 VA: 0x1806BB660
	private void OnTeleport(Vector3 position, Quaternion rotation) { }
	// RVA: 0x6BBF00 Offset: 0x6BA700 VA: 0x1806BBF00
	private void OnEnterVolume(Volume volume) { }
	// RVA: 0x6BC000 Offset: 0x6BA800 VA: 0x1806BC000
	public bool get_UseGravity() { }
	// RVA: 0x6BC020 Offset: 0x6BA820 VA: 0x1806BC020
	public void set_UseGravity(bool value) { }
	// RVA: 0x6BC040 Offset: 0x6BA840 VA: 0x1806BC040 Slot: 11
	public override CharacterState CheckExitTransition() { }
	// RVA: 0x6BC220 Offset: 0x6BAA20 VA: 0x1806BC220
	private void HandleForwardDirection() { }
	// RVA: 0x6BC310 Offset: 0x6BAB10 VA: 0x1806BC310
	private void ProcessPlanarMovement(float dt) { }
	// RVA: 0x6BCAA0 Offset: 0x6BB2A0 VA: 0x1806BCAA0
	private void ProcessGravity(float dt) { }
	// RVA: 0x6BD180 Offset: 0x6BB980 VA: 0x1806BD180
	private void ProcessJump(float dt) { }
	// RVA: 0x6BD3D0 Offset: 0x6BBBD0 VA: 0x1806BD3D0
	private void SetJumpVelocity() { }
	// RVA: 0x6BD960 Offset: 0x6BC160 VA: 0x1806BD960
	private void ProcessVerticalMovement(float dt) { }
	// RVA: 0x6BD9C0 Offset: 0x6BC1C0 VA: 0x1806BD9C0
	private void VerticalDrag(float dt) { }
	// RVA: 0x6BDDC0 Offset: 0x6BC5C0 VA: 0x1806BDDC0
	private void ProcessExternalMovement(float dt) { }
	// RVA: 0x6BDFD0 Offset: 0x6BC7D0 VA: 0x1806BDFD0
	private void ExternalDrag(float dt) { }
	// RVA: 0x6BE210 Offset: 0x6BCA10 VA: 0x1806BE210 Slot: 6
	public override void EnterBehaviour(float dt) { }
	// RVA: 0x6BE4A0 Offset: 0x6BCCA0 VA: 0x1806BE4A0 Slot: 8
	public override void UpdateBehaviour(float dt) { }
	// RVA: 0x6BE740 Offset: 0x6BCF40 VA: 0x1806BE740
	private void HandleSize(float dt) { }
	// RVA: 0x6BE8F0 Offset: 0x6BD0F0 VA: 0x1806BE8F0
	private void HandleMovement(float dt) { }
	// RVA: 0x6BEAB0 Offset: 0x6BD2B0 VA: 0x1806BEAB0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class PlanarMovementParameters // TypeDefIndex: 3186
{
	// Fields
	public float speed; // 0x10
	public float boostMultiplier; // 0x14
	public float notGroundedControl; // 0x18

	// Methods
	// RVA: 0x6C7210 Offset: 0x6C5A10 VA: 0x1806C7210
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class VerticalMovementParameters // TypeDefIndex: 3187
{
	// Fields
	public bool useGravity; // 0x10
	public float jumpApexHeight; // 0x14
	public float jumpApexDuration; // 0x18
	public int availableNotGroundedJumps; // 0x1C
	public VerticalMovementParameters.UnstableJumpMode unstableJumpMode; // 0x20
	public float jumpIntertiaMultiplier; // 0x24
	public VerticalMovementParameters.JumpReleaseAction jumpReleaseAction; // 0x28
	public float constantJumpDuration; // 0x2C
	private float gravityMagnitude; // 0x30
	private float jumpSpeed; // 0x34

	// Properties
	public float GravityMagnitude { get; }
	public float JumpSpeed { get; }

	// Methods
	// RVA: 0x1FEF60 Offset: 0x1FD760 VA: 0x1801FEF60
	public float get_GravityMagnitude() { }
	// RVA: 0x6E8670 Offset: 0x6E6E70 VA: 0x1806E8670
	public void UpdateParameters(float positiveGravityMultiplier) { }
	// RVA: 0x29DF60 Offset: 0x29C760 VA: 0x18029DF60
	public float get_JumpSpeed() { }
	// RVA: 0x6E8770 Offset: 0x6E6F70 VA: 0x1806E8770
	public void .ctor() { }
}

// Namespace: 
public enum VerticalMovementParameters.UnstableJumpMode // TypeDefIndex: 3188
{
	// Fields
	public int value__; // 0x0
	public const VerticalMovementParameters.UnstableJumpMode Vertical = 0; // 0x0
	public const VerticalMovementParameters.UnstableJumpMode GroundNormal = 1; // 0x0
}

// Namespace: 
public enum VerticalMovementParameters.JumpReleaseAction // TypeDefIndex: 3189
{
	// Fields
	public int value__; // 0x0
	public const VerticalMovementParameters.JumpReleaseAction Disabled = 0; // 0x0
	public const VerticalMovementParameters.JumpReleaseAction StopJumping = 1; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class ShrinkParameters // TypeDefIndex: 3190
{
	// Fields
	public float shrinkHeightRatio; // 0x10
	public ShrinkParameters.ShrinkMode shrinkMode; // 0x14

	// Methods
	// RVA: 0x6D9900 Offset: 0x6D8100 VA: 0x1806D9900
	public void .ctor() { }
}

// Namespace: 
public enum ShrinkParameters.ShrinkMode // TypeDefIndex: 3191
{
	// Fields
	public int value__; // 0x0
	public const ShrinkParameters.ShrinkMode Toggle = 0; // 0x0
	public const ShrinkParameters.ShrinkMode Hold = 1; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class RigidbodyResponseParameters // TypeDefIndex: 3192
{
	// Fields
	public bool reactToRigidbodies; // 0x10
	public float responseMultiplier; // 0x14
	public float maxContactVelocity; // 0x18

	// Methods
	// RVA: 0x6D0870 Offset: 0x6CF070 VA: 0x1806D0870
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public sealed class ActionController : MonoBehaviour // TypeDefIndex: 3193
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private HumanInputType humanInputType; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private InputHandler inputHandler; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool useRawAxis; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AxisData[] axis; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private AxesData[] axes; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private ButtonData[] buttons; // 0x40
	private Dictionary<AxisData, AxisAction> axisDictionary; // 0x48
	private Dictionary<AxesData, AxesCompositeAction> axesDictionary; // 0x50
	private Dictionary<ButtonData, ButtonAction> buttonsDictionary; // 0x58

	// Methods
	// RVA: 0x6F7280 Offset: 0x6F5A80 VA: 0x1806F7280
	private void Awake() { }
	// RVA: 0x6F76A0 Offset: 0x6F5EA0 VA: 0x1806F76A0
	private void Update() { }
	// RVA: 0x6F76A0 Offset: 0x6F5EA0 VA: 0x1806F76A0
	private void FixedUpdate() { }
	// RVA: 0x6F76B0 Offset: 0x6F5EB0 VA: 0x1806F76B0
	private void UpdateActions() { }
	// RVA: 0x6F7BC0 Offset: 0x6F63C0 VA: 0x1806F7BC0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public struct ButtonData // TypeDefIndex: 3194
{
	// Fields
	public string name; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public struct AxisData // TypeDefIndex: 3195
{
	// Fields
	public string name; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public struct AxesData // TypeDefIndex: 3196
{
	// Fields
	public string horizontalName; // 0x0
	public string verticalName; // 0x8
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public abstract class InputHandler : MonoBehaviour // TypeDefIndex: 3197
{
	// Methods
	// RVA: -1 Offset: -1 Slot: 4
	public abstract float GetAxis(string axisName, bool raw = True) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract bool GetButton(string actionInputName) { }
	// RVA: -1 Offset: -1 Slot: 6
	public abstract bool GetButtonDown(string actionInputName) { }
	// RVA: -1 Offset: -1 Slot: 7
	public abstract bool GetButtonUp(string actionInputName) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class UIInputHandler : InputHandler // TypeDefIndex: 3198
{
	// Fields
	private Dictionary<string, MobileInput> axesDictionary; // 0x18

	// Methods
	// RVA: 0x6E5960 Offset: 0x6E4160 VA: 0x1806E5960
	private void Awake() { }
	// RVA: 0x6E5A80 Offset: 0x6E4280 VA: 0x1806E5A80 Slot: 4
	public override float GetAxis(string axisName, bool raw = True) { }
	// RVA: 0x6E5B70 Offset: 0x6E4370 VA: 0x1806E5B70 Slot: 5
	public override bool GetButton(string actionInputName) { }
	// RVA: 0x6E5C60 Offset: 0x6E4460 VA: 0x1806E5C60 Slot: 6
	public override bool GetButtonDown(string actionInputName) { }
	// RVA: 0x6E5D50 Offset: 0x6E4550 VA: 0x1806E5D50 Slot: 7
	public override bool GetButtonUp(string actionInputName) { }
	// RVA: 0x6E5E40 Offset: 0x6E4640 VA: 0x1806E5E40
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class UnityInputHandler : InputHandler // TypeDefIndex: 3199
{
	// Methods
	// RVA: 0x6E8210 Offset: 0x6E6A10 VA: 0x1806E8210 Slot: 4
	public override float GetAxis(string axisName, bool raw = True) { }
	// RVA: 0x6E82B0 Offset: 0x6E6AB0 VA: 0x1806E82B0 Slot: 5
	public override bool GetButton(string actionInputName) { }
	// RVA: 0x1FC910 Offset: 0x1FB110 VA: 0x1801FC910 Slot: 6
	public override bool GetButtonDown(string actionInputName) { }
	// RVA: 0x6E8300 Offset: 0x6E6B00 VA: 0x1806E8300 Slot: 7
	public override bool GetButtonUp(string actionInputName) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class MaterialsProperties : ScriptableObject // TypeDefIndex: 3200
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Surface defaultSurface; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Volume defaultVolume; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Surface[] surfaces; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Volume[] volumes; // 0x30

	// Properties
	public Surface DefaultSurface { get; }
	public Volume DefaultVolume { get; }
	public Surface[] Surfaces { get; }
	public Volume[] Volumes { get; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public Surface get_DefaultSurface() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public Volume get_DefaultVolume() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public Surface[] get_Surfaces() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public Volume[] get_Volumes() { }
	// RVA: 0x6ADA40 Offset: 0x6AC240 VA: 0x1806ADA40
	public bool GetSurface(string tag, ref Surface outputSurface) { }
	// RVA: 0x6ADB50 Offset: 0x6AC350 VA: 0x1806ADB50
	public bool GetVolume(string tag, ref Volume outputVolume) { }
	// RVA: 0x6ADC60 Offset: 0x6AC460 VA: 0x1806ADC60
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class Surface // TypeDefIndex: 3201
{
	// Fields
	public string tagName; // 0x10
	public float controlMultiplier; // 0x18
	public float speedMultiplier; // 0x1C
	public Color color; // 0x20

	// Methods
	// RVA: 0x6E13C0 Offset: 0x6DFBC0 VA: 0x1806E13C0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class Volume // TypeDefIndex: 3202
{
	// Fields
	public string tagName; // 0x10
	public float controlMultiplier; // 0x18
	public float gravityPositiveMultiplier; // 0x1C
	public float gravityNegativeMultiplier; // 0x20
	public float speedMultiplier; // 0x24

	// Methods
	// RVA: 0x6E87C0 Offset: 0x6E6FC0 VA: 0x1806E87C0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class InputAxes : MonoBehaviour, IDragHandler, IEventSystemHandler, IEndDragHandler // TypeDefIndex: 3203
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private MobileInput horizontalAxisMobileInput; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private MobileInput verticalAxisMobileInput; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool invertHorizontal; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool invertVertical; // 0x29
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private InputAxes.DeadZoneMode deadZoneMode; // 0x2C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float deadZoneDistance; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private int boundsRadius; // 0x34
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float returnLerpSpeed; // 0x38
	private Vector2 virtualPosition; // 0x3C
	private Vector2 visiblePosition; // 0x44
	private RectTransform rectTransform; // 0x50
	private Vector2 origin; // 0x58
	private bool drag; // 0x60

	// Methods
	// RVA: 0x6A30B0 Offset: 0x6A18B0 VA: 0x1806A30B0
	private void Awake() { }
	// RVA: 0x6A3140 Offset: 0x6A1940 VA: 0x1806A3140
	private void Update() { }
	// RVA: 0x6A3630 Offset: 0x6A1E30 VA: 0x1806A3630 Slot: 4
	public void OnDrag(PointerEventData eventData) { }
	// RVA: 0x6A3750 Offset: 0x6A1F50 VA: 0x1806A3750 Slot: 5
	public void OnEndDrag(PointerEventData eventData) { }
	// RVA: 0x6A3760 Offset: 0x6A1F60 VA: 0x1806A3760
	public void .ctor() { }
}

// Namespace: 
public enum InputAxes.DeadZoneMode // TypeDefIndex: 3204
{
	// Fields
	public int value__; // 0x0
	public const InputAxes.DeadZoneMode Radial = 0; // 0x0
	public const InputAxes.DeadZoneMode PerAxis = 1; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class InputButton : MonoBehaviour, IPointerUpHandler, IEventSystemHandler, IPointerDownHandler // TypeDefIndex: 3205
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private MobileInput buttonMobileInput; // 0x18
	private bool wasHeldDown; // 0x20
	private bool <IsPressed>k__BackingField; // 0x21
	private bool <IsReleased>k__BackingField; // 0x22
	private bool <IsHeldDown>k__BackingField; // 0x23

	// Properties
	public bool IsPressed { get; set; }
	public bool IsReleased { get; set; }
	public bool IsHeldDown { get; set; }

	// Methods
	// RVA: 0x29DF10 Offset: 0x29C710 VA: 0x18029DF10
	public bool get_IsPressed() { }
	// RVA: 0x29DF20 Offset: 0x29C720 VA: 0x18029DF20
	public void set_IsPressed(bool value) { }
	// RVA: 0x6A3830 Offset: 0x6A2030 VA: 0x1806A3830
	public bool get_IsReleased() { }
	// RVA: 0x6A3840 Offset: 0x6A2040 VA: 0x1806A3840
	public void set_IsReleased(bool value) { }
	// RVA: 0x6A3850 Offset: 0x6A2050 VA: 0x1806A3850
	public bool get_IsHeldDown() { }
	// RVA: 0x6A3860 Offset: 0x6A2060 VA: 0x1806A3860
	public void set_IsHeldDown(bool value) { }
	// RVA: 0x6A3870 Offset: 0x6A2070 VA: 0x1806A3870 Slot: 5
	public void OnPointerDown(PointerEventData eventData) { }
	// RVA: 0x6A3880 Offset: 0x6A2080 VA: 0x1806A3880 Slot: 4
	public void OnPointerUp(PointerEventData eventData) { }
	// RVA: 0x6A3890 Offset: 0x6A2090 VA: 0x1806A3890
	private void Update() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class MobileInput : MonoBehaviour // TypeDefIndex: 3206
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string axisName; // 0x18
	private float <AxisValue>k__BackingField; // 0x20
	private bool <IsPressed>k__BackingField; // 0x24
	private bool <IsReleased>k__BackingField; // 0x25
	private bool <IsHeldDown>k__BackingField; // 0x26

	// Properties
	public string AxisName { get; }
	public float AxisValue { get; set; }
	public bool IsPressed { get; set; }
	public bool IsReleased { get; set; }
	public bool IsHeldDown { get; set; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public string get_AxisName() { }
	// RVA: 0x1FED10 Offset: 0x1FD510 VA: 0x1801FED10
	public float get_AxisValue() { }
	// RVA: 0x352D60 Offset: 0x351560 VA: 0x180352D60
	public void set_AxisValue(float value) { }
	// RVA: 0x366650 Offset: 0x364E50 VA: 0x180366650
	public bool get_IsPressed() { }
	// RVA: 0x366660 Offset: 0x364E60 VA: 0x180366660
	public void set_IsPressed(bool value) { }
	// RVA: 0x6B7B30 Offset: 0x6B6330 VA: 0x1806B7B30
	public bool get_IsReleased() { }
	// RVA: 0x6B7B40 Offset: 0x6B6340 VA: 0x1806B7B40
	public void set_IsReleased(bool value) { }
	// RVA: 0x6B7B50 Offset: 0x6B6350 VA: 0x1806B7B50
	public bool get_IsHeldDown() { }
	// RVA: 0x6B7B60 Offset: 0x6B6360 VA: 0x1806B7B60
	public void set_IsHeldDown(bool value) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class ActionBasedPlatform : KinematicPlatform // TypeDefIndex: 3207
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected MovementAction movementAction; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected RotationAction rotationAction; // 0x28

	// Methods
	// RVA: 0x6F6F30 Offset: 0x6F5730 VA: 0x1806F6F30 Slot: 5
	public override void UpdateKinematicActor(float dt) { }
	// RVA: 0x6F7040 Offset: 0x6F5840 VA: 0x1806F7040
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class MovementAction // TypeDefIndex: 3208
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool enabled; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool infiniteDuration; // 0x11
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float cycleDuration; // 0x14
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool waitAtTheEnd; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float waitDuration; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 direction; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float speed; // 0x2C
	private Vector3 actionVector; // 0x30
	private float time; // 0x3C
	private bool isWaiting; // 0x40

	// Methods
	// RVA: 0x6B7B70 Offset: 0x6B6370 VA: 0x1806B7B70
	public void Tick(float dt, ref Vector3 position) { }
	// RVA: 0x6B7DD0 Offset: 0x6B65D0 VA: 0x1806B7DD0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
public class NodeBasedPlatform : KinematicPlatform // TypeDefIndex: 3209
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool drawHandles; // 0x20
	public bool move; // 0x21
	public bool rotate; // 0x22
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private List<PlatformNode> actionsList; // 0x28
	public NodeBasedPlatform.SequenceType sequenceType; // 0x30
	public bool positiveSequenceDirection; // 0x34
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float globalSpeedModifier; // 0x38
	private Rigidbody2D rigidbody2D; // 0x40
	private Rigidbody rigidbody3D; // 0x48
	private NodeBasedPlatform.ActionState actionState; // 0x50
	private Vector3 targetPosition; // 0x54
	private Vector3 targetRotation; // 0x60
	private Vector3 startingPosition; // 0x6C
	private Vector3 startingRotation; // 0x78
	private bool updateInitialPosition; // 0x84
	private Vector3 initialPosition; // 0x88
	private float time; // 0x94
	private PlatformNode currentAction; // 0x98
	private int currentActionIndex; // 0xA0

	// Properties
	public bool DrawHandles { get; }
	public List<PlatformNode> ActionsList { get; }
	public bool UpdateInitialPosition { get; }
	public Vector3 InitialPosition { get; }
	public int CurrentActionIndex { get; }

	// Methods
	// RVA: 0x20B410 Offset: 0x209C10 VA: 0x18020B410
	public bool get_DrawHandles() { }
	// RVA: 0x1EA900 Offset: 0x1E9100 VA: 0x1801EA900
	public List<PlatformNode> get_ActionsList() { }
	// RVA: 0x6BA030 Offset: 0x6B8830 VA: 0x1806BA030
	public bool get_UpdateInitialPosition() { }
	// RVA: 0x6BA040 Offset: 0x6B8840 VA: 0x1806BA040
	public Vector3 get_InitialPosition() { }
	// RVA: 0x5AD650 Offset: 0x5ABE50 VA: 0x1805AD650
	public int get_CurrentActionIndex() { }
	// RVA: 0x6BA060 Offset: 0x6B8860 VA: 0x1806BA060 Slot: 4
	protected override void Awake() { }
	// RVA: 0x6BA420 Offset: 0x6B8C20 VA: 0x1806BA420 Slot: 5
	public override void UpdateKinematicActor(float dt) { }
	// RVA: 0x6BA7D0 Offset: 0x6B8FD0 VA: 0x1806BA7D0 Slot: 3
	public override string ToString() { }
	// RVA: 0x6BAA00 Offset: 0x6B9200 VA: 0x1806BAA00
	private void SetTargets() { }
	// RVA: 0x6BACA0 Offset: 0x6B94A0 VA: 0x1806BACA0
	private void CalculatePosition() { }
	// RVA: 0x6BAE60 Offset: 0x6B9660 VA: 0x1806BAE60
	private void CalculateRotation() { }
	// RVA: 0x6BB060 Offset: 0x6B9860 VA: 0x1806BB060
	public void .ctor() { }
}

// Namespace: 
public enum NodeBasedPlatform.SequenceType // TypeDefIndex: 3210
{
	// Fields
	public int value__; // 0x0
	public const NodeBasedPlatform.SequenceType Rewind = 0; // 0x0
	public const NodeBasedPlatform.SequenceType Loop = 1; // 0x0
	public const NodeBasedPlatform.SequenceType OneWay = 2; // 0x0
}

// Namespace: 
private enum NodeBasedPlatform.ActionState // TypeDefIndex: 3211
{
	// Fields
	public int value__; // 0x0
	public const NodeBasedPlatform.ActionState Idle = 0; // 0x0
	public const NodeBasedPlatform.ActionState Ready = 1; // 0x0
	public const NodeBasedPlatform.ActionState Waiting = 2; // 0x0
	public const NodeBasedPlatform.ActionState Working = 3; // 0x0
	public const NodeBasedPlatform.ActionState Done = 4; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class PlatformNode // TypeDefIndex: 3212
{
	// Fields
	public Vector3 position; // 0x10
	public Vector3 eulerAngles; // 0x1C
	public AnimationCurve movementCurve; // 0x28
	public AnimationCurve rotationCurve; // 0x30
	public float targetTime; // 0x38

	// Methods
	// RVA: 0x6C7230 Offset: 0x6C5A30 VA: 0x1806C7230
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Implementation
[Serializable]
public class RotationAction // TypeDefIndex: 3213
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool enabled; // 0x10
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool infiniteDuration; // 0x11
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float cycleDuration; // 0x14
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool waitAtTheEnd; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float waitDuration; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 direction; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float speed; // 0x2C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Transform pivotObject; // 0x30
	private Vector3 actionVector; // 0x38
	private float time; // 0x44
	private bool isWaiting; // 0x48

	// Methods
	// RVA: 0x6D0890 Offset: 0x6CF090 VA: 0x1806D0890
	public void Tick(float dt, ref Vector3 position, ref Quaternion rotation) { }
	// RVA: 0x6D0B70 Offset: 0x6CF370 VA: 0x1806D0B70
	private void RotateAround(ref Vector3 position, ref Quaternion rotation, float dt) { }
	// RVA: 0x6D0E30 Offset: 0x6CF630 VA: 0x1806D0E30
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public abstract class AddTorque : MonoBehaviour // TypeDefIndex: 3214
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Vector3 torque; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float maxAngularVelocity; // 0x24

	// Methods
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 4
	protected virtual void Awake() { }
	// RVA: -1 Offset: -1 Slot: 5
	protected abstract void AddTorqueToRigidbody() { }
	// RVA: 0x60B940 Offset: 0x60A140 VA: 0x18060B940
	private void FixedUpdate() { }
	// RVA: 0x6F7D00 Offset: 0x6F6500 VA: 0x1806F7D00
	protected void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public class AddTorque2D : AddTorque // TypeDefIndex: 3215
{
	// Fields
	private Rigidbody2D rigidbody; // 0x28

	// Methods
	// RVA: 0x6F7D10 Offset: 0x6F6510 VA: 0x1806F7D10 Slot: 4
	protected override void Awake() { }
	// RVA: 0x6F7D90 Offset: 0x6F6590 VA: 0x1806F7D90 Slot: 5
	protected override void AddTorqueToRigidbody() { }
	// RVA: 0x6F7D00 Offset: 0x6F6500 VA: 0x1806F7D00
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public class AddTorque3D : AddTorque // TypeDefIndex: 3216
{
	// Fields
	private Rigidbody rigidbody; // 0x28

	// Methods
	// RVA: 0x6F7F50 Offset: 0x6F6750 VA: 0x1806F7F50 Slot: 4
	protected override void Awake() { }
	// RVA: 0x6F8040 Offset: 0x6F6840 VA: 0x1806F8040 Slot: 5
	protected override void AddTorqueToRigidbody() { }
	// RVA: 0x6F7D00 Offset: 0x6F6500 VA: 0x1806F7D00
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
[Serializable]
public class CharacterReferenceObject // TypeDefIndex: 3217
{
	// Fields
	public Transform referenceTransform; // 0x10
	public CharacterOrientationMode gravityMode; // 0x18
	public GravityCenterMode gravityCenterMode; // 0x1C
	public bool useNegativeUpAsGravity; // 0x20
	public Transform gravityCenter; // 0x28

	// Methods
	// RVA: 0x714E80 Offset: 0x713680 VA: 0x180714E80
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public class DemoSceneManager : MonoBehaviour // TypeDefIndex: 3218
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CharacterActor playerCharacterActor; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CharacterReferenceObject[] references; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Canvas infoCanvas; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool hideAndConfineCursor; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool showCapsule; // 0x31
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject capsuleObject; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject graphicsObject; // 0x40
	private Renderer[] capsuleRenderers; // 0x48
	private Renderer[] graphicsRenderers; // 0x50

	// Methods
	// RVA: 0x693190 Offset: 0x691990 VA: 0x180693190
	private void Awake() { }
	// RVA: 0x693360 Offset: 0x691B60 VA: 0x180693360
	private void Update() { }
	// RVA: 0x6935A0 Offset: 0x691DA0 VA: 0x1806935A0
	private void EnableRenderers(bool showCapsule) { }
	// RVA: 0x6937F0 Offset: 0x691FF0 VA: 0x1806937F0
	private void GoTo(CharacterReferenceObject reference) { }
	// RVA: 0x6939F0 Offset: 0x6921F0 VA: 0x1806939F0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public class FpsCounter : MonoBehaviour // TypeDefIndex: 3219
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float time; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Text text; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool showOnlyNumbers; // 0x28
	private float result; // 0x2C
	private int samples; // 0x30
	private string output; // 0x38
	private float fps; // 0x40
	private GUIStyle style; // 0x48

	// Properties
	public float Fps { get; }

	// Methods
	// RVA: 0x1FF080 Offset: 0x1FD880 VA: 0x1801FF080
	public float get_Fps() { }
	// RVA: 0x69EE80 Offset: 0x69D680 VA: 0x18069EE80
	private void Awake() { }
	// RVA: 0x69EF60 Offset: 0x69D760 VA: 0x18069EF60
	private void Update() { }
	// RVA: 0x69F170 Offset: 0x69D970 VA: 0x18069F170
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public abstract class GravityModifier : MonoBehaviour // TypeDefIndex: 3220
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CharacterReferenceObject reference; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float waitTime; // 0x20
	protected bool isReady; // 0x24
	private float time; // 0x28
	protected Dictionary<Transform, CharacterActor> characters; // 0x30

	// Methods
	// RVA: 0x6A22E0 Offset: 0x6A0AE0 VA: 0x1806A22E0
	private void Update() { }
	// RVA: 0x6A2360 Offset: 0x6A0B60 VA: 0x1806A2360
	protected void ChangeGravitySettings(CharacterActor characterActor) { }
	// RVA: 0x6A2520 Offset: 0x6A0D20 VA: 0x1806A2520
	protected CharacterActor GetCharacter(Transform objectTransform) { }
	// RVA: 0x6A26A0 Offset: 0x6A0EA0 VA: 0x1806A26A0
	protected void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public class GravityModifier2D : GravityModifier // TypeDefIndex: 3221
{
	// Methods
	// RVA: 0x6A2780 Offset: 0x6A0F80 VA: 0x1806A2780
	private void OnTriggerEnter2D(Collider2D other) { }
	// RVA: 0x6A28A0 Offset: 0x6A10A0 VA: 0x1806A28A0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public class GravityModifier3D : GravityModifier // TypeDefIndex: 3222
{
	// Methods
	// RVA: 0x6A28B0 Offset: 0x6A10B0 VA: 0x1806A28B0
	private void OnTriggerEnter(Collider other) { }
	// RVA: 0x6A28A0 Offset: 0x6A10A0 VA: 0x1806A28A0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public class LookAtTarget : MonoBehaviour // TypeDefIndex: 3223
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Transform target; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool invertForwardDirection; // 0x20

	// Methods
	// RVA: 0x6A7230 Offset: 0x6A5A30 VA: 0x1806A7230
	private void Start() { }
	// RVA: 0x6A7320 Offset: 0x6A5B20 VA: 0x1806A7320
	private void Update() { }
	// RVA: 0x291AD0 Offset: 0x2902D0 VA: 0x180291AD0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public class MainMenuManager : MonoBehaviour // TypeDefIndex: 3224
{
	// Fields
	private string mainMenuName; // 0x18
	private static MainMenuManager instance; // 0x0

	// Properties
	public static MainMenuManager Instance { get; }

	// Methods
	// RVA: 0x6AD3E0 Offset: 0x6ABBE0 VA: 0x1806AD3E0
	public static MainMenuManager get_Instance() { }
	// RVA: 0x6AD460 Offset: 0x6ABC60 VA: 0x1806AD460
	private void Awake() { }
	// RVA: 0x537110 Offset: 0x535910 VA: 0x180537110
	public void QuitApplication() { }
	// RVA: 0x6AD690 Offset: 0x6ABE90 VA: 0x1806AD690
	public void GoToScene(string sceneName) { }
	// RVA: 0x6AD830 Offset: 0x6AC030 VA: 0x1806AD830
	private void Update() { }
	// RVA: 0x6AD9C0 Offset: 0x6AC1C0 VA: 0x1806AD9C0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public class MenuButton : MonoBehaviour, IPointerClickHandler, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler // TypeDefIndex: 3225
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private string sceneName; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Color highlightColor; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float lerpSpeed; // 0x30
	private Color normalColor; // 0x34
	private Image image; // 0x48
	private bool enter; // 0x50

	// Methods
	// RVA: 0x6AE170 Offset: 0x6AC970 VA: 0x1806AE170
	private void Awake() { }
	// RVA: 0x6AE260 Offset: 0x6ACA60 VA: 0x1806AE260
	private void Update() { }
	// RVA: 0x6AE410 Offset: 0x6ACC10 VA: 0x1806AE410 Slot: 4
	public void OnPointerClick(PointerEventData eventData) { }
	// RVA: 0x6AE4A0 Offset: 0x6ACCA0 VA: 0x1806AE4A0 Slot: 5
	public void OnPointerEnter(PointerEventData eventData) { }
	// RVA: 0x6AE4B0 Offset: 0x6ACCB0 VA: 0x1806AE4B0 Slot: 6
	public void OnPointerExit(PointerEventData eventData) { }
	// RVA: 0x6AE4C0 Offset: 0x6ACCC0 VA: 0x1806AE4C0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Demo
public class PerformanceDemoManager : MonoBehaviour // TypeDefIndex: 3226
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private GameObject characterPrefab; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Transform prefabInstantiationReference; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Text textField; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float maxInstantiationDistance; // 0x30
	private int numberOfCharacters; // 0x34
	private List<GameObject> characterObjects; // 0x38

	// Methods
	// RVA: 0x6C3050 Offset: 0x6C1850 VA: 0x1806C3050
	private void Awake() { }
	// RVA: 0x6C3150 Offset: 0x6C1950 VA: 0x1806C3150
	public void AddCharacters(int numberOfCharacters) { }
	// RVA: 0x6C3520 Offset: 0x6C1D20 VA: 0x1806C3520
	public void RemoveCharacters() { }
	// RVA: 0x6C36A0 Offset: 0x6C1EA0 VA: 0x1806C36A0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Core
public enum CharacterOrientationMode // TypeDefIndex: 3227
{
	// Fields
	public int value__; // 0x0
	public const CharacterOrientationMode FixedDirection = 0; // 0x0
	public const CharacterOrientationMode GravityCenter = 1; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Core
public enum GravityCenterMode // TypeDefIndex: 3228
{
	// Fields
	public int value__; // 0x0
	public const GravityCenterMode Towards = 0; // 0x0
	public const GravityCenterMode Away = 1; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Core
[RequireComponent] // RVA: 0x103FE0 Offset: 0x1033E0 VA: 0x180103FE0
public class CharacterActor : MonoBehaviour // TypeDefIndex: 3229
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool showGizmos; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected CharacterTagsAndLayersProfile tagsAndLayersProfile; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float slopeLimit; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool detectSteps; // 0x2C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float stepOffset; // 0x30
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected float stepDownDistance; // 0x34
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool edgeCompensation; // 0x38
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool alwaysNotGrounded; // 0x39
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float sizeChangeLerpSpeed; // 0x3C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected CharacterOrientationMode orientationMode; // 0x40
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Vector3 worldGravityDirection; // 0x44
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected Transform gravityCenter; // 0x50
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected GravityCenterMode gravityCenterMode; // 0x58
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	protected bool supportDynamicGround; // 0x5C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool rotateForwardDirection; // 0x5D
	private CharacterBody characterBody; // 0x60
	private CharacterActorBehaviour characterActorBehaviour; // 0x68
	private PhysicsComponent physicsComponent; // 0x70
	private bool wasGrounded; // 0x78
	private bool wasStable; // 0x79
	protected CharacterCollisionInfo characterCollisionInfo; // 0x80
	protected DynamicGroundInfo dynamicGroundInfo; // 0x128
	private Dictionary<Transform, KinematicPlatform> kinematicPlatforms; // 0x158
	protected Vector2 currentBodySize; // 0x160
	private Vector2 targetBodySize; // 0x168
	private Vector3 inputVelocity; // 0x170
	private Vector3 rigidbodyStaticVelocity; // 0x17C
	private CharacterGraphics characterGraphics; // 0x188
	private RigidbodyConstraints initialRigidbodyConstraints; // 0x190
	private Vector3 currentGravityDirection; // 0x194
	private List<Contact> collisionResponseContacts; // 0x1A0
	private Vector3 forwardDirection; // 0x1A8
	private Action OnTriggerEnter; // 0x1B8
	private Action OnTriggerExit; // 0x1C0
	private Action<CollisionInfo> OnHeadHit; // 0x1C8
	private Action<CollisionInfo> OnWallHit; // 0x1D0
	private Action<Vector3, Quaternion> OnTeleport; // 0x1D8
	private Action<Vector3, float> OnStepUp; // 0x1E0
	private Action<Vector3> OnGroundedStateEnter; // 0x1E8
	private Action OnGroundedStateExit; // 0x1F0
	private bool teleportFlag; // 0x1F8
	private Vector3 teleportPosition; // 0x1FC
	private Quaternion teleportRotation; // 0x208
	private Vector3 dynamicGroundDisplacement; // 0x218
	private bool stepUpPhases; // 0x224
	private Vector3 targetStepUpPosition; // 0x228
	private Vector3 targetPosition; // 0x234
	private bool forceNotGroundedFlag; // 0x240

	// Properties
	public CharacterBody CharacterBody { get; }
	public CharacterActorBehaviour CharacterActorBehaviour { get; }
	public PhysicsComponent PhysicsComponent { get; }
	public bool IsOnEdge { get; }
	public bool IsGrounded { get; }
	public float GroundSlopeAngle { get; }
	public Vector3 GroundContactPoint { get; }
	public Vector3 GroundContactNormal { get; }
	public Vector3 GroundStableNormal { get; }
	public GameObject GroundObject { get; }
	public Transform GroundTransform { get; }
	public Collider2D GroundCollider2D { get; }
	public Collider GroundCollider3D { get; }
	public GameObject CurrentTrigger { get; }
	public List<GameObject> Triggers { get; }
	public bool WallCollision { get; }
	public float WallAngle { get; }
	public GameObject WallObject { get; }
	public Vector3 WallContactPoint { get; }
	public Vector3 WallContactNormal { get; }
	public bool IsStable { get; }
	public bool IsOnUnstableGround { get; }
	public bool WasGrounded { get; }
	public bool WasStable { get; }
	public bool IsWallARigidbody { get; }
	public bool IsWallAKinematicRigidbody { get; }
	public bool IsGroundARigidbody { get; }
	public bool IsGroundAKinematicRigidbody { get; }
	public Vector3 DynamicGroundPointVelocity { get; }
	public bool AlwaysNotGrounded { get; set; }
	public Vector2 DefaultBodySize { get; }
	public Vector2 BodySize { get; }
	public LayerMask StaticObstaclesLayerMask { get; }
	public LayerMask DynamicRigidbodiesLayerMask { get; }
	public LayerMask DynamicGroundLayerMask { get; }
	public CharacterTagsAndLayersProfile TagsAndLayersProfile { get; }
	public Vector3 InputVelocity { get; }
	public Vector3 LocalInputVelocity { get; }
	public Vector3 RigidbodyVelocity { get; }
	public Vector3 RigidbodyStaticVelocity { get; }
	public Vector3 CurrentGravityDirection { get; }
	public Transform GravityCenter { get; }
	public Vector3 Position { get; set; }
	public Quaternion Rotation { get; set; }
	public Vector3 RigidbodyUp { get; }
	public Vector3 RigidbodyForward { get; }
	public Vector3 RigidbodyRight { get; }
	public RigidbodyComponent RigidbodyComponent { get; }
	public ColliderComponent ColliderComponent { get; }
	public List<Contact> Contacts { get; }
	public List<Contact> CollisionResponseContacts { get; }
	public Vector3 UpDirection { get; }
	public Vector3 ForwardDirection { get; }
	public Vector3 RightDirection { get; }
	public Vector3 TargetPosition { get; }

	// Methods
	// RVA: 0x6FF790 Offset: 0x6FDF90 VA: 0x1806FF790
	public CharacterBody get_CharacterBody() { }
	// RVA: 0x6FF850 Offset: 0x6FE050 VA: 0x1806FF850
	public CharacterActorBehaviour get_CharacterActorBehaviour() { }
	// RVA: 0x262A80 Offset: 0x261280 VA: 0x180262A80
	public PhysicsComponent get_PhysicsComponent() { }
	// RVA: 0x6FF910 Offset: 0x6FE110 VA: 0x1806FF910
	public bool get_IsOnEdge() { }
	// RVA: 0x6FF920 Offset: 0x6FE120 VA: 0x1806FF920
	public bool get_IsGrounded() { }
	// RVA: 0x6FF9C0 Offset: 0x6FE1C0 VA: 0x1806FF9C0
	public float get_GroundSlopeAngle() { }
	// RVA: 0x34A240 Offset: 0x348A40 VA: 0x18034A240
	public Vector3 get_GroundContactPoint() { }
	// RVA: 0x6FF9D0 Offset: 0x6FE1D0 VA: 0x1806FF9D0
	public Vector3 get_GroundContactNormal() { }
	// RVA: 0x6FF9F0 Offset: 0x6FE1F0 VA: 0x1806FF9F0
	public Vector3 get_GroundStableNormal() { }
	// RVA: 0x171080 Offset: 0x16F880 VA: 0x180171080
	public GameObject get_GroundObject() { }
	// RVA: 0x6FFA10 Offset: 0x6FE210 VA: 0x1806FFA10
	public Transform get_GroundTransform() { }
	// RVA: 0x19D9B0 Offset: 0x19C1B0 VA: 0x18019D9B0
	public Collider2D get_GroundCollider2D() { }
	// RVA: 0x173240 Offset: 0x171A40 VA: 0x180173240
	public Collider get_GroundCollider3D() { }
	// RVA: 0x6FFA70 Offset: 0x6FE270 VA: 0x1806FFA70
	public GameObject get_CurrentTrigger() { }
	// RVA: 0x6FFB20 Offset: 0x6FE320 VA: 0x1806FFB20
	public List<GameObject> get_Triggers() { }
	// RVA: 0x4CFB80 Offset: 0x4CE380 VA: 0x1804CFB80
	public bool get_WallCollision() { }
	// RVA: 0x6FFB40 Offset: 0x6FE340 VA: 0x1806FFB40
	public float get_WallAngle() { }
	// RVA: 0x1A2260 Offset: 0x1A0A60 VA: 0x1801A2260
	public GameObject get_WallObject() { }
	// RVA: 0x5AD5D0 Offset: 0x5ABDD0 VA: 0x1805AD5D0
	public Vector3 get_WallContactPoint() { }
	// RVA: 0x6FFB50 Offset: 0x6FE350 VA: 0x1806FFB50
	public Vector3 get_WallContactNormal() { }
	// RVA: 0x6FFB70 Offset: 0x6FE370 VA: 0x1806FFB70
	public bool get_IsStable() { }
	// RVA: 0x6FFBA0 Offset: 0x6FE3A0 VA: 0x1806FFBA0
	public bool get_IsOnUnstableGround() { }
	// RVA: 0x6566F0 Offset: 0x654EF0 VA: 0x1806566F0
	public bool get_WasGrounded() { }
	// RVA: 0x6FFBD0 Offset: 0x6FE3D0 VA: 0x1806FFBD0
	public bool get_WasStable() { }
	// RVA: 0x6FFBE0 Offset: 0x6FE3E0 VA: 0x1806FFBE0
	public bool get_IsWallARigidbody() { }
	// RVA: 0x6FFCA0 Offset: 0x6FE4A0 VA: 0x1806FFCA0
	public bool get_IsWallAKinematicRigidbody() { }
	// RVA: 0x6FFD70 Offset: 0x6FE570 VA: 0x1806FFD70
	public bool get_IsGroundARigidbody() { }
	// RVA: 0x6FFE30 Offset: 0x6FE630 VA: 0x1806FFE30
	public bool get_IsGroundAKinematicRigidbody() { }
	// RVA: 0x6FFF00 Offset: 0x6FE700 VA: 0x1806FFF00
	public Vector3 get_DynamicGroundPointVelocity() { }
	// RVA: 0x700030 Offset: 0x6FE830 VA: 0x180700030 Slot: 3
	public override string ToString() { }
	// RVA: 0x2E9C90 Offset: 0x2E8490 VA: 0x1802E9C90
	public bool get_AlwaysNotGrounded() { }
	// RVA: 0x675DF0 Offset: 0x6745F0 VA: 0x180675DF0
	public void set_AlwaysNotGrounded(bool value) { }
	// RVA: 0x701B00 Offset: 0x700300 VA: 0x180701B00
	public Vector2 get_DefaultBodySize() { }
	// RVA: 0x701B30 Offset: 0x700330 VA: 0x180701B30
	public Vector2 get_BodySize() { }
	// RVA: 0x701B50 Offset: 0x700350 VA: 0x180701B50
	public LayerMask get_StaticObstaclesLayerMask() { }
	// RVA: 0x701B70 Offset: 0x700370 VA: 0x180701B70
	public LayerMask get_DynamicRigidbodiesLayerMask() { }
	// RVA: 0x701B70 Offset: 0x700370 VA: 0x180701B70
	public LayerMask get_DynamicGroundLayerMask() { }
	// RVA: 0x16EEB0 Offset: 0x16D6B0 VA: 0x18016EEB0
	public CharacterTagsAndLayersProfile get_TagsAndLayersProfile() { }
	// RVA: 0x701B90 Offset: 0x700390 VA: 0x180701B90
	public Vector3 get_InputVelocity() { }
	// RVA: 0x701BB0 Offset: 0x7003B0 VA: 0x180701BB0
	public Vector3 get_LocalInputVelocity() { }
	// RVA: 0x701CB0 Offset: 0x7004B0 VA: 0x180701CB0
	public void SetInputVelocity(Vector3 inputVelocity) { }
	// RVA: 0x701CD0 Offset: 0x7004D0 VA: 0x180701CD0
	public void AddInputVelocity(Vector3 inputVelocity) { }
	// RVA: 0x701DE0 Offset: 0x7005E0 VA: 0x180701DE0
	public Vector3 get_RigidbodyVelocity() { }
	// RVA: 0x701E30 Offset: 0x700630 VA: 0x180701E30
	public Vector3 get_RigidbodyStaticVelocity() { }
	// RVA: 0x701E50 Offset: 0x700650 VA: 0x180701E50
	protected Vector3 GetCenter(Vector3 position) { }
	// RVA: 0x701FA0 Offset: 0x7007A0 VA: 0x180701FA0
	protected Vector3 GetTop(Vector3 position) { }
	// RVA: 0x7020E0 Offset: 0x7008E0 VA: 0x1807020E0
	protected Vector3 GetBottom(Vector3 position) { }
	// RVA: 0x702210 Offset: 0x700A10 VA: 0x180702210
	protected Vector3 GetTopCenter(Vector3 position) { }
	// RVA: 0x702370 Offset: 0x700B70 VA: 0x180702370
	protected Vector3 GetTopCenter(Vector3 position, Vector2 bodySize) { }
	// RVA: 0x7024B0 Offset: 0x700CB0 VA: 0x1807024B0
	protected Vector3 GetBottomCenter(Vector3 position) { }
	// RVA: 0x702600 Offset: 0x700E00 VA: 0x180702600
	protected Vector3 GetBottomCenter(Vector3 position, Vector2 bodySize) { }
	// RVA: 0x702750 Offset: 0x700F50 VA: 0x180702750
	protected Vector3 GetBottomCenterToTopCenter() { }
	// RVA: 0x702870 Offset: 0x701070 VA: 0x180702870
	protected Vector3 GetBottomCenterToTopCenter(Vector2 bodySize) { }
	// RVA: 0x702970 Offset: 0x701170 VA: 0x180702970
	protected Vector3 GetOffsettedBottomCenter(Vector3 position) { }
	// RVA: 0x702AC0 Offset: 0x7012C0 VA: 0x180702AC0
	private void Awake() { }
	// RVA: 0x703180 Offset: 0x701980 VA: 0x180703180 Slot: 4
	protected virtual void OnEnable() { }
	// RVA: 0x7034C0 Offset: 0x701CC0 VA: 0x1807034C0 Slot: 5
	protected virtual void OnDisable() { }
	// RVA: 0x703830 Offset: 0x702030 VA: 0x180703830
	private void ResetParameters() { }
	// RVA: 0x7038E0 Offset: 0x7020E0 VA: 0x1807038E0 Slot: 6
	protected virtual void ApplyWeight(Vector3 contactPoint) { }
	// RVA: 0x703DA0 Offset: 0x7025A0 VA: 0x180703DA0 Slot: 7
	protected virtual void ProcessDynamicGround(ref Vector3 position, float dt) { }
	// RVA: 0x704060 Offset: 0x702860 VA: 0x180704060
	private void FindAndUpdateDynamicGround(Transform groundTransform, Vector3 footPosition) { }
	// RVA: 0x704340 Offset: 0x702B40 VA: 0x180704340 Slot: 8
	protected virtual void UpdateDynamicGround(Vector3 position) { }
	// RVA: 0x704450 Offset: 0x702C50 VA: 0x180704450
	public void SetWorldGravityDirection(Vector3 gravityDirection) { }
	// RVA: 0x704490 Offset: 0x702C90 VA: 0x180704490
	public void SetGravityMode(CharacterOrientationMode gravityMode) { }
	// RVA: 0x7044A0 Offset: 0x702CA0 VA: 0x1807044A0
	public Vector3 get_CurrentGravityDirection() { }
	// RVA: 0x7044C0 Offset: 0x702CC0 VA: 0x1807044C0
	public void SetGravityCenter(Transform gravityCenter, GravityCenterMode gravityCenterMode = 0) { }
	// RVA: 0x7044D0 Offset: 0x702CD0 VA: 0x1807044D0
	private void SetColliderSize() { }
	// RVA: 0x7046C0 Offset: 0x702EC0 VA: 0x1807046C0
	private void RotateCharacter(Vector3 up) { }
	// RVA: 0x1E31F0 Offset: 0x1E19F0 VA: 0x1801E31F0
	public Transform get_GravityCenter() { }
	// RVA: 0x704AC0 Offset: 0x7032C0 VA: 0x180704AC0
	public Vector3 get_Position() { }
	// RVA: 0x704B10 Offset: 0x703310 VA: 0x180704B10
	public void set_Position(Vector3 value) { }
	// RVA: 0x704B60 Offset: 0x703360 VA: 0x180704B60
	public Quaternion get_Rotation() { }
	// RVA: 0x704BB0 Offset: 0x7033B0 VA: 0x180704BB0
	public void set_Rotation(Quaternion value) { }
	// RVA: 0x704BF0 Offset: 0x7033F0 VA: 0x180704BF0
	public Vector3 get_RigidbodyUp() { }
	// RVA: 0x704D40 Offset: 0x703540 VA: 0x180704D40
	public Vector3 get_RigidbodyForward() { }
	// RVA: 0x704EA0 Offset: 0x7036A0 VA: 0x180704EA0
	public Vector3 get_RigidbodyRight() { }
	// RVA: 0x705000 Offset: 0x703800 VA: 0x180705000
	public RigidbodyComponent get_RigidbodyComponent() { }
	// RVA: 0x705020 Offset: 0x703820 VA: 0x180705020
	public ColliderComponent get_ColliderComponent() { }
	// RVA: 0x705040 Offset: 0x703840 VA: 0x180705040
	public List<Contact> get_Contacts() { }
	// RVA: 0x705110 Offset: 0x703910 VA: 0x180705110
	public List<Contact> get_CollisionResponseContacts() { }
	// RVA: 0x7051D0 Offset: 0x7039D0 VA: 0x1807051D0
	private void HandleRotation(float dt) { }
	// RVA: 0x7056E0 Offset: 0x703EE0 VA: 0x1807056E0
	public Vector3 get_UpDirection() { }
	// RVA: 0x705710 Offset: 0x703F10 VA: 0x180705710
	public Vector3 get_ForwardDirection() { }
	// RVA: 0x705730 Offset: 0x703F30 VA: 0x180705730
	public Vector3 get_RightDirection() { }
	// RVA: 0x705890 Offset: 0x704090 VA: 0x180705890
	public void SetForwardDirection(Vector3 forwardDirection) { }
	// RVA: 0x705AE0 Offset: 0x7042E0 VA: 0x180705AE0
	private void GetNewestContacts() { }
	// RVA: 0x705CE0 Offset: 0x7044E0 VA: 0x180705CE0
	public void UpdateCharacter(float dt) { }
	// RVA: 0x706040 Offset: 0x704840 VA: 0x180706040
	private void HandleSize(Vector3 position, float dt) { }
	// RVA: 0x7061A0 Offset: 0x7049A0 VA: 0x1807061A0
	public void IgnoreLayerMask(bool ignore, LayerMask layerMask) { }
	// RVA: 0x7062A0 Offset: 0x704AA0 VA: 0x1807062A0
	public void IgnoreLayer(int ignoredLayer, bool ignore) { }
	// RVA: 0x706390 Offset: 0x704B90 VA: 0x180706390
	private void OnTriggerEnterMethod(GameObject trigger) { }
	// RVA: 0x7063B0 Offset: 0x704BB0 VA: 0x1807063B0
	private void OnTriggerExitMethod(GameObject trigger) { }
	// RVA: 0x7063D0 Offset: 0x704BD0 VA: 0x1807063D0
	public void add_OnTriggerEnter(Action value) { }
	// RVA: 0x7064B0 Offset: 0x704CB0 VA: 0x1807064B0
	public void remove_OnTriggerEnter(Action value) { }
	// RVA: 0x706590 Offset: 0x704D90 VA: 0x180706590
	public void add_OnTriggerExit(Action value) { }
	// RVA: 0x706670 Offset: 0x704E70 VA: 0x180706670
	public void remove_OnTriggerExit(Action value) { }
	// RVA: 0x706750 Offset: 0x704F50 VA: 0x180706750
	public void add_OnHeadHit(Action<CollisionInfo> value) { }
	// RVA: 0x706830 Offset: 0x705030 VA: 0x180706830
	public void remove_OnHeadHit(Action<CollisionInfo> value) { }
	// RVA: 0x706910 Offset: 0x705110 VA: 0x180706910
	public void add_OnWallHit(Action<CollisionInfo> value) { }
	// RVA: 0x7069F0 Offset: 0x7051F0 VA: 0x1807069F0
	public void remove_OnWallHit(Action<CollisionInfo> value) { }
	// RVA: 0x706AD0 Offset: 0x7052D0 VA: 0x180706AD0
	public void add_OnTeleport(Action<Vector3, Quaternion> value) { }
	// RVA: 0x706BB0 Offset: 0x7053B0 VA: 0x180706BB0
	public void remove_OnTeleport(Action<Vector3, Quaternion> value) { }
	// RVA: 0x706C90 Offset: 0x705490 VA: 0x180706C90
	public void add_OnStepUp(Action<Vector3, float> value) { }
	// RVA: 0x706D70 Offset: 0x705570 VA: 0x180706D70
	public void remove_OnStepUp(Action<Vector3, float> value) { }
	// RVA: 0x706E50 Offset: 0x705650 VA: 0x180706E50
	public void add_OnGroundedStateEnter(Action<Vector3> value) { }
	// RVA: 0x706F30 Offset: 0x705730 VA: 0x180706F30
	public void remove_OnGroundedStateEnter(Action<Vector3> value) { }
	// RVA: 0x707010 Offset: 0x705810 VA: 0x180707010
	public void add_OnGroundedStateExit(Action value) { }
	// RVA: 0x7070F0 Offset: 0x7058F0 VA: 0x1807070F0
	public void remove_OnGroundedStateExit(Action value) { }
	// RVA: 0x7071D0 Offset: 0x7059D0 VA: 0x1807071D0
	public void Teleport(Transform reference) { }
	// RVA: 0x7072D0 Offset: 0x705AD0 VA: 0x1807072D0
	public void Teleport(Vector3 position, Quaternion rotation) { }
	// RVA: 0x707300 Offset: 0x705B00 VA: 0x180707300
	private void HandleTeleportation() { }
	// RVA: 0x707510 Offset: 0x705D10 VA: 0x180707510
	private void HandlePosition(ref Vector3 position, ref Vector3 initialPosition, Vector3 displacement, float dt) { }
	// RVA: 0x707B80 Offset: 0x706380 VA: 0x180707B80
	private void OnStepUpMethod(Vector3 position, float stepUpHeight) { }
	// RVA: 0x707BC0 Offset: 0x7063C0 VA: 0x180707BC0
	public Vector3 get_TargetPosition() { }
	// RVA: 0x707BE0 Offset: 0x7063E0 VA: 0x180707BE0
	private void GroundedMovement(ref Vector3 position, ref Vector3 initialPosition, Vector3 displacement, ref bool stepUpResult) { }
	// RVA: 0x707EE0 Offset: 0x7066E0 VA: 0x180707EE0
	private void NotGroundedMovement(ref Vector3 position, ref Vector3 initialPosition, Vector3 displacement) { }
	// RVA: 0x7081E0 Offset: 0x7069E0 VA: 0x1807081E0
	private void NotGroundedPlanarMovement(ref Vector3 position, ref Vector3 initialPosition, Vector3 planarDisplacement) { }
	// RVA: 0x708280 Offset: 0x706A80 VA: 0x180708280
	private void NotGroundedVerticalMovement(ref Vector3 position, Vector3 verticalDisplacement) { }
	// RVA: 0x708700 Offset: 0x706F00 VA: 0x180708700
	private void SetWallCollisionInfo(CollisionInfo collisionInfo) { }
	// RVA: 0x708D40 Offset: 0x707540 VA: 0x180708D40
	private void SetGroundCollisionInfo(CollisionInfo collisionInfo) { }
	// RVA: 0x709180 Offset: 0x707980 VA: 0x180709180
	private bool CheckForGround(out CollisionInfo collisionInfo, Vector3 footPosition, bool grounded, LayerMask layerMask) { }
	// RVA: 0x709570 Offset: 0x707D70 VA: 0x180709570
	protected bool CheckForStableGround(out CollisionInfo collisionInfo, Vector3 footPosition, Vector3 direction, LayerMask layerMask) { }
	// RVA: 0x709820 Offset: 0x708020 VA: 0x180709820
	protected bool CastBody(out CollisionInfo collisionInfo, Vector3 footPosition, Vector3 displacement, bool grounded, LayerMask layerMask) { }
	// RVA: 0x709D10 Offset: 0x708510 VA: 0x180709D10
	protected bool CastBodyVertically(out CollisionInfo collisionInfo, Vector3 footPosition, float verticalComponent, LayerMask layerMask) { }
	// RVA: 0x70A100 Offset: 0x708900 VA: 0x18070A100
	public bool CheckOverlapWithLayerMask(Vector3 footPosition, LayerMask layerMask) { }
	// RVA: 0x70A200 Offset: 0x708A00 VA: 0x18070A200
	private bool CheckTargetBodySize(Vector3 position) { }
	// RVA: 0x70A670 Offset: 0x708E70 VA: 0x18070A670
	private void ProbeGround(ref Vector3 position, bool grounded) { }
	// RVA: 0x70B0B0 Offset: 0x7098B0 VA: 0x18070B0B0
	private void EdgeCompensation(ref Vector3 position) { }
	// RVA: 0x228AA0 Offset: 0x2272A0 VA: 0x180228AA0
	public void SetTargetBodySize(Vector2 targetBodySize) { }
	// RVA: 0x70B290 Offset: 0x709A90 VA: 0x18070B290
	private void ForceNotGroundedInternal() { }
	// RVA: 0x70B2D0 Offset: 0x709AD0 VA: 0x18070B2D0
	public void ForceNotGrounded() { }
	// RVA: 0x70B2E0 Offset: 0x709AE0 VA: 0x18070B2E0
	private bool IsAStableEdge(CollisionInfo collisionInfo) { }
	// RVA: 0x70B320 Offset: 0x709B20 VA: 0x18070B320
	private bool IsAnUnstableEdge(CollisionInfo collisionInfo) { }
	// RVA: 0x70B360 Offset: 0x709B60 VA: 0x18070B360
	private bool IsValidForStepUp(CollisionInfo collisionInfo) { }
	// RVA: 0x70B4B0 Offset: 0x709CB0 VA: 0x18070B4B0 Slot: 9
	protected virtual void CollideAndSlide(ref Vector3 position, ref Vector3 initialPosition, Vector3 displacement, Vector3 groundPlaneNormal, ref bool stepUpResult) { }
	// RVA: 0x70BD50 Offset: 0x70A550 VA: 0x18070BD50 Slot: 10
	protected virtual void CollideAndSlide(ref Vector3 position, ref Vector3 initialPosition, Vector3 displacement, Vector3 groundPlaneNormal) { }
	// RVA: 0x70C220 Offset: 0x70AA20 VA: 0x18070C220
	private bool UpdateSlidingPlanes(int iteration, bool stepUpResult, CollisionInfo collisionInfo, ref Vector3 slidingPlaneNormal, ref Vector3 groundPlaneNormal, ref Vector3 displacement) { }
	// RVA: 0x70C6B0 Offset: 0x70AEB0 VA: 0x18070C6B0
	private bool StepUp(ref Vector3 position, ref Vector3 displacement, out CollisionInfo stepUpResultInfo) { }
	// RVA: 0x70CDA0 Offset: 0x70B5A0 VA: 0x18070CDA0
	private bool StepUpShrink(ref Vector3 position, ref Vector3 displacement, out CollisionInfo stepUpResultInfo) { }
	// RVA: 0x70D1B0 Offset: 0x70B9B0 VA: 0x18070D1B0
	private void UpdateCollisionInfo(out CollisionInfo collisionInfo, HitInfo hitInfo, Vector3 castDisplacement, float skin, LayerMask layerMask) { }
	// RVA: 0x70D480 Offset: 0x70BC80 VA: 0x18070D480
	private void UpdateEdgeInfo(ref CollisionInfo collisionInfo, LayerMask layerMask) { }
	// RVA: 0x70DB90 Offset: 0x70C390 VA: 0x18070DB90
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Core
public abstract class CharacterActorBehaviour : MonoBehaviour // TypeDefIndex: 3230
{
	// Fields
	protected CharacterActor characterActor; // 0x18

	// Properties
	public CharacterActor CharacterActor { get; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public CharacterActor get_CharacterActor() { }
	// RVA: 0x16EEA0 Offset: 0x16D6A0 VA: 0x18016EEA0 Slot: 4
	public virtual void Initialize(CharacterActor characterActor) { }
	// RVA: -1 Offset: -1 Slot: 5
	public abstract void UpdateBehaviour(float dt) { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Core
public enum CharacterBodyType // TypeDefIndex: 3231
{
	// Fields
	public int value__; // 0x0
	public const CharacterBodyType Sphere = 0; // 0x0
	public const CharacterBodyType Capsule = 1; // 0x0
}

// Namespace: Lightbug.CharacterControllerPro.Core
public class CharacterBody : MonoBehaviour // TypeDefIndex: 3232
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool is2D; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CharacterBodyType bodyType; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector2 bodySize; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float mass; // 0x28
	private RigidbodyComponent rigidbodyComponent; // 0x30
	private ColliderComponent colliderComponent; // 0x38

	// Properties
	public bool Is2D { get; }
	public RigidbodyComponent RigidbodyComponent { get; }
	public ColliderComponent ColliderComponent { get; }
	public float Mass { get; }
	public Vector2 BodySize { get; }
	public CharacterBodyType BodyType { get; }

	// Methods
	// RVA: 0x28C960 Offset: 0x28B160 VA: 0x18028C960
	public bool get_Is2D() { }
	// RVA: 0x16E6D0 Offset: 0x16CED0 VA: 0x18016E6D0
	public RigidbodyComponent get_RigidbodyComponent() { }
	// RVA: 0x16E6E0 Offset: 0x16CEE0 VA: 0x18016E6E0
	public ColliderComponent get_ColliderComponent() { }
	// RVA: 0x28CBB0 Offset: 0x28B3B0 VA: 0x18028CBB0
	public float get_Mass() { }
	// RVA: 0x66AD40 Offset: 0x669540 VA: 0x18066AD40
	public Vector2 get_BodySize() { }
	// RVA: 0x202970 Offset: 0x201170 VA: 0x180202970
	public CharacterBodyType get_BodyType() { }
	// RVA: 0x70F850 Offset: 0x70E050 VA: 0x18070F850
	public void Initialize() { }
	// RVA: 0x70FA90 Offset: 0x70E290 VA: 0x18070FA90
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Core
public struct CharacterCollisionInfo // TypeDefIndex: 3233
{
	// Fields
	public Vector3 groundContactPoint; // 0x0
	public Vector3 groundContactNormal; // 0xC
	public Vector3 groundStableNormal; // 0x18
	public float stableSlopeAngle; // 0x24
	public bool isOnEdge; // 0x28
	public float edgeAngle; // 0x2C
	public bool wallCollision; // 0x30
	public Vector3 wallContactPoint; // 0x34
	public Vector3 wallContactNormal; // 0x40
	public float wallAngle; // 0x4C
	public GameObject wallObject; // 0x50
	public Collider wallCollider3D; // 0x58
	public Collider2D wallCollider2D; // 0x60
	public Rigidbody wallRigidbody3D; // 0x68
	public Rigidbody2D wallRigidbody2D; // 0x70
	public GameObject groundObject; // 0x78
	public int groundLayer; // 0x80
	public Collider groundCollider3D; // 0x88
	public Collider2D groundCollider2D; // 0x90
	public Rigidbody groundRigidbody3D; // 0x98
	public Rigidbody2D groundRigidbody2D; // 0xA0

	// Methods
	// RVA: 0x1054E0 Offset: 0x1048E0 VA: 0x1801054E0
	public void Reset() { }
	// RVA: 0x105500 Offset: 0x104900 VA: 0x180105500
	public void ResetGroundInfo() { }
	// RVA: 0x105510 Offset: 0x104910 VA: 0x180105510
	public void ResetWallInfo() { }
}

// Namespace: Lightbug.CharacterControllerPro.Core
public class CharacterDebug : MonoBehaviour // TypeDefIndex: 3234
{
	// Fields
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Text text; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CharacterActor characterMotor; // 0x20
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool debugCollisionFlags; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool debugEvents; // 0x29
	private float time; // 0x2C

	// Methods
	// RVA: 0x711C60 Offset: 0x710460 VA: 0x180711C60
	private void Awake() { }
	// RVA: 0x711D90 Offset: 0x710590 VA: 0x180711D90
	private void Update() { }
	// RVA: 0x711E70 Offset: 0x710670 VA: 0x180711E70
	private void OnEnable() { }
	// RVA: 0x712120 Offset: 0x710920 VA: 0x180712120
	private void OnDisable() { }
	// RVA: 0x7123D0 Offset: 0x710BD0 VA: 0x1807123D0
	private void OnWallHit(CollisionInfo collisionInfo) { }
	// RVA: 0x712460 Offset: 0x710C60 VA: 0x180712460
	private void OnEnterGroundedState(Vector3 localVelocity) { }
	// RVA: 0x712520 Offset: 0x710D20 VA: 0x180712520
	private void OnExitGroundedState() { }
	// RVA: 0x7125B0 Offset: 0x710DB0 VA: 0x1807125B0
	private void OnHeadHit(CollisionInfo collisionInfo) { }
	// RVA: 0x712640 Offset: 0x710E40 VA: 0x180712640
	private void OnStepUp(Vector3 position, float stepUpHeight) { }
	// RVA: 0x712750 Offset: 0x710F50 VA: 0x180712750
	private void OnTeleportation(Vector3 position, Quaternion rotation) { }
	// RVA: 0x712840 Offset: 0x711040 VA: 0x180712840
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Core
public class CharacterGraphics : MonoBehaviour // TypeDefIndex: 3235
{
	// Fields
	private const float MaxRotationSlerpSpeed = 40; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private CharacterGraphics.FacingDirectionMode facingDirectionMode; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private Vector3 rotationOffset; // 0x1C
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private float rotationSmoothness; // 0x28
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool scaleAffectedByBodySize; // 0x2C
	private Vector3 positionOffset; // 0x30
	private Vector3 initialScale; // 0x3C
	private Transform characterTransform; // 0x48
	private CharacterActor characterActor; // 0x50
	private CharacterGraphics.GraphicsChild[] childs; // 0x58

	// Methods
	// RVA: 0x712850 Offset: 0x711050 VA: 0x180712850
	private void Awake() { }
	// RVA: 0x712CA0 Offset: 0x7114A0 VA: 0x180712CA0
	private void Start() { }
	// RVA: 0x712DD0 Offset: 0x7115D0 VA: 0x180712DD0
	private void OnEnable() { }
	// RVA: 0x712E80 Offset: 0x711680 VA: 0x180712E80
	private void OnDisable() { }
	// RVA: 0x712F30 Offset: 0x711730 VA: 0x180712F30
	private void OnTeleportation(Vector3 position, Quaternion rotation) { }
	// RVA: 0x712FF0 Offset: 0x7117F0 VA: 0x180712FF0
	private void Update() { }
	// RVA: 0x7134A0 Offset: 0x711CA0 VA: 0x1807134A0
	private void ScaleByBodySize() { }
	// RVA: 0x7135B0 Offset: 0x711DB0 VA: 0x1807135B0
	private void HandleRotation(float dt) { }
	// RVA: 0x713DE0 Offset: 0x7125E0 VA: 0x180713DE0
	public void .ctor() { }
}

// Namespace: 
public enum CharacterGraphics.FacingDirectionMode // TypeDefIndex: 3236
{
	// Fields
	public int value__; // 0x0
	public const CharacterGraphics.FacingDirectionMode Rotation = 0; // 0x0
	public const CharacterGraphics.FacingDirectionMode Scale = 1; // 0x0
}

// Namespace: 
private struct CharacterGraphics.GraphicsChild // TypeDefIndex: 3237
{
	// Fields
	public Transform transform; // 0x0
	public Vector3 initialScale; // 0x8
}

// Namespace: Lightbug.CharacterControllerPro.Core
public class CharacterTagsAndLayersProfile : ScriptableObject // TypeDefIndex: 3238
{
	// Fields
	public LayerMask staticObstaclesLayerMask; // 0x18
	public LayerMask dynamicGroundLayerMask; // 0x1C
	public LayerMask dynamicRigidbodiesLayerMask; // 0x20
	public string contactRigidbodiesTag; // 0x28

	// Methods
	// RVA: 0x717410 Offset: 0x715C10 VA: 0x180717410
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Core
public struct CollisionInfo // TypeDefIndex: 3239
{
	// Fields
	public HitInfo hitInfo; // 0x0
	public bool collision; // 0x58
	public Vector3 displacement; // 0x5C
	public float contactSlopeAngle; // 0x68
	public bool isAnEdge; // 0x6C
	public bool isAStep; // 0x6D
	public Vector3 edgeUpperNormal; // 0x70
	public Vector3 edgeLowerNormal; // 0x7C
	public float edgeUpperSlopeAngle; // 0x88
	public float edgeLowerSlopeAngle; // 0x8C
	public float edgeAngle; // 0x90
}

// Namespace: Lightbug.CharacterControllerPro.Core
public struct DynamicGroundInfo // TypeDefIndex: 3240
{
	// Fields
	private Transform transform; // 0x0
	private KinematicPlatform kinematicPlatform; // 0x8
	public Vector3 previousPosition; // 0x10
	public Quaternion previousRotation; // 0x1C

	// Properties
	public Transform Transform { get; }
	public bool IsActive { get; }
	public Vector3 RigidbodyPosition { get; }
	public Quaternion RigidbodyRotation { get; }

	// Methods
	// RVA: 0x1044E0 Offset: 0x1038E0 VA: 0x1801044E0
	public void Reset() { }
	// RVA: 0x1E50 Offset: 0x1250 VA: 0x180001E50
	public Transform get_Transform() { }
	// RVA: 0x1044F0 Offset: 0x1038F0 VA: 0x1801044F0
	public bool get_IsActive() { }
	// RVA: 0x104500 Offset: 0x103900 VA: 0x180104500
	public Vector3 get_RigidbodyPosition() { }
	// RVA: 0x104520 Offset: 0x103920 VA: 0x180104520
	public Quaternion get_RigidbodyRotation() { }
	// RVA: 0x104540 Offset: 0x103940 VA: 0x180104540
	public Vector3 GetPointVelocity(Vector3 footPosition) { }
	// RVA: 0x104580 Offset: 0x103980 VA: 0x180104580
	public void UpdateTarget(KinematicPlatform kinematicPlatform, Vector3 characterPosition) { }
}

// Namespace: Lightbug.CharacterControllerPro.Core
public abstract class KinematicActor : MonoBehaviour // TypeDefIndex: 3241
{
	// Fields
	private RigidbodyComponent rigidbodyComponent; // 0x18

	// Properties
	public RigidbodyComponent RigidbodyComponent { get; }

	// Methods
	// RVA: 0x16E990 Offset: 0x16D190 VA: 0x18016E990
	public RigidbodyComponent get_RigidbodyComponent() { }
	// RVA: 0x6A4370 Offset: 0x6A2B70 VA: 0x1806A4370 Slot: 4
	protected virtual void Awake() { }
	// RVA: 0x16AE10 Offset: 0x169610 VA: 0x18016AE10 Slot: 5
	public virtual void UpdateKinematicActor(float dt) { }
	// RVA: 0x6A45A0 Offset: 0x6A2DA0 VA: 0x1806A45A0 Slot: 6
	protected virtual void OnEnable() { }
	// RVA: 0x6A45D0 Offset: 0x6A2DD0 VA: 0x1806A45D0 Slot: 7
	protected virtual void OnDisable() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Core
public abstract class KinematicCamera : KinematicActor // TypeDefIndex: 3242
{
	// Fields
	private bool <InterpolationFlag>k__BackingField; // 0x20

	// Properties
	public bool InterpolationFlag { get; set; }

	// Methods
	// RVA: 0x20B410 Offset: 0x209C10 VA: 0x18020B410
	public bool get_InterpolationFlag() { }
	// RVA: 0x20B420 Offset: 0x209C20 VA: 0x18020B420
	protected void set_InterpolationFlag(bool value) { }
	// RVA: 0x6A4600 Offset: 0x6A2E00 VA: 0x1806A4600 Slot: 8
	protected virtual void Start() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	protected void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Core
public class KinematicPlatform : KinematicActor // TypeDefIndex: 3243
{
	// Methods
	// RVA: 0x6A4780 Offset: 0x6A2F80 VA: 0x1806A4780 Slot: 8
	protected virtual void Start() { }
	// RVA: 0x16ACF0 Offset: 0x1694F0 VA: 0x18016ACF0
	public void .ctor() { }
}

// Namespace: Lightbug.CharacterControllerPro.Core
[DefaultExecutionOrder] // RVA: 0x104060 Offset: 0x103460 VA: 0x180104060
public sealed class SceneController : MonoBehaviour // TypeDefIndex: 3244
{
	// Fields
	private static SceneController instance; // 0x0
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool autoSimulation; // 0x18
	[SerializeField] // RVA: 0x4D80 Offset: 0x4180 VA: 0x180004D80
	private bool useInterpolation; // 0x19
	private List<CharacterActor> characterActors; // 0x20
	private List<KinematicPlatform> kinematicPlatforms; // 0x28
	private List<KinematicCamera> kinematicCameras; // 0x30
	private Action<float> OnSimulationStart; // 0x38
	private Action<float> OnSimulationEnd; // 0x40
	private Action<float> OnCharacterSimulationStart; // 0x48
	private Action<float> OnCharacterSimulationEnd; // 0x50

	// Properties
	public static SceneController Instance { get; }

	// Methods
	// RVA: 0x6D26B0 Offset: 0x6D0EB0 VA: 0x1806D26B0
	public static SceneController get_Instance() { }
	// RVA: 0x6D2730 Offset: 0x6D0F30 VA: 0x1806D2730
	public static void CreateSceneController() { }
	// RVA: 0x6D27D0 Offset: 0x6D0FD0 VA: 0x1806D27D0
	public void add_OnSimulationStart(Action<float> value) { }
	// RVA: 0x6D28B0 Offset: 0x6D10B0 VA: 0x1806D28B0
	public void remove_OnSimulationStart(Action<float> value) { }
	// RVA: 0x6D2990 Offset: 0x6D1190 VA: 0x1806D2990
	public void add_OnSimulationEnd(Action<float> value) { }
	// RVA: 0x6D2A70 Offset: 0x6D1270 VA: 0x1806D2A70
	public void remove_OnSimulationEnd(Action<float> value) { }
	// RVA: 0x6D2B50 Offset: 0x6D1350 VA: 0x1806D2B50
	public void add_OnCharacterSimulationStart(Action<float> value) { }
	// RVA: 0x6D2C30 Offset: 0x6D1430 VA: 0x1806D2C30
	public void remove_OnCharacterSimulationStart(Action<float> value) { }
	// RVA: 0x6D2D10 Offset: 0x6D1510 VA: 0x1806D2D10
	public void add_OnCharacterSimulationEnd(Action<float> value) { }
	// RVA: 0x6D2DF0 Offset: 0x6D15F0 VA: 0x1806D2DF0
	public void remove_OnCharacterSimulationEnd(Action<float> value) { }
	// RVA: 0x6D2ED0 Offset: 0x6D16D0 VA: 0x1806D2ED0
	private void Awake() { }
	// RVA: 0x6D3010 Offset: 0x6D1810 VA: 0x1806D3010
	public void AddActor(CharacterActor characterActor) { }
	// RVA: 0x6D30B0 Offset: 0x6D18B0 VA: 0x1806D30B0
	public void AddActor(KinematicCamera kinematicCamera) { }
	// RVA: 0x6D3150 Offset: 0x6D1950 VA: 0x1806D3150
	public void AddActor(KinematicPlatform kinematicPlatform) { }
	// RVA: 0x6D31F0 Offset: 0x6D19F0 VA: 0x1806D31F0
	public void RemoveActor(CharacterActor characterActor) { }
	// RVA: 0x6D32D0 Offset: 0x6D1AD0 VA: 0x1806D32D0
	public void RemoveActor(KinematicCamera kinematicCamera) { }
	// RVA: 0x6D33B0 Offset: 0x6D1BB0 VA: 0x1806D33B0
	public void RemoveActor(KinematicPlatform kinematicPlatform) { }
	// RVA: 0x6D3490 Offset: 0x6D1C90 VA: 0x1806D3490
	private void InterpolateRigidbodyComponent(RigidbodyComponent rigidbodyComponent) { }
	// RVA: 0x6D36E0 Offset: 0x6D1EE0 VA: 0x1806D36E0
	private void FixedUpdate() { }
	// RVA: 0x6D3750 Offset: 0x6D1F50 VA: 0x1806D3750
	public void Simulate(float dt) { }
	// RVA: 0x6D3C10 Offset: 0x6D2410 VA: 0x1806D3C10
	public void .ctor() { }
}

// Namespace: 
internal sealed class <PrivateImplementationDetails> // TypeDefIndex: 3245
{
	// Fields
	internal static readonly <PrivateImplementationDetails>.__StaticArrayInitTypeSize=128 83C803A0255AF38CC9927E0C9D65E3D7EB8FA6E0 /*Metadata offset 0x160374*/; // 0xA15984
}

// Namespace: 
private struct <PrivateImplementationDetails>.__StaticArrayInitTypeSize=128 // TypeDefIndex: 3246
{}
